// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectEnvironmentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectEnvironmentsArgs Empty = new GetProjectEnvironmentsArgs();

    /**
     * Return the environment with this name. Mutually exclusive with search.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Return the environment with this name. Mutually exclusive with search.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or full path of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     * 
     */
    @Import(name="states")
    private @Nullable Output<String> states;

    /**
     * @return List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     * 
     */
    public Optional<Output<String>> states() {
        return Optional.ofNullable(this.states);
    }

    private GetProjectEnvironmentsArgs() {}

    private GetProjectEnvironmentsArgs(GetProjectEnvironmentsArgs $) {
        this.name = $.name;
        this.project = $.project;
        this.search = $.search;
        this.states = $.states;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectEnvironmentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectEnvironmentsArgs $;

        public Builder() {
            $ = new GetProjectEnvironmentsArgs();
        }

        public Builder(GetProjectEnvironmentsArgs defaults) {
            $ = new GetProjectEnvironmentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Return the environment with this name. Mutually exclusive with search.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Return the environment with this name. Mutually exclusive with search.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param search Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param states List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable Output<String> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
         * 
         * @return builder
         * 
         */
        public Builder states(String states) {
            return states(Output.of(states));
        }

        public GetProjectEnvironmentsArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectEnvironmentsArgs", "project");
            }
            return $;
        }
    }

}
