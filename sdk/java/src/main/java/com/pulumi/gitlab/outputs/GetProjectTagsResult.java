// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gitlab.outputs.GetProjectTagsTag;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectTagsResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Return tags ordered by `name` or `updated` fields. Default is `updated`.
     * 
     */
    private @Nullable String orderBy;
    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    private String project;
    /**
     * @return Return list of tags matching the search criteria. You can use `^term` and `term$` to find tags that begin and end with `term` respectively. No other regular expressions are supported.
     * 
     */
    private @Nullable String search;
    /**
     * @return Return tags sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    private @Nullable String sort;
    /**
     * @return List of repository tags from a project.
     * 
     */
    private List<GetProjectTagsTag> tags;

    private GetProjectTagsResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Return tags ordered by `name` or `updated` fields. Default is `updated`.
     * 
     */
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }
    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Return list of tags matching the search criteria. You can use `^term` and `term$` to find tags that begin and end with `term` respectively. No other regular expressions are supported.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return Return tags sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    public Optional<String> sort() {
        return Optional.ofNullable(this.sort);
    }
    /**
     * @return List of repository tags from a project.
     * 
     */
    public List<GetProjectTagsTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectTagsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable String orderBy;
        private String project;
        private @Nullable String search;
        private @Nullable String sort;
        private List<GetProjectTagsTag> tags;
        public Builder() {}
        public Builder(GetProjectTagsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.orderBy = defaults.orderBy;
    	      this.project = defaults.project;
    	      this.search = defaults.search;
    	      this.sort = defaults.sort;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder orderBy(@Nullable String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder search(@Nullable String search) {
            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder sort(@Nullable String sort) {
            this.sort = sort;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetProjectTagsTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetProjectTagsTag... tags) {
            return tags(List.of(tags));
        }
        public GetProjectTagsResult build() {
            final var _resultValue = new GetProjectTagsResult();
            _resultValue.id = id;
            _resultValue.orderBy = orderBy;
            _resultValue.project = project;
            _resultValue.search = search;
            _resultValue.sort = sort;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
