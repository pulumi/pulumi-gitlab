// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectApprovalRulesApprovalRule {
    /**
     * @return If true, applies the rule to all protected branches, ignoring the protected branches attribute.
     * 
     */
    private Boolean appliesToAllProtectedBranches;
    /**
     * @return The number of approvals required for this rule.
     * 
     */
    private Integer approvalsRequired;
    /**
     * @return List of all approver IDs that are eligible to approve this rule.
     * 
     */
    private List<Integer> eligibleApproverIds;
    /**
     * @return List of group IDs that are eligible to approve this rule.
     * 
     */
    private List<Integer> groupIds;
    /**
     * @return The ID of the approval rule.
     * 
     */
    private Integer id;
    /**
     * @return The name of the approval rule.
     * 
     */
    private String name;
    /**
     * @return List of protected branch IDs that this rule applies to.
     * 
     */
    private List<Integer> protectedBranchIds;
    /**
     * @return The report type. Required when the rule type is `reportApprover`. The supported report types are `licenseScanning` and `codeCoverage`.
     * 
     */
    private String reportType;
    /**
     * @return The type of the approval rule. Can be `anyApprover`, `regular` or `reportApprover`.
     * 
     */
    private String ruleType;
    /**
     * @return List of user IDs that are eligible to approve this rule.
     * 
     */
    private List<Integer> userIds;

    private GetProjectApprovalRulesApprovalRule() {}
    /**
     * @return If true, applies the rule to all protected branches, ignoring the protected branches attribute.
     * 
     */
    public Boolean appliesToAllProtectedBranches() {
        return this.appliesToAllProtectedBranches;
    }
    /**
     * @return The number of approvals required for this rule.
     * 
     */
    public Integer approvalsRequired() {
        return this.approvalsRequired;
    }
    /**
     * @return List of all approver IDs that are eligible to approve this rule.
     * 
     */
    public List<Integer> eligibleApproverIds() {
        return this.eligibleApproverIds;
    }
    /**
     * @return List of group IDs that are eligible to approve this rule.
     * 
     */
    public List<Integer> groupIds() {
        return this.groupIds;
    }
    /**
     * @return The ID of the approval rule.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The name of the approval rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of protected branch IDs that this rule applies to.
     * 
     */
    public List<Integer> protectedBranchIds() {
        return this.protectedBranchIds;
    }
    /**
     * @return The report type. Required when the rule type is `reportApprover`. The supported report types are `licenseScanning` and `codeCoverage`.
     * 
     */
    public String reportType() {
        return this.reportType;
    }
    /**
     * @return The type of the approval rule. Can be `anyApprover`, `regular` or `reportApprover`.
     * 
     */
    public String ruleType() {
        return this.ruleType;
    }
    /**
     * @return List of user IDs that are eligible to approve this rule.
     * 
     */
    public List<Integer> userIds() {
        return this.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectApprovalRulesApprovalRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean appliesToAllProtectedBranches;
        private Integer approvalsRequired;
        private List<Integer> eligibleApproverIds;
        private List<Integer> groupIds;
        private Integer id;
        private String name;
        private List<Integer> protectedBranchIds;
        private String reportType;
        private String ruleType;
        private List<Integer> userIds;
        public Builder() {}
        public Builder(GetProjectApprovalRulesApprovalRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliesToAllProtectedBranches = defaults.appliesToAllProtectedBranches;
    	      this.approvalsRequired = defaults.approvalsRequired;
    	      this.eligibleApproverIds = defaults.eligibleApproverIds;
    	      this.groupIds = defaults.groupIds;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.protectedBranchIds = defaults.protectedBranchIds;
    	      this.reportType = defaults.reportType;
    	      this.ruleType = defaults.ruleType;
    	      this.userIds = defaults.userIds;
        }

        @CustomType.Setter
        public Builder appliesToAllProtectedBranches(Boolean appliesToAllProtectedBranches) {
            if (appliesToAllProtectedBranches == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "appliesToAllProtectedBranches");
            }
            this.appliesToAllProtectedBranches = appliesToAllProtectedBranches;
            return this;
        }
        @CustomType.Setter
        public Builder approvalsRequired(Integer approvalsRequired) {
            if (approvalsRequired == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "approvalsRequired");
            }
            this.approvalsRequired = approvalsRequired;
            return this;
        }
        @CustomType.Setter
        public Builder eligibleApproverIds(List<Integer> eligibleApproverIds) {
            if (eligibleApproverIds == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "eligibleApproverIds");
            }
            this.eligibleApproverIds = eligibleApproverIds;
            return this;
        }
        public Builder eligibleApproverIds(Integer... eligibleApproverIds) {
            return eligibleApproverIds(List.of(eligibleApproverIds));
        }
        @CustomType.Setter
        public Builder groupIds(List<Integer> groupIds) {
            if (groupIds == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "groupIds");
            }
            this.groupIds = groupIds;
            return this;
        }
        public Builder groupIds(Integer... groupIds) {
            return groupIds(List.of(groupIds));
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protectedBranchIds(List<Integer> protectedBranchIds) {
            if (protectedBranchIds == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "protectedBranchIds");
            }
            this.protectedBranchIds = protectedBranchIds;
            return this;
        }
        public Builder protectedBranchIds(Integer... protectedBranchIds) {
            return protectedBranchIds(List.of(protectedBranchIds));
        }
        @CustomType.Setter
        public Builder reportType(String reportType) {
            if (reportType == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "reportType");
            }
            this.reportType = reportType;
            return this;
        }
        @CustomType.Setter
        public Builder ruleType(String ruleType) {
            if (ruleType == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "ruleType");
            }
            this.ruleType = ruleType;
            return this;
        }
        @CustomType.Setter
        public Builder userIds(List<Integer> userIds) {
            if (userIds == null) {
              throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRule", "userIds");
            }
            this.userIds = userIds;
            return this;
        }
        public Builder userIds(Integer... userIds) {
            return userIds(List.of(userIds));
        }
        public GetProjectApprovalRulesApprovalRule build() {
            final var _resultValue = new GetProjectApprovalRulesApprovalRule();
            _resultValue.appliesToAllProtectedBranches = appliesToAllProtectedBranches;
            _resultValue.approvalsRequired = approvalsRequired;
            _resultValue.eligibleApproverIds = eligibleApproverIds;
            _resultValue.groupIds = groupIds;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.protectedBranchIds = protectedBranchIds;
            _resultValue.reportType = reportType;
            _resultValue.ruleType = ruleType;
            _resultValue.userIds = userIds;
            return _resultValue;
        }
    }
}
