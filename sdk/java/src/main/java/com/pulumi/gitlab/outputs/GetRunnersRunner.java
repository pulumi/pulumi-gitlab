// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRunnersRunner {
    /**
     * @return The description of the runner.
     * 
     */
    private String description;
    /**
     * @return The runner id.
     * 
     */
    private Integer id;
    /**
     * @return Indicates if this is a shared runner
     * 
     */
    private Boolean isShared;
    /**
     * @return The connectivity status of the runner.
     * 
     */
    private Boolean online;
    /**
     * @return Indicates if the runner is accepting or ignoring new jobs.
     * 
     */
    private Boolean paused;
    /**
     * @return The runner type. Values are `instanceType`, `groupType` and `projectType`.
     * 
     */
    private String runnerType;
    /**
     * @return The status of the runner. Values can be `online`, `offline`, `stale`, and `neverContacted`.
     * 
     */
    private String status;

    private GetRunnersRunner() {}
    /**
     * @return The description of the runner.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The runner id.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return Indicates if this is a shared runner
     * 
     */
    public Boolean isShared() {
        return this.isShared;
    }
    /**
     * @return The connectivity status of the runner.
     * 
     */
    public Boolean online() {
        return this.online;
    }
    /**
     * @return Indicates if the runner is accepting or ignoring new jobs.
     * 
     */
    public Boolean paused() {
        return this.paused;
    }
    /**
     * @return The runner type. Values are `instanceType`, `groupType` and `projectType`.
     * 
     */
    public String runnerType() {
        return this.runnerType;
    }
    /**
     * @return The status of the runner. Values can be `online`, `offline`, `stale`, and `neverContacted`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRunnersRunner defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Integer id;
        private Boolean isShared;
        private Boolean online;
        private Boolean paused;
        private String runnerType;
        private String status;
        public Builder() {}
        public Builder(GetRunnersRunner defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isShared = defaults.isShared;
    	      this.online = defaults.online;
    	      this.paused = defaults.paused;
    	      this.runnerType = defaults.runnerType;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRunnersRunner", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRunnersRunner", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isShared(Boolean isShared) {
            if (isShared == null) {
              throw new MissingRequiredPropertyException("GetRunnersRunner", "isShared");
            }
            this.isShared = isShared;
            return this;
        }
        @CustomType.Setter
        public Builder online(Boolean online) {
            if (online == null) {
              throw new MissingRequiredPropertyException("GetRunnersRunner", "online");
            }
            this.online = online;
            return this;
        }
        @CustomType.Setter
        public Builder paused(Boolean paused) {
            if (paused == null) {
              throw new MissingRequiredPropertyException("GetRunnersRunner", "paused");
            }
            this.paused = paused;
            return this;
        }
        @CustomType.Setter
        public Builder runnerType(String runnerType) {
            if (runnerType == null) {
              throw new MissingRequiredPropertyException("GetRunnersRunner", "runnerType");
            }
            this.runnerType = runnerType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRunnersRunner", "status");
            }
            this.status = status;
            return this;
        }
        public GetRunnersRunner build() {
            final var _resultValue = new GetRunnersRunner();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.isShared = isShared;
            _resultValue.online = online;
            _resultValue.paused = paused;
            _resultValue.runnerType = runnerType;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
