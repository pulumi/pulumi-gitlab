// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectIntegrationYoutrackState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIntegrationYoutrackState Empty = new ProjectIntegrationYoutrackState();

    /**
     * URL to view an issue in the external issue tracker. Must contain :id.
     * 
     */
    @Import(name="issuesUrl")
    private @Nullable Output<String> issuesUrl;

    /**
     * @return URL to view an issue in the external issue tracker. Must contain :id.
     * 
     */
    public Optional<Output<String>> issuesUrl() {
        return Optional.ofNullable(this.issuesUrl);
    }

    /**
     * ID or namespace of the project you want to activate integration on.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return ID or namespace of the project you want to activate integration on.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * URL of the project in the external issue tracker.
     * 
     */
    @Import(name="projectUrl")
    private @Nullable Output<String> projectUrl;

    /**
     * @return URL of the project in the external issue tracker.
     * 
     */
    public Optional<Output<String>> projectUrl() {
        return Optional.ofNullable(this.projectUrl);
    }

    private ProjectIntegrationYoutrackState() {}

    private ProjectIntegrationYoutrackState(ProjectIntegrationYoutrackState $) {
        this.issuesUrl = $.issuesUrl;
        this.project = $.project;
        this.projectUrl = $.projectUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIntegrationYoutrackState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIntegrationYoutrackState $;

        public Builder() {
            $ = new ProjectIntegrationYoutrackState();
        }

        public Builder(ProjectIntegrationYoutrackState defaults) {
            $ = new ProjectIntegrationYoutrackState(Objects.requireNonNull(defaults));
        }

        /**
         * @param issuesUrl URL to view an issue in the external issue tracker. Must contain :id.
         * 
         * @return builder
         * 
         */
        public Builder issuesUrl(@Nullable Output<String> issuesUrl) {
            $.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * @param issuesUrl URL to view an issue in the external issue tracker. Must contain :id.
         * 
         * @return builder
         * 
         */
        public Builder issuesUrl(String issuesUrl) {
            return issuesUrl(Output.of(issuesUrl));
        }

        /**
         * @param project ID or namespace of the project you want to activate integration on.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project ID or namespace of the project you want to activate integration on.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectUrl URL of the project in the external issue tracker.
         * 
         * @return builder
         * 
         */
        public Builder projectUrl(@Nullable Output<String> projectUrl) {
            $.projectUrl = projectUrl;
            return this;
        }

        /**
         * @param projectUrl URL of the project in the external issue tracker.
         * 
         * @return builder
         * 
         */
        public Builder projectUrl(String projectUrl) {
            return projectUrl(Output.of(projectUrl));
        }

        public ProjectIntegrationYoutrackState build() {
            return $;
        }
    }

}
