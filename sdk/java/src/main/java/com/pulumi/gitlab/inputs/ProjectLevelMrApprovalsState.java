// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectLevelMrApprovalsState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectLevelMrApprovalsState Empty = new ProjectLevelMrApprovalsState();

    /**
     * Set to `true` to disable overriding approvers per merge request.
     * 
     */
    @Import(name="disableOverridingApproversPerMergeRequest")
    private @Nullable Output<Boolean> disableOverridingApproversPerMergeRequest;

    /**
     * @return Set to `true` to disable overriding approvers per merge request.
     * 
     */
    public Optional<Output<Boolean>> disableOverridingApproversPerMergeRequest() {
        return Optional.ofNullable(this.disableOverridingApproversPerMergeRequest);
    }

    /**
     * Set to `true` to allow merge requests authors to approve their own merge requests.
     * 
     */
    @Import(name="mergeRequestsAuthorApproval")
    private @Nullable Output<Boolean> mergeRequestsAuthorApproval;

    /**
     * @return Set to `true` to allow merge requests authors to approve their own merge requests.
     * 
     */
    public Optional<Output<Boolean>> mergeRequestsAuthorApproval() {
        return Optional.ofNullable(this.mergeRequestsAuthorApproval);
    }

    /**
     * Set to `true` to disable merge request committers from approving their own merge requests.
     * 
     */
    @Import(name="mergeRequestsDisableCommittersApproval")
    private @Nullable Output<Boolean> mergeRequestsDisableCommittersApproval;

    /**
     * @return Set to `true` to disable merge request committers from approving their own merge requests.
     * 
     */
    public Optional<Output<Boolean>> mergeRequestsDisableCommittersApproval() {
        return Optional.ofNullable(this.mergeRequestsDisableCommittersApproval);
    }

    /**
     * The ID or URL-encoded path of a project to change MR approval configuration.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or URL-encoded path of a project to change MR approval configuration.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Set to `true` to require authentication to approve merge requests.
     * 
     */
    @Import(name="requirePasswordToApprove")
    private @Nullable Output<Boolean> requirePasswordToApprove;

    /**
     * @return Set to `true` to require authentication to approve merge requests.
     * 
     */
    public Optional<Output<Boolean>> requirePasswordToApprove() {
        return Optional.ofNullable(this.requirePasswordToApprove);
    }

    /**
     * Set to `true` to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
     * 
     */
    @Import(name="resetApprovalsOnPush")
    private @Nullable Output<Boolean> resetApprovalsOnPush;

    /**
     * @return Set to `true` to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> resetApprovalsOnPush() {
        return Optional.ofNullable(this.resetApprovalsOnPush);
    }

    /**
     * Reset approvals from Code Owners if their files changed. Can be enabled only if reset*approvals*on_push is disabled.
     * 
     */
    @Import(name="selectiveCodeOwnerRemovals")
    private @Nullable Output<Boolean> selectiveCodeOwnerRemovals;

    /**
     * @return Reset approvals from Code Owners if their files changed. Can be enabled only if reset*approvals*on_push is disabled.
     * 
     */
    public Optional<Output<Boolean>> selectiveCodeOwnerRemovals() {
        return Optional.ofNullable(this.selectiveCodeOwnerRemovals);
    }

    private ProjectLevelMrApprovalsState() {}

    private ProjectLevelMrApprovalsState(ProjectLevelMrApprovalsState $) {
        this.disableOverridingApproversPerMergeRequest = $.disableOverridingApproversPerMergeRequest;
        this.mergeRequestsAuthorApproval = $.mergeRequestsAuthorApproval;
        this.mergeRequestsDisableCommittersApproval = $.mergeRequestsDisableCommittersApproval;
        this.project = $.project;
        this.requirePasswordToApprove = $.requirePasswordToApprove;
        this.resetApprovalsOnPush = $.resetApprovalsOnPush;
        this.selectiveCodeOwnerRemovals = $.selectiveCodeOwnerRemovals;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectLevelMrApprovalsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectLevelMrApprovalsState $;

        public Builder() {
            $ = new ProjectLevelMrApprovalsState();
        }

        public Builder(ProjectLevelMrApprovalsState defaults) {
            $ = new ProjectLevelMrApprovalsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableOverridingApproversPerMergeRequest Set to `true` to disable overriding approvers per merge request.
         * 
         * @return builder
         * 
         */
        public Builder disableOverridingApproversPerMergeRequest(@Nullable Output<Boolean> disableOverridingApproversPerMergeRequest) {
            $.disableOverridingApproversPerMergeRequest = disableOverridingApproversPerMergeRequest;
            return this;
        }

        /**
         * @param disableOverridingApproversPerMergeRequest Set to `true` to disable overriding approvers per merge request.
         * 
         * @return builder
         * 
         */
        public Builder disableOverridingApproversPerMergeRequest(Boolean disableOverridingApproversPerMergeRequest) {
            return disableOverridingApproversPerMergeRequest(Output.of(disableOverridingApproversPerMergeRequest));
        }

        /**
         * @param mergeRequestsAuthorApproval Set to `true` to allow merge requests authors to approve their own merge requests.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsAuthorApproval(@Nullable Output<Boolean> mergeRequestsAuthorApproval) {
            $.mergeRequestsAuthorApproval = mergeRequestsAuthorApproval;
            return this;
        }

        /**
         * @param mergeRequestsAuthorApproval Set to `true` to allow merge requests authors to approve their own merge requests.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsAuthorApproval(Boolean mergeRequestsAuthorApproval) {
            return mergeRequestsAuthorApproval(Output.of(mergeRequestsAuthorApproval));
        }

        /**
         * @param mergeRequestsDisableCommittersApproval Set to `true` to disable merge request committers from approving their own merge requests.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsDisableCommittersApproval(@Nullable Output<Boolean> mergeRequestsDisableCommittersApproval) {
            $.mergeRequestsDisableCommittersApproval = mergeRequestsDisableCommittersApproval;
            return this;
        }

        /**
         * @param mergeRequestsDisableCommittersApproval Set to `true` to disable merge request committers from approving their own merge requests.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsDisableCommittersApproval(Boolean mergeRequestsDisableCommittersApproval) {
            return mergeRequestsDisableCommittersApproval(Output.of(mergeRequestsDisableCommittersApproval));
        }

        /**
         * @param project The ID or URL-encoded path of a project to change MR approval configuration.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of a project to change MR approval configuration.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requirePasswordToApprove Set to `true` to require authentication to approve merge requests.
         * 
         * @return builder
         * 
         */
        public Builder requirePasswordToApprove(@Nullable Output<Boolean> requirePasswordToApprove) {
            $.requirePasswordToApprove = requirePasswordToApprove;
            return this;
        }

        /**
         * @param requirePasswordToApprove Set to `true` to require authentication to approve merge requests.
         * 
         * @return builder
         * 
         */
        public Builder requirePasswordToApprove(Boolean requirePasswordToApprove) {
            return requirePasswordToApprove(Output.of(requirePasswordToApprove));
        }

        /**
         * @param resetApprovalsOnPush Set to `true` to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder resetApprovalsOnPush(@Nullable Output<Boolean> resetApprovalsOnPush) {
            $.resetApprovalsOnPush = resetApprovalsOnPush;
            return this;
        }

        /**
         * @param resetApprovalsOnPush Set to `true` to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder resetApprovalsOnPush(Boolean resetApprovalsOnPush) {
            return resetApprovalsOnPush(Output.of(resetApprovalsOnPush));
        }

        /**
         * @param selectiveCodeOwnerRemovals Reset approvals from Code Owners if their files changed. Can be enabled only if reset*approvals*on_push is disabled.
         * 
         * @return builder
         * 
         */
        public Builder selectiveCodeOwnerRemovals(@Nullable Output<Boolean> selectiveCodeOwnerRemovals) {
            $.selectiveCodeOwnerRemovals = selectiveCodeOwnerRemovals;
            return this;
        }

        /**
         * @param selectiveCodeOwnerRemovals Reset approvals from Code Owners if their files changed. Can be enabled only if reset*approvals*on_push is disabled.
         * 
         * @return builder
         * 
         */
        public Builder selectiveCodeOwnerRemovals(Boolean selectiveCodeOwnerRemovals) {
            return selectiveCodeOwnerRemovals(Output.of(selectiveCodeOwnerRemovals));
        }

        public ProjectLevelMrApprovalsState build() {
            return $;
        }
    }

}
