// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetRunnersRunner;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRunnersResult {
    private String id;
    /**
     * @return Filters for runners with the given paused value
     * 
     */
    private @Nullable Boolean paused;
    /**
     * @return The list of runners.
     * 
     */
    private List<GetRunnersRunner> runners;
    /**
     * @return Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `never_contacted`.
     * 
     */
    private @Nullable String status;
    /**
     * @return Filters for runners with all of the given tags
     * 
     */
    private @Nullable List<String> tagLists;
    /**
     * @return The type of runner to return. Valid values are `instance_type`, `group_type` and `project_type`
     * 
     */
    private @Nullable String type;

    private GetRunnersResult() {}
    public String id() {
        return this.id;
    }
    /**
     * @return Filters for runners with the given paused value
     * 
     */
    public Optional<Boolean> paused() {
        return Optional.ofNullable(this.paused);
    }
    /**
     * @return The list of runners.
     * 
     */
    public List<GetRunnersRunner> runners() {
        return this.runners;
    }
    /**
     * @return Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `never_contacted`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Filters for runners with all of the given tags
     * 
     */
    public List<String> tagLists() {
        return this.tagLists == null ? List.of() : this.tagLists;
    }
    /**
     * @return The type of runner to return. Valid values are `instance_type`, `group_type` and `project_type`
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRunnersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable Boolean paused;
        private List<GetRunnersRunner> runners;
        private @Nullable String status;
        private @Nullable List<String> tagLists;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetRunnersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.paused = defaults.paused;
    	      this.runners = defaults.runners;
    	      this.status = defaults.status;
    	      this.tagLists = defaults.tagLists;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRunnersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder paused(@Nullable Boolean paused) {

            this.paused = paused;
            return this;
        }
        @CustomType.Setter
        public Builder runners(List<GetRunnersRunner> runners) {
            if (runners == null) {
              throw new MissingRequiredPropertyException("GetRunnersResult", "runners");
            }
            this.runners = runners;
            return this;
        }
        public Builder runners(GetRunnersRunner... runners) {
            return runners(List.of(runners));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tagLists(@Nullable List<String> tagLists) {

            this.tagLists = tagLists;
            return this;
        }
        public Builder tagLists(String... tagLists) {
            return tagLists(List.of(tagLists));
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public GetRunnersResult build() {
            final var _resultValue = new GetRunnersResult();
            _resultValue.id = id;
            _resultValue.paused = paused;
            _resultValue.runners = runners;
            _resultValue.status = status;
            _resultValue.tagLists = tagLists;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
