// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectEnvironmentArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectEnvironmentState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Group;
 * import com.pulumi.gitlab.GroupArgs;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.ProjectEnvironment;
 * import com.pulumi.gitlab.ProjectEnvironmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var this_ = new Group("this", GroupArgs.builder()
 *             .name("example")
 *             .path("example")
 *             .description("An example group")
 *             .build());
 * 
 *         var thisProject = new Project("thisProject", ProjectArgs.builder()
 *             .name("example")
 *             .namespaceId(this_.id())
 *             .initializeWithReadme(true)
 *             .build());
 * 
 *         var thisProjectEnvironment = new ProjectEnvironment("thisProjectEnvironment", ProjectEnvironmentArgs.builder()
 *             .project(thisProject.id())
 *             .name("example")
 *             .externalUrl("www.example.com")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_environment`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_environment.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab project environments can be imported using an id made up of `projectId:environmenId`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectEnvironment:ProjectEnvironment bar 123:321
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectEnvironment:ProjectEnvironment")
public class ProjectEnvironment extends com.pulumi.resources.CustomResource {
    /**
     * The ISO8601 date/time that this environment will be automatically stopped at in UTC.
     * 
     */
    @Export(name="autoStopAt", refs={String.class}, tree="[0]")
    private Output<String> autoStopAt;

    /**
     * @return The ISO8601 date/time that this environment will be automatically stopped at in UTC.
     * 
     */
    public Output<String> autoStopAt() {
        return this.autoStopAt;
    }
    /**
     * The auto stop setting for the environment. Allowed values are `always`, `with_action`. If this is set to `with_action` and `stop_before_destroy` is `true`, the environment will be force-stopped.
     * 
     */
    @Export(name="autoStopSetting", refs={String.class}, tree="[0]")
    private Output<String> autoStopSetting;

    /**
     * @return The auto stop setting for the environment. Allowed values are `always`, `with_action`. If this is set to `with_action` and `stop_before_destroy` is `true`, the environment will be force-stopped.
     * 
     */
    public Output<String> autoStopSetting() {
        return this.autoStopSetting;
    }
    /**
     * The cluster agent to associate with this environment.
     * 
     */
    @Export(name="clusterAgentId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> clusterAgentId;

    /**
     * @return The cluster agent to associate with this environment.
     * 
     */
    public Output<Optional<Integer>> clusterAgentId() {
        return Codegen.optional(this.clusterAgentId);
    }
    /**
     * The ISO8601 date/time that this environment was created at in UTC.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The ISO8601 date/time that this environment was created at in UTC.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * The description of the environment.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the environment.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Place to link to for this environment.
     * 
     */
    @Export(name="externalUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> externalUrl;

    /**
     * @return Place to link to for this environment.
     * 
     */
    public Output<Optional<String>> externalUrl() {
        return Codegen.optional(this.externalUrl);
    }
    /**
     * The Flux resource path to associate with this environment.
     * 
     */
    @Export(name="fluxResourcePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> fluxResourcePath;

    /**
     * @return The Flux resource path to associate with this environment.
     * 
     */
    public Output<Optional<String>> fluxResourcePath() {
        return Codegen.optional(this.fluxResourcePath);
    }
    /**
     * The Kubernetes namespace to associate with this environment.
     * 
     */
    @Export(name="kubernetesNamespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubernetesNamespace;

    /**
     * @return The Kubernetes namespace to associate with this environment.
     * 
     */
    public Output<Optional<String>> kubernetesNamespace() {
        return Codegen.optional(this.kubernetesNamespace);
    }
    /**
     * The name of the environment.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the environment.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID or full path of the project to environment is created for.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or full path of the project to environment is created for.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The name of the environment in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
     * 
     */
    @Export(name="slug", refs={String.class}, tree="[0]")
    private Output<String> slug;

    /**
     * @return The name of the environment in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
     * 
     */
    public Output<String> slug() {
        return this.slug;
    }
    /**
     * State the environment is in. Valid values are `available`, `stopped`.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State the environment is in. Valid values are `available`, `stopped`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Determines whether the environment is attempted to be stopped before the environment is deleted. If `auto_stop_setting` is set to `with_action`, this will perform a force stop.
     * 
     */
    @Export(name="stopBeforeDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> stopBeforeDestroy;

    /**
     * @return Determines whether the environment is attempted to be stopped before the environment is deleted. If `auto_stop_setting` is set to `with_action`, this will perform a force stop.
     * 
     */
    public Output<Optional<Boolean>> stopBeforeDestroy() {
        return Codegen.optional(this.stopBeforeDestroy);
    }
    /**
     * The tier of the new environment. Valid values are `production`, `staging`, `testing`, `development`, `other`.
     * 
     */
    @Export(name="tier", refs={String.class}, tree="[0]")
    private Output<String> tier;

    /**
     * @return The tier of the new environment. Valid values are `production`, `staging`, `testing`, `development`, `other`.
     * 
     */
    public Output<String> tier() {
        return this.tier;
    }
    /**
     * The ISO8601 date/time that this environment was last updated at in UTC.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return The ISO8601 date/time that this environment was last updated at in UTC.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectEnvironment(java.lang.String name) {
        this(name, ProjectEnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectEnvironment(java.lang.String name, ProjectEnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectEnvironment(java.lang.String name, ProjectEnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectEnvironment:ProjectEnvironment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectEnvironment(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectEnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectEnvironment:ProjectEnvironment", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectEnvironmentArgs makeArgs(ProjectEnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectEnvironmentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectEnvironment get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectEnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectEnvironment(name, id, state, options);
    }
}
