// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupBadgeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupBadgeArgs Empty = new GroupBadgeArgs();

    /**
     * The ID or URL-encoded path of the group to add the badge to.
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return The ID or URL-encoded path of the group to add the badge to.
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * The image url which will be presented on group overview.
     * 
     */
    @Import(name="imageUrl", required=true)
    private Output<String> imageUrl;

    /**
     * @return The image url which will be presented on group overview.
     * 
     */
    public Output<String> imageUrl() {
        return this.imageUrl;
    }

    /**
     * The url linked with the badge.
     * 
     */
    @Import(name="linkUrl", required=true)
    private Output<String> linkUrl;

    /**
     * @return The url linked with the badge.
     * 
     */
    public Output<String> linkUrl() {
        return this.linkUrl;
    }

    /**
     * The name of the badge.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the badge.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GroupBadgeArgs() {}

    private GroupBadgeArgs(GroupBadgeArgs $) {
        this.group = $.group;
        this.imageUrl = $.imageUrl;
        this.linkUrl = $.linkUrl;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupBadgeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupBadgeArgs $;

        public Builder() {
            $ = new GroupBadgeArgs();
        }

        public Builder(GroupBadgeArgs defaults) {
            $ = new GroupBadgeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param group The ID or URL-encoded path of the group to add the badge to.
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The ID or URL-encoded path of the group to add the badge to.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param imageUrl The image url which will be presented on group overview.
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(Output<String> imageUrl) {
            $.imageUrl = imageUrl;
            return this;
        }

        /**
         * @param imageUrl The image url which will be presented on group overview.
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(String imageUrl) {
            return imageUrl(Output.of(imageUrl));
        }

        /**
         * @param linkUrl The url linked with the badge.
         * 
         * @return builder
         * 
         */
        public Builder linkUrl(Output<String> linkUrl) {
            $.linkUrl = linkUrl;
            return this;
        }

        /**
         * @param linkUrl The url linked with the badge.
         * 
         * @return builder
         * 
         */
        public Builder linkUrl(String linkUrl) {
            return linkUrl(Output.of(linkUrl));
        }

        /**
         * @param name The name of the badge.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the badge.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GroupBadgeArgs build() {
            if ($.group == null) {
                throw new MissingRequiredPropertyException("GroupBadgeArgs", "group");
            }
            if ($.imageUrl == null) {
                throw new MissingRequiredPropertyException("GroupBadgeArgs", "imageUrl");
            }
            if ($.linkUrl == null) {
                throw new MissingRequiredPropertyException("GroupBadgeArgs", "linkUrl");
            }
            return $;
        }
    }

}
