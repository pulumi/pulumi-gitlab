// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchMergeAccessLevelArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchPushAccessLevelArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectProtectedBranchArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectProtectedBranchArgs Empty = new GetProjectProtectedBranchArgs();

    /**
     * Array of access levels and user(s)/group(s) allowed to merge to protected branch.
     * 
     */
    @Import(name="mergeAccessLevels")
    private @Nullable Output<List<GetProjectProtectedBranchMergeAccessLevelArgs>> mergeAccessLevels;

    /**
     * @return Array of access levels and user(s)/group(s) allowed to merge to protected branch.
     * 
     */
    public Optional<Output<List<GetProjectProtectedBranchMergeAccessLevelArgs>>> mergeAccessLevels() {
        return Optional.ofNullable(this.mergeAccessLevels);
    }

    /**
     * The name of the protected branch.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the protected branch.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The integer or path with namespace that uniquely identifies the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The integer or path with namespace that uniquely identifies the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Array of access levels and user(s)/group(s) allowed to push to protected branch.
     * 
     */
    @Import(name="pushAccessLevels")
    private @Nullable Output<List<GetProjectProtectedBranchPushAccessLevelArgs>> pushAccessLevels;

    /**
     * @return Array of access levels and user(s)/group(s) allowed to push to protected branch.
     * 
     */
    public Optional<Output<List<GetProjectProtectedBranchPushAccessLevelArgs>>> pushAccessLevels() {
        return Optional.ofNullable(this.pushAccessLevels);
    }

    private GetProjectProtectedBranchArgs() {}

    private GetProjectProtectedBranchArgs(GetProjectProtectedBranchArgs $) {
        this.mergeAccessLevels = $.mergeAccessLevels;
        this.name = $.name;
        this.projectId = $.projectId;
        this.pushAccessLevels = $.pushAccessLevels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectProtectedBranchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectProtectedBranchArgs $;

        public Builder() {
            $ = new GetProjectProtectedBranchArgs();
        }

        public Builder(GetProjectProtectedBranchArgs defaults) {
            $ = new GetProjectProtectedBranchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(@Nullable Output<List<GetProjectProtectedBranchMergeAccessLevelArgs>> mergeAccessLevels) {
            $.mergeAccessLevels = mergeAccessLevels;
            return this;
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(List<GetProjectProtectedBranchMergeAccessLevelArgs> mergeAccessLevels) {
            return mergeAccessLevels(Output.of(mergeAccessLevels));
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(GetProjectProtectedBranchMergeAccessLevelArgs... mergeAccessLevels) {
            return mergeAccessLevels(List.of(mergeAccessLevels));
        }

        /**
         * @param name The name of the protected branch.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the protected branch.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The integer or path with namespace that uniquely identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The integer or path with namespace that uniquely identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(@Nullable Output<List<GetProjectProtectedBranchPushAccessLevelArgs>> pushAccessLevels) {
            $.pushAccessLevels = pushAccessLevels;
            return this;
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(List<GetProjectProtectedBranchPushAccessLevelArgs> pushAccessLevels) {
            return pushAccessLevels(Output.of(pushAccessLevels));
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(GetProjectProtectedBranchPushAccessLevelArgs... pushAccessLevels) {
            return pushAccessLevels(List.of(pushAccessLevels));
        }

        public GetProjectProtectedBranchArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchArgs", "name");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchArgs", "projectId");
            }
            return $;
        }
    }

}
