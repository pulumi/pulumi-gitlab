// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGroupsArgs Empty = new GetGroupsArgs();

    /**
     * Order the groups&#39; list by `id`, `name`, `path`, or `similarity`. (Requires administrator privileges)
     * 
     */
    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    /**
     * @return Order the groups&#39; list by `id`, `name`, `path`, or `similarity`. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * Search groups by name or path.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Search groups by name or path.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Sort groups&#39; list in asc or desc order. (Requires administrator privileges)
     * 
     */
    @Import(name="sort")
    private @Nullable Output<String> sort;

    /**
     * @return Sort groups&#39; list in asc or desc order. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> sort() {
        return Optional.ofNullable(this.sort);
    }

    private GetGroupsArgs() {}

    private GetGroupsArgs(GetGroupsArgs $) {
        this.orderBy = $.orderBy;
        this.search = $.search;
        this.sort = $.sort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupsArgs $;

        public Builder() {
            $ = new GetGroupsArgs();
        }

        public Builder(GetGroupsArgs defaults) {
            $ = new GetGroupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param orderBy Order the groups&#39; list by `id`, `name`, `path`, or `similarity`. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param orderBy Order the groups&#39; list by `id`, `name`, `path`, or `similarity`. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        /**
         * @param search Search groups by name or path.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Search groups by name or path.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param sort Sort groups&#39; list in asc or desc order. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable Output<String> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Sort groups&#39; list in asc or desc order. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder sort(String sort) {
            return sort(Output.of(sort));
        }

        public GetGroupsArgs build() {
            return $;
        }
    }

}
