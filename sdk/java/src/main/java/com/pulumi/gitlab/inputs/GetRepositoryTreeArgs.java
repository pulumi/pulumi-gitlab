// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryTreeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryTreeArgs Empty = new GetRepositoryTreeArgs();

    /**
     * The path inside repository. Used to get content of subdirectories.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path inside repository. Used to get content of subdirectories.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The ID or full path of the project owned by the authenticated user.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or full path of the project owned by the authenticated user.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Boolean value used to get a recursive tree (false by default).
     * 
     */
    @Import(name="recursive")
    private @Nullable Output<Boolean> recursive;

    /**
     * @return Boolean value used to get a recursive tree (false by default).
     * 
     */
    public Optional<Output<Boolean>> recursive() {
        return Optional.ofNullable(this.recursive);
    }

    /**
     * The name of a repository branch or tag.
     * 
     */
    @Import(name="ref", required=true)
    private Output<String> ref;

    /**
     * @return The name of a repository branch or tag.
     * 
     */
    public Output<String> ref() {
        return this.ref;
    }

    private GetRepositoryTreeArgs() {}

    private GetRepositoryTreeArgs(GetRepositoryTreeArgs $) {
        this.path = $.path;
        this.project = $.project;
        this.recursive = $.recursive;
        this.ref = $.ref;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryTreeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryTreeArgs $;

        public Builder() {
            $ = new GetRepositoryTreeArgs();
        }

        public Builder(GetRepositoryTreeArgs defaults) {
            $ = new GetRepositoryTreeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param path The path inside repository. Used to get content of subdirectories.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path inside repository. Used to get content of subdirectories.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param project The ID or full path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param recursive Boolean value used to get a recursive tree (false by default).
         * 
         * @return builder
         * 
         */
        public Builder recursive(@Nullable Output<Boolean> recursive) {
            $.recursive = recursive;
            return this;
        }

        /**
         * @param recursive Boolean value used to get a recursive tree (false by default).
         * 
         * @return builder
         * 
         */
        public Builder recursive(Boolean recursive) {
            return recursive(Output.of(recursive));
        }

        /**
         * @param ref The name of a repository branch or tag.
         * 
         * @return builder
         * 
         */
        public Builder ref(Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref The name of a repository branch or tag.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        public GetRepositoryTreeArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetRepositoryTreeArgs", "project");
            }
            if ($.ref == null) {
                throw new MissingRequiredPropertyException("GetRepositoryTreeArgs", "ref");
            }
            return $;
        }
    }

}
