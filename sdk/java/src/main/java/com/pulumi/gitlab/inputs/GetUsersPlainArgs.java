// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUsersPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUsersPlainArgs Empty = new GetUsersPlainArgs();

    /**
     * Filter users that are active.
     * 
     */
    @Import(name="active")
    private @Nullable Boolean active;

    /**
     * @return Filter users that are active.
     * 
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Filter users that are blocked.
     * 
     */
    @Import(name="blocked")
    private @Nullable Boolean blocked;

    /**
     * @return Filter users that are blocked.
     * 
     */
    public Optional<Boolean> blocked() {
        return Optional.ofNullable(this.blocked);
    }

    /**
     * Search for users created after a specific date. (Requires administrator privileges)
     * 
     */
    @Import(name="createdAfter")
    private @Nullable String createdAfter;

    /**
     * @return Search for users created after a specific date. (Requires administrator privileges)
     * 
     */
    public Optional<String> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }

    /**
     * Search for users created before a specific date. (Requires administrator privileges)
     * 
     */
    @Import(name="createdBefore")
    private @Nullable String createdBefore;

    /**
     * @return Search for users created before a specific date. (Requires administrator privileges)
     * 
     */
    public Optional<String> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }

    /**
     * Filters only non external users.
     * 
     */
    @Import(name="excludeExternal")
    private @Nullable Boolean excludeExternal;

    /**
     * @return Filters only non external users.
     * 
     */
    public Optional<Boolean> excludeExternal() {
        return Optional.ofNullable(this.excludeExternal);
    }

    /**
     * Filters only non internal users.
     * 
     */
    @Import(name="excludeInternal")
    private @Nullable Boolean excludeInternal;

    /**
     * @return Filters only non internal users.
     * 
     */
    public Optional<Boolean> excludeInternal() {
        return Optional.ofNullable(this.excludeInternal);
    }

    /**
     * Lookup users by external provider. (Requires administrator privileges)
     * 
     */
    @Import(name="externProvider")
    private @Nullable String externProvider;

    /**
     * @return Lookup users by external provider. (Requires administrator privileges)
     * 
     */
    public Optional<String> externProvider() {
        return Optional.ofNullable(this.externProvider);
    }

    /**
     * Lookup users by external UID. (Requires administrator privileges)
     * 
     */
    @Import(name="externUid")
    private @Nullable String externUid;

    /**
     * @return Lookup users by external UID. (Requires administrator privileges)
     * 
     */
    public Optional<String> externUid() {
        return Optional.ofNullable(this.externUid);
    }

    /**
     * Filters only external users.
     * 
     */
    @Import(name="external")
    private @Nullable Boolean external;

    /**
     * @return Filters only external users.
     * 
     */
    public Optional<Boolean> external() {
        return Optional.ofNullable(this.external);
    }

    /**
     * Filters only regular users that are not bot or internal users.
     * 
     */
    @Import(name="humans")
    private @Nullable Boolean humans;

    /**
     * @return Filters only regular users that are not bot or internal users.
     * 
     */
    public Optional<Boolean> humans() {
        return Optional.ofNullable(this.humans);
    }

    /**
     * Order the users&#39; list by `id`, `name`, `username`, `createdAt` or `updatedAt`. (Requires administrator privileges)
     * 
     */
    @Import(name="orderBy")
    private @Nullable String orderBy;

    /**
     * @return Order the users&#39; list by `id`, `name`, `username`, `createdAt` or `updatedAt`. (Requires administrator privileges)
     * 
     */
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * Search users by username, name or email.
     * 
     */
    @Import(name="search")
    private @Nullable String search;

    /**
     * @return Search users by username, name or email.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Sort users&#39; list in asc or desc order. (Requires administrator privileges)
     * 
     */
    @Import(name="sort")
    private @Nullable String sort;

    /**
     * @return Sort users&#39; list in asc or desc order. (Requires administrator privileges)
     * 
     */
    public Optional<String> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * Get a single user with a specific username.
     * 
     */
    @Import(name="username")
    private @Nullable String username;

    /**
     * @return Get a single user with a specific username.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Filters user without project bots.
     * 
     */
    @Import(name="withoutProjectBots")
    private @Nullable Boolean withoutProjectBots;

    /**
     * @return Filters user without project bots.
     * 
     */
    public Optional<Boolean> withoutProjectBots() {
        return Optional.ofNullable(this.withoutProjectBots);
    }

    private GetUsersPlainArgs() {}

    private GetUsersPlainArgs(GetUsersPlainArgs $) {
        this.active = $.active;
        this.blocked = $.blocked;
        this.createdAfter = $.createdAfter;
        this.createdBefore = $.createdBefore;
        this.excludeExternal = $.excludeExternal;
        this.excludeInternal = $.excludeInternal;
        this.externProvider = $.externProvider;
        this.externUid = $.externUid;
        this.external = $.external;
        this.humans = $.humans;
        this.orderBy = $.orderBy;
        this.search = $.search;
        this.sort = $.sort;
        this.username = $.username;
        this.withoutProjectBots = $.withoutProjectBots;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUsersPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUsersPlainArgs $;

        public Builder() {
            $ = new GetUsersPlainArgs();
        }

        public Builder(GetUsersPlainArgs defaults) {
            $ = new GetUsersPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Filter users that are active.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Boolean active) {
            $.active = active;
            return this;
        }

        /**
         * @param blocked Filter users that are blocked.
         * 
         * @return builder
         * 
         */
        public Builder blocked(@Nullable Boolean blocked) {
            $.blocked = blocked;
            return this;
        }

        /**
         * @param createdAfter Search for users created after a specific date. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(@Nullable String createdAfter) {
            $.createdAfter = createdAfter;
            return this;
        }

        /**
         * @param createdBefore Search for users created before a specific date. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(@Nullable String createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        /**
         * @param excludeExternal Filters only non external users.
         * 
         * @return builder
         * 
         */
        public Builder excludeExternal(@Nullable Boolean excludeExternal) {
            $.excludeExternal = excludeExternal;
            return this;
        }

        /**
         * @param excludeInternal Filters only non internal users.
         * 
         * @return builder
         * 
         */
        public Builder excludeInternal(@Nullable Boolean excludeInternal) {
            $.excludeInternal = excludeInternal;
            return this;
        }

        /**
         * @param externProvider Lookup users by external provider. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder externProvider(@Nullable String externProvider) {
            $.externProvider = externProvider;
            return this;
        }

        /**
         * @param externUid Lookup users by external UID. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder externUid(@Nullable String externUid) {
            $.externUid = externUid;
            return this;
        }

        /**
         * @param external Filters only external users.
         * 
         * @return builder
         * 
         */
        public Builder external(@Nullable Boolean external) {
            $.external = external;
            return this;
        }

        /**
         * @param humans Filters only regular users that are not bot or internal users.
         * 
         * @return builder
         * 
         */
        public Builder humans(@Nullable Boolean humans) {
            $.humans = humans;
            return this;
        }

        /**
         * @param orderBy Order the users&#39; list by `id`, `name`, `username`, `createdAt` or `updatedAt`. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable String orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param search Search users by username, name or email.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable String search) {
            $.search = search;
            return this;
        }

        /**
         * @param sort Sort users&#39; list in asc or desc order. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable String sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param username Get a single user with a specific username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        /**
         * @param withoutProjectBots Filters user without project bots.
         * 
         * @return builder
         * 
         */
        public Builder withoutProjectBots(@Nullable Boolean withoutProjectBots) {
            $.withoutProjectBots = withoutProjectBots;
            return this;
        }

        public GetUsersPlainArgs build() {
            return $;
        }
    }

}
