// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectEnvironmentsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectEnvironmentsPlainArgs Empty = new GetProjectEnvironmentsPlainArgs();

    /**
     * Return the environment with this name. Mutually exclusive with search.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Return the environment with this name. Mutually exclusive with search.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or full path of the project.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public String project() {
        return this.project;
    }

    /**
     * Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     * 
     */
    @Import(name="search")
    private @Nullable String search;

    /**
     * @return Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     * 
     */
    @Import(name="states")
    private @Nullable String states;

    /**
     * @return List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     * 
     */
    public Optional<String> states() {
        return Optional.ofNullable(this.states);
    }

    private GetProjectEnvironmentsPlainArgs() {}

    private GetProjectEnvironmentsPlainArgs(GetProjectEnvironmentsPlainArgs $) {
        this.name = $.name;
        this.project = $.project;
        this.search = $.search;
        this.states = $.states;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectEnvironmentsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectEnvironmentsPlainArgs $;

        public Builder() {
            $ = new GetProjectEnvironmentsPlainArgs();
        }

        public Builder(GetProjectEnvironmentsPlainArgs defaults) {
            $ = new GetProjectEnvironmentsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Return the environment with this name. Mutually exclusive with search.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        /**
         * @param search Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable String search) {
            $.search = search;
            return this;
        }

        /**
         * @param states List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable String states) {
            $.states = states;
            return this;
        }

        public GetProjectEnvironmentsPlainArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectEnvironmentsPlainArgs", "project");
            }
            return $;
        }
    }

}
