// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectWikiPageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectWikiPageArgs Empty = new ProjectWikiPageArgs();

    /**
     * Content of the wiki page. Must be at least 1 character long.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return Content of the wiki page. Must be at least 1 character long.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * The ID or URL-encoded path of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or URL-encoded path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Title of the wiki page.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return Title of the wiki page.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    private ProjectWikiPageArgs() {}

    private ProjectWikiPageArgs(ProjectWikiPageArgs $) {
        this.content = $.content;
        this.format = $.format;
        this.project = $.project;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectWikiPageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectWikiPageArgs $;

        public Builder() {
            $ = new ProjectWikiPageArgs();
        }

        public Builder(ProjectWikiPageArgs defaults) {
            $ = new ProjectWikiPageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content Content of the wiki page. Must be at least 1 character long.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Content of the wiki page. Must be at least 1 character long.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param format Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param project The ID or URL-encoded path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param title Title of the wiki page.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the wiki page.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public ProjectWikiPageArgs build() {
            if ($.content == null) {
                throw new MissingRequiredPropertyException("ProjectWikiPageArgs", "content");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectWikiPageArgs", "project");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("ProjectWikiPageArgs", "title");
            }
            return $;
        }
    }

}
