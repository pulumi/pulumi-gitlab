// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectMilestoneState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectMilestoneState Empty = new ProjectMilestoneState();

    /**
     * The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The description of the milestone.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the milestone.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    @Import(name="dueDate")
    private @Nullable Output<String> dueDate;

    /**
     * @return The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    public Optional<Output<String>> dueDate() {
        return Optional.ofNullable(this.dueDate);
    }

    /**
     * Bool, true if milestone expired.
     * 
     */
    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    /**
     * @return Bool, true if milestone expired.
     * 
     */
    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * The ID of the project&#39;s milestone.
     * 
     */
    @Import(name="iid")
    private @Nullable Output<Integer> iid;

    /**
     * @return The ID of the project&#39;s milestone.
     * 
     */
    public Optional<Output<Integer>> iid() {
        return Optional.ofNullable(this.iid);
    }

    /**
     * The instance-wide ID of the project’s milestone.
     * 
     */
    @Import(name="milestoneId")
    private @Nullable Output<Integer> milestoneId;

    /**
     * @return The instance-wide ID of the project’s milestone.
     * 
     */
    public Optional<Output<Integer>> milestoneId() {
        return Optional.ofNullable(this.milestoneId);
    }

    /**
     * The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The project ID of milestone.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return The project ID of milestone.
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The state of the milestone. Valid values are: `active`, `closed`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the milestone. Valid values are: `active`, `closed`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The title of a milestone.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of a milestone.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The web URL of the milestone.
     * 
     */
    @Import(name="webUrl")
    private @Nullable Output<String> webUrl;

    /**
     * @return The web URL of the milestone.
     * 
     */
    public Optional<Output<String>> webUrl() {
        return Optional.ofNullable(this.webUrl);
    }

    private ProjectMilestoneState() {}

    private ProjectMilestoneState(ProjectMilestoneState $) {
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.dueDate = $.dueDate;
        this.expired = $.expired;
        this.iid = $.iid;
        this.milestoneId = $.milestoneId;
        this.project = $.project;
        this.projectId = $.projectId;
        this.startDate = $.startDate;
        this.state = $.state;
        this.title = $.title;
        this.updatedAt = $.updatedAt;
        this.webUrl = $.webUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectMilestoneState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectMilestoneState $;

        public Builder() {
            $ = new ProjectMilestoneState();
        }

        public Builder(ProjectMilestoneState defaults) {
            $ = new ProjectMilestoneState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description The description of the milestone.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the milestone.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dueDate The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(@Nullable Output<String> dueDate) {
            $.dueDate = dueDate;
            return this;
        }

        /**
         * @param dueDate The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(String dueDate) {
            return dueDate(Output.of(dueDate));
        }

        /**
         * @param expired Bool, true if milestone expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired Bool, true if milestone expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param iid The ID of the project&#39;s milestone.
         * 
         * @return builder
         * 
         */
        public Builder iid(@Nullable Output<Integer> iid) {
            $.iid = iid;
            return this;
        }

        /**
         * @param iid The ID of the project&#39;s milestone.
         * 
         * @return builder
         * 
         */
        public Builder iid(Integer iid) {
            return iid(Output.of(iid));
        }

        /**
         * @param milestoneId The instance-wide ID of the project’s milestone.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(@Nullable Output<Integer> milestoneId) {
            $.milestoneId = milestoneId;
            return this;
        }

        /**
         * @param milestoneId The instance-wide ID of the project’s milestone.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(Integer milestoneId) {
            return milestoneId(Output.of(milestoneId));
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectId The project ID of milestone.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of milestone.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param startDate The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param state The state of the milestone. Valid values are: `active`, `closed`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the milestone. Valid values are: `active`, `closed`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param title The title of a milestone.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of a milestone.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param updatedAt The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param webUrl The web URL of the milestone.
         * 
         * @return builder
         * 
         */
        public Builder webUrl(@Nullable Output<String> webUrl) {
            $.webUrl = webUrl;
            return this;
        }

        /**
         * @param webUrl The web URL of the milestone.
         * 
         * @return builder
         * 
         */
        public Builder webUrl(String webUrl) {
            return webUrl(Output.of(webUrl));
        }

        public ProjectMilestoneState build() {
            return $;
        }
    }

}
