// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseLinkState extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseLinkState Empty = new ReleaseLinkState();

    /**
     * Full path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     * 
     */
    @Import(name="directAssetUrl")
    private @Nullable Output<String> directAssetUrl;

    /**
     * @return Full path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     * 
     */
    public Optional<Output<String>> directAssetUrl() {
        return Optional.ofNullable(this.directAssetUrl);
    }

    /**
     * External or internal link.
     * 
     */
    @Import(name="external")
    private @Nullable Output<Boolean> external;

    /**
     * @return External or internal link.
     * 
     */
    public Optional<Output<Boolean>> external() {
        return Optional.ofNullable(this.external);
    }

    /**
     * Relative path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     * 
     */
    @Import(name="filepath")
    private @Nullable Output<String> filepath;

    /**
     * @return Relative path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     * 
     */
    public Optional<Output<String>> filepath() {
        return Optional.ofNullable(this.filepath);
    }

    /**
     * The ID of the link.
     * 
     */
    @Import(name="linkId")
    private @Nullable Output<Integer> linkId;

    /**
     * @return The ID of the link.
     * 
     */
    public Optional<Output<Integer>> linkId() {
        return Optional.ofNullable(this.linkId);
    }

    /**
     * The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
     * 
     */
    @Import(name="linkType")
    private @Nullable Output<String> linkType;

    /**
     * @return The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
     * 
     */
    public Optional<Output<String>> linkType() {
        return Optional.ofNullable(this.linkType);
    }

    /**
     * The name of the link. Link names must be unique within the release.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the link. Link names must be unique within the release.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding).
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding).
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The tag associated with the Release.
     * 
     */
    @Import(name="tagName")
    private @Nullable Output<String> tagName;

    /**
     * @return The tag associated with the Release.
     * 
     */
    public Optional<Output<String>> tagName() {
        return Optional.ofNullable(this.tagName);
    }

    /**
     * The URL of the link. Link URLs must be unique within the release.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the link. Link URLs must be unique within the release.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ReleaseLinkState() {}

    private ReleaseLinkState(ReleaseLinkState $) {
        this.directAssetUrl = $.directAssetUrl;
        this.external = $.external;
        this.filepath = $.filepath;
        this.linkId = $.linkId;
        this.linkType = $.linkType;
        this.name = $.name;
        this.project = $.project;
        this.tagName = $.tagName;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseLinkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseLinkState $;

        public Builder() {
            $ = new ReleaseLinkState();
        }

        public Builder(ReleaseLinkState defaults) {
            $ = new ReleaseLinkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param directAssetUrl Full path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
         * 
         * @return builder
         * 
         */
        public Builder directAssetUrl(@Nullable Output<String> directAssetUrl) {
            $.directAssetUrl = directAssetUrl;
            return this;
        }

        /**
         * @param directAssetUrl Full path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
         * 
         * @return builder
         * 
         */
        public Builder directAssetUrl(String directAssetUrl) {
            return directAssetUrl(Output.of(directAssetUrl));
        }

        /**
         * @param external External or internal link.
         * 
         * @return builder
         * 
         */
        public Builder external(@Nullable Output<Boolean> external) {
            $.external = external;
            return this;
        }

        /**
         * @param external External or internal link.
         * 
         * @return builder
         * 
         */
        public Builder external(Boolean external) {
            return external(Output.of(external));
        }

        /**
         * @param filepath Relative path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
         * 
         * @return builder
         * 
         */
        public Builder filepath(@Nullable Output<String> filepath) {
            $.filepath = filepath;
            return this;
        }

        /**
         * @param filepath Relative path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
         * 
         * @return builder
         * 
         */
        public Builder filepath(String filepath) {
            return filepath(Output.of(filepath));
        }

        /**
         * @param linkId The ID of the link.
         * 
         * @return builder
         * 
         */
        public Builder linkId(@Nullable Output<Integer> linkId) {
            $.linkId = linkId;
            return this;
        }

        /**
         * @param linkId The ID of the link.
         * 
         * @return builder
         * 
         */
        public Builder linkId(Integer linkId) {
            return linkId(Output.of(linkId));
        }

        /**
         * @param linkType The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
         * 
         * @return builder
         * 
         */
        public Builder linkType(@Nullable Output<String> linkType) {
            $.linkType = linkType;
            return this;
        }

        /**
         * @param linkType The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
         * 
         * @return builder
         * 
         */
        public Builder linkType(String linkType) {
            return linkType(Output.of(linkType));
        }

        /**
         * @param name The name of the link. Link names must be unique within the release.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the link. Link names must be unique within the release.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding).
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding).
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param tagName The tag associated with the Release.
         * 
         * @return builder
         * 
         */
        public Builder tagName(@Nullable Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        /**
         * @param tagName The tag associated with the Release.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        /**
         * @param url The URL of the link. Link URLs must be unique within the release.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the link. Link URLs must be unique within the release.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ReleaseLinkState build() {
            return $;
        }
    }

}
