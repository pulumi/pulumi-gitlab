// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ProjectComplianceFrameworksArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectComplianceFrameworksArgs Empty = new ProjectComplianceFrameworksArgs();

    /**
     * Globally unique IDs of the compliance frameworks to assign to the project.
     * 
     */
    @Import(name="complianceFrameworkIds", required=true)
    private Output<List<String>> complianceFrameworkIds;

    /**
     * @return Globally unique IDs of the compliance frameworks to assign to the project.
     * 
     */
    public Output<List<String>> complianceFrameworkIds() {
        return this.complianceFrameworkIds;
    }

    /**
     * The ID or full path of the project to change the compliance frameworks of.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or full path of the project to change the compliance frameworks of.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    private ProjectComplianceFrameworksArgs() {}

    private ProjectComplianceFrameworksArgs(ProjectComplianceFrameworksArgs $) {
        this.complianceFrameworkIds = $.complianceFrameworkIds;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectComplianceFrameworksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectComplianceFrameworksArgs $;

        public Builder() {
            $ = new ProjectComplianceFrameworksArgs();
        }

        public Builder(ProjectComplianceFrameworksArgs defaults) {
            $ = new ProjectComplianceFrameworksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param complianceFrameworkIds Globally unique IDs of the compliance frameworks to assign to the project.
         * 
         * @return builder
         * 
         */
        public Builder complianceFrameworkIds(Output<List<String>> complianceFrameworkIds) {
            $.complianceFrameworkIds = complianceFrameworkIds;
            return this;
        }

        /**
         * @param complianceFrameworkIds Globally unique IDs of the compliance frameworks to assign to the project.
         * 
         * @return builder
         * 
         */
        public Builder complianceFrameworkIds(List<String> complianceFrameworkIds) {
            return complianceFrameworkIds(Output.of(complianceFrameworkIds));
        }

        /**
         * @param complianceFrameworkIds Globally unique IDs of the compliance frameworks to assign to the project.
         * 
         * @return builder
         * 
         */
        public Builder complianceFrameworkIds(String... complianceFrameworkIds) {
            return complianceFrameworkIds(List.of(complianceFrameworkIds));
        }

        /**
         * @param project The ID or full path of the project to change the compliance frameworks of.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project to change the compliance frameworks of.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ProjectComplianceFrameworksArgs build() {
            if ($.complianceFrameworkIds == null) {
                throw new MissingRequiredPropertyException("ProjectComplianceFrameworksArgs", "complianceFrameworkIds");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectComplianceFrameworksArgs", "project");
            }
            return $;
        }
    }

}
