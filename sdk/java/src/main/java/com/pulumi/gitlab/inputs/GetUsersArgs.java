// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUsersArgs Empty = new GetUsersArgs();

    /**
     * Filter users that are active.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Filter users that are active.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Filter users that are blocked.
     * 
     */
    @Import(name="blocked")
    private @Nullable Output<Boolean> blocked;

    /**
     * @return Filter users that are blocked.
     * 
     */
    public Optional<Output<Boolean>> blocked() {
        return Optional.ofNullable(this.blocked);
    }

    /**
     * Search for users created after a specific date. (Requires administrator privileges)
     * 
     */
    @Import(name="createdAfter")
    private @Nullable Output<String> createdAfter;

    /**
     * @return Search for users created after a specific date. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }

    /**
     * Search for users created before a specific date. (Requires administrator privileges)
     * 
     */
    @Import(name="createdBefore")
    private @Nullable Output<String> createdBefore;

    /**
     * @return Search for users created before a specific date. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }

    /**
     * Lookup users by external provider. (Requires administrator privileges)
     * 
     */
    @Import(name="externProvider")
    private @Nullable Output<String> externProvider;

    /**
     * @return Lookup users by external provider. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> externProvider() {
        return Optional.ofNullable(this.externProvider);
    }

    /**
     * Lookup users by external UID. (Requires administrator privileges)
     * 
     */
    @Import(name="externUid")
    private @Nullable Output<String> externUid;

    /**
     * @return Lookup users by external UID. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> externUid() {
        return Optional.ofNullable(this.externUid);
    }

    /**
     * Order the users&#39; list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)
     * 
     */
    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    /**
     * @return Order the users&#39; list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * Search users by username, name or email.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Search users by username, name or email.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Sort users&#39; list in asc or desc order. (Requires administrator privileges)
     * 
     */
    @Import(name="sort")
    private @Nullable Output<String> sort;

    /**
     * @return Sort users&#39; list in asc or desc order. (Requires administrator privileges)
     * 
     */
    public Optional<Output<String>> sort() {
        return Optional.ofNullable(this.sort);
    }

    private GetUsersArgs() {}

    private GetUsersArgs(GetUsersArgs $) {
        this.active = $.active;
        this.blocked = $.blocked;
        this.createdAfter = $.createdAfter;
        this.createdBefore = $.createdBefore;
        this.externProvider = $.externProvider;
        this.externUid = $.externUid;
        this.orderBy = $.orderBy;
        this.search = $.search;
        this.sort = $.sort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUsersArgs $;

        public Builder() {
            $ = new GetUsersArgs();
        }

        public Builder(GetUsersArgs defaults) {
            $ = new GetUsersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Filter users that are active.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Filter users that are active.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param blocked Filter users that are blocked.
         * 
         * @return builder
         * 
         */
        public Builder blocked(@Nullable Output<Boolean> blocked) {
            $.blocked = blocked;
            return this;
        }

        /**
         * @param blocked Filter users that are blocked.
         * 
         * @return builder
         * 
         */
        public Builder blocked(Boolean blocked) {
            return blocked(Output.of(blocked));
        }

        /**
         * @param createdAfter Search for users created after a specific date. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(@Nullable Output<String> createdAfter) {
            $.createdAfter = createdAfter;
            return this;
        }

        /**
         * @param createdAfter Search for users created after a specific date. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(String createdAfter) {
            return createdAfter(Output.of(createdAfter));
        }

        /**
         * @param createdBefore Search for users created before a specific date. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(@Nullable Output<String> createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        /**
         * @param createdBefore Search for users created before a specific date. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(String createdBefore) {
            return createdBefore(Output.of(createdBefore));
        }

        /**
         * @param externProvider Lookup users by external provider. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder externProvider(@Nullable Output<String> externProvider) {
            $.externProvider = externProvider;
            return this;
        }

        /**
         * @param externProvider Lookup users by external provider. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder externProvider(String externProvider) {
            return externProvider(Output.of(externProvider));
        }

        /**
         * @param externUid Lookup users by external UID. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder externUid(@Nullable Output<String> externUid) {
            $.externUid = externUid;
            return this;
        }

        /**
         * @param externUid Lookup users by external UID. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder externUid(String externUid) {
            return externUid(Output.of(externUid));
        }

        /**
         * @param orderBy Order the users&#39; list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param orderBy Order the users&#39; list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        /**
         * @param search Search users by username, name or email.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Search users by username, name or email.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param sort Sort users&#39; list in asc or desc order. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable Output<String> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Sort users&#39; list in asc or desc order. (Requires administrator privileges)
         * 
         * @return builder
         * 
         */
        public Builder sort(String sort) {
            return sort(Output.of(sort));
        }

        public GetUsersArgs build() {
            return $;
        }
    }

}
