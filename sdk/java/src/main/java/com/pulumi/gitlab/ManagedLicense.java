// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ManagedLicenseArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ManagedLicenseState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * The `gitlab.ManagedLicense` resource allows to manage the lifecycle of a managed license.
 * 
 * &gt; This resource requires a GitLab Enterprise instance.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/managed_licenses.html)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.ManagedLicense;
 * import com.pulumi.gitlab.ManagedLicenseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Project(&#34;foo&#34;, ProjectArgs.builder()        
 *             .description(&#34;Lorem Ipsum&#34;)
 *             .visibilityLevel(&#34;public&#34;)
 *             .build());
 * 
 *         var mit = new ManagedLicense(&#34;mit&#34;, ManagedLicenseArgs.builder()        
 *             .project(foo.id())
 *             .approvalStatus(&#34;allowed&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * You can import this resource with an id made up of `{project-id}:{license-id}`, e.g.
 * 
 * ```sh
 *  $ pulumi import gitlab:index/managedLicense:ManagedLicense foo 1:2
 * ```
 * 
 */
@ResourceType(type="gitlab:index/managedLicense:ManagedLicense")
public class ManagedLicense extends com.pulumi.resources.CustomResource {
    /**
     * The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. &#34;approved&#34; and &#34;blacklisted&#34;
     * 			have been deprecated in favor of &#34;allowed&#34; and &#34;denied&#34;; use &#34;allowed&#34; and &#34;denied&#34; for GitLab versions 15.0 and higher.
     * 			Prior to version 15.0 and after 14.6, the values are equivalent.
     * 
     */
    @Export(name="approvalStatus", refs={String.class}, tree="[0]")
    private Output<String> approvalStatus;

    /**
     * @return The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. &#34;approved&#34; and &#34;blacklisted&#34;
     * 			have been deprecated in favor of &#34;allowed&#34; and &#34;denied&#34;; use &#34;allowed&#34; and &#34;denied&#34; for GitLab versions 15.0 and higher.
     * 			Prior to version 15.0 and after 14.6, the values are equivalent.
     * 
     */
    public Output<String> approvalStatus() {
        return this.approvalStatus;
    }
    /**
     * The name of the managed license (I.e., &#39;Apache License 2.0&#39; or &#39;MIT license&#39;)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the managed license (I.e., &#39;Apache License 2.0&#39; or &#39;MIT license&#39;)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project under which the managed license will be created.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project under which the managed license will be created.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedLicense(String name) {
        this(name, ManagedLicenseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedLicense(String name, ManagedLicenseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedLicense(String name, ManagedLicenseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/managedLicense:ManagedLicense", name, args == null ? ManagedLicenseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ManagedLicense(String name, Output<String> id, @Nullable ManagedLicenseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/managedLicense:ManagedLicense", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedLicense get(String name, Output<String> id, @Nullable ManagedLicenseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ManagedLicense(name, id, state, options);
    }
}
