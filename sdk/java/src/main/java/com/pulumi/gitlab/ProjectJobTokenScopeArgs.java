// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ProjectJobTokenScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectJobTokenScopeArgs Empty = new ProjectJobTokenScopeArgs();

    /**
     * The ID or full path of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The ID of the project that is in the CI/CD job token inbound allowlist.
     * 
     */
    @Import(name="targetProjectId", required=true)
    private Output<Integer> targetProjectId;

    /**
     * @return The ID of the project that is in the CI/CD job token inbound allowlist.
     * 
     */
    public Output<Integer> targetProjectId() {
        return this.targetProjectId;
    }

    private ProjectJobTokenScopeArgs() {}

    private ProjectJobTokenScopeArgs(ProjectJobTokenScopeArgs $) {
        this.project = $.project;
        this.targetProjectId = $.targetProjectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectJobTokenScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectJobTokenScopeArgs $;

        public Builder() {
            $ = new ProjectJobTokenScopeArgs();
        }

        public Builder(ProjectJobTokenScopeArgs defaults) {
            $ = new ProjectJobTokenScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param targetProjectId The ID of the project that is in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetProjectId(Output<Integer> targetProjectId) {
            $.targetProjectId = targetProjectId;
            return this;
        }

        /**
         * @param targetProjectId The ID of the project that is in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetProjectId(Integer targetProjectId) {
            return targetProjectId(Output.of(targetProjectId));
        }

        public ProjectJobTokenScopeArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectJobTokenScopeArgs", "project");
            }
            if ($.targetProjectId == null) {
                throw new MissingRequiredPropertyException("ProjectJobTokenScopeArgs", "targetProjectId");
            }
            return $;
        }
    }

}
