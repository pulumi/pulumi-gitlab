// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetGroupSharedWithGroup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupResult {
    /**
     * @return The default branch of the group.
     * 
     */
    private String defaultBranch;
    /**
     * @return Whether developers and maintainers can push to the applicable default branch.
     * 
     */
    private Integer defaultBranchProtection;
    /**
     * @return The description of the group.
     * 
     */
    private String description;
    /**
     * @return Can be set by administrators only. Additional CI/CD minutes for this group.
     * 
     */
    private Integer extraSharedRunnersMinutesLimit;
    /**
     * @return The full name of the group.
     * 
     */
    private String fullName;
    /**
     * @return The full path of the group.
     * 
     */
    private String fullPath;
    /**
     * @return The ID of the group.
     * 
     */
    private Integer groupId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Boolean, is LFS enabled for projects in this group.
     * 
     */
    private Boolean lfsEnabled;
    /**
     * @return Users cannot be added to projects in this group.
     * 
     */
    private Boolean membershipLock;
    /**
     * @return The name of this group.
     * 
     */
    private String name;
    /**
     * @return Integer, ID of the parent group.
     * 
     */
    private Integer parentId;
    /**
     * @return The path of the group.
     * 
     */
    private String path;
    /**
     * @return When enabled, users can not fork projects from this group to external namespaces.
     * 
     */
    private Boolean preventForkingOutsideGroup;
    /**
     * @return Boolean, is request for access enabled to the group.
     * 
     */
    private Boolean requestAccessEnabled;
    /**
     * @return The group level registration token to use during runner setup.
     * 
     */
    private String runnersToken;
    /**
     * @return Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or &gt; 0.
     * 
     */
    private Integer sharedRunnersMinutesLimit;
    /**
     * @return Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabledAndOverridable`, `disabledAndUnoverridable`, `disabledWithOverride`.
     * 
     */
    private String sharedRunnersSetting;
    /**
     * @return Describes groups which have access shared to this group.
     * 
     */
    private List<GetGroupSharedWithGroup> sharedWithGroups;
    /**
     * @return Visibility level of the group. Possible values are `private`, `internal`, `public`.
     * 
     */
    private String visibilityLevel;
    /**
     * @return Web URL of the group.
     * 
     */
    private String webUrl;
    /**
     * @return The group&#39;s wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String wikiAccessLevel;

    private GetGroupResult() {}
    /**
     * @return The default branch of the group.
     * 
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }
    /**
     * @return Whether developers and maintainers can push to the applicable default branch.
     * 
     */
    public Integer defaultBranchProtection() {
        return this.defaultBranchProtection;
    }
    /**
     * @return The description of the group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Can be set by administrators only. Additional CI/CD minutes for this group.
     * 
     */
    public Integer extraSharedRunnersMinutesLimit() {
        return this.extraSharedRunnersMinutesLimit;
    }
    /**
     * @return The full name of the group.
     * 
     */
    public String fullName() {
        return this.fullName;
    }
    /**
     * @return The full path of the group.
     * 
     */
    public String fullPath() {
        return this.fullPath;
    }
    /**
     * @return The ID of the group.
     * 
     */
    public Integer groupId() {
        return this.groupId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Boolean, is LFS enabled for projects in this group.
     * 
     */
    public Boolean lfsEnabled() {
        return this.lfsEnabled;
    }
    /**
     * @return Users cannot be added to projects in this group.
     * 
     */
    public Boolean membershipLock() {
        return this.membershipLock;
    }
    /**
     * @return The name of this group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Integer, ID of the parent group.
     * 
     */
    public Integer parentId() {
        return this.parentId;
    }
    /**
     * @return The path of the group.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return When enabled, users can not fork projects from this group to external namespaces.
     * 
     */
    public Boolean preventForkingOutsideGroup() {
        return this.preventForkingOutsideGroup;
    }
    /**
     * @return Boolean, is request for access enabled to the group.
     * 
     */
    public Boolean requestAccessEnabled() {
        return this.requestAccessEnabled;
    }
    /**
     * @return The group level registration token to use during runner setup.
     * 
     */
    public String runnersToken() {
        return this.runnersToken;
    }
    /**
     * @return Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or &gt; 0.
     * 
     */
    public Integer sharedRunnersMinutesLimit() {
        return this.sharedRunnersMinutesLimit;
    }
    /**
     * @return Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabledAndOverridable`, `disabledAndUnoverridable`, `disabledWithOverride`.
     * 
     */
    public String sharedRunnersSetting() {
        return this.sharedRunnersSetting;
    }
    /**
     * @return Describes groups which have access shared to this group.
     * 
     */
    public List<GetGroupSharedWithGroup> sharedWithGroups() {
        return this.sharedWithGroups;
    }
    /**
     * @return Visibility level of the group. Possible values are `private`, `internal`, `public`.
     * 
     */
    public String visibilityLevel() {
        return this.visibilityLevel;
    }
    /**
     * @return Web URL of the group.
     * 
     */
    public String webUrl() {
        return this.webUrl;
    }
    /**
     * @return The group&#39;s wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String wikiAccessLevel() {
        return this.wikiAccessLevel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultBranch;
        private Integer defaultBranchProtection;
        private String description;
        private Integer extraSharedRunnersMinutesLimit;
        private String fullName;
        private String fullPath;
        private Integer groupId;
        private String id;
        private Boolean lfsEnabled;
        private Boolean membershipLock;
        private String name;
        private Integer parentId;
        private String path;
        private Boolean preventForkingOutsideGroup;
        private Boolean requestAccessEnabled;
        private String runnersToken;
        private Integer sharedRunnersMinutesLimit;
        private String sharedRunnersSetting;
        private List<GetGroupSharedWithGroup> sharedWithGroups;
        private String visibilityLevel;
        private String webUrl;
        private String wikiAccessLevel;
        public Builder() {}
        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultBranch = defaults.defaultBranch;
    	      this.defaultBranchProtection = defaults.defaultBranchProtection;
    	      this.description = defaults.description;
    	      this.extraSharedRunnersMinutesLimit = defaults.extraSharedRunnersMinutesLimit;
    	      this.fullName = defaults.fullName;
    	      this.fullPath = defaults.fullPath;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.lfsEnabled = defaults.lfsEnabled;
    	      this.membershipLock = defaults.membershipLock;
    	      this.name = defaults.name;
    	      this.parentId = defaults.parentId;
    	      this.path = defaults.path;
    	      this.preventForkingOutsideGroup = defaults.preventForkingOutsideGroup;
    	      this.requestAccessEnabled = defaults.requestAccessEnabled;
    	      this.runnersToken = defaults.runnersToken;
    	      this.sharedRunnersMinutesLimit = defaults.sharedRunnersMinutesLimit;
    	      this.sharedRunnersSetting = defaults.sharedRunnersSetting;
    	      this.sharedWithGroups = defaults.sharedWithGroups;
    	      this.visibilityLevel = defaults.visibilityLevel;
    	      this.webUrl = defaults.webUrl;
    	      this.wikiAccessLevel = defaults.wikiAccessLevel;
        }

        @CustomType.Setter
        public Builder defaultBranch(String defaultBranch) {
            if (defaultBranch == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "defaultBranch");
            }
            this.defaultBranch = defaultBranch;
            return this;
        }
        @CustomType.Setter
        public Builder defaultBranchProtection(Integer defaultBranchProtection) {
            if (defaultBranchProtection == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "defaultBranchProtection");
            }
            this.defaultBranchProtection = defaultBranchProtection;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder extraSharedRunnersMinutesLimit(Integer extraSharedRunnersMinutesLimit) {
            if (extraSharedRunnersMinutesLimit == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "extraSharedRunnersMinutesLimit");
            }
            this.extraSharedRunnersMinutesLimit = extraSharedRunnersMinutesLimit;
            return this;
        }
        @CustomType.Setter
        public Builder fullName(String fullName) {
            if (fullName == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "fullName");
            }
            this.fullName = fullName;
            return this;
        }
        @CustomType.Setter
        public Builder fullPath(String fullPath) {
            if (fullPath == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "fullPath");
            }
            this.fullPath = fullPath;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lfsEnabled(Boolean lfsEnabled) {
            if (lfsEnabled == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "lfsEnabled");
            }
            this.lfsEnabled = lfsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder membershipLock(Boolean membershipLock) {
            if (membershipLock == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "membershipLock");
            }
            this.membershipLock = membershipLock;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(Integer parentId) {
            if (parentId == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "parentId");
            }
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder preventForkingOutsideGroup(Boolean preventForkingOutsideGroup) {
            if (preventForkingOutsideGroup == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "preventForkingOutsideGroup");
            }
            this.preventForkingOutsideGroup = preventForkingOutsideGroup;
            return this;
        }
        @CustomType.Setter
        public Builder requestAccessEnabled(Boolean requestAccessEnabled) {
            if (requestAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "requestAccessEnabled");
            }
            this.requestAccessEnabled = requestAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder runnersToken(String runnersToken) {
            if (runnersToken == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "runnersToken");
            }
            this.runnersToken = runnersToken;
            return this;
        }
        @CustomType.Setter
        public Builder sharedRunnersMinutesLimit(Integer sharedRunnersMinutesLimit) {
            if (sharedRunnersMinutesLimit == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "sharedRunnersMinutesLimit");
            }
            this.sharedRunnersMinutesLimit = sharedRunnersMinutesLimit;
            return this;
        }
        @CustomType.Setter
        public Builder sharedRunnersSetting(String sharedRunnersSetting) {
            if (sharedRunnersSetting == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "sharedRunnersSetting");
            }
            this.sharedRunnersSetting = sharedRunnersSetting;
            return this;
        }
        @CustomType.Setter
        public Builder sharedWithGroups(List<GetGroupSharedWithGroup> sharedWithGroups) {
            if (sharedWithGroups == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "sharedWithGroups");
            }
            this.sharedWithGroups = sharedWithGroups;
            return this;
        }
        public Builder sharedWithGroups(GetGroupSharedWithGroup... sharedWithGroups) {
            return sharedWithGroups(List.of(sharedWithGroups));
        }
        @CustomType.Setter
        public Builder visibilityLevel(String visibilityLevel) {
            if (visibilityLevel == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "visibilityLevel");
            }
            this.visibilityLevel = visibilityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder webUrl(String webUrl) {
            if (webUrl == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "webUrl");
            }
            this.webUrl = webUrl;
            return this;
        }
        @CustomType.Setter
        public Builder wikiAccessLevel(String wikiAccessLevel) {
            if (wikiAccessLevel == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "wikiAccessLevel");
            }
            this.wikiAccessLevel = wikiAccessLevel;
            return this;
        }
        public GetGroupResult build() {
            final var _resultValue = new GetGroupResult();
            _resultValue.defaultBranch = defaultBranch;
            _resultValue.defaultBranchProtection = defaultBranchProtection;
            _resultValue.description = description;
            _resultValue.extraSharedRunnersMinutesLimit = extraSharedRunnersMinutesLimit;
            _resultValue.fullName = fullName;
            _resultValue.fullPath = fullPath;
            _resultValue.groupId = groupId;
            _resultValue.id = id;
            _resultValue.lfsEnabled = lfsEnabled;
            _resultValue.membershipLock = membershipLock;
            _resultValue.name = name;
            _resultValue.parentId = parentId;
            _resultValue.path = path;
            _resultValue.preventForkingOutsideGroup = preventForkingOutsideGroup;
            _resultValue.requestAccessEnabled = requestAccessEnabled;
            _resultValue.runnersToken = runnersToken;
            _resultValue.sharedRunnersMinutesLimit = sharedRunnersMinutesLimit;
            _resultValue.sharedRunnersSetting = sharedRunnersSetting;
            _resultValue.sharedWithGroups = sharedWithGroups;
            _resultValue.visibilityLevel = visibilityLevel;
            _resultValue.webUrl = webUrl;
            _resultValue.wikiAccessLevel = wikiAccessLevel;
            return _resultValue;
        }
    }
}
