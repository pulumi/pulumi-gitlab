// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserGpgKeyState extends com.pulumi.resources.ResourceArgs {

    public static final UserGpgKeyState Empty = new UserGpgKeyState();

    /**
     * The time when this key was created in GitLab.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The time when this key was created in GitLab.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The armored GPG public key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The armored GPG public key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The ID of the GPG key.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<Integer> keyId;

    /**
     * @return The ID of the GPG key.
     * 
     */
    public Optional<Output<Integer>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<Integer> userId;

    /**
     * @return The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
     * 
     */
    public Optional<Output<Integer>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserGpgKeyState() {}

    private UserGpgKeyState(UserGpgKeyState $) {
        this.createdAt = $.createdAt;
        this.key = $.key;
        this.keyId = $.keyId;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGpgKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGpgKeyState $;

        public Builder() {
            $ = new UserGpgKeyState();
        }

        public Builder(UserGpgKeyState defaults) {
            $ = new UserGpgKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The time when this key was created in GitLab.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The time when this key was created in GitLab.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param key The armored GPG public key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The armored GPG public key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param keyId The ID of the GPG key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<Integer> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The ID of the GPG key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Integer keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param userId The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        public UserGpgKeyState build() {
            return $;
        }
    }

}
