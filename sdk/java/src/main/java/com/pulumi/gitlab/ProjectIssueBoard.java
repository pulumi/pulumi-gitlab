// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectIssueBoardArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectIssueBoardState;
import com.pulumi.gitlab.outputs.ProjectIssueBoardList;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectIssueBoard` resource allows to manage the lifecycle of a Project Issue Board.
 * 
 * &gt; **NOTE:** If the board lists are changed all lists will be recreated.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/boards.html)
 * 
 * ## Example Usage
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.User;
 * import com.pulumi.gitlab.UserArgs;
 * import com.pulumi.gitlab.ProjectMembership;
 * import com.pulumi.gitlab.ProjectMembershipArgs;
 * import com.pulumi.gitlab.ProjectMilestone;
 * import com.pulumi.gitlab.ProjectMilestoneArgs;
 * import com.pulumi.gitlab.ProjectIssueBoard;
 * import com.pulumi.gitlab.ProjectIssueBoardArgs;
 * import com.pulumi.gitlab.inputs.ProjectIssueBoardListArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleProject = new Project(&#34;exampleProject&#34;, ProjectArgs.builder()        
 *             .description(&#34;Lorem Ipsum&#34;)
 *             .visibilityLevel(&#34;public&#34;)
 *             .build());
 * 
 *         var exampleUser = new User(&#34;exampleUser&#34;, UserArgs.builder()        
 *             .username(&#34;example&#34;)
 *             .email(&#34;example@example.com&#34;)
 *             .password(&#34;example1$$$&#34;)
 *             .build());
 * 
 *         var exampleProjectMembership = new ProjectMembership(&#34;exampleProjectMembership&#34;, ProjectMembershipArgs.builder()        
 *             .projectId(exampleProject.id())
 *             .userId(exampleUser.id())
 *             .accessLevel(&#34;developer&#34;)
 *             .build());
 * 
 *         var exampleProjectMilestone = new ProjectMilestone(&#34;exampleProjectMilestone&#34;, ProjectMilestoneArgs.builder()        
 *             .project(exampleProject.id())
 *             .title(&#34;m1&#34;)
 *             .build());
 * 
 *         var this_ = new ProjectIssueBoard(&#34;this&#34;, ProjectIssueBoardArgs.builder()        
 *             .project(exampleProject.id())
 *             .lists(            
 *                 ProjectIssueBoardListArgs.builder()
 *                     .assigneeId(exampleUser.id())
 *                     .build(),
 *                 ProjectIssueBoardListArgs.builder()
 *                     .milestoneId(exampleProjectMilestone.milestoneId())
 *                     .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleProjectMembership)
 *                 .build());
 * 
 *         var listSyntax = new ProjectIssueBoard(&#34;listSyntax&#34;, ProjectIssueBoardArgs.builder()        
 *             .project(exampleProject.id())
 *             .lists(            
 *                 ProjectIssueBoardListArgs.builder()
 *                     .assigneeId(exampleUser.id())
 *                     .build(),
 *                 ProjectIssueBoardListArgs.builder()
 *                     .milestoneId(exampleProjectMilestone.milestoneId())
 *                     .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleProjectMembership)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * You can import this resource with an id made up of `{project-id}:{issue-board-id}`, e.g.
 * 
 * ```sh
 *  $ pulumi import gitlab:index/projectIssueBoard:ProjectIssueBoard kanban 42:1
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectIssueBoard:ProjectIssueBoard")
public class ProjectIssueBoard extends com.pulumi.resources.CustomResource {
    /**
     * The assignee the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Export(name="assigneeId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> assigneeId;

    /**
     * @return The assignee the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Output<Optional<Integer>> assigneeId() {
        return Codegen.optional(this.assigneeId);
    }
    /**
     * The list of label names which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Export(name="labels", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> labels;

    /**
     * @return The list of label names which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Output<Optional<List<String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The list of issue board lists
     * 
     */
    @Export(name="lists", refs={List.class,ProjectIssueBoardList.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ProjectIssueBoardList>> lists;

    /**
     * @return The list of issue board lists
     * 
     */
    public Output<Optional<List<ProjectIssueBoardList>>> lists() {
        return Codegen.optional(this.lists);
    }
    /**
     * The milestone the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Export(name="milestoneId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> milestoneId;

    /**
     * @return The milestone the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Output<Optional<Integer>> milestoneId() {
        return Codegen.optional(this.milestoneId);
    }
    /**
     * The name of the board.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the board.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID or full path of the project maintained by the authenticated user.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or full path of the project maintained by the authenticated user.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Export(name="weight", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> weight;

    /**
     * @return The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Output<Optional<Integer>> weight() {
        return Codegen.optional(this.weight);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectIssueBoard(String name) {
        this(name, ProjectIssueBoardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectIssueBoard(String name, ProjectIssueBoardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectIssueBoard(String name, ProjectIssueBoardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectIssueBoard:ProjectIssueBoard", name, args == null ? ProjectIssueBoardArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProjectIssueBoard(String name, Output<String> id, @Nullable ProjectIssueBoardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectIssueBoard:ProjectIssueBoard", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectIssueBoard get(String name, Output<String> id, @Nullable ProjectIssueBoardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectIssueBoard(name, id, state, options);
    }
}
