// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectTargetBranchRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectTargetBranchRuleState Empty = new ProjectTargetBranchRuleState();

    /**
     * The ID or URL-encoded path of the project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or URL-encoded path of the project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A pattern matching the branch name for which the merge request should have a default target branch configured.
     * 
     */
    @Import(name="sourceBranchPattern")
    private @Nullable Output<String> sourceBranchPattern;

    /**
     * @return A pattern matching the branch name for which the merge request should have a default target branch configured.
     * 
     */
    public Optional<Output<String>> sourceBranchPattern() {
        return Optional.ofNullable(this.sourceBranchPattern);
    }

    /**
     * The name of the branch to which the merge request should be addressed.
     * 
     */
    @Import(name="targetBranchName")
    private @Nullable Output<String> targetBranchName;

    /**
     * @return The name of the branch to which the merge request should be addressed.
     * 
     */
    public Optional<Output<String>> targetBranchName() {
        return Optional.ofNullable(this.targetBranchName);
    }

    private ProjectTargetBranchRuleState() {}

    private ProjectTargetBranchRuleState(ProjectTargetBranchRuleState $) {
        this.project = $.project;
        this.sourceBranchPattern = $.sourceBranchPattern;
        this.targetBranchName = $.targetBranchName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectTargetBranchRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectTargetBranchRuleState $;

        public Builder() {
            $ = new ProjectTargetBranchRuleState();
        }

        public Builder(ProjectTargetBranchRuleState defaults) {
            $ = new ProjectTargetBranchRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param project The ID or URL-encoded path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceBranchPattern A pattern matching the branch name for which the merge request should have a default target branch configured.
         * 
         * @return builder
         * 
         */
        public Builder sourceBranchPattern(@Nullable Output<String> sourceBranchPattern) {
            $.sourceBranchPattern = sourceBranchPattern;
            return this;
        }

        /**
         * @param sourceBranchPattern A pattern matching the branch name for which the merge request should have a default target branch configured.
         * 
         * @return builder
         * 
         */
        public Builder sourceBranchPattern(String sourceBranchPattern) {
            return sourceBranchPattern(Output.of(sourceBranchPattern));
        }

        /**
         * @param targetBranchName The name of the branch to which the merge request should be addressed.
         * 
         * @return builder
         * 
         */
        public Builder targetBranchName(@Nullable Output<String> targetBranchName) {
            $.targetBranchName = targetBranchName;
            return this;
        }

        /**
         * @param targetBranchName The name of the branch to which the merge request should be addressed.
         * 
         * @return builder
         * 
         */
        public Builder targetBranchName(String targetBranchName) {
            return targetBranchName(Output.of(targetBranchName));
        }

        public ProjectTargetBranchRuleState build() {
            return $;
        }
    }

}
