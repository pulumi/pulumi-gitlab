// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.GroupProtectedEnvironmentArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.GroupProtectedEnvironmentState;
import com.pulumi.gitlab.outputs.GroupProtectedEnvironmentApprovalRule;
import com.pulumi.gitlab.outputs.GroupProtectedEnvironmentDeployAccessLevel;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The `gitlab.GroupProtectedEnvironment` resource allows to manage the lifecycle of a protected environment in a group.
 * 
 * &gt; In order to use a user_id in the `deploy_access_levels` configuration,
 *    you need to make sure that users have access to the group with Maintainer role or higher.
 *    In order to use a group_id in the `deploy_access_levels` configuration,
 *    the group_id must be a sub-group under the given group.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_protected_environments/)
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_group_protected_environment`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_group_protected_environment.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Import using the CLI is supported using the following syntax:
 * 
 * GitLab group protected environments can be imported using an id made up of `groupId:environmentName`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/groupProtectedEnvironment:GroupProtectedEnvironment bar 123:production
 * ```
 * 
 */
@ResourceType(type="gitlab:index/groupProtectedEnvironment:GroupProtectedEnvironment")
public class GroupProtectedEnvironment extends com.pulumi.resources.CustomResource {
    /**
     * Array of approval rules to deploy, with each described by a hash. Elements in the `approval_rules` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    @Export(name="approvalRules", refs={List.class,GroupProtectedEnvironmentApprovalRule.class}, tree="[0,1]")
    private Output<List<GroupProtectedEnvironmentApprovalRule>> approvalRules;

    /**
     * @return Array of approval rules to deploy, with each described by a hash. Elements in the `approval_rules` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    public Output<List<GroupProtectedEnvironmentApprovalRule>> approvalRules() {
        return this.approvalRules;
    }
    /**
     * Array of access levels allowed to deploy, with each described by a hash. Elements in the `deploy_access_levels` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    @Export(name="deployAccessLevels", refs={List.class,GroupProtectedEnvironmentDeployAccessLevel.class}, tree="[0,1]")
    private Output<List<GroupProtectedEnvironmentDeployAccessLevel>> deployAccessLevels;

    /**
     * @return Array of access levels allowed to deploy, with each described by a hash. Elements in the `deploy_access_levels` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    public Output<List<GroupProtectedEnvironmentDeployAccessLevel>> deployAccessLevels() {
        return this.deployAccessLevels;
    }
    /**
     * The deployment tier of the environment.  Valid values are `production`, `staging`, `testing`, `development`, `other`.
     * 
     */
    @Export(name="environment", refs={String.class}, tree="[0]")
    private Output<String> environment;

    /**
     * @return The deployment tier of the environment.  Valid values are `production`, `staging`, `testing`, `development`, `other`.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }
    /**
     * The ID or full path of the group which the protected environment is created against.
     * 
     */
    @Export(name="group", refs={String.class}, tree="[0]")
    private Output<String> group;

    /**
     * @return The ID or full path of the group which the protected environment is created against.
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GroupProtectedEnvironment(String name) {
        this(name, GroupProtectedEnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GroupProtectedEnvironment(String name, GroupProtectedEnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GroupProtectedEnvironment(String name, GroupProtectedEnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupProtectedEnvironment:GroupProtectedEnvironment", name, args == null ? GroupProtectedEnvironmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GroupProtectedEnvironment(String name, Output<String> id, @Nullable GroupProtectedEnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupProtectedEnvironment:GroupProtectedEnvironment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GroupProtectedEnvironment get(String name, Output<String> id, @Nullable GroupProtectedEnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GroupProtectedEnvironment(name, id, state, options);
    }
}
