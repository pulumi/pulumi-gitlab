// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectPushRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectPushRulesArgs Empty = new ProjectPushRulesArgs();

    /**
     * All commit author emails must match this regex, e.g. `@my-company.com$`.
     * 
     */
    @Import(name="authorEmailRegex")
    private @Nullable Output<String> authorEmailRegex;

    /**
     * @return All commit author emails must match this regex, e.g. `@my-company.com$`.
     * 
     */
    public Optional<Output<String>> authorEmailRegex() {
        return Optional.ofNullable(this.authorEmailRegex);
    }

    /**
     * All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     * 
     */
    @Import(name="branchNameRegex")
    private @Nullable Output<String> branchNameRegex;

    /**
     * @return All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     * 
     */
    public Optional<Output<String>> branchNameRegex() {
        return Optional.ofNullable(this.branchNameRegex);
    }

    /**
     * Users can only push commits to this repository that were committed with one of their own verified emails.
     * 
     */
    @Import(name="commitCommitterCheck")
    private @Nullable Output<Boolean> commitCommitterCheck;

    /**
     * @return Users can only push commits to this repository that were committed with one of their own verified emails.
     * 
     */
    public Optional<Output<Boolean>> commitCommitterCheck() {
        return Optional.ofNullable(this.commitCommitterCheck);
    }

    /**
     * No commit message is allowed to match this regex, for example `ssh\:\/\/`.
     * 
     */
    @Import(name="commitMessageNegativeRegex")
    private @Nullable Output<String> commitMessageNegativeRegex;

    /**
     * @return No commit message is allowed to match this regex, for example `ssh\:\/\/`.
     * 
     */
    public Optional<Output<String>> commitMessageNegativeRegex() {
        return Optional.ofNullable(this.commitMessageNegativeRegex);
    }

    /**
     * All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     * 
     */
    @Import(name="commitMessageRegex")
    private @Nullable Output<String> commitMessageRegex;

    /**
     * @return All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     * 
     */
    public Optional<Output<String>> commitMessageRegex() {
        return Optional.ofNullable(this.commitMessageRegex);
    }

    /**
     * Deny deleting a tag.
     * 
     */
    @Import(name="denyDeleteTag")
    private @Nullable Output<Boolean> denyDeleteTag;

    /**
     * @return Deny deleting a tag.
     * 
     */
    public Optional<Output<Boolean>> denyDeleteTag() {
        return Optional.ofNullable(this.denyDeleteTag);
    }

    /**
     * All committed filenames must not match this regex, e.g. `(jar|exe)$`.
     * 
     */
    @Import(name="fileNameRegex")
    private @Nullable Output<String> fileNameRegex;

    /**
     * @return All committed filenames must not match this regex, e.g. `(jar|exe)$`.
     * 
     */
    public Optional<Output<String>> fileNameRegex() {
        return Optional.ofNullable(this.fileNameRegex);
    }

    /**
     * Maximum file size (MB).
     * 
     */
    @Import(name="maxFileSize")
    private @Nullable Output<Integer> maxFileSize;

    /**
     * @return Maximum file size (MB).
     * 
     */
    public Optional<Output<Integer>> maxFileSize() {
        return Optional.ofNullable(this.maxFileSize);
    }

    /**
     * Restrict commits by author (email) to existing GitLab users.
     * 
     */
    @Import(name="memberCheck")
    private @Nullable Output<Boolean> memberCheck;

    /**
     * @return Restrict commits by author (email) to existing GitLab users.
     * 
     */
    public Optional<Output<Boolean>> memberCheck() {
        return Optional.ofNullable(this.memberCheck);
    }

    /**
     * GitLab will reject any files that are likely to contain secrets.
     * 
     */
    @Import(name="preventSecrets")
    private @Nullable Output<Boolean> preventSecrets;

    /**
     * @return GitLab will reject any files that are likely to contain secrets.
     * 
     */
    public Optional<Output<Boolean>> preventSecrets() {
        return Optional.ofNullable(this.preventSecrets);
    }

    /**
     * Reject commit when it’s not signed through GPG.
     * 
     */
    @Import(name="rejectUnsignedCommits")
    private @Nullable Output<Boolean> rejectUnsignedCommits;

    /**
     * @return Reject commit when it’s not signed through GPG.
     * 
     */
    public Optional<Output<Boolean>> rejectUnsignedCommits() {
        return Optional.ofNullable(this.rejectUnsignedCommits);
    }

    private ProjectPushRulesArgs() {}

    private ProjectPushRulesArgs(ProjectPushRulesArgs $) {
        this.authorEmailRegex = $.authorEmailRegex;
        this.branchNameRegex = $.branchNameRegex;
        this.commitCommitterCheck = $.commitCommitterCheck;
        this.commitMessageNegativeRegex = $.commitMessageNegativeRegex;
        this.commitMessageRegex = $.commitMessageRegex;
        this.denyDeleteTag = $.denyDeleteTag;
        this.fileNameRegex = $.fileNameRegex;
        this.maxFileSize = $.maxFileSize;
        this.memberCheck = $.memberCheck;
        this.preventSecrets = $.preventSecrets;
        this.rejectUnsignedCommits = $.rejectUnsignedCommits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectPushRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectPushRulesArgs $;

        public Builder() {
            $ = new ProjectPushRulesArgs();
        }

        public Builder(ProjectPushRulesArgs defaults) {
            $ = new ProjectPushRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorEmailRegex All commit author emails must match this regex, e.g. `@my-company.com$`.
         * 
         * @return builder
         * 
         */
        public Builder authorEmailRegex(@Nullable Output<String> authorEmailRegex) {
            $.authorEmailRegex = authorEmailRegex;
            return this;
        }

        /**
         * @param authorEmailRegex All commit author emails must match this regex, e.g. `@my-company.com$`.
         * 
         * @return builder
         * 
         */
        public Builder authorEmailRegex(String authorEmailRegex) {
            return authorEmailRegex(Output.of(authorEmailRegex));
        }

        /**
         * @param branchNameRegex All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
         * 
         * @return builder
         * 
         */
        public Builder branchNameRegex(@Nullable Output<String> branchNameRegex) {
            $.branchNameRegex = branchNameRegex;
            return this;
        }

        /**
         * @param branchNameRegex All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
         * 
         * @return builder
         * 
         */
        public Builder branchNameRegex(String branchNameRegex) {
            return branchNameRegex(Output.of(branchNameRegex));
        }

        /**
         * @param commitCommitterCheck Users can only push commits to this repository that were committed with one of their own verified emails.
         * 
         * @return builder
         * 
         */
        public Builder commitCommitterCheck(@Nullable Output<Boolean> commitCommitterCheck) {
            $.commitCommitterCheck = commitCommitterCheck;
            return this;
        }

        /**
         * @param commitCommitterCheck Users can only push commits to this repository that were committed with one of their own verified emails.
         * 
         * @return builder
         * 
         */
        public Builder commitCommitterCheck(Boolean commitCommitterCheck) {
            return commitCommitterCheck(Output.of(commitCommitterCheck));
        }

        /**
         * @param commitMessageNegativeRegex No commit message is allowed to match this regex, for example `ssh\:\/\/`.
         * 
         * @return builder
         * 
         */
        public Builder commitMessageNegativeRegex(@Nullable Output<String> commitMessageNegativeRegex) {
            $.commitMessageNegativeRegex = commitMessageNegativeRegex;
            return this;
        }

        /**
         * @param commitMessageNegativeRegex No commit message is allowed to match this regex, for example `ssh\:\/\/`.
         * 
         * @return builder
         * 
         */
        public Builder commitMessageNegativeRegex(String commitMessageNegativeRegex) {
            return commitMessageNegativeRegex(Output.of(commitMessageNegativeRegex));
        }

        /**
         * @param commitMessageRegex All commit messages must match this regex, e.g. `Fixed \d+\..*`.
         * 
         * @return builder
         * 
         */
        public Builder commitMessageRegex(@Nullable Output<String> commitMessageRegex) {
            $.commitMessageRegex = commitMessageRegex;
            return this;
        }

        /**
         * @param commitMessageRegex All commit messages must match this regex, e.g. `Fixed \d+\..*`.
         * 
         * @return builder
         * 
         */
        public Builder commitMessageRegex(String commitMessageRegex) {
            return commitMessageRegex(Output.of(commitMessageRegex));
        }

        /**
         * @param denyDeleteTag Deny deleting a tag.
         * 
         * @return builder
         * 
         */
        public Builder denyDeleteTag(@Nullable Output<Boolean> denyDeleteTag) {
            $.denyDeleteTag = denyDeleteTag;
            return this;
        }

        /**
         * @param denyDeleteTag Deny deleting a tag.
         * 
         * @return builder
         * 
         */
        public Builder denyDeleteTag(Boolean denyDeleteTag) {
            return denyDeleteTag(Output.of(denyDeleteTag));
        }

        /**
         * @param fileNameRegex All committed filenames must not match this regex, e.g. `(jar|exe)$`.
         * 
         * @return builder
         * 
         */
        public Builder fileNameRegex(@Nullable Output<String> fileNameRegex) {
            $.fileNameRegex = fileNameRegex;
            return this;
        }

        /**
         * @param fileNameRegex All committed filenames must not match this regex, e.g. `(jar|exe)$`.
         * 
         * @return builder
         * 
         */
        public Builder fileNameRegex(String fileNameRegex) {
            return fileNameRegex(Output.of(fileNameRegex));
        }

        /**
         * @param maxFileSize Maximum file size (MB).
         * 
         * @return builder
         * 
         */
        public Builder maxFileSize(@Nullable Output<Integer> maxFileSize) {
            $.maxFileSize = maxFileSize;
            return this;
        }

        /**
         * @param maxFileSize Maximum file size (MB).
         * 
         * @return builder
         * 
         */
        public Builder maxFileSize(Integer maxFileSize) {
            return maxFileSize(Output.of(maxFileSize));
        }

        /**
         * @param memberCheck Restrict commits by author (email) to existing GitLab users.
         * 
         * @return builder
         * 
         */
        public Builder memberCheck(@Nullable Output<Boolean> memberCheck) {
            $.memberCheck = memberCheck;
            return this;
        }

        /**
         * @param memberCheck Restrict commits by author (email) to existing GitLab users.
         * 
         * @return builder
         * 
         */
        public Builder memberCheck(Boolean memberCheck) {
            return memberCheck(Output.of(memberCheck));
        }

        /**
         * @param preventSecrets GitLab will reject any files that are likely to contain secrets.
         * 
         * @return builder
         * 
         */
        public Builder preventSecrets(@Nullable Output<Boolean> preventSecrets) {
            $.preventSecrets = preventSecrets;
            return this;
        }

        /**
         * @param preventSecrets GitLab will reject any files that are likely to contain secrets.
         * 
         * @return builder
         * 
         */
        public Builder preventSecrets(Boolean preventSecrets) {
            return preventSecrets(Output.of(preventSecrets));
        }

        /**
         * @param rejectUnsignedCommits Reject commit when it’s not signed through GPG.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnsignedCommits(@Nullable Output<Boolean> rejectUnsignedCommits) {
            $.rejectUnsignedCommits = rejectUnsignedCommits;
            return this;
        }

        /**
         * @param rejectUnsignedCommits Reject commit when it’s not signed through GPG.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnsignedCommits(Boolean rejectUnsignedCommits) {
            return rejectUnsignedCommits(Output.of(rejectUnsignedCommits));
        }

        public ProjectPushRulesArgs build() {
            return $;
        }
    }

}
