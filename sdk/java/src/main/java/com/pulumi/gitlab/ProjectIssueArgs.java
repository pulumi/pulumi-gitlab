// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectIssueArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIssueArgs Empty = new ProjectIssueArgs();

    /**
     * The IDs of the users to assign the issue to.
     * 
     */
    @Import(name="assigneeIds")
    private @Nullable Output<List<Integer>> assigneeIds;

    /**
     * @return The IDs of the users to assign the issue to.
     * 
     */
    public Optional<Output<List<Integer>>> assigneeIds() {
        return Optional.ofNullable(this.assigneeIds);
    }

    /**
     * Set an issue to be confidential.
     * 
     */
    @Import(name="confidential")
    private @Nullable Output<Boolean> confidential;

    /**
     * @return Set an issue to be confidential.
     * 
     */
    public Optional<Output<Boolean>> confidential() {
        return Optional.ofNullable(this.confidential);
    }

    /**
     * When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Whether the issue is deleted instead of closed during destroy.
     * 
     */
    @Import(name="deleteOnDestroy")
    private @Nullable Output<Boolean> deleteOnDestroy;

    /**
     * @return Whether the issue is deleted instead of closed during destroy.
     * 
     */
    public Optional<Output<Boolean>> deleteOnDestroy() {
        return Optional.ofNullable(this.deleteOnDestroy);
    }

    /**
     * The description of an issue. Limited to 1,048,576 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of an issue. Limited to 1,048,576 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the issue is locked for discussions or not.
     * 
     */
    @Import(name="discussionLocked")
    private @Nullable Output<Boolean> discussionLocked;

    /**
     * @return Whether the issue is locked for discussions or not.
     * 
     */
    public Optional<Output<Boolean>> discussionLocked() {
        return Optional.ofNullable(this.discussionLocked);
    }

    /**
     * The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
     * 
     */
    @Import(name="discussionToResolve")
    private @Nullable Output<String> discussionToResolve;

    /**
     * @return The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
     * 
     */
    public Optional<Output<String>> discussionToResolve() {
        return Optional.ofNullable(this.discussionToResolve);
    }

    /**
     * The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    @Import(name="dueDate")
    private @Nullable Output<String> dueDate;

    /**
     * @return The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    public Optional<Output<String>> dueDate() {
        return Optional.ofNullable(this.dueDate);
    }

    /**
     * The ID of the epic issue.
     * 
     */
    @Import(name="epicIssueId")
    private @Nullable Output<Integer> epicIssueId;

    /**
     * @return The ID of the epic issue.
     * 
     */
    public Optional<Output<Integer>> epicIssueId() {
        return Optional.ofNullable(this.epicIssueId);
    }

    /**
     * The internal ID of the project&#39;s issue.
     * 
     */
    @Import(name="iid")
    private @Nullable Output<Integer> iid;

    /**
     * @return The internal ID of the project&#39;s issue.
     * 
     */
    public Optional<Output<Integer>> iid() {
        return Optional.ofNullable(this.iid);
    }

    /**
     * The type of issue. Valid values are: `issue`, `incident`, `test_case`.
     * 
     */
    @Import(name="issueType")
    private @Nullable Output<String> issueType;

    /**
     * @return The type of issue. Valid values are: `issue`, `incident`, `test_case`.
     * 
     */
    public Optional<Output<String>> issueType() {
        return Optional.ofNullable(this.issueType);
    }

    /**
     * The labels of an issue.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return The labels of an issue.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
     * 
     */
    @Import(name="mergeRequestToResolveDiscussionsOf")
    private @Nullable Output<Integer> mergeRequestToResolveDiscussionsOf;

    /**
     * @return The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
     * 
     */
    public Optional<Output<Integer>> mergeRequestToResolveDiscussionsOf() {
        return Optional.ofNullable(this.mergeRequestToResolveDiscussionsOf);
    }

    /**
     * The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
     * 
     */
    @Import(name="milestoneId")
    private @Nullable Output<Integer> milestoneId;

    /**
     * @return The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
     * 
     */
    public Optional<Output<Integer>> milestoneId() {
        return Optional.ofNullable(this.milestoneId);
    }

    /**
     * The name or ID of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The name or ID of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The state of the issue. Valid values are: `opened`, `closed`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the issue. Valid values are: `opened`, `closed`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The title of the issue.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return The title of the issue.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The weight of the issue. Valid values are greater than or equal to 0.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return The weight of the issue. Valid values are greater than or equal to 0.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private ProjectIssueArgs() {}

    private ProjectIssueArgs(ProjectIssueArgs $) {
        this.assigneeIds = $.assigneeIds;
        this.confidential = $.confidential;
        this.createdAt = $.createdAt;
        this.deleteOnDestroy = $.deleteOnDestroy;
        this.description = $.description;
        this.discussionLocked = $.discussionLocked;
        this.discussionToResolve = $.discussionToResolve;
        this.dueDate = $.dueDate;
        this.epicIssueId = $.epicIssueId;
        this.iid = $.iid;
        this.issueType = $.issueType;
        this.labels = $.labels;
        this.mergeRequestToResolveDiscussionsOf = $.mergeRequestToResolveDiscussionsOf;
        this.milestoneId = $.milestoneId;
        this.project = $.project;
        this.state = $.state;
        this.title = $.title;
        this.updatedAt = $.updatedAt;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIssueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIssueArgs $;

        public Builder() {
            $ = new ProjectIssueArgs();
        }

        public Builder(ProjectIssueArgs defaults) {
            $ = new ProjectIssueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assigneeIds The IDs of the users to assign the issue to.
         * 
         * @return builder
         * 
         */
        public Builder assigneeIds(@Nullable Output<List<Integer>> assigneeIds) {
            $.assigneeIds = assigneeIds;
            return this;
        }

        /**
         * @param assigneeIds The IDs of the users to assign the issue to.
         * 
         * @return builder
         * 
         */
        public Builder assigneeIds(List<Integer> assigneeIds) {
            return assigneeIds(Output.of(assigneeIds));
        }

        /**
         * @param assigneeIds The IDs of the users to assign the issue to.
         * 
         * @return builder
         * 
         */
        public Builder assigneeIds(Integer... assigneeIds) {
            return assigneeIds(List.of(assigneeIds));
        }

        /**
         * @param confidential Set an issue to be confidential.
         * 
         * @return builder
         * 
         */
        public Builder confidential(@Nullable Output<Boolean> confidential) {
            $.confidential = confidential;
            return this;
        }

        /**
         * @param confidential Set an issue to be confidential.
         * 
         * @return builder
         * 
         */
        public Builder confidential(Boolean confidential) {
            return confidential(Output.of(confidential));
        }

        /**
         * @param createdAt When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param deleteOnDestroy Whether the issue is deleted instead of closed during destroy.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnDestroy(@Nullable Output<Boolean> deleteOnDestroy) {
            $.deleteOnDestroy = deleteOnDestroy;
            return this;
        }

        /**
         * @param deleteOnDestroy Whether the issue is deleted instead of closed during destroy.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnDestroy(Boolean deleteOnDestroy) {
            return deleteOnDestroy(Output.of(deleteOnDestroy));
        }

        /**
         * @param description The description of an issue. Limited to 1,048,576 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of an issue. Limited to 1,048,576 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discussionLocked Whether the issue is locked for discussions or not.
         * 
         * @return builder
         * 
         */
        public Builder discussionLocked(@Nullable Output<Boolean> discussionLocked) {
            $.discussionLocked = discussionLocked;
            return this;
        }

        /**
         * @param discussionLocked Whether the issue is locked for discussions or not.
         * 
         * @return builder
         * 
         */
        public Builder discussionLocked(Boolean discussionLocked) {
            return discussionLocked(Output.of(discussionLocked));
        }

        /**
         * @param discussionToResolve The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
         * 
         * @return builder
         * 
         */
        public Builder discussionToResolve(@Nullable Output<String> discussionToResolve) {
            $.discussionToResolve = discussionToResolve;
            return this;
        }

        /**
         * @param discussionToResolve The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
         * 
         * @return builder
         * 
         */
        public Builder discussionToResolve(String discussionToResolve) {
            return discussionToResolve(Output.of(discussionToResolve));
        }

        /**
         * @param dueDate The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(@Nullable Output<String> dueDate) {
            $.dueDate = dueDate;
            return this;
        }

        /**
         * @param dueDate The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(String dueDate) {
            return dueDate(Output.of(dueDate));
        }

        /**
         * @param epicIssueId The ID of the epic issue.
         * 
         * @return builder
         * 
         */
        public Builder epicIssueId(@Nullable Output<Integer> epicIssueId) {
            $.epicIssueId = epicIssueId;
            return this;
        }

        /**
         * @param epicIssueId The ID of the epic issue.
         * 
         * @return builder
         * 
         */
        public Builder epicIssueId(Integer epicIssueId) {
            return epicIssueId(Output.of(epicIssueId));
        }

        /**
         * @param iid The internal ID of the project&#39;s issue.
         * 
         * @return builder
         * 
         */
        public Builder iid(@Nullable Output<Integer> iid) {
            $.iid = iid;
            return this;
        }

        /**
         * @param iid The internal ID of the project&#39;s issue.
         * 
         * @return builder
         * 
         */
        public Builder iid(Integer iid) {
            return iid(Output.of(iid));
        }

        /**
         * @param issueType The type of issue. Valid values are: `issue`, `incident`, `test_case`.
         * 
         * @return builder
         * 
         */
        public Builder issueType(@Nullable Output<String> issueType) {
            $.issueType = issueType;
            return this;
        }

        /**
         * @param issueType The type of issue. Valid values are: `issue`, `incident`, `test_case`.
         * 
         * @return builder
         * 
         */
        public Builder issueType(String issueType) {
            return issueType(Output.of(issueType));
        }

        /**
         * @param labels The labels of an issue.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels of an issue.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels The labels of an issue.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param mergeRequestToResolveDiscussionsOf The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestToResolveDiscussionsOf(@Nullable Output<Integer> mergeRequestToResolveDiscussionsOf) {
            $.mergeRequestToResolveDiscussionsOf = mergeRequestToResolveDiscussionsOf;
            return this;
        }

        /**
         * @param mergeRequestToResolveDiscussionsOf The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestToResolveDiscussionsOf(Integer mergeRequestToResolveDiscussionsOf) {
            return mergeRequestToResolveDiscussionsOf(Output.of(mergeRequestToResolveDiscussionsOf));
        }

        /**
         * @param milestoneId The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(@Nullable Output<Integer> milestoneId) {
            $.milestoneId = milestoneId;
            return this;
        }

        /**
         * @param milestoneId The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(Integer milestoneId) {
            return milestoneId(Output.of(milestoneId));
        }

        /**
         * @param project The name or ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param state The state of the issue. Valid values are: `opened`, `closed`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the issue. Valid values are: `opened`, `closed`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param title The title of the issue.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the issue.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param updatedAt When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param weight The weight of the issue. Valid values are greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The weight of the issue. Valid values are greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public ProjectIssueArgs build() {
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
