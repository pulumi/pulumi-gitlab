// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.ProjectPagesSettingsDeploymentArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectPagesSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectPagesSettingsState Empty = new ProjectPagesSettingsState();

    /**
     * List of current active deployments.
     * 
     */
    @Import(name="deployments")
    private @Nullable Output<List<ProjectPagesSettingsDeploymentArgs>> deployments;

    /**
     * @return List of current active deployments.
     * 
     */
    public Optional<Output<List<ProjectPagesSettingsDeploymentArgs>>> deployments() {
        return Optional.ofNullable(this.deployments);
    }

    /**
     * Boolean indicating if the project is set to force https. Requires `external_https` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
     * 
     */
    @Import(name="forceHttps")
    private @Nullable Output<Boolean> forceHttps;

    /**
     * @return Boolean indicating if the project is set to force https. Requires `external_https` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
     * 
     */
    public Optional<Output<Boolean>> forceHttps() {
        return Optional.ofNullable(this.forceHttps);
    }

    /**
     * Boolean indicating if a unique domain is enabled.
     * 
     */
    @Import(name="isUniqueDomainEnabled")
    private @Nullable Output<Boolean> isUniqueDomainEnabled;

    /**
     * @return Boolean indicating if a unique domain is enabled.
     * 
     */
    public Optional<Output<Boolean>> isUniqueDomainEnabled() {
        return Optional.ofNullable(this.isUniqueDomainEnabled);
    }

    @Import(name="keepSettingsOnDestroy")
    private @Nullable Output<Boolean> keepSettingsOnDestroy;

    public Optional<Output<Boolean>> keepSettingsOnDestroy() {
        return Optional.ofNullable(this.keepSettingsOnDestroy);
    }

    /**
     * The project ID or path.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project ID or path.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The URL to access the project pages.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL to access the project pages.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ProjectPagesSettingsState() {}

    private ProjectPagesSettingsState(ProjectPagesSettingsState $) {
        this.deployments = $.deployments;
        this.forceHttps = $.forceHttps;
        this.isUniqueDomainEnabled = $.isUniqueDomainEnabled;
        this.keepSettingsOnDestroy = $.keepSettingsOnDestroy;
        this.project = $.project;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectPagesSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectPagesSettingsState $;

        public Builder() {
            $ = new ProjectPagesSettingsState();
        }

        public Builder(ProjectPagesSettingsState defaults) {
            $ = new ProjectPagesSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param deployments List of current active deployments.
         * 
         * @return builder
         * 
         */
        public Builder deployments(@Nullable Output<List<ProjectPagesSettingsDeploymentArgs>> deployments) {
            $.deployments = deployments;
            return this;
        }

        /**
         * @param deployments List of current active deployments.
         * 
         * @return builder
         * 
         */
        public Builder deployments(List<ProjectPagesSettingsDeploymentArgs> deployments) {
            return deployments(Output.of(deployments));
        }

        /**
         * @param deployments List of current active deployments.
         * 
         * @return builder
         * 
         */
        public Builder deployments(ProjectPagesSettingsDeploymentArgs... deployments) {
            return deployments(List.of(deployments));
        }

        /**
         * @param forceHttps Boolean indicating if the project is set to force https. Requires `external_https` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
         * 
         * @return builder
         * 
         */
        public Builder forceHttps(@Nullable Output<Boolean> forceHttps) {
            $.forceHttps = forceHttps;
            return this;
        }

        /**
         * @param forceHttps Boolean indicating if the project is set to force https. Requires `external_https` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
         * 
         * @return builder
         * 
         */
        public Builder forceHttps(Boolean forceHttps) {
            return forceHttps(Output.of(forceHttps));
        }

        /**
         * @param isUniqueDomainEnabled Boolean indicating if a unique domain is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isUniqueDomainEnabled(@Nullable Output<Boolean> isUniqueDomainEnabled) {
            $.isUniqueDomainEnabled = isUniqueDomainEnabled;
            return this;
        }

        /**
         * @param isUniqueDomainEnabled Boolean indicating if a unique domain is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isUniqueDomainEnabled(Boolean isUniqueDomainEnabled) {
            return isUniqueDomainEnabled(Output.of(isUniqueDomainEnabled));
        }

        public Builder keepSettingsOnDestroy(@Nullable Output<Boolean> keepSettingsOnDestroy) {
            $.keepSettingsOnDestroy = keepSettingsOnDestroy;
            return this;
        }

        public Builder keepSettingsOnDestroy(Boolean keepSettingsOnDestroy) {
            return keepSettingsOnDestroy(Output.of(keepSettingsOnDestroy));
        }

        /**
         * @param project The project ID or path.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project ID or path.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param url The URL to access the project pages.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL to access the project pages.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ProjectPagesSettingsState build() {
            return $;
        }
    }

}
