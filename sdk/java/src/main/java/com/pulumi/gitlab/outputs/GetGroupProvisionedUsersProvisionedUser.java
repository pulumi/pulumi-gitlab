// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGroupProvisionedUsersProvisionedUser {
    /**
     * @return The avatar URL of the provisioned user.
     * 
     */
    private String avatarUrl;
    /**
     * @return The bio of the provisioned user.
     * 
     */
    private String bio;
    /**
     * @return Whether the provisioned user is a bot.
     * 
     */
    private Boolean bot;
    /**
     * @return The confirmation date of the provisioned user.
     * 
     */
    private String confirmedAt;
    /**
     * @return The creation date of the provisioned user.
     * 
     */
    private String createdAt;
    /**
     * @return The email of the provisioned user.
     * 
     */
    private String email;
    /**
     * @return Whether the provisioned user is external.
     * 
     */
    private Boolean external;
    /**
     * @return The ID of the provisioned user.
     * 
     */
    private String id;
    /**
     * @return The job title of the provisioned user.
     * 
     */
    private String jobTitle;
    /**
     * @return The last activity date of the provisioned user.
     * 
     */
    private String lastActivityOn;
    /**
     * @return The last sign-in date of the provisioned user.
     * 
     */
    private String lastSignInAt;
    /**
     * @return The LinkedIn ID of the provisioned user.
     * 
     */
    private String linkedin;
    /**
     * @return The location of the provisioned user.
     * 
     */
    private String location;
    /**
     * @return The name of the provisioned user.
     * 
     */
    private String name;
    /**
     * @return The organization of the provisioned user.
     * 
     */
    private String organization;
    /**
     * @return Whether the provisioned user has a private profile.
     * 
     */
    private Boolean privateProfile;
    /**
     * @return The pronouns of the provisioned user.
     * 
     */
    private String pronouns;
    /**
     * @return The public email of the provisioned user.
     * 
     */
    private String publicEmail;
    /**
     * @return The Skype ID of the provisioned user.
     * 
     */
    private String skype;
    /**
     * @return The state of the provisioned user.
     * 
     */
    private String state;
    /**
     * @return The Twitter ID of the provisioned user.
     * 
     */
    private String twitter;
    /**
     * @return Whether two-factor authentication is enabled for the provisioned user.
     * 
     */
    private Boolean twoFactorEnabled;
    /**
     * @return The username of the provisioned user.
     * 
     */
    private String username;
    /**
     * @return The web URL of the provisioned user.
     * 
     */
    private String webUrl;
    /**
     * @return The website URL of the provisioned user.
     * 
     */
    private String websiteUrl;

    private GetGroupProvisionedUsersProvisionedUser() {}
    /**
     * @return The avatar URL of the provisioned user.
     * 
     */
    public String avatarUrl() {
        return this.avatarUrl;
    }
    /**
     * @return The bio of the provisioned user.
     * 
     */
    public String bio() {
        return this.bio;
    }
    /**
     * @return Whether the provisioned user is a bot.
     * 
     */
    public Boolean bot() {
        return this.bot;
    }
    /**
     * @return The confirmation date of the provisioned user.
     * 
     */
    public String confirmedAt() {
        return this.confirmedAt;
    }
    /**
     * @return The creation date of the provisioned user.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The email of the provisioned user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Whether the provisioned user is external.
     * 
     */
    public Boolean external() {
        return this.external;
    }
    /**
     * @return The ID of the provisioned user.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The job title of the provisioned user.
     * 
     */
    public String jobTitle() {
        return this.jobTitle;
    }
    /**
     * @return The last activity date of the provisioned user.
     * 
     */
    public String lastActivityOn() {
        return this.lastActivityOn;
    }
    /**
     * @return The last sign-in date of the provisioned user.
     * 
     */
    public String lastSignInAt() {
        return this.lastSignInAt;
    }
    /**
     * @return The LinkedIn ID of the provisioned user.
     * 
     */
    public String linkedin() {
        return this.linkedin;
    }
    /**
     * @return The location of the provisioned user.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the provisioned user.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The organization of the provisioned user.
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return Whether the provisioned user has a private profile.
     * 
     */
    public Boolean privateProfile() {
        return this.privateProfile;
    }
    /**
     * @return The pronouns of the provisioned user.
     * 
     */
    public String pronouns() {
        return this.pronouns;
    }
    /**
     * @return The public email of the provisioned user.
     * 
     */
    public String publicEmail() {
        return this.publicEmail;
    }
    /**
     * @return The Skype ID of the provisioned user.
     * 
     */
    public String skype() {
        return this.skype;
    }
    /**
     * @return The state of the provisioned user.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The Twitter ID of the provisioned user.
     * 
     */
    public String twitter() {
        return this.twitter;
    }
    /**
     * @return Whether two-factor authentication is enabled for the provisioned user.
     * 
     */
    public Boolean twoFactorEnabled() {
        return this.twoFactorEnabled;
    }
    /**
     * @return The username of the provisioned user.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return The web URL of the provisioned user.
     * 
     */
    public String webUrl() {
        return this.webUrl;
    }
    /**
     * @return The website URL of the provisioned user.
     * 
     */
    public String websiteUrl() {
        return this.websiteUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupProvisionedUsersProvisionedUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String avatarUrl;
        private String bio;
        private Boolean bot;
        private String confirmedAt;
        private String createdAt;
        private String email;
        private Boolean external;
        private String id;
        private String jobTitle;
        private String lastActivityOn;
        private String lastSignInAt;
        private String linkedin;
        private String location;
        private String name;
        private String organization;
        private Boolean privateProfile;
        private String pronouns;
        private String publicEmail;
        private String skype;
        private String state;
        private String twitter;
        private Boolean twoFactorEnabled;
        private String username;
        private String webUrl;
        private String websiteUrl;
        public Builder() {}
        public Builder(GetGroupProvisionedUsersProvisionedUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.avatarUrl = defaults.avatarUrl;
    	      this.bio = defaults.bio;
    	      this.bot = defaults.bot;
    	      this.confirmedAt = defaults.confirmedAt;
    	      this.createdAt = defaults.createdAt;
    	      this.email = defaults.email;
    	      this.external = defaults.external;
    	      this.id = defaults.id;
    	      this.jobTitle = defaults.jobTitle;
    	      this.lastActivityOn = defaults.lastActivityOn;
    	      this.lastSignInAt = defaults.lastSignInAt;
    	      this.linkedin = defaults.linkedin;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.organization = defaults.organization;
    	      this.privateProfile = defaults.privateProfile;
    	      this.pronouns = defaults.pronouns;
    	      this.publicEmail = defaults.publicEmail;
    	      this.skype = defaults.skype;
    	      this.state = defaults.state;
    	      this.twitter = defaults.twitter;
    	      this.twoFactorEnabled = defaults.twoFactorEnabled;
    	      this.username = defaults.username;
    	      this.webUrl = defaults.webUrl;
    	      this.websiteUrl = defaults.websiteUrl;
        }

        @CustomType.Setter
        public Builder avatarUrl(String avatarUrl) {
            if (avatarUrl == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "avatarUrl");
            }
            this.avatarUrl = avatarUrl;
            return this;
        }
        @CustomType.Setter
        public Builder bio(String bio) {
            if (bio == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "bio");
            }
            this.bio = bio;
            return this;
        }
        @CustomType.Setter
        public Builder bot(Boolean bot) {
            if (bot == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "bot");
            }
            this.bot = bot;
            return this;
        }
        @CustomType.Setter
        public Builder confirmedAt(String confirmedAt) {
            if (confirmedAt == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "confirmedAt");
            }
            this.confirmedAt = confirmedAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder external(Boolean external) {
            if (external == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "external");
            }
            this.external = external;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jobTitle(String jobTitle) {
            if (jobTitle == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "jobTitle");
            }
            this.jobTitle = jobTitle;
            return this;
        }
        @CustomType.Setter
        public Builder lastActivityOn(String lastActivityOn) {
            if (lastActivityOn == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "lastActivityOn");
            }
            this.lastActivityOn = lastActivityOn;
            return this;
        }
        @CustomType.Setter
        public Builder lastSignInAt(String lastSignInAt) {
            if (lastSignInAt == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "lastSignInAt");
            }
            this.lastSignInAt = lastSignInAt;
            return this;
        }
        @CustomType.Setter
        public Builder linkedin(String linkedin) {
            if (linkedin == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "linkedin");
            }
            this.linkedin = linkedin;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder privateProfile(Boolean privateProfile) {
            if (privateProfile == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "privateProfile");
            }
            this.privateProfile = privateProfile;
            return this;
        }
        @CustomType.Setter
        public Builder pronouns(String pronouns) {
            if (pronouns == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "pronouns");
            }
            this.pronouns = pronouns;
            return this;
        }
        @CustomType.Setter
        public Builder publicEmail(String publicEmail) {
            if (publicEmail == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "publicEmail");
            }
            this.publicEmail = publicEmail;
            return this;
        }
        @CustomType.Setter
        public Builder skype(String skype) {
            if (skype == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "skype");
            }
            this.skype = skype;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder twitter(String twitter) {
            if (twitter == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "twitter");
            }
            this.twitter = twitter;
            return this;
        }
        @CustomType.Setter
        public Builder twoFactorEnabled(Boolean twoFactorEnabled) {
            if (twoFactorEnabled == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "twoFactorEnabled");
            }
            this.twoFactorEnabled = twoFactorEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder webUrl(String webUrl) {
            if (webUrl == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "webUrl");
            }
            this.webUrl = webUrl;
            return this;
        }
        @CustomType.Setter
        public Builder websiteUrl(String websiteUrl) {
            if (websiteUrl == null) {
              throw new MissingRequiredPropertyException("GetGroupProvisionedUsersProvisionedUser", "websiteUrl");
            }
            this.websiteUrl = websiteUrl;
            return this;
        }
        public GetGroupProvisionedUsersProvisionedUser build() {
            final var _resultValue = new GetGroupProvisionedUsersProvisionedUser();
            _resultValue.avatarUrl = avatarUrl;
            _resultValue.bio = bio;
            _resultValue.bot = bot;
            _resultValue.confirmedAt = confirmedAt;
            _resultValue.createdAt = createdAt;
            _resultValue.email = email;
            _resultValue.external = external;
            _resultValue.id = id;
            _resultValue.jobTitle = jobTitle;
            _resultValue.lastActivityOn = lastActivityOn;
            _resultValue.lastSignInAt = lastSignInAt;
            _resultValue.linkedin = linkedin;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.organization = organization;
            _resultValue.privateProfile = privateProfile;
            _resultValue.pronouns = pronouns;
            _resultValue.publicEmail = publicEmail;
            _resultValue.skype = skype;
            _resultValue.state = state;
            _resultValue.twitter = twitter;
            _resultValue.twoFactorEnabled = twoFactorEnabled;
            _resultValue.username = username;
            _resultValue.webUrl = webUrl;
            _resultValue.websiteUrl = websiteUrl;
            return _resultValue;
        }
    }
}
