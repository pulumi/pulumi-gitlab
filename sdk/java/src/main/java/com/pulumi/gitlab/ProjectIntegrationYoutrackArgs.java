// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ProjectIntegrationYoutrackArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIntegrationYoutrackArgs Empty = new ProjectIntegrationYoutrackArgs();

    /**
     * URL to view an issue in the external issue tracker. Must contain :id.
     * 
     */
    @Import(name="issuesUrl", required=true)
    private Output<String> issuesUrl;

    /**
     * @return URL to view an issue in the external issue tracker. Must contain :id.
     * 
     */
    public Output<String> issuesUrl() {
        return this.issuesUrl;
    }

    /**
     * ID or namespace of the project you want to activate integration on.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return ID or namespace of the project you want to activate integration on.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * URL of the project in the external issue tracker.
     * 
     */
    @Import(name="projectUrl", required=true)
    private Output<String> projectUrl;

    /**
     * @return URL of the project in the external issue tracker.
     * 
     */
    public Output<String> projectUrl() {
        return this.projectUrl;
    }

    private ProjectIntegrationYoutrackArgs() {}

    private ProjectIntegrationYoutrackArgs(ProjectIntegrationYoutrackArgs $) {
        this.issuesUrl = $.issuesUrl;
        this.project = $.project;
        this.projectUrl = $.projectUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIntegrationYoutrackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIntegrationYoutrackArgs $;

        public Builder() {
            $ = new ProjectIntegrationYoutrackArgs();
        }

        public Builder(ProjectIntegrationYoutrackArgs defaults) {
            $ = new ProjectIntegrationYoutrackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param issuesUrl URL to view an issue in the external issue tracker. Must contain :id.
         * 
         * @return builder
         * 
         */
        public Builder issuesUrl(Output<String> issuesUrl) {
            $.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * @param issuesUrl URL to view an issue in the external issue tracker. Must contain :id.
         * 
         * @return builder
         * 
         */
        public Builder issuesUrl(String issuesUrl) {
            return issuesUrl(Output.of(issuesUrl));
        }

        /**
         * @param project ID or namespace of the project you want to activate integration on.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project ID or namespace of the project you want to activate integration on.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectUrl URL of the project in the external issue tracker.
         * 
         * @return builder
         * 
         */
        public Builder projectUrl(Output<String> projectUrl) {
            $.projectUrl = projectUrl;
            return this;
        }

        /**
         * @param projectUrl URL of the project in the external issue tracker.
         * 
         * @return builder
         * 
         */
        public Builder projectUrl(String projectUrl) {
            return projectUrl(Output.of(projectUrl));
        }

        public ProjectIntegrationYoutrackArgs build() {
            if ($.issuesUrl == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationYoutrackArgs", "issuesUrl");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationYoutrackArgs", "project");
            }
            if ($.projectUrl == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationYoutrackArgs", "projectUrl");
            }
            return $;
        }
    }

}
