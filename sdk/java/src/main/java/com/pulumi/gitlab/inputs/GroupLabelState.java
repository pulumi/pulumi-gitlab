// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupLabelState extends com.pulumi.resources.ResourceArgs {

    public static final GroupLabelState Empty = new GroupLabelState();

    /**
     * The color of the label given in 6-digit hex notation with leading &#39;#&#39; sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return The color of the label given in 6-digit hex notation with leading &#39;#&#39; sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * The description of the label.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the label.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name or id of the group to add the label to.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return The name or id of the group to add the label to.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * The id of the group label.
     * 
     */
    @Import(name="labelId")
    private @Nullable Output<Integer> labelId;

    /**
     * @return The id of the group label.
     * 
     */
    public Optional<Output<Integer>> labelId() {
        return Optional.ofNullable(this.labelId);
    }

    /**
     * The name of the label.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the label.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GroupLabelState() {}

    private GroupLabelState(GroupLabelState $) {
        this.color = $.color;
        this.description = $.description;
        this.group = $.group;
        this.labelId = $.labelId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupLabelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupLabelState $;

        public Builder() {
            $ = new GroupLabelState();
        }

        public Builder(GroupLabelState defaults) {
            $ = new GroupLabelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param color The color of the label given in 6-digit hex notation with leading &#39;#&#39; sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color The color of the label given in 6-digit hex notation with leading &#39;#&#39; sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param description The description of the label.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the label.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param group The name or id of the group to add the label to.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The name or id of the group to add the label to.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param labelId The id of the group label.
         * 
         * @return builder
         * 
         */
        public Builder labelId(@Nullable Output<Integer> labelId) {
            $.labelId = labelId;
            return this;
        }

        /**
         * @param labelId The id of the group label.
         * 
         * @return builder
         * 
         */
        public Builder labelId(Integer labelId) {
            return labelId(Output.of(labelId));
        }

        /**
         * @param name The name of the label.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the label.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GroupLabelState build() {
            return $;
        }
    }

}
