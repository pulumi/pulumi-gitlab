// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectExternalStatusCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectExternalStatusCheckArgs Empty = new ProjectExternalStatusCheckArgs();

    /**
     * The URL of the external status check service.
     * 
     */
    @Import(name="externalUrl", required=true)
    private Output<String> externalUrl;

    /**
     * @return The URL of the external status check service.
     * 
     */
    public Output<String> externalUrl() {
        return this.externalUrl;
    }

    /**
     * The display name of the external status check service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the external status check service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<Integer> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }

    /**
     * The list of IDs of protected branches to scope the rule by.
     * 
     */
    @Import(name="protectedBranchIds")
    private @Nullable Output<List<Integer>> protectedBranchIds;

    /**
     * @return The list of IDs of protected branches to scope the rule by.
     * 
     */
    public Optional<Output<List<Integer>>> protectedBranchIds() {
        return Optional.ofNullable(this.protectedBranchIds);
    }

    /**
     * The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
     * 
     */
    @Import(name="sharedSecret")
    private @Nullable Output<String> sharedSecret;

    /**
     * @return The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
     * 
     */
    public Optional<Output<String>> sharedSecret() {
        return Optional.ofNullable(this.sharedSecret);
    }

    private ProjectExternalStatusCheckArgs() {}

    private ProjectExternalStatusCheckArgs(ProjectExternalStatusCheckArgs $) {
        this.externalUrl = $.externalUrl;
        this.name = $.name;
        this.projectId = $.projectId;
        this.protectedBranchIds = $.protectedBranchIds;
        this.sharedSecret = $.sharedSecret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectExternalStatusCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectExternalStatusCheckArgs $;

        public Builder() {
            $ = new ProjectExternalStatusCheckArgs();
        }

        public Builder(ProjectExternalStatusCheckArgs defaults) {
            $ = new ProjectExternalStatusCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalUrl The URL of the external status check service.
         * 
         * @return builder
         * 
         */
        public Builder externalUrl(Output<String> externalUrl) {
            $.externalUrl = externalUrl;
            return this;
        }

        /**
         * @param externalUrl The URL of the external status check service.
         * 
         * @return builder
         * 
         */
        public Builder externalUrl(String externalUrl) {
            return externalUrl(Output.of(externalUrl));
        }

        /**
         * @param name The display name of the external status check service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the external status check service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param protectedBranchIds The list of IDs of protected branches to scope the rule by.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(@Nullable Output<List<Integer>> protectedBranchIds) {
            $.protectedBranchIds = protectedBranchIds;
            return this;
        }

        /**
         * @param protectedBranchIds The list of IDs of protected branches to scope the rule by.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(List<Integer> protectedBranchIds) {
            return protectedBranchIds(Output.of(protectedBranchIds));
        }

        /**
         * @param protectedBranchIds The list of IDs of protected branches to scope the rule by.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(Integer... protectedBranchIds) {
            return protectedBranchIds(List.of(protectedBranchIds));
        }

        /**
         * @param sharedSecret The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(@Nullable Output<String> sharedSecret) {
            $.sharedSecret = sharedSecret;
            return this;
        }

        /**
         * @param sharedSecret The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(String sharedSecret) {
            return sharedSecret(Output.of(sharedSecret));
        }

        public ProjectExternalStatusCheckArgs build() {
            if ($.externalUrl == null) {
                throw new MissingRequiredPropertyException("ProjectExternalStatusCheckArgs", "externalUrl");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("ProjectExternalStatusCheckArgs", "projectId");
            }
            return $;
        }
    }

}
