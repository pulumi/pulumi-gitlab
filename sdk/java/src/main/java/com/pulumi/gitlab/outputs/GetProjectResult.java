// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gitlab.outputs.GetProjectContainerExpirationPolicy;
import com.pulumi.gitlab.outputs.GetProjectPushRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    /**
     * @return Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String analyticsAccessLevel;
    /**
     * @return Whether the project is in read-only mode (archived).
     * 
     */
    private Boolean archived;
    /**
     * @return Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     * 
     */
    private String autoCancelPendingPipelines;
    /**
     * @return Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
     * 
     */
    private String autoDevopsDeployStrategy;
    /**
     * @return Enable Auto DevOps for this project.
     * 
     */
    private Boolean autoDevopsEnabled;
    /**
     * @return Set whether auto-closing referenced issues on default branch.
     * 
     */
    private Boolean autocloseReferencedIssues;
    /**
     * @return The Git strategy. Defaults to fetch.
     * 
     */
    private String buildGitStrategy;
    /**
     * @return The maximum amount of time, in seconds, that a job can run.
     * 
     */
    private Integer buildTimeout;
    /**
     * @return Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String buildsAccessLevel;
    /**
     * @return CI config file path for the project.
     * 
     */
    private String ciConfigPath;
    /**
     * @return Default number of revisions for shallow cloning.
     * 
     */
    private Integer ciDefaultGitDepth;
    /**
     * @return Use separate caches for protected branches.
     * 
     */
    private Boolean ciSeparatedCaches;
    /**
     * @return Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
     * 
     */
    private List<GetProjectContainerExpirationPolicy> containerExpirationPolicies;
    /**
     * @return Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String containerRegistryAccessLevel;
    /**
     * @return The default branch for the project.
     * 
     */
    private String defaultBranch;
    /**
     * @return A description of the project.
     * 
     */
    private String description;
    /**
     * @return Disable email notifications.
     * 
     */
    private Boolean emailsDisabled;
    /**
     * @return Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String environmentsAccessLevel;
    /**
     * @return The classification label for the project.
     * 
     */
    private String externalAuthorizationClassificationLabel;
    /**
     * @return Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String featureFlagsAccessLevel;
    /**
     * @return Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String forkingAccessLevel;
    /**
     * @return URL that can be provided to `git clone` to clone the
     * 
     */
    private String httpUrlToRepo;
    /**
     * @return The integer that uniquely identifies the project within the gitlab install.
     * 
     */
    private String id;
    /**
     * @return URL the project was imported from.
     * 
     */
    private String importUrl;
    /**
     * @return Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String infrastructureAccessLevel;
    /**
     * @return Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String issuesAccessLevel;
    /**
     * @return Enable issue tracking for the project.
     * 
     */
    private Boolean issuesEnabled;
    /**
     * @return Disable or enable the ability to keep the latest artifact for this project.
     * 
     */
    private Boolean keepLatestArtifact;
    /**
     * @return Enable LFS for the project.
     * 
     */
    private Boolean lfsEnabled;
    /**
     * @return Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
     * 
     */
    private String mergeCommitTemplate;
    /**
     * @return Enable or disable merge pipelines.
     * 
     */
    private Boolean mergePipelinesEnabled;
    /**
     * @return Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String mergeRequestsAccessLevel;
    /**
     * @return Enable merge requests for the project.
     * 
     */
    private Boolean mergeRequestsEnabled;
    /**
     * @return Enable or disable merge trains.
     * 
     */
    private Boolean mergeTrainsEnabled;
    /**
     * @return Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String monitorAccessLevel;
    /**
     * @return The name of the project.
     * 
     */
    private String name;
    /**
     * @return The namespace (group or user) of the project. Defaults to your user.
     * 
     */
    private Integer namespaceId;
    /**
     * @return Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String operationsAccessLevel;
    /**
     * @return The path of the repository.
     * 
     */
    private String path;
    /**
     * @return The path of the repository with namespace.
     * 
     */
    private String pathWithNamespace;
    /**
     * @return Enable pipelines for the project.
     * 
     */
    private Boolean pipelinesEnabled;
    /**
     * @return Show link to create/view merge request when pushing from the command line
     * 
     */
    private Boolean printingMergeRequestLinkEnabled;
    /**
     * @return If true, jobs can be viewed by non-project members.
     * 
     */
    private @Nullable Boolean publicBuilds;
    /**
     * @return Push rules for the project. Push rules are only available on Enterprise plans and if the authenticated has permissions to read them.
     * 
     */
    private List<GetProjectPushRule> pushRules;
    /**
     * @return Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String releasesAccessLevel;
    /**
     * @return Enable `Delete source branch` option by default for all new merge requests
     * 
     */
    private Boolean removeSourceBranchAfterMerge;
    /**
     * @return Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String repositoryAccessLevel;
    /**
     * @return Which storage shard the repository is on. (administrator only)
     * 
     */
    private String repositoryStorage;
    /**
     * @return Allow users to request member access.
     * 
     */
    private Boolean requestAccessEnabled;
    /**
     * @return Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String requirementsAccessLevel;
    /**
     * @return Automatically resolve merge request diffs discussions on lines changed with a push.
     * 
     */
    private Boolean resolveOutdatedDiffDiscussions;
    /**
     * @return Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
     * 
     */
    private Boolean restrictUserDefinedVariables;
    /**
     * @return Registration token to use during runner setup.
     * 
     */
    private String runnersToken;
    /**
     * @return Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String securityAndComplianceAccessLevel;
    /**
     * @return Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String snippetsAccessLevel;
    /**
     * @return Enable snippets for the project.
     * 
     */
    private Boolean snippetsEnabled;
    /**
     * @return Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
     * 
     */
    private String squashCommitTemplate;
    /**
     * @return URL that can be provided to `git clone` to clone the
     * 
     */
    private String sshUrlToRepo;
    /**
     * @return The commit message used to apply merge request suggestions.
     * 
     */
    private String suggestionCommitMessage;
    /**
     * @return The list of topics for the project.
     * 
     */
    private List<String> topics;
    /**
     * @return Repositories are created as private by default.
     * 
     */
    private String visibilityLevel;
    /**
     * @return URL that can be used to find the project in a browser.
     * 
     */
    private String webUrl;
    /**
     * @return Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    private String wikiAccessLevel;
    /**
     * @return Enable wiki for the project.
     * 
     */
    private Boolean wikiEnabled;

    private GetProjectResult() {}
    /**
     * @return Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String analyticsAccessLevel() {
        return this.analyticsAccessLevel;
    }
    /**
     * @return Whether the project is in read-only mode (archived).
     * 
     */
    public Boolean archived() {
        return this.archived;
    }
    /**
     * @return Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     * 
     */
    public String autoCancelPendingPipelines() {
        return this.autoCancelPendingPipelines;
    }
    /**
     * @return Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
     * 
     */
    public String autoDevopsDeployStrategy() {
        return this.autoDevopsDeployStrategy;
    }
    /**
     * @return Enable Auto DevOps for this project.
     * 
     */
    public Boolean autoDevopsEnabled() {
        return this.autoDevopsEnabled;
    }
    /**
     * @return Set whether auto-closing referenced issues on default branch.
     * 
     */
    public Boolean autocloseReferencedIssues() {
        return this.autocloseReferencedIssues;
    }
    /**
     * @return The Git strategy. Defaults to fetch.
     * 
     */
    public String buildGitStrategy() {
        return this.buildGitStrategy;
    }
    /**
     * @return The maximum amount of time, in seconds, that a job can run.
     * 
     */
    public Integer buildTimeout() {
        return this.buildTimeout;
    }
    /**
     * @return Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String buildsAccessLevel() {
        return this.buildsAccessLevel;
    }
    /**
     * @return CI config file path for the project.
     * 
     */
    public String ciConfigPath() {
        return this.ciConfigPath;
    }
    /**
     * @return Default number of revisions for shallow cloning.
     * 
     */
    public Integer ciDefaultGitDepth() {
        return this.ciDefaultGitDepth;
    }
    /**
     * @return Use separate caches for protected branches.
     * 
     */
    public Boolean ciSeparatedCaches() {
        return this.ciSeparatedCaches;
    }
    /**
     * @return Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
     * 
     */
    public List<GetProjectContainerExpirationPolicy> containerExpirationPolicies() {
        return this.containerExpirationPolicies;
    }
    /**
     * @return Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String containerRegistryAccessLevel() {
        return this.containerRegistryAccessLevel;
    }
    /**
     * @return The default branch for the project.
     * 
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }
    /**
     * @return A description of the project.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Disable email notifications.
     * 
     */
    public Boolean emailsDisabled() {
        return this.emailsDisabled;
    }
    /**
     * @return Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String environmentsAccessLevel() {
        return this.environmentsAccessLevel;
    }
    /**
     * @return The classification label for the project.
     * 
     */
    public String externalAuthorizationClassificationLabel() {
        return this.externalAuthorizationClassificationLabel;
    }
    /**
     * @return Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String featureFlagsAccessLevel() {
        return this.featureFlagsAccessLevel;
    }
    /**
     * @return Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String forkingAccessLevel() {
        return this.forkingAccessLevel;
    }
    /**
     * @return URL that can be provided to `git clone` to clone the
     * 
     */
    public String httpUrlToRepo() {
        return this.httpUrlToRepo;
    }
    /**
     * @return The integer that uniquely identifies the project within the gitlab install.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return URL the project was imported from.
     * 
     */
    public String importUrl() {
        return this.importUrl;
    }
    /**
     * @return Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String infrastructureAccessLevel() {
        return this.infrastructureAccessLevel;
    }
    /**
     * @return Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String issuesAccessLevel() {
        return this.issuesAccessLevel;
    }
    /**
     * @return Enable issue tracking for the project.
     * 
     */
    public Boolean issuesEnabled() {
        return this.issuesEnabled;
    }
    /**
     * @return Disable or enable the ability to keep the latest artifact for this project.
     * 
     */
    public Boolean keepLatestArtifact() {
        return this.keepLatestArtifact;
    }
    /**
     * @return Enable LFS for the project.
     * 
     */
    public Boolean lfsEnabled() {
        return this.lfsEnabled;
    }
    /**
     * @return Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
     * 
     */
    public String mergeCommitTemplate() {
        return this.mergeCommitTemplate;
    }
    /**
     * @return Enable or disable merge pipelines.
     * 
     */
    public Boolean mergePipelinesEnabled() {
        return this.mergePipelinesEnabled;
    }
    /**
     * @return Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String mergeRequestsAccessLevel() {
        return this.mergeRequestsAccessLevel;
    }
    /**
     * @return Enable merge requests for the project.
     * 
     */
    public Boolean mergeRequestsEnabled() {
        return this.mergeRequestsEnabled;
    }
    /**
     * @return Enable or disable merge trains.
     * 
     */
    public Boolean mergeTrainsEnabled() {
        return this.mergeTrainsEnabled;
    }
    /**
     * @return Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String monitorAccessLevel() {
        return this.monitorAccessLevel;
    }
    /**
     * @return The name of the project.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The namespace (group or user) of the project. Defaults to your user.
     * 
     */
    public Integer namespaceId() {
        return this.namespaceId;
    }
    /**
     * @return Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String operationsAccessLevel() {
        return this.operationsAccessLevel;
    }
    /**
     * @return The path of the repository.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The path of the repository with namespace.
     * 
     */
    public String pathWithNamespace() {
        return this.pathWithNamespace;
    }
    /**
     * @return Enable pipelines for the project.
     * 
     */
    public Boolean pipelinesEnabled() {
        return this.pipelinesEnabled;
    }
    /**
     * @return Show link to create/view merge request when pushing from the command line
     * 
     */
    public Boolean printingMergeRequestLinkEnabled() {
        return this.printingMergeRequestLinkEnabled;
    }
    /**
     * @return If true, jobs can be viewed by non-project members.
     * 
     */
    public Optional<Boolean> publicBuilds() {
        return Optional.ofNullable(this.publicBuilds);
    }
    /**
     * @return Push rules for the project. Push rules are only available on Enterprise plans and if the authenticated has permissions to read them.
     * 
     */
    public List<GetProjectPushRule> pushRules() {
        return this.pushRules;
    }
    /**
     * @return Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String releasesAccessLevel() {
        return this.releasesAccessLevel;
    }
    /**
     * @return Enable `Delete source branch` option by default for all new merge requests
     * 
     */
    public Boolean removeSourceBranchAfterMerge() {
        return this.removeSourceBranchAfterMerge;
    }
    /**
     * @return Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String repositoryAccessLevel() {
        return this.repositoryAccessLevel;
    }
    /**
     * @return Which storage shard the repository is on. (administrator only)
     * 
     */
    public String repositoryStorage() {
        return this.repositoryStorage;
    }
    /**
     * @return Allow users to request member access.
     * 
     */
    public Boolean requestAccessEnabled() {
        return this.requestAccessEnabled;
    }
    /**
     * @return Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String requirementsAccessLevel() {
        return this.requirementsAccessLevel;
    }
    /**
     * @return Automatically resolve merge request diffs discussions on lines changed with a push.
     * 
     */
    public Boolean resolveOutdatedDiffDiscussions() {
        return this.resolveOutdatedDiffDiscussions;
    }
    /**
     * @return Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
     * 
     */
    public Boolean restrictUserDefinedVariables() {
        return this.restrictUserDefinedVariables;
    }
    /**
     * @return Registration token to use during runner setup.
     * 
     */
    public String runnersToken() {
        return this.runnersToken;
    }
    /**
     * @return Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String securityAndComplianceAccessLevel() {
        return this.securityAndComplianceAccessLevel;
    }
    /**
     * @return Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String snippetsAccessLevel() {
        return this.snippetsAccessLevel;
    }
    /**
     * @return Enable snippets for the project.
     * 
     */
    public Boolean snippetsEnabled() {
        return this.snippetsEnabled;
    }
    /**
     * @return Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
     * 
     */
    public String squashCommitTemplate() {
        return this.squashCommitTemplate;
    }
    /**
     * @return URL that can be provided to `git clone` to clone the
     * 
     */
    public String sshUrlToRepo() {
        return this.sshUrlToRepo;
    }
    /**
     * @return The commit message used to apply merge request suggestions.
     * 
     */
    public String suggestionCommitMessage() {
        return this.suggestionCommitMessage;
    }
    /**
     * @return The list of topics for the project.
     * 
     */
    public List<String> topics() {
        return this.topics;
    }
    /**
     * @return Repositories are created as private by default.
     * 
     */
    public String visibilityLevel() {
        return this.visibilityLevel;
    }
    /**
     * @return URL that can be used to find the project in a browser.
     * 
     */
    public String webUrl() {
        return this.webUrl;
    }
    /**
     * @return Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public String wikiAccessLevel() {
        return this.wikiAccessLevel;
    }
    /**
     * @return Enable wiki for the project.
     * 
     */
    public Boolean wikiEnabled() {
        return this.wikiEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String analyticsAccessLevel;
        private Boolean archived;
        private String autoCancelPendingPipelines;
        private String autoDevopsDeployStrategy;
        private Boolean autoDevopsEnabled;
        private Boolean autocloseReferencedIssues;
        private String buildGitStrategy;
        private Integer buildTimeout;
        private String buildsAccessLevel;
        private String ciConfigPath;
        private Integer ciDefaultGitDepth;
        private Boolean ciSeparatedCaches;
        private List<GetProjectContainerExpirationPolicy> containerExpirationPolicies;
        private String containerRegistryAccessLevel;
        private String defaultBranch;
        private String description;
        private Boolean emailsDisabled;
        private String environmentsAccessLevel;
        private String externalAuthorizationClassificationLabel;
        private String featureFlagsAccessLevel;
        private String forkingAccessLevel;
        private String httpUrlToRepo;
        private String id;
        private String importUrl;
        private String infrastructureAccessLevel;
        private String issuesAccessLevel;
        private Boolean issuesEnabled;
        private Boolean keepLatestArtifact;
        private Boolean lfsEnabled;
        private String mergeCommitTemplate;
        private Boolean mergePipelinesEnabled;
        private String mergeRequestsAccessLevel;
        private Boolean mergeRequestsEnabled;
        private Boolean mergeTrainsEnabled;
        private String monitorAccessLevel;
        private String name;
        private Integer namespaceId;
        private String operationsAccessLevel;
        private String path;
        private String pathWithNamespace;
        private Boolean pipelinesEnabled;
        private Boolean printingMergeRequestLinkEnabled;
        private @Nullable Boolean publicBuilds;
        private List<GetProjectPushRule> pushRules;
        private String releasesAccessLevel;
        private Boolean removeSourceBranchAfterMerge;
        private String repositoryAccessLevel;
        private String repositoryStorage;
        private Boolean requestAccessEnabled;
        private String requirementsAccessLevel;
        private Boolean resolveOutdatedDiffDiscussions;
        private Boolean restrictUserDefinedVariables;
        private String runnersToken;
        private String securityAndComplianceAccessLevel;
        private String snippetsAccessLevel;
        private Boolean snippetsEnabled;
        private String squashCommitTemplate;
        private String sshUrlToRepo;
        private String suggestionCommitMessage;
        private List<String> topics;
        private String visibilityLevel;
        private String webUrl;
        private String wikiAccessLevel;
        private Boolean wikiEnabled;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyticsAccessLevel = defaults.analyticsAccessLevel;
    	      this.archived = defaults.archived;
    	      this.autoCancelPendingPipelines = defaults.autoCancelPendingPipelines;
    	      this.autoDevopsDeployStrategy = defaults.autoDevopsDeployStrategy;
    	      this.autoDevopsEnabled = defaults.autoDevopsEnabled;
    	      this.autocloseReferencedIssues = defaults.autocloseReferencedIssues;
    	      this.buildGitStrategy = defaults.buildGitStrategy;
    	      this.buildTimeout = defaults.buildTimeout;
    	      this.buildsAccessLevel = defaults.buildsAccessLevel;
    	      this.ciConfigPath = defaults.ciConfigPath;
    	      this.ciDefaultGitDepth = defaults.ciDefaultGitDepth;
    	      this.ciSeparatedCaches = defaults.ciSeparatedCaches;
    	      this.containerExpirationPolicies = defaults.containerExpirationPolicies;
    	      this.containerRegistryAccessLevel = defaults.containerRegistryAccessLevel;
    	      this.defaultBranch = defaults.defaultBranch;
    	      this.description = defaults.description;
    	      this.emailsDisabled = defaults.emailsDisabled;
    	      this.environmentsAccessLevel = defaults.environmentsAccessLevel;
    	      this.externalAuthorizationClassificationLabel = defaults.externalAuthorizationClassificationLabel;
    	      this.featureFlagsAccessLevel = defaults.featureFlagsAccessLevel;
    	      this.forkingAccessLevel = defaults.forkingAccessLevel;
    	      this.httpUrlToRepo = defaults.httpUrlToRepo;
    	      this.id = defaults.id;
    	      this.importUrl = defaults.importUrl;
    	      this.infrastructureAccessLevel = defaults.infrastructureAccessLevel;
    	      this.issuesAccessLevel = defaults.issuesAccessLevel;
    	      this.issuesEnabled = defaults.issuesEnabled;
    	      this.keepLatestArtifact = defaults.keepLatestArtifact;
    	      this.lfsEnabled = defaults.lfsEnabled;
    	      this.mergeCommitTemplate = defaults.mergeCommitTemplate;
    	      this.mergePipelinesEnabled = defaults.mergePipelinesEnabled;
    	      this.mergeRequestsAccessLevel = defaults.mergeRequestsAccessLevel;
    	      this.mergeRequestsEnabled = defaults.mergeRequestsEnabled;
    	      this.mergeTrainsEnabled = defaults.mergeTrainsEnabled;
    	      this.monitorAccessLevel = defaults.monitorAccessLevel;
    	      this.name = defaults.name;
    	      this.namespaceId = defaults.namespaceId;
    	      this.operationsAccessLevel = defaults.operationsAccessLevel;
    	      this.path = defaults.path;
    	      this.pathWithNamespace = defaults.pathWithNamespace;
    	      this.pipelinesEnabled = defaults.pipelinesEnabled;
    	      this.printingMergeRequestLinkEnabled = defaults.printingMergeRequestLinkEnabled;
    	      this.publicBuilds = defaults.publicBuilds;
    	      this.pushRules = defaults.pushRules;
    	      this.releasesAccessLevel = defaults.releasesAccessLevel;
    	      this.removeSourceBranchAfterMerge = defaults.removeSourceBranchAfterMerge;
    	      this.repositoryAccessLevel = defaults.repositoryAccessLevel;
    	      this.repositoryStorage = defaults.repositoryStorage;
    	      this.requestAccessEnabled = defaults.requestAccessEnabled;
    	      this.requirementsAccessLevel = defaults.requirementsAccessLevel;
    	      this.resolveOutdatedDiffDiscussions = defaults.resolveOutdatedDiffDiscussions;
    	      this.restrictUserDefinedVariables = defaults.restrictUserDefinedVariables;
    	      this.runnersToken = defaults.runnersToken;
    	      this.securityAndComplianceAccessLevel = defaults.securityAndComplianceAccessLevel;
    	      this.snippetsAccessLevel = defaults.snippetsAccessLevel;
    	      this.snippetsEnabled = defaults.snippetsEnabled;
    	      this.squashCommitTemplate = defaults.squashCommitTemplate;
    	      this.sshUrlToRepo = defaults.sshUrlToRepo;
    	      this.suggestionCommitMessage = defaults.suggestionCommitMessage;
    	      this.topics = defaults.topics;
    	      this.visibilityLevel = defaults.visibilityLevel;
    	      this.webUrl = defaults.webUrl;
    	      this.wikiAccessLevel = defaults.wikiAccessLevel;
    	      this.wikiEnabled = defaults.wikiEnabled;
        }

        @CustomType.Setter
        public Builder analyticsAccessLevel(String analyticsAccessLevel) {
            this.analyticsAccessLevel = Objects.requireNonNull(analyticsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder archived(Boolean archived) {
            this.archived = Objects.requireNonNull(archived);
            return this;
        }
        @CustomType.Setter
        public Builder autoCancelPendingPipelines(String autoCancelPendingPipelines) {
            this.autoCancelPendingPipelines = Objects.requireNonNull(autoCancelPendingPipelines);
            return this;
        }
        @CustomType.Setter
        public Builder autoDevopsDeployStrategy(String autoDevopsDeployStrategy) {
            this.autoDevopsDeployStrategy = Objects.requireNonNull(autoDevopsDeployStrategy);
            return this;
        }
        @CustomType.Setter
        public Builder autoDevopsEnabled(Boolean autoDevopsEnabled) {
            this.autoDevopsEnabled = Objects.requireNonNull(autoDevopsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder autocloseReferencedIssues(Boolean autocloseReferencedIssues) {
            this.autocloseReferencedIssues = Objects.requireNonNull(autocloseReferencedIssues);
            return this;
        }
        @CustomType.Setter
        public Builder buildGitStrategy(String buildGitStrategy) {
            this.buildGitStrategy = Objects.requireNonNull(buildGitStrategy);
            return this;
        }
        @CustomType.Setter
        public Builder buildTimeout(Integer buildTimeout) {
            this.buildTimeout = Objects.requireNonNull(buildTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder buildsAccessLevel(String buildsAccessLevel) {
            this.buildsAccessLevel = Objects.requireNonNull(buildsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder ciConfigPath(String ciConfigPath) {
            this.ciConfigPath = Objects.requireNonNull(ciConfigPath);
            return this;
        }
        @CustomType.Setter
        public Builder ciDefaultGitDepth(Integer ciDefaultGitDepth) {
            this.ciDefaultGitDepth = Objects.requireNonNull(ciDefaultGitDepth);
            return this;
        }
        @CustomType.Setter
        public Builder ciSeparatedCaches(Boolean ciSeparatedCaches) {
            this.ciSeparatedCaches = Objects.requireNonNull(ciSeparatedCaches);
            return this;
        }
        @CustomType.Setter
        public Builder containerExpirationPolicies(List<GetProjectContainerExpirationPolicy> containerExpirationPolicies) {
            this.containerExpirationPolicies = Objects.requireNonNull(containerExpirationPolicies);
            return this;
        }
        public Builder containerExpirationPolicies(GetProjectContainerExpirationPolicy... containerExpirationPolicies) {
            return containerExpirationPolicies(List.of(containerExpirationPolicies));
        }
        @CustomType.Setter
        public Builder containerRegistryAccessLevel(String containerRegistryAccessLevel) {
            this.containerRegistryAccessLevel = Objects.requireNonNull(containerRegistryAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder defaultBranch(String defaultBranch) {
            this.defaultBranch = Objects.requireNonNull(defaultBranch);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder emailsDisabled(Boolean emailsDisabled) {
            this.emailsDisabled = Objects.requireNonNull(emailsDisabled);
            return this;
        }
        @CustomType.Setter
        public Builder environmentsAccessLevel(String environmentsAccessLevel) {
            this.environmentsAccessLevel = Objects.requireNonNull(environmentsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder externalAuthorizationClassificationLabel(String externalAuthorizationClassificationLabel) {
            this.externalAuthorizationClassificationLabel = Objects.requireNonNull(externalAuthorizationClassificationLabel);
            return this;
        }
        @CustomType.Setter
        public Builder featureFlagsAccessLevel(String featureFlagsAccessLevel) {
            this.featureFlagsAccessLevel = Objects.requireNonNull(featureFlagsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder forkingAccessLevel(String forkingAccessLevel) {
            this.forkingAccessLevel = Objects.requireNonNull(forkingAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder httpUrlToRepo(String httpUrlToRepo) {
            this.httpUrlToRepo = Objects.requireNonNull(httpUrlToRepo);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder importUrl(String importUrl) {
            this.importUrl = Objects.requireNonNull(importUrl);
            return this;
        }
        @CustomType.Setter
        public Builder infrastructureAccessLevel(String infrastructureAccessLevel) {
            this.infrastructureAccessLevel = Objects.requireNonNull(infrastructureAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder issuesAccessLevel(String issuesAccessLevel) {
            this.issuesAccessLevel = Objects.requireNonNull(issuesAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder issuesEnabled(Boolean issuesEnabled) {
            this.issuesEnabled = Objects.requireNonNull(issuesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder keepLatestArtifact(Boolean keepLatestArtifact) {
            this.keepLatestArtifact = Objects.requireNonNull(keepLatestArtifact);
            return this;
        }
        @CustomType.Setter
        public Builder lfsEnabled(Boolean lfsEnabled) {
            this.lfsEnabled = Objects.requireNonNull(lfsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder mergeCommitTemplate(String mergeCommitTemplate) {
            this.mergeCommitTemplate = Objects.requireNonNull(mergeCommitTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder mergePipelinesEnabled(Boolean mergePipelinesEnabled) {
            this.mergePipelinesEnabled = Objects.requireNonNull(mergePipelinesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder mergeRequestsAccessLevel(String mergeRequestsAccessLevel) {
            this.mergeRequestsAccessLevel = Objects.requireNonNull(mergeRequestsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder mergeRequestsEnabled(Boolean mergeRequestsEnabled) {
            this.mergeRequestsEnabled = Objects.requireNonNull(mergeRequestsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder mergeTrainsEnabled(Boolean mergeTrainsEnabled) {
            this.mergeTrainsEnabled = Objects.requireNonNull(mergeTrainsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder monitorAccessLevel(String monitorAccessLevel) {
            this.monitorAccessLevel = Objects.requireNonNull(monitorAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(Integer namespaceId) {
            this.namespaceId = Objects.requireNonNull(namespaceId);
            return this;
        }
        @CustomType.Setter
        public Builder operationsAccessLevel(String operationsAccessLevel) {
            this.operationsAccessLevel = Objects.requireNonNull(operationsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder pathWithNamespace(String pathWithNamespace) {
            this.pathWithNamespace = Objects.requireNonNull(pathWithNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder pipelinesEnabled(Boolean pipelinesEnabled) {
            this.pipelinesEnabled = Objects.requireNonNull(pipelinesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder printingMergeRequestLinkEnabled(Boolean printingMergeRequestLinkEnabled) {
            this.printingMergeRequestLinkEnabled = Objects.requireNonNull(printingMergeRequestLinkEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder publicBuilds(@Nullable Boolean publicBuilds) {
            this.publicBuilds = publicBuilds;
            return this;
        }
        @CustomType.Setter
        public Builder pushRules(List<GetProjectPushRule> pushRules) {
            this.pushRules = Objects.requireNonNull(pushRules);
            return this;
        }
        public Builder pushRules(GetProjectPushRule... pushRules) {
            return pushRules(List.of(pushRules));
        }
        @CustomType.Setter
        public Builder releasesAccessLevel(String releasesAccessLevel) {
            this.releasesAccessLevel = Objects.requireNonNull(releasesAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder removeSourceBranchAfterMerge(Boolean removeSourceBranchAfterMerge) {
            this.removeSourceBranchAfterMerge = Objects.requireNonNull(removeSourceBranchAfterMerge);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryAccessLevel(String repositoryAccessLevel) {
            this.repositoryAccessLevel = Objects.requireNonNull(repositoryAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryStorage(String repositoryStorage) {
            this.repositoryStorage = Objects.requireNonNull(repositoryStorage);
            return this;
        }
        @CustomType.Setter
        public Builder requestAccessEnabled(Boolean requestAccessEnabled) {
            this.requestAccessEnabled = Objects.requireNonNull(requestAccessEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder requirementsAccessLevel(String requirementsAccessLevel) {
            this.requirementsAccessLevel = Objects.requireNonNull(requirementsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder resolveOutdatedDiffDiscussions(Boolean resolveOutdatedDiffDiscussions) {
            this.resolveOutdatedDiffDiscussions = Objects.requireNonNull(resolveOutdatedDiffDiscussions);
            return this;
        }
        @CustomType.Setter
        public Builder restrictUserDefinedVariables(Boolean restrictUserDefinedVariables) {
            this.restrictUserDefinedVariables = Objects.requireNonNull(restrictUserDefinedVariables);
            return this;
        }
        @CustomType.Setter
        public Builder runnersToken(String runnersToken) {
            this.runnersToken = Objects.requireNonNull(runnersToken);
            return this;
        }
        @CustomType.Setter
        public Builder securityAndComplianceAccessLevel(String securityAndComplianceAccessLevel) {
            this.securityAndComplianceAccessLevel = Objects.requireNonNull(securityAndComplianceAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder snippetsAccessLevel(String snippetsAccessLevel) {
            this.snippetsAccessLevel = Objects.requireNonNull(snippetsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder snippetsEnabled(Boolean snippetsEnabled) {
            this.snippetsEnabled = Objects.requireNonNull(snippetsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder squashCommitTemplate(String squashCommitTemplate) {
            this.squashCommitTemplate = Objects.requireNonNull(squashCommitTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder sshUrlToRepo(String sshUrlToRepo) {
            this.sshUrlToRepo = Objects.requireNonNull(sshUrlToRepo);
            return this;
        }
        @CustomType.Setter
        public Builder suggestionCommitMessage(String suggestionCommitMessage) {
            this.suggestionCommitMessage = Objects.requireNonNull(suggestionCommitMessage);
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<String> topics) {
            this.topics = Objects.requireNonNull(topics);
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder visibilityLevel(String visibilityLevel) {
            this.visibilityLevel = Objects.requireNonNull(visibilityLevel);
            return this;
        }
        @CustomType.Setter
        public Builder webUrl(String webUrl) {
            this.webUrl = Objects.requireNonNull(webUrl);
            return this;
        }
        @CustomType.Setter
        public Builder wikiAccessLevel(String wikiAccessLevel) {
            this.wikiAccessLevel = Objects.requireNonNull(wikiAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder wikiEnabled(Boolean wikiEnabled) {
            this.wikiEnabled = Objects.requireNonNull(wikiEnabled);
            return this;
        }
        public GetProjectResult build() {
            final var o = new GetProjectResult();
            o.analyticsAccessLevel = analyticsAccessLevel;
            o.archived = archived;
            o.autoCancelPendingPipelines = autoCancelPendingPipelines;
            o.autoDevopsDeployStrategy = autoDevopsDeployStrategy;
            o.autoDevopsEnabled = autoDevopsEnabled;
            o.autocloseReferencedIssues = autocloseReferencedIssues;
            o.buildGitStrategy = buildGitStrategy;
            o.buildTimeout = buildTimeout;
            o.buildsAccessLevel = buildsAccessLevel;
            o.ciConfigPath = ciConfigPath;
            o.ciDefaultGitDepth = ciDefaultGitDepth;
            o.ciSeparatedCaches = ciSeparatedCaches;
            o.containerExpirationPolicies = containerExpirationPolicies;
            o.containerRegistryAccessLevel = containerRegistryAccessLevel;
            o.defaultBranch = defaultBranch;
            o.description = description;
            o.emailsDisabled = emailsDisabled;
            o.environmentsAccessLevel = environmentsAccessLevel;
            o.externalAuthorizationClassificationLabel = externalAuthorizationClassificationLabel;
            o.featureFlagsAccessLevel = featureFlagsAccessLevel;
            o.forkingAccessLevel = forkingAccessLevel;
            o.httpUrlToRepo = httpUrlToRepo;
            o.id = id;
            o.importUrl = importUrl;
            o.infrastructureAccessLevel = infrastructureAccessLevel;
            o.issuesAccessLevel = issuesAccessLevel;
            o.issuesEnabled = issuesEnabled;
            o.keepLatestArtifact = keepLatestArtifact;
            o.lfsEnabled = lfsEnabled;
            o.mergeCommitTemplate = mergeCommitTemplate;
            o.mergePipelinesEnabled = mergePipelinesEnabled;
            o.mergeRequestsAccessLevel = mergeRequestsAccessLevel;
            o.mergeRequestsEnabled = mergeRequestsEnabled;
            o.mergeTrainsEnabled = mergeTrainsEnabled;
            o.monitorAccessLevel = monitorAccessLevel;
            o.name = name;
            o.namespaceId = namespaceId;
            o.operationsAccessLevel = operationsAccessLevel;
            o.path = path;
            o.pathWithNamespace = pathWithNamespace;
            o.pipelinesEnabled = pipelinesEnabled;
            o.printingMergeRequestLinkEnabled = printingMergeRequestLinkEnabled;
            o.publicBuilds = publicBuilds;
            o.pushRules = pushRules;
            o.releasesAccessLevel = releasesAccessLevel;
            o.removeSourceBranchAfterMerge = removeSourceBranchAfterMerge;
            o.repositoryAccessLevel = repositoryAccessLevel;
            o.repositoryStorage = repositoryStorage;
            o.requestAccessEnabled = requestAccessEnabled;
            o.requirementsAccessLevel = requirementsAccessLevel;
            o.resolveOutdatedDiffDiscussions = resolveOutdatedDiffDiscussions;
            o.restrictUserDefinedVariables = restrictUserDefinedVariables;
            o.runnersToken = runnersToken;
            o.securityAndComplianceAccessLevel = securityAndComplianceAccessLevel;
            o.snippetsAccessLevel = snippetsAccessLevel;
            o.snippetsEnabled = snippetsEnabled;
            o.squashCommitTemplate = squashCommitTemplate;
            o.sshUrlToRepo = sshUrlToRepo;
            o.suggestionCommitMessage = suggestionCommitMessage;
            o.topics = topics;
            o.visibilityLevel = visibilityLevel;
            o.webUrl = webUrl;
            o.wikiAccessLevel = wikiAccessLevel;
            o.wikiEnabled = wikiEnabled;
            return o;
        }
    }
}
