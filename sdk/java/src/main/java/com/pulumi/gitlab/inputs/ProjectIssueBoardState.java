// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.ProjectIssueBoardListArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectIssueBoardState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIssueBoardState Empty = new ProjectIssueBoardState();

    /**
     * The assignee the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="assigneeId")
    private @Nullable Output<Integer> assigneeId;

    /**
     * @return The assignee the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<Integer>> assigneeId() {
        return Optional.ofNullable(this.assigneeId);
    }

    /**
     * The list of label names which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return The list of label names which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The list of issue board lists
     * 
     */
    @Import(name="lists")
    private @Nullable Output<List<ProjectIssueBoardListArgs>> lists;

    /**
     * @return The list of issue board lists
     * 
     */
    public Optional<Output<List<ProjectIssueBoardListArgs>>> lists() {
        return Optional.ofNullable(this.lists);
    }

    /**
     * The milestone the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="milestoneId")
    private @Nullable Output<Integer> milestoneId;

    /**
     * @return The milestone the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<Integer>> milestoneId() {
        return Optional.ofNullable(this.milestoneId);
    }

    /**
     * The name of the board.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the board.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or full path of the project maintained by the authenticated user.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or full path of the project maintained by the authenticated user.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private ProjectIssueBoardState() {}

    private ProjectIssueBoardState(ProjectIssueBoardState $) {
        this.assigneeId = $.assigneeId;
        this.labels = $.labels;
        this.lists = $.lists;
        this.milestoneId = $.milestoneId;
        this.name = $.name;
        this.project = $.project;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIssueBoardState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIssueBoardState $;

        public Builder() {
            $ = new ProjectIssueBoardState();
        }

        public Builder(ProjectIssueBoardState defaults) {
            $ = new ProjectIssueBoardState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assigneeId The assignee the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder assigneeId(@Nullable Output<Integer> assigneeId) {
            $.assigneeId = assigneeId;
            return this;
        }

        /**
         * @param assigneeId The assignee the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder assigneeId(Integer assigneeId) {
            return assigneeId(Output.of(assigneeId));
        }

        /**
         * @param labels The list of label names which the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The list of label names which the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels The list of label names which the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param lists The list of issue board lists
         * 
         * @return builder
         * 
         */
        public Builder lists(@Nullable Output<List<ProjectIssueBoardListArgs>> lists) {
            $.lists = lists;
            return this;
        }

        /**
         * @param lists The list of issue board lists
         * 
         * @return builder
         * 
         */
        public Builder lists(List<ProjectIssueBoardListArgs> lists) {
            return lists(Output.of(lists));
        }

        /**
         * @param lists The list of issue board lists
         * 
         * @return builder
         * 
         */
        public Builder lists(ProjectIssueBoardListArgs... lists) {
            return lists(List.of(lists));
        }

        /**
         * @param milestoneId The milestone the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(@Nullable Output<Integer> milestoneId) {
            $.milestoneId = milestoneId;
            return this;
        }

        /**
         * @param milestoneId The milestone the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(Integer milestoneId) {
            return milestoneId(Output.of(milestoneId));
        }

        /**
         * @param name The name of the board.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the board.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or full path of the project maintained by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project maintained by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param weight The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public ProjectIssueBoardState build() {
            return $;
        }
    }

}
