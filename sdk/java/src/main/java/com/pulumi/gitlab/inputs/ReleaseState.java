// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.ReleaseAssetsArgs;
import com.pulumi.gitlab.inputs.ReleaseAuthorArgs;
import com.pulumi.gitlab.inputs.ReleaseCommitArgs;
import com.pulumi.gitlab.inputs.ReleaseLinksArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseState extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseState Empty = new ReleaseState();

    /**
     * The release assets.
     * 
     */
    @Import(name="assets")
    private @Nullable Output<ReleaseAssetsArgs> assets;

    /**
     * @return The release assets.
     * 
     */
    public Optional<Output<ReleaseAssetsArgs>> assets() {
        return Optional.ofNullable(this.assets);
    }

    /**
     * The author of the release.
     * 
     */
    @Import(name="author")
    private @Nullable Output<ReleaseAuthorArgs> author;

    /**
     * @return The author of the release.
     * 
     */
    public Optional<Output<ReleaseAuthorArgs>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * The release commit.
     * 
     */
    @Import(name="commit")
    private @Nullable Output<ReleaseCommitArgs> commit;

    /**
     * @return The release commit.
     * 
     */
    public Optional<Output<ReleaseCommitArgs>> commit() {
        return Optional.ofNullable(this.commit);
    }

    /**
     * The path to the commit
     * 
     */
    @Import(name="commitPath")
    private @Nullable Output<String> commitPath;

    /**
     * @return The path to the commit
     * 
     */
    public Optional<Output<String>> commitPath() {
        return Optional.ofNullable(this.commitPath);
    }

    /**
     * Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The description of the release. You can use Markdown.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the release. You can use Markdown.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * HTML rendered Markdown of the release description.
     * 
     */
    @Import(name="descriptionHtml")
    private @Nullable Output<String> descriptionHtml;

    /**
     * @return HTML rendered Markdown of the release description.
     * 
     */
    public Optional<Output<String>> descriptionHtml() {
        return Optional.ofNullable(this.descriptionHtml);
    }

    /**
     * Links of the release
     * 
     */
    @Import(name="links")
    private @Nullable Output<ReleaseLinksArgs> links;

    /**
     * @return Links of the release
     * 
     */
    public Optional<Output<ReleaseLinksArgs>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
     * 
     */
    @Import(name="milestones")
    private @Nullable Output<List<String>> milestones;

    /**
     * @return The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
     * 
     */
    public Optional<Output<List<String>>> milestones() {
        return Optional.ofNullable(this.milestones);
    }

    /**
     * The name of the release.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the release.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or full path of the project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
     * 
     */
    @Import(name="releasedAt")
    private @Nullable Output<String> releasedAt;

    /**
     * @return Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
     * 
     */
    public Optional<Output<String>> releasedAt() {
        return Optional.ofNullable(this.releasedAt);
    }

    /**
     * Message to use if creating a new annotated tag.
     * 
     */
    @Import(name="tagMessage")
    private @Nullable Output<String> tagMessage;

    /**
     * @return Message to use if creating a new annotated tag.
     * 
     */
    public Optional<Output<String>> tagMessage() {
        return Optional.ofNullable(this.tagMessage);
    }

    /**
     * The tag where the release is created from.
     * 
     */
    @Import(name="tagName")
    private @Nullable Output<String> tagName;

    /**
     * @return The tag where the release is created from.
     * 
     */
    public Optional<Output<String>> tagName() {
        return Optional.ofNullable(this.tagName);
    }

    /**
     * The path to the tag.
     * 
     */
    @Import(name="tagPath")
    private @Nullable Output<String> tagPath;

    /**
     * @return The path to the tag.
     * 
     */
    public Optional<Output<String>> tagPath() {
        return Optional.ofNullable(this.tagPath);
    }

    /**
     * Whether the release_at attribute is set to a future date.
     * 
     */
    @Import(name="upcomingRelease")
    private @Nullable Output<Boolean> upcomingRelease;

    /**
     * @return Whether the release_at attribute is set to a future date.
     * 
     */
    public Optional<Output<Boolean>> upcomingRelease() {
        return Optional.ofNullable(this.upcomingRelease);
    }

    private ReleaseState() {}

    private ReleaseState(ReleaseState $) {
        this.assets = $.assets;
        this.author = $.author;
        this.commit = $.commit;
        this.commitPath = $.commitPath;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.descriptionHtml = $.descriptionHtml;
        this.links = $.links;
        this.milestones = $.milestones;
        this.name = $.name;
        this.project = $.project;
        this.ref = $.ref;
        this.releasedAt = $.releasedAt;
        this.tagMessage = $.tagMessage;
        this.tagName = $.tagName;
        this.tagPath = $.tagPath;
        this.upcomingRelease = $.upcomingRelease;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseState $;

        public Builder() {
            $ = new ReleaseState();
        }

        public Builder(ReleaseState defaults) {
            $ = new ReleaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assets The release assets.
         * 
         * @return builder
         * 
         */
        public Builder assets(@Nullable Output<ReleaseAssetsArgs> assets) {
            $.assets = assets;
            return this;
        }

        /**
         * @param assets The release assets.
         * 
         * @return builder
         * 
         */
        public Builder assets(ReleaseAssetsArgs assets) {
            return assets(Output.of(assets));
        }

        /**
         * @param author The author of the release.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<ReleaseAuthorArgs> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author The author of the release.
         * 
         * @return builder
         * 
         */
        public Builder author(ReleaseAuthorArgs author) {
            return author(Output.of(author));
        }

        /**
         * @param commit The release commit.
         * 
         * @return builder
         * 
         */
        public Builder commit(@Nullable Output<ReleaseCommitArgs> commit) {
            $.commit = commit;
            return this;
        }

        /**
         * @param commit The release commit.
         * 
         * @return builder
         * 
         */
        public Builder commit(ReleaseCommitArgs commit) {
            return commit(Output.of(commit));
        }

        /**
         * @param commitPath The path to the commit
         * 
         * @return builder
         * 
         */
        public Builder commitPath(@Nullable Output<String> commitPath) {
            $.commitPath = commitPath;
            return this;
        }

        /**
         * @param commitPath The path to the commit
         * 
         * @return builder
         * 
         */
        public Builder commitPath(String commitPath) {
            return commitPath(Output.of(commitPath));
        }

        /**
         * @param createdAt Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description The description of the release. You can use Markdown.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the release. You can use Markdown.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param descriptionHtml HTML rendered Markdown of the release description.
         * 
         * @return builder
         * 
         */
        public Builder descriptionHtml(@Nullable Output<String> descriptionHtml) {
            $.descriptionHtml = descriptionHtml;
            return this;
        }

        /**
         * @param descriptionHtml HTML rendered Markdown of the release description.
         * 
         * @return builder
         * 
         */
        public Builder descriptionHtml(String descriptionHtml) {
            return descriptionHtml(Output.of(descriptionHtml));
        }

        /**
         * @param links Links of the release
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable Output<ReleaseLinksArgs> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links Links of the release
         * 
         * @return builder
         * 
         */
        public Builder links(ReleaseLinksArgs links) {
            return links(Output.of(links));
        }

        /**
         * @param milestones The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
         * 
         * @return builder
         * 
         */
        public Builder milestones(@Nullable Output<List<String>> milestones) {
            $.milestones = milestones;
            return this;
        }

        /**
         * @param milestones The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
         * 
         * @return builder
         * 
         */
        public Builder milestones(List<String> milestones) {
            return milestones(Output.of(milestones));
        }

        /**
         * @param milestones The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
         * 
         * @return builder
         * 
         */
        public Builder milestones(String... milestones) {
            return milestones(List.of(milestones));
        }

        /**
         * @param name The name of the release.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the release.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param ref If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param releasedAt Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
         * 
         * @return builder
         * 
         */
        public Builder releasedAt(@Nullable Output<String> releasedAt) {
            $.releasedAt = releasedAt;
            return this;
        }

        /**
         * @param releasedAt Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
         * 
         * @return builder
         * 
         */
        public Builder releasedAt(String releasedAt) {
            return releasedAt(Output.of(releasedAt));
        }

        /**
         * @param tagMessage Message to use if creating a new annotated tag.
         * 
         * @return builder
         * 
         */
        public Builder tagMessage(@Nullable Output<String> tagMessage) {
            $.tagMessage = tagMessage;
            return this;
        }

        /**
         * @param tagMessage Message to use if creating a new annotated tag.
         * 
         * @return builder
         * 
         */
        public Builder tagMessage(String tagMessage) {
            return tagMessage(Output.of(tagMessage));
        }

        /**
         * @param tagName The tag where the release is created from.
         * 
         * @return builder
         * 
         */
        public Builder tagName(@Nullable Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        /**
         * @param tagName The tag where the release is created from.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        /**
         * @param tagPath The path to the tag.
         * 
         * @return builder
         * 
         */
        public Builder tagPath(@Nullable Output<String> tagPath) {
            $.tagPath = tagPath;
            return this;
        }

        /**
         * @param tagPath The path to the tag.
         * 
         * @return builder
         * 
         */
        public Builder tagPath(String tagPath) {
            return tagPath(Output.of(tagPath));
        }

        /**
         * @param upcomingRelease Whether the release_at attribute is set to a future date.
         * 
         * @return builder
         * 
         */
        public Builder upcomingRelease(@Nullable Output<Boolean> upcomingRelease) {
            $.upcomingRelease = upcomingRelease;
            return this;
        }

        /**
         * @param upcomingRelease Whether the release_at attribute is set to a future date.
         * 
         * @return builder
         * 
         */
        public Builder upcomingRelease(Boolean upcomingRelease) {
            return upcomingRelease(Output.of(upcomingRelease));
        }

        public ReleaseState build() {
            return $;
        }
    }

}
