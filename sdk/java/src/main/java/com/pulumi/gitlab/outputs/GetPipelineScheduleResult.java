// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetPipelineScheduleLastPipeline;
import com.pulumi.gitlab.outputs.GetPipelineScheduleOwner;
import com.pulumi.gitlab.outputs.GetPipelineScheduleVariable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPipelineScheduleResult {
    /**
     * @return The activation status of pipeline schedule.
     * 
     */
    private Boolean active;
    /**
     * @return The datetime of when the schedule was created.
     * 
     */
    private String createdAt;
    /**
     * @return The cron (e.g. `0 1 * * *`).
     * 
     */
    private String cron;
    /**
     * @return The timezone.
     * 
     */
    private String cronTimezone;
    /**
     * @return The description of the pipeline schedule.
     * 
     */
    private String description;
    private String id;
    /**
     * @return The details of the last pipeline run by the schedule.
     * 
     */
    private GetPipelineScheduleLastPipeline lastPipeline;
    /**
     * @return The datetime of when the schedule will next run.
     * 
     */
    private String nextRunAt;
    /**
     * @return The details of the pipeline schedule owner.
     * 
     */
    private GetPipelineScheduleOwner owner;
    /**
     * @return The pipeline schedule id.
     * 
     */
    private Integer pipelineScheduleId;
    /**
     * @return The name or id of the project to add the schedule to.
     * 
     */
    private String project;
    /**
     * @return The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
     * 
     */
    private String ref;
    /**
     * @return The datetime of when the schedule was last updated.
     * 
     */
    private String updatedAt;
    /**
     * @return The list of the pipeline schedule variables.
     * 
     */
    private List<GetPipelineScheduleVariable> variables;

    private GetPipelineScheduleResult() {}
    /**
     * @return The activation status of pipeline schedule.
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return The datetime of when the schedule was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The cron (e.g. `0 1 * * *`).
     * 
     */
    public String cron() {
        return this.cron;
    }
    /**
     * @return The timezone.
     * 
     */
    public String cronTimezone() {
        return this.cronTimezone;
    }
    /**
     * @return The description of the pipeline schedule.
     * 
     */
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The details of the last pipeline run by the schedule.
     * 
     */
    public GetPipelineScheduleLastPipeline lastPipeline() {
        return this.lastPipeline;
    }
    /**
     * @return The datetime of when the schedule will next run.
     * 
     */
    public String nextRunAt() {
        return this.nextRunAt;
    }
    /**
     * @return The details of the pipeline schedule owner.
     * 
     */
    public GetPipelineScheduleOwner owner() {
        return this.owner;
    }
    /**
     * @return The pipeline schedule id.
     * 
     */
    public Integer pipelineScheduleId() {
        return this.pipelineScheduleId;
    }
    /**
     * @return The name or id of the project to add the schedule to.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return The datetime of when the schedule was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return The list of the pipeline schedule variables.
     * 
     */
    public List<GetPipelineScheduleVariable> variables() {
        return this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineScheduleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String createdAt;
        private String cron;
        private String cronTimezone;
        private String description;
        private String id;
        private GetPipelineScheduleLastPipeline lastPipeline;
        private String nextRunAt;
        private GetPipelineScheduleOwner owner;
        private Integer pipelineScheduleId;
        private String project;
        private String ref;
        private String updatedAt;
        private List<GetPipelineScheduleVariable> variables;
        public Builder() {}
        public Builder(GetPipelineScheduleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.createdAt = defaults.createdAt;
    	      this.cron = defaults.cron;
    	      this.cronTimezone = defaults.cronTimezone;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.lastPipeline = defaults.lastPipeline;
    	      this.nextRunAt = defaults.nextRunAt;
    	      this.owner = defaults.owner;
    	      this.pipelineScheduleId = defaults.pipelineScheduleId;
    	      this.project = defaults.project;
    	      this.ref = defaults.ref;
    	      this.updatedAt = defaults.updatedAt;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder cron(String cron) {
            if (cron == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "cron");
            }
            this.cron = cron;
            return this;
        }
        @CustomType.Setter
        public Builder cronTimezone(String cronTimezone) {
            if (cronTimezone == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "cronTimezone");
            }
            this.cronTimezone = cronTimezone;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastPipeline(GetPipelineScheduleLastPipeline lastPipeline) {
            if (lastPipeline == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "lastPipeline");
            }
            this.lastPipeline = lastPipeline;
            return this;
        }
        @CustomType.Setter
        public Builder nextRunAt(String nextRunAt) {
            if (nextRunAt == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "nextRunAt");
            }
            this.nextRunAt = nextRunAt;
            return this;
        }
        @CustomType.Setter
        public Builder owner(GetPipelineScheduleOwner owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineScheduleId(Integer pipelineScheduleId) {
            if (pipelineScheduleId == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "pipelineScheduleId");
            }
            this.pipelineScheduleId = pipelineScheduleId;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder variables(List<GetPipelineScheduleVariable> variables) {
            if (variables == null) {
              throw new MissingRequiredPropertyException("GetPipelineScheduleResult", "variables");
            }
            this.variables = variables;
            return this;
        }
        public Builder variables(GetPipelineScheduleVariable... variables) {
            return variables(List.of(variables));
        }
        public GetPipelineScheduleResult build() {
            final var _resultValue = new GetPipelineScheduleResult();
            _resultValue.active = active;
            _resultValue.createdAt = createdAt;
            _resultValue.cron = cron;
            _resultValue.cronTimezone = cronTimezone;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.lastPipeline = lastPipeline;
            _resultValue.nextRunAt = nextRunAt;
            _resultValue.owner = owner;
            _resultValue.pipelineScheduleId = pipelineScheduleId;
            _resultValue.project = project;
            _resultValue.ref = ref;
            _resultValue.updatedAt = updatedAt;
            _resultValue.variables = variables;
            return _resultValue;
        }
    }
}
