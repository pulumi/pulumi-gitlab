// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectMergeRequestNoteArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectMergeRequestNoteState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectMergeRequestNote` resource manages the lifecycle of a project merge request note.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/notes/#merge-requests)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.ProjectMergeRequestNote;
 * import com.pulumi.gitlab.ProjectMergeRequestNoteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Project("example", ProjectArgs.builder()
 *             .name("example project")
 *             .description("Lorem Ipsum")
 *             .visibilityLevel("public")
 *             .build());
 * 
 *         var exampleProjectMergeRequestNote = new ProjectMergeRequestNote("exampleProjectMergeRequestNote", ProjectMergeRequestNoteArgs.builder()
 *             .project(example.id())
 *             .mergeRequestIid(456)
 *             .body("Example note")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_merge_request_note`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_merge_request_note.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * A GitLab Project Merge Request Note can be imported using a key composed of `&lt;project-id&gt;:&lt;merge-request-iid&gt;:&lt;note-id&gt;`, for example:
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote example &#34;12345:1:3&#34;
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote")
public class ProjectMergeRequestNote extends com.pulumi.resources.CustomResource {
    /**
     * The body of the merge request note.
     * 
     */
    @Export(name="body", refs={String.class}, tree="[0]")
    private Output<String> body;

    /**
     * @return The body of the merge request note.
     * 
     */
    public Output<String> body() {
        return this.body;
    }
    /**
     * The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Indicates if the merge request note is internal.
     * 
     */
    @Export(name="internal", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> internal;

    /**
     * @return Indicates if the merge request note is internal.
     * 
     */
    public Output<Boolean> internal() {
        return this.internal;
    }
    /**
     * The diff head SHA of the merge request when the note was created.
     * 
     */
    @Export(name="mergeRequestDiffHeadSha", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mergeRequestDiffHeadSha;

    /**
     * @return The diff head SHA of the merge request when the note was created.
     * 
     */
    public Output<Optional<String>> mergeRequestDiffHeadSha() {
        return Codegen.optional(this.mergeRequestDiffHeadSha);
    }
    /**
     * The IID of the merge request to add the note to.
     * 
     */
    @Export(name="mergeRequestIid", refs={Integer.class}, tree="[0]")
    private Output<Integer> mergeRequestIid;

    /**
     * @return The IID of the merge request to add the note to.
     * 
     */
    public Output<Integer> mergeRequestIid() {
        return this.mergeRequestIid;
    }
    /**
     * The ID of the merge request note.
     * 
     */
    @Export(name="noteId", refs={Integer.class}, tree="[0]")
    private Output<Integer> noteId;

    /**
     * @return The ID of the merge request note.
     * 
     */
    public Output<Integer> noteId() {
        return this.noteId;
    }
    /**
     * The ID or path of the project to add the note to.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or path of the project to add the note to.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Indicates if the merge request note is resolvable.
     * 
     */
    @Export(name="resolvable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> resolvable;

    /**
     * @return Indicates if the merge request note is resolvable.
     * 
     */
    public Output<Boolean> resolvable() {
        return this.resolvable;
    }
    /**
     * Indicates if the merge request note is a system note.
     * 
     */
    @Export(name="system", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> system;

    /**
     * @return Indicates if the merge request note is a system note.
     * 
     */
    public Output<Boolean> system() {
        return this.system;
    }
    /**
     * The last updated date of the merge request note.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return The last updated date of the merge request note.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectMergeRequestNote(java.lang.String name) {
        this(name, ProjectMergeRequestNoteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectMergeRequestNote(java.lang.String name, ProjectMergeRequestNoteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectMergeRequestNote(java.lang.String name, ProjectMergeRequestNoteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectMergeRequestNote(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectMergeRequestNoteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectMergeRequestNoteArgs makeArgs(ProjectMergeRequestNoteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectMergeRequestNoteArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectMergeRequestNote get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectMergeRequestNoteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectMergeRequestNote(name, id, state, options);
    }
}
