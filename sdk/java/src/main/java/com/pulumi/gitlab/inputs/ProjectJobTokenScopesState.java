// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectJobTokenScopesState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectJobTokenScopesState Empty = new ProjectJobTokenScopesState();

    /**
     * Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `target_project_ids` or `target_group_ids`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `target_project_ids` or `target_group_ids`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID or full path of the project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID of the project.
     * 
     * @deprecated
     * `project_id` has been deprecated and will be removed in 19.0. Use `project` instead.
     * 
     */
    @Deprecated /* `project_id` has been deprecated and will be removed in 19.0. Use `project` instead. */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return The ID of the project.
     * 
     * @deprecated
     * `project_id` has been deprecated and will be removed in 19.0. Use `project` instead.
     * 
     */
    @Deprecated /* `project_id` has been deprecated and will be removed in 19.0. Use `project` instead. */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * A set of group IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    @Import(name="targetGroupIds")
    private @Nullable Output<List<Integer>> targetGroupIds;

    /**
     * @return A set of group IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    public Optional<Output<List<Integer>>> targetGroupIds() {
        return Optional.ofNullable(this.targetGroupIds);
    }

    /**
     * A set of project IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    @Import(name="targetProjectIds")
    private @Nullable Output<List<Integer>> targetProjectIds;

    /**
     * @return A set of project IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    public Optional<Output<List<Integer>>> targetProjectIds() {
        return Optional.ofNullable(this.targetProjectIds);
    }

    private ProjectJobTokenScopesState() {}

    private ProjectJobTokenScopesState(ProjectJobTokenScopesState $) {
        this.enabled = $.enabled;
        this.project = $.project;
        this.projectId = $.projectId;
        this.targetGroupIds = $.targetGroupIds;
        this.targetProjectIds = $.targetProjectIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectJobTokenScopesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectJobTokenScopesState $;

        public Builder() {
            $ = new ProjectJobTokenScopesState();
        }

        public Builder(ProjectJobTokenScopesState defaults) {
            $ = new ProjectJobTokenScopesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `target_project_ids` or `target_group_ids`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `target_project_ids` or `target_group_ids`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         * @deprecated
         * `project_id` has been deprecated and will be removed in 19.0. Use `project` instead.
         * 
         */
        @Deprecated /* `project_id` has been deprecated and will be removed in 19.0. Use `project` instead. */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         * @deprecated
         * `project_id` has been deprecated and will be removed in 19.0. Use `project` instead.
         * 
         */
        @Deprecated /* `project_id` has been deprecated and will be removed in 19.0. Use `project` instead. */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param targetGroupIds A set of group IDs that are in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupIds(@Nullable Output<List<Integer>> targetGroupIds) {
            $.targetGroupIds = targetGroupIds;
            return this;
        }

        /**
         * @param targetGroupIds A set of group IDs that are in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupIds(List<Integer> targetGroupIds) {
            return targetGroupIds(Output.of(targetGroupIds));
        }

        /**
         * @param targetGroupIds A set of group IDs that are in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetGroupIds(Integer... targetGroupIds) {
            return targetGroupIds(List.of(targetGroupIds));
        }

        /**
         * @param targetProjectIds A set of project IDs that are in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetProjectIds(@Nullable Output<List<Integer>> targetProjectIds) {
            $.targetProjectIds = targetProjectIds;
            return this;
        }

        /**
         * @param targetProjectIds A set of project IDs that are in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetProjectIds(List<Integer> targetProjectIds) {
            return targetProjectIds(Output.of(targetProjectIds));
        }

        /**
         * @param targetProjectIds A set of project IDs that are in the CI/CD job token inbound allowlist.
         * 
         * @return builder
         * 
         */
        public Builder targetProjectIds(Integer... targetProjectIds) {
            return targetProjectIds(List.of(targetProjectIds));
        }

        public ProjectJobTokenScopesState build() {
            return $;
        }
    }

}
