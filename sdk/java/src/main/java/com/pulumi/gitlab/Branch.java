// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.BranchArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.BranchState;
import com.pulumi.gitlab.outputs.BranchCommit;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The `gitlab.Branch` resource allows to manage the lifecycle of a repository branch.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.Branch;
 * import com.pulumi.gitlab.BranchArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleProject = new Project(&#34;exampleProject&#34;, ProjectArgs.builder()        
 *             .description(&#34;An example project&#34;)
 *             .namespaceId(gitlab_group.example().id())
 *             .build());
 * 
 *         var exampleBranch = new Branch(&#34;exampleBranch&#34;, BranchArgs.builder()        
 *             .ref(&#34;main&#34;)
 *             .project(exampleProject.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Gitlab branches can be imported with a key composed of `&lt;project_id&gt;:&lt;branch_name&gt;`, e.g.
 * 
 * ```sh
 *  $ pulumi import gitlab:index/branch:Branch example &#34;12345:develop&#34;
 * ```
 * 
 */
@ResourceType(type="gitlab:index/branch:Branch")
public class Branch extends com.pulumi.resources.CustomResource {
    /**
     * Bool, true if you can push to the branch.
     * 
     */
    @Export(name="canPush", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> canPush;

    /**
     * @return Bool, true if you can push to the branch.
     * 
     */
    public Output<Boolean> canPush() {
        return this.canPush;
    }
    /**
     * The commit associated with the branch ref.
     * 
     */
    @Export(name="commits", refs={List.class,BranchCommit.class}, tree="[0,1]")
    private Output<List<BranchCommit>> commits;

    /**
     * @return The commit associated with the branch ref.
     * 
     */
    public Output<List<BranchCommit>> commits() {
        return this.commits;
    }
    /**
     * Bool, true if branch is the default branch for the project.
     * 
     */
    @Export(name="default", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> default_;

    /**
     * @return Bool, true if branch is the default branch for the project.
     * 
     */
    public Output<Boolean> default_() {
        return this.default_;
    }
    /**
     * Bool, true if developer level access allows to merge branch.
     * 
     */
    @Export(name="developerCanMerge", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> developerCanMerge;

    /**
     * @return Bool, true if developer level access allows to merge branch.
     * 
     */
    public Output<Boolean> developerCanMerge() {
        return this.developerCanMerge;
    }
    /**
     * Bool, true if developer level access allows git push.
     * 
     */
    @Export(name="developerCanPush", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> developerCanPush;

    /**
     * @return Bool, true if developer level access allows git push.
     * 
     */
    public Output<Boolean> developerCanPush() {
        return this.developerCanPush;
    }
    /**
     * Bool, true if the branch has been merged into it&#39;s parent.
     * 
     */
    @Export(name="merged", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> merged;

    /**
     * @return Bool, true if the branch has been merged into it&#39;s parent.
     * 
     */
    public Output<Boolean> merged() {
        return this.merged;
    }
    /**
     * The name for this branch.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name for this branch.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID or full path of the project which the branch is created against.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or full path of the project which the branch is created against.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Bool, true if branch has branch protection.
     * 
     */
    @Export(name="protected", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> protected_;

    /**
     * @return Bool, true if branch has branch protection.
     * 
     */
    public Output<Boolean> protected_() {
        return this.protected_;
    }
    /**
     * The ref which the branch is created from.
     * 
     */
    @Export(name="ref", refs={String.class}, tree="[0]")
    private Output<String> ref;

    /**
     * @return The ref which the branch is created from.
     * 
     */
    public Output<String> ref() {
        return this.ref;
    }
    /**
     * The url of the created branch (https).
     * 
     */
    @Export(name="webUrl", refs={String.class}, tree="[0]")
    private Output<String> webUrl;

    /**
     * @return The url of the created branch (https).
     * 
     */
    public Output<String> webUrl() {
        return this.webUrl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Branch(String name) {
        this(name, BranchArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Branch(String name, BranchArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Branch(String name, BranchArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/branch:Branch", name, args == null ? BranchArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Branch(String name, Output<String> id, @Nullable BranchState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/branch:Branch", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Branch get(String name, Output<String> id, @Nullable BranchState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Branch(name, id, state, options);
    }
}
