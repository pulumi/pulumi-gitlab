// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetGroupProvisionedUsersProvisionedUser;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupProvisionedUsersPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGroupProvisionedUsersPlainArgs Empty = new GetGroupProvisionedUsersPlainArgs();

    /**
     * Return only active provisioned users.
     * 
     */
    @Import(name="active")
    private @Nullable Boolean active;

    /**
     * @return Return only active provisioned users.
     * 
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Return only blocked provisioned users.
     * 
     */
    @Import(name="blocked")
    private @Nullable Boolean blocked;

    /**
     * @return Return only blocked provisioned users.
     * 
     */
    public Optional<Boolean> blocked() {
        return Optional.ofNullable(this.blocked);
    }

    /**
     * Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    @Import(name="createdAfter")
    private @Nullable String createdAfter;

    /**
     * @return Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    public Optional<String> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }

    /**
     * Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    @Import(name="createdBefore")
    private @Nullable String createdBefore;

    /**
     * @return Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    public Optional<String> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }

    /**
     * The ID or URL-encoded path of the group.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The ID or URL-encoded path of the group.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The list of provisioned users.
     * 
     */
    @Import(name="provisionedUsers")
    private @Nullable List<GetGroupProvisionedUsersProvisionedUser> provisionedUsers;

    /**
     * @return The list of provisioned users.
     * 
     */
    public Optional<List<GetGroupProvisionedUsersProvisionedUser>> provisionedUsers() {
        return Optional.ofNullable(this.provisionedUsers);
    }

    /**
     * The search query to filter the provisioned users.
     * 
     */
    @Import(name="search")
    private @Nullable String search;

    /**
     * @return The search query to filter the provisioned users.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * The username of the provisioned user.
     * 
     */
    @Import(name="username")
    private @Nullable String username;

    /**
     * @return The username of the provisioned user.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    private GetGroupProvisionedUsersPlainArgs() {}

    private GetGroupProvisionedUsersPlainArgs(GetGroupProvisionedUsersPlainArgs $) {
        this.active = $.active;
        this.blocked = $.blocked;
        this.createdAfter = $.createdAfter;
        this.createdBefore = $.createdBefore;
        this.id = $.id;
        this.provisionedUsers = $.provisionedUsers;
        this.search = $.search;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupProvisionedUsersPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupProvisionedUsersPlainArgs $;

        public Builder() {
            $ = new GetGroupProvisionedUsersPlainArgs();
        }

        public Builder(GetGroupProvisionedUsersPlainArgs defaults) {
            $ = new GetGroupProvisionedUsersPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Return only active provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Boolean active) {
            $.active = active;
            return this;
        }

        /**
         * @param blocked Return only blocked provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder blocked(@Nullable Boolean blocked) {
            $.blocked = blocked;
            return this;
        }

        /**
         * @param createdAfter Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(@Nullable String createdAfter) {
            $.createdAfter = createdAfter;
            return this;
        }

        /**
         * @param createdBefore Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(@Nullable String createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        /**
         * @param id The ID or URL-encoded path of the group.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param provisionedUsers The list of provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder provisionedUsers(@Nullable List<GetGroupProvisionedUsersProvisionedUser> provisionedUsers) {
            $.provisionedUsers = provisionedUsers;
            return this;
        }

        /**
         * @param provisionedUsers The list of provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder provisionedUsers(GetGroupProvisionedUsersProvisionedUser... provisionedUsers) {
            return provisionedUsers(List.of(provisionedUsers));
        }

        /**
         * @param search The search query to filter the provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable String search) {
            $.search = search;
            return this;
        }

        /**
         * @param username The username of the provisioned user.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        public GetGroupProvisionedUsersPlainArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetGroupProvisionedUsersPlainArgs", "id");
            }
            return $;
        }
    }

}
