// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetProjectMilestonesMilestone;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectMilestonesResult {
    /**
     * @return The ID of this datasource. In the format `&lt;project:options-hash&gt;`.
     * 
     */
    private String id;
    /**
     * @return Return only the milestones having the given `iid` (Note: ignored if `includeParentMilestones` is set as `true`).
     * 
     */
    private @Nullable List<Integer> iids;
    /**
     * @return Include group milestones from parent group and its ancestors.
     * 
     */
    private @Nullable Boolean includeParentMilestones;
    /**
     * @return List of milestones from a project.
     * 
     */
    private List<GetProjectMilestonesMilestone> milestones;
    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    private String project;
    /**
     * @return Return only milestones with a title or description matching the provided string.
     * 
     */
    private @Nullable String search;
    /**
     * @return Return only `active` or `closed` milestones.
     * 
     */
    private @Nullable String state;
    /**
     * @return Return only the milestones having the given `title`.
     * 
     */
    private @Nullable String title;

    private GetProjectMilestonesResult() {}
    /**
     * @return The ID of this datasource. In the format `&lt;project:options-hash&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Return only the milestones having the given `iid` (Note: ignored if `includeParentMilestones` is set as `true`).
     * 
     */
    public List<Integer> iids() {
        return this.iids == null ? List.of() : this.iids;
    }
    /**
     * @return Include group milestones from parent group and its ancestors.
     * 
     */
    public Optional<Boolean> includeParentMilestones() {
        return Optional.ofNullable(this.includeParentMilestones);
    }
    /**
     * @return List of milestones from a project.
     * 
     */
    public List<GetProjectMilestonesMilestone> milestones() {
        return this.milestones;
    }
    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Return only milestones with a title or description matching the provided string.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return Return only `active` or `closed` milestones.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Return only the milestones having the given `title`.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectMilestonesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable List<Integer> iids;
        private @Nullable Boolean includeParentMilestones;
        private List<GetProjectMilestonesMilestone> milestones;
        private String project;
        private @Nullable String search;
        private @Nullable String state;
        private @Nullable String title;
        public Builder() {}
        public Builder(GetProjectMilestonesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.iids = defaults.iids;
    	      this.includeParentMilestones = defaults.includeParentMilestones;
    	      this.milestones = defaults.milestones;
    	      this.project = defaults.project;
    	      this.search = defaults.search;
    	      this.state = defaults.state;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectMilestonesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iids(@Nullable List<Integer> iids) {

            this.iids = iids;
            return this;
        }
        public Builder iids(Integer... iids) {
            return iids(List.of(iids));
        }
        @CustomType.Setter
        public Builder includeParentMilestones(@Nullable Boolean includeParentMilestones) {

            this.includeParentMilestones = includeParentMilestones;
            return this;
        }
        @CustomType.Setter
        public Builder milestones(List<GetProjectMilestonesMilestone> milestones) {
            if (milestones == null) {
              throw new MissingRequiredPropertyException("GetProjectMilestonesResult", "milestones");
            }
            this.milestones = milestones;
            return this;
        }
        public Builder milestones(GetProjectMilestonesMilestone... milestones) {
            return milestones(List.of(milestones));
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetProjectMilestonesResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder search(@Nullable String search) {

            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        public GetProjectMilestonesResult build() {
            final var _resultValue = new GetProjectMilestonesResult();
            _resultValue.id = id;
            _resultValue.iids = iids;
            _resultValue.includeParentMilestones = includeParentMilestones;
            _resultValue.milestones = milestones;
            _resultValue.project = project;
            _resultValue.search = search;
            _resultValue.state = state;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
