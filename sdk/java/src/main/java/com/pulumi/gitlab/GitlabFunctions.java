// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.GetApplicationArgs;
import com.pulumi.gitlab.inputs.GetApplicationPlainArgs;
import com.pulumi.gitlab.inputs.GetBranchArgs;
import com.pulumi.gitlab.inputs.GetBranchPlainArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentPlainArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentsPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupArgs;
import com.pulumi.gitlab.inputs.GetGroupHookArgs;
import com.pulumi.gitlab.inputs.GetGroupHookPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupHooksArgs;
import com.pulumi.gitlab.inputs.GetGroupHooksPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
import com.pulumi.gitlab.inputs.GetGroupMembershipPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
import com.pulumi.gitlab.inputs.GetGroupSubgroupsPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
import com.pulumi.gitlab.inputs.GetGroupVariablePlainArgs;
import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
import com.pulumi.gitlab.inputs.GetGroupVariablesPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupsArgs;
import com.pulumi.gitlab.inputs.GetGroupsPlainArgs;
import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
import com.pulumi.gitlab.inputs.GetInstanceDeployKeysPlainArgs;
import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
import com.pulumi.gitlab.inputs.GetInstanceVariablePlainArgs;
import com.pulumi.gitlab.inputs.GetProjectArgs;
import com.pulumi.gitlab.inputs.GetProjectBranchesArgs;
import com.pulumi.gitlab.inputs.GetProjectBranchesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectHookArgs;
import com.pulumi.gitlab.inputs.GetProjectHookPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
import com.pulumi.gitlab.inputs.GetProjectHooksPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
import com.pulumi.gitlab.inputs.GetProjectIssuePlainArgs;
import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
import com.pulumi.gitlab.inputs.GetProjectIssuesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
import com.pulumi.gitlab.inputs.GetProjectMembershipPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestoneArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestonePlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestonesArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestonesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectTagArgs;
import com.pulumi.gitlab.inputs.GetProjectTagPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectTagsArgs;
import com.pulumi.gitlab.inputs.GetProjectTagsPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
import com.pulumi.gitlab.inputs.GetProjectVariablePlainArgs;
import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
import com.pulumi.gitlab.inputs.GetProjectVariablesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectsArgs;
import com.pulumi.gitlab.inputs.GetProjectsPlainArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinkArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinkPlainArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinksArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinksPlainArgs;
import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
import com.pulumi.gitlab.inputs.GetRepositoryFilePlainArgs;
import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
import com.pulumi.gitlab.inputs.GetRepositoryTreePlainArgs;
import com.pulumi.gitlab.inputs.GetUserArgs;
import com.pulumi.gitlab.inputs.GetUserPlainArgs;
import com.pulumi.gitlab.inputs.GetUserSshkeysArgs;
import com.pulumi.gitlab.inputs.GetUserSshkeysPlainArgs;
import com.pulumi.gitlab.inputs.GetUsersArgs;
import com.pulumi.gitlab.inputs.GetUsersPlainArgs;
import com.pulumi.gitlab.outputs.GetApplicationResult;
import com.pulumi.gitlab.outputs.GetBranchResult;
import com.pulumi.gitlab.outputs.GetClusterAgentResult;
import com.pulumi.gitlab.outputs.GetClusterAgentsResult;
import com.pulumi.gitlab.outputs.GetCurrentUserResult;
import com.pulumi.gitlab.outputs.GetGroupHookResult;
import com.pulumi.gitlab.outputs.GetGroupHooksResult;
import com.pulumi.gitlab.outputs.GetGroupMembershipResult;
import com.pulumi.gitlab.outputs.GetGroupResult;
import com.pulumi.gitlab.outputs.GetGroupSubgroupsResult;
import com.pulumi.gitlab.outputs.GetGroupVariableResult;
import com.pulumi.gitlab.outputs.GetGroupVariablesResult;
import com.pulumi.gitlab.outputs.GetGroupsResult;
import com.pulumi.gitlab.outputs.GetInstanceDeployKeysResult;
import com.pulumi.gitlab.outputs.GetInstanceVariableResult;
import com.pulumi.gitlab.outputs.GetInstanceVariablesResult;
import com.pulumi.gitlab.outputs.GetMetadataResult;
import com.pulumi.gitlab.outputs.GetProjectBranchesResult;
import com.pulumi.gitlab.outputs.GetProjectHookResult;
import com.pulumi.gitlab.outputs.GetProjectHooksResult;
import com.pulumi.gitlab.outputs.GetProjectIssueResult;
import com.pulumi.gitlab.outputs.GetProjectIssuesResult;
import com.pulumi.gitlab.outputs.GetProjectMembershipResult;
import com.pulumi.gitlab.outputs.GetProjectMilestoneResult;
import com.pulumi.gitlab.outputs.GetProjectMilestonesResult;
import com.pulumi.gitlab.outputs.GetProjectProtectedBranchResult;
import com.pulumi.gitlab.outputs.GetProjectProtectedBranchesResult;
import com.pulumi.gitlab.outputs.GetProjectResult;
import com.pulumi.gitlab.outputs.GetProjectTagResult;
import com.pulumi.gitlab.outputs.GetProjectTagsResult;
import com.pulumi.gitlab.outputs.GetProjectVariableResult;
import com.pulumi.gitlab.outputs.GetProjectVariablesResult;
import com.pulumi.gitlab.outputs.GetProjectsResult;
import com.pulumi.gitlab.outputs.GetReleaseLinkResult;
import com.pulumi.gitlab.outputs.GetReleaseLinksResult;
import com.pulumi.gitlab.outputs.GetRepositoryFileResult;
import com.pulumi.gitlab.outputs.GetRepositoryTreeResult;
import com.pulumi.gitlab.outputs.GetUserResult;
import com.pulumi.gitlab.outputs.GetUserSshkeysResult;
import com.pulumi.gitlab.outputs.GetUsersResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class GitlabFunctions {
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/applications.html)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .applicationId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args) {
        return getApplication(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/applications.html)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .applicationId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args) {
        return getApplicationPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/applications.html)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .applicationId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/applications.html)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .applicationId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getBranch(GetBranchArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args) {
        return getBranch(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getBranch(GetBranchArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args) {
        return getBranchPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getBranch(GetBranchArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getBranch(GetBranchArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ClusterAgent` data source allows to retrieve details about a GitLab Agent for Kubernetes.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .agentId(1)
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClusterAgentResult> getClusterAgent(GetClusterAgentArgs args) {
        return getClusterAgent(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ClusterAgent` data source allows to retrieve details about a GitLab Agent for Kubernetes.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .agentId(1)
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClusterAgentResult> getClusterAgentPlain(GetClusterAgentPlainArgs args) {
        return getClusterAgentPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ClusterAgent` data source allows to retrieve details about a GitLab Agent for Kubernetes.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .agentId(1)
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClusterAgentResult> getClusterAgent(GetClusterAgentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getClusterAgent:getClusterAgent", TypeShape.of(GetClusterAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ClusterAgent` data source allows to retrieve details about a GitLab Agent for Kubernetes.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .agentId(1)
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClusterAgentResult> getClusterAgentPlain(GetClusterAgentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getClusterAgent:getClusterAgent", TypeShape.of(GetClusterAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getClusterAgents` data source allows details of GitLab Agents for Kubernetes in a project.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClusterAgentsResult> getClusterAgents(GetClusterAgentsArgs args) {
        return getClusterAgents(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getClusterAgents` data source allows details of GitLab Agents for Kubernetes in a project.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClusterAgentsResult> getClusterAgentsPlain(GetClusterAgentsPlainArgs args) {
        return getClusterAgentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getClusterAgents` data source allows details of GitLab Agents for Kubernetes in a project.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClusterAgentsResult> getClusterAgents(GetClusterAgentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getClusterAgents:getClusterAgents", TypeShape.of(GetClusterAgentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getClusterAgents` data source allows details of GitLab Agents for Kubernetes in a project.
     * 
     * &gt; Requires at least GitLab 14.10
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project(&#34;12345&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClusterAgentsResult> getClusterAgentsPlain(GetClusterAgentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getClusterAgents:getClusterAgents", TypeShape.of(GetClusterAgentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser() {
        return getCurrentUser(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain() {
        return getCurrentUserPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args) {
        return getCurrentUser(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain(InvokeArgs args) {
        return getCurrentUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupResult> getGroup() {
        return getGroup(GetGroupArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain() {
        return getGroupPlain(GetGroupPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args) {
        return getGroup(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args) {
        return getGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#get-group-hook)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleGroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleGroupHook = GitlabFunctions.getGroupHook(GetGroupHookArgs.builder()
     *             .group(exampleGroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupHookResult> getGroupHook(GetGroupHookArgs args) {
        return getGroupHook(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#get-group-hook)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleGroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleGroupHook = GitlabFunctions.getGroupHook(GetGroupHookArgs.builder()
     *             .group(exampleGroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupHookResult> getGroupHookPlain(GetGroupHookPlainArgs args) {
        return getGroupHookPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#get-group-hook)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleGroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleGroupHook = GitlabFunctions.getGroupHook(GetGroupHookArgs.builder()
     *             .group(exampleGroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupHookResult> getGroupHook(GetGroupHookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupHook:getGroupHook", TypeShape.of(GetGroupHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#get-group-hook)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleGroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleGroupHook = GitlabFunctions.getGroupHook(GetGroupHookArgs.builder()
     *             .group(exampleGroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupHookResult> getGroupHookPlain(GetGroupHookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupHook:getGroupHook", TypeShape.of(GetGroupHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-group-hooks)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getGroupHooks(GetGroupHooksArgs.builder()
     *             .group(example.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupHooksResult> getGroupHooks(GetGroupHooksArgs args) {
        return getGroupHooks(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-group-hooks)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getGroupHooks(GetGroupHooksArgs.builder()
     *             .group(example.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupHooksResult> getGroupHooksPlain(GetGroupHooksPlainArgs args) {
        return getGroupHooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-group-hooks)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getGroupHooks(GetGroupHooksArgs.builder()
     *             .group(example.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupHooksResult> getGroupHooks(GetGroupHooksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupHooks:getGroupHooks", TypeShape.of(GetGroupHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-group-hooks)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetGroupHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getGroupHooks(GetGroupHooksArgs.builder()
     *             .group(example.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupHooksResult> getGroupHooksPlain(GetGroupHooksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupHooks:getGroupHooks", TypeShape.of(GetGroupHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroupMembership(GetGroupMembershipArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupMembershipResult> getGroupMembership() {
        return getGroupMembership(GetGroupMembershipArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroupMembership(GetGroupMembershipArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupMembershipResult> getGroupMembershipPlain() {
        return getGroupMembershipPlain(GetGroupMembershipPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroupMembership(GetGroupMembershipArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupMembershipResult> getGroupMembership(GetGroupMembershipArgs args) {
        return getGroupMembership(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroupMembership(GetGroupMembershipArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupMembershipResult> getGroupMembershipPlain(GetGroupMembershipPlainArgs args) {
        return getGroupMembershipPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroupMembership(GetGroupMembershipArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupMembershipResult> getGroupMembership(GetGroupMembershipArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupMembership:getGroupMembership", TypeShape.of(GetGroupMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroupMembership(GetGroupMembershipArgs.builder()
     *             .fullPath(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupMembershipResult> getGroupMembershipPlain(GetGroupMembershipPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupMembership:getGroupMembership", TypeShape.of(GetGroupMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroupsGroupSubgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(&#34;123456&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;subgroups&#34;, subgroupsGroupSubgroups.applyValue(getGroupSubgroupsResult -&gt; getGroupSubgroupsResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupSubgroupsResult> getGroupSubgroups(GetGroupSubgroupsArgs args) {
        return getGroupSubgroups(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroupsGroupSubgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(&#34;123456&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;subgroups&#34;, subgroupsGroupSubgroups.applyValue(getGroupSubgroupsResult -&gt; getGroupSubgroupsResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupSubgroupsResult> getGroupSubgroupsPlain(GetGroupSubgroupsPlainArgs args) {
        return getGroupSubgroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroupsGroupSubgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(&#34;123456&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;subgroups&#34;, subgroupsGroupSubgroups.applyValue(getGroupSubgroupsResult -&gt; getGroupSubgroupsResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupSubgroupsResult> getGroupSubgroups(GetGroupSubgroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupSubgroups:getGroupSubgroups", TypeShape.of(GetGroupSubgroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroupsGroupSubgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(&#34;123456&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;subgroups&#34;, subgroupsGroupSubgroups.applyValue(getGroupSubgroupsResult -&gt; getGroupSubgroupsResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupSubgroupsResult> getGroupSubgroupsPlain(GetGroupSubgroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupSubgroups:getGroupSubgroups", TypeShape.of(GetGroupSubgroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupVariableResult> getGroupVariable(GetGroupVariableArgs args) {
        return getGroupVariable(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupVariableResult> getGroupVariablePlain(GetGroupVariablePlainArgs args) {
        return getGroupVariablePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupVariableResult> getGroupVariable(GetGroupVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupVariable:getGroupVariable", TypeShape.of(GetGroupVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .key(&#34;bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupVariableResult> getGroupVariablePlain(GetGroupVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupVariable:getGroupVariable", TypeShape.of(GetGroupVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupVariablesResult> getGroupVariables(GetGroupVariablesArgs args) {
        return getGroupVariables(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupVariablesResult> getGroupVariablesPlain(GetGroupVariablesPlainArgs args) {
        return getGroupVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupVariablesResult> getGroupVariables(GetGroupVariablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupVariables:getGroupVariables", TypeShape.of(GetGroupVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .group(&#34;my/example/group&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupVariablesResult> getGroupVariablesPlain(GetGroupVariablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupVariables:getGroupVariables", TypeShape.of(GetGroupVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-groups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search(&#34;GitLab&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupsResult> getGroups() {
        return getGroups(GetGroupsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-groups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search(&#34;GitLab&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain() {
        return getGroupsPlain(GetGroupsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-groups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search(&#34;GitLab&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args) {
        return getGroups(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-groups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search(&#34;GitLab&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain(GetGroupsPlainArgs args) {
        return getGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-groups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search(&#34;GitLab&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-groups)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search(&#34;GitLab&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain(GetGroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceDeployKeys(GetInstanceDeployKeysArgs.builder()
     *             .public_(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceDeployKeysResult> getInstanceDeployKeys() {
        return getInstanceDeployKeys(GetInstanceDeployKeysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceDeployKeys(GetInstanceDeployKeysArgs.builder()
     *             .public_(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceDeployKeysResult> getInstanceDeployKeysPlain() {
        return getInstanceDeployKeysPlain(GetInstanceDeployKeysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceDeployKeys(GetInstanceDeployKeysArgs.builder()
     *             .public_(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceDeployKeysResult> getInstanceDeployKeys(GetInstanceDeployKeysArgs args) {
        return getInstanceDeployKeys(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceDeployKeys(GetInstanceDeployKeysArgs.builder()
     *             .public_(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceDeployKeysResult> getInstanceDeployKeysPlain(GetInstanceDeployKeysPlainArgs args) {
        return getInstanceDeployKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceDeployKeys(GetInstanceDeployKeysArgs.builder()
     *             .public_(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceDeployKeysResult> getInstanceDeployKeys(GetInstanceDeployKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceDeployKeys:getInstanceDeployKeys", TypeShape.of(GetInstanceDeployKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceDeployKeys(GetInstanceDeployKeysArgs.builder()
     *             .public_(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceDeployKeysResult> getInstanceDeployKeysPlain(GetInstanceDeployKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getInstanceDeployKeys:getInstanceDeployKeys", TypeShape.of(GetInstanceDeployKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceVariable` data source allows to retrieve details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceVariableResult> getInstanceVariable(GetInstanceVariableArgs args) {
        return getInstanceVariable(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.InstanceVariable` data source allows to retrieve details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceVariableResult> getInstanceVariablePlain(GetInstanceVariablePlainArgs args) {
        return getInstanceVariablePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.InstanceVariable` data source allows to retrieve details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceVariableResult> getInstanceVariable(GetInstanceVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceVariable:getInstanceVariable", TypeShape.of(GetInstanceVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceVariable` data source allows to retrieve details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceVariableResult> getInstanceVariablePlain(GetInstanceVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getInstanceVariable:getInstanceVariable", TypeShape.of(GetInstanceVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceVariables` data source allows to retrieve all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceVariablesResult> getInstanceVariables() {
        return getInstanceVariables(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source allows to retrieve all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceVariablesResult> getInstanceVariablesPlain() {
        return getInstanceVariablesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source allows to retrieve all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceVariablesResult> getInstanceVariables(InvokeArgs args) {
        return getInstanceVariables(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source allows to retrieve all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceVariablesResult> getInstanceVariablesPlain(InvokeArgs args) {
        return getInstanceVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source allows to retrieve all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceVariablesResult> getInstanceVariables(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceVariables:getInstanceVariables", TypeShape.of(GetInstanceVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceVariables` data source allows to retrieve all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceVariablesResult> getInstanceVariablesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getInstanceVariables:getInstanceVariables", TypeShape.of(GetInstanceVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/metadata.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetMetadataResult> getMetadata() {
        return getMetadata(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/metadata.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetMetadataResult> getMetadataPlain() {
        return getMetadataPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/metadata.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetMetadataResult> getMetadata(InvokeArgs args) {
        return getMetadata(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/metadata.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetMetadataResult> getMetadataPlain(InvokeArgs args) {
        return getMetadataPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/metadata.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetMetadataResult> getMetadata(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getMetadata:getMetadata", TypeShape.of(GetMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/metadata.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetMetadataResult> getMetadataPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getMetadata:getMetadata", TypeShape.of(GetMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject() {
        return getProject(GetProjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain() {
        return getProjectPlain(GetProjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectBranches(GetProjectBranchesArgs.builder()
     *             .project(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectBranchesResult> getProjectBranches(GetProjectBranchesArgs args) {
        return getProjectBranches(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectBranches(GetProjectBranchesArgs.builder()
     *             .project(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectBranchesResult> getProjectBranchesPlain(GetProjectBranchesPlainArgs args) {
        return getProjectBranchesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectBranches(GetProjectBranchesArgs.builder()
     *             .project(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectBranchesResult> getProjectBranches(GetProjectBranchesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectBranches:getProjectBranches", TypeShape.of(GetProjectBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectBranches(GetProjectBranchesArgs.builder()
     *             .project(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectBranchesResult> getProjectBranchesPlain(GetProjectBranchesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectBranches:getProjectBranches", TypeShape.of(GetProjectBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectHook` data source allows to retrieve details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-project-hook)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleProject = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(exampleProject.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectHookResult> getProjectHook(GetProjectHookArgs args) {
        return getProjectHook(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectHook` data source allows to retrieve details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-project-hook)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleProject = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(exampleProject.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectHookResult> getProjectHookPlain(GetProjectHookPlainArgs args) {
        return getProjectHookPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectHook` data source allows to retrieve details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-project-hook)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleProject = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(exampleProject.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectHookResult> getProjectHook(GetProjectHookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectHook:getProjectHook", TypeShape.of(GetProjectHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectHook` data source allows to retrieve details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-project-hook)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleProject = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var exampleProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(exampleProject.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectHookResult> getProjectHookPlain(GetProjectHookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectHook:getProjectHook", TypeShape.of(GetProjectHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-project-hooks)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectHooksResult> getProjectHooks(GetProjectHooksArgs args) {
        return getProjectHooks(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-project-hooks)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectHooksResult> getProjectHooksPlain(GetProjectHooksPlainArgs args) {
        return getProjectHooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-project-hooks)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectHooksResult> getProjectHooks(GetProjectHooksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectHooks:getProjectHooks", TypeShape.of(GetProjectHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-project-hooks)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectHooksResult> getProjectHooksPlain(GetProjectHooksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectHooks:getProjectHooks", TypeShape.of(GetProjectHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export(&#34;welcomeIssueWebUrl&#34;, data.gitlab_project_issue().web_url());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectIssueResult> getProjectIssue(GetProjectIssueArgs args) {
        return getProjectIssue(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export(&#34;welcomeIssueWebUrl&#34;, data.gitlab_project_issue().web_url());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectIssueResult> getProjectIssuePlain(GetProjectIssuePlainArgs args) {
        return getProjectIssuePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export(&#34;welcomeIssueWebUrl&#34;, data.gitlab_project_issue().web_url());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectIssueResult> getProjectIssue(GetProjectIssueArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIssue:getProjectIssue", TypeShape.of(GetProjectIssueResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export(&#34;welcomeIssueWebUrl&#34;, data.gitlab_project_issue().web_url());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectIssueResult> getProjectIssuePlain(GetProjectIssuePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectIssue:getProjectIssue", TypeShape.of(GetProjectIssueResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .search(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectIssuesResult> getProjectIssues(GetProjectIssuesArgs args) {
        return getProjectIssues(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .search(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectIssuesResult> getProjectIssuesPlain(GetProjectIssuesPlainArgs args) {
        return getProjectIssuesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .search(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectIssuesResult> getProjectIssues(GetProjectIssuesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIssues:getProjectIssues", TypeShape.of(GetProjectIssuesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.applyValue(getProjectResult -&gt; getProjectResult.id()))
     *             .search(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectIssuesResult> getProjectIssuesPlain(GetProjectIssuesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectIssues:getProjectIssues", TypeShape.of(GetProjectIssuesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
     * 
     * &gt; **Note** exactly one of project_id or full_path must be provided.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMembership(GetProjectMembershipArgs.builder()
     *             .inherited(true)
     *             .projectId(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectMembershipResult> getProjectMembership() {
        return getProjectMembership(GetProjectMembershipArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
     * 
     * &gt; **Note** exactly one of project_id or full_path must be provided.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMembership(GetProjectMembershipArgs.builder()
     *             .inherited(true)
     *             .projectId(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectMembershipResult> getProjectMembershipPlain() {
        return getProjectMembershipPlain(GetProjectMembershipPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
     * 
     * &gt; **Note** exactly one of project_id or full_path must be provided.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMembership(GetProjectMembershipArgs.builder()
     *             .inherited(true)
     *             .projectId(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectMembershipResult> getProjectMembership(GetProjectMembershipArgs args) {
        return getProjectMembership(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
     * 
     * &gt; **Note** exactly one of project_id or full_path must be provided.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMembership(GetProjectMembershipArgs.builder()
     *             .inherited(true)
     *             .projectId(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectMembershipResult> getProjectMembershipPlain(GetProjectMembershipPlainArgs args) {
        return getProjectMembershipPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
     * 
     * &gt; **Note** exactly one of project_id or full_path must be provided.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMembership(GetProjectMembershipArgs.builder()
     *             .inherited(true)
     *             .projectId(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectMembershipResult> getProjectMembership(GetProjectMembershipArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMembership:getProjectMembership", TypeShape.of(GetProjectMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
     * 
     * &gt; **Note** exactly one of project_id or full_path must be provided.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMembership(GetProjectMembershipArgs.builder()
     *             .inherited(true)
     *             .projectId(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectMembershipResult> getProjectMembershipPlain(GetProjectMembershipPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMembership:getProjectMembership", TypeShape.of(GetProjectMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestone(GetProjectMilestoneArgs.builder()
     *             .milestoneId(10)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectMilestoneResult> getProjectMilestone(GetProjectMilestoneArgs args) {
        return getProjectMilestone(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestone(GetProjectMilestoneArgs.builder()
     *             .milestoneId(10)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectMilestoneResult> getProjectMilestonePlain(GetProjectMilestonePlainArgs args) {
        return getProjectMilestonePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestone(GetProjectMilestoneArgs.builder()
     *             .milestoneId(10)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectMilestoneResult> getProjectMilestone(GetProjectMilestoneArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMilestone:getProjectMilestone", TypeShape.of(GetProjectMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestone(GetProjectMilestoneArgs.builder()
     *             .milestoneId(10)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectMilestoneResult> getProjectMilestonePlain(GetProjectMilestonePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMilestone:getProjectMilestone", TypeShape.of(GetProjectMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestones(GetProjectMilestonesArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectMilestonesResult> getProjectMilestones(GetProjectMilestonesArgs args) {
        return getProjectMilestones(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestones(GetProjectMilestonesArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectMilestonesResult> getProjectMilestonesPlain(GetProjectMilestonesPlainArgs args) {
        return getProjectMilestonesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestones(GetProjectMilestonesArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectMilestonesResult> getProjectMilestones(GetProjectMilestonesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMilestones:getProjectMilestones", TypeShape.of(GetProjectMilestonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMilestonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectMilestones(GetProjectMilestonesArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectMilestonesResult> getProjectMilestonesPlain(GetProjectMilestonesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMilestones:getProjectMilestones", TypeShape.of(GetProjectMilestonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranch(GetProjectProtectedBranchArgs.builder()
     *             .name(&#34;main&#34;)
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectProtectedBranchResult> getProjectProtectedBranch(GetProjectProtectedBranchArgs args) {
        return getProjectProtectedBranch(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranch(GetProjectProtectedBranchArgs.builder()
     *             .name(&#34;main&#34;)
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchResult> getProjectProtectedBranchPlain(GetProjectProtectedBranchPlainArgs args) {
        return getProjectProtectedBranchPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranch(GetProjectProtectedBranchArgs.builder()
     *             .name(&#34;main&#34;)
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectProtectedBranchResult> getProjectProtectedBranch(GetProjectProtectedBranchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", TypeShape.of(GetProjectProtectedBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranch(GetProjectProtectedBranchArgs.builder()
     *             .name(&#34;main&#34;)
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchResult> getProjectProtectedBranchPlain(GetProjectProtectedBranchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", TypeShape.of(GetProjectProtectedBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#list-protected-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranches(GetProjectProtectedBranchesArgs.builder()
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectProtectedBranchesResult> getProjectProtectedBranches(GetProjectProtectedBranchesArgs args) {
        return getProjectProtectedBranches(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#list-protected-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranches(GetProjectProtectedBranchesArgs.builder()
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchesResult> getProjectProtectedBranchesPlain(GetProjectProtectedBranchesPlainArgs args) {
        return getProjectProtectedBranchesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#list-protected-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranches(GetProjectProtectedBranchesArgs.builder()
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectProtectedBranchesResult> getProjectProtectedBranches(GetProjectProtectedBranchesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches", TypeShape.of(GetProjectProtectedBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#list-protected-branches)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectProtectedBranches(GetProjectProtectedBranchesArgs.builder()
     *             .projectId(&#34;foo/bar/baz&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchesResult> getProjectProtectedBranchesPlain(GetProjectProtectedBranchesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches", TypeShape.of(GetProjectProtectedBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectTag(GetProjectTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectTagResult> getProjectTag(GetProjectTagArgs args) {
        return getProjectTag(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectTag(GetProjectTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectTagResult> getProjectTagPlain(GetProjectTagPlainArgs args) {
        return getProjectTagPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectTag(GetProjectTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectTagResult> getProjectTag(GetProjectTagArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectTag:getProjectTag", TypeShape.of(GetProjectTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectTag(GetProjectTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectTagResult> getProjectTagPlain(GetProjectTagPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectTag:getProjectTag", TypeShape.of(GetProjectTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/tags.html#list-project-repository-tags)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectTags(GetProjectTagsArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectTagsResult> getProjectTags(GetProjectTagsArgs args) {
        return getProjectTags(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/tags.html#list-project-repository-tags)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectTags(GetProjectTagsArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectTagsResult> getProjectTagsPlain(GetProjectTagsPlainArgs args) {
        return getProjectTagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/tags.html#list-project-repository-tags)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectTags(GetProjectTagsArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectTagsResult> getProjectTags(GetProjectTagsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectTags:getProjectTags", TypeShape.of(GetProjectTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/tags.html#list-project-repository-tags)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProjectTags(GetProjectTagsArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectTagsResult> getProjectTagsPlain(GetProjectTagsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectTags:getProjectTags", TypeShape.of(GetProjectTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .key(&#34;bar&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectVariableResult> getProjectVariable(GetProjectVariableArgs args) {
        return getProjectVariable(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .key(&#34;bar&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectVariableResult> getProjectVariablePlain(GetProjectVariablePlainArgs args) {
        return getProjectVariablePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .key(&#34;bar&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectVariableResult> getProjectVariable(GetProjectVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectVariable:getProjectVariable", TypeShape.of(GetProjectVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .key(&#34;foo&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .key(&#34;bar&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectVariableResult> getProjectVariablePlain(GetProjectVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectVariable:getProjectVariable", TypeShape.of(GetProjectVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectVariablesResult> getProjectVariables(GetProjectVariablesArgs args) {
        return getProjectVariables(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectVariablesResult> getProjectVariablesPlain(GetProjectVariablesPlainArgs args) {
        return getProjectVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectVariablesResult> getProjectVariables(GetProjectVariablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectVariables:getProjectVariables", TypeShape.of(GetProjectVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .environmentScope(&#34;staging/*&#34;)
     *             .project(&#34;my/example/project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectVariablesResult> getProjectVariablesPlain(GetProjectVariablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectVariables:getProjectVariables", TypeShape.of(GetProjectVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;mygroup&#34;)
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .orderBy(&#34;name&#34;)
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search(&#34;postgresql&#34;)
     *             .visibility(&#34;private&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsResult> getProjects() {
        return getProjects(GetProjectsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;mygroup&#34;)
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .orderBy(&#34;name&#34;)
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search(&#34;postgresql&#34;)
     *             .visibility(&#34;private&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain() {
        return getProjectsPlain(GetProjectsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;mygroup&#34;)
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .orderBy(&#34;name&#34;)
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search(&#34;postgresql&#34;)
     *             .visibility(&#34;private&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args) {
        return getProjects(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;mygroup&#34;)
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .orderBy(&#34;name&#34;)
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search(&#34;postgresql&#34;)
     *             .visibility(&#34;private&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args) {
        return getProjectsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;mygroup&#34;)
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .orderBy(&#34;name&#34;)
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search(&#34;postgresql&#34;)
     *             .visibility(&#34;private&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath(&#34;mygroup&#34;)
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.applyValue(getGroupResult -&gt; getGroupResult.id()))
     *             .orderBy(&#34;name&#34;)
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search(&#34;postgresql&#34;)
     *             .visibility(&#34;private&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ReleaseLink` data source allows get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLink(GetReleaseLinkArgs.builder()
     *             .linkId(&#34;11&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseLinkResult> getReleaseLink(GetReleaseLinkArgs args) {
        return getReleaseLink(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ReleaseLink` data source allows get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLink(GetReleaseLinkArgs.builder()
     *             .linkId(&#34;11&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseLinkResult> getReleaseLinkPlain(GetReleaseLinkPlainArgs args) {
        return getReleaseLinkPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ReleaseLink` data source allows get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLink(GetReleaseLinkArgs.builder()
     *             .linkId(&#34;11&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseLinkResult> getReleaseLink(GetReleaseLinkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getReleaseLink:getReleaseLink", TypeShape.of(GetReleaseLinkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ReleaseLink` data source allows get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLink(GetReleaseLinkArgs.builder()
     *             .linkId(&#34;11&#34;)
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseLinkResult> getReleaseLinkPlain(GetReleaseLinkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getReleaseLink:getReleaseLink", TypeShape.of(GetReleaseLinkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLinks(GetReleaseLinksArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseLinksResult> getReleaseLinks(GetReleaseLinksArgs args) {
        return getReleaseLinks(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLinks(GetReleaseLinksArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseLinksResult> getReleaseLinksPlain(GetReleaseLinksPlainArgs args) {
        return getReleaseLinksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLinks(GetReleaseLinksArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseLinksResult> getReleaseLinks(GetReleaseLinksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getReleaseLinks:getReleaseLinks", TypeShape.of(GetReleaseLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseLinksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getReleaseLinks(GetReleaseLinksArgs.builder()
     *             .project(&#34;foo/bar&#34;)
     *             .tagName(&#34;v1.0.1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseLinksResult> getReleaseLinksPlain(GetReleaseLinksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getReleaseLinks:getReleaseLinks", TypeShape.of(GetReleaseLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .filePath(&#34;README.md&#34;)
     *             .project(&#34;example&#34;)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args) {
        return getRepositoryFile(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .filePath(&#34;README.md&#34;)
     *             .project(&#34;example&#34;)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args) {
        return getRepositoryFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .filePath(&#34;README.md&#34;)
     *             .project(&#34;example&#34;)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .filePath(&#34;README.md&#34;)
     *             .project(&#34;example&#34;)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repositories.html#list-repository-tree)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .path(&#34;ExampleSubFolder&#34;)
     *             .project(&#34;example&#34;)
     *             .recursive(true)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryTreeResult> getRepositoryTree(GetRepositoryTreeArgs args) {
        return getRepositoryTree(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repositories.html#list-repository-tree)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .path(&#34;ExampleSubFolder&#34;)
     *             .project(&#34;example&#34;)
     *             .recursive(true)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryTreeResult> getRepositoryTreePlain(GetRepositoryTreePlainArgs args) {
        return getRepositoryTreePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repositories.html#list-repository-tree)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .path(&#34;ExampleSubFolder&#34;)
     *             .project(&#34;example&#34;)
     *             .recursive(true)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryTreeResult> getRepositoryTree(GetRepositoryTreeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRepositoryTree:getRepositoryTree", TypeShape.of(GetRepositoryTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repositories.html#list-repository-tree)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .path(&#34;ExampleSubFolder&#34;)
     *             .project(&#34;example&#34;)
     *             .recursive(true)
     *             .ref(&#34;main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryTreeResult> getRepositoryTreePlain(GetRepositoryTreePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getRepositoryTree:getRepositoryTree", TypeShape.of(GetRepositoryTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
     * 
     */
    public static Output<GetUserResult> getUser() {
        return getUser(GetUserArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain() {
        return getUserPlain(GetUserPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUserSshkeys` data source allows a list of SSH keys to be retrieved by either the user ID or username.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user)
     * 
     */
    public static Output<GetUserSshkeysResult> getUserSshkeys() {
        return getUserSshkeys(GetUserSshkeysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source allows a list of SSH keys to be retrieved by either the user ID or username.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user)
     * 
     */
    public static CompletableFuture<GetUserSshkeysResult> getUserSshkeysPlain() {
        return getUserSshkeysPlain(GetUserSshkeysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source allows a list of SSH keys to be retrieved by either the user ID or username.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user)
     * 
     */
    public static Output<GetUserSshkeysResult> getUserSshkeys(GetUserSshkeysArgs args) {
        return getUserSshkeys(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source allows a list of SSH keys to be retrieved by either the user ID or username.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user)
     * 
     */
    public static CompletableFuture<GetUserSshkeysResult> getUserSshkeysPlain(GetUserSshkeysPlainArgs args) {
        return getUserSshkeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source allows a list of SSH keys to be retrieved by either the user ID or username.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user)
     * 
     */
    public static Output<GetUserSshkeysResult> getUserSshkeys(GetUserSshkeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUserSshkeys:getUserSshkeys", TypeShape.of(GetUserSshkeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUserSshkeys` data source allows a list of SSH keys to be retrieved by either the user ID or username.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user)
     * 
     */
    public static CompletableFuture<GetUserSshkeysResult> getUserSshkeysPlain(GetUserSshkeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getUserSshkeys:getUserSshkeys", TypeShape.of(GetUserSshkeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .createdBefore(&#34;2019-01-01&#34;)
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search(&#34;username&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers() {
        return getUsers(GetUsersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .createdBefore(&#34;2019-01-01&#34;)
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search(&#34;username&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain() {
        return getUsersPlain(GetUsersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .createdBefore(&#34;2019-01-01&#34;)
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search(&#34;username&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .createdBefore(&#34;2019-01-01&#34;)
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search(&#34;username&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .createdBefore(&#34;2019-01-01&#34;)
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search(&#34;username&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .createdBefore(&#34;2019-01-01&#34;)
     *             .orderBy(&#34;name&#34;)
     *             .sort(&#34;desc&#34;)
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search(&#34;username&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
}
