// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.GetApplicationArgs;
import com.pulumi.gitlab.inputs.GetApplicationPlainArgs;
import com.pulumi.gitlab.inputs.GetBranchArgs;
import com.pulumi.gitlab.inputs.GetBranchPlainArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentPlainArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
import com.pulumi.gitlab.inputs.GetClusterAgentsPlainArgs;
import com.pulumi.gitlab.inputs.GetComplianceFrameworkArgs;
import com.pulumi.gitlab.inputs.GetComplianceFrameworkPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupAccessTokensArgs;
import com.pulumi.gitlab.inputs.GetGroupAccessTokensPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupArgs;
import com.pulumi.gitlab.inputs.GetGroupBillableMemberMembershipsArgs;
import com.pulumi.gitlab.inputs.GetGroupBillableMemberMembershipsPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupHookArgs;
import com.pulumi.gitlab.inputs.GetGroupHookPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupHooksArgs;
import com.pulumi.gitlab.inputs.GetGroupHooksPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupIdsArgs;
import com.pulumi.gitlab.inputs.GetGroupIdsPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupMembershipArgs;
import com.pulumi.gitlab.inputs.GetGroupMembershipPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupProvisionedUsersArgs;
import com.pulumi.gitlab.inputs.GetGroupProvisionedUsersPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupSamlLinksArgs;
import com.pulumi.gitlab.inputs.GetGroupSamlLinksPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupServiceAccountArgs;
import com.pulumi.gitlab.inputs.GetGroupServiceAccountPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
import com.pulumi.gitlab.inputs.GetGroupSubgroupsPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
import com.pulumi.gitlab.inputs.GetGroupVariablePlainArgs;
import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
import com.pulumi.gitlab.inputs.GetGroupVariablesPlainArgs;
import com.pulumi.gitlab.inputs.GetGroupsArgs;
import com.pulumi.gitlab.inputs.GetGroupsPlainArgs;
import com.pulumi.gitlab.inputs.GetInstanceDeployKeysArgs;
import com.pulumi.gitlab.inputs.GetInstanceDeployKeysPlainArgs;
import com.pulumi.gitlab.inputs.GetInstanceServiceAccountArgs;
import com.pulumi.gitlab.inputs.GetInstanceServiceAccountPlainArgs;
import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
import com.pulumi.gitlab.inputs.GetInstanceVariablePlainArgs;
import com.pulumi.gitlab.inputs.GetPipelineScheduleArgs;
import com.pulumi.gitlab.inputs.GetPipelineSchedulePlainArgs;
import com.pulumi.gitlab.inputs.GetPipelineSchedulesArgs;
import com.pulumi.gitlab.inputs.GetPipelineSchedulesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectAccessTokensArgs;
import com.pulumi.gitlab.inputs.GetProjectAccessTokensPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectArgs;
import com.pulumi.gitlab.inputs.GetProjectBranchesArgs;
import com.pulumi.gitlab.inputs.GetProjectBranchesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectEnvironmentsArgs;
import com.pulumi.gitlab.inputs.GetProjectEnvironmentsPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectHookArgs;
import com.pulumi.gitlab.inputs.GetProjectHookPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
import com.pulumi.gitlab.inputs.GetProjectHooksPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectIdsArgs;
import com.pulumi.gitlab.inputs.GetProjectIdsPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
import com.pulumi.gitlab.inputs.GetProjectIssuePlainArgs;
import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
import com.pulumi.gitlab.inputs.GetProjectIssuesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMembershipArgs;
import com.pulumi.gitlab.inputs.GetProjectMembershipPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMergeRequestArgs;
import com.pulumi.gitlab.inputs.GetProjectMergeRequestPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMergeRequestsArgs;
import com.pulumi.gitlab.inputs.GetProjectMergeRequestsPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestoneArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestonePlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestonesArgs;
import com.pulumi.gitlab.inputs.GetProjectMilestonesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectMirrorPublicKeyArgs;
import com.pulumi.gitlab.inputs.GetProjectMirrorPublicKeyPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedTagArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedTagPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedTagsArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedTagsPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectTagArgs;
import com.pulumi.gitlab.inputs.GetProjectTagPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectTagsArgs;
import com.pulumi.gitlab.inputs.GetProjectTagsPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
import com.pulumi.gitlab.inputs.GetProjectVariablePlainArgs;
import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
import com.pulumi.gitlab.inputs.GetProjectVariablesPlainArgs;
import com.pulumi.gitlab.inputs.GetProjectsArgs;
import com.pulumi.gitlab.inputs.GetProjectsPlainArgs;
import com.pulumi.gitlab.inputs.GetReleaseArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinkArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinkPlainArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinksArgs;
import com.pulumi.gitlab.inputs.GetReleaseLinksPlainArgs;
import com.pulumi.gitlab.inputs.GetReleasePlainArgs;
import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
import com.pulumi.gitlab.inputs.GetRepositoryFilePlainArgs;
import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
import com.pulumi.gitlab.inputs.GetRepositoryTreePlainArgs;
import com.pulumi.gitlab.inputs.GetRunnersArgs;
import com.pulumi.gitlab.inputs.GetRunnersPlainArgs;
import com.pulumi.gitlab.inputs.GetUserArgs;
import com.pulumi.gitlab.inputs.GetUserPlainArgs;
import com.pulumi.gitlab.inputs.GetUserSshkeysArgs;
import com.pulumi.gitlab.inputs.GetUserSshkeysPlainArgs;
import com.pulumi.gitlab.inputs.GetUsersArgs;
import com.pulumi.gitlab.inputs.GetUsersPlainArgs;
import com.pulumi.gitlab.outputs.GetApplicationResult;
import com.pulumi.gitlab.outputs.GetBranchResult;
import com.pulumi.gitlab.outputs.GetClusterAgentResult;
import com.pulumi.gitlab.outputs.GetClusterAgentsResult;
import com.pulumi.gitlab.outputs.GetComplianceFrameworkResult;
import com.pulumi.gitlab.outputs.GetCurrentUserResult;
import com.pulumi.gitlab.outputs.GetGroupAccessTokensResult;
import com.pulumi.gitlab.outputs.GetGroupBillableMemberMembershipsResult;
import com.pulumi.gitlab.outputs.GetGroupHookResult;
import com.pulumi.gitlab.outputs.GetGroupHooksResult;
import com.pulumi.gitlab.outputs.GetGroupIdsResult;
import com.pulumi.gitlab.outputs.GetGroupMembershipResult;
import com.pulumi.gitlab.outputs.GetGroupProvisionedUsersResult;
import com.pulumi.gitlab.outputs.GetGroupResult;
import com.pulumi.gitlab.outputs.GetGroupSamlLinksResult;
import com.pulumi.gitlab.outputs.GetGroupServiceAccountResult;
import com.pulumi.gitlab.outputs.GetGroupSubgroupsResult;
import com.pulumi.gitlab.outputs.GetGroupVariableResult;
import com.pulumi.gitlab.outputs.GetGroupVariablesResult;
import com.pulumi.gitlab.outputs.GetGroupsResult;
import com.pulumi.gitlab.outputs.GetInstanceDeployKeysResult;
import com.pulumi.gitlab.outputs.GetInstanceServiceAccountResult;
import com.pulumi.gitlab.outputs.GetInstanceVariableResult;
import com.pulumi.gitlab.outputs.GetInstanceVariablesResult;
import com.pulumi.gitlab.outputs.GetMetadataResult;
import com.pulumi.gitlab.outputs.GetPipelineScheduleResult;
import com.pulumi.gitlab.outputs.GetPipelineSchedulesResult;
import com.pulumi.gitlab.outputs.GetProjectAccessTokensResult;
import com.pulumi.gitlab.outputs.GetProjectBranchesResult;
import com.pulumi.gitlab.outputs.GetProjectEnvironmentsResult;
import com.pulumi.gitlab.outputs.GetProjectHookResult;
import com.pulumi.gitlab.outputs.GetProjectHooksResult;
import com.pulumi.gitlab.outputs.GetProjectIdsResult;
import com.pulumi.gitlab.outputs.GetProjectIssueResult;
import com.pulumi.gitlab.outputs.GetProjectIssuesResult;
import com.pulumi.gitlab.outputs.GetProjectMembershipResult;
import com.pulumi.gitlab.outputs.GetProjectMergeRequestResult;
import com.pulumi.gitlab.outputs.GetProjectMergeRequestsResult;
import com.pulumi.gitlab.outputs.GetProjectMilestoneResult;
import com.pulumi.gitlab.outputs.GetProjectMilestonesResult;
import com.pulumi.gitlab.outputs.GetProjectMirrorPublicKeyResult;
import com.pulumi.gitlab.outputs.GetProjectProtectedBranchResult;
import com.pulumi.gitlab.outputs.GetProjectProtectedBranchesResult;
import com.pulumi.gitlab.outputs.GetProjectProtectedTagResult;
import com.pulumi.gitlab.outputs.GetProjectProtectedTagsResult;
import com.pulumi.gitlab.outputs.GetProjectResult;
import com.pulumi.gitlab.outputs.GetProjectTagResult;
import com.pulumi.gitlab.outputs.GetProjectTagsResult;
import com.pulumi.gitlab.outputs.GetProjectVariableResult;
import com.pulumi.gitlab.outputs.GetProjectVariablesResult;
import com.pulumi.gitlab.outputs.GetProjectsResult;
import com.pulumi.gitlab.outputs.GetReleaseLinkResult;
import com.pulumi.gitlab.outputs.GetReleaseLinksResult;
import com.pulumi.gitlab.outputs.GetReleaseResult;
import com.pulumi.gitlab.outputs.GetRepositoryFileResult;
import com.pulumi.gitlab.outputs.GetRepositoryTreeResult;
import com.pulumi.gitlab.outputs.GetRunnersResult;
import com.pulumi.gitlab.outputs.GetUserResult;
import com.pulumi.gitlab.outputs.GetUserSshkeysResult;
import com.pulumi.gitlab.outputs.GetUsersResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class GitlabFunctions {
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/applications/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .id("1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args) {
        return getApplication(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/applications/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .id("1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args) {
        return getApplicationPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/applications/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .id("1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/applications/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .id("1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Application` data source retrieves information about a gitlab application.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/applications/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var oidc = GitlabFunctions.getApplication(GetApplicationArgs.builder()
     *             .id("1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#get-single-repository-branch)
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args) {
        return getBranch(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#get-single-repository-branch)
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args) {
        return getBranchPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#get-single-repository-branch)
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#get-single-repository-branch)
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#get-single-repository-branch)
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ClusterAgent` data source retrieves details about a GitLab Agent for Kubernetes.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .project("12345")
     *             .agentId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetClusterAgentResult> getClusterAgent(GetClusterAgentArgs args) {
        return getClusterAgent(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ClusterAgent` data source retrieves details about a GitLab Agent for Kubernetes.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .project("12345")
     *             .agentId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetClusterAgentResult> getClusterAgentPlain(GetClusterAgentPlainArgs args) {
        return getClusterAgentPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ClusterAgent` data source retrieves details about a GitLab Agent for Kubernetes.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .project("12345")
     *             .agentId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetClusterAgentResult> getClusterAgent(GetClusterAgentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getClusterAgent:getClusterAgent", TypeShape.of(GetClusterAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ClusterAgent` data source retrieves details about a GitLab Agent for Kubernetes.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .project("12345")
     *             .agentId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetClusterAgentResult> getClusterAgent(GetClusterAgentArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getClusterAgent:getClusterAgent", TypeShape.of(GetClusterAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ClusterAgent` data source retrieves details about a GitLab Agent for Kubernetes.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getClusterAgent(GetClusterAgentArgs.builder()
     *             .project("12345")
     *             .agentId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetClusterAgentResult> getClusterAgentPlain(GetClusterAgentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getClusterAgent:getClusterAgent", TypeShape.of(GetClusterAgentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getClusterAgents` data source retrieves details of GitLab Agents for Kubernetes in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetClusterAgentsResult> getClusterAgents(GetClusterAgentsArgs args) {
        return getClusterAgents(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getClusterAgents` data source retrieves details of GitLab Agents for Kubernetes in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetClusterAgentsResult> getClusterAgentsPlain(GetClusterAgentsPlainArgs args) {
        return getClusterAgentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getClusterAgents` data source retrieves details of GitLab Agents for Kubernetes in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetClusterAgentsResult> getClusterAgents(GetClusterAgentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getClusterAgents:getClusterAgents", TypeShape.of(GetClusterAgentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getClusterAgents` data source retrieves details of GitLab Agents for Kubernetes in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetClusterAgentsResult> getClusterAgents(GetClusterAgentsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getClusterAgents:getClusterAgents", TypeShape.of(GetClusterAgentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getClusterAgents` data source retrieves details of GitLab Agents for Kubernetes in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetClusterAgentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var agents = GitlabFunctions.getClusterAgents(GetClusterAgentsArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetClusterAgentsResult> getClusterAgentsPlain(GetClusterAgentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getClusterAgents:getClusterAgents", TypeShape.of(GetClusterAgentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ComplianceFramework` data source allows details of a compliance framework to be retrieved by its name and the namespace it belongs to.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querynamespace)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetComplianceFrameworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getComplianceFramework(GetComplianceFrameworkArgs.builder()
     *             .namespacePath("top-level-group")
     *             .name("HIPAA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetComplianceFrameworkResult> getComplianceFramework(GetComplianceFrameworkArgs args) {
        return getComplianceFramework(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ComplianceFramework` data source allows details of a compliance framework to be retrieved by its name and the namespace it belongs to.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querynamespace)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetComplianceFrameworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getComplianceFramework(GetComplianceFrameworkArgs.builder()
     *             .namespacePath("top-level-group")
     *             .name("HIPAA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetComplianceFrameworkResult> getComplianceFrameworkPlain(GetComplianceFrameworkPlainArgs args) {
        return getComplianceFrameworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ComplianceFramework` data source allows details of a compliance framework to be retrieved by its name and the namespace it belongs to.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querynamespace)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetComplianceFrameworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getComplianceFramework(GetComplianceFrameworkArgs.builder()
     *             .namespacePath("top-level-group")
     *             .name("HIPAA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetComplianceFrameworkResult> getComplianceFramework(GetComplianceFrameworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getComplianceFramework:getComplianceFramework", TypeShape.of(GetComplianceFrameworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ComplianceFramework` data source allows details of a compliance framework to be retrieved by its name and the namespace it belongs to.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querynamespace)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetComplianceFrameworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getComplianceFramework(GetComplianceFrameworkArgs.builder()
     *             .namespacePath("top-level-group")
     *             .name("HIPAA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetComplianceFrameworkResult> getComplianceFramework(GetComplianceFrameworkArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getComplianceFramework:getComplianceFramework", TypeShape.of(GetComplianceFrameworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ComplianceFramework` data source allows details of a compliance framework to be retrieved by its name and the namespace it belongs to.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querynamespace)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetComplianceFrameworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getComplianceFramework(GetComplianceFrameworkArgs.builder()
     *             .namespacePath("top-level-group")
     *             .name("HIPAA")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetComplianceFrameworkResult> getComplianceFrameworkPlain(GetComplianceFrameworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getComplianceFramework:getComplianceFramework", TypeShape.of(GetComplianceFrameworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/index/#querycurrentuser)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser() {
        return getCurrentUser(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/index/#querycurrentuser)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain() {
        return getCurrentUserPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/index/#querycurrentuser)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args) {
        return getCurrentUser(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/index/#querycurrentuser)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain(InvokeArgs args) {
        return getCurrentUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/index/#querycurrentuser)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/index/#querycurrentuser)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCurrentUserResult> getCurrentUser(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getCurrentUser` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/index/#querycurrentuser)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getCurrentUser(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCurrentUserResult> getCurrentUserPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getCurrentUser:getCurrentUser", TypeShape.of(GetCurrentUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#get-a-single-group)
     * 
     */
    public static Output<GetGroupResult> getGroup() {
        return getGroup(GetGroupArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#get-a-single-group)
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain() {
        return getGroupPlain(GetGroupPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#get-a-single-group)
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args) {
        return getGroup(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#get-a-single-group)
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args) {
        return getGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#get-a-single-group)
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#get-a-single-group)
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#get-a-single-group)
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab_access_tokens` data source allows to retrieve all group-level access tokens.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupAccessTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var accessTokens = GitlabFunctions.getGroupAccessTokens(GetGroupAccessTokensArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupAccessTokensResult> getGroupAccessTokens(GetGroupAccessTokensArgs args) {
        return getGroupAccessTokens(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab_access_tokens` data source allows to retrieve all group-level access tokens.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupAccessTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var accessTokens = GitlabFunctions.getGroupAccessTokens(GetGroupAccessTokensArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupAccessTokensResult> getGroupAccessTokensPlain(GetGroupAccessTokensPlainArgs args) {
        return getGroupAccessTokensPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab_access_tokens` data source allows to retrieve all group-level access tokens.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupAccessTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var accessTokens = GitlabFunctions.getGroupAccessTokens(GetGroupAccessTokensArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupAccessTokensResult> getGroupAccessTokens(GetGroupAccessTokensArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupAccessTokens:getGroupAccessTokens", TypeShape.of(GetGroupAccessTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab_access_tokens` data source allows to retrieve all group-level access tokens.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupAccessTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var accessTokens = GitlabFunctions.getGroupAccessTokens(GetGroupAccessTokensArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupAccessTokensResult> getGroupAccessTokens(GetGroupAccessTokensArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupAccessTokens:getGroupAccessTokens", TypeShape.of(GetGroupAccessTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab_access_tokens` data source allows to retrieve all group-level access tokens.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupAccessTokensArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var accessTokens = GitlabFunctions.getGroupAccessTokens(GetGroupAccessTokensArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupAccessTokensResult> getGroupAccessTokensPlain(GetGroupAccessTokensPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupAccessTokens:getGroupAccessTokens", TypeShape.of(GetGroupAccessTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
     * 
     * &gt; You must be an administrator!
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
     * the most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-memberships-for-a-billable-member-of-a-group)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupBillableMemberMembershipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testUserMembership = GitlabFunctions.getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs.builder()
     *             .userId(21)
     *             .groupId("42")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupBillableMemberMembershipsResult> getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs args) {
        return getGroupBillableMemberMemberships(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
     * 
     * &gt; You must be an administrator!
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
     * the most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-memberships-for-a-billable-member-of-a-group)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupBillableMemberMembershipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testUserMembership = GitlabFunctions.getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs.builder()
     *             .userId(21)
     *             .groupId("42")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupBillableMemberMembershipsResult> getGroupBillableMemberMembershipsPlain(GetGroupBillableMemberMembershipsPlainArgs args) {
        return getGroupBillableMemberMembershipsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
     * 
     * &gt; You must be an administrator!
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
     * the most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-memberships-for-a-billable-member-of-a-group)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupBillableMemberMembershipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testUserMembership = GitlabFunctions.getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs.builder()
     *             .userId(21)
     *             .groupId("42")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupBillableMemberMembershipsResult> getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", TypeShape.of(GetGroupBillableMemberMembershipsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
     * 
     * &gt; You must be an administrator!
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
     * the most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-memberships-for-a-billable-member-of-a-group)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupBillableMemberMembershipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testUserMembership = GitlabFunctions.getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs.builder()
     *             .userId(21)
     *             .groupId("42")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupBillableMemberMembershipsResult> getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", TypeShape.of(GetGroupBillableMemberMembershipsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
     * 
     * &gt; You must be an administrator!
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
     * the most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-memberships-for-a-billable-member-of-a-group)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupBillableMemberMembershipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testUserMembership = GitlabFunctions.getGroupBillableMemberMemberships(GetGroupBillableMemberMembershipsArgs.builder()
     *             .userId(21)
     *             .groupId("42")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupBillableMemberMembershipsResult> getGroupBillableMemberMembershipsPlain(GetGroupBillableMemberMembershipsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", TypeShape.of(GetGroupBillableMemberMembershipsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#get-a-group-hook)
     * 
     */
    public static Output<GetGroupHookResult> getGroupHook(GetGroupHookArgs args) {
        return getGroupHook(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#get-a-group-hook)
     * 
     */
    public static CompletableFuture<GetGroupHookResult> getGroupHookPlain(GetGroupHookPlainArgs args) {
        return getGroupHookPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#get-a-group-hook)
     * 
     */
    public static Output<GetGroupHookResult> getGroupHook(GetGroupHookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupHook:getGroupHook", TypeShape.of(GetGroupHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#get-a-group-hook)
     * 
     */
    public static Output<GetGroupHookResult> getGroupHook(GetGroupHookArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupHook:getGroupHook", TypeShape.of(GetGroupHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupHook` data source allows to retrieve details about a hook in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#get-a-group-hook)
     * 
     */
    public static CompletableFuture<GetGroupHookResult> getGroupHookPlain(GetGroupHookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupHook:getGroupHook", TypeShape.of(GetGroupHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#list-group-hooks)
     * 
     */
    public static Output<GetGroupHooksResult> getGroupHooks(GetGroupHooksArgs args) {
        return getGroupHooks(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#list-group-hooks)
     * 
     */
    public static CompletableFuture<GetGroupHooksResult> getGroupHooksPlain(GetGroupHooksPlainArgs args) {
        return getGroupHooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#list-group-hooks)
     * 
     */
    public static Output<GetGroupHooksResult> getGroupHooks(GetGroupHooksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupHooks:getGroupHooks", TypeShape.of(GetGroupHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#list-group-hooks)
     * 
     */
    public static Output<GetGroupHooksResult> getGroupHooks(GetGroupHooksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupHooks:getGroupHooks", TypeShape.of(GetGroupHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupHooks` data source allows to retrieve details about hooks in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/#list-group-hooks)
     * 
     */
    public static CompletableFuture<GetGroupHooksResult> getGroupHooksPlain(GetGroupHooksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupHooks:getGroupHooks", TypeShape.of(GetGroupHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Group;
     * import com.pulumi.gitlab.GroupArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newGroup = new Group("newGroup", GroupArgs.builder()
     *             .name("example-group")
     *             .path("example-path")
     *             .description("This is an example group")
     *             .build());
     * 
     *         // use group IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getGroupIds(GetGroupIdsArgs.builder()
     *             .group("gitlab_group.new_group.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.groupGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupIdsResult> getGroupIds(GetGroupIdsArgs args) {
        return getGroupIds(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Group;
     * import com.pulumi.gitlab.GroupArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newGroup = new Group("newGroup", GroupArgs.builder()
     *             .name("example-group")
     *             .path("example-path")
     *             .description("This is an example group")
     *             .build());
     * 
     *         // use group IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getGroupIds(GetGroupIdsArgs.builder()
     *             .group("gitlab_group.new_group.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.groupGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupIdsResult> getGroupIdsPlain(GetGroupIdsPlainArgs args) {
        return getGroupIdsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Group;
     * import com.pulumi.gitlab.GroupArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newGroup = new Group("newGroup", GroupArgs.builder()
     *             .name("example-group")
     *             .path("example-path")
     *             .description("This is an example group")
     *             .build());
     * 
     *         // use group IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getGroupIds(GetGroupIdsArgs.builder()
     *             .group("gitlab_group.new_group.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.groupGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupIdsResult> getGroupIds(GetGroupIdsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupIds:getGroupIds", TypeShape.of(GetGroupIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Group;
     * import com.pulumi.gitlab.GroupArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newGroup = new Group("newGroup", GroupArgs.builder()
     *             .name("example-group")
     *             .path("example-path")
     *             .description("This is an example group")
     *             .build());
     * 
     *         // use group IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getGroupIds(GetGroupIdsArgs.builder()
     *             .group("gitlab_group.new_group.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.groupGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupIdsResult> getGroupIds(GetGroupIdsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupIds:getGroupIds", TypeShape.of(GetGroupIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Group;
     * import com.pulumi.gitlab.GroupArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newGroup = new Group("newGroup", GroupArgs.builder()
     *             .name("example-group")
     *             .path("example-path")
     *             .description("This is an example group")
     *             .build());
     * 
     *         // use group IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getGroupIds(GetGroupIdsArgs.builder()
     *             .group("gitlab_group.new_group.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.groupGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupIdsResult> getGroupIdsPlain(GetGroupIdsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupIds:getGroupIds", TypeShape.of(GetGroupIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetGroupMembershipResult> getGroupMembership() {
        return getGroupMembership(GetGroupMembershipArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static CompletableFuture<GetGroupMembershipResult> getGroupMembershipPlain() {
        return getGroupMembershipPlain(GetGroupMembershipPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetGroupMembershipResult> getGroupMembership(GetGroupMembershipArgs args) {
        return getGroupMembership(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static CompletableFuture<GetGroupMembershipResult> getGroupMembershipPlain(GetGroupMembershipPlainArgs args) {
        return getGroupMembershipPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetGroupMembershipResult> getGroupMembership(GetGroupMembershipArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupMembership:getGroupMembership", TypeShape.of(GetGroupMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetGroupMembershipResult> getGroupMembership(GetGroupMembershipArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupMembership:getGroupMembership", TypeShape.of(GetGroupMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static CompletableFuture<GetGroupMembershipResult> getGroupMembershipPlain(GetGroupMembershipPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupMembership:getGroupMembership", TypeShape.of(GetGroupMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupProvisionedUsers` data source retrieves details of the provisioned users in a given group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
     * 
     */
    public static Output<GetGroupProvisionedUsersResult> getGroupProvisionedUsers(GetGroupProvisionedUsersArgs args) {
        return getGroupProvisionedUsers(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupProvisionedUsers` data source retrieves details of the provisioned users in a given group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
     * 
     */
    public static CompletableFuture<GetGroupProvisionedUsersResult> getGroupProvisionedUsersPlain(GetGroupProvisionedUsersPlainArgs args) {
        return getGroupProvisionedUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupProvisionedUsers` data source retrieves details of the provisioned users in a given group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
     * 
     */
    public static Output<GetGroupProvisionedUsersResult> getGroupProvisionedUsers(GetGroupProvisionedUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupProvisionedUsers:getGroupProvisionedUsers", TypeShape.of(GetGroupProvisionedUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupProvisionedUsers` data source retrieves details of the provisioned users in a given group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
     * 
     */
    public static Output<GetGroupProvisionedUsersResult> getGroupProvisionedUsers(GetGroupProvisionedUsersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupProvisionedUsers:getGroupProvisionedUsers", TypeShape.of(GetGroupProvisionedUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupProvisionedUsers` data source retrieves details of the provisioned users in a given group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
     * 
     */
    public static CompletableFuture<GetGroupProvisionedUsersResult> getGroupProvisionedUsersPlain(GetGroupProvisionedUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupProvisionedUsers:getGroupProvisionedUsers", TypeShape.of(GetGroupProvisionedUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSamlLinks` data source retrieves all SAML links for a specified group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/saml/#saml-group-links)
     * 
     */
    public static Output<GetGroupSamlLinksResult> getGroupSamlLinks(GetGroupSamlLinksArgs args) {
        return getGroupSamlLinks(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupSamlLinks` data source retrieves all SAML links for a specified group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/saml/#saml-group-links)
     * 
     */
    public static CompletableFuture<GetGroupSamlLinksResult> getGroupSamlLinksPlain(GetGroupSamlLinksPlainArgs args) {
        return getGroupSamlLinksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupSamlLinks` data source retrieves all SAML links for a specified group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/saml/#saml-group-links)
     * 
     */
    public static Output<GetGroupSamlLinksResult> getGroupSamlLinks(GetGroupSamlLinksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupSamlLinks:getGroupSamlLinks", TypeShape.of(GetGroupSamlLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSamlLinks` data source retrieves all SAML links for a specified group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/saml/#saml-group-links)
     * 
     */
    public static Output<GetGroupSamlLinksResult> getGroupSamlLinks(GetGroupSamlLinksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupSamlLinks:getGroupSamlLinks", TypeShape.of(GetGroupSamlLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSamlLinks` data source retrieves all SAML links for a specified group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/saml/#saml-group-links)
     * 
     */
    public static CompletableFuture<GetGroupSamlLinksResult> getGroupSamlLinksPlain(GetGroupSamlLinksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupSamlLinks:getGroupSamlLinks", TypeShape.of(GetGroupSamlLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupServiceAccount` data source retrieves information about a GitLab service account in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/#list-service-account-users)
     * 
     */
    public static Output<GetGroupServiceAccountResult> getGroupServiceAccount(GetGroupServiceAccountArgs args) {
        return getGroupServiceAccount(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupServiceAccount` data source retrieves information about a GitLab service account in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/#list-service-account-users)
     * 
     */
    public static CompletableFuture<GetGroupServiceAccountResult> getGroupServiceAccountPlain(GetGroupServiceAccountPlainArgs args) {
        return getGroupServiceAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupServiceAccount` data source retrieves information about a GitLab service account in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/#list-service-account-users)
     * 
     */
    public static Output<GetGroupServiceAccountResult> getGroupServiceAccount(GetGroupServiceAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupServiceAccount:getGroupServiceAccount", TypeShape.of(GetGroupServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupServiceAccount` data source retrieves information about a GitLab service account in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/#list-service-account-users)
     * 
     */
    public static Output<GetGroupServiceAccountResult> getGroupServiceAccount(GetGroupServiceAccountArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupServiceAccount:getGroupServiceAccount", TypeShape.of(GetGroupServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupServiceAccount` data source retrieves information about a GitLab service account in a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/#list-service-account-users)
     * 
     */
    public static CompletableFuture<GetGroupServiceAccountResult> getGroupServiceAccountPlain(GetGroupServiceAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupServiceAccount:getGroupServiceAccount", TypeShape.of(GetGroupServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-subgroups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(123456)
     *             .build());
     * 
     *         ctx.export("subgroups", subgroups);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupSubgroupsResult> getGroupSubgroups(GetGroupSubgroupsArgs args) {
        return getGroupSubgroups(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-subgroups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(123456)
     *             .build());
     * 
     *         ctx.export("subgroups", subgroups);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupSubgroupsResult> getGroupSubgroupsPlain(GetGroupSubgroupsPlainArgs args) {
        return getGroupSubgroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-subgroups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(123456)
     *             .build());
     * 
     *         ctx.export("subgroups", subgroups);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupSubgroupsResult> getGroupSubgroups(GetGroupSubgroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupSubgroups:getGroupSubgroups", TypeShape.of(GetGroupSubgroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-subgroups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(123456)
     *             .build());
     * 
     *         ctx.export("subgroups", subgroups);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupSubgroupsResult> getGroupSubgroups(GetGroupSubgroupsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupSubgroups:getGroupSubgroups", TypeShape.of(GetGroupSubgroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-subgroups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupSubgroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subgroups = GitlabFunctions.getGroupSubgroups(GetGroupSubgroupsArgs.builder()
     *             .groupId(123456)
     *             .build());
     * 
     *         ctx.export("subgroups", subgroups);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupSubgroupsResult> getGroupSubgroupsPlain(GetGroupSubgroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupSubgroups:getGroupSubgroups", TypeShape.of(GetGroupSubgroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupVariableResult> getGroupVariable(GetGroupVariableArgs args) {
        return getGroupVariable(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupVariableResult> getGroupVariablePlain(GetGroupVariablePlainArgs args) {
        return getGroupVariablePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupVariableResult> getGroupVariable(GetGroupVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupVariable:getGroupVariable", TypeShape.of(GetGroupVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupVariableResult> getGroupVariable(GetGroupVariableArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupVariable:getGroupVariable", TypeShape.of(GetGroupVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.GroupVariable` data source allows to retrieve details about a group-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getGroupVariable(GetGroupVariableArgs.builder()
     *             .group("my/example/group")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupVariableResult> getGroupVariablePlain(GetGroupVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupVariable:getGroupVariable", TypeShape.of(GetGroupVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupVariablesResult> getGroupVariables(GetGroupVariablesArgs args) {
        return getGroupVariables(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupVariablesResult> getGroupVariablesPlain(GetGroupVariablesPlainArgs args) {
        return getGroupVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupVariablesResult> getGroupVariables(GetGroupVariablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupVariables:getGroupVariables", TypeShape.of(GetGroupVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupVariablesResult> getGroupVariables(GetGroupVariablesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroupVariables:getGroupVariables", TypeShape.of(GetGroupVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroupVariables` data source allows to retrieve all group-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getGroupVariables(GetGroupVariablesArgs.builder()
     *             .group("my/example/group")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupVariablesResult> getGroupVariablesPlain(GetGroupVariablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroupVariables:getGroupVariables", TypeShape.of(GetGroupVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-groups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search("GitLab")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupsResult> getGroups() {
        return getGroups(GetGroupsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-groups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search("GitLab")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain() {
        return getGroupsPlain(GetGroupsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-groups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search("GitLab")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args) {
        return getGroups(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-groups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search("GitLab")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain(GetGroupsPlainArgs args) {
        return getGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-groups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search("GitLab")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-groups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search("GitLab")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getGroups` data source allows details of multiple groups to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-groups)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getGroups(GetGroupsArgs.builder()
     *             .search("GitLab")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain(GetGroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_keys/#list-all-deploy-keys)
     * 
     */
    public static Output<GetInstanceDeployKeysResult> getInstanceDeployKeys() {
        return getInstanceDeployKeys(GetInstanceDeployKeysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_keys/#list-all-deploy-keys)
     * 
     */
    public static CompletableFuture<GetInstanceDeployKeysResult> getInstanceDeployKeysPlain() {
        return getInstanceDeployKeysPlain(GetInstanceDeployKeysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_keys/#list-all-deploy-keys)
     * 
     */
    public static Output<GetInstanceDeployKeysResult> getInstanceDeployKeys(GetInstanceDeployKeysArgs args) {
        return getInstanceDeployKeys(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_keys/#list-all-deploy-keys)
     * 
     */
    public static CompletableFuture<GetInstanceDeployKeysResult> getInstanceDeployKeysPlain(GetInstanceDeployKeysPlainArgs args) {
        return getInstanceDeployKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_keys/#list-all-deploy-keys)
     * 
     */
    public static Output<GetInstanceDeployKeysResult> getInstanceDeployKeys(GetInstanceDeployKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceDeployKeys:getInstanceDeployKeys", TypeShape.of(GetInstanceDeployKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_keys/#list-all-deploy-keys)
     * 
     */
    public static Output<GetInstanceDeployKeysResult> getInstanceDeployKeys(GetInstanceDeployKeysArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceDeployKeys:getInstanceDeployKeys", TypeShape.of(GetInstanceDeployKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.
     * 
     * &gt; This data source requires administration privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_keys/#list-all-deploy-keys)
     * 
     */
    public static CompletableFuture<GetInstanceDeployKeysResult> getInstanceDeployKeysPlain(GetInstanceDeployKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getInstanceDeployKeys:getInstanceDeployKeys", TypeShape.of(GetInstanceDeployKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
     * 
     * &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceServiceAccount(GetInstanceServiceAccountArgs.builder()
     *             .serviceAccountId("123")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceServiceAccountResult> getInstanceServiceAccount(GetInstanceServiceAccountArgs args) {
        return getInstanceServiceAccount(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
     * 
     * &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceServiceAccount(GetInstanceServiceAccountArgs.builder()
     *             .serviceAccountId("123")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInstanceServiceAccountResult> getInstanceServiceAccountPlain(GetInstanceServiceAccountPlainArgs args) {
        return getInstanceServiceAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
     * 
     * &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceServiceAccount(GetInstanceServiceAccountArgs.builder()
     *             .serviceAccountId("123")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceServiceAccountResult> getInstanceServiceAccount(GetInstanceServiceAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", TypeShape.of(GetInstanceServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
     * 
     * &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceServiceAccount(GetInstanceServiceAccountArgs.builder()
     *             .serviceAccountId("123")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceServiceAccountResult> getInstanceServiceAccount(GetInstanceServiceAccountArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", TypeShape.of(GetInstanceServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
     * 
     * &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceServiceAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getInstanceServiceAccount(GetInstanceServiceAccountArgs.builder()
     *             .serviceAccountId("123")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInstanceServiceAccountResult> getInstanceServiceAccountPlain(GetInstanceServiceAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", TypeShape.of(GetInstanceServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceVariableResult> getInstanceVariable(GetInstanceVariableArgs args) {
        return getInstanceVariable(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInstanceVariableResult> getInstanceVariablePlain(GetInstanceVariablePlainArgs args) {
        return getInstanceVariablePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceVariableResult> getInstanceVariable(GetInstanceVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceVariable:getInstanceVariable", TypeShape.of(GetInstanceVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceVariableResult> getInstanceVariable(GetInstanceVariableArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceVariable:getInstanceVariable", TypeShape.of(GetInstanceVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetInstanceVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getInstanceVariable(GetInstanceVariableArgs.builder()
     *             .key("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInstanceVariableResult> getInstanceVariablePlain(GetInstanceVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getInstanceVariable:getInstanceVariable", TypeShape.of(GetInstanceVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceVariablesResult> getInstanceVariables() {
        return getInstanceVariables(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInstanceVariablesResult> getInstanceVariablesPlain() {
        return getInstanceVariablesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceVariablesResult> getInstanceVariables(InvokeArgs args) {
        return getInstanceVariables(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInstanceVariablesResult> getInstanceVariablesPlain(InvokeArgs args) {
        return getInstanceVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceVariablesResult> getInstanceVariables(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceVariables:getInstanceVariables", TypeShape.of(GetInstanceVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetInstanceVariablesResult> getInstanceVariables(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getInstanceVariables:getInstanceVariables", TypeShape.of(GetInstanceVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getInstanceVariables(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetInstanceVariablesResult> getInstanceVariablesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getInstanceVariables:getInstanceVariables", TypeShape.of(GetInstanceVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/metadata/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetMetadataResult> getMetadata() {
        return getMetadata(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/metadata/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetMetadataResult> getMetadataPlain() {
        return getMetadataPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/metadata/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetMetadataResult> getMetadata(InvokeArgs args) {
        return getMetadata(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/metadata/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetMetadataResult> getMetadataPlain(InvokeArgs args) {
        return getMetadataPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/metadata/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetMetadataResult> getMetadata(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getMetadata:getMetadata", TypeShape.of(GetMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/metadata/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetMetadataResult> getMetadata(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getMetadata:getMetadata", TypeShape.of(GetMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getMetadata` data source retrieves the metadata of the GitLab instance.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/metadata/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getMetadata(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetMetadataResult> getMetadataPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getMetadata:getMetadata", TypeShape.of(GetMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedule(GetPipelineScheduleArgs.builder()
     *             .project("12345")
     *             .pipelineScheduleId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPipelineScheduleResult> getPipelineSchedule(GetPipelineScheduleArgs args) {
        return getPipelineSchedule(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedule(GetPipelineScheduleArgs.builder()
     *             .project("12345")
     *             .pipelineScheduleId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetPipelineScheduleResult> getPipelineSchedulePlain(GetPipelineSchedulePlainArgs args) {
        return getPipelineSchedulePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedule(GetPipelineScheduleArgs.builder()
     *             .project("12345")
     *             .pipelineScheduleId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPipelineScheduleResult> getPipelineSchedule(GetPipelineScheduleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getPipelineSchedule:getPipelineSchedule", TypeShape.of(GetPipelineScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedule(GetPipelineScheduleArgs.builder()
     *             .project("12345")
     *             .pipelineScheduleId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPipelineScheduleResult> getPipelineSchedule(GetPipelineScheduleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getPipelineSchedule:getPipelineSchedule", TypeShape.of(GetPipelineScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedule(GetPipelineScheduleArgs.builder()
     *             .project("12345")
     *             .pipelineScheduleId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetPipelineScheduleResult> getPipelineSchedulePlain(GetPipelineSchedulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getPipelineSchedule:getPipelineSchedule", TypeShape.of(GetPipelineScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineSchedulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedules(GetPipelineSchedulesArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPipelineSchedulesResult> getPipelineSchedules(GetPipelineSchedulesArgs args) {
        return getPipelineSchedules(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineSchedulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedules(GetPipelineSchedulesArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetPipelineSchedulesResult> getPipelineSchedulesPlain(GetPipelineSchedulesPlainArgs args) {
        return getPipelineSchedulesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineSchedulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedules(GetPipelineSchedulesArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPipelineSchedulesResult> getPipelineSchedules(GetPipelineSchedulesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getPipelineSchedules:getPipelineSchedules", TypeShape.of(GetPipelineSchedulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineSchedulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedules(GetPipelineSchedulesArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPipelineSchedulesResult> getPipelineSchedules(GetPipelineSchedulesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getPipelineSchedules:getPipelineSchedules", TypeShape.of(GetPipelineSchedulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetPipelineSchedulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getPipelineSchedules(GetPipelineSchedulesArgs.builder()
     *             .project("12345")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetPipelineSchedulesResult> getPipelineSchedulesPlain(GetPipelineSchedulesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getPipelineSchedules:getPipelineSchedules", TypeShape.of(GetPipelineSchedulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#get-a-single-project)
     * 
     */
    public static Output<GetProjectResult> getProject() {
        return getProject(GetProjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#get-a-single-project)
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain() {
        return getProjectPlain(GetProjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#get-a-single-project)
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#get-a-single-project)
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#get-a-single-project)
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#get-a-single-project)
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#get-a-single-project)
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
     * 
     */
    public static Output<GetProjectAccessTokensResult> getProjectAccessTokens(GetProjectAccessTokensArgs args) {
        return getProjectAccessTokens(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
     * 
     */
    public static CompletableFuture<GetProjectAccessTokensResult> getProjectAccessTokensPlain(GetProjectAccessTokensPlainArgs args) {
        return getProjectAccessTokensPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
     * 
     */
    public static Output<GetProjectAccessTokensResult> getProjectAccessTokens(GetProjectAccessTokensArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", TypeShape.of(GetProjectAccessTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
     * 
     */
    public static Output<GetProjectAccessTokensResult> getProjectAccessTokens(GetProjectAccessTokensArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", TypeShape.of(GetProjectAccessTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
     * 
     */
    public static CompletableFuture<GetProjectAccessTokensResult> getProjectAccessTokensPlain(GetProjectAccessTokensPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", TypeShape.of(GetProjectAccessTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#list-repository-branches)
     * 
     */
    public static Output<GetProjectBranchesResult> getProjectBranches(GetProjectBranchesArgs args) {
        return getProjectBranches(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#list-repository-branches)
     * 
     */
    public static CompletableFuture<GetProjectBranchesResult> getProjectBranchesPlain(GetProjectBranchesPlainArgs args) {
        return getProjectBranchesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#list-repository-branches)
     * 
     */
    public static Output<GetProjectBranchesResult> getProjectBranches(GetProjectBranchesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectBranches:getProjectBranches", TypeShape.of(GetProjectBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#list-repository-branches)
     * 
     */
    public static Output<GetProjectBranchesResult> getProjectBranches(GetProjectBranchesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectBranches:getProjectBranches", TypeShape.of(GetProjectBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#list-repository-branches)
     * 
     */
    public static CompletableFuture<GetProjectBranchesResult> getProjectBranchesPlain(GetProjectBranchesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectBranches:getProjectBranches", TypeShape.of(GetProjectBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectEnvironments` data source retrieves information about all environments of the given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisProject = new Project("thisProject", ProjectArgs.builder()
     *             .name("example")
     *             .initializeWithReadme(true)
     *             .build());
     * 
     *         final var this = GitlabFunctions.getProjectEnvironments(GetProjectEnvironmentsArgs.builder()
     *             .project(thisProject.pathWithNamespace())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectEnvironmentsResult> getProjectEnvironments(GetProjectEnvironmentsArgs args) {
        return getProjectEnvironments(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectEnvironments` data source retrieves information about all environments of the given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisProject = new Project("thisProject", ProjectArgs.builder()
     *             .name("example")
     *             .initializeWithReadme(true)
     *             .build());
     * 
     *         final var this = GitlabFunctions.getProjectEnvironments(GetProjectEnvironmentsArgs.builder()
     *             .project(thisProject.pathWithNamespace())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectEnvironmentsResult> getProjectEnvironmentsPlain(GetProjectEnvironmentsPlainArgs args) {
        return getProjectEnvironmentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectEnvironments` data source retrieves information about all environments of the given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisProject = new Project("thisProject", ProjectArgs.builder()
     *             .name("example")
     *             .initializeWithReadme(true)
     *             .build());
     * 
     *         final var this = GitlabFunctions.getProjectEnvironments(GetProjectEnvironmentsArgs.builder()
     *             .project(thisProject.pathWithNamespace())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectEnvironmentsResult> getProjectEnvironments(GetProjectEnvironmentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectEnvironments:getProjectEnvironments", TypeShape.of(GetProjectEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectEnvironments` data source retrieves information about all environments of the given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisProject = new Project("thisProject", ProjectArgs.builder()
     *             .name("example")
     *             .initializeWithReadme(true)
     *             .build());
     * 
     *         final var this = GitlabFunctions.getProjectEnvironments(GetProjectEnvironmentsArgs.builder()
     *             .project(thisProject.pathWithNamespace())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectEnvironmentsResult> getProjectEnvironments(GetProjectEnvironmentsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectEnvironments:getProjectEnvironments", TypeShape.of(GetProjectEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectEnvironments` data source retrieves information about all environments of the given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisProject = new Project("thisProject", ProjectArgs.builder()
     *             .name("example")
     *             .initializeWithReadme(true)
     *             .build());
     * 
     *         final var this = GitlabFunctions.getProjectEnvironments(GetProjectEnvironmentsArgs.builder()
     *             .project(thisProject.pathWithNamespace())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectEnvironmentsResult> getProjectEnvironmentsPlain(GetProjectEnvironmentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectEnvironments:getProjectEnvironments", TypeShape.of(GetProjectEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectHook` data source retrieves details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#get-a-project-webhook)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var exampleGetProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(example.id())
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectHookResult> getProjectHook(GetProjectHookArgs args) {
        return getProjectHook(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectHook` data source retrieves details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#get-a-project-webhook)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var exampleGetProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(example.id())
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectHookResult> getProjectHookPlain(GetProjectHookPlainArgs args) {
        return getProjectHookPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectHook` data source retrieves details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#get-a-project-webhook)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var exampleGetProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(example.id())
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectHookResult> getProjectHook(GetProjectHookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectHook:getProjectHook", TypeShape.of(GetProjectHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectHook` data source retrieves details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#get-a-project-webhook)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var exampleGetProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(example.id())
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectHookResult> getProjectHook(GetProjectHookArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectHook:getProjectHook", TypeShape.of(GetProjectHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectHook` data source retrieves details about a hook in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#get-a-project-webhook)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var exampleGetProjectHook = GitlabFunctions.getProjectHook(GetProjectHookArgs.builder()
     *             .project(example.id())
     *             .hookId(1)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectHookResult> getProjectHookPlain(GetProjectHookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectHook:getProjectHook", TypeShape.of(GetProjectHookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#list-webhooks-for-a-project)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectHooksResult> getProjectHooks(GetProjectHooksArgs args) {
        return getProjectHooks(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#list-webhooks-for-a-project)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectHooksResult> getProjectHooksPlain(GetProjectHooksPlainArgs args) {
        return getProjectHooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#list-webhooks-for-a-project)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectHooksResult> getProjectHooks(GetProjectHooksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectHooks:getProjectHooks", TypeShape.of(GetProjectHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#list-webhooks-for-a-project)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectHooksResult> getProjectHooks(GetProjectHooksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectHooks:getProjectHooks", TypeShape.of(GetProjectHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectHooks` data source allows to retrieve details about hooks in a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_webhooks/#list-webhooks-for-a-project)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectHooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var examples = GitlabFunctions.getProjectHooks(GetProjectHooksArgs.builder()
     *             .project(example.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectHooksResult> getProjectHooksPlain(GetProjectHooksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectHooks:getProjectHooks", TypeShape.of(GetProjectHooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newProject = new Project("newProject", ProjectArgs.builder()
     *             .name("project")
     *             .build());
     * 
     *         // use project IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getProjectIds(GetProjectIdsArgs.builder()
     *             .project("gitlab_project.new_project.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.projectGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIdsResult> getProjectIds(GetProjectIdsArgs args) {
        return getProjectIds(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newProject = new Project("newProject", ProjectArgs.builder()
     *             .name("project")
     *             .build());
     * 
     *         // use project IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getProjectIds(GetProjectIdsArgs.builder()
     *             .project("gitlab_project.new_project.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.projectGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectIdsResult> getProjectIdsPlain(GetProjectIdsPlainArgs args) {
        return getProjectIdsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newProject = new Project("newProject", ProjectArgs.builder()
     *             .name("project")
     *             .build());
     * 
     *         // use project IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getProjectIds(GetProjectIdsArgs.builder()
     *             .project("gitlab_project.new_project.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.projectGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIdsResult> getProjectIds(GetProjectIdsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIds:getProjectIds", TypeShape.of(GetProjectIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newProject = new Project("newProject", ProjectArgs.builder()
     *             .name("project")
     *             .build());
     * 
     *         // use project IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getProjectIds(GetProjectIdsArgs.builder()
     *             .project("gitlab_project.new_project.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.projectGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIdsResult> getProjectIds(GetProjectIdsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIds:getProjectIds", TypeShape.of(GetProjectIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
     * 
     * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.Project;
     * import com.pulumi.gitlab.ProjectArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var newProject = new Project("newProject", ProjectArgs.builder()
     *             .name("project")
     *             .build());
     * 
     *         // use project IDs to get additional information, such as the GraphQL ID
     *         // for other resources
     *         final var foo = GitlabFunctions.getProjectIds(GetProjectIdsArgs.builder()
     *             .project("gitlab_project.new_project.id")
     *             .build());
     * 
     *         ctx.export("graphQLId", foo.projectGraphqlId());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectIdsResult> getProjectIdsPlain(GetProjectIdsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectIds:getProjectIds", TypeShape.of(GetProjectIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace("foo/bar/baz")
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.id())
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export("welcomeIssueWebUrl", webUrl);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIssueResult> getProjectIssue(GetProjectIssueArgs args) {
        return getProjectIssue(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace("foo/bar/baz")
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.id())
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export("welcomeIssueWebUrl", webUrl);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectIssueResult> getProjectIssuePlain(GetProjectIssuePlainArgs args) {
        return getProjectIssuePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace("foo/bar/baz")
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.id())
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export("welcomeIssueWebUrl", webUrl);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIssueResult> getProjectIssue(GetProjectIssueArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIssue:getProjectIssue", TypeShape.of(GetProjectIssueResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace("foo/bar/baz")
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.id())
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export("welcomeIssueWebUrl", webUrl);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIssueResult> getProjectIssue(GetProjectIssueArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIssue:getProjectIssue", TypeShape.of(GetProjectIssueResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssueArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .pathWithNamespace("foo/bar/baz")
     *             .build());
     * 
     *         final var welcomeIssue = GitlabFunctions.getProjectIssue(GetProjectIssueArgs.builder()
     *             .project(foo.id())
     *             .iid(1)
     *             .build());
     * 
     *         ctx.export("welcomeIssueWebUrl", webUrl);
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectIssueResult> getProjectIssuePlain(GetProjectIssuePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectIssue:getProjectIssue", TypeShape.of(GetProjectIssueResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.id())
     *             .search("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIssuesResult> getProjectIssues(GetProjectIssuesArgs args) {
        return getProjectIssues(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.id())
     *             .search("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectIssuesResult> getProjectIssuesPlain(GetProjectIssuesPlainArgs args) {
        return getProjectIssuesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.id())
     *             .search("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIssuesResult> getProjectIssues(GetProjectIssuesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIssues:getProjectIssues", TypeShape.of(GetProjectIssuesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.id())
     *             .search("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectIssuesResult> getProjectIssues(GetProjectIssuesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectIssues:getProjectIssues", TypeShape.of(GetProjectIssuesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/issues/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectArgs;
     * import com.pulumi.gitlab.inputs.GetProjectIssuesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProject(GetProjectArgs.builder()
     *             .id("foo/bar/baz")
     *             .build());
     * 
     *         final var allWithFoo = GitlabFunctions.getProjectIssues(GetProjectIssuesArgs.builder()
     *             .project(foo.id())
     *             .search("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectIssuesResult> getProjectIssuesPlain(GetProjectIssuesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectIssues:getProjectIssues", TypeShape.of(GetProjectIssuesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetProjectMembershipResult> getProjectMembership() {
        return getProjectMembership(GetProjectMembershipArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static CompletableFuture<GetProjectMembershipResult> getProjectMembershipPlain() {
        return getProjectMembershipPlain(GetProjectMembershipPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetProjectMembershipResult> getProjectMembership(GetProjectMembershipArgs args) {
        return getProjectMembership(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static CompletableFuture<GetProjectMembershipResult> getProjectMembershipPlain(GetProjectMembershipPlainArgs args) {
        return getProjectMembershipPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetProjectMembershipResult> getProjectMembership(GetProjectMembershipArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMembership:getProjectMembership", TypeShape.of(GetProjectMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static Output<GetProjectMembershipResult> getProjectMembership(GetProjectMembershipArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMembership:getProjectMembership", TypeShape.of(GetProjectMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
     * 
     */
    public static CompletableFuture<GetProjectMembershipResult> getProjectMembershipPlain(GetProjectMembershipPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMembership:getProjectMembership", TypeShape.of(GetProjectMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMergeRequest` data source retrieves
     * information about a single merge request related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byProjectId = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("123")
     *             .iid(456)
     *             .build());
     * 
     *         final var byProjectName = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("company/group/project1")
     *             .iid(3)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectMergeRequestResult> getProjectMergeRequest(GetProjectMergeRequestArgs args) {
        return getProjectMergeRequest(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMergeRequest` data source retrieves
     * information about a single merge request related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byProjectId = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("123")
     *             .iid(456)
     *             .build());
     * 
     *         final var byProjectName = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("company/group/project1")
     *             .iid(3)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectMergeRequestResult> getProjectMergeRequestPlain(GetProjectMergeRequestPlainArgs args) {
        return getProjectMergeRequestPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMergeRequest` data source retrieves
     * information about a single merge request related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byProjectId = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("123")
     *             .iid(456)
     *             .build());
     * 
     *         final var byProjectName = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("company/group/project1")
     *             .iid(3)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectMergeRequestResult> getProjectMergeRequest(GetProjectMergeRequestArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", TypeShape.of(GetProjectMergeRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMergeRequest` data source retrieves
     * information about a single merge request related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byProjectId = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("123")
     *             .iid(456)
     *             .build());
     * 
     *         final var byProjectName = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("company/group/project1")
     *             .iid(3)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectMergeRequestResult> getProjectMergeRequest(GetProjectMergeRequestArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", TypeShape.of(GetProjectMergeRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMergeRequest` data source retrieves
     * information about a single merge request related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byProjectId = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("123")
     *             .iid(456)
     *             .build());
     * 
     *         final var byProjectName = GitlabFunctions.getProjectMergeRequest(GetProjectMergeRequestArgs.builder()
     *             .project("company/group/project1")
     *             .iid(3)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectMergeRequestResult> getProjectMergeRequestPlain(GetProjectMergeRequestPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", TypeShape.of(GetProjectMergeRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMergeRequests` data source retrieves
     * information about a list of merge requests related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOne = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("123")
     *             .targetBranch("main")
     *             .wip("yes")
     *             .build());
     * 
     *         final var exampleTwo = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("company/group/project1")
     *             .authorId(5)
     *             .createdAfter("2024-07-25T12:00:00Z")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectMergeRequestsResult> getProjectMergeRequests(GetProjectMergeRequestsArgs args) {
        return getProjectMergeRequests(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMergeRequests` data source retrieves
     * information about a list of merge requests related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOne = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("123")
     *             .targetBranch("main")
     *             .wip("yes")
     *             .build());
     * 
     *         final var exampleTwo = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("company/group/project1")
     *             .authorId(5)
     *             .createdAfter("2024-07-25T12:00:00Z")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectMergeRequestsResult> getProjectMergeRequestsPlain(GetProjectMergeRequestsPlainArgs args) {
        return getProjectMergeRequestsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMergeRequests` data source retrieves
     * information about a list of merge requests related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOne = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("123")
     *             .targetBranch("main")
     *             .wip("yes")
     *             .build());
     * 
     *         final var exampleTwo = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("company/group/project1")
     *             .authorId(5)
     *             .createdAfter("2024-07-25T12:00:00Z")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectMergeRequestsResult> getProjectMergeRequests(GetProjectMergeRequestsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", TypeShape.of(GetProjectMergeRequestsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMergeRequests` data source retrieves
     * information about a list of merge requests related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOne = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("123")
     *             .targetBranch("main")
     *             .wip("yes")
     *             .build());
     * 
     *         final var exampleTwo = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("company/group/project1")
     *             .authorId(5)
     *             .createdAfter("2024-07-25T12:00:00Z")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectMergeRequestsResult> getProjectMergeRequests(GetProjectMergeRequestsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", TypeShape.of(GetProjectMergeRequestsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMergeRequests` data source retrieves
     * information about a list of merge requests related to a specific project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectMergeRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOne = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("123")
     *             .targetBranch("main")
     *             .wip("yes")
     *             .build());
     * 
     *         final var exampleTwo = GitlabFunctions.getProjectMergeRequests(GetProjectMergeRequestsArgs.builder()
     *             .project("company/group/project1")
     *             .authorId(5)
     *             .createdAfter("2024-07-25T12:00:00Z")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectMergeRequestsResult> getProjectMergeRequestsPlain(GetProjectMergeRequestsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", TypeShape.of(GetProjectMergeRequestsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static Output<GetProjectMilestoneResult> getProjectMilestone(GetProjectMilestoneArgs args) {
        return getProjectMilestone(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static CompletableFuture<GetProjectMilestoneResult> getProjectMilestonePlain(GetProjectMilestonePlainArgs args) {
        return getProjectMilestonePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static Output<GetProjectMilestoneResult> getProjectMilestone(GetProjectMilestoneArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMilestone:getProjectMilestone", TypeShape.of(GetProjectMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static Output<GetProjectMilestoneResult> getProjectMilestone(GetProjectMilestoneArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMilestone:getProjectMilestone", TypeShape.of(GetProjectMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectMilestone` data source allows get details of a project milestone.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static CompletableFuture<GetProjectMilestoneResult> getProjectMilestonePlain(GetProjectMilestonePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMilestone:getProjectMilestone", TypeShape.of(GetProjectMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static Output<GetProjectMilestonesResult> getProjectMilestones(GetProjectMilestonesArgs args) {
        return getProjectMilestones(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static CompletableFuture<GetProjectMilestonesResult> getProjectMilestonesPlain(GetProjectMilestonesPlainArgs args) {
        return getProjectMilestonesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static Output<GetProjectMilestonesResult> getProjectMilestones(GetProjectMilestonesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMilestones:getProjectMilestones", TypeShape.of(GetProjectMilestonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static Output<GetProjectMilestonesResult> getProjectMilestones(GetProjectMilestonesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMilestones:getProjectMilestones", TypeShape.of(GetProjectMilestonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMilestones` data source allows get details of a project milestones.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/milestones/)
     * 
     */
    public static CompletableFuture<GetProjectMilestonesResult> getProjectMilestonesPlain(GetProjectMilestonesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMilestones:getProjectMilestones", TypeShape.of(GetProjectMilestonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMirrorPublicKey` data source allows the public key of a project mirror to be retrieved by its mirror id and the project it belongs to.
     * 
     * **Note**: Supported on GitLab 17.9 or higher.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/remote_mirrors/#get-a-single-projects-remote-mirror-public-key)
     * 
     */
    public static Output<GetProjectMirrorPublicKeyResult> getProjectMirrorPublicKey(GetProjectMirrorPublicKeyArgs args) {
        return getProjectMirrorPublicKey(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMirrorPublicKey` data source allows the public key of a project mirror to be retrieved by its mirror id and the project it belongs to.
     * 
     * **Note**: Supported on GitLab 17.9 or higher.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/remote_mirrors/#get-a-single-projects-remote-mirror-public-key)
     * 
     */
    public static CompletableFuture<GetProjectMirrorPublicKeyResult> getProjectMirrorPublicKeyPlain(GetProjectMirrorPublicKeyPlainArgs args) {
        return getProjectMirrorPublicKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectMirrorPublicKey` data source allows the public key of a project mirror to be retrieved by its mirror id and the project it belongs to.
     * 
     * **Note**: Supported on GitLab 17.9 or higher.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/remote_mirrors/#get-a-single-projects-remote-mirror-public-key)
     * 
     */
    public static Output<GetProjectMirrorPublicKeyResult> getProjectMirrorPublicKey(GetProjectMirrorPublicKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMirrorPublicKey:getProjectMirrorPublicKey", TypeShape.of(GetProjectMirrorPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMirrorPublicKey` data source allows the public key of a project mirror to be retrieved by its mirror id and the project it belongs to.
     * 
     * **Note**: Supported on GitLab 17.9 or higher.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/remote_mirrors/#get-a-single-projects-remote-mirror-public-key)
     * 
     */
    public static Output<GetProjectMirrorPublicKeyResult> getProjectMirrorPublicKey(GetProjectMirrorPublicKeyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectMirrorPublicKey:getProjectMirrorPublicKey", TypeShape.of(GetProjectMirrorPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectMirrorPublicKey` data source allows the public key of a project mirror to be retrieved by its mirror id and the project it belongs to.
     * 
     * **Note**: Supported on GitLab 17.9 or higher.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/remote_mirrors/#get-a-single-projects-remote-mirror-public-key)
     * 
     */
    public static CompletableFuture<GetProjectMirrorPublicKeyResult> getProjectMirrorPublicKeyPlain(GetProjectMirrorPublicKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectMirrorPublicKey:getProjectMirrorPublicKey", TypeShape.of(GetProjectMirrorPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     */
    public static Output<GetProjectProtectedBranchResult> getProjectProtectedBranch(GetProjectProtectedBranchArgs args) {
        return getProjectProtectedBranch(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchResult> getProjectProtectedBranchPlain(GetProjectProtectedBranchPlainArgs args) {
        return getProjectProtectedBranchPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     */
    public static Output<GetProjectProtectedBranchResult> getProjectProtectedBranch(GetProjectProtectedBranchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", TypeShape.of(GetProjectProtectedBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     */
    public static Output<GetProjectProtectedBranchResult> getProjectProtectedBranch(GetProjectProtectedBranchArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", TypeShape.of(GetProjectProtectedBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchResult> getProjectProtectedBranchPlain(GetProjectProtectedBranchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", TypeShape.of(GetProjectProtectedBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#list-protected-branches)
     * 
     */
    public static Output<GetProjectProtectedBranchesResult> getProjectProtectedBranches(GetProjectProtectedBranchesArgs args) {
        return getProjectProtectedBranches(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#list-protected-branches)
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchesResult> getProjectProtectedBranchesPlain(GetProjectProtectedBranchesPlainArgs args) {
        return getProjectProtectedBranchesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#list-protected-branches)
     * 
     */
    public static Output<GetProjectProtectedBranchesResult> getProjectProtectedBranches(GetProjectProtectedBranchesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches", TypeShape.of(GetProjectProtectedBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#list-protected-branches)
     * 
     */
    public static Output<GetProjectProtectedBranchesResult> getProjectProtectedBranches(GetProjectProtectedBranchesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches", TypeShape.of(GetProjectProtectedBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedBranches` data source allows details of the protected branches of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#list-protected-branches)
     * 
     */
    public static CompletableFuture<GetProjectProtectedBranchesResult> getProjectProtectedBranchesPlain(GetProjectProtectedBranchesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches", TypeShape.of(GetProjectProtectedBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedTag` data source allows details of a protected tag to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#get-a-single-protected-tag-or-wildcard-protected-tag)
     * 
     */
    public static Output<GetProjectProtectedTagResult> getProjectProtectedTag(GetProjectProtectedTagArgs args) {
        return getProjectProtectedTag(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedTag` data source allows details of a protected tag to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#get-a-single-protected-tag-or-wildcard-protected-tag)
     * 
     */
    public static CompletableFuture<GetProjectProtectedTagResult> getProjectProtectedTagPlain(GetProjectProtectedTagPlainArgs args) {
        return getProjectProtectedTagPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedTag` data source allows details of a protected tag to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#get-a-single-protected-tag-or-wildcard-protected-tag)
     * 
     */
    public static Output<GetProjectProtectedTagResult> getProjectProtectedTag(GetProjectProtectedTagArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedTag:getProjectProtectedTag", TypeShape.of(GetProjectProtectedTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedTag` data source allows details of a protected tag to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#get-a-single-protected-tag-or-wildcard-protected-tag)
     * 
     */
    public static Output<GetProjectProtectedTagResult> getProjectProtectedTag(GetProjectProtectedTagArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedTag:getProjectProtectedTag", TypeShape.of(GetProjectProtectedTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedTag` data source allows details of a protected tag to be retrieved by its name and the project it belongs to.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#get-a-single-protected-tag-or-wildcard-protected-tag)
     * 
     */
    public static CompletableFuture<GetProjectProtectedTagResult> getProjectProtectedTagPlain(GetProjectProtectedTagPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectProtectedTag:getProjectProtectedTag", TypeShape.of(GetProjectProtectedTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedTags` data source allows details of the protected tags of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#list-protected-tags)
     * 
     */
    public static Output<GetProjectProtectedTagsResult> getProjectProtectedTags(GetProjectProtectedTagsArgs args) {
        return getProjectProtectedTags(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedTags` data source allows details of the protected tags of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#list-protected-tags)
     * 
     */
    public static CompletableFuture<GetProjectProtectedTagsResult> getProjectProtectedTagsPlain(GetProjectProtectedTagsPlainArgs args) {
        return getProjectProtectedTagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectProtectedTags` data source allows details of the protected tags of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#list-protected-tags)
     * 
     */
    public static Output<GetProjectProtectedTagsResult> getProjectProtectedTags(GetProjectProtectedTagsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedTags:getProjectProtectedTags", TypeShape.of(GetProjectProtectedTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedTags` data source allows details of the protected tags of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#list-protected-tags)
     * 
     */
    public static Output<GetProjectProtectedTagsResult> getProjectProtectedTags(GetProjectProtectedTagsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectProtectedTags:getProjectProtectedTags", TypeShape.of(GetProjectProtectedTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectProtectedTags` data source allows details of the protected tags of a given project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#list-protected-tags)
     * 
     */
    public static CompletableFuture<GetProjectProtectedTagsResult> getProjectProtectedTagsPlain(GetProjectProtectedTagsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectProtectedTags:getProjectProtectedTags", TypeShape.of(GetProjectProtectedTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/tags/)
     * 
     */
    public static Output<GetProjectTagResult> getProjectTag(GetProjectTagArgs args) {
        return getProjectTag(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/tags/)
     * 
     */
    public static CompletableFuture<GetProjectTagResult> getProjectTagPlain(GetProjectTagPlainArgs args) {
        return getProjectTagPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/tags/)
     * 
     */
    public static Output<GetProjectTagResult> getProjectTag(GetProjectTagArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectTag:getProjectTag", TypeShape.of(GetProjectTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/tags/)
     * 
     */
    public static Output<GetProjectTagResult> getProjectTag(GetProjectTagArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectTag:getProjectTag", TypeShape.of(GetProjectTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.
     * 
     * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/tags/)
     * 
     */
    public static CompletableFuture<GetProjectTagResult> getProjectTagPlain(GetProjectTagPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectTag:getProjectTag", TypeShape.of(GetProjectTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/tags/#list-project-repository-tags)
     * 
     */
    public static Output<GetProjectTagsResult> getProjectTags(GetProjectTagsArgs args) {
        return getProjectTags(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/tags/#list-project-repository-tags)
     * 
     */
    public static CompletableFuture<GetProjectTagsResult> getProjectTagsPlain(GetProjectTagsPlainArgs args) {
        return getProjectTagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/tags/#list-project-repository-tags)
     * 
     */
    public static Output<GetProjectTagsResult> getProjectTags(GetProjectTagsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectTags:getProjectTags", TypeShape.of(GetProjectTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/tags/#list-project-repository-tags)
     * 
     */
    public static Output<GetProjectTagsResult> getProjectTags(GetProjectTagsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectTags:getProjectTags", TypeShape.of(GetProjectTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/tags/#list-project-repository-tags)
     * 
     */
    public static CompletableFuture<GetProjectTagsResult> getProjectTagsPlain(GetProjectTagsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectTags:getProjectTags", TypeShape.of(GetProjectTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectVariableResult> getProjectVariable(GetProjectVariableArgs args) {
        return getProjectVariable(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectVariableResult> getProjectVariablePlain(GetProjectVariablePlainArgs args) {
        return getProjectVariablePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectVariableResult> getProjectVariable(GetProjectVariableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectVariable:getProjectVariable", TypeShape.of(GetProjectVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectVariableResult> getProjectVariable(GetProjectVariableArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectVariable:getProjectVariable", TypeShape.of(GetProjectVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ProjectVariable` data source allows to retrieve details about a project-level CI/CD variable.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("foo")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var bar = GitlabFunctions.getProjectVariable(GetProjectVariableArgs.builder()
     *             .project("my/example/project")
     *             .key("bar")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectVariableResult> getProjectVariablePlain(GetProjectVariablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectVariable:getProjectVariable", TypeShape.of(GetProjectVariableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectVariablesResult> getProjectVariables(GetProjectVariablesArgs args) {
        return getProjectVariables(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectVariablesResult> getProjectVariablesPlain(GetProjectVariablesPlainArgs args) {
        return getProjectVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectVariablesResult> getProjectVariables(GetProjectVariablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectVariables:getProjectVariables", TypeShape.of(GetProjectVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectVariablesResult> getProjectVariables(GetProjectVariablesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjectVariables:getProjectVariables", TypeShape.of(GetProjectVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjectVariables` data source allows to retrieve all project-level CI/CD variables.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetProjectVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var vars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .build());
     * 
     *         // Using an environment scope
     *         final var stagingVars = GitlabFunctions.getProjectVariables(GetProjectVariablesArgs.builder()
     *             .project("my/example/project")
     *             .environmentScope("staging/*")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectVariablesResult> getProjectVariablesPlain(GetProjectVariablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjectVariables:getProjectVariables", TypeShape.of(GetProjectVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the [client-go](https://gitlab.com/gitlab-org/api/client-go) package, which might not expose all available filters exposed by the GitLab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the GitLab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#list-all-projects)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // List projects within a group tree
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath("mygroup")
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.id())
     *             .orderBy("name")
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         // List projects using the search syntax
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search("postgresql")
     *             .visibility("private")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectsResult> getProjects() {
        return getProjects(GetProjectsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the [client-go](https://gitlab.com/gitlab-org/api/client-go) package, which might not expose all available filters exposed by the GitLab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the GitLab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#list-all-projects)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // List projects within a group tree
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath("mygroup")
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.id())
     *             .orderBy("name")
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         // List projects using the search syntax
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search("postgresql")
     *             .visibility("private")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain() {
        return getProjectsPlain(GetProjectsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the [client-go](https://gitlab.com/gitlab-org/api/client-go) package, which might not expose all available filters exposed by the GitLab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the GitLab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#list-all-projects)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // List projects within a group tree
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath("mygroup")
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.id())
     *             .orderBy("name")
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         // List projects using the search syntax
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search("postgresql")
     *             .visibility("private")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args) {
        return getProjects(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the [client-go](https://gitlab.com/gitlab-org/api/client-go) package, which might not expose all available filters exposed by the GitLab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the GitLab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#list-all-projects)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // List projects within a group tree
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath("mygroup")
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.id())
     *             .orderBy("name")
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         // List projects using the search syntax
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search("postgresql")
     *             .visibility("private")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args) {
        return getProjectsPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the [client-go](https://gitlab.com/gitlab-org/api/client-go) package, which might not expose all available filters exposed by the GitLab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the GitLab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#list-all-projects)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // List projects within a group tree
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath("mygroup")
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.id())
     *             .orderBy("name")
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         // List projects using the search syntax
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search("postgresql")
     *             .visibility("private")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the [client-go](https://gitlab.com/gitlab-org/api/client-go) package, which might not expose all available filters exposed by the GitLab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the GitLab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#list-all-projects)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // List projects within a group tree
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath("mygroup")
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.id())
     *             .orderBy("name")
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         // List projects using the search syntax
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search("postgresql")
     *             .visibility("private")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.
     * 
     * &gt; This data source supports all available filters exposed by the [client-go](https://gitlab.com/gitlab-org/api/client-go) package, which might not expose all available filters exposed by the GitLab APIs.
     * 
     * &gt; The owner sub-attributes are only populated if the GitLab token used has an administrator scope.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/projects/#list-all-projects)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetGroupArgs;
     * import com.pulumi.gitlab.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // List projects within a group tree
     *         final var mygroup = GitlabFunctions.getGroup(GetGroupArgs.builder()
     *             .fullPath("mygroup")
     *             .build());
     * 
     *         final var groupProjects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .groupId(mygroup.id())
     *             .orderBy("name")
     *             .includeSubgroups(true)
     *             .withShared(false)
     *             .build());
     * 
     *         // List projects using the search syntax
     *         final var projects = GitlabFunctions.getProjects(GetProjectsArgs.builder()
     *             .search("postgresql")
     *             .visibility("private")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Release` data source retrieves information about a gitlab release for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // By project ID and tag_name
     *         final var example = GitlabFunctions.getRelease(GetReleaseArgs.builder()
     *             .projectId("1234")
     *             .tagName("v1.0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetReleaseResult> getRelease(GetReleaseArgs args) {
        return getRelease(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Release` data source retrieves information about a gitlab release for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // By project ID and tag_name
     *         final var example = GitlabFunctions.getRelease(GetReleaseArgs.builder()
     *             .projectId("1234")
     *             .tagName("v1.0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetReleaseResult> getReleasePlain(GetReleasePlainArgs args) {
        return getReleasePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.Release` data source retrieves information about a gitlab release for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // By project ID and tag_name
     *         final var example = GitlabFunctions.getRelease(GetReleaseArgs.builder()
     *             .projectId("1234")
     *             .tagName("v1.0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetReleaseResult> getRelease(GetReleaseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRelease:getRelease", TypeShape.of(GetReleaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Release` data source retrieves information about a gitlab release for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // By project ID and tag_name
     *         final var example = GitlabFunctions.getRelease(GetReleaseArgs.builder()
     *             .projectId("1234")
     *             .tagName("v1.0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetReleaseResult> getRelease(GetReleaseArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRelease:getRelease", TypeShape.of(GetReleaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.Release` data source retrieves information about a gitlab release for a project.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // By project ID and tag_name
     *         final var example = GitlabFunctions.getRelease(GetReleaseArgs.builder()
     *             .projectId("1234")
     *             .tagName("v1.0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetReleaseResult> getReleasePlain(GetReleasePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getRelease:getRelease", TypeShape.of(GetReleaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ReleaseLink` data source allows you to get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static Output<GetReleaseLinkResult> getReleaseLink(GetReleaseLinkArgs args) {
        return getReleaseLink(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ReleaseLink` data source allows you to get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static CompletableFuture<GetReleaseLinkResult> getReleaseLinkPlain(GetReleaseLinkPlainArgs args) {
        return getReleaseLinkPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.ReleaseLink` data source allows you to get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static Output<GetReleaseLinkResult> getReleaseLink(GetReleaseLinkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getReleaseLink:getReleaseLink", TypeShape.of(GetReleaseLinkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ReleaseLink` data source allows you to get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static Output<GetReleaseLinkResult> getReleaseLink(GetReleaseLinkArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getReleaseLink:getReleaseLink", TypeShape.of(GetReleaseLinkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.ReleaseLink` data source allows you to get details of a release link.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static CompletableFuture<GetReleaseLinkResult> getReleaseLinkPlain(GetReleaseLinkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getReleaseLink:getReleaseLink", TypeShape.of(GetReleaseLinkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static Output<GetReleaseLinksResult> getReleaseLinks(GetReleaseLinksArgs args) {
        return getReleaseLinks(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static CompletableFuture<GetReleaseLinksResult> getReleaseLinksPlain(GetReleaseLinksPlainArgs args) {
        return getReleaseLinksPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static Output<GetReleaseLinksResult> getReleaseLinks(GetReleaseLinksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getReleaseLinks:getReleaseLinks", TypeShape.of(GetReleaseLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static Output<GetReleaseLinksResult> getReleaseLinks(GetReleaseLinksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getReleaseLinks:getReleaseLinks", TypeShape.of(GetReleaseLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getReleaseLinks` data source allows get details of release links.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
     * 
     */
    public static CompletableFuture<GetReleaseLinksResult> getReleaseLinksPlain(GetReleaseLinksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getReleaseLinks:getReleaseLinks", TypeShape.of(GetReleaseLinksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repository_files/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .filePath("README.md")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args) {
        return getRepositoryFile(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repository_files/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .filePath("README.md")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args) {
        return getRepositoryFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repository_files/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .filePath("README.md")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repository_files/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .filePath("README.md")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repository_files/)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .filePath("README.md")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repositories/#list-repository-tree)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .path("ExampleSubFolder")
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRepositoryTreeResult> getRepositoryTree(GetRepositoryTreeArgs args) {
        return getRepositoryTree(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repositories/#list-repository-tree)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .path("ExampleSubFolder")
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRepositoryTreeResult> getRepositoryTreePlain(GetRepositoryTreePlainArgs args) {
        return getRepositoryTreePlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repositories/#list-repository-tree)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .path("ExampleSubFolder")
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRepositoryTreeResult> getRepositoryTree(GetRepositoryTreeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRepositoryTree:getRepositoryTree", TypeShape.of(GetRepositoryTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repositories/#list-repository-tree)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .path("ExampleSubFolder")
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRepositoryTreeResult> getRepositoryTree(GetRepositoryTreeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRepositoryTree:getRepositoryTree", TypeShape.of(GetRepositoryTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRepositoryTree` data source allows details of directories and files in a repository to be retrieved.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/repositories/#list-repository-tree)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRepositoryTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = GitlabFunctions.getRepositoryTree(GetRepositoryTreeArgs.builder()
     *             .project("example")
     *             .ref("main")
     *             .path("ExampleSubFolder")
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRepositoryTreeResult> getRepositoryTreePlain(GetRepositoryTreePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getRepositoryTree:getRepositoryTree", TypeShape.of(GetRepositoryTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.UserRunner;
     * import com.pulumi.gitlab.UserRunnerArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRunnersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisUserRunner = new UserRunner("thisUserRunner", UserRunnerArgs.builder()
     *             .runnerType("instance_type")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .build());
     * 
     *         final var this = GitlabFunctions.getRunners(GetRunnersArgs.builder()
     *             .paused(false)
     *             .status("online")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .type("instance_type")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRunnersResult> getRunners() {
        return getRunners(GetRunnersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.UserRunner;
     * import com.pulumi.gitlab.UserRunnerArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRunnersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisUserRunner = new UserRunner("thisUserRunner", UserRunnerArgs.builder()
     *             .runnerType("instance_type")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .build());
     * 
     *         final var this = GitlabFunctions.getRunners(GetRunnersArgs.builder()
     *             .paused(false)
     *             .status("online")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .type("instance_type")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRunnersResult> getRunnersPlain() {
        return getRunnersPlain(GetRunnersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.UserRunner;
     * import com.pulumi.gitlab.UserRunnerArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRunnersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisUserRunner = new UserRunner("thisUserRunner", UserRunnerArgs.builder()
     *             .runnerType("instance_type")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .build());
     * 
     *         final var this = GitlabFunctions.getRunners(GetRunnersArgs.builder()
     *             .paused(false)
     *             .status("online")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .type("instance_type")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRunnersResult> getRunners(GetRunnersArgs args) {
        return getRunners(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.UserRunner;
     * import com.pulumi.gitlab.UserRunnerArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRunnersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisUserRunner = new UserRunner("thisUserRunner", UserRunnerArgs.builder()
     *             .runnerType("instance_type")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .build());
     * 
     *         final var this = GitlabFunctions.getRunners(GetRunnersArgs.builder()
     *             .paused(false)
     *             .status("online")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .type("instance_type")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRunnersResult> getRunnersPlain(GetRunnersPlainArgs args) {
        return getRunnersPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.UserRunner;
     * import com.pulumi.gitlab.UserRunnerArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRunnersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisUserRunner = new UserRunner("thisUserRunner", UserRunnerArgs.builder()
     *             .runnerType("instance_type")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .build());
     * 
     *         final var this = GitlabFunctions.getRunners(GetRunnersArgs.builder()
     *             .paused(false)
     *             .status("online")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .type("instance_type")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRunnersResult> getRunners(GetRunnersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRunners:getRunners", TypeShape.of(GetRunnersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.UserRunner;
     * import com.pulumi.gitlab.UserRunnerArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRunnersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisUserRunner = new UserRunner("thisUserRunner", UserRunnerArgs.builder()
     *             .runnerType("instance_type")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .build());
     * 
     *         final var this = GitlabFunctions.getRunners(GetRunnersArgs.builder()
     *             .paused(false)
     *             .status("online")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .type("instance_type")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRunnersResult> getRunners(GetRunnersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getRunners:getRunners", TypeShape.of(GetRunnersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.UserRunner;
     * import com.pulumi.gitlab.UserRunnerArgs;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetRunnersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var thisUserRunner = new UserRunner("thisUserRunner", UserRunnerArgs.builder()
     *             .runnerType("instance_type")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .build());
     * 
     *         final var this = GitlabFunctions.getRunners(GetRunnersArgs.builder()
     *             .paused(false)
     *             .status("online")
     *             .tagLists(            
     *                 "tag1",
     *                 "tag2")
     *             .type("instance_type")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRunnersResult> getRunnersPlain(GetRunnersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getRunners:getRunners", TypeShape.of(GetRunnersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. The most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#get-a-single-user)
     * 
     */
    public static Output<GetUserResult> getUser() {
        return getUser(GetUserArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. The most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#get-a-single-user)
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain() {
        return getUserPlain(GetUserPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. The most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#get-a-single-user)
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. The most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#get-a-single-user)
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. The most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#get-a-single-user)
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. The most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#get-a-single-user)
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. The most related match will prioritize an exact match if one is available.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#get-a-single-user)
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUserSshkeys` data source retrieves a list of SSH keys for a user.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_keys/#list-all-ssh-keys-for-a-user)
     * 
     */
    public static Output<GetUserSshkeysResult> getUserSshkeys() {
        return getUserSshkeys(GetUserSshkeysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source retrieves a list of SSH keys for a user.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_keys/#list-all-ssh-keys-for-a-user)
     * 
     */
    public static CompletableFuture<GetUserSshkeysResult> getUserSshkeysPlain() {
        return getUserSshkeysPlain(GetUserSshkeysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source retrieves a list of SSH keys for a user.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_keys/#list-all-ssh-keys-for-a-user)
     * 
     */
    public static Output<GetUserSshkeysResult> getUserSshkeys(GetUserSshkeysArgs args) {
        return getUserSshkeys(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source retrieves a list of SSH keys for a user.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_keys/#list-all-ssh-keys-for-a-user)
     * 
     */
    public static CompletableFuture<GetUserSshkeysResult> getUserSshkeysPlain(GetUserSshkeysPlainArgs args) {
        return getUserSshkeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUserSshkeys` data source retrieves a list of SSH keys for a user.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_keys/#list-all-ssh-keys-for-a-user)
     * 
     */
    public static Output<GetUserSshkeysResult> getUserSshkeys(GetUserSshkeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUserSshkeys:getUserSshkeys", TypeShape.of(GetUserSshkeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUserSshkeys` data source retrieves a list of SSH keys for a user.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_keys/#list-all-ssh-keys-for-a-user)
     * 
     */
    public static Output<GetUserSshkeysResult> getUserSshkeys(GetUserSshkeysArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUserSshkeys:getUserSshkeys", TypeShape.of(GetUserSshkeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUserSshkeys` data source retrieves a list of SSH keys for a user.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_keys/#list-all-ssh-keys-for-a-user)
     * 
     */
    public static CompletableFuture<GetUserSshkeysResult> getUserSshkeysPlain(GetUserSshkeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getUserSshkeys:getUserSshkeys", TypeShape.of(GetUserSshkeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#list-users)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .createdBefore("2019-01-01")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search("username")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetUsersResult> getUsers() {
        return getUsers(GetUsersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#list-users)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .createdBefore("2019-01-01")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search("username")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain() {
        return getUsersPlain(GetUsersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#list-users)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .createdBefore("2019-01-01")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search("username")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#list-users)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .createdBefore("2019-01-01")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search("username")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#list-users)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .createdBefore("2019-01-01")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search("username")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#list-users)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .createdBefore("2019-01-01")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search("username")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gitlab:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
     * 
     * &gt; Some attributes might not be returned depending on if you&#39;re an admin or not.
     * 
     * &gt; Some available options require administrator privileges.
     * 
     * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#list-users)
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gitlab.GitlabFunctions;
     * import com.pulumi.gitlab.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .sort("desc")
     *             .orderBy("name")
     *             .createdBefore("2019-01-01")
     *             .build());
     * 
     *         final var example-two = GitlabFunctions.getUsers(GetUsersArgs.builder()
     *             .search("username")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gitlab:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
}
