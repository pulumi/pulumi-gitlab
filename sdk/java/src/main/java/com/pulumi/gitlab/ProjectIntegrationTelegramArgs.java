// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectIntegrationTelegramArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIntegrationTelegramArgs Empty = new ProjectIntegrationTelegramArgs();

    /**
     * Branches to send notifications for. Valid options are `all`, `default`, `protected`, `default_and_protected`.
     * 
     */
    @Import(name="branchesToBeNotified")
    private @Nullable Output<String> branchesToBeNotified;

    /**
     * @return Branches to send notifications for. Valid options are `all`, `default`, `protected`, `default_and_protected`.
     * 
     */
    public Optional<Output<String>> branchesToBeNotified() {
        return Optional.ofNullable(this.branchesToBeNotified);
    }

    /**
     * Enable notifications for confidential issues events.
     * 
     */
    @Import(name="confidentialIssuesEvents", required=true)
    private Output<Boolean> confidentialIssuesEvents;

    /**
     * @return Enable notifications for confidential issues events.
     * 
     */
    public Output<Boolean> confidentialIssuesEvents() {
        return this.confidentialIssuesEvents;
    }

    /**
     * Enable notifications for confidential note events.
     * 
     */
    @Import(name="confidentialNoteEvents", required=true)
    private Output<Boolean> confidentialNoteEvents;

    /**
     * @return Enable notifications for confidential note events.
     * 
     */
    public Output<Boolean> confidentialNoteEvents() {
        return this.confidentialNoteEvents;
    }

    /**
     * Enable notifications for issues events.
     * 
     */
    @Import(name="issuesEvents", required=true)
    private Output<Boolean> issuesEvents;

    /**
     * @return Enable notifications for issues events.
     * 
     */
    public Output<Boolean> issuesEvents() {
        return this.issuesEvents;
    }

    /**
     * Enable notifications for merge requests events.
     * 
     */
    @Import(name="mergeRequestsEvents", required=true)
    private Output<Boolean> mergeRequestsEvents;

    /**
     * @return Enable notifications for merge requests events.
     * 
     */
    public Output<Boolean> mergeRequestsEvents() {
        return this.mergeRequestsEvents;
    }

    /**
     * Enable notifications for note events.
     * 
     */
    @Import(name="noteEvents", required=true)
    private Output<Boolean> noteEvents;

    /**
     * @return Enable notifications for note events.
     * 
     */
    public Output<Boolean> noteEvents() {
        return this.noteEvents;
    }

    /**
     * Send notifications for broken pipelines.
     * 
     */
    @Import(name="notifyOnlyBrokenPipelines")
    private @Nullable Output<Boolean> notifyOnlyBrokenPipelines;

    /**
     * @return Send notifications for broken pipelines.
     * 
     */
    public Optional<Output<Boolean>> notifyOnlyBrokenPipelines() {
        return Optional.ofNullable(this.notifyOnlyBrokenPipelines);
    }

    /**
     * Enable notifications for pipeline events.
     * 
     */
    @Import(name="pipelineEvents", required=true)
    private Output<Boolean> pipelineEvents;

    /**
     * @return Enable notifications for pipeline events.
     * 
     */
    public Output<Boolean> pipelineEvents() {
        return this.pipelineEvents;
    }

    /**
     * The ID or full path of the project to integrate with Telegram.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or full path of the project to integrate with Telegram.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Enable notifications for push events.
     * 
     */
    @Import(name="pushEvents", required=true)
    private Output<Boolean> pushEvents;

    /**
     * @return Enable notifications for push events.
     * 
     */
    public Output<Boolean> pushEvents() {
        return this.pushEvents;
    }

    /**
     * Unique identifier for the target chat or the username of the target channel (in the format `{@literal @}channelusername`)
     * 
     */
    @Import(name="room", required=true)
    private Output<String> room;

    /**
     * @return Unique identifier for the target chat or the username of the target channel (in the format `{@literal @}channelusername`)
     * 
     */
    public Output<String> room() {
        return this.room;
    }

    /**
     * Enable notifications for tag push events.
     * 
     */
    @Import(name="tagPushEvents", required=true)
    private Output<Boolean> tagPushEvents;

    /**
     * @return Enable notifications for tag push events.
     * 
     */
    public Output<Boolean> tagPushEvents() {
        return this.tagPushEvents;
    }

    /**
     * The Telegram bot token.
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return The Telegram bot token.
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    /**
     * Enable notifications for wiki page events.
     * 
     */
    @Import(name="wikiPageEvents", required=true)
    private Output<Boolean> wikiPageEvents;

    /**
     * @return Enable notifications for wiki page events.
     * 
     */
    public Output<Boolean> wikiPageEvents() {
        return this.wikiPageEvents;
    }

    private ProjectIntegrationTelegramArgs() {}

    private ProjectIntegrationTelegramArgs(ProjectIntegrationTelegramArgs $) {
        this.branchesToBeNotified = $.branchesToBeNotified;
        this.confidentialIssuesEvents = $.confidentialIssuesEvents;
        this.confidentialNoteEvents = $.confidentialNoteEvents;
        this.issuesEvents = $.issuesEvents;
        this.mergeRequestsEvents = $.mergeRequestsEvents;
        this.noteEvents = $.noteEvents;
        this.notifyOnlyBrokenPipelines = $.notifyOnlyBrokenPipelines;
        this.pipelineEvents = $.pipelineEvents;
        this.project = $.project;
        this.pushEvents = $.pushEvents;
        this.room = $.room;
        this.tagPushEvents = $.tagPushEvents;
        this.token = $.token;
        this.wikiPageEvents = $.wikiPageEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIntegrationTelegramArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIntegrationTelegramArgs $;

        public Builder() {
            $ = new ProjectIntegrationTelegramArgs();
        }

        public Builder(ProjectIntegrationTelegramArgs defaults) {
            $ = new ProjectIntegrationTelegramArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, `default_and_protected`.
         * 
         * @return builder
         * 
         */
        public Builder branchesToBeNotified(@Nullable Output<String> branchesToBeNotified) {
            $.branchesToBeNotified = branchesToBeNotified;
            return this;
        }

        /**
         * @param branchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, `default_and_protected`.
         * 
         * @return builder
         * 
         */
        public Builder branchesToBeNotified(String branchesToBeNotified) {
            return branchesToBeNotified(Output.of(branchesToBeNotified));
        }

        /**
         * @param confidentialIssuesEvents Enable notifications for confidential issues events.
         * 
         * @return builder
         * 
         */
        public Builder confidentialIssuesEvents(Output<Boolean> confidentialIssuesEvents) {
            $.confidentialIssuesEvents = confidentialIssuesEvents;
            return this;
        }

        /**
         * @param confidentialIssuesEvents Enable notifications for confidential issues events.
         * 
         * @return builder
         * 
         */
        public Builder confidentialIssuesEvents(Boolean confidentialIssuesEvents) {
            return confidentialIssuesEvents(Output.of(confidentialIssuesEvents));
        }

        /**
         * @param confidentialNoteEvents Enable notifications for confidential note events.
         * 
         * @return builder
         * 
         */
        public Builder confidentialNoteEvents(Output<Boolean> confidentialNoteEvents) {
            $.confidentialNoteEvents = confidentialNoteEvents;
            return this;
        }

        /**
         * @param confidentialNoteEvents Enable notifications for confidential note events.
         * 
         * @return builder
         * 
         */
        public Builder confidentialNoteEvents(Boolean confidentialNoteEvents) {
            return confidentialNoteEvents(Output.of(confidentialNoteEvents));
        }

        /**
         * @param issuesEvents Enable notifications for issues events.
         * 
         * @return builder
         * 
         */
        public Builder issuesEvents(Output<Boolean> issuesEvents) {
            $.issuesEvents = issuesEvents;
            return this;
        }

        /**
         * @param issuesEvents Enable notifications for issues events.
         * 
         * @return builder
         * 
         */
        public Builder issuesEvents(Boolean issuesEvents) {
            return issuesEvents(Output.of(issuesEvents));
        }

        /**
         * @param mergeRequestsEvents Enable notifications for merge requests events.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsEvents(Output<Boolean> mergeRequestsEvents) {
            $.mergeRequestsEvents = mergeRequestsEvents;
            return this;
        }

        /**
         * @param mergeRequestsEvents Enable notifications for merge requests events.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsEvents(Boolean mergeRequestsEvents) {
            return mergeRequestsEvents(Output.of(mergeRequestsEvents));
        }

        /**
         * @param noteEvents Enable notifications for note events.
         * 
         * @return builder
         * 
         */
        public Builder noteEvents(Output<Boolean> noteEvents) {
            $.noteEvents = noteEvents;
            return this;
        }

        /**
         * @param noteEvents Enable notifications for note events.
         * 
         * @return builder
         * 
         */
        public Builder noteEvents(Boolean noteEvents) {
            return noteEvents(Output.of(noteEvents));
        }

        /**
         * @param notifyOnlyBrokenPipelines Send notifications for broken pipelines.
         * 
         * @return builder
         * 
         */
        public Builder notifyOnlyBrokenPipelines(@Nullable Output<Boolean> notifyOnlyBrokenPipelines) {
            $.notifyOnlyBrokenPipelines = notifyOnlyBrokenPipelines;
            return this;
        }

        /**
         * @param notifyOnlyBrokenPipelines Send notifications for broken pipelines.
         * 
         * @return builder
         * 
         */
        public Builder notifyOnlyBrokenPipelines(Boolean notifyOnlyBrokenPipelines) {
            return notifyOnlyBrokenPipelines(Output.of(notifyOnlyBrokenPipelines));
        }

        /**
         * @param pipelineEvents Enable notifications for pipeline events.
         * 
         * @return builder
         * 
         */
        public Builder pipelineEvents(Output<Boolean> pipelineEvents) {
            $.pipelineEvents = pipelineEvents;
            return this;
        }

        /**
         * @param pipelineEvents Enable notifications for pipeline events.
         * 
         * @return builder
         * 
         */
        public Builder pipelineEvents(Boolean pipelineEvents) {
            return pipelineEvents(Output.of(pipelineEvents));
        }

        /**
         * @param project The ID or full path of the project to integrate with Telegram.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project to integrate with Telegram.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pushEvents Enable notifications for push events.
         * 
         * @return builder
         * 
         */
        public Builder pushEvents(Output<Boolean> pushEvents) {
            $.pushEvents = pushEvents;
            return this;
        }

        /**
         * @param pushEvents Enable notifications for push events.
         * 
         * @return builder
         * 
         */
        public Builder pushEvents(Boolean pushEvents) {
            return pushEvents(Output.of(pushEvents));
        }

        /**
         * @param room Unique identifier for the target chat or the username of the target channel (in the format `{@literal @}channelusername`)
         * 
         * @return builder
         * 
         */
        public Builder room(Output<String> room) {
            $.room = room;
            return this;
        }

        /**
         * @param room Unique identifier for the target chat or the username of the target channel (in the format `{@literal @}channelusername`)
         * 
         * @return builder
         * 
         */
        public Builder room(String room) {
            return room(Output.of(room));
        }

        /**
         * @param tagPushEvents Enable notifications for tag push events.
         * 
         * @return builder
         * 
         */
        public Builder tagPushEvents(Output<Boolean> tagPushEvents) {
            $.tagPushEvents = tagPushEvents;
            return this;
        }

        /**
         * @param tagPushEvents Enable notifications for tag push events.
         * 
         * @return builder
         * 
         */
        public Builder tagPushEvents(Boolean tagPushEvents) {
            return tagPushEvents(Output.of(tagPushEvents));
        }

        /**
         * @param token The Telegram bot token.
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The Telegram bot token.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param wikiPageEvents Enable notifications for wiki page events.
         * 
         * @return builder
         * 
         */
        public Builder wikiPageEvents(Output<Boolean> wikiPageEvents) {
            $.wikiPageEvents = wikiPageEvents;
            return this;
        }

        /**
         * @param wikiPageEvents Enable notifications for wiki page events.
         * 
         * @return builder
         * 
         */
        public Builder wikiPageEvents(Boolean wikiPageEvents) {
            return wikiPageEvents(Output.of(wikiPageEvents));
        }

        public ProjectIntegrationTelegramArgs build() {
            if ($.confidentialIssuesEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "confidentialIssuesEvents");
            }
            if ($.confidentialNoteEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "confidentialNoteEvents");
            }
            if ($.issuesEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "issuesEvents");
            }
            if ($.mergeRequestsEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "mergeRequestsEvents");
            }
            if ($.noteEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "noteEvents");
            }
            if ($.pipelineEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "pipelineEvents");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "project");
            }
            if ($.pushEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "pushEvents");
            }
            if ($.room == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "room");
            }
            if ($.tagPushEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "tagPushEvents");
            }
            if ($.token == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "token");
            }
            if ($.wikiPageEvents == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationTelegramArgs", "wikiPageEvents");
            }
            return $;
        }
    }

}
