// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectMergeRequestsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectMergeRequestsArgs Empty = new GetProjectMergeRequestsArgs();

    /**
     * Return merge requests created by the given user ID.
     * 
     */
    @Import(name="authorId")
    private @Nullable Output<Integer> authorId;

    /**
     * @return Return merge requests created by the given user ID.
     * 
     */
    public Optional<Output<Integer>> authorId() {
        return Optional.ofNullable(this.authorId);
    }

    /**
     * Return merge requests created by the given username.
     * 
     */
    @Import(name="authorUsername")
    private @Nullable Output<String> authorUsername;

    /**
     * @return Return merge requests created by the given username.
     * 
     */
    public Optional<Output<String>> authorUsername() {
        return Optional.ofNullable(this.authorUsername);
    }

    /**
     * Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    @Import(name="createdAfter")
    private @Nullable Output<String> createdAfter;

    /**
     * @return Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<Output<String>> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }

    /**
     * Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    @Import(name="createdBefore")
    private @Nullable Output<String> createdBefore;

    /**
     * @return Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<Output<String>> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }

    /**
     * The unique internal IDs of the merge requests.
     * 
     */
    @Import(name="iids")
    private @Nullable Output<List<Integer>> iids;

    /**
     * @return The unique internal IDs of the merge requests.
     * 
     */
    public Optional<Output<List<Integer>>> iids() {
        return Optional.ofNullable(this.iids);
    }

    /**
     * Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
     * 
     */
    @Import(name="milestone")
    private @Nullable Output<String> milestone;

    /**
     * @return Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
     * 
     */
    public Optional<Output<String>> milestone() {
        return Optional.ofNullable(this.milestone);
    }

    /**
     * Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
     * 
     */
    @Import(name="myReactionEmoji")
    private @Nullable Output<String> myReactionEmoji;

    /**
     * @return Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
     * 
     */
    public Optional<Output<String>> myReactionEmoji() {
        return Optional.ofNullable(this.myReactionEmoji);
    }

    /**
     * Return requests ordered by `created_at`, `title` or `updated_at`. Default is `created_at`.
     * 
     */
    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    /**
     * @return Return requests ordered by `created_at`, `title` or `updated_at`. Default is `created_at`.
     * 
     */
    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * The ID or path of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
     * 
     */
    @Import(name="reviewerUsername")
    private @Nullable Output<String> reviewerUsername;

    /**
     * @return Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
     * 
     */
    public Optional<Output<String>> reviewerUsername() {
        return Optional.ofNullable(this.reviewerUsername);
    }

    /**
     * Return merge requests for the given scope: `created_by_me`, `assigned_to_me`, or `all`.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Return merge requests for the given scope: `created_by_me`, `assigned_to_me`, or `all`.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Search merge requests against their `title` or `description`.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Search merge requests against their `title` or `description`.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Return requests sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    @Import(name="sort")
    private @Nullable Output<String> sort;

    /**
     * @return Return requests sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    public Optional<Output<String>> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * Return merge requests with the given source branch.
     * 
     */
    @Import(name="sourceBranch")
    private @Nullable Output<String> sourceBranch;

    /**
     * @return Return merge requests with the given source branch.
     * 
     */
    public Optional<Output<String>> sourceBranch() {
        return Optional.ofNullable(this.sourceBranch);
    }

    /**
     * Return all merge requests (all) or just those that are opened, closed, locked, or merged.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Return all merge requests (all) or just those that are opened, closed, locked, or merged.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Return merge requests with the given target branch.
     * 
     */
    @Import(name="targetBranch")
    private @Nullable Output<String> targetBranch;

    /**
     * @return Return merge requests with the given target branch.
     * 
     */
    public Optional<Output<String>> targetBranch() {
        return Optional.ofNullable(this.targetBranch);
    }

    /**
     * Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    @Import(name="updatedAfter")
    private @Nullable Output<String> updatedAfter;

    /**
     * @return Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<Output<String>> updatedAfter() {
        return Optional.ofNullable(this.updatedAfter);
    }

    /**
     * Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    @Import(name="updatedBefore")
    private @Nullable Output<String> updatedBefore;

    /**
     * @return Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<Output<String>> updatedBefore() {
        return Optional.ofNullable(this.updatedBefore);
    }

    /**
     * Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
     * 
     */
    @Import(name="wip")
    private @Nullable Output<String> wip;

    /**
     * @return Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
     * 
     */
    public Optional<Output<String>> wip() {
        return Optional.ofNullable(this.wip);
    }

    private GetProjectMergeRequestsArgs() {}

    private GetProjectMergeRequestsArgs(GetProjectMergeRequestsArgs $) {
        this.authorId = $.authorId;
        this.authorUsername = $.authorUsername;
        this.createdAfter = $.createdAfter;
        this.createdBefore = $.createdBefore;
        this.iids = $.iids;
        this.milestone = $.milestone;
        this.myReactionEmoji = $.myReactionEmoji;
        this.orderBy = $.orderBy;
        this.project = $.project;
        this.reviewerUsername = $.reviewerUsername;
        this.scope = $.scope;
        this.search = $.search;
        this.sort = $.sort;
        this.sourceBranch = $.sourceBranch;
        this.state = $.state;
        this.targetBranch = $.targetBranch;
        this.updatedAfter = $.updatedAfter;
        this.updatedBefore = $.updatedBefore;
        this.wip = $.wip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectMergeRequestsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectMergeRequestsArgs $;

        public Builder() {
            $ = new GetProjectMergeRequestsArgs();
        }

        public Builder(GetProjectMergeRequestsArgs defaults) {
            $ = new GetProjectMergeRequestsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorId Return merge requests created by the given user ID.
         * 
         * @return builder
         * 
         */
        public Builder authorId(@Nullable Output<Integer> authorId) {
            $.authorId = authorId;
            return this;
        }

        /**
         * @param authorId Return merge requests created by the given user ID.
         * 
         * @return builder
         * 
         */
        public Builder authorId(Integer authorId) {
            return authorId(Output.of(authorId));
        }

        /**
         * @param authorUsername Return merge requests created by the given username.
         * 
         * @return builder
         * 
         */
        public Builder authorUsername(@Nullable Output<String> authorUsername) {
            $.authorUsername = authorUsername;
            return this;
        }

        /**
         * @param authorUsername Return merge requests created by the given username.
         * 
         * @return builder
         * 
         */
        public Builder authorUsername(String authorUsername) {
            return authorUsername(Output.of(authorUsername));
        }

        /**
         * @param createdAfter Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(@Nullable Output<String> createdAfter) {
            $.createdAfter = createdAfter;
            return this;
        }

        /**
         * @param createdAfter Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(String createdAfter) {
            return createdAfter(Output.of(createdAfter));
        }

        /**
         * @param createdBefore Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(@Nullable Output<String> createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        /**
         * @param createdBefore Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(String createdBefore) {
            return createdBefore(Output.of(createdBefore));
        }

        /**
         * @param iids The unique internal IDs of the merge requests.
         * 
         * @return builder
         * 
         */
        public Builder iids(@Nullable Output<List<Integer>> iids) {
            $.iids = iids;
            return this;
        }

        /**
         * @param iids The unique internal IDs of the merge requests.
         * 
         * @return builder
         * 
         */
        public Builder iids(List<Integer> iids) {
            return iids(Output.of(iids));
        }

        /**
         * @param iids The unique internal IDs of the merge requests.
         * 
         * @return builder
         * 
         */
        public Builder iids(Integer... iids) {
            return iids(List.of(iids));
        }

        /**
         * @param milestone Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
         * 
         * @return builder
         * 
         */
        public Builder milestone(@Nullable Output<String> milestone) {
            $.milestone = milestone;
            return this;
        }

        /**
         * @param milestone Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
         * 
         * @return builder
         * 
         */
        public Builder milestone(String milestone) {
            return milestone(Output.of(milestone));
        }

        /**
         * @param myReactionEmoji Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
         * 
         * @return builder
         * 
         */
        public Builder myReactionEmoji(@Nullable Output<String> myReactionEmoji) {
            $.myReactionEmoji = myReactionEmoji;
            return this;
        }

        /**
         * @param myReactionEmoji Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
         * 
         * @return builder
         * 
         */
        public Builder myReactionEmoji(String myReactionEmoji) {
            return myReactionEmoji(Output.of(myReactionEmoji));
        }

        /**
         * @param orderBy Return requests ordered by `created_at`, `title` or `updated_at`. Default is `created_at`.
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param orderBy Return requests ordered by `created_at`, `title` or `updated_at`. Default is `created_at`.
         * 
         * @return builder
         * 
         */
        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        /**
         * @param project The ID or path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param reviewerUsername Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
         * 
         * @return builder
         * 
         */
        public Builder reviewerUsername(@Nullable Output<String> reviewerUsername) {
            $.reviewerUsername = reviewerUsername;
            return this;
        }

        /**
         * @param reviewerUsername Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
         * 
         * @return builder
         * 
         */
        public Builder reviewerUsername(String reviewerUsername) {
            return reviewerUsername(Output.of(reviewerUsername));
        }

        /**
         * @param scope Return merge requests for the given scope: `created_by_me`, `assigned_to_me`, or `all`.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Return merge requests for the given scope: `created_by_me`, `assigned_to_me`, or `all`.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param search Search merge requests against their `title` or `description`.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Search merge requests against their `title` or `description`.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param sort Return requests sorted in `asc` or `desc` order. Default is `desc`.
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable Output<String> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Return requests sorted in `asc` or `desc` order. Default is `desc`.
         * 
         * @return builder
         * 
         */
        public Builder sort(String sort) {
            return sort(Output.of(sort));
        }

        /**
         * @param sourceBranch Return merge requests with the given source branch.
         * 
         * @return builder
         * 
         */
        public Builder sourceBranch(@Nullable Output<String> sourceBranch) {
            $.sourceBranch = sourceBranch;
            return this;
        }

        /**
         * @param sourceBranch Return merge requests with the given source branch.
         * 
         * @return builder
         * 
         */
        public Builder sourceBranch(String sourceBranch) {
            return sourceBranch(Output.of(sourceBranch));
        }

        /**
         * @param state Return all merge requests (all) or just those that are opened, closed, locked, or merged.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Return all merge requests (all) or just those that are opened, closed, locked, or merged.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetBranch Return merge requests with the given target branch.
         * 
         * @return builder
         * 
         */
        public Builder targetBranch(@Nullable Output<String> targetBranch) {
            $.targetBranch = targetBranch;
            return this;
        }

        /**
         * @param targetBranch Return merge requests with the given target branch.
         * 
         * @return builder
         * 
         */
        public Builder targetBranch(String targetBranch) {
            return targetBranch(Output.of(targetBranch));
        }

        /**
         * @param updatedAfter Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder updatedAfter(@Nullable Output<String> updatedAfter) {
            $.updatedAfter = updatedAfter;
            return this;
        }

        /**
         * @param updatedAfter Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder updatedAfter(String updatedAfter) {
            return updatedAfter(Output.of(updatedAfter));
        }

        /**
         * @param updatedBefore Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder updatedBefore(@Nullable Output<String> updatedBefore) {
            $.updatedBefore = updatedBefore;
            return this;
        }

        /**
         * @param updatedBefore Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
         * 
         * @return builder
         * 
         */
        public Builder updatedBefore(String updatedBefore) {
            return updatedBefore(Output.of(updatedBefore));
        }

        /**
         * @param wip Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
         * 
         * @return builder
         * 
         */
        public Builder wip(@Nullable Output<String> wip) {
            $.wip = wip;
            return this;
        }

        /**
         * @param wip Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
         * 
         * @return builder
         * 
         */
        public Builder wip(String wip) {
            return wip(Output.of(wip));
        }

        public GetProjectMergeRequestsArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectMergeRequestsArgs", "project");
            }
            return $;
        }
    }

}
