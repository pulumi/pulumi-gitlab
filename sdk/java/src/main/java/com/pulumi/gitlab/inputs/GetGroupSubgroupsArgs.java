// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupSubgroupsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGroupSubgroupsArgs Empty = new GetGroupSubgroupsArgs();

    /**
     * Show all the groups you have access to.
     * 
     */
    @Import(name="allAvailable")
    private @Nullable Output<Boolean> allAvailable;

    /**
     * @return Show all the groups you have access to.
     * 
     */
    public Optional<Output<Boolean>> allAvailable() {
        return Optional.ofNullable(this.allAvailable);
    }

    /**
     * The ID of the group.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<Integer> groupId;

    /**
     * @return The ID of the group.
     * 
     */
    public Output<Integer> groupId() {
        return this.groupId;
    }

    /**
     * Limit to groups where current user has at least this access level.
     * 
     */
    @Import(name="minAccessLevel")
    private @Nullable Output<String> minAccessLevel;

    /**
     * @return Limit to groups where current user has at least this access level.
     * 
     */
    public Optional<Output<String>> minAccessLevel() {
        return Optional.ofNullable(this.minAccessLevel);
    }

    /**
     * Order groups by name, path or id.
     * 
     */
    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    /**
     * @return Order groups by name, path or id.
     * 
     */
    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * Limit to groups explicitly owned by the current user.
     * 
     */
    @Import(name="owned")
    private @Nullable Output<Boolean> owned;

    /**
     * @return Limit to groups explicitly owned by the current user.
     * 
     */
    public Optional<Output<Boolean>> owned() {
        return Optional.ofNullable(this.owned);
    }

    /**
     * Return the list of authorized groups matching the search criteria.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Return the list of authorized groups matching the search criteria.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Skip the group IDs passed.
     * 
     */
    @Import(name="skipGroups")
    private @Nullable Output<List<Integer>> skipGroups;

    /**
     * @return Skip the group IDs passed.
     * 
     */
    public Optional<Output<List<Integer>>> skipGroups() {
        return Optional.ofNullable(this.skipGroups);
    }

    /**
     * Order groups in asc or desc order.
     * 
     */
    @Import(name="sort")
    private @Nullable Output<String> sort;

    /**
     * @return Order groups in asc or desc order.
     * 
     */
    public Optional<Output<String>> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * Include group statistics (administrators only).
     * 
     */
    @Import(name="statistics")
    private @Nullable Output<Boolean> statistics;

    /**
     * @return Include group statistics (administrators only).
     * 
     */
    public Optional<Output<Boolean>> statistics() {
        return Optional.ofNullable(this.statistics);
    }

    /**
     * Include custom attributes in response (administrators only).
     * 
     */
    @Import(name="withCustomAttributes")
    private @Nullable Output<Boolean> withCustomAttributes;

    /**
     * @return Include custom attributes in response (administrators only).
     * 
     */
    public Optional<Output<Boolean>> withCustomAttributes() {
        return Optional.ofNullable(this.withCustomAttributes);
    }

    private GetGroupSubgroupsArgs() {}

    private GetGroupSubgroupsArgs(GetGroupSubgroupsArgs $) {
        this.allAvailable = $.allAvailable;
        this.groupId = $.groupId;
        this.minAccessLevel = $.minAccessLevel;
        this.orderBy = $.orderBy;
        this.owned = $.owned;
        this.search = $.search;
        this.skipGroups = $.skipGroups;
        this.sort = $.sort;
        this.statistics = $.statistics;
        this.withCustomAttributes = $.withCustomAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupSubgroupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupSubgroupsArgs $;

        public Builder() {
            $ = new GetGroupSubgroupsArgs();
        }

        public Builder(GetGroupSubgroupsArgs defaults) {
            $ = new GetGroupSubgroupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allAvailable Show all the groups you have access to.
         * 
         * @return builder
         * 
         */
        public Builder allAvailable(@Nullable Output<Boolean> allAvailable) {
            $.allAvailable = allAvailable;
            return this;
        }

        /**
         * @param allAvailable Show all the groups you have access to.
         * 
         * @return builder
         * 
         */
        public Builder allAvailable(Boolean allAvailable) {
            return allAvailable(Output.of(allAvailable));
        }

        /**
         * @param groupId The ID of the group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param minAccessLevel Limit to groups where current user has at least this access level.
         * 
         * @return builder
         * 
         */
        public Builder minAccessLevel(@Nullable Output<String> minAccessLevel) {
            $.minAccessLevel = minAccessLevel;
            return this;
        }

        /**
         * @param minAccessLevel Limit to groups where current user has at least this access level.
         * 
         * @return builder
         * 
         */
        public Builder minAccessLevel(String minAccessLevel) {
            return minAccessLevel(Output.of(minAccessLevel));
        }

        /**
         * @param orderBy Order groups by name, path or id.
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param orderBy Order groups by name, path or id.
         * 
         * @return builder
         * 
         */
        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        /**
         * @param owned Limit to groups explicitly owned by the current user.
         * 
         * @return builder
         * 
         */
        public Builder owned(@Nullable Output<Boolean> owned) {
            $.owned = owned;
            return this;
        }

        /**
         * @param owned Limit to groups explicitly owned by the current user.
         * 
         * @return builder
         * 
         */
        public Builder owned(Boolean owned) {
            return owned(Output.of(owned));
        }

        /**
         * @param search Return the list of authorized groups matching the search criteria.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Return the list of authorized groups matching the search criteria.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param skipGroups Skip the group IDs passed.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(@Nullable Output<List<Integer>> skipGroups) {
            $.skipGroups = skipGroups;
            return this;
        }

        /**
         * @param skipGroups Skip the group IDs passed.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(List<Integer> skipGroups) {
            return skipGroups(Output.of(skipGroups));
        }

        /**
         * @param skipGroups Skip the group IDs passed.
         * 
         * @return builder
         * 
         */
        public Builder skipGroups(Integer... skipGroups) {
            return skipGroups(List.of(skipGroups));
        }

        /**
         * @param sort Order groups in asc or desc order.
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable Output<String> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Order groups in asc or desc order.
         * 
         * @return builder
         * 
         */
        public Builder sort(String sort) {
            return sort(Output.of(sort));
        }

        /**
         * @param statistics Include group statistics (administrators only).
         * 
         * @return builder
         * 
         */
        public Builder statistics(@Nullable Output<Boolean> statistics) {
            $.statistics = statistics;
            return this;
        }

        /**
         * @param statistics Include group statistics (administrators only).
         * 
         * @return builder
         * 
         */
        public Builder statistics(Boolean statistics) {
            return statistics(Output.of(statistics));
        }

        /**
         * @param withCustomAttributes Include custom attributes in response (administrators only).
         * 
         * @return builder
         * 
         */
        public Builder withCustomAttributes(@Nullable Output<Boolean> withCustomAttributes) {
            $.withCustomAttributes = withCustomAttributes;
            return this;
        }

        /**
         * @param withCustomAttributes Include custom attributes in response (administrators only).
         * 
         * @return builder
         * 
         */
        public Builder withCustomAttributes(Boolean withCustomAttributes) {
            return withCustomAttributes(Output.of(withCustomAttributes));
        }

        public GetGroupSubgroupsArgs build() {
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            return $;
        }
    }

}
