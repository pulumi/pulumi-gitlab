// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPipelineSchedulePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPipelineSchedulePlainArgs Empty = new GetPipelineSchedulePlainArgs();

    /**
     * The timezone.
     * 
     */
    @Import(name="cronTimezone")
    private @Nullable String cronTimezone;

    /**
     * @return The timezone.
     * 
     */
    public Optional<String> cronTimezone() {
        return Optional.ofNullable(this.cronTimezone);
    }

    /**
     * The pipeline schedule id.
     * 
     */
    @Import(name="pipelineScheduleId", required=true)
    private Integer pipelineScheduleId;

    /**
     * @return The pipeline schedule id.
     * 
     */
    public Integer pipelineScheduleId() {
        return this.pipelineScheduleId;
    }

    /**
     * The name or id of the project to add the schedule to.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return The name or id of the project to add the schedule to.
     * 
     */
    public String project() {
        return this.project;
    }

    private GetPipelineSchedulePlainArgs() {}

    private GetPipelineSchedulePlainArgs(GetPipelineSchedulePlainArgs $) {
        this.cronTimezone = $.cronTimezone;
        this.pipelineScheduleId = $.pipelineScheduleId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPipelineSchedulePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPipelineSchedulePlainArgs $;

        public Builder() {
            $ = new GetPipelineSchedulePlainArgs();
        }

        public Builder(GetPipelineSchedulePlainArgs defaults) {
            $ = new GetPipelineSchedulePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronTimezone The timezone.
         * 
         * @return builder
         * 
         */
        public Builder cronTimezone(@Nullable String cronTimezone) {
            $.cronTimezone = cronTimezone;
            return this;
        }

        /**
         * @param pipelineScheduleId The pipeline schedule id.
         * 
         * @return builder
         * 
         */
        public Builder pipelineScheduleId(Integer pipelineScheduleId) {
            $.pipelineScheduleId = pipelineScheduleId;
            return this;
        }

        /**
         * @param project The name or id of the project to add the schedule to.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        public GetPipelineSchedulePlainArgs build() {
            if ($.pipelineScheduleId == null) {
                throw new MissingRequiredPropertyException("GetPipelineSchedulePlainArgs", "pipelineScheduleId");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetPipelineSchedulePlainArgs", "project");
            }
            return $;
        }
    }

}
