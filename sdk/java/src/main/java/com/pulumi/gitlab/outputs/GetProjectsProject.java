// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gitlab.outputs.GetProjectsProjectContainerExpirationPolicy;
import com.pulumi.gitlab.outputs.GetProjectsProjectForkedFromProject;
import com.pulumi.gitlab.outputs.GetProjectsProjectNamespace;
import com.pulumi.gitlab.outputs.GetProjectsProjectOwner;
import com.pulumi.gitlab.outputs.GetProjectsProjectPermission;
import com.pulumi.gitlab.outputs.GetProjectsProjectSharedWithGroup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProjectsProject {
    private Map<String,String> _links;
    private Boolean allowMergeOnSkippedPipeline;
    private String analyticsAccessLevel;
    private Integer approvalsBeforeMerge;
    /**
     * @return Limit by archived status.
     * 
     */
    private Boolean archived;
    private String autoCancelPendingPipelines;
    private String autoDevopsDeployStrategy;
    private Boolean autoDevopsEnabled;
    private Boolean autocloseReferencedIssues;
    private String avatarUrl;
    private String buildCoverageRegex;
    private String buildGitStrategy;
    private Integer buildTimeout;
    private String buildsAccessLevel;
    private String ciConfigPath;
    private Integer ciDefaultGitDepth;
    private Boolean ciForwardDeploymentEnabled;
    private List<GetProjectsProjectContainerExpirationPolicy> containerExpirationPolicies;
    private String containerRegistryAccessLevel;
    private Boolean containerRegistryEnabled;
    private String createdAt;
    private Integer creatorId;
    private List<Map<String,String>> customAttributes;
    private String defaultBranch;
    private String description;
    private Boolean emailsDisabled;
    private String environmentsAccessLevel;
    private String externalAuthorizationClassificationLabel;
    private String featureFlagsAccessLevel;
    private List<GetProjectsProjectForkedFromProject> forkedFromProjects;
    private String forkingAccessLevel;
    private Integer forksCount;
    private String httpUrlToRepo;
    /**
     * @return The ID of this resource.
     * 
     */
    private Integer id;
    private String importError;
    private String importStatus;
    private String importUrl;
    private String infrastructureAccessLevel;
    private String issuesAccessLevel;
    private Boolean issuesEnabled;
    private Boolean jobsEnabled;
    private Boolean keepLatestArtifact;
    private String lastActivityAt;
    private Boolean lfsEnabled;
    private String mergeCommitTemplate;
    private String mergeMethod;
    private Boolean mergePipelinesEnabled;
    private String mergeRequestsAccessLevel;
    private Boolean mergeRequestsEnabled;
    private Boolean mergeTrainsEnabled;
    private Boolean mirror;
    private Boolean mirrorOverwritesDivergedBranches;
    private Boolean mirrorTriggerBuilds;
    private Integer mirrorUserId;
    private String monitorAccessLevel;
    private String name;
    private String nameWithNamespace;
    private List<GetProjectsProjectNamespace> namespaces;
    private Boolean onlyAllowMergeIfAllDiscussionsAreResolved;
    private Boolean onlyAllowMergeIfPipelineSucceeds;
    private Boolean onlyMirrorProtectedBranches;
    private Integer openIssuesCount;
    private List<GetProjectsProjectOwner> owners;
    private Boolean packagesEnabled;
    private String path;
    private String pathWithNamespace;
    private List<GetProjectsProjectPermission> permissions;
    private Boolean public_;
    private Boolean publicBuilds;
    private String readmeUrl;
    private String releasesAccessLevel;
    private String repositoryAccessLevel;
    private String repositoryStorage;
    private Boolean requestAccessEnabled;
    private String requirementsAccessLevel;
    private Boolean resolveOutdatedDiffDiscussions;
    private Boolean restrictUserDefinedVariables;
    private String runnersToken;
    private String securityAndComplianceAccessLevel;
    private Boolean sharedRunnersEnabled;
    private List<GetProjectsProjectSharedWithGroup> sharedWithGroups;
    private String snippetsAccessLevel;
    private Boolean snippetsEnabled;
    private String squashCommitTemplate;
    private String sshUrlToRepo;
    private Integer starCount;
    /**
     * @return Include project statistics. Cannot be used with `group_id`.
     * 
     */
    private Map<String,Integer> statistics;
    private String suggestionCommitMessage;
    private List<String> tagLists;
    private List<String> topics;
    /**
     * @return Limit by visibility `public`, `internal`, or `private`.
     * 
     */
    private String visibility;
    private String webUrl;
    private String wikiAccessLevel;
    private Boolean wikiEnabled;

    private GetProjectsProject() {}
    public Map<String,String> _links() {
        return this._links;
    }
    public Boolean allowMergeOnSkippedPipeline() {
        return this.allowMergeOnSkippedPipeline;
    }
    public String analyticsAccessLevel() {
        return this.analyticsAccessLevel;
    }
    public Integer approvalsBeforeMerge() {
        return this.approvalsBeforeMerge;
    }
    /**
     * @return Limit by archived status.
     * 
     */
    public Boolean archived() {
        return this.archived;
    }
    public String autoCancelPendingPipelines() {
        return this.autoCancelPendingPipelines;
    }
    public String autoDevopsDeployStrategy() {
        return this.autoDevopsDeployStrategy;
    }
    public Boolean autoDevopsEnabled() {
        return this.autoDevopsEnabled;
    }
    public Boolean autocloseReferencedIssues() {
        return this.autocloseReferencedIssues;
    }
    public String avatarUrl() {
        return this.avatarUrl;
    }
    public String buildCoverageRegex() {
        return this.buildCoverageRegex;
    }
    public String buildGitStrategy() {
        return this.buildGitStrategy;
    }
    public Integer buildTimeout() {
        return this.buildTimeout;
    }
    public String buildsAccessLevel() {
        return this.buildsAccessLevel;
    }
    public String ciConfigPath() {
        return this.ciConfigPath;
    }
    public Integer ciDefaultGitDepth() {
        return this.ciDefaultGitDepth;
    }
    public Boolean ciForwardDeploymentEnabled() {
        return this.ciForwardDeploymentEnabled;
    }
    public List<GetProjectsProjectContainerExpirationPolicy> containerExpirationPolicies() {
        return this.containerExpirationPolicies;
    }
    public String containerRegistryAccessLevel() {
        return this.containerRegistryAccessLevel;
    }
    public Boolean containerRegistryEnabled() {
        return this.containerRegistryEnabled;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public Integer creatorId() {
        return this.creatorId;
    }
    public List<Map<String,String>> customAttributes() {
        return this.customAttributes;
    }
    public String defaultBranch() {
        return this.defaultBranch;
    }
    public String description() {
        return this.description;
    }
    public Boolean emailsDisabled() {
        return this.emailsDisabled;
    }
    public String environmentsAccessLevel() {
        return this.environmentsAccessLevel;
    }
    public String externalAuthorizationClassificationLabel() {
        return this.externalAuthorizationClassificationLabel;
    }
    public String featureFlagsAccessLevel() {
        return this.featureFlagsAccessLevel;
    }
    public List<GetProjectsProjectForkedFromProject> forkedFromProjects() {
        return this.forkedFromProjects;
    }
    public String forkingAccessLevel() {
        return this.forkingAccessLevel;
    }
    public Integer forksCount() {
        return this.forksCount;
    }
    public String httpUrlToRepo() {
        return this.httpUrlToRepo;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public Integer id() {
        return this.id;
    }
    public String importError() {
        return this.importError;
    }
    public String importStatus() {
        return this.importStatus;
    }
    public String importUrl() {
        return this.importUrl;
    }
    public String infrastructureAccessLevel() {
        return this.infrastructureAccessLevel;
    }
    public String issuesAccessLevel() {
        return this.issuesAccessLevel;
    }
    public Boolean issuesEnabled() {
        return this.issuesEnabled;
    }
    public Boolean jobsEnabled() {
        return this.jobsEnabled;
    }
    public Boolean keepLatestArtifact() {
        return this.keepLatestArtifact;
    }
    public String lastActivityAt() {
        return this.lastActivityAt;
    }
    public Boolean lfsEnabled() {
        return this.lfsEnabled;
    }
    public String mergeCommitTemplate() {
        return this.mergeCommitTemplate;
    }
    public String mergeMethod() {
        return this.mergeMethod;
    }
    public Boolean mergePipelinesEnabled() {
        return this.mergePipelinesEnabled;
    }
    public String mergeRequestsAccessLevel() {
        return this.mergeRequestsAccessLevel;
    }
    public Boolean mergeRequestsEnabled() {
        return this.mergeRequestsEnabled;
    }
    public Boolean mergeTrainsEnabled() {
        return this.mergeTrainsEnabled;
    }
    public Boolean mirror() {
        return this.mirror;
    }
    public Boolean mirrorOverwritesDivergedBranches() {
        return this.mirrorOverwritesDivergedBranches;
    }
    public Boolean mirrorTriggerBuilds() {
        return this.mirrorTriggerBuilds;
    }
    public Integer mirrorUserId() {
        return this.mirrorUserId;
    }
    public String monitorAccessLevel() {
        return this.monitorAccessLevel;
    }
    public String name() {
        return this.name;
    }
    public String nameWithNamespace() {
        return this.nameWithNamespace;
    }
    public List<GetProjectsProjectNamespace> namespaces() {
        return this.namespaces;
    }
    public Boolean onlyAllowMergeIfAllDiscussionsAreResolved() {
        return this.onlyAllowMergeIfAllDiscussionsAreResolved;
    }
    public Boolean onlyAllowMergeIfPipelineSucceeds() {
        return this.onlyAllowMergeIfPipelineSucceeds;
    }
    public Boolean onlyMirrorProtectedBranches() {
        return this.onlyMirrorProtectedBranches;
    }
    public Integer openIssuesCount() {
        return this.openIssuesCount;
    }
    public List<GetProjectsProjectOwner> owners() {
        return this.owners;
    }
    public Boolean packagesEnabled() {
        return this.packagesEnabled;
    }
    public String path() {
        return this.path;
    }
    public String pathWithNamespace() {
        return this.pathWithNamespace;
    }
    public List<GetProjectsProjectPermission> permissions() {
        return this.permissions;
    }
    public Boolean public_() {
        return this.public_;
    }
    public Boolean publicBuilds() {
        return this.publicBuilds;
    }
    public String readmeUrl() {
        return this.readmeUrl;
    }
    public String releasesAccessLevel() {
        return this.releasesAccessLevel;
    }
    public String repositoryAccessLevel() {
        return this.repositoryAccessLevel;
    }
    public String repositoryStorage() {
        return this.repositoryStorage;
    }
    public Boolean requestAccessEnabled() {
        return this.requestAccessEnabled;
    }
    public String requirementsAccessLevel() {
        return this.requirementsAccessLevel;
    }
    public Boolean resolveOutdatedDiffDiscussions() {
        return this.resolveOutdatedDiffDiscussions;
    }
    public Boolean restrictUserDefinedVariables() {
        return this.restrictUserDefinedVariables;
    }
    public String runnersToken() {
        return this.runnersToken;
    }
    public String securityAndComplianceAccessLevel() {
        return this.securityAndComplianceAccessLevel;
    }
    public Boolean sharedRunnersEnabled() {
        return this.sharedRunnersEnabled;
    }
    public List<GetProjectsProjectSharedWithGroup> sharedWithGroups() {
        return this.sharedWithGroups;
    }
    public String snippetsAccessLevel() {
        return this.snippetsAccessLevel;
    }
    public Boolean snippetsEnabled() {
        return this.snippetsEnabled;
    }
    public String squashCommitTemplate() {
        return this.squashCommitTemplate;
    }
    public String sshUrlToRepo() {
        return this.sshUrlToRepo;
    }
    public Integer starCount() {
        return this.starCount;
    }
    /**
     * @return Include project statistics. Cannot be used with `group_id`.
     * 
     */
    public Map<String,Integer> statistics() {
        return this.statistics;
    }
    public String suggestionCommitMessage() {
        return this.suggestionCommitMessage;
    }
    public List<String> tagLists() {
        return this.tagLists;
    }
    public List<String> topics() {
        return this.topics;
    }
    /**
     * @return Limit by visibility `public`, `internal`, or `private`.
     * 
     */
    public String visibility() {
        return this.visibility;
    }
    public String webUrl() {
        return this.webUrl;
    }
    public String wikiAccessLevel() {
        return this.wikiAccessLevel;
    }
    public Boolean wikiEnabled() {
        return this.wikiEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectsProject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> _links;
        private Boolean allowMergeOnSkippedPipeline;
        private String analyticsAccessLevel;
        private Integer approvalsBeforeMerge;
        private Boolean archived;
        private String autoCancelPendingPipelines;
        private String autoDevopsDeployStrategy;
        private Boolean autoDevopsEnabled;
        private Boolean autocloseReferencedIssues;
        private String avatarUrl;
        private String buildCoverageRegex;
        private String buildGitStrategy;
        private Integer buildTimeout;
        private String buildsAccessLevel;
        private String ciConfigPath;
        private Integer ciDefaultGitDepth;
        private Boolean ciForwardDeploymentEnabled;
        private List<GetProjectsProjectContainerExpirationPolicy> containerExpirationPolicies;
        private String containerRegistryAccessLevel;
        private Boolean containerRegistryEnabled;
        private String createdAt;
        private Integer creatorId;
        private List<Map<String,String>> customAttributes;
        private String defaultBranch;
        private String description;
        private Boolean emailsDisabled;
        private String environmentsAccessLevel;
        private String externalAuthorizationClassificationLabel;
        private String featureFlagsAccessLevel;
        private List<GetProjectsProjectForkedFromProject> forkedFromProjects;
        private String forkingAccessLevel;
        private Integer forksCount;
        private String httpUrlToRepo;
        private Integer id;
        private String importError;
        private String importStatus;
        private String importUrl;
        private String infrastructureAccessLevel;
        private String issuesAccessLevel;
        private Boolean issuesEnabled;
        private Boolean jobsEnabled;
        private Boolean keepLatestArtifact;
        private String lastActivityAt;
        private Boolean lfsEnabled;
        private String mergeCommitTemplate;
        private String mergeMethod;
        private Boolean mergePipelinesEnabled;
        private String mergeRequestsAccessLevel;
        private Boolean mergeRequestsEnabled;
        private Boolean mergeTrainsEnabled;
        private Boolean mirror;
        private Boolean mirrorOverwritesDivergedBranches;
        private Boolean mirrorTriggerBuilds;
        private Integer mirrorUserId;
        private String monitorAccessLevel;
        private String name;
        private String nameWithNamespace;
        private List<GetProjectsProjectNamespace> namespaces;
        private Boolean onlyAllowMergeIfAllDiscussionsAreResolved;
        private Boolean onlyAllowMergeIfPipelineSucceeds;
        private Boolean onlyMirrorProtectedBranches;
        private Integer openIssuesCount;
        private List<GetProjectsProjectOwner> owners;
        private Boolean packagesEnabled;
        private String path;
        private String pathWithNamespace;
        private List<GetProjectsProjectPermission> permissions;
        private Boolean public_;
        private Boolean publicBuilds;
        private String readmeUrl;
        private String releasesAccessLevel;
        private String repositoryAccessLevel;
        private String repositoryStorage;
        private Boolean requestAccessEnabled;
        private String requirementsAccessLevel;
        private Boolean resolveOutdatedDiffDiscussions;
        private Boolean restrictUserDefinedVariables;
        private String runnersToken;
        private String securityAndComplianceAccessLevel;
        private Boolean sharedRunnersEnabled;
        private List<GetProjectsProjectSharedWithGroup> sharedWithGroups;
        private String snippetsAccessLevel;
        private Boolean snippetsEnabled;
        private String squashCommitTemplate;
        private String sshUrlToRepo;
        private Integer starCount;
        private Map<String,Integer> statistics;
        private String suggestionCommitMessage;
        private List<String> tagLists;
        private List<String> topics;
        private String visibility;
        private String webUrl;
        private String wikiAccessLevel;
        private Boolean wikiEnabled;
        public Builder() {}
        public Builder(GetProjectsProject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this._links = defaults._links;
    	      this.allowMergeOnSkippedPipeline = defaults.allowMergeOnSkippedPipeline;
    	      this.analyticsAccessLevel = defaults.analyticsAccessLevel;
    	      this.approvalsBeforeMerge = defaults.approvalsBeforeMerge;
    	      this.archived = defaults.archived;
    	      this.autoCancelPendingPipelines = defaults.autoCancelPendingPipelines;
    	      this.autoDevopsDeployStrategy = defaults.autoDevopsDeployStrategy;
    	      this.autoDevopsEnabled = defaults.autoDevopsEnabled;
    	      this.autocloseReferencedIssues = defaults.autocloseReferencedIssues;
    	      this.avatarUrl = defaults.avatarUrl;
    	      this.buildCoverageRegex = defaults.buildCoverageRegex;
    	      this.buildGitStrategy = defaults.buildGitStrategy;
    	      this.buildTimeout = defaults.buildTimeout;
    	      this.buildsAccessLevel = defaults.buildsAccessLevel;
    	      this.ciConfigPath = defaults.ciConfigPath;
    	      this.ciDefaultGitDepth = defaults.ciDefaultGitDepth;
    	      this.ciForwardDeploymentEnabled = defaults.ciForwardDeploymentEnabled;
    	      this.containerExpirationPolicies = defaults.containerExpirationPolicies;
    	      this.containerRegistryAccessLevel = defaults.containerRegistryAccessLevel;
    	      this.containerRegistryEnabled = defaults.containerRegistryEnabled;
    	      this.createdAt = defaults.createdAt;
    	      this.creatorId = defaults.creatorId;
    	      this.customAttributes = defaults.customAttributes;
    	      this.defaultBranch = defaults.defaultBranch;
    	      this.description = defaults.description;
    	      this.emailsDisabled = defaults.emailsDisabled;
    	      this.environmentsAccessLevel = defaults.environmentsAccessLevel;
    	      this.externalAuthorizationClassificationLabel = defaults.externalAuthorizationClassificationLabel;
    	      this.featureFlagsAccessLevel = defaults.featureFlagsAccessLevel;
    	      this.forkedFromProjects = defaults.forkedFromProjects;
    	      this.forkingAccessLevel = defaults.forkingAccessLevel;
    	      this.forksCount = defaults.forksCount;
    	      this.httpUrlToRepo = defaults.httpUrlToRepo;
    	      this.id = defaults.id;
    	      this.importError = defaults.importError;
    	      this.importStatus = defaults.importStatus;
    	      this.importUrl = defaults.importUrl;
    	      this.infrastructureAccessLevel = defaults.infrastructureAccessLevel;
    	      this.issuesAccessLevel = defaults.issuesAccessLevel;
    	      this.issuesEnabled = defaults.issuesEnabled;
    	      this.jobsEnabled = defaults.jobsEnabled;
    	      this.keepLatestArtifact = defaults.keepLatestArtifact;
    	      this.lastActivityAt = defaults.lastActivityAt;
    	      this.lfsEnabled = defaults.lfsEnabled;
    	      this.mergeCommitTemplate = defaults.mergeCommitTemplate;
    	      this.mergeMethod = defaults.mergeMethod;
    	      this.mergePipelinesEnabled = defaults.mergePipelinesEnabled;
    	      this.mergeRequestsAccessLevel = defaults.mergeRequestsAccessLevel;
    	      this.mergeRequestsEnabled = defaults.mergeRequestsEnabled;
    	      this.mergeTrainsEnabled = defaults.mergeTrainsEnabled;
    	      this.mirror = defaults.mirror;
    	      this.mirrorOverwritesDivergedBranches = defaults.mirrorOverwritesDivergedBranches;
    	      this.mirrorTriggerBuilds = defaults.mirrorTriggerBuilds;
    	      this.mirrorUserId = defaults.mirrorUserId;
    	      this.monitorAccessLevel = defaults.monitorAccessLevel;
    	      this.name = defaults.name;
    	      this.nameWithNamespace = defaults.nameWithNamespace;
    	      this.namespaces = defaults.namespaces;
    	      this.onlyAllowMergeIfAllDiscussionsAreResolved = defaults.onlyAllowMergeIfAllDiscussionsAreResolved;
    	      this.onlyAllowMergeIfPipelineSucceeds = defaults.onlyAllowMergeIfPipelineSucceeds;
    	      this.onlyMirrorProtectedBranches = defaults.onlyMirrorProtectedBranches;
    	      this.openIssuesCount = defaults.openIssuesCount;
    	      this.owners = defaults.owners;
    	      this.packagesEnabled = defaults.packagesEnabled;
    	      this.path = defaults.path;
    	      this.pathWithNamespace = defaults.pathWithNamespace;
    	      this.permissions = defaults.permissions;
    	      this.public_ = defaults.public_;
    	      this.publicBuilds = defaults.publicBuilds;
    	      this.readmeUrl = defaults.readmeUrl;
    	      this.releasesAccessLevel = defaults.releasesAccessLevel;
    	      this.repositoryAccessLevel = defaults.repositoryAccessLevel;
    	      this.repositoryStorage = defaults.repositoryStorage;
    	      this.requestAccessEnabled = defaults.requestAccessEnabled;
    	      this.requirementsAccessLevel = defaults.requirementsAccessLevel;
    	      this.resolveOutdatedDiffDiscussions = defaults.resolveOutdatedDiffDiscussions;
    	      this.restrictUserDefinedVariables = defaults.restrictUserDefinedVariables;
    	      this.runnersToken = defaults.runnersToken;
    	      this.securityAndComplianceAccessLevel = defaults.securityAndComplianceAccessLevel;
    	      this.sharedRunnersEnabled = defaults.sharedRunnersEnabled;
    	      this.sharedWithGroups = defaults.sharedWithGroups;
    	      this.snippetsAccessLevel = defaults.snippetsAccessLevel;
    	      this.snippetsEnabled = defaults.snippetsEnabled;
    	      this.squashCommitTemplate = defaults.squashCommitTemplate;
    	      this.sshUrlToRepo = defaults.sshUrlToRepo;
    	      this.starCount = defaults.starCount;
    	      this.statistics = defaults.statistics;
    	      this.suggestionCommitMessage = defaults.suggestionCommitMessage;
    	      this.tagLists = defaults.tagLists;
    	      this.topics = defaults.topics;
    	      this.visibility = defaults.visibility;
    	      this.webUrl = defaults.webUrl;
    	      this.wikiAccessLevel = defaults.wikiAccessLevel;
    	      this.wikiEnabled = defaults.wikiEnabled;
        }

        @CustomType.Setter
        public Builder _links(Map<String,String> _links) {
            this._links = Objects.requireNonNull(_links);
            return this;
        }
        @CustomType.Setter
        public Builder allowMergeOnSkippedPipeline(Boolean allowMergeOnSkippedPipeline) {
            this.allowMergeOnSkippedPipeline = Objects.requireNonNull(allowMergeOnSkippedPipeline);
            return this;
        }
        @CustomType.Setter
        public Builder analyticsAccessLevel(String analyticsAccessLevel) {
            this.analyticsAccessLevel = Objects.requireNonNull(analyticsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder approvalsBeforeMerge(Integer approvalsBeforeMerge) {
            this.approvalsBeforeMerge = Objects.requireNonNull(approvalsBeforeMerge);
            return this;
        }
        @CustomType.Setter
        public Builder archived(Boolean archived) {
            this.archived = Objects.requireNonNull(archived);
            return this;
        }
        @CustomType.Setter
        public Builder autoCancelPendingPipelines(String autoCancelPendingPipelines) {
            this.autoCancelPendingPipelines = Objects.requireNonNull(autoCancelPendingPipelines);
            return this;
        }
        @CustomType.Setter
        public Builder autoDevopsDeployStrategy(String autoDevopsDeployStrategy) {
            this.autoDevopsDeployStrategy = Objects.requireNonNull(autoDevopsDeployStrategy);
            return this;
        }
        @CustomType.Setter
        public Builder autoDevopsEnabled(Boolean autoDevopsEnabled) {
            this.autoDevopsEnabled = Objects.requireNonNull(autoDevopsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder autocloseReferencedIssues(Boolean autocloseReferencedIssues) {
            this.autocloseReferencedIssues = Objects.requireNonNull(autocloseReferencedIssues);
            return this;
        }
        @CustomType.Setter
        public Builder avatarUrl(String avatarUrl) {
            this.avatarUrl = Objects.requireNonNull(avatarUrl);
            return this;
        }
        @CustomType.Setter
        public Builder buildCoverageRegex(String buildCoverageRegex) {
            this.buildCoverageRegex = Objects.requireNonNull(buildCoverageRegex);
            return this;
        }
        @CustomType.Setter
        public Builder buildGitStrategy(String buildGitStrategy) {
            this.buildGitStrategy = Objects.requireNonNull(buildGitStrategy);
            return this;
        }
        @CustomType.Setter
        public Builder buildTimeout(Integer buildTimeout) {
            this.buildTimeout = Objects.requireNonNull(buildTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder buildsAccessLevel(String buildsAccessLevel) {
            this.buildsAccessLevel = Objects.requireNonNull(buildsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder ciConfigPath(String ciConfigPath) {
            this.ciConfigPath = Objects.requireNonNull(ciConfigPath);
            return this;
        }
        @CustomType.Setter
        public Builder ciDefaultGitDepth(Integer ciDefaultGitDepth) {
            this.ciDefaultGitDepth = Objects.requireNonNull(ciDefaultGitDepth);
            return this;
        }
        @CustomType.Setter
        public Builder ciForwardDeploymentEnabled(Boolean ciForwardDeploymentEnabled) {
            this.ciForwardDeploymentEnabled = Objects.requireNonNull(ciForwardDeploymentEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder containerExpirationPolicies(List<GetProjectsProjectContainerExpirationPolicy> containerExpirationPolicies) {
            this.containerExpirationPolicies = Objects.requireNonNull(containerExpirationPolicies);
            return this;
        }
        public Builder containerExpirationPolicies(GetProjectsProjectContainerExpirationPolicy... containerExpirationPolicies) {
            return containerExpirationPolicies(List.of(containerExpirationPolicies));
        }
        @CustomType.Setter
        public Builder containerRegistryAccessLevel(String containerRegistryAccessLevel) {
            this.containerRegistryAccessLevel = Objects.requireNonNull(containerRegistryAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder containerRegistryEnabled(Boolean containerRegistryEnabled) {
            this.containerRegistryEnabled = Objects.requireNonNull(containerRegistryEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder creatorId(Integer creatorId) {
            this.creatorId = Objects.requireNonNull(creatorId);
            return this;
        }
        @CustomType.Setter
        public Builder customAttributes(List<Map<String,String>> customAttributes) {
            this.customAttributes = Objects.requireNonNull(customAttributes);
            return this;
        }
        @CustomType.Setter
        public Builder defaultBranch(String defaultBranch) {
            this.defaultBranch = Objects.requireNonNull(defaultBranch);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder emailsDisabled(Boolean emailsDisabled) {
            this.emailsDisabled = Objects.requireNonNull(emailsDisabled);
            return this;
        }
        @CustomType.Setter
        public Builder environmentsAccessLevel(String environmentsAccessLevel) {
            this.environmentsAccessLevel = Objects.requireNonNull(environmentsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder externalAuthorizationClassificationLabel(String externalAuthorizationClassificationLabel) {
            this.externalAuthorizationClassificationLabel = Objects.requireNonNull(externalAuthorizationClassificationLabel);
            return this;
        }
        @CustomType.Setter
        public Builder featureFlagsAccessLevel(String featureFlagsAccessLevel) {
            this.featureFlagsAccessLevel = Objects.requireNonNull(featureFlagsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder forkedFromProjects(List<GetProjectsProjectForkedFromProject> forkedFromProjects) {
            this.forkedFromProjects = Objects.requireNonNull(forkedFromProjects);
            return this;
        }
        public Builder forkedFromProjects(GetProjectsProjectForkedFromProject... forkedFromProjects) {
            return forkedFromProjects(List.of(forkedFromProjects));
        }
        @CustomType.Setter
        public Builder forkingAccessLevel(String forkingAccessLevel) {
            this.forkingAccessLevel = Objects.requireNonNull(forkingAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder forksCount(Integer forksCount) {
            this.forksCount = Objects.requireNonNull(forksCount);
            return this;
        }
        @CustomType.Setter
        public Builder httpUrlToRepo(String httpUrlToRepo) {
            this.httpUrlToRepo = Objects.requireNonNull(httpUrlToRepo);
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder importError(String importError) {
            this.importError = Objects.requireNonNull(importError);
            return this;
        }
        @CustomType.Setter
        public Builder importStatus(String importStatus) {
            this.importStatus = Objects.requireNonNull(importStatus);
            return this;
        }
        @CustomType.Setter
        public Builder importUrl(String importUrl) {
            this.importUrl = Objects.requireNonNull(importUrl);
            return this;
        }
        @CustomType.Setter
        public Builder infrastructureAccessLevel(String infrastructureAccessLevel) {
            this.infrastructureAccessLevel = Objects.requireNonNull(infrastructureAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder issuesAccessLevel(String issuesAccessLevel) {
            this.issuesAccessLevel = Objects.requireNonNull(issuesAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder issuesEnabled(Boolean issuesEnabled) {
            this.issuesEnabled = Objects.requireNonNull(issuesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder jobsEnabled(Boolean jobsEnabled) {
            this.jobsEnabled = Objects.requireNonNull(jobsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder keepLatestArtifact(Boolean keepLatestArtifact) {
            this.keepLatestArtifact = Objects.requireNonNull(keepLatestArtifact);
            return this;
        }
        @CustomType.Setter
        public Builder lastActivityAt(String lastActivityAt) {
            this.lastActivityAt = Objects.requireNonNull(lastActivityAt);
            return this;
        }
        @CustomType.Setter
        public Builder lfsEnabled(Boolean lfsEnabled) {
            this.lfsEnabled = Objects.requireNonNull(lfsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder mergeCommitTemplate(String mergeCommitTemplate) {
            this.mergeCommitTemplate = Objects.requireNonNull(mergeCommitTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder mergeMethod(String mergeMethod) {
            this.mergeMethod = Objects.requireNonNull(mergeMethod);
            return this;
        }
        @CustomType.Setter
        public Builder mergePipelinesEnabled(Boolean mergePipelinesEnabled) {
            this.mergePipelinesEnabled = Objects.requireNonNull(mergePipelinesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder mergeRequestsAccessLevel(String mergeRequestsAccessLevel) {
            this.mergeRequestsAccessLevel = Objects.requireNonNull(mergeRequestsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder mergeRequestsEnabled(Boolean mergeRequestsEnabled) {
            this.mergeRequestsEnabled = Objects.requireNonNull(mergeRequestsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder mergeTrainsEnabled(Boolean mergeTrainsEnabled) {
            this.mergeTrainsEnabled = Objects.requireNonNull(mergeTrainsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder mirror(Boolean mirror) {
            this.mirror = Objects.requireNonNull(mirror);
            return this;
        }
        @CustomType.Setter
        public Builder mirrorOverwritesDivergedBranches(Boolean mirrorOverwritesDivergedBranches) {
            this.mirrorOverwritesDivergedBranches = Objects.requireNonNull(mirrorOverwritesDivergedBranches);
            return this;
        }
        @CustomType.Setter
        public Builder mirrorTriggerBuilds(Boolean mirrorTriggerBuilds) {
            this.mirrorTriggerBuilds = Objects.requireNonNull(mirrorTriggerBuilds);
            return this;
        }
        @CustomType.Setter
        public Builder mirrorUserId(Integer mirrorUserId) {
            this.mirrorUserId = Objects.requireNonNull(mirrorUserId);
            return this;
        }
        @CustomType.Setter
        public Builder monitorAccessLevel(String monitorAccessLevel) {
            this.monitorAccessLevel = Objects.requireNonNull(monitorAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameWithNamespace(String nameWithNamespace) {
            this.nameWithNamespace = Objects.requireNonNull(nameWithNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder namespaces(List<GetProjectsProjectNamespace> namespaces) {
            this.namespaces = Objects.requireNonNull(namespaces);
            return this;
        }
        public Builder namespaces(GetProjectsProjectNamespace... namespaces) {
            return namespaces(List.of(namespaces));
        }
        @CustomType.Setter
        public Builder onlyAllowMergeIfAllDiscussionsAreResolved(Boolean onlyAllowMergeIfAllDiscussionsAreResolved) {
            this.onlyAllowMergeIfAllDiscussionsAreResolved = Objects.requireNonNull(onlyAllowMergeIfAllDiscussionsAreResolved);
            return this;
        }
        @CustomType.Setter
        public Builder onlyAllowMergeIfPipelineSucceeds(Boolean onlyAllowMergeIfPipelineSucceeds) {
            this.onlyAllowMergeIfPipelineSucceeds = Objects.requireNonNull(onlyAllowMergeIfPipelineSucceeds);
            return this;
        }
        @CustomType.Setter
        public Builder onlyMirrorProtectedBranches(Boolean onlyMirrorProtectedBranches) {
            this.onlyMirrorProtectedBranches = Objects.requireNonNull(onlyMirrorProtectedBranches);
            return this;
        }
        @CustomType.Setter
        public Builder openIssuesCount(Integer openIssuesCount) {
            this.openIssuesCount = Objects.requireNonNull(openIssuesCount);
            return this;
        }
        @CustomType.Setter
        public Builder owners(List<GetProjectsProjectOwner> owners) {
            this.owners = Objects.requireNonNull(owners);
            return this;
        }
        public Builder owners(GetProjectsProjectOwner... owners) {
            return owners(List.of(owners));
        }
        @CustomType.Setter
        public Builder packagesEnabled(Boolean packagesEnabled) {
            this.packagesEnabled = Objects.requireNonNull(packagesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder pathWithNamespace(String pathWithNamespace) {
            this.pathWithNamespace = Objects.requireNonNull(pathWithNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<GetProjectsProjectPermission> permissions) {
            this.permissions = Objects.requireNonNull(permissions);
            return this;
        }
        public Builder permissions(GetProjectsProjectPermission... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter("public")
        public Builder public_(Boolean public_) {
            this.public_ = Objects.requireNonNull(public_);
            return this;
        }
        @CustomType.Setter
        public Builder publicBuilds(Boolean publicBuilds) {
            this.publicBuilds = Objects.requireNonNull(publicBuilds);
            return this;
        }
        @CustomType.Setter
        public Builder readmeUrl(String readmeUrl) {
            this.readmeUrl = Objects.requireNonNull(readmeUrl);
            return this;
        }
        @CustomType.Setter
        public Builder releasesAccessLevel(String releasesAccessLevel) {
            this.releasesAccessLevel = Objects.requireNonNull(releasesAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryAccessLevel(String repositoryAccessLevel) {
            this.repositoryAccessLevel = Objects.requireNonNull(repositoryAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryStorage(String repositoryStorage) {
            this.repositoryStorage = Objects.requireNonNull(repositoryStorage);
            return this;
        }
        @CustomType.Setter
        public Builder requestAccessEnabled(Boolean requestAccessEnabled) {
            this.requestAccessEnabled = Objects.requireNonNull(requestAccessEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder requirementsAccessLevel(String requirementsAccessLevel) {
            this.requirementsAccessLevel = Objects.requireNonNull(requirementsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder resolveOutdatedDiffDiscussions(Boolean resolveOutdatedDiffDiscussions) {
            this.resolveOutdatedDiffDiscussions = Objects.requireNonNull(resolveOutdatedDiffDiscussions);
            return this;
        }
        @CustomType.Setter
        public Builder restrictUserDefinedVariables(Boolean restrictUserDefinedVariables) {
            this.restrictUserDefinedVariables = Objects.requireNonNull(restrictUserDefinedVariables);
            return this;
        }
        @CustomType.Setter
        public Builder runnersToken(String runnersToken) {
            this.runnersToken = Objects.requireNonNull(runnersToken);
            return this;
        }
        @CustomType.Setter
        public Builder securityAndComplianceAccessLevel(String securityAndComplianceAccessLevel) {
            this.securityAndComplianceAccessLevel = Objects.requireNonNull(securityAndComplianceAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder sharedRunnersEnabled(Boolean sharedRunnersEnabled) {
            this.sharedRunnersEnabled = Objects.requireNonNull(sharedRunnersEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder sharedWithGroups(List<GetProjectsProjectSharedWithGroup> sharedWithGroups) {
            this.sharedWithGroups = Objects.requireNonNull(sharedWithGroups);
            return this;
        }
        public Builder sharedWithGroups(GetProjectsProjectSharedWithGroup... sharedWithGroups) {
            return sharedWithGroups(List.of(sharedWithGroups));
        }
        @CustomType.Setter
        public Builder snippetsAccessLevel(String snippetsAccessLevel) {
            this.snippetsAccessLevel = Objects.requireNonNull(snippetsAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder snippetsEnabled(Boolean snippetsEnabled) {
            this.snippetsEnabled = Objects.requireNonNull(snippetsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder squashCommitTemplate(String squashCommitTemplate) {
            this.squashCommitTemplate = Objects.requireNonNull(squashCommitTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder sshUrlToRepo(String sshUrlToRepo) {
            this.sshUrlToRepo = Objects.requireNonNull(sshUrlToRepo);
            return this;
        }
        @CustomType.Setter
        public Builder starCount(Integer starCount) {
            this.starCount = Objects.requireNonNull(starCount);
            return this;
        }
        @CustomType.Setter
        public Builder statistics(Map<String,Integer> statistics) {
            this.statistics = Objects.requireNonNull(statistics);
            return this;
        }
        @CustomType.Setter
        public Builder suggestionCommitMessage(String suggestionCommitMessage) {
            this.suggestionCommitMessage = Objects.requireNonNull(suggestionCommitMessage);
            return this;
        }
        @CustomType.Setter
        public Builder tagLists(List<String> tagLists) {
            this.tagLists = Objects.requireNonNull(tagLists);
            return this;
        }
        public Builder tagLists(String... tagLists) {
            return tagLists(List.of(tagLists));
        }
        @CustomType.Setter
        public Builder topics(List<String> topics) {
            this.topics = Objects.requireNonNull(topics);
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder visibility(String visibility) {
            this.visibility = Objects.requireNonNull(visibility);
            return this;
        }
        @CustomType.Setter
        public Builder webUrl(String webUrl) {
            this.webUrl = Objects.requireNonNull(webUrl);
            return this;
        }
        @CustomType.Setter
        public Builder wikiAccessLevel(String wikiAccessLevel) {
            this.wikiAccessLevel = Objects.requireNonNull(wikiAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder wikiEnabled(Boolean wikiEnabled) {
            this.wikiEnabled = Objects.requireNonNull(wikiEnabled);
            return this;
        }
        public GetProjectsProject build() {
            final var o = new GetProjectsProject();
            o._links = _links;
            o.allowMergeOnSkippedPipeline = allowMergeOnSkippedPipeline;
            o.analyticsAccessLevel = analyticsAccessLevel;
            o.approvalsBeforeMerge = approvalsBeforeMerge;
            o.archived = archived;
            o.autoCancelPendingPipelines = autoCancelPendingPipelines;
            o.autoDevopsDeployStrategy = autoDevopsDeployStrategy;
            o.autoDevopsEnabled = autoDevopsEnabled;
            o.autocloseReferencedIssues = autocloseReferencedIssues;
            o.avatarUrl = avatarUrl;
            o.buildCoverageRegex = buildCoverageRegex;
            o.buildGitStrategy = buildGitStrategy;
            o.buildTimeout = buildTimeout;
            o.buildsAccessLevel = buildsAccessLevel;
            o.ciConfigPath = ciConfigPath;
            o.ciDefaultGitDepth = ciDefaultGitDepth;
            o.ciForwardDeploymentEnabled = ciForwardDeploymentEnabled;
            o.containerExpirationPolicies = containerExpirationPolicies;
            o.containerRegistryAccessLevel = containerRegistryAccessLevel;
            o.containerRegistryEnabled = containerRegistryEnabled;
            o.createdAt = createdAt;
            o.creatorId = creatorId;
            o.customAttributes = customAttributes;
            o.defaultBranch = defaultBranch;
            o.description = description;
            o.emailsDisabled = emailsDisabled;
            o.environmentsAccessLevel = environmentsAccessLevel;
            o.externalAuthorizationClassificationLabel = externalAuthorizationClassificationLabel;
            o.featureFlagsAccessLevel = featureFlagsAccessLevel;
            o.forkedFromProjects = forkedFromProjects;
            o.forkingAccessLevel = forkingAccessLevel;
            o.forksCount = forksCount;
            o.httpUrlToRepo = httpUrlToRepo;
            o.id = id;
            o.importError = importError;
            o.importStatus = importStatus;
            o.importUrl = importUrl;
            o.infrastructureAccessLevel = infrastructureAccessLevel;
            o.issuesAccessLevel = issuesAccessLevel;
            o.issuesEnabled = issuesEnabled;
            o.jobsEnabled = jobsEnabled;
            o.keepLatestArtifact = keepLatestArtifact;
            o.lastActivityAt = lastActivityAt;
            o.lfsEnabled = lfsEnabled;
            o.mergeCommitTemplate = mergeCommitTemplate;
            o.mergeMethod = mergeMethod;
            o.mergePipelinesEnabled = mergePipelinesEnabled;
            o.mergeRequestsAccessLevel = mergeRequestsAccessLevel;
            o.mergeRequestsEnabled = mergeRequestsEnabled;
            o.mergeTrainsEnabled = mergeTrainsEnabled;
            o.mirror = mirror;
            o.mirrorOverwritesDivergedBranches = mirrorOverwritesDivergedBranches;
            o.mirrorTriggerBuilds = mirrorTriggerBuilds;
            o.mirrorUserId = mirrorUserId;
            o.monitorAccessLevel = monitorAccessLevel;
            o.name = name;
            o.nameWithNamespace = nameWithNamespace;
            o.namespaces = namespaces;
            o.onlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
            o.onlyAllowMergeIfPipelineSucceeds = onlyAllowMergeIfPipelineSucceeds;
            o.onlyMirrorProtectedBranches = onlyMirrorProtectedBranches;
            o.openIssuesCount = openIssuesCount;
            o.owners = owners;
            o.packagesEnabled = packagesEnabled;
            o.path = path;
            o.pathWithNamespace = pathWithNamespace;
            o.permissions = permissions;
            o.public_ = public_;
            o.publicBuilds = publicBuilds;
            o.readmeUrl = readmeUrl;
            o.releasesAccessLevel = releasesAccessLevel;
            o.repositoryAccessLevel = repositoryAccessLevel;
            o.repositoryStorage = repositoryStorage;
            o.requestAccessEnabled = requestAccessEnabled;
            o.requirementsAccessLevel = requirementsAccessLevel;
            o.resolveOutdatedDiffDiscussions = resolveOutdatedDiffDiscussions;
            o.restrictUserDefinedVariables = restrictUserDefinedVariables;
            o.runnersToken = runnersToken;
            o.securityAndComplianceAccessLevel = securityAndComplianceAccessLevel;
            o.sharedRunnersEnabled = sharedRunnersEnabled;
            o.sharedWithGroups = sharedWithGroups;
            o.snippetsAccessLevel = snippetsAccessLevel;
            o.snippetsEnabled = snippetsEnabled;
            o.squashCommitTemplate = squashCommitTemplate;
            o.sshUrlToRepo = sshUrlToRepo;
            o.starCount = starCount;
            o.statistics = statistics;
            o.suggestionCommitMessage = suggestionCommitMessage;
            o.tagLists = tagLists;
            o.topics = topics;
            o.visibility = visibility;
            o.webUrl = webUrl;
            o.wikiAccessLevel = wikiAccessLevel;
            o.wikiEnabled = wikiEnabled;
            return o;
        }
    }
}
