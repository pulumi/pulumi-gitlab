// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectBranchesBranchCommit {
    /**
     * @return The email of the author.
     * 
     */
    private String authorEmail;
    /**
     * @return The name of the author.
     * 
     */
    private String authorName;
    /**
     * @return The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
     * 
     */
    private String authoredDate;
    /**
     * @return The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
     * 
     */
    private String committedDate;
    /**
     * @return The email of the user that committed.
     * 
     */
    private String committerEmail;
    /**
     * @return The name of the user that committed.
     * 
     */
    private String committerName;
    /**
     * @return The unique id assigned to the commit by Gitlab.
     * 
     */
    private String id;
    /**
     * @return The commit message
     * 
     */
    private String message;
    /**
     * @return The id of the parents of the commit
     * 
     */
    private List<String> parentIds;
    /**
     * @return The short id assigned to the commit by Gitlab.
     * 
     */
    private String shortId;
    /**
     * @return The title of the commit
     * 
     */
    private String title;

    private GetProjectBranchesBranchCommit() {}
    /**
     * @return The email of the author.
     * 
     */
    public String authorEmail() {
        return this.authorEmail;
    }
    /**
     * @return The name of the author.
     * 
     */
    public String authorName() {
        return this.authorName;
    }
    /**
     * @return The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
     * 
     */
    public String authoredDate() {
        return this.authoredDate;
    }
    /**
     * @return The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
     * 
     */
    public String committedDate() {
        return this.committedDate;
    }
    /**
     * @return The email of the user that committed.
     * 
     */
    public String committerEmail() {
        return this.committerEmail;
    }
    /**
     * @return The name of the user that committed.
     * 
     */
    public String committerName() {
        return this.committerName;
    }
    /**
     * @return The unique id assigned to the commit by Gitlab.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The commit message
     * 
     */
    public String message() {
        return this.message;
    }
    /**
     * @return The id of the parents of the commit
     * 
     */
    public List<String> parentIds() {
        return this.parentIds;
    }
    /**
     * @return The short id assigned to the commit by Gitlab.
     * 
     */
    public String shortId() {
        return this.shortId;
    }
    /**
     * @return The title of the commit
     * 
     */
    public String title() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectBranchesBranchCommit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorEmail;
        private String authorName;
        private String authoredDate;
        private String committedDate;
        private String committerEmail;
        private String committerName;
        private String id;
        private String message;
        private List<String> parentIds;
        private String shortId;
        private String title;
        public Builder() {}
        public Builder(GetProjectBranchesBranchCommit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorEmail = defaults.authorEmail;
    	      this.authorName = defaults.authorName;
    	      this.authoredDate = defaults.authoredDate;
    	      this.committedDate = defaults.committedDate;
    	      this.committerEmail = defaults.committerEmail;
    	      this.committerName = defaults.committerName;
    	      this.id = defaults.id;
    	      this.message = defaults.message;
    	      this.parentIds = defaults.parentIds;
    	      this.shortId = defaults.shortId;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder authorEmail(String authorEmail) {
            if (authorEmail == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "authorEmail");
            }
            this.authorEmail = authorEmail;
            return this;
        }
        @CustomType.Setter
        public Builder authorName(String authorName) {
            if (authorName == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "authorName");
            }
            this.authorName = authorName;
            return this;
        }
        @CustomType.Setter
        public Builder authoredDate(String authoredDate) {
            if (authoredDate == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "authoredDate");
            }
            this.authoredDate = authoredDate;
            return this;
        }
        @CustomType.Setter
        public Builder committedDate(String committedDate) {
            if (committedDate == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "committedDate");
            }
            this.committedDate = committedDate;
            return this;
        }
        @CustomType.Setter
        public Builder committerEmail(String committerEmail) {
            if (committerEmail == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "committerEmail");
            }
            this.committerEmail = committerEmail;
            return this;
        }
        @CustomType.Setter
        public Builder committerName(String committerName) {
            if (committerName == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "committerName");
            }
            this.committerName = committerName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            if (message == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "message");
            }
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder parentIds(List<String> parentIds) {
            if (parentIds == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "parentIds");
            }
            this.parentIds = parentIds;
            return this;
        }
        public Builder parentIds(String... parentIds) {
            return parentIds(List.of(parentIds));
        }
        @CustomType.Setter
        public Builder shortId(String shortId) {
            if (shortId == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "shortId");
            }
            this.shortId = shortId;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetProjectBranchesBranchCommit", "title");
            }
            this.title = title;
            return this;
        }
        public GetProjectBranchesBranchCommit build() {
            final var _resultValue = new GetProjectBranchesBranchCommit();
            _resultValue.authorEmail = authorEmail;
            _resultValue.authorName = authorName;
            _resultValue.authoredDate = authoredDate;
            _resultValue.committedDate = committedDate;
            _resultValue.committerEmail = committerEmail;
            _resultValue.committerName = committerName;
            _resultValue.id = id;
            _resultValue.message = message;
            _resultValue.parentIds = parentIds;
            _resultValue.shortId = shortId;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
