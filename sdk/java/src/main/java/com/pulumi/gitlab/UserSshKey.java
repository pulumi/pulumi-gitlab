// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.UserSshKeyArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.UserSshKeyState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.UserSshKey` resource allows to manage the lifecycle of an SSH key assigned to a user.
 * 
 * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/users.html#single-ssh-key)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.GitlabFunctions;
 * import com.pulumi.gitlab.inputs.GetUserArgs;
 * import com.pulumi.gitlab.UserSshKey;
 * import com.pulumi.gitlab.UserSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var exampleUser = GitlabFunctions.getUser(GetUserArgs.builder()
 *             .username(&#34;example-user&#34;)
 *             .build());
 * 
 *         var exampleUserSshKey = new UserSshKey(&#34;exampleUserSshKey&#34;, UserSshKeyArgs.builder()        
 *             .userId(exampleUser.applyValue(getUserResult -&gt; getUserResult.id()))
 *             .title(&#34;example-key&#34;)
 *             .key(&#34;ssh-ed25519 AAAA...&#34;)
 *             .expiresAt(&#34;2016-01-21T00:00:00.000Z&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * You can import a user ssh key using an id made up of `{user-id}:{key}`, e.g.
 * 
 * ```sh
 *  $ pulumi import gitlab:index/userSshKey:UserSshKey example 42:1
 * ```
 * 
 */
@ResourceType(type="gitlab:index/userSshKey:UserSshKey")
public class UserSshKey extends com.pulumi.resources.CustomResource {
    /**
     * The time when this key was created in GitLab.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The time when this key was created in GitLab.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
     * 
     */
    @Export(name="expiresAt", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> expiresAt;

    /**
     * @return The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
     * 
     */
    public Output<Optional<String>> expiresAt() {
        return Codegen.optional(this.expiresAt);
    }
    /**
     * The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with the username and GitLab hostname.
     * 
     */
    @Export(name="key", refs={String.class}, tree="[0]")
    private Output<String> key;

    /**
     * @return The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with the username and GitLab hostname.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * The ID of the ssh key.
     * 
     */
    @Export(name="keyId", refs={Integer.class}, tree="[0]")
    private Output<Integer> keyId;

    /**
     * @return The ID of the ssh key.
     * 
     */
    public Output<Integer> keyId() {
        return this.keyId;
    }
    /**
     * The title of the ssh key.
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return The title of the ssh key.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * The ID or username of the user.
     * 
     */
    @Export(name="userId", refs={Integer.class}, tree="[0]")
    private Output<Integer> userId;

    /**
     * @return The ID or username of the user.
     * 
     */
    public Output<Integer> userId() {
        return this.userId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserSshKey(String name) {
        this(name, UserSshKeyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserSshKey(String name, UserSshKeyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserSshKey(String name, UserSshKeyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/userSshKey:UserSshKey", name, args == null ? UserSshKeyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserSshKey(String name, Output<String> id, @Nullable UserSshKeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/userSshKey:UserSshKey", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserSshKey get(String name, Output<String> id, @Nullable UserSshKeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserSshKey(name, id, state, options);
    }
}
