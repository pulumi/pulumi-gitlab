// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.BranchProtectionAllowedToMergeArgs;
import com.pulumi.gitlab.inputs.BranchProtectionAllowedToPushArgs;
import com.pulumi.gitlab.inputs.BranchProtectionAllowedToUnprotectArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchProtectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BranchProtectionArgs Empty = new BranchProtectionArgs();

    /**
     * Can be set to true to allow users with push access to force push.
     * 
     */
    @Import(name="allowForcePush")
    private @Nullable Output<Boolean> allowForcePush;

    /**
     * @return Can be set to true to allow users with push access to force push.
     * 
     */
    public Optional<Output<Boolean>> allowForcePush() {
        return Optional.ofNullable(this.allowForcePush);
    }

    /**
     * Defines permissions for action.
     * 
     */
    @Import(name="allowedToMerges")
    private @Nullable Output<List<BranchProtectionAllowedToMergeArgs>> allowedToMerges;

    /**
     * @return Defines permissions for action.
     * 
     */
    public Optional<Output<List<BranchProtectionAllowedToMergeArgs>>> allowedToMerges() {
        return Optional.ofNullable(this.allowedToMerges);
    }

    /**
     * Defines permissions for action.
     * 
     */
    @Import(name="allowedToPushes")
    private @Nullable Output<List<BranchProtectionAllowedToPushArgs>> allowedToPushes;

    /**
     * @return Defines permissions for action.
     * 
     */
    public Optional<Output<List<BranchProtectionAllowedToPushArgs>>> allowedToPushes() {
        return Optional.ofNullable(this.allowedToPushes);
    }

    /**
     * Defines permissions for action.
     * 
     */
    @Import(name="allowedToUnprotects")
    private @Nullable Output<List<BranchProtectionAllowedToUnprotectArgs>> allowedToUnprotects;

    /**
     * @return Defines permissions for action.
     * 
     */
    public Optional<Output<List<BranchProtectionAllowedToUnprotectArgs>>> allowedToUnprotects() {
        return Optional.ofNullable(this.allowedToUnprotects);
    }

    /**
     * Name of the branch.
     * 
     */
    @Import(name="branch", required=true)
    private Output<String> branch;

    /**
     * @return Name of the branch.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }

    /**
     * Can be set to true to require code owner approval before merging.
     * 
     */
    @Import(name="codeOwnerApprovalRequired")
    private @Nullable Output<Boolean> codeOwnerApprovalRequired;

    /**
     * @return Can be set to true to require code owner approval before merging.
     * 
     */
    public Optional<Output<Boolean>> codeOwnerApprovalRequired() {
        return Optional.ofNullable(this.codeOwnerApprovalRequired);
    }

    /**
     * Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.
     * 
     */
    @Import(name="mergeAccessLevel")
    private @Nullable Output<String> mergeAccessLevel;

    /**
     * @return Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.
     * 
     */
    public Optional<Output<String>> mergeAccessLevel() {
        return Optional.ofNullable(this.mergeAccessLevel);
    }

    /**
     * The id of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The id of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.
     * 
     */
    @Import(name="pushAccessLevel")
    private @Nullable Output<String> pushAccessLevel;

    /**
     * @return Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.
     * 
     */
    public Optional<Output<String>> pushAccessLevel() {
        return Optional.ofNullable(this.pushAccessLevel);
    }

    /**
     * Access levels allowed to unprotect. Valid values are: `no one`, `developer`, `maintainer`.
     * 
     */
    @Import(name="unprotectAccessLevel")
    private @Nullable Output<String> unprotectAccessLevel;

    /**
     * @return Access levels allowed to unprotect. Valid values are: `no one`, `developer`, `maintainer`.
     * 
     */
    public Optional<Output<String>> unprotectAccessLevel() {
        return Optional.ofNullable(this.unprotectAccessLevel);
    }

    private BranchProtectionArgs() {}

    private BranchProtectionArgs(BranchProtectionArgs $) {
        this.allowForcePush = $.allowForcePush;
        this.allowedToMerges = $.allowedToMerges;
        this.allowedToPushes = $.allowedToPushes;
        this.allowedToUnprotects = $.allowedToUnprotects;
        this.branch = $.branch;
        this.codeOwnerApprovalRequired = $.codeOwnerApprovalRequired;
        this.mergeAccessLevel = $.mergeAccessLevel;
        this.project = $.project;
        this.pushAccessLevel = $.pushAccessLevel;
        this.unprotectAccessLevel = $.unprotectAccessLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchProtectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchProtectionArgs $;

        public Builder() {
            $ = new BranchProtectionArgs();
        }

        public Builder(BranchProtectionArgs defaults) {
            $ = new BranchProtectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowForcePush Can be set to true to allow users with push access to force push.
         * 
         * @return builder
         * 
         */
        public Builder allowForcePush(@Nullable Output<Boolean> allowForcePush) {
            $.allowForcePush = allowForcePush;
            return this;
        }

        /**
         * @param allowForcePush Can be set to true to allow users with push access to force push.
         * 
         * @return builder
         * 
         */
        public Builder allowForcePush(Boolean allowForcePush) {
            return allowForcePush(Output.of(allowForcePush));
        }

        /**
         * @param allowedToMerges Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToMerges(@Nullable Output<List<BranchProtectionAllowedToMergeArgs>> allowedToMerges) {
            $.allowedToMerges = allowedToMerges;
            return this;
        }

        /**
         * @param allowedToMerges Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToMerges(List<BranchProtectionAllowedToMergeArgs> allowedToMerges) {
            return allowedToMerges(Output.of(allowedToMerges));
        }

        /**
         * @param allowedToMerges Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToMerges(BranchProtectionAllowedToMergeArgs... allowedToMerges) {
            return allowedToMerges(List.of(allowedToMerges));
        }

        /**
         * @param allowedToPushes Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToPushes(@Nullable Output<List<BranchProtectionAllowedToPushArgs>> allowedToPushes) {
            $.allowedToPushes = allowedToPushes;
            return this;
        }

        /**
         * @param allowedToPushes Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToPushes(List<BranchProtectionAllowedToPushArgs> allowedToPushes) {
            return allowedToPushes(Output.of(allowedToPushes));
        }

        /**
         * @param allowedToPushes Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToPushes(BranchProtectionAllowedToPushArgs... allowedToPushes) {
            return allowedToPushes(List.of(allowedToPushes));
        }

        /**
         * @param allowedToUnprotects Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToUnprotects(@Nullable Output<List<BranchProtectionAllowedToUnprotectArgs>> allowedToUnprotects) {
            $.allowedToUnprotects = allowedToUnprotects;
            return this;
        }

        /**
         * @param allowedToUnprotects Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToUnprotects(List<BranchProtectionAllowedToUnprotectArgs> allowedToUnprotects) {
            return allowedToUnprotects(Output.of(allowedToUnprotects));
        }

        /**
         * @param allowedToUnprotects Defines permissions for action.
         * 
         * @return builder
         * 
         */
        public Builder allowedToUnprotects(BranchProtectionAllowedToUnprotectArgs... allowedToUnprotects) {
            return allowedToUnprotects(List.of(allowedToUnprotects));
        }

        /**
         * @param branch Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branch(Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch Name of the branch.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param codeOwnerApprovalRequired Can be set to true to require code owner approval before merging.
         * 
         * @return builder
         * 
         */
        public Builder codeOwnerApprovalRequired(@Nullable Output<Boolean> codeOwnerApprovalRequired) {
            $.codeOwnerApprovalRequired = codeOwnerApprovalRequired;
            return this;
        }

        /**
         * @param codeOwnerApprovalRequired Can be set to true to require code owner approval before merging.
         * 
         * @return builder
         * 
         */
        public Builder codeOwnerApprovalRequired(Boolean codeOwnerApprovalRequired) {
            return codeOwnerApprovalRequired(Output.of(codeOwnerApprovalRequired));
        }

        /**
         * @param mergeAccessLevel Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevel(@Nullable Output<String> mergeAccessLevel) {
            $.mergeAccessLevel = mergeAccessLevel;
            return this;
        }

        /**
         * @param mergeAccessLevel Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevel(String mergeAccessLevel) {
            return mergeAccessLevel(Output.of(mergeAccessLevel));
        }

        /**
         * @param project The id of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The id of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pushAccessLevel Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevel(@Nullable Output<String> pushAccessLevel) {
            $.pushAccessLevel = pushAccessLevel;
            return this;
        }

        /**
         * @param pushAccessLevel Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevel(String pushAccessLevel) {
            return pushAccessLevel(Output.of(pushAccessLevel));
        }

        /**
         * @param unprotectAccessLevel Access levels allowed to unprotect. Valid values are: `no one`, `developer`, `maintainer`.
         * 
         * @return builder
         * 
         */
        public Builder unprotectAccessLevel(@Nullable Output<String> unprotectAccessLevel) {
            $.unprotectAccessLevel = unprotectAccessLevel;
            return this;
        }

        /**
         * @param unprotectAccessLevel Access levels allowed to unprotect. Valid values are: `no one`, `developer`, `maintainer`.
         * 
         * @return builder
         * 
         */
        public Builder unprotectAccessLevel(String unprotectAccessLevel) {
            return unprotectAccessLevel(Output.of(unprotectAccessLevel));
        }

        public BranchProtectionArgs build() {
            $.branch = Objects.requireNonNull($.branch, "expected parameter 'branch' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
