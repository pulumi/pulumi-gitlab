// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetReleaseAssets;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReleaseResult {
    /**
     * @return The assets for a release
     * 
     */
    private @Nullable GetReleaseAssets assets;
    /**
     * @return The date the release was created.
     * 
     */
    private String createdAt;
    /**
     * @return An HTML rendered description of the release.
     * 
     */
    private String description;
    private String id;
    /**
     * @return The name of the release.
     * 
     */
    private String name;
    /**
     * @return The ID or URL-encoded path of the project.
     * 
     */
    private String projectId;
    /**
     * @return The date the release was created.
     * 
     */
    private String releasedAt;
    /**
     * @return The Git tag the release is associated with.
     * 
     */
    private String tagName;

    private GetReleaseResult() {}
    /**
     * @return The assets for a release
     * 
     */
    public Optional<GetReleaseAssets> assets() {
        return Optional.ofNullable(this.assets);
    }
    /**
     * @return The date the release was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return An HTML rendered description of the release.
     * 
     */
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the release.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID or URL-encoded path of the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The date the release was created.
     * 
     */
    public String releasedAt() {
        return this.releasedAt;
    }
    /**
     * @return The Git tag the release is associated with.
     * 
     */
    public String tagName() {
        return this.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReleaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetReleaseAssets assets;
        private String createdAt;
        private String description;
        private String id;
        private String name;
        private String projectId;
        private String releasedAt;
        private String tagName;
        public Builder() {}
        public Builder(GetReleaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assets = defaults.assets;
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.releasedAt = defaults.releasedAt;
    	      this.tagName = defaults.tagName;
        }

        @CustomType.Setter
        public Builder assets(@Nullable GetReleaseAssets assets) {

            this.assets = assets;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetReleaseResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetReleaseResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetReleaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetReleaseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetReleaseResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder releasedAt(String releasedAt) {
            if (releasedAt == null) {
              throw new MissingRequiredPropertyException("GetReleaseResult", "releasedAt");
            }
            this.releasedAt = releasedAt;
            return this;
        }
        @CustomType.Setter
        public Builder tagName(String tagName) {
            if (tagName == null) {
              throw new MissingRequiredPropertyException("GetReleaseResult", "tagName");
            }
            this.tagName = tagName;
            return this;
        }
        public GetReleaseResult build() {
            final var _resultValue = new GetReleaseResult();
            _resultValue.assets = assets;
            _resultValue.createdAt = createdAt;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.releasedAt = releasedAt;
            _resultValue.tagName = tagName;
            return _resultValue;
        }
    }
}
