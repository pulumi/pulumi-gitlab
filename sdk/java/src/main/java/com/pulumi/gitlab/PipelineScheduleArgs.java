// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineScheduleArgs Empty = new PipelineScheduleArgs();

    /**
     * The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * The cron (e.g. `0 1 * * *`).
     * 
     */
    @Import(name="cron", required=true)
    private Output<String> cron;

    /**
     * @return The cron (e.g. `0 1 * * *`).
     * 
     */
    public Output<String> cron() {
        return this.cron;
    }

    /**
     * The timezone.
     * 
     */
    @Import(name="cronTimezone")
    private @Nullable Output<String> cronTimezone;

    /**
     * @return The timezone.
     * 
     */
    public Optional<Output<String>> cronTimezone() {
        return Optional.ofNullable(this.cronTimezone);
    }

    /**
     * The description of the pipeline schedule.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the pipeline schedule.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The name or id of the project to add the schedule to.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The name or id of the project to add the schedule to.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The branch/tag name to be triggered.
     * 
     */
    @Import(name="ref", required=true)
    private Output<String> ref;

    /**
     * @return The branch/tag name to be triggered.
     * 
     */
    public Output<String> ref() {
        return this.ref;
    }

    /**
     * When set to `true`, the user represented by the token running Terraform will take ownership of the scheduled pipeline
     * prior to editing it. This can help when managing scheduled pipeline drift when other users are making changes outside
     * Terraform.
     * 
     */
    @Import(name="takeOwnership")
    private @Nullable Output<Boolean> takeOwnership;

    /**
     * @return When set to `true`, the user represented by the token running Terraform will take ownership of the scheduled pipeline
     * prior to editing it. This can help when managing scheduled pipeline drift when other users are making changes outside
     * Terraform.
     * 
     */
    public Optional<Output<Boolean>> takeOwnership() {
        return Optional.ofNullable(this.takeOwnership);
    }

    private PipelineScheduleArgs() {}

    private PipelineScheduleArgs(PipelineScheduleArgs $) {
        this.active = $.active;
        this.cron = $.cron;
        this.cronTimezone = $.cronTimezone;
        this.description = $.description;
        this.project = $.project;
        this.ref = $.ref;
        this.takeOwnership = $.takeOwnership;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineScheduleArgs $;

        public Builder() {
            $ = new PipelineScheduleArgs();
        }

        public Builder(PipelineScheduleArgs defaults) {
            $ = new PipelineScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param cron The cron (e.g. `0 1 * * *`).
         * 
         * @return builder
         * 
         */
        public Builder cron(Output<String> cron) {
            $.cron = cron;
            return this;
        }

        /**
         * @param cron The cron (e.g. `0 1 * * *`).
         * 
         * @return builder
         * 
         */
        public Builder cron(String cron) {
            return cron(Output.of(cron));
        }

        /**
         * @param cronTimezone The timezone.
         * 
         * @return builder
         * 
         */
        public Builder cronTimezone(@Nullable Output<String> cronTimezone) {
            $.cronTimezone = cronTimezone;
            return this;
        }

        /**
         * @param cronTimezone The timezone.
         * 
         * @return builder
         * 
         */
        public Builder cronTimezone(String cronTimezone) {
            return cronTimezone(Output.of(cronTimezone));
        }

        /**
         * @param description The description of the pipeline schedule.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the pipeline schedule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param project The name or id of the project to add the schedule to.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or id of the project to add the schedule to.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param ref The branch/tag name to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder ref(Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref The branch/tag name to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param takeOwnership When set to `true`, the user represented by the token running Terraform will take ownership of the scheduled pipeline
         * prior to editing it. This can help when managing scheduled pipeline drift when other users are making changes outside
         * Terraform.
         * 
         * @return builder
         * 
         */
        public Builder takeOwnership(@Nullable Output<Boolean> takeOwnership) {
            $.takeOwnership = takeOwnership;
            return this;
        }

        /**
         * @param takeOwnership When set to `true`, the user represented by the token running Terraform will take ownership of the scheduled pipeline
         * prior to editing it. This can help when managing scheduled pipeline drift when other users are making changes outside
         * Terraform.
         * 
         * @return builder
         * 
         */
        public Builder takeOwnership(Boolean takeOwnership) {
            return takeOwnership(Output.of(takeOwnership));
        }

        public PipelineScheduleArgs build() {
            $.cron = Objects.requireNonNull($.cron, "expected parameter 'cron' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.ref = Objects.requireNonNull($.ref, "expected parameter 'ref' to be non-null");
            return $;
        }
    }

}
