// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectState;
import com.pulumi.gitlab.outputs.ProjectContainerExpirationPolicy;
import com.pulumi.gitlab.outputs.ProjectPushRules;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.inputs.ProjectPushRulesArgs;
 * import com.pulumi.gitlab.GitlabFunctions;
 * import com.pulumi.gitlab.inputs.GetUserArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Project(&#34;example&#34;, ProjectArgs.builder()        
 *             .description(&#34;My awesome codebase&#34;)
 *             .visibilityLevel(&#34;public&#34;)
 *             .build());
 * 
 *         var example_two = new Project(&#34;example-two&#34;, ProjectArgs.builder()        
 *             .pushRules(ProjectPushRulesArgs.builder()
 *                 .authorEmailRegex(&#34;@example\\.com$&#34;)
 *                 .commitCommitterCheck(true)
 *                 .memberCheck(true)
 *                 .preventSecrets(true)
 *                 .build())
 *             .build());
 * 
 *         final var peterParker = GitlabFunctions.getUser(GetUserArgs.builder()
 *             .username(&#34;peter_parker&#34;)
 *             .build());
 * 
 *         var petersRepo = new Project(&#34;petersRepo&#34;, ProjectArgs.builder()        
 *             .description(&#34;This is a description&#34;)
 *             .namespaceId(peterParker.applyValue(getUserResult -&gt; getUserResult.namespaceId()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import gitlab:index/project:Project You can import a project state using `&lt;resource&gt; &lt;id&gt;`. The
 * ```
 * 
 *  `id` can be whatever the [get single project api][get_single_project] takes for its `:id` value, so for example
 * 
 * ```sh
 *  $ pulumi import gitlab:index/project:Project example richardc/example
 * ```
 * 
 */
@ResourceType(type="gitlab:index/project:Project")
public class Project extends com.pulumi.resources.CustomResource {
    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     * 
     */
    @Export(name="allowMergeOnSkippedPipeline", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowMergeOnSkippedPipeline;

    /**
     * @return Set to true if you want to treat skipped pipelines as if they finished with success.
     * 
     */
    public Output<Optional<Boolean>> allowMergeOnSkippedPipeline() {
        return Codegen.optional(this.allowMergeOnSkippedPipeline);
    }
    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="analyticsAccessLevel", type=String.class, parameters={})
    private Output<String> analyticsAccessLevel;

    /**
     * @return Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> analyticsAccessLevel() {
        return this.analyticsAccessLevel;
    }
    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     * 
     */
    @Export(name="approvalsBeforeMerge", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> approvalsBeforeMerge;

    /**
     * @return Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     * 
     */
    public Output<Optional<Integer>> approvalsBeforeMerge() {
        return Codegen.optional(this.approvalsBeforeMerge);
    }
    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     * 
     */
    @Export(name="archiveOnDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> archiveOnDestroy;

    /**
     * @return Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     * 
     */
    public Output<Optional<Boolean>> archiveOnDestroy() {
        return Codegen.optional(this.archiveOnDestroy);
    }
    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     * 
     */
    @Export(name="archived", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> archived;

    /**
     * @return Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     * 
     */
    public Output<Optional<Boolean>> archived() {
        return Codegen.optional(this.archived);
    }
    /**
     * Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
     * 
     */
    @Export(name="autoCancelPendingPipelines", type=String.class, parameters={})
    private Output<String> autoCancelPendingPipelines;

    /**
     * @return Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
     * 
     */
    public Output<String> autoCancelPendingPipelines() {
        return this.autoCancelPendingPipelines;
    }
    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
     * 
     */
    @Export(name="autoDevopsDeployStrategy", type=String.class, parameters={})
    private Output<String> autoDevopsDeployStrategy;

    /**
     * @return Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
     * 
     */
    public Output<String> autoDevopsDeployStrategy() {
        return this.autoDevopsDeployStrategy;
    }
    /**
     * Enable Auto DevOps for this project.
     * 
     */
    @Export(name="autoDevopsEnabled", type=Boolean.class, parameters={})
    private Output<Boolean> autoDevopsEnabled;

    /**
     * @return Enable Auto DevOps for this project.
     * 
     */
    public Output<Boolean> autoDevopsEnabled() {
        return this.autoDevopsEnabled;
    }
    /**
     * Set whether auto-closing referenced issues on default branch.
     * 
     */
    @Export(name="autocloseReferencedIssues", type=Boolean.class, parameters={})
    private Output<Boolean> autocloseReferencedIssues;

    /**
     * @return Set whether auto-closing referenced issues on default branch.
     * 
     */
    public Output<Boolean> autocloseReferencedIssues() {
        return this.autocloseReferencedIssues;
    }
    /**
     * Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
     * 
     * @deprecated
     * build_coverage_regex is removed in GitLab 15.0.
     * 
     */
    @Deprecated /* build_coverage_regex is removed in GitLab 15.0. */
    @Export(name="buildCoverageRegex", type=String.class, parameters={})
    private Output</* @Nullable */ String> buildCoverageRegex;

    /**
     * @return Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
     * 
     */
    public Output<Optional<String>> buildCoverageRegex() {
        return Codegen.optional(this.buildCoverageRegex);
    }
    /**
     * The Git strategy. Defaults to fetch.
     * 
     */
    @Export(name="buildGitStrategy", type=String.class, parameters={})
    private Output<String> buildGitStrategy;

    /**
     * @return The Git strategy. Defaults to fetch.
     * 
     */
    public Output<String> buildGitStrategy() {
        return this.buildGitStrategy;
    }
    /**
     * The maximum amount of time, in seconds, that a job can run.
     * 
     */
    @Export(name="buildTimeout", type=Integer.class, parameters={})
    private Output<Integer> buildTimeout;

    /**
     * @return The maximum amount of time, in seconds, that a job can run.
     * 
     */
    public Output<Integer> buildTimeout() {
        return this.buildTimeout;
    }
    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="buildsAccessLevel", type=String.class, parameters={})
    private Output<String> buildsAccessLevel;

    /**
     * @return Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> buildsAccessLevel() {
        return this.buildsAccessLevel;
    }
    /**
     * Custom Path to CI config file.
     * 
     */
    @Export(name="ciConfigPath", type=String.class, parameters={})
    private Output</* @Nullable */ String> ciConfigPath;

    /**
     * @return Custom Path to CI config file.
     * 
     */
    public Output<Optional<String>> ciConfigPath() {
        return Codegen.optional(this.ciConfigPath);
    }
    /**
     * Default number of revisions for shallow cloning.
     * 
     */
    @Export(name="ciDefaultGitDepth", type=Integer.class, parameters={})
    private Output<Integer> ciDefaultGitDepth;

    /**
     * @return Default number of revisions for shallow cloning.
     * 
     */
    public Output<Integer> ciDefaultGitDepth() {
        return this.ciDefaultGitDepth;
    }
    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     * 
     */
    @Export(name="ciForwardDeploymentEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> ciForwardDeploymentEnabled;

    /**
     * @return When a new deployment job starts, skip older deployment jobs that are still pending.
     * 
     */
    public Output<Optional<Boolean>> ciForwardDeploymentEnabled() {
        return Codegen.optional(this.ciForwardDeploymentEnabled);
    }
    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
     * 
     */
    @Export(name="containerExpirationPolicy", type=ProjectContainerExpirationPolicy.class, parameters={})
    private Output<ProjectContainerExpirationPolicy> containerExpirationPolicy;

    /**
     * @return Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
     * 
     */
    public Output<ProjectContainerExpirationPolicy> containerExpirationPolicy() {
        return this.containerExpirationPolicy;
    }
    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="containerRegistryAccessLevel", type=String.class, parameters={})
    private Output<String> containerRegistryAccessLevel;

    /**
     * @return Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> containerRegistryAccessLevel() {
        return this.containerRegistryAccessLevel;
    }
    /**
     * Enable container registry for the project.
     * 
     */
    @Export(name="containerRegistryEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> containerRegistryEnabled;

    /**
     * @return Enable container registry for the project.
     * 
     */
    public Output<Optional<Boolean>> containerRegistryEnabled() {
        return Codegen.optional(this.containerRegistryEnabled);
    }
    /**
     * The default branch for the project.
     * 
     */
    @Export(name="defaultBranch", type=String.class, parameters={})
    private Output<String> defaultBranch;

    /**
     * @return The default branch for the project.
     * 
     */
    public Output<String> defaultBranch() {
        return this.defaultBranch;
    }
    /**
     * A description of the project.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of the project.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Disable email notifications.
     * 
     */
    @Export(name="emailsDisabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> emailsDisabled;

    /**
     * @return Disable email notifications.
     * 
     */
    public Output<Optional<Boolean>> emailsDisabled() {
        return Codegen.optional(this.emailsDisabled);
    }
    /**
     * The classification label for the project.
     * 
     */
    @Export(name="externalAuthorizationClassificationLabel", type=String.class, parameters={})
    private Output</* @Nullable */ String> externalAuthorizationClassificationLabel;

    /**
     * @return The classification label for the project.
     * 
     */
    public Output<Optional<String>> externalAuthorizationClassificationLabel() {
        return Codegen.optional(this.externalAuthorizationClassificationLabel);
    }
    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="forkingAccessLevel", type=String.class, parameters={})
    private Output<String> forkingAccessLevel;

    /**
     * @return Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> forkingAccessLevel() {
        return this.forkingAccessLevel;
    }
    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     * 
     */
    @Export(name="groupWithProjectTemplatesId", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> groupWithProjectTemplatesId;

    /**
     * @return For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     * 
     */
    public Output<Optional<Integer>> groupWithProjectTemplatesId() {
        return Codegen.optional(this.groupWithProjectTemplatesId);
    }
    /**
     * URL that can be provided to `git clone` to clone the
     * 
     */
    @Export(name="httpUrlToRepo", type=String.class, parameters={})
    private Output<String> httpUrlToRepo;

    /**
     * @return URL that can be provided to `git clone` to clone the
     * 
     */
    public Output<String> httpUrlToRepo() {
        return this.httpUrlToRepo;
    }
    /**
     * Git URL to a repository to be imported.
     * 
     */
    @Export(name="importUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> importUrl;

    /**
     * @return Git URL to a repository to be imported.
     * 
     */
    public Output<Optional<String>> importUrl() {
        return Codegen.optional(this.importUrl);
    }
    /**
     * Create main branch with first commit containing a README.md file.
     * 
     */
    @Export(name="initializeWithReadme", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> initializeWithReadme;

    /**
     * @return Create main branch with first commit containing a README.md file.
     * 
     */
    public Output<Optional<Boolean>> initializeWithReadme() {
        return Codegen.optional(this.initializeWithReadme);
    }
    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="issuesAccessLevel", type=String.class, parameters={})
    private Output<String> issuesAccessLevel;

    /**
     * @return Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> issuesAccessLevel() {
        return this.issuesAccessLevel;
    }
    /**
     * Enable issue tracking for the project.
     * 
     */
    @Export(name="issuesEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> issuesEnabled;

    /**
     * @return Enable issue tracking for the project.
     * 
     */
    public Output<Optional<Boolean>> issuesEnabled() {
        return Codegen.optional(this.issuesEnabled);
    }
    /**
     * Sets the template for new issues in the project.
     * 
     */
    @Export(name="issuesTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> issuesTemplate;

    /**
     * @return Sets the template for new issues in the project.
     * 
     */
    public Output<Optional<String>> issuesTemplate() {
        return Codegen.optional(this.issuesTemplate);
    }
    /**
     * Enable LFS for the project.
     * 
     */
    @Export(name="lfsEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> lfsEnabled;

    /**
     * @return Enable LFS for the project.
     * 
     */
    public Output<Optional<Boolean>> lfsEnabled() {
        return Codegen.optional(this.lfsEnabled);
    }
    /**
     * Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
     * 
     */
    @Export(name="mergeCommitTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> mergeCommitTemplate;

    /**
     * @return Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
     * 
     */
    public Output<Optional<String>> mergeCommitTemplate() {
        return Codegen.optional(this.mergeCommitTemplate);
    }
    /**
     * Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
     * 
     */
    @Export(name="mergeMethod", type=String.class, parameters={})
    private Output</* @Nullable */ String> mergeMethod;

    /**
     * @return Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
     * 
     */
    public Output<Optional<String>> mergeMethod() {
        return Codegen.optional(this.mergeMethod);
    }
    /**
     * Enable or disable merge pipelines.
     * 
     */
    @Export(name="mergePipelinesEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mergePipelinesEnabled;

    /**
     * @return Enable or disable merge pipelines.
     * 
     */
    public Output<Optional<Boolean>> mergePipelinesEnabled() {
        return Codegen.optional(this.mergePipelinesEnabled);
    }
    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="mergeRequestsAccessLevel", type=String.class, parameters={})
    private Output<String> mergeRequestsAccessLevel;

    /**
     * @return Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> mergeRequestsAccessLevel() {
        return this.mergeRequestsAccessLevel;
    }
    /**
     * Enable merge requests for the project.
     * 
     */
    @Export(name="mergeRequestsEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mergeRequestsEnabled;

    /**
     * @return Enable merge requests for the project.
     * 
     */
    public Output<Optional<Boolean>> mergeRequestsEnabled() {
        return Codegen.optional(this.mergeRequestsEnabled);
    }
    /**
     * Sets the template for new merge requests in the project.
     * 
     */
    @Export(name="mergeRequestsTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> mergeRequestsTemplate;

    /**
     * @return Sets the template for new merge requests in the project.
     * 
     */
    public Output<Optional<String>> mergeRequestsTemplate() {
        return Codegen.optional(this.mergeRequestsTemplate);
    }
    /**
     * Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
     * 
     */
    @Export(name="mergeTrainsEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mergeTrainsEnabled;

    /**
     * @return Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
     * 
     */
    public Output<Optional<Boolean>> mergeTrainsEnabled() {
        return Codegen.optional(this.mergeTrainsEnabled);
    }
    /**
     * Enable project pull mirror.
     * 
     */
    @Export(name="mirror", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mirror;

    /**
     * @return Enable project pull mirror.
     * 
     */
    public Output<Optional<Boolean>> mirror() {
        return Codegen.optional(this.mirror);
    }
    /**
     * Enable overwrite diverged branches for a mirrored project.
     * 
     */
    @Export(name="mirrorOverwritesDivergedBranches", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mirrorOverwritesDivergedBranches;

    /**
     * @return Enable overwrite diverged branches for a mirrored project.
     * 
     */
    public Output<Optional<Boolean>> mirrorOverwritesDivergedBranches() {
        return Codegen.optional(this.mirrorOverwritesDivergedBranches);
    }
    /**
     * Enable trigger builds on pushes for a mirrored project.
     * 
     */
    @Export(name="mirrorTriggerBuilds", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mirrorTriggerBuilds;

    /**
     * @return Enable trigger builds on pushes for a mirrored project.
     * 
     */
    public Output<Optional<Boolean>> mirrorTriggerBuilds() {
        return Codegen.optional(this.mirrorTriggerBuilds);
    }
    /**
     * The name of the project.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the project.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace (group or user) of the project. Defaults to your user.
     * 
     */
    @Export(name="namespaceId", type=Integer.class, parameters={})
    private Output<Integer> namespaceId;

    /**
     * @return The namespace (group or user) of the project. Defaults to your user.
     * 
     */
    public Output<Integer> namespaceId() {
        return this.namespaceId;
    }
    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     * 
     */
    @Export(name="onlyAllowMergeIfAllDiscussionsAreResolved", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> onlyAllowMergeIfAllDiscussionsAreResolved;

    /**
     * @return Set to true if you want allow merges only if all discussions are resolved.
     * 
     */
    public Output<Optional<Boolean>> onlyAllowMergeIfAllDiscussionsAreResolved() {
        return Codegen.optional(this.onlyAllowMergeIfAllDiscussionsAreResolved);
    }
    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     * 
     */
    @Export(name="onlyAllowMergeIfPipelineSucceeds", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> onlyAllowMergeIfPipelineSucceeds;

    /**
     * @return Set to true if you want allow merges only if a pipeline succeeds.
     * 
     */
    public Output<Optional<Boolean>> onlyAllowMergeIfPipelineSucceeds() {
        return Codegen.optional(this.onlyAllowMergeIfPipelineSucceeds);
    }
    /**
     * Enable only mirror protected branches for a mirrored project.
     * 
     */
    @Export(name="onlyMirrorProtectedBranches", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> onlyMirrorProtectedBranches;

    /**
     * @return Enable only mirror protected branches for a mirrored project.
     * 
     */
    public Output<Optional<Boolean>> onlyMirrorProtectedBranches() {
        return Codegen.optional(this.onlyMirrorProtectedBranches);
    }
    /**
     * Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="operationsAccessLevel", type=String.class, parameters={})
    private Output<String> operationsAccessLevel;

    /**
     * @return Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> operationsAccessLevel() {
        return this.operationsAccessLevel;
    }
    /**
     * Enable packages repository for the project.
     * 
     */
    @Export(name="packagesEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> packagesEnabled;

    /**
     * @return Enable packages repository for the project.
     * 
     */
    public Output<Optional<Boolean>> packagesEnabled() {
        return Codegen.optional(this.packagesEnabled);
    }
    /**
     * Enable pages access control
     * 
     */
    @Export(name="pagesAccessLevel", type=String.class, parameters={})
    private Output<String> pagesAccessLevel;

    /**
     * @return Enable pages access control
     * 
     */
    public Output<String> pagesAccessLevel() {
        return this.pagesAccessLevel;
    }
    /**
     * The path of the repository.
     * 
     */
    @Export(name="path", type=String.class, parameters={})
    private Output</* @Nullable */ String> path;

    /**
     * @return The path of the repository.
     * 
     */
    public Output<Optional<String>> path() {
        return Codegen.optional(this.path);
    }
    /**
     * The path of the repository with namespace.
     * 
     */
    @Export(name="pathWithNamespace", type=String.class, parameters={})
    private Output<String> pathWithNamespace;

    /**
     * @return The path of the repository with namespace.
     * 
     */
    public Output<String> pathWithNamespace() {
        return this.pathWithNamespace;
    }
    /**
     * Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
     * 
     * @deprecated
     * Deprecated in favor of `builds_access_level`
     * 
     */
    @Deprecated /* Deprecated in favor of `builds_access_level` */
    @Export(name="pipelinesEnabled", type=Boolean.class, parameters={})
    private Output<Boolean> pipelinesEnabled;

    /**
     * @return Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
     * 
     */
    public Output<Boolean> pipelinesEnabled() {
        return this.pipelinesEnabled;
    }
    /**
     * Show link to create/view merge request when pushing from the command line
     * 
     */
    @Export(name="printingMergeRequestLinkEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> printingMergeRequestLinkEnabled;

    /**
     * @return Show link to create/view merge request when pushing from the command line
     * 
     */
    public Output<Optional<Boolean>> printingMergeRequestLinkEnabled() {
        return Codegen.optional(this.printingMergeRequestLinkEnabled);
    }
    /**
     * If true, jobs can be viewed by non-project members.
     * 
     */
    @Export(name="publicBuilds", type=Boolean.class, parameters={})
    private Output<Boolean> publicBuilds;

    /**
     * @return If true, jobs can be viewed by non-project members.
     * 
     */
    public Output<Boolean> publicBuilds() {
        return this.publicBuilds;
    }
    /**
     * Push rules for the project.
     * 
     */
    @Export(name="pushRules", type=ProjectPushRules.class, parameters={})
    private Output<ProjectPushRules> pushRules;

    /**
     * @return Push rules for the project.
     * 
     */
    public Output<ProjectPushRules> pushRules() {
        return this.pushRules;
    }
    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     * 
     */
    @Export(name="removeSourceBranchAfterMerge", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> removeSourceBranchAfterMerge;

    /**
     * @return Enable `Delete source branch` option by default for all new merge requests.
     * 
     */
    public Output<Optional<Boolean>> removeSourceBranchAfterMerge() {
        return Codegen.optional(this.removeSourceBranchAfterMerge);
    }
    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="repositoryAccessLevel", type=String.class, parameters={})
    private Output<String> repositoryAccessLevel;

    /**
     * @return Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> repositoryAccessLevel() {
        return this.repositoryAccessLevel;
    }
    /**
     * Which storage shard the repository is on. (administrator only)
     * 
     */
    @Export(name="repositoryStorage", type=String.class, parameters={})
    private Output<String> repositoryStorage;

    /**
     * @return Which storage shard the repository is on. (administrator only)
     * 
     */
    public Output<String> repositoryStorage() {
        return this.repositoryStorage;
    }
    /**
     * Allow users to request member access.
     * 
     */
    @Export(name="requestAccessEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> requestAccessEnabled;

    /**
     * @return Allow users to request member access.
     * 
     */
    public Output<Optional<Boolean>> requestAccessEnabled() {
        return Codegen.optional(this.requestAccessEnabled);
    }
    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="requirementsAccessLevel", type=String.class, parameters={})
    private Output<String> requirementsAccessLevel;

    /**
     * @return Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> requirementsAccessLevel() {
        return this.requirementsAccessLevel;
    }
    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     * 
     */
    @Export(name="resolveOutdatedDiffDiscussions", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> resolveOutdatedDiffDiscussions;

    /**
     * @return Automatically resolve merge request diffs discussions on lines changed with a push.
     * 
     */
    public Output<Optional<Boolean>> resolveOutdatedDiffDiscussions() {
        return Codegen.optional(this.resolveOutdatedDiffDiscussions);
    }
    /**
     * Registration token to use during runner setup.
     * 
     */
    @Export(name="runnersToken", type=String.class, parameters={})
    private Output<String> runnersToken;

    /**
     * @return Registration token to use during runner setup.
     * 
     */
    public Output<String> runnersToken() {
        return this.runnersToken;
    }
    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="securityAndComplianceAccessLevel", type=String.class, parameters={})
    private Output<String> securityAndComplianceAccessLevel;

    /**
     * @return Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> securityAndComplianceAccessLevel() {
        return this.securityAndComplianceAccessLevel;
    }
    /**
     * Enable shared runners for this project.
     * 
     */
    @Export(name="sharedRunnersEnabled", type=Boolean.class, parameters={})
    private Output<Boolean> sharedRunnersEnabled;

    /**
     * @return Enable shared runners for this project.
     * 
     */
    public Output<Boolean> sharedRunnersEnabled() {
        return this.sharedRunnersEnabled;
    }
    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     * 
     */
    @Export(name="skipWaitForDefaultBranchProtection", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> skipWaitForDefaultBranchProtection;

    /**
     * @return If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     * 
     */
    public Output<Optional<Boolean>> skipWaitForDefaultBranchProtection() {
        return Codegen.optional(this.skipWaitForDefaultBranchProtection);
    }
    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="snippetsAccessLevel", type=String.class, parameters={})
    private Output<String> snippetsAccessLevel;

    /**
     * @return Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> snippetsAccessLevel() {
        return this.snippetsAccessLevel;
    }
    /**
     * Enable snippets for the project.
     * 
     */
    @Export(name="snippetsEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> snippetsEnabled;

    /**
     * @return Enable snippets for the project.
     * 
     */
    public Output<Optional<Boolean>> snippetsEnabled() {
        return Codegen.optional(this.snippetsEnabled);
    }
    /**
     * Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
     * 
     */
    @Export(name="squashCommitTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> squashCommitTemplate;

    /**
     * @return Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
     * 
     */
    public Output<Optional<String>> squashCommitTemplate() {
        return Codegen.optional(this.squashCommitTemplate);
    }
    /**
     * Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab &gt;= 14.1]
     * 
     */
    @Export(name="squashOption", type=String.class, parameters={})
    private Output</* @Nullable */ String> squashOption;

    /**
     * @return Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab &gt;= 14.1]
     * 
     */
    public Output<Optional<String>> squashOption() {
        return Codegen.optional(this.squashOption);
    }
    /**
     * URL that can be provided to `git clone` to clone the
     * 
     */
    @Export(name="sshUrlToRepo", type=String.class, parameters={})
    private Output<String> sshUrlToRepo;

    /**
     * @return URL that can be provided to `git clone` to clone the
     * 
     */
    public Output<String> sshUrlToRepo() {
        return this.sshUrlToRepo;
    }
    /**
     * The commit message used to apply merge request suggestions.
     * 
     */
    @Export(name="suggestionCommitMessage", type=String.class, parameters={})
    private Output</* @Nullable */ String> suggestionCommitMessage;

    /**
     * @return The commit message used to apply merge request suggestions.
     * 
     */
    public Output<Optional<String>> suggestionCommitMessage() {
        return Codegen.optional(this.suggestionCommitMessage);
    }
    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output<List<String>> tags;

    /**
     * @return The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }
    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
     * 
     */
    @Export(name="templateName", type=String.class, parameters={})
    private Output</* @Nullable */ String> templateName;

    /**
     * @return When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
     * 
     */
    public Output<Optional<String>> templateName() {
        return Codegen.optional(this.templateName);
    }
    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     * 
     */
    @Export(name="templateProjectId", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> templateProjectId;

    /**
     * @return When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     * 
     */
    public Output<Optional<Integer>> templateProjectId() {
        return Codegen.optional(this.templateProjectId);
    }
    /**
     * The list of topics for the project.
     * 
     */
    @Export(name="topics", type=List.class, parameters={String.class})
    private Output<List<String>> topics;

    /**
     * @return The list of topics for the project.
     * 
     */
    public Output<List<String>> topics() {
        return this.topics;
    }
    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     * 
     */
    @Export(name="useCustomTemplate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useCustomTemplate;

    /**
     * @return Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     * 
     */
    public Output<Optional<Boolean>> useCustomTemplate() {
        return Codegen.optional(this.useCustomTemplate);
    }
    /**
     * Set to `public` to create a public project.
     * 
     */
    @Export(name="visibilityLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> visibilityLevel;

    /**
     * @return Set to `public` to create a public project.
     * 
     */
    public Output<Optional<String>> visibilityLevel() {
        return Codegen.optional(this.visibilityLevel);
    }
    /**
     * URL that can be used to find the project in a browser.
     * 
     */
    @Export(name="webUrl", type=String.class, parameters={})
    private Output<String> webUrl;

    /**
     * @return URL that can be used to find the project in a browser.
     * 
     */
    public Output<String> webUrl() {
        return this.webUrl;
    }
    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Export(name="wikiAccessLevel", type=String.class, parameters={})
    private Output<String> wikiAccessLevel;

    /**
     * @return Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Output<String> wikiAccessLevel() {
        return this.wikiAccessLevel;
    }
    /**
     * Enable wiki for the project.
     * 
     */
    @Export(name="wikiEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> wikiEnabled;

    /**
     * @return Enable wiki for the project.
     * 
     */
    public Output<Optional<Boolean>> wikiEnabled() {
        return Codegen.optional(this.wikiEnabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Project(String name) {
        this(name, ProjectArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Project(String name, @Nullable ProjectArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Project(String name, @Nullable ProjectArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/project:Project", name, args == null ? ProjectArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Project(String name, Output<String> id, @Nullable ProjectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/project:Project", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "runnersToken"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Project get(String name, Output<String> id, @Nullable ProjectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Project(name, id, state, options);
    }
}
