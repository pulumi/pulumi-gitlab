// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.ProjectTagCommitArgs;
import com.pulumi.gitlab.inputs.ProjectTagReleaseArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectTagState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectTagState Empty = new ProjectTagState();

    /**
     * The commit associated with the tag.
     * 
     */
    @Import(name="commits")
    private @Nullable Output<List<ProjectTagCommitArgs>> commits;

    /**
     * @return The commit associated with the tag.
     * 
     */
    public Optional<Output<List<ProjectTagCommitArgs>>> commits() {
        return Optional.ofNullable(this.commits);
    }

    /**
     * The message of the annotated tag.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return The message of the annotated tag.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The name of a tag.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of a tag.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Bool, true if tag has tag protection.
     * 
     */
    @Import(name="protected")
    private @Nullable Output<Boolean> protected_;

    /**
     * @return Bool, true if tag has tag protection.
     * 
     */
    public Optional<Output<Boolean>> protected_() {
        return Optional.ofNullable(this.protected_);
    }

    /**
     * Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * The release associated with the tag.
     * 
     */
    @Import(name="releases")
    private @Nullable Output<List<ProjectTagReleaseArgs>> releases;

    /**
     * @return The release associated with the tag.
     * 
     */
    public Optional<Output<List<ProjectTagReleaseArgs>>> releases() {
        return Optional.ofNullable(this.releases);
    }

    /**
     * The unique id assigned to the commit by Gitlab.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The unique id assigned to the commit by Gitlab.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private ProjectTagState() {}

    private ProjectTagState(ProjectTagState $) {
        this.commits = $.commits;
        this.message = $.message;
        this.name = $.name;
        this.project = $.project;
        this.protected_ = $.protected_;
        this.ref = $.ref;
        this.releases = $.releases;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectTagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectTagState $;

        public Builder() {
            $ = new ProjectTagState();
        }

        public Builder(ProjectTagState defaults) {
            $ = new ProjectTagState(Objects.requireNonNull(defaults));
        }

        /**
         * @param commits The commit associated with the tag.
         * 
         * @return builder
         * 
         */
        public Builder commits(@Nullable Output<List<ProjectTagCommitArgs>> commits) {
            $.commits = commits;
            return this;
        }

        /**
         * @param commits The commit associated with the tag.
         * 
         * @return builder
         * 
         */
        public Builder commits(List<ProjectTagCommitArgs> commits) {
            return commits(Output.of(commits));
        }

        /**
         * @param commits The commit associated with the tag.
         * 
         * @return builder
         * 
         */
        public Builder commits(ProjectTagCommitArgs... commits) {
            return commits(List.of(commits));
        }

        /**
         * @param message The message of the annotated tag.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message The message of the annotated tag.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param name The name of a tag.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of a tag.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protected_ Bool, true if tag has tag protection.
         * 
         * @return builder
         * 
         */
        public Builder protected_(@Nullable Output<Boolean> protected_) {
            $.protected_ = protected_;
            return this;
        }

        /**
         * @param protected_ Bool, true if tag has tag protection.
         * 
         * @return builder
         * 
         */
        public Builder protected_(Boolean protected_) {
            return protected_(Output.of(protected_));
        }

        /**
         * @param ref Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param releases The release associated with the tag.
         * 
         * @return builder
         * 
         */
        public Builder releases(@Nullable Output<List<ProjectTagReleaseArgs>> releases) {
            $.releases = releases;
            return this;
        }

        /**
         * @param releases The release associated with the tag.
         * 
         * @return builder
         * 
         */
        public Builder releases(List<ProjectTagReleaseArgs> releases) {
            return releases(Output.of(releases));
        }

        /**
         * @param releases The release associated with the tag.
         * 
         * @return builder
         * 
         */
        public Builder releases(ProjectTagReleaseArgs... releases) {
            return releases(List.of(releases));
        }

        /**
         * @param target The unique id assigned to the commit by Gitlab.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The unique id assigned to the commit by Gitlab.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public ProjectTagState build() {
            return $;
        }
    }

}
