// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectIntegrationYoutrackArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectIntegrationYoutrackState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectIntegrationYoutrack` resource manages the lifecycle of a project integration with YouTrack.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#youtrack)
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.ProjectIntegrationYoutrack;
 * import com.pulumi.gitlab.ProjectIntegrationYoutrackArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myProject = new Project("myProject", ProjectArgs.builder()
 *             .name("my_project")
 *             .description("My project.")
 *             .visibilityLevel("public")
 *             .build());
 * 
 *         var default_ = new ProjectIntegrationYoutrack("default", ProjectIntegrationYoutrackArgs.builder()
 *             .project(myProject.id())
 *             .issuesUrl("https://my.youtrack.com/issue/:id")
 *             .projectUrl("https://my.youtrack.com")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_youtrack`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_integration_youtrack.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * You can import a gitlab_project_integration_youtrack state using the project ID, for example:
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack default 1
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack")
public class ProjectIntegrationYoutrack extends com.pulumi.resources.CustomResource {
    /**
     * URL to view an issue in the external issue tracker. Must contain :id.
     * 
     */
    @Export(name="issuesUrl", refs={String.class}, tree="[0]")
    private Output<String> issuesUrl;

    /**
     * @return URL to view an issue in the external issue tracker. Must contain :id.
     * 
     */
    public Output<String> issuesUrl() {
        return this.issuesUrl;
    }
    /**
     * ID or namespace of the project you want to activate integration on.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return ID or namespace of the project you want to activate integration on.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * URL of the project in the external issue tracker.
     * 
     */
    @Export(name="projectUrl", refs={String.class}, tree="[0]")
    private Output<String> projectUrl;

    /**
     * @return URL of the project in the external issue tracker.
     * 
     */
    public Output<String> projectUrl() {
        return this.projectUrl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectIntegrationYoutrack(java.lang.String name) {
        this(name, ProjectIntegrationYoutrackArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectIntegrationYoutrack(java.lang.String name, ProjectIntegrationYoutrackArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectIntegrationYoutrack(java.lang.String name, ProjectIntegrationYoutrackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectIntegrationYoutrack(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectIntegrationYoutrackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectIntegrationYoutrackArgs makeArgs(ProjectIntegrationYoutrackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectIntegrationYoutrackArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectIntegrationYoutrack get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectIntegrationYoutrackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectIntegrationYoutrack(name, id, state, options);
    }
}
