// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetReleaseLinkArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetReleaseLinkArgs Empty = new GetReleaseLinkArgs();

    /**
     * The ID of the link.
     * 
     */
    @Import(name="linkId", required=true)
    private Output<Integer> linkId;

    /**
     * @return The ID of the link.
     * 
     */
    public Output<Integer> linkId() {
        return this.linkId;
    }

    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The tag associated with the Release.
     * 
     */
    @Import(name="tagName", required=true)
    private Output<String> tagName;

    /**
     * @return The tag associated with the Release.
     * 
     */
    public Output<String> tagName() {
        return this.tagName;
    }

    private GetReleaseLinkArgs() {}

    private GetReleaseLinkArgs(GetReleaseLinkArgs $) {
        this.linkId = $.linkId;
        this.project = $.project;
        this.tagName = $.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetReleaseLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetReleaseLinkArgs $;

        public Builder() {
            $ = new GetReleaseLinkArgs();
        }

        public Builder(GetReleaseLinkArgs defaults) {
            $ = new GetReleaseLinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param linkId The ID of the link.
         * 
         * @return builder
         * 
         */
        public Builder linkId(Output<Integer> linkId) {
            $.linkId = linkId;
            return this;
        }

        /**
         * @param linkId The ID of the link.
         * 
         * @return builder
         * 
         */
        public Builder linkId(Integer linkId) {
            return linkId(Output.of(linkId));
        }

        /**
         * @param project The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param tagName The tag associated with the Release.
         * 
         * @return builder
         * 
         */
        public Builder tagName(Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        /**
         * @param tagName The tag associated with the Release.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        public GetReleaseLinkArgs build() {
            if ($.linkId == null) {
                throw new MissingRequiredPropertyException("GetReleaseLinkArgs", "linkId");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetReleaseLinkArgs", "project");
            }
            if ($.tagName == null) {
                throw new MissingRequiredPropertyException("GetReleaseLinkArgs", "tagName");
            }
            return $;
        }
    }

}
