// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ServiceEmailsOnPushArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ServiceEmailsOnPushState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.ServiceEmailsOnPush` resource allows to manage the lifecycle of a project integration with Emails on Push Service.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#emails-on-push)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.ServiceEmailsOnPush;
 * import com.pulumi.gitlab.ServiceEmailsOnPushArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var awesomeProject = new Project(&#34;awesomeProject&#34;, ProjectArgs.builder()        
 *             .description(&#34;My awesome project.&#34;)
 *             .visibilityLevel(&#34;public&#34;)
 *             .build());
 * 
 *         var emails = new ServiceEmailsOnPush(&#34;emails&#34;, ServiceEmailsOnPushArgs.builder()        
 *             .project(awesomeProject.id())
 *             .recipients(&#34;myrecipient@example.com myotherrecipient@example.com&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * You can import a gitlab_service_emails_on_push state using the project ID, e.g.
 * 
 * ```sh
 *  $ pulumi import gitlab:index/serviceEmailsOnPush:ServiceEmailsOnPush emails 1
 * ```
 * 
 */
@ResourceType(type="gitlab:index/serviceEmailsOnPush:ServiceEmailsOnPush")
public class ServiceEmailsOnPush extends com.pulumi.resources.CustomResource {
    /**
     * Whether the integration is active.
     * 
     */
    @Export(name="active", type=Boolean.class, parameters={})
    private Output<Boolean> active;

    /**
     * @return Whether the integration is active.
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }
    /**
     * Branches to send notifications for. Valid options are `all`, `default`, `protected`, `default_and_protected`. Notifications are always fired for tag pushes.
     * 
     */
    @Export(name="branchesToBeNotified", type=String.class, parameters={})
    private Output</* @Nullable */ String> branchesToBeNotified;

    /**
     * @return Branches to send notifications for. Valid options are `all`, `default`, `protected`, `default_and_protected`. Notifications are always fired for tag pushes.
     * 
     */
    public Output<Optional<String>> branchesToBeNotified() {
        return Codegen.optional(this.branchesToBeNotified);
    }
    /**
     * The ISO8601 date/time that this integration was activated at in UTC.
     * 
     */
    @Export(name="createdAt", type=String.class, parameters={})
    private Output<String> createdAt;

    /**
     * @return The ISO8601 date/time that this integration was activated at in UTC.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Disable code diffs.
     * 
     */
    @Export(name="disableDiffs", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disableDiffs;

    /**
     * @return Disable code diffs.
     * 
     */
    public Output<Optional<Boolean>> disableDiffs() {
        return Codegen.optional(this.disableDiffs);
    }
    /**
     * ID or full-path of the project you want to activate integration on.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return ID or full-path of the project you want to activate integration on.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Enable notifications for push events.
     * 
     */
    @Export(name="pushEvents", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> pushEvents;

    /**
     * @return Enable notifications for push events.
     * 
     */
    public Output<Optional<Boolean>> pushEvents() {
        return Codegen.optional(this.pushEvents);
    }
    /**
     * Emails separated by whitespace.
     * 
     */
    @Export(name="recipients", type=String.class, parameters={})
    private Output<String> recipients;

    /**
     * @return Emails separated by whitespace.
     * 
     */
    public Output<String> recipients() {
        return this.recipients;
    }
    /**
     * Send from committer.
     * 
     */
    @Export(name="sendFromCommitterEmail", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> sendFromCommitterEmail;

    /**
     * @return Send from committer.
     * 
     */
    public Output<Optional<Boolean>> sendFromCommitterEmail() {
        return Codegen.optional(this.sendFromCommitterEmail);
    }
    /**
     * The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
     * 
     */
    @Export(name="slug", type=String.class, parameters={})
    private Output<String> slug;

    /**
     * @return The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
     * 
     */
    public Output<String> slug() {
        return this.slug;
    }
    /**
     * Enable notifications for tag push events.
     * 
     */
    @Export(name="tagPushEvents", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> tagPushEvents;

    /**
     * @return Enable notifications for tag push events.
     * 
     */
    public Output<Optional<Boolean>> tagPushEvents() {
        return Codegen.optional(this.tagPushEvents);
    }
    /**
     * Title of the integration.
     * 
     */
    @Export(name="title", type=String.class, parameters={})
    private Output<String> title;

    /**
     * @return Title of the integration.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * The ISO8601 date/time that this integration was last updated at in UTC.
     * 
     */
    @Export(name="updatedAt", type=String.class, parameters={})
    private Output<String> updatedAt;

    /**
     * @return The ISO8601 date/time that this integration was last updated at in UTC.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceEmailsOnPush(String name) {
        this(name, ServiceEmailsOnPushArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceEmailsOnPush(String name, ServiceEmailsOnPushArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceEmailsOnPush(String name, ServiceEmailsOnPushArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/serviceEmailsOnPush:ServiceEmailsOnPush", name, args == null ? ServiceEmailsOnPushArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServiceEmailsOnPush(String name, Output<String> id, @Nullable ServiceEmailsOnPushState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/serviceEmailsOnPush:ServiceEmailsOnPush", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceEmailsOnPush get(String name, Output<String> id, @Nullable ServiceEmailsOnPushState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceEmailsOnPush(name, id, state, options);
    }
}
