// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectContainerRepositoryProtectionArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectContainerRepositoryProtectionState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectContainerRepositoryProtection` resource allows managing the lifecycle of a container repository protection rule.
 * 
 * You can use a wildcard (*) to protect multiple container repositories with the same container protection rule.
 * You can apply several protection rules to the same container repository. A container repository is protected if at least one protection rule matches.
 * 
 * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/container_repository_protection_rules/)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.ProjectContainerRepositoryProtection;
 * import com.pulumi.gitlab.ProjectContainerRepositoryProtectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var this_ = new ProjectContainerRepositoryProtection("this", ProjectContainerRepositoryProtectionArgs.builder()
 *             .project("123")
 *             .repositoryPathPattern("my_namespace/project*")
 *             .minimumAccessLevelForPush("owner")
 *             .minimumAccessLevelForDelete("admin")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_container_repository_protection`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_container_repository_protection.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab project container repository protection rules can be imported using an id made up of `&lt;project_id&gt;:&lt;protection_rule_id&gt;`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection this 123:321
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection")
public class ProjectContainerRepositoryProtection extends com.pulumi.resources.CustomResource {
    /**
     * Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
     * 
     */
    @Export(name="minimumAccessLevelForDelete", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> minimumAccessLevelForDelete;

    /**
     * @return Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
     * 
     */
    public Output<Optional<String>> minimumAccessLevelForDelete() {
        return Codegen.optional(this.minimumAccessLevelForDelete);
    }
    /**
     * Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
     * 
     */
    @Export(name="minimumAccessLevelForPush", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> minimumAccessLevelForPush;

    /**
     * @return Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
     * 
     */
    public Output<Optional<String>> minimumAccessLevelForPush() {
        return Codegen.optional(this.minimumAccessLevelForPush);
    }
    /**
     * ID or URL-encoded path of the project.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return ID or URL-encoded path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Unique ID of the protection rule.
     * 
     */
    @Export(name="protectionRuleId", refs={Integer.class}, tree="[0]")
    private Output<Integer> protectionRuleId;

    /**
     * @return Unique ID of the protection rule.
     * 
     */
    public Output<Integer> protectionRuleId() {
        return this.protectionRuleId;
    }
    /**
     * Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project&#39;s full path
     * 
     */
    @Export(name="repositoryPathPattern", refs={String.class}, tree="[0]")
    private Output<String> repositoryPathPattern;

    /**
     * @return Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project&#39;s full path
     * 
     */
    public Output<String> repositoryPathPattern() {
        return this.repositoryPathPattern;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectContainerRepositoryProtection(java.lang.String name) {
        this(name, ProjectContainerRepositoryProtectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectContainerRepositoryProtection(java.lang.String name, ProjectContainerRepositoryProtectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectContainerRepositoryProtection(java.lang.String name, ProjectContainerRepositoryProtectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectContainerRepositoryProtection(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectContainerRepositoryProtectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectContainerRepositoryProtectionArgs makeArgs(ProjectContainerRepositoryProtectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectContainerRepositoryProtectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectContainerRepositoryProtection get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectContainerRepositoryProtectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectContainerRepositoryProtection(name, id, state, options);
    }
}
