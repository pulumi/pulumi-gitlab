// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetGroupProvisionedUsersProvisionedUserArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupProvisionedUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGroupProvisionedUsersArgs Empty = new GetGroupProvisionedUsersArgs();

    /**
     * Return only active provisioned users.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Return only active provisioned users.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Return only blocked provisioned users.
     * 
     */
    @Import(name="blocked")
    private @Nullable Output<Boolean> blocked;

    /**
     * @return Return only blocked provisioned users.
     * 
     */
    public Optional<Output<Boolean>> blocked() {
        return Optional.ofNullable(this.blocked);
    }

    /**
     * Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    @Import(name="createdAfter")
    private @Nullable Output<String> createdAfter;

    /**
     * @return Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    public Optional<Output<String>> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }

    /**
     * Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    @Import(name="createdBefore")
    private @Nullable Output<String> createdBefore;

    /**
     * @return Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    public Optional<Output<String>> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }

    /**
     * The ID or URL-encoded path of the group.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID or URL-encoded path of the group.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The list of provisioned users.
     * 
     */
    @Import(name="provisionedUsers")
    private @Nullable Output<List<GetGroupProvisionedUsersProvisionedUserArgs>> provisionedUsers;

    /**
     * @return The list of provisioned users.
     * 
     */
    public Optional<Output<List<GetGroupProvisionedUsersProvisionedUserArgs>>> provisionedUsers() {
        return Optional.ofNullable(this.provisionedUsers);
    }

    /**
     * The search query to filter the provisioned users.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return The search query to filter the provisioned users.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * The username of the provisioned user.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username of the provisioned user.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private GetGroupProvisionedUsersArgs() {}

    private GetGroupProvisionedUsersArgs(GetGroupProvisionedUsersArgs $) {
        this.active = $.active;
        this.blocked = $.blocked;
        this.createdAfter = $.createdAfter;
        this.createdBefore = $.createdBefore;
        this.id = $.id;
        this.provisionedUsers = $.provisionedUsers;
        this.search = $.search;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupProvisionedUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupProvisionedUsersArgs $;

        public Builder() {
            $ = new GetGroupProvisionedUsersArgs();
        }

        public Builder(GetGroupProvisionedUsersArgs defaults) {
            $ = new GetGroupProvisionedUsersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Return only active provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Return only active provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param blocked Return only blocked provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder blocked(@Nullable Output<Boolean> blocked) {
            $.blocked = blocked;
            return this;
        }

        /**
         * @param blocked Return only blocked provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder blocked(Boolean blocked) {
            return blocked(Output.of(blocked));
        }

        /**
         * @param createdAfter Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(@Nullable Output<String> createdAfter) {
            $.createdAfter = createdAfter;
            return this;
        }

        /**
         * @param createdAfter Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(String createdAfter) {
            return createdAfter(Output.of(createdAfter));
        }

        /**
         * @param createdBefore Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(@Nullable Output<String> createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        /**
         * @param createdBefore Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(String createdBefore) {
            return createdBefore(Output.of(createdBefore));
        }

        /**
         * @param id The ID or URL-encoded path of the group.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID or URL-encoded path of the group.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param provisionedUsers The list of provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder provisionedUsers(@Nullable Output<List<GetGroupProvisionedUsersProvisionedUserArgs>> provisionedUsers) {
            $.provisionedUsers = provisionedUsers;
            return this;
        }

        /**
         * @param provisionedUsers The list of provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder provisionedUsers(List<GetGroupProvisionedUsersProvisionedUserArgs> provisionedUsers) {
            return provisionedUsers(Output.of(provisionedUsers));
        }

        /**
         * @param provisionedUsers The list of provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder provisionedUsers(GetGroupProvisionedUsersProvisionedUserArgs... provisionedUsers) {
            return provisionedUsers(List.of(provisionedUsers));
        }

        /**
         * @param search The search query to filter the provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search The search query to filter the provisioned users.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param username The username of the provisioned user.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the provisioned user.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GetGroupProvisionedUsersArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetGroupProvisionedUsersArgs", "id");
            }
            return $;
        }
    }

}
