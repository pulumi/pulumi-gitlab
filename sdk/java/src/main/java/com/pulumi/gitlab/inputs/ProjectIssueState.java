// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.ProjectIssueTaskCompletionStatusArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectIssueState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIssueState Empty = new ProjectIssueState();

    /**
     * The IDs of the users to assign the issue to.
     * 
     */
    @Import(name="assigneeIds")
    private @Nullable Output<List<Integer>> assigneeIds;

    /**
     * @return The IDs of the users to assign the issue to.
     * 
     */
    public Optional<Output<List<Integer>>> assigneeIds() {
        return Optional.ofNullable(this.assigneeIds);
    }

    /**
     * The ID of the author of the issue. Use `gitlab.User` data source to get more information about the user.
     * 
     */
    @Import(name="authorId")
    private @Nullable Output<Integer> authorId;

    /**
     * @return The ID of the author of the issue. Use `gitlab.User` data source to get more information about the user.
     * 
     */
    public Optional<Output<Integer>> authorId() {
        return Optional.ofNullable(this.authorId);
    }

    /**
     * When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    @Import(name="closedAt")
    private @Nullable Output<String> closedAt;

    /**
     * @return When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    public Optional<Output<String>> closedAt() {
        return Optional.ofNullable(this.closedAt);
    }

    /**
     * The ID of the user that closed the issue. Use `gitlab.User` data source to get more information about the user.
     * 
     */
    @Import(name="closedByUserId")
    private @Nullable Output<Integer> closedByUserId;

    /**
     * @return The ID of the user that closed the issue. Use `gitlab.User` data source to get more information about the user.
     * 
     */
    public Optional<Output<Integer>> closedByUserId() {
        return Optional.ofNullable(this.closedByUserId);
    }

    /**
     * Set an issue to be confidential.
     * 
     */
    @Import(name="confidential")
    private @Nullable Output<Boolean> confidential;

    /**
     * @return Set an issue to be confidential.
     * 
     */
    public Optional<Output<Boolean>> confidential() {
        return Optional.ofNullable(this.confidential);
    }

    /**
     * When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Whether the issue is deleted instead of closed during destroy.
     * 
     */
    @Import(name="deleteOnDestroy")
    private @Nullable Output<Boolean> deleteOnDestroy;

    /**
     * @return Whether the issue is deleted instead of closed during destroy.
     * 
     */
    public Optional<Output<Boolean>> deleteOnDestroy() {
        return Optional.ofNullable(this.deleteOnDestroy);
    }

    /**
     * The description of an issue. Limited to 1,048,576 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of an issue. Limited to 1,048,576 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the issue is locked for discussions or not.
     * 
     */
    @Import(name="discussionLocked")
    private @Nullable Output<Boolean> discussionLocked;

    /**
     * @return Whether the issue is locked for discussions or not.
     * 
     */
    public Optional<Output<Boolean>> discussionLocked() {
        return Optional.ofNullable(this.discussionLocked);
    }

    /**
     * The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
     * 
     */
    @Import(name="discussionToResolve")
    private @Nullable Output<String> discussionToResolve;

    /**
     * @return The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
     * 
     */
    public Optional<Output<String>> discussionToResolve() {
        return Optional.ofNullable(this.discussionToResolve);
    }

    /**
     * The number of downvotes the issue has received.
     * 
     */
    @Import(name="downvotes")
    private @Nullable Output<Integer> downvotes;

    /**
     * @return The number of downvotes the issue has received.
     * 
     */
    public Optional<Output<Integer>> downvotes() {
        return Optional.ofNullable(this.downvotes);
    }

    /**
     * The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    @Import(name="dueDate")
    private @Nullable Output<String> dueDate;

    /**
     * @return The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
     * 
     */
    public Optional<Output<String>> dueDate() {
        return Optional.ofNullable(this.dueDate);
    }

    /**
     * ID of the epic to add the issue to. Valid values are greater than or equal to 0.
     * 
     */
    @Import(name="epicId")
    private @Nullable Output<Integer> epicId;

    /**
     * @return ID of the epic to add the issue to. Valid values are greater than or equal to 0.
     * 
     */
    public Optional<Output<Integer>> epicId() {
        return Optional.ofNullable(this.epicId);
    }

    /**
     * The ID of the epic issue.
     * 
     */
    @Import(name="epicIssueId")
    private @Nullable Output<Integer> epicIssueId;

    /**
     * @return The ID of the epic issue.
     * 
     */
    public Optional<Output<Integer>> epicIssueId() {
        return Optional.ofNullable(this.epicIssueId);
    }

    /**
     * The external ID of the issue.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return The external ID of the issue.
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * The human-readable time estimate of the issue.
     * 
     */
    @Import(name="humanTimeEstimate")
    private @Nullable Output<String> humanTimeEstimate;

    /**
     * @return The human-readable time estimate of the issue.
     * 
     */
    public Optional<Output<String>> humanTimeEstimate() {
        return Optional.ofNullable(this.humanTimeEstimate);
    }

    /**
     * The human-readable total time spent of the issue.
     * 
     */
    @Import(name="humanTotalTimeSpent")
    private @Nullable Output<String> humanTotalTimeSpent;

    /**
     * @return The human-readable total time spent of the issue.
     * 
     */
    public Optional<Output<String>> humanTotalTimeSpent() {
        return Optional.ofNullable(this.humanTotalTimeSpent);
    }

    /**
     * The internal ID of the project&#39;s issue.
     * 
     */
    @Import(name="iid")
    private @Nullable Output<Integer> iid;

    /**
     * @return The internal ID of the project&#39;s issue.
     * 
     */
    public Optional<Output<Integer>> iid() {
        return Optional.ofNullable(this.iid);
    }

    /**
     * The instance-wide ID of the issue.
     * 
     */
    @Import(name="issueId")
    private @Nullable Output<Integer> issueId;

    /**
     * @return The instance-wide ID of the issue.
     * 
     */
    public Optional<Output<Integer>> issueId() {
        return Optional.ofNullable(this.issueId);
    }

    /**
     * The ID of the issue link.
     * 
     */
    @Import(name="issueLinkId")
    private @Nullable Output<Integer> issueLinkId;

    /**
     * @return The ID of the issue link.
     * 
     */
    public Optional<Output<Integer>> issueLinkId() {
        return Optional.ofNullable(this.issueLinkId);
    }

    /**
     * The type of issue. Valid values are: `issue`, `incident`, `test_case`.
     * 
     */
    @Import(name="issueType")
    private @Nullable Output<String> issueType;

    /**
     * @return The type of issue. Valid values are: `issue`, `incident`, `test_case`.
     * 
     */
    public Optional<Output<String>> issueType() {
        return Optional.ofNullable(this.issueType);
    }

    /**
     * The labels of an issue.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return The labels of an issue.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The links of the issue.
     * 
     */
    @Import(name="links")
    private @Nullable Output<Map<String,String>> links;

    /**
     * @return The links of the issue.
     * 
     */
    public Optional<Output<Map<String,String>>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
     * 
     */
    @Import(name="mergeRequestToResolveDiscussionsOf")
    private @Nullable Output<Integer> mergeRequestToResolveDiscussionsOf;

    /**
     * @return The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
     * 
     */
    public Optional<Output<Integer>> mergeRequestToResolveDiscussionsOf() {
        return Optional.ofNullable(this.mergeRequestToResolveDiscussionsOf);
    }

    /**
     * The number of merge requests associated with the issue.
     * 
     */
    @Import(name="mergeRequestsCount")
    private @Nullable Output<Integer> mergeRequestsCount;

    /**
     * @return The number of merge requests associated with the issue.
     * 
     */
    public Optional<Output<Integer>> mergeRequestsCount() {
        return Optional.ofNullable(this.mergeRequestsCount);
    }

    /**
     * The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
     * 
     */
    @Import(name="milestoneId")
    private @Nullable Output<Integer> milestoneId;

    /**
     * @return The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
     * 
     */
    public Optional<Output<Integer>> milestoneId() {
        return Optional.ofNullable(this.milestoneId);
    }

    /**
     * The ID of the issue that was moved to.
     * 
     */
    @Import(name="movedToId")
    private @Nullable Output<Integer> movedToId;

    /**
     * @return The ID of the issue that was moved to.
     * 
     */
    public Optional<Output<Integer>> movedToId() {
        return Optional.ofNullable(this.movedToId);
    }

    /**
     * The name or ID of the project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The name or ID of the project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The references of the issue.
     * 
     */
    @Import(name="references")
    private @Nullable Output<Map<String,String>> references;

    /**
     * @return The references of the issue.
     * 
     */
    public Optional<Output<Map<String,String>>> references() {
        return Optional.ofNullable(this.references);
    }

    /**
     * The state of the issue. Valid values are: `opened`, `closed`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the issue. Valid values are: `opened`, `closed`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Whether the authenticated user is subscribed to the issue or not.
     * 
     */
    @Import(name="subscribed")
    private @Nullable Output<Boolean> subscribed;

    /**
     * @return Whether the authenticated user is subscribed to the issue or not.
     * 
     */
    public Optional<Output<Boolean>> subscribed() {
        return Optional.ofNullable(this.subscribed);
    }

    /**
     * The task completion status. It&#39;s always a one element list.
     * 
     */
    @Import(name="taskCompletionStatuses")
    private @Nullable Output<List<ProjectIssueTaskCompletionStatusArgs>> taskCompletionStatuses;

    /**
     * @return The task completion status. It&#39;s always a one element list.
     * 
     */
    public Optional<Output<List<ProjectIssueTaskCompletionStatusArgs>>> taskCompletionStatuses() {
        return Optional.ofNullable(this.taskCompletionStatuses);
    }

    /**
     * The time estimate of the issue.
     * 
     */
    @Import(name="timeEstimate")
    private @Nullable Output<Integer> timeEstimate;

    /**
     * @return The time estimate of the issue.
     * 
     */
    public Optional<Output<Integer>> timeEstimate() {
        return Optional.ofNullable(this.timeEstimate);
    }

    /**
     * The title of the issue.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the issue.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The total time spent of the issue.
     * 
     */
    @Import(name="totalTimeSpent")
    private @Nullable Output<Integer> totalTimeSpent;

    /**
     * @return The total time spent of the issue.
     * 
     */
    public Optional<Output<Integer>> totalTimeSpent() {
        return Optional.ofNullable(this.totalTimeSpent);
    }

    /**
     * When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The number of upvotes the issue has received.
     * 
     */
    @Import(name="upvotes")
    private @Nullable Output<Integer> upvotes;

    /**
     * @return The number of upvotes the issue has received.
     * 
     */
    public Optional<Output<Integer>> upvotes() {
        return Optional.ofNullable(this.upvotes);
    }

    /**
     * The number of user notes on the issue.
     * 
     */
    @Import(name="userNotesCount")
    private @Nullable Output<Integer> userNotesCount;

    /**
     * @return The number of user notes on the issue.
     * 
     */
    public Optional<Output<Integer>> userNotesCount() {
        return Optional.ofNullable(this.userNotesCount);
    }

    /**
     * The web URL of the issue.
     * 
     */
    @Import(name="webUrl")
    private @Nullable Output<String> webUrl;

    /**
     * @return The web URL of the issue.
     * 
     */
    public Optional<Output<String>> webUrl() {
        return Optional.ofNullable(this.webUrl);
    }

    /**
     * The weight of the issue. Valid values are greater than or equal to 0.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return The weight of the issue. Valid values are greater than or equal to 0.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private ProjectIssueState() {}

    private ProjectIssueState(ProjectIssueState $) {
        this.assigneeIds = $.assigneeIds;
        this.authorId = $.authorId;
        this.closedAt = $.closedAt;
        this.closedByUserId = $.closedByUserId;
        this.confidential = $.confidential;
        this.createdAt = $.createdAt;
        this.deleteOnDestroy = $.deleteOnDestroy;
        this.description = $.description;
        this.discussionLocked = $.discussionLocked;
        this.discussionToResolve = $.discussionToResolve;
        this.downvotes = $.downvotes;
        this.dueDate = $.dueDate;
        this.epicId = $.epicId;
        this.epicIssueId = $.epicIssueId;
        this.externalId = $.externalId;
        this.humanTimeEstimate = $.humanTimeEstimate;
        this.humanTotalTimeSpent = $.humanTotalTimeSpent;
        this.iid = $.iid;
        this.issueId = $.issueId;
        this.issueLinkId = $.issueLinkId;
        this.issueType = $.issueType;
        this.labels = $.labels;
        this.links = $.links;
        this.mergeRequestToResolveDiscussionsOf = $.mergeRequestToResolveDiscussionsOf;
        this.mergeRequestsCount = $.mergeRequestsCount;
        this.milestoneId = $.milestoneId;
        this.movedToId = $.movedToId;
        this.project = $.project;
        this.references = $.references;
        this.state = $.state;
        this.subscribed = $.subscribed;
        this.taskCompletionStatuses = $.taskCompletionStatuses;
        this.timeEstimate = $.timeEstimate;
        this.title = $.title;
        this.totalTimeSpent = $.totalTimeSpent;
        this.updatedAt = $.updatedAt;
        this.upvotes = $.upvotes;
        this.userNotesCount = $.userNotesCount;
        this.webUrl = $.webUrl;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIssueState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIssueState $;

        public Builder() {
            $ = new ProjectIssueState();
        }

        public Builder(ProjectIssueState defaults) {
            $ = new ProjectIssueState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assigneeIds The IDs of the users to assign the issue to.
         * 
         * @return builder
         * 
         */
        public Builder assigneeIds(@Nullable Output<List<Integer>> assigneeIds) {
            $.assigneeIds = assigneeIds;
            return this;
        }

        /**
         * @param assigneeIds The IDs of the users to assign the issue to.
         * 
         * @return builder
         * 
         */
        public Builder assigneeIds(List<Integer> assigneeIds) {
            return assigneeIds(Output.of(assigneeIds));
        }

        /**
         * @param assigneeIds The IDs of the users to assign the issue to.
         * 
         * @return builder
         * 
         */
        public Builder assigneeIds(Integer... assigneeIds) {
            return assigneeIds(List.of(assigneeIds));
        }

        /**
         * @param authorId The ID of the author of the issue. Use `gitlab.User` data source to get more information about the user.
         * 
         * @return builder
         * 
         */
        public Builder authorId(@Nullable Output<Integer> authorId) {
            $.authorId = authorId;
            return this;
        }

        /**
         * @param authorId The ID of the author of the issue. Use `gitlab.User` data source to get more information about the user.
         * 
         * @return builder
         * 
         */
        public Builder authorId(Integer authorId) {
            return authorId(Output.of(authorId));
        }

        /**
         * @param closedAt When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder closedAt(@Nullable Output<String> closedAt) {
            $.closedAt = closedAt;
            return this;
        }

        /**
         * @param closedAt When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder closedAt(String closedAt) {
            return closedAt(Output.of(closedAt));
        }

        /**
         * @param closedByUserId The ID of the user that closed the issue. Use `gitlab.User` data source to get more information about the user.
         * 
         * @return builder
         * 
         */
        public Builder closedByUserId(@Nullable Output<Integer> closedByUserId) {
            $.closedByUserId = closedByUserId;
            return this;
        }

        /**
         * @param closedByUserId The ID of the user that closed the issue. Use `gitlab.User` data source to get more information about the user.
         * 
         * @return builder
         * 
         */
        public Builder closedByUserId(Integer closedByUserId) {
            return closedByUserId(Output.of(closedByUserId));
        }

        /**
         * @param confidential Set an issue to be confidential.
         * 
         * @return builder
         * 
         */
        public Builder confidential(@Nullable Output<Boolean> confidential) {
            $.confidential = confidential;
            return this;
        }

        /**
         * @param confidential Set an issue to be confidential.
         * 
         * @return builder
         * 
         */
        public Builder confidential(Boolean confidential) {
            return confidential(Output.of(confidential));
        }

        /**
         * @param createdAt When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param deleteOnDestroy Whether the issue is deleted instead of closed during destroy.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnDestroy(@Nullable Output<Boolean> deleteOnDestroy) {
            $.deleteOnDestroy = deleteOnDestroy;
            return this;
        }

        /**
         * @param deleteOnDestroy Whether the issue is deleted instead of closed during destroy.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnDestroy(Boolean deleteOnDestroy) {
            return deleteOnDestroy(Output.of(deleteOnDestroy));
        }

        /**
         * @param description The description of an issue. Limited to 1,048,576 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of an issue. Limited to 1,048,576 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discussionLocked Whether the issue is locked for discussions or not.
         * 
         * @return builder
         * 
         */
        public Builder discussionLocked(@Nullable Output<Boolean> discussionLocked) {
            $.discussionLocked = discussionLocked;
            return this;
        }

        /**
         * @param discussionLocked Whether the issue is locked for discussions or not.
         * 
         * @return builder
         * 
         */
        public Builder discussionLocked(Boolean discussionLocked) {
            return discussionLocked(Output.of(discussionLocked));
        }

        /**
         * @param discussionToResolve The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
         * 
         * @return builder
         * 
         */
        public Builder discussionToResolve(@Nullable Output<String> discussionToResolve) {
            $.discussionToResolve = discussionToResolve;
            return this;
        }

        /**
         * @param discussionToResolve The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge*request*to*resolve*discussions_of.
         * 
         * @return builder
         * 
         */
        public Builder discussionToResolve(String discussionToResolve) {
            return discussionToResolve(Output.of(discussionToResolve));
        }

        /**
         * @param downvotes The number of downvotes the issue has received.
         * 
         * @return builder
         * 
         */
        public Builder downvotes(@Nullable Output<Integer> downvotes) {
            $.downvotes = downvotes;
            return this;
        }

        /**
         * @param downvotes The number of downvotes the issue has received.
         * 
         * @return builder
         * 
         */
        public Builder downvotes(Integer downvotes) {
            return downvotes(Output.of(downvotes));
        }

        /**
         * @param dueDate The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(@Nullable Output<String> dueDate) {
            $.dueDate = dueDate;
            return this;
        }

        /**
         * @param dueDate The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(String dueDate) {
            return dueDate(Output.of(dueDate));
        }

        /**
         * @param epicId ID of the epic to add the issue to. Valid values are greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder epicId(@Nullable Output<Integer> epicId) {
            $.epicId = epicId;
            return this;
        }

        /**
         * @param epicId ID of the epic to add the issue to. Valid values are greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder epicId(Integer epicId) {
            return epicId(Output.of(epicId));
        }

        /**
         * @param epicIssueId The ID of the epic issue.
         * 
         * @return builder
         * 
         */
        public Builder epicIssueId(@Nullable Output<Integer> epicIssueId) {
            $.epicIssueId = epicIssueId;
            return this;
        }

        /**
         * @param epicIssueId The ID of the epic issue.
         * 
         * @return builder
         * 
         */
        public Builder epicIssueId(Integer epicIssueId) {
            return epicIssueId(Output.of(epicIssueId));
        }

        /**
         * @param externalId The external ID of the issue.
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId The external ID of the issue.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param humanTimeEstimate The human-readable time estimate of the issue.
         * 
         * @return builder
         * 
         */
        public Builder humanTimeEstimate(@Nullable Output<String> humanTimeEstimate) {
            $.humanTimeEstimate = humanTimeEstimate;
            return this;
        }

        /**
         * @param humanTimeEstimate The human-readable time estimate of the issue.
         * 
         * @return builder
         * 
         */
        public Builder humanTimeEstimate(String humanTimeEstimate) {
            return humanTimeEstimate(Output.of(humanTimeEstimate));
        }

        /**
         * @param humanTotalTimeSpent The human-readable total time spent of the issue.
         * 
         * @return builder
         * 
         */
        public Builder humanTotalTimeSpent(@Nullable Output<String> humanTotalTimeSpent) {
            $.humanTotalTimeSpent = humanTotalTimeSpent;
            return this;
        }

        /**
         * @param humanTotalTimeSpent The human-readable total time spent of the issue.
         * 
         * @return builder
         * 
         */
        public Builder humanTotalTimeSpent(String humanTotalTimeSpent) {
            return humanTotalTimeSpent(Output.of(humanTotalTimeSpent));
        }

        /**
         * @param iid The internal ID of the project&#39;s issue.
         * 
         * @return builder
         * 
         */
        public Builder iid(@Nullable Output<Integer> iid) {
            $.iid = iid;
            return this;
        }

        /**
         * @param iid The internal ID of the project&#39;s issue.
         * 
         * @return builder
         * 
         */
        public Builder iid(Integer iid) {
            return iid(Output.of(iid));
        }

        /**
         * @param issueId The instance-wide ID of the issue.
         * 
         * @return builder
         * 
         */
        public Builder issueId(@Nullable Output<Integer> issueId) {
            $.issueId = issueId;
            return this;
        }

        /**
         * @param issueId The instance-wide ID of the issue.
         * 
         * @return builder
         * 
         */
        public Builder issueId(Integer issueId) {
            return issueId(Output.of(issueId));
        }

        /**
         * @param issueLinkId The ID of the issue link.
         * 
         * @return builder
         * 
         */
        public Builder issueLinkId(@Nullable Output<Integer> issueLinkId) {
            $.issueLinkId = issueLinkId;
            return this;
        }

        /**
         * @param issueLinkId The ID of the issue link.
         * 
         * @return builder
         * 
         */
        public Builder issueLinkId(Integer issueLinkId) {
            return issueLinkId(Output.of(issueLinkId));
        }

        /**
         * @param issueType The type of issue. Valid values are: `issue`, `incident`, `test_case`.
         * 
         * @return builder
         * 
         */
        public Builder issueType(@Nullable Output<String> issueType) {
            $.issueType = issueType;
            return this;
        }

        /**
         * @param issueType The type of issue. Valid values are: `issue`, `incident`, `test_case`.
         * 
         * @return builder
         * 
         */
        public Builder issueType(String issueType) {
            return issueType(Output.of(issueType));
        }

        /**
         * @param labels The labels of an issue.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels of an issue.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels The labels of an issue.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param links The links of the issue.
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable Output<Map<String,String>> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links The links of the issue.
         * 
         * @return builder
         * 
         */
        public Builder links(Map<String,String> links) {
            return links(Output.of(links));
        }

        /**
         * @param mergeRequestToResolveDiscussionsOf The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestToResolveDiscussionsOf(@Nullable Output<Integer> mergeRequestToResolveDiscussionsOf) {
            $.mergeRequestToResolveDiscussionsOf = mergeRequestToResolveDiscussionsOf;
            return this;
        }

        /**
         * @param mergeRequestToResolveDiscussionsOf The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestToResolveDiscussionsOf(Integer mergeRequestToResolveDiscussionsOf) {
            return mergeRequestToResolveDiscussionsOf(Output.of(mergeRequestToResolveDiscussionsOf));
        }

        /**
         * @param mergeRequestsCount The number of merge requests associated with the issue.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsCount(@Nullable Output<Integer> mergeRequestsCount) {
            $.mergeRequestsCount = mergeRequestsCount;
            return this;
        }

        /**
         * @param mergeRequestsCount The number of merge requests associated with the issue.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsCount(Integer mergeRequestsCount) {
            return mergeRequestsCount(Output.of(mergeRequestsCount));
        }

        /**
         * @param milestoneId The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(@Nullable Output<Integer> milestoneId) {
            $.milestoneId = milestoneId;
            return this;
        }

        /**
         * @param milestoneId The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue&#39;s details.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(Integer milestoneId) {
            return milestoneId(Output.of(milestoneId));
        }

        /**
         * @param movedToId The ID of the issue that was moved to.
         * 
         * @return builder
         * 
         */
        public Builder movedToId(@Nullable Output<Integer> movedToId) {
            $.movedToId = movedToId;
            return this;
        }

        /**
         * @param movedToId The ID of the issue that was moved to.
         * 
         * @return builder
         * 
         */
        public Builder movedToId(Integer movedToId) {
            return movedToId(Output.of(movedToId));
        }

        /**
         * @param project The name or ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param references The references of the issue.
         * 
         * @return builder
         * 
         */
        public Builder references(@Nullable Output<Map<String,String>> references) {
            $.references = references;
            return this;
        }

        /**
         * @param references The references of the issue.
         * 
         * @return builder
         * 
         */
        public Builder references(Map<String,String> references) {
            return references(Output.of(references));
        }

        /**
         * @param state The state of the issue. Valid values are: `opened`, `closed`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the issue. Valid values are: `opened`, `closed`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subscribed Whether the authenticated user is subscribed to the issue or not.
         * 
         * @return builder
         * 
         */
        public Builder subscribed(@Nullable Output<Boolean> subscribed) {
            $.subscribed = subscribed;
            return this;
        }

        /**
         * @param subscribed Whether the authenticated user is subscribed to the issue or not.
         * 
         * @return builder
         * 
         */
        public Builder subscribed(Boolean subscribed) {
            return subscribed(Output.of(subscribed));
        }

        /**
         * @param taskCompletionStatuses The task completion status. It&#39;s always a one element list.
         * 
         * @return builder
         * 
         */
        public Builder taskCompletionStatuses(@Nullable Output<List<ProjectIssueTaskCompletionStatusArgs>> taskCompletionStatuses) {
            $.taskCompletionStatuses = taskCompletionStatuses;
            return this;
        }

        /**
         * @param taskCompletionStatuses The task completion status. It&#39;s always a one element list.
         * 
         * @return builder
         * 
         */
        public Builder taskCompletionStatuses(List<ProjectIssueTaskCompletionStatusArgs> taskCompletionStatuses) {
            return taskCompletionStatuses(Output.of(taskCompletionStatuses));
        }

        /**
         * @param taskCompletionStatuses The task completion status. It&#39;s always a one element list.
         * 
         * @return builder
         * 
         */
        public Builder taskCompletionStatuses(ProjectIssueTaskCompletionStatusArgs... taskCompletionStatuses) {
            return taskCompletionStatuses(List.of(taskCompletionStatuses));
        }

        /**
         * @param timeEstimate The time estimate of the issue.
         * 
         * @return builder
         * 
         */
        public Builder timeEstimate(@Nullable Output<Integer> timeEstimate) {
            $.timeEstimate = timeEstimate;
            return this;
        }

        /**
         * @param timeEstimate The time estimate of the issue.
         * 
         * @return builder
         * 
         */
        public Builder timeEstimate(Integer timeEstimate) {
            return timeEstimate(Output.of(timeEstimate));
        }

        /**
         * @param title The title of the issue.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the issue.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param totalTimeSpent The total time spent of the issue.
         * 
         * @return builder
         * 
         */
        public Builder totalTimeSpent(@Nullable Output<Integer> totalTimeSpent) {
            $.totalTimeSpent = totalTimeSpent;
            return this;
        }

        /**
         * @param totalTimeSpent The total time spent of the issue.
         * 
         * @return builder
         * 
         */
        public Builder totalTimeSpent(Integer totalTimeSpent) {
            return totalTimeSpent(Output.of(totalTimeSpent));
        }

        /**
         * @param updatedAt When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param upvotes The number of upvotes the issue has received.
         * 
         * @return builder
         * 
         */
        public Builder upvotes(@Nullable Output<Integer> upvotes) {
            $.upvotes = upvotes;
            return this;
        }

        /**
         * @param upvotes The number of upvotes the issue has received.
         * 
         * @return builder
         * 
         */
        public Builder upvotes(Integer upvotes) {
            return upvotes(Output.of(upvotes));
        }

        /**
         * @param userNotesCount The number of user notes on the issue.
         * 
         * @return builder
         * 
         */
        public Builder userNotesCount(@Nullable Output<Integer> userNotesCount) {
            $.userNotesCount = userNotesCount;
            return this;
        }

        /**
         * @param userNotesCount The number of user notes on the issue.
         * 
         * @return builder
         * 
         */
        public Builder userNotesCount(Integer userNotesCount) {
            return userNotesCount(Output.of(userNotesCount));
        }

        /**
         * @param webUrl The web URL of the issue.
         * 
         * @return builder
         * 
         */
        public Builder webUrl(@Nullable Output<String> webUrl) {
            $.webUrl = webUrl;
            return this;
        }

        /**
         * @param webUrl The web URL of the issue.
         * 
         * @return builder
         * 
         */
        public Builder webUrl(String webUrl) {
            return webUrl(Output.of(webUrl));
        }

        /**
         * @param weight The weight of the issue. Valid values are greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The weight of the issue. Valid values are greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public ProjectIssueState build() {
            return $;
        }
    }

}
