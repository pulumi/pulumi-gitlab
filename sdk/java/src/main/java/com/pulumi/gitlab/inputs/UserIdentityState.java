// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserIdentityState extends com.pulumi.resources.ResourceArgs {

    public static final UserIdentityState Empty = new UserIdentityState();

    /**
     * The external provider name.
     * 
     */
    @Import(name="externalProvider")
    private @Nullable Output<String> externalProvider;

    /**
     * @return The external provider name.
     * 
     */
    public Optional<Output<String>> externalProvider() {
        return Optional.ofNullable(this.externalProvider);
    }

    /**
     * A specific external authentication provider UID.
     * 
     */
    @Import(name="externalUid")
    private @Nullable Output<String> externalUid;

    /**
     * @return A specific external authentication provider UID.
     * 
     */
    public Optional<Output<String>> externalUid() {
        return Optional.ofNullable(this.externalUid);
    }

    /**
     * The GitLab ID of the user.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<Integer> userId;

    /**
     * @return The GitLab ID of the user.
     * 
     */
    public Optional<Output<Integer>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserIdentityState() {}

    private UserIdentityState(UserIdentityState $) {
        this.externalProvider = $.externalProvider;
        this.externalUid = $.externalUid;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserIdentityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserIdentityState $;

        public Builder() {
            $ = new UserIdentityState();
        }

        public Builder(UserIdentityState defaults) {
            $ = new UserIdentityState(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalProvider The external provider name.
         * 
         * @return builder
         * 
         */
        public Builder externalProvider(@Nullable Output<String> externalProvider) {
            $.externalProvider = externalProvider;
            return this;
        }

        /**
         * @param externalProvider The external provider name.
         * 
         * @return builder
         * 
         */
        public Builder externalProvider(String externalProvider) {
            return externalProvider(Output.of(externalProvider));
        }

        /**
         * @param externalUid A specific external authentication provider UID.
         * 
         * @return builder
         * 
         */
        public Builder externalUid(@Nullable Output<String> externalUid) {
            $.externalUid = externalUid;
            return this;
        }

        /**
         * @param externalUid A specific external authentication provider UID.
         * 
         * @return builder
         * 
         */
        public Builder externalUid(String externalUid) {
            return externalUid(Output.of(externalUid));
        }

        /**
         * @param userId The GitLab ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The GitLab ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        public UserIdentityState build() {
            return $;
        }
    }

}
