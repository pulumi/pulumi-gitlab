// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetProjectApprovalRulesApprovalRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetProjectApprovalRulesApprovalRuleArgs Empty = new GetProjectApprovalRulesApprovalRuleArgs();

    /**
     * If true, applies the rule to all protected branches, ignoring the protected branches attribute.
     * 
     */
    @Import(name="appliesToAllProtectedBranches", required=true)
    private Output<Boolean> appliesToAllProtectedBranches;

    /**
     * @return If true, applies the rule to all protected branches, ignoring the protected branches attribute.
     * 
     */
    public Output<Boolean> appliesToAllProtectedBranches() {
        return this.appliesToAllProtectedBranches;
    }

    /**
     * The number of approvals required for this rule.
     * 
     */
    @Import(name="approvalsRequired", required=true)
    private Output<Integer> approvalsRequired;

    /**
     * @return The number of approvals required for this rule.
     * 
     */
    public Output<Integer> approvalsRequired() {
        return this.approvalsRequired;
    }

    /**
     * List of all approver IDs that are eligible to approve this rule.
     * 
     */
    @Import(name="eligibleApproverIds", required=true)
    private Output<List<Integer>> eligibleApproverIds;

    /**
     * @return List of all approver IDs that are eligible to approve this rule.
     * 
     */
    public Output<List<Integer>> eligibleApproverIds() {
        return this.eligibleApproverIds;
    }

    /**
     * List of group IDs that are eligible to approve this rule.
     * 
     */
    @Import(name="groupIds", required=true)
    private Output<List<Integer>> groupIds;

    /**
     * @return List of group IDs that are eligible to approve this rule.
     * 
     */
    public Output<List<Integer>> groupIds() {
        return this.groupIds;
    }

    /**
     * The ID of the approval rule.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The ID of the approval rule.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * The name of the approval rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the approval rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of protected branch IDs that this rule applies to.
     * 
     */
    @Import(name="protectedBranchIds", required=true)
    private Output<List<Integer>> protectedBranchIds;

    /**
     * @return List of protected branch IDs that this rule applies to.
     * 
     */
    public Output<List<Integer>> protectedBranchIds() {
        return this.protectedBranchIds;
    }

    /**
     * The report type. Required when the rule type is `reportApprover`. The supported report types are `licenseScanning` and `codeCoverage`.
     * 
     */
    @Import(name="reportType", required=true)
    private Output<String> reportType;

    /**
     * @return The report type. Required when the rule type is `reportApprover`. The supported report types are `licenseScanning` and `codeCoverage`.
     * 
     */
    public Output<String> reportType() {
        return this.reportType;
    }

    /**
     * The type of the approval rule. Can be `anyApprover`, `regular` or `reportApprover`.
     * 
     */
    @Import(name="ruleType", required=true)
    private Output<String> ruleType;

    /**
     * @return The type of the approval rule. Can be `anyApprover`, `regular` or `reportApprover`.
     * 
     */
    public Output<String> ruleType() {
        return this.ruleType;
    }

    /**
     * List of user IDs that are eligible to approve this rule.
     * 
     */
    @Import(name="userIds", required=true)
    private Output<List<Integer>> userIds;

    /**
     * @return List of user IDs that are eligible to approve this rule.
     * 
     */
    public Output<List<Integer>> userIds() {
        return this.userIds;
    }

    private GetProjectApprovalRulesApprovalRuleArgs() {}

    private GetProjectApprovalRulesApprovalRuleArgs(GetProjectApprovalRulesApprovalRuleArgs $) {
        this.appliesToAllProtectedBranches = $.appliesToAllProtectedBranches;
        this.approvalsRequired = $.approvalsRequired;
        this.eligibleApproverIds = $.eligibleApproverIds;
        this.groupIds = $.groupIds;
        this.id = $.id;
        this.name = $.name;
        this.protectedBranchIds = $.protectedBranchIds;
        this.reportType = $.reportType;
        this.ruleType = $.ruleType;
        this.userIds = $.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectApprovalRulesApprovalRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectApprovalRulesApprovalRuleArgs $;

        public Builder() {
            $ = new GetProjectApprovalRulesApprovalRuleArgs();
        }

        public Builder(GetProjectApprovalRulesApprovalRuleArgs defaults) {
            $ = new GetProjectApprovalRulesApprovalRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliesToAllProtectedBranches If true, applies the rule to all protected branches, ignoring the protected branches attribute.
         * 
         * @return builder
         * 
         */
        public Builder appliesToAllProtectedBranches(Output<Boolean> appliesToAllProtectedBranches) {
            $.appliesToAllProtectedBranches = appliesToAllProtectedBranches;
            return this;
        }

        /**
         * @param appliesToAllProtectedBranches If true, applies the rule to all protected branches, ignoring the protected branches attribute.
         * 
         * @return builder
         * 
         */
        public Builder appliesToAllProtectedBranches(Boolean appliesToAllProtectedBranches) {
            return appliesToAllProtectedBranches(Output.of(appliesToAllProtectedBranches));
        }

        /**
         * @param approvalsRequired The number of approvals required for this rule.
         * 
         * @return builder
         * 
         */
        public Builder approvalsRequired(Output<Integer> approvalsRequired) {
            $.approvalsRequired = approvalsRequired;
            return this;
        }

        /**
         * @param approvalsRequired The number of approvals required for this rule.
         * 
         * @return builder
         * 
         */
        public Builder approvalsRequired(Integer approvalsRequired) {
            return approvalsRequired(Output.of(approvalsRequired));
        }

        /**
         * @param eligibleApproverIds List of all approver IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder eligibleApproverIds(Output<List<Integer>> eligibleApproverIds) {
            $.eligibleApproverIds = eligibleApproverIds;
            return this;
        }

        /**
         * @param eligibleApproverIds List of all approver IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder eligibleApproverIds(List<Integer> eligibleApproverIds) {
            return eligibleApproverIds(Output.of(eligibleApproverIds));
        }

        /**
         * @param eligibleApproverIds List of all approver IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder eligibleApproverIds(Integer... eligibleApproverIds) {
            return eligibleApproverIds(List.of(eligibleApproverIds));
        }

        /**
         * @param groupIds List of group IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(Output<List<Integer>> groupIds) {
            $.groupIds = groupIds;
            return this;
        }

        /**
         * @param groupIds List of group IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(List<Integer> groupIds) {
            return groupIds(Output.of(groupIds));
        }

        /**
         * @param groupIds List of group IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(Integer... groupIds) {
            return groupIds(List.of(groupIds));
        }

        /**
         * @param id The ID of the approval rule.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the approval rule.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the approval rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the approval rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protectedBranchIds List of protected branch IDs that this rule applies to.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(Output<List<Integer>> protectedBranchIds) {
            $.protectedBranchIds = protectedBranchIds;
            return this;
        }

        /**
         * @param protectedBranchIds List of protected branch IDs that this rule applies to.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(List<Integer> protectedBranchIds) {
            return protectedBranchIds(Output.of(protectedBranchIds));
        }

        /**
         * @param protectedBranchIds List of protected branch IDs that this rule applies to.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(Integer... protectedBranchIds) {
            return protectedBranchIds(List.of(protectedBranchIds));
        }

        /**
         * @param reportType The report type. Required when the rule type is `reportApprover`. The supported report types are `licenseScanning` and `codeCoverage`.
         * 
         * @return builder
         * 
         */
        public Builder reportType(Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        /**
         * @param reportType The report type. Required when the rule type is `reportApprover`. The supported report types are `licenseScanning` and `codeCoverage`.
         * 
         * @return builder
         * 
         */
        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        /**
         * @param ruleType The type of the approval rule. Can be `anyApprover`, `regular` or `reportApprover`.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType The type of the approval rule. Can be `anyApprover`, `regular` or `reportApprover`.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        /**
         * @param userIds List of user IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder userIds(Output<List<Integer>> userIds) {
            $.userIds = userIds;
            return this;
        }

        /**
         * @param userIds List of user IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder userIds(List<Integer> userIds) {
            return userIds(Output.of(userIds));
        }

        /**
         * @param userIds List of user IDs that are eligible to approve this rule.
         * 
         * @return builder
         * 
         */
        public Builder userIds(Integer... userIds) {
            return userIds(List.of(userIds));
        }

        public GetProjectApprovalRulesApprovalRuleArgs build() {
            if ($.appliesToAllProtectedBranches == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "appliesToAllProtectedBranches");
            }
            if ($.approvalsRequired == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "approvalsRequired");
            }
            if ($.eligibleApproverIds == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "eligibleApproverIds");
            }
            if ($.groupIds == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "groupIds");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "id");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "name");
            }
            if ($.protectedBranchIds == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "protectedBranchIds");
            }
            if ($.reportType == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "reportType");
            }
            if ($.ruleType == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "ruleType");
            }
            if ($.userIds == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesApprovalRuleArgs", "userIds");
            }
            return $;
        }
    }

}
