// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserRunnerState extends com.pulumi.resources.ResourceArgs {

    public static final UserRunnerState Empty = new UserRunnerState();

    /**
     * The access level of the runner. Valid values are: `not_protected`, `ref_protected`.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return The access level of the runner. Valid values are: `not_protected`, `ref_protected`.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * Description of the runner.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the runner.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the group that the runner is created in. Required if runner*type is group*type.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return The ID of the group that the runner is created in. Required if runner*type is group*type.
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Specifies if the runner should be locked for the current project.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Specifies if the runner should be locked for the current project.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Free-form maintenance notes for the runner (1024 characters)
     * 
     */
    @Import(name="maintenanceNote")
    private @Nullable Output<String> maintenanceNote;

    /**
     * @return Free-form maintenance notes for the runner (1024 characters)
     * 
     */
    public Optional<Output<String>> maintenanceNote() {
        return Optional.ofNullable(this.maintenanceNote);
    }

    /**
     * Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
     * 
     */
    @Import(name="maximumTimeout")
    private @Nullable Output<Integer> maximumTimeout;

    /**
     * @return Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
     * 
     */
    public Optional<Output<Integer>> maximumTimeout() {
        return Optional.ofNullable(this.maximumTimeout);
    }

    /**
     * Specifies if the runner should ignore new jobs.
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return Specifies if the runner should ignore new jobs.
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * The ID of the project that the runner is created in. Required if runner*type is project*type.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return The ID of the project that the runner is created in. Required if runner*type is project*type.
     * 
     */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The scope of the runner. Valid values are: `instance_type`, `group_type`, `project_type`.
     * 
     */
    @Import(name="runnerType")
    private @Nullable Output<String> runnerType;

    /**
     * @return The scope of the runner. Valid values are: `instance_type`, `group_type`, `project_type`.
     * 
     */
    public Optional<Output<String>> runnerType() {
        return Optional.ofNullable(this.runnerType);
    }

    /**
     * A list of runner tags.
     * 
     */
    @Import(name="tagLists")
    private @Nullable Output<List<String>> tagLists;

    /**
     * @return A list of runner tags.
     * 
     */
    public Optional<Output<List<String>>> tagLists() {
        return Optional.ofNullable(this.tagLists);
    }

    /**
     * The authentication token to use when setting up a new runner with this configuration. This value cannot be imported.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The authentication token to use when setting up a new runner with this configuration. This value cannot be imported.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * Specifies if the runner should handle untagged jobs.
     * 
     */
    @Import(name="untagged")
    private @Nullable Output<Boolean> untagged;

    /**
     * @return Specifies if the runner should handle untagged jobs.
     * 
     */
    public Optional<Output<Boolean>> untagged() {
        return Optional.ofNullable(this.untagged);
    }

    private UserRunnerState() {}

    private UserRunnerState(UserRunnerState $) {
        this.accessLevel = $.accessLevel;
        this.description = $.description;
        this.groupId = $.groupId;
        this.locked = $.locked;
        this.maintenanceNote = $.maintenanceNote;
        this.maximumTimeout = $.maximumTimeout;
        this.paused = $.paused;
        this.projectId = $.projectId;
        this.runnerType = $.runnerType;
        this.tagLists = $.tagLists;
        this.token = $.token;
        this.untagged = $.untagged;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserRunnerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserRunnerState $;

        public Builder() {
            $ = new UserRunnerState();
        }

        public Builder(UserRunnerState defaults) {
            $ = new UserRunnerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel The access level of the runner. Valid values are: `not_protected`, `ref_protected`.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel The access level of the runner. Valid values are: `not_protected`, `ref_protected`.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param description Description of the runner.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the runner.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param groupId The ID of the group that the runner is created in. Required if runner*type is group*type.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the group that the runner is created in. Required if runner*type is group*type.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param locked Specifies if the runner should be locked for the current project.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Specifies if the runner should be locked for the current project.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param maintenanceNote Free-form maintenance notes for the runner (1024 characters)
         * 
         * @return builder
         * 
         */
        public Builder maintenanceNote(@Nullable Output<String> maintenanceNote) {
            $.maintenanceNote = maintenanceNote;
            return this;
        }

        /**
         * @param maintenanceNote Free-form maintenance notes for the runner (1024 characters)
         * 
         * @return builder
         * 
         */
        public Builder maintenanceNote(String maintenanceNote) {
            return maintenanceNote(Output.of(maintenanceNote));
        }

        /**
         * @param maximumTimeout Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
         * 
         * @return builder
         * 
         */
        public Builder maximumTimeout(@Nullable Output<Integer> maximumTimeout) {
            $.maximumTimeout = maximumTimeout;
            return this;
        }

        /**
         * @param maximumTimeout Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
         * 
         * @return builder
         * 
         */
        public Builder maximumTimeout(Integer maximumTimeout) {
            return maximumTimeout(Output.of(maximumTimeout));
        }

        /**
         * @param paused Specifies if the runner should ignore new jobs.
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused Specifies if the runner should ignore new jobs.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param projectId The ID of the project that the runner is created in. Required if runner*type is project*type.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project that the runner is created in. Required if runner*type is project*type.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param runnerType The scope of the runner. Valid values are: `instance_type`, `group_type`, `project_type`.
         * 
         * @return builder
         * 
         */
        public Builder runnerType(@Nullable Output<String> runnerType) {
            $.runnerType = runnerType;
            return this;
        }

        /**
         * @param runnerType The scope of the runner. Valid values are: `instance_type`, `group_type`, `project_type`.
         * 
         * @return builder
         * 
         */
        public Builder runnerType(String runnerType) {
            return runnerType(Output.of(runnerType));
        }

        /**
         * @param tagLists A list of runner tags.
         * 
         * @return builder
         * 
         */
        public Builder tagLists(@Nullable Output<List<String>> tagLists) {
            $.tagLists = tagLists;
            return this;
        }

        /**
         * @param tagLists A list of runner tags.
         * 
         * @return builder
         * 
         */
        public Builder tagLists(List<String> tagLists) {
            return tagLists(Output.of(tagLists));
        }

        /**
         * @param tagLists A list of runner tags.
         * 
         * @return builder
         * 
         */
        public Builder tagLists(String... tagLists) {
            return tagLists(List.of(tagLists));
        }

        /**
         * @param token The authentication token to use when setting up a new runner with this configuration. This value cannot be imported.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The authentication token to use when setting up a new runner with this configuration. This value cannot be imported.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param untagged Specifies if the runner should handle untagged jobs.
         * 
         * @return builder
         * 
         */
        public Builder untagged(@Nullable Output<Boolean> untagged) {
            $.untagged = untagged;
            return this;
        }

        /**
         * @param untagged Specifies if the runner should handle untagged jobs.
         * 
         * @return builder
         * 
         */
        public Builder untagged(Boolean untagged) {
            return untagged(Output.of(untagged));
        }

        public UserRunnerState build() {
            return $;
        }
    }

}
