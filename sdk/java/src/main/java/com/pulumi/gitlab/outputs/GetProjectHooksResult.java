// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetProjectHooksHook;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectHooksResult {
    /**
     * @return The list of hooks.
     * 
     */
    private List<GetProjectHooksHook> hooks;
    /**
     * @return The ID of this datasource. In the format `&lt;project&gt;`.
     * 
     */
    private String id;
    /**
     * @return The name or id of the project.
     * 
     */
    private String project;

    private GetProjectHooksResult() {}
    /**
     * @return The list of hooks.
     * 
     */
    public List<GetProjectHooksHook> hooks() {
        return this.hooks;
    }
    /**
     * @return The ID of this datasource. In the format `&lt;project&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name or id of the project.
     * 
     */
    public String project() {
        return this.project;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectHooksResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetProjectHooksHook> hooks;
        private String id;
        private String project;
        public Builder() {}
        public Builder(GetProjectHooksResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hooks = defaults.hooks;
    	      this.id = defaults.id;
    	      this.project = defaults.project;
        }

        @CustomType.Setter
        public Builder hooks(List<GetProjectHooksHook> hooks) {
            if (hooks == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksResult", "hooks");
            }
            this.hooks = hooks;
            return this;
        }
        public Builder hooks(GetProjectHooksHook... hooks) {
            return hooks(List.of(hooks));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksResult", "project");
            }
            this.project = project;
            return this;
        }
        public GetProjectHooksResult build() {
            final var _resultValue = new GetProjectHooksResult();
            _resultValue.hooks = hooks;
            _resultValue.id = id;
            _resultValue.project = project;
            return _resultValue;
        }
    }
}
