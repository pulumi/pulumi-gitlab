// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupLevelMrApprovalsState extends com.pulumi.resources.ResourceArgs {

    public static final GroupLevelMrApprovalsState Empty = new GroupLevelMrApprovalsState();

    /**
     * Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
     * 
     */
    @Import(name="allowAuthorApproval")
    private @Nullable Output<Boolean> allowAuthorApproval;

    /**
     * @return Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
     * 
     */
    public Optional<Output<Boolean>> allowAuthorApproval() {
        return Optional.ofNullable(this.allowAuthorApproval);
    }

    /**
     * Allow or prevent committers from self approving merge requests.
     * 
     */
    @Import(name="allowCommitterApproval")
    private @Nullable Output<Boolean> allowCommitterApproval;

    /**
     * @return Allow or prevent committers from self approving merge requests.
     * 
     */
    public Optional<Output<Boolean>> allowCommitterApproval() {
        return Optional.ofNullable(this.allowCommitterApproval);
    }

    /**
     * Allow or prevent overriding approvers per merge request.
     * 
     */
    @Import(name="allowOverridesToApproverListPerMergeRequest")
    private @Nullable Output<Boolean> allowOverridesToApproverListPerMergeRequest;

    /**
     * @return Allow or prevent overriding approvers per merge request.
     * 
     */
    public Optional<Output<Boolean>> allowOverridesToApproverListPerMergeRequest() {
        return Optional.ofNullable(this.allowOverridesToApproverListPerMergeRequest);
    }

    /**
     * The ID or URL-encoded path of the group.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return The ID or URL-encoded path of the group.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    @Import(name="keepSettingsOnDestroy")
    private @Nullable Output<Boolean> keepSettingsOnDestroy;

    public Optional<Output<Boolean>> keepSettingsOnDestroy() {
        return Optional.ofNullable(this.keepSettingsOnDestroy);
    }

    /**
     * Require approver to authenticate before adding the approval.
     * 
     */
    @Import(name="requireReauthenticationToApprove")
    private @Nullable Output<Boolean> requireReauthenticationToApprove;

    /**
     * @return Require approver to authenticate before adding the approval.
     * 
     */
    public Optional<Output<Boolean>> requireReauthenticationToApprove() {
        return Optional.ofNullable(this.requireReauthenticationToApprove);
    }

    /**
     * Retain approval count on a new push.
     * 
     */
    @Import(name="retainApprovalsOnPush")
    private @Nullable Output<Boolean> retainApprovalsOnPush;

    /**
     * @return Retain approval count on a new push.
     * 
     */
    public Optional<Output<Boolean>> retainApprovalsOnPush() {
        return Optional.ofNullable(this.retainApprovalsOnPush);
    }

    private GroupLevelMrApprovalsState() {}

    private GroupLevelMrApprovalsState(GroupLevelMrApprovalsState $) {
        this.allowAuthorApproval = $.allowAuthorApproval;
        this.allowCommitterApproval = $.allowCommitterApproval;
        this.allowOverridesToApproverListPerMergeRequest = $.allowOverridesToApproverListPerMergeRequest;
        this.group = $.group;
        this.keepSettingsOnDestroy = $.keepSettingsOnDestroy;
        this.requireReauthenticationToApprove = $.requireReauthenticationToApprove;
        this.retainApprovalsOnPush = $.retainApprovalsOnPush;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupLevelMrApprovalsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupLevelMrApprovalsState $;

        public Builder() {
            $ = new GroupLevelMrApprovalsState();
        }

        public Builder(GroupLevelMrApprovalsState defaults) {
            $ = new GroupLevelMrApprovalsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAuthorApproval Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
         * 
         * @return builder
         * 
         */
        public Builder allowAuthorApproval(@Nullable Output<Boolean> allowAuthorApproval) {
            $.allowAuthorApproval = allowAuthorApproval;
            return this;
        }

        /**
         * @param allowAuthorApproval Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
         * 
         * @return builder
         * 
         */
        public Builder allowAuthorApproval(Boolean allowAuthorApproval) {
            return allowAuthorApproval(Output.of(allowAuthorApproval));
        }

        /**
         * @param allowCommitterApproval Allow or prevent committers from self approving merge requests.
         * 
         * @return builder
         * 
         */
        public Builder allowCommitterApproval(@Nullable Output<Boolean> allowCommitterApproval) {
            $.allowCommitterApproval = allowCommitterApproval;
            return this;
        }

        /**
         * @param allowCommitterApproval Allow or prevent committers from self approving merge requests.
         * 
         * @return builder
         * 
         */
        public Builder allowCommitterApproval(Boolean allowCommitterApproval) {
            return allowCommitterApproval(Output.of(allowCommitterApproval));
        }

        /**
         * @param allowOverridesToApproverListPerMergeRequest Allow or prevent overriding approvers per merge request.
         * 
         * @return builder
         * 
         */
        public Builder allowOverridesToApproverListPerMergeRequest(@Nullable Output<Boolean> allowOverridesToApproverListPerMergeRequest) {
            $.allowOverridesToApproverListPerMergeRequest = allowOverridesToApproverListPerMergeRequest;
            return this;
        }

        /**
         * @param allowOverridesToApproverListPerMergeRequest Allow or prevent overriding approvers per merge request.
         * 
         * @return builder
         * 
         */
        public Builder allowOverridesToApproverListPerMergeRequest(Boolean allowOverridesToApproverListPerMergeRequest) {
            return allowOverridesToApproverListPerMergeRequest(Output.of(allowOverridesToApproverListPerMergeRequest));
        }

        /**
         * @param group The ID or URL-encoded path of the group.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The ID or URL-encoded path of the group.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        public Builder keepSettingsOnDestroy(@Nullable Output<Boolean> keepSettingsOnDestroy) {
            $.keepSettingsOnDestroy = keepSettingsOnDestroy;
            return this;
        }

        public Builder keepSettingsOnDestroy(Boolean keepSettingsOnDestroy) {
            return keepSettingsOnDestroy(Output.of(keepSettingsOnDestroy));
        }

        /**
         * @param requireReauthenticationToApprove Require approver to authenticate before adding the approval.
         * 
         * @return builder
         * 
         */
        public Builder requireReauthenticationToApprove(@Nullable Output<Boolean> requireReauthenticationToApprove) {
            $.requireReauthenticationToApprove = requireReauthenticationToApprove;
            return this;
        }

        /**
         * @param requireReauthenticationToApprove Require approver to authenticate before adding the approval.
         * 
         * @return builder
         * 
         */
        public Builder requireReauthenticationToApprove(Boolean requireReauthenticationToApprove) {
            return requireReauthenticationToApprove(Output.of(requireReauthenticationToApprove));
        }

        /**
         * @param retainApprovalsOnPush Retain approval count on a new push.
         * 
         * @return builder
         * 
         */
        public Builder retainApprovalsOnPush(@Nullable Output<Boolean> retainApprovalsOnPush) {
            $.retainApprovalsOnPush = retainApprovalsOnPush;
            return this;
        }

        /**
         * @param retainApprovalsOnPush Retain approval count on a new push.
         * 
         * @return builder
         * 
         */
        public Builder retainApprovalsOnPush(Boolean retainApprovalsOnPush) {
            return retainApprovalsOnPush(Output.of(retainApprovalsOnPush));
        }

        public GroupLevelMrApprovalsState build() {
            return $;
        }
    }

}
