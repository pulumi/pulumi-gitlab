// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetProjectEnvironmentsEnvironment;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectEnvironmentsResult {
    /**
     * @return The list of environments.
     * 
     */
    private List<GetProjectEnvironmentsEnvironment> environments;
    private String id;
    /**
     * @return Return the environment with this name. Mutually exclusive with search.
     * 
     */
    private @Nullable String name;
    /**
     * @return The ID or full path of the project.
     * 
     */
    private String project;
    /**
     * @return Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     * 
     */
    private @Nullable String search;
    /**
     * @return List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     * 
     */
    private @Nullable String states;

    private GetProjectEnvironmentsResult() {}
    /**
     * @return The list of environments.
     * 
     */
    public List<GetProjectEnvironmentsEnvironment> environments() {
        return this.environments;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Return the environment with this name. Mutually exclusive with search.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The ID or full path of the project.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     * 
     */
    public Optional<String> states() {
        return Optional.ofNullable(this.states);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectEnvironmentsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetProjectEnvironmentsEnvironment> environments;
        private String id;
        private @Nullable String name;
        private String project;
        private @Nullable String search;
        private @Nullable String states;
        public Builder() {}
        public Builder(GetProjectEnvironmentsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.environments = defaults.environments;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.search = defaults.search;
    	      this.states = defaults.states;
        }

        @CustomType.Setter
        public Builder environments(List<GetProjectEnvironmentsEnvironment> environments) {
            if (environments == null) {
              throw new MissingRequiredPropertyException("GetProjectEnvironmentsResult", "environments");
            }
            this.environments = environments;
            return this;
        }
        public Builder environments(GetProjectEnvironmentsEnvironment... environments) {
            return environments(List.of(environments));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectEnvironmentsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetProjectEnvironmentsResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder search(@Nullable String search) {

            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder states(@Nullable String states) {

            this.states = states;
            return this;
        }
        public GetProjectEnvironmentsResult build() {
            final var _resultValue = new GetProjectEnvironmentsResult();
            _resultValue.environments = environments;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.search = search;
            _resultValue.states = states;
            return _resultValue;
        }
    }
}
