// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectExternalStatusCheckArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectExternalStatusCheckState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectExternalStatusCheck` resource allows you to manage the lifecycle of an external status check service on a project.
 * 
 * &gt; This resource requires a GitLab Enterprise instance with an Ultimate license.
 * 
 * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/status_checks/)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.ProjectExternalStatusCheck;
 * import com.pulumi.gitlab.ProjectExternalStatusCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new ProjectExternalStatusCheck("foo", ProjectExternalStatusCheckArgs.builder()
 *             .projectId(123)
 *             .name("foo")
 *             .externalUrl("https://example.gitlab.com")
 *             .build());
 * 
 *         var bar = new ProjectExternalStatusCheck("bar", ProjectExternalStatusCheckArgs.builder()
 *             .projectId(456)
 *             .name("bar")
 *             .externalUrl("https://example.gitlab.com")
 *             .sharedSecret("secret")
 *             .protectedBranchIds(            
 *                 6,
 *                 28)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_external_status_check`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_external_status_check.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab project external status checks can be imported using an id made up of `&lt;project-id&gt;:&lt;external-check-id&gt;`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck foo &#34;123:42&#34;
 * ```
 * 
 * NOTE: the `shared_secret` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 * 
 */
@ResourceType(type="gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck")
public class ProjectExternalStatusCheck extends com.pulumi.resources.CustomResource {
    /**
     * The URL of the external status check service.
     * 
     */
    @Export(name="externalUrl", refs={String.class}, tree="[0]")
    private Output<String> externalUrl;

    /**
     * @return The URL of the external status check service.
     * 
     */
    public Output<String> externalUrl() {
        return this.externalUrl;
    }
    /**
     * True if the external status check uses an HMAC secret.
     * 
     */
    @Export(name="hmac", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> hmac;

    /**
     * @return True if the external status check uses an HMAC secret.
     * 
     */
    public Output<Boolean> hmac() {
        return this.hmac;
    }
    /**
     * The display name of the external status check service.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The display name of the external status check service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project.
     * 
     */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * The list of IDs of protected branches to scope the rule by.
     * 
     */
    @Export(name="protectedBranchIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> protectedBranchIds;

    /**
     * @return The list of IDs of protected branches to scope the rule by.
     * 
     */
    public Output<List<Integer>> protectedBranchIds() {
        return this.protectedBranchIds;
    }
    /**
     * The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
     * 
     */
    @Export(name="sharedSecret", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sharedSecret;

    /**
     * @return The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
     * 
     */
    public Output<Optional<String>> sharedSecret() {
        return Codegen.optional(this.sharedSecret);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectExternalStatusCheck(java.lang.String name) {
        this(name, ProjectExternalStatusCheckArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectExternalStatusCheck(java.lang.String name, ProjectExternalStatusCheckArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectExternalStatusCheck(java.lang.String name, ProjectExternalStatusCheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectExternalStatusCheck(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectExternalStatusCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectExternalStatusCheckArgs makeArgs(ProjectExternalStatusCheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectExternalStatusCheckArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "sharedSecret"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectExternalStatusCheck get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectExternalStatusCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectExternalStatusCheck(name, id, state, options);
    }
}
