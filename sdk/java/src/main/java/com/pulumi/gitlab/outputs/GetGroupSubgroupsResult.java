// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetGroupSubgroupsSubgroup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupSubgroupsResult {
    /**
     * @return Show all the groups you have access to.
     * 
     */
    private Boolean allAvailable;
    /**
     * @return The ID of the group.
     * 
     */
    private Integer groupId;
    /**
     * @return The ID of this datasource. In the format `&lt;group-id&gt;`.
     * 
     */
    private String id;
    /**
     * @return Limit to groups where current user has at least this access level.
     * 
     */
    private String minAccessLevel;
    /**
     * @return Order groups by name, path or id.
     * 
     */
    private String orderBy;
    /**
     * @return Limit to groups explicitly owned by the current user.
     * 
     */
    private Boolean owned;
    /**
     * @return Return the list of authorized groups matching the search criteria.
     * 
     */
    private String search;
    /**
     * @return Skip the group IDs passed.
     * 
     */
    private List<Integer> skipGroups;
    /**
     * @return Order groups in asc or desc order.
     * 
     */
    private String sort;
    /**
     * @return Include group statistics (administrators only).
     * 
     */
    private Boolean statistics;
    /**
     * @return Subgroups of the parent group.
     * 
     */
    private List<GetGroupSubgroupsSubgroup> subgroups;
    /**
     * @return Include custom attributes in response (administrators only).
     * 
     */
    private Boolean withCustomAttributes;

    private GetGroupSubgroupsResult() {}
    /**
     * @return Show all the groups you have access to.
     * 
     */
    public Boolean allAvailable() {
        return this.allAvailable;
    }
    /**
     * @return The ID of the group.
     * 
     */
    public Integer groupId() {
        return this.groupId;
    }
    /**
     * @return The ID of this datasource. In the format `&lt;group-id&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Limit to groups where current user has at least this access level.
     * 
     */
    public String minAccessLevel() {
        return this.minAccessLevel;
    }
    /**
     * @return Order groups by name, path or id.
     * 
     */
    public String orderBy() {
        return this.orderBy;
    }
    /**
     * @return Limit to groups explicitly owned by the current user.
     * 
     */
    public Boolean owned() {
        return this.owned;
    }
    /**
     * @return Return the list of authorized groups matching the search criteria.
     * 
     */
    public String search() {
        return this.search;
    }
    /**
     * @return Skip the group IDs passed.
     * 
     */
    public List<Integer> skipGroups() {
        return this.skipGroups;
    }
    /**
     * @return Order groups in asc or desc order.
     * 
     */
    public String sort() {
        return this.sort;
    }
    /**
     * @return Include group statistics (administrators only).
     * 
     */
    public Boolean statistics() {
        return this.statistics;
    }
    /**
     * @return Subgroups of the parent group.
     * 
     */
    public List<GetGroupSubgroupsSubgroup> subgroups() {
        return this.subgroups;
    }
    /**
     * @return Include custom attributes in response (administrators only).
     * 
     */
    public Boolean withCustomAttributes() {
        return this.withCustomAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupSubgroupsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allAvailable;
        private Integer groupId;
        private String id;
        private String minAccessLevel;
        private String orderBy;
        private Boolean owned;
        private String search;
        private List<Integer> skipGroups;
        private String sort;
        private Boolean statistics;
        private List<GetGroupSubgroupsSubgroup> subgroups;
        private Boolean withCustomAttributes;
        public Builder() {}
        public Builder(GetGroupSubgroupsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allAvailable = defaults.allAvailable;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.minAccessLevel = defaults.minAccessLevel;
    	      this.orderBy = defaults.orderBy;
    	      this.owned = defaults.owned;
    	      this.search = defaults.search;
    	      this.skipGroups = defaults.skipGroups;
    	      this.sort = defaults.sort;
    	      this.statistics = defaults.statistics;
    	      this.subgroups = defaults.subgroups;
    	      this.withCustomAttributes = defaults.withCustomAttributes;
        }

        @CustomType.Setter
        public Builder allAvailable(Boolean allAvailable) {
            if (allAvailable == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "allAvailable");
            }
            this.allAvailable = allAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder minAccessLevel(String minAccessLevel) {
            if (minAccessLevel == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "minAccessLevel");
            }
            this.minAccessLevel = minAccessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder orderBy(String orderBy) {
            if (orderBy == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "orderBy");
            }
            this.orderBy = orderBy;
            return this;
        }
        @CustomType.Setter
        public Builder owned(Boolean owned) {
            if (owned == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "owned");
            }
            this.owned = owned;
            return this;
        }
        @CustomType.Setter
        public Builder search(String search) {
            if (search == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "search");
            }
            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder skipGroups(List<Integer> skipGroups) {
            if (skipGroups == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "skipGroups");
            }
            this.skipGroups = skipGroups;
            return this;
        }
        public Builder skipGroups(Integer... skipGroups) {
            return skipGroups(List.of(skipGroups));
        }
        @CustomType.Setter
        public Builder sort(String sort) {
            if (sort == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "sort");
            }
            this.sort = sort;
            return this;
        }
        @CustomType.Setter
        public Builder statistics(Boolean statistics) {
            if (statistics == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "statistics");
            }
            this.statistics = statistics;
            return this;
        }
        @CustomType.Setter
        public Builder subgroups(List<GetGroupSubgroupsSubgroup> subgroups) {
            if (subgroups == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "subgroups");
            }
            this.subgroups = subgroups;
            return this;
        }
        public Builder subgroups(GetGroupSubgroupsSubgroup... subgroups) {
            return subgroups(List.of(subgroups));
        }
        @CustomType.Setter
        public Builder withCustomAttributes(Boolean withCustomAttributes) {
            if (withCustomAttributes == null) {
              throw new MissingRequiredPropertyException("GetGroupSubgroupsResult", "withCustomAttributes");
            }
            this.withCustomAttributes = withCustomAttributes;
            return this;
        }
        public GetGroupSubgroupsResult build() {
            final var _resultValue = new GetGroupSubgroupsResult();
            _resultValue.allAvailable = allAvailable;
            _resultValue.groupId = groupId;
            _resultValue.id = id;
            _resultValue.minAccessLevel = minAccessLevel;
            _resultValue.orderBy = orderBy;
            _resultValue.owned = owned;
            _resultValue.search = search;
            _resultValue.skipGroups = skipGroups;
            _resultValue.sort = sort;
            _resultValue.statistics = statistics;
            _resultValue.subgroups = subgroups;
            _resultValue.withCustomAttributes = withCustomAttributes;
            return _resultValue;
        }
    }
}
