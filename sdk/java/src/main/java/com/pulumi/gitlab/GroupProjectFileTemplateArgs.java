// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class GroupProjectFileTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupProjectFileTemplateArgs Empty = new GroupProjectFileTemplateArgs();

    /**
     * The ID of the project that will be used for file templates. This project must be the direct
     * child of the project defined by the group_id
     * 
     */
    @Import(name="fileTemplateProjectId", required=true)
    private Output<Integer> fileTemplateProjectId;

    /**
     * @return The ID of the project that will be used for file templates. This project must be the direct
     * child of the project defined by the group_id
     * 
     */
    public Output<Integer> fileTemplateProjectId() {
        return this.fileTemplateProjectId;
    }

    /**
     * The ID of the group that will use the file template project. This group must be the direct
     * parent of the project defined by project_id
     * 
     */
    @Import(name="groupId", required=true)
    private Output<Integer> groupId;

    /**
     * @return The ID of the group that will use the file template project. This group must be the direct
     * parent of the project defined by project_id
     * 
     */
    public Output<Integer> groupId() {
        return this.groupId;
    }

    private GroupProjectFileTemplateArgs() {}

    private GroupProjectFileTemplateArgs(GroupProjectFileTemplateArgs $) {
        this.fileTemplateProjectId = $.fileTemplateProjectId;
        this.groupId = $.groupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupProjectFileTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupProjectFileTemplateArgs $;

        public Builder() {
            $ = new GroupProjectFileTemplateArgs();
        }

        public Builder(GroupProjectFileTemplateArgs defaults) {
            $ = new GroupProjectFileTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileTemplateProjectId The ID of the project that will be used for file templates. This project must be the direct
         * child of the project defined by the group_id
         * 
         * @return builder
         * 
         */
        public Builder fileTemplateProjectId(Output<Integer> fileTemplateProjectId) {
            $.fileTemplateProjectId = fileTemplateProjectId;
            return this;
        }

        /**
         * @param fileTemplateProjectId The ID of the project that will be used for file templates. This project must be the direct
         * child of the project defined by the group_id
         * 
         * @return builder
         * 
         */
        public Builder fileTemplateProjectId(Integer fileTemplateProjectId) {
            return fileTemplateProjectId(Output.of(fileTemplateProjectId));
        }

        /**
         * @param groupId The ID of the group that will use the file template project. This group must be the direct
         * parent of the project defined by project_id
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the group that will use the file template project. This group must be the direct
         * parent of the project defined by project_id
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        public GroupProjectFileTemplateArgs build() {
            if ($.fileTemplateProjectId == null) {
                throw new MissingRequiredPropertyException("GroupProjectFileTemplateArgs", "fileTemplateProjectId");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("GroupProjectFileTemplateArgs", "groupId");
            }
            return $;
        }
    }

}
