// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ServiceJiraArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ServiceJiraState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.ServiceJira` resource allows to manage the lifecycle of a project integration with Jira.
 * 
 * &gt; This resource is deprecated. use `gitlab.IntegrationJira`instead!
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/integrations/#jira)
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Project;
 * import com.pulumi.gitlab.ProjectArgs;
 * import com.pulumi.gitlab.ServiceJira;
 * import com.pulumi.gitlab.ServiceJiraArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var awesomeProject = new Project("awesomeProject", ProjectArgs.builder()
 *             .name("awesome_project")
 *             .description("My awesome project.")
 *             .visibilityLevel("public")
 *             .build());
 * 
 *         var jira = new ServiceJira("jira", ServiceJiraArgs.builder()
 *             .project(awesomeProject.id())
 *             .url("https://jira.example.com")
 *             .username("user")
 *             .password("mypass")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_service_jira`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_service_jira.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Import using the CLI is supported using the following syntax:
 * 
 * You can import a gitlab_service_jira state using the project ID, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/serviceJira:ServiceJira jira 1
 * ```
 * 
 */
@ResourceType(type="gitlab:index/serviceJira:ServiceJira")
public class ServiceJira extends com.pulumi.resources.CustomResource {
    /**
     * Whether the integration is active.
     * 
     */
    @Export(name="active", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> active;

    /**
     * @return Whether the integration is active.
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }
    /**
     * The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
     * 
     */
    @Export(name="apiUrl", refs={String.class}, tree="[0]")
    private Output<String> apiUrl;

    /**
     * @return The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
     * 
     */
    public Output<String> apiUrl() {
        return this.apiUrl;
    }
    /**
     * Enable comments inside Jira issues on each GitLab event (commit / merge request)
     * 
     */
    @Export(name="commentOnEventEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> commentOnEventEnabled;

    /**
     * @return Enable comments inside Jira issues on each GitLab event (commit / merge request)
     * 
     */
    public Output<Boolean> commentOnEventEnabled() {
        return this.commentOnEventEnabled;
    }
    /**
     * Enable notifications for commit events
     * 
     */
    @Export(name="commitEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> commitEvents;

    /**
     * @return Enable notifications for commit events
     * 
     */
    public Output<Boolean> commitEvents() {
        return this.commitEvents;
    }
    /**
     * Create time.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Create time.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Enable viewing Jira issues in GitLab.
     * 
     */
    @Export(name="issuesEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> issuesEnabled;

    /**
     * @return Enable viewing Jira issues in GitLab.
     * 
     */
    public Output<Optional<Boolean>> issuesEnabled() {
        return Codegen.optional(this.issuesEnabled);
    }
    /**
     * The authentication method to be used with Jira. 0 means Basic Authentication. 1 means Jira personal access token. Defaults to 0.
     * 
     */
    @Export(name="jiraAuthType", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> jiraAuthType;

    /**
     * @return The authentication method to be used with Jira. 0 means Basic Authentication. 1 means Jira personal access token. Defaults to 0.
     * 
     */
    public Output<Optional<Integer>> jiraAuthType() {
        return Codegen.optional(this.jiraAuthType);
    }
    /**
     * Prefix to match Jira issue keys.
     * 
     */
    @Export(name="jiraIssuePrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> jiraIssuePrefix;

    /**
     * @return Prefix to match Jira issue keys.
     * 
     */
    public Output<Optional<String>> jiraIssuePrefix() {
        return Codegen.optional(this.jiraIssuePrefix);
    }
    /**
     * Regular expression to match Jira issue keys.
     * 
     */
    @Export(name="jiraIssueRegex", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> jiraIssueRegex;

    /**
     * @return Regular expression to match Jira issue keys.
     * 
     */
    public Output<Optional<String>> jiraIssueRegex() {
        return Codegen.optional(this.jiraIssueRegex);
    }
    @Export(name="jiraIssueTransitionAutomatic", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> jiraIssueTransitionAutomatic;

    public Output<Optional<Boolean>> jiraIssueTransitionAutomatic() {
        return Codegen.optional(this.jiraIssueTransitionAutomatic);
    }
    /**
     * The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration &gt; Issues &gt; Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
     * 
     */
    @Export(name="jiraIssueTransitionId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> jiraIssueTransitionId;

    /**
     * @return The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration &gt; Issues &gt; Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
     * 
     */
    public Output<Optional<String>> jiraIssueTransitionId() {
        return Codegen.optional(this.jiraIssueTransitionId);
    }
    /**
     * Enable notifications for merge request events
     * 
     */
    @Export(name="mergeRequestsEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> mergeRequestsEvents;

    /**
     * @return Enable notifications for merge request events
     * 
     */
    public Output<Boolean> mergeRequestsEvents() {
        return this.mergeRequestsEvents;
    }
    /**
     * The Jira API token, password, or personal access token to be used with Jira. When your authentication method is basic (jira*auth*type is 0), use an API token for Jira Cloud or a password for Jira Data Center or Jira Server. When your authentication method is a Jira personal access token (jira*auth*type is 1), use the personal access token.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return The Jira API token, password, or personal access token to be used with Jira. When your authentication method is basic (jira*auth*type is 0), use an API token for Jira Cloud or a password for Jira Data Center or Jira Server. When your authentication method is a Jira personal access token (jira*auth*type is 1), use the personal access token.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * ID of the project you want to activate integration on.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return ID of the project you want to activate integration on.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The short identifier for your JIRA project, all uppercase, e.g., PROJ.
     * 
     */
    @Export(name="projectKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectKey;

    /**
     * @return The short identifier for your JIRA project, all uppercase, e.g., PROJ.
     * 
     */
    public Output<Optional<String>> projectKey() {
        return Codegen.optional(this.projectKey);
    }
    /**
     * Keys of Jira projects. When issues_enabled is true, this setting specifies which Jira projects to view issues from in GitLab.
     * 
     */
    @Export(name="projectKeys", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> projectKeys;

    /**
     * @return Keys of Jira projects. When issues_enabled is true, this setting specifies which Jira projects to view issues from in GitLab.
     * 
     */
    public Output<Optional<List<String>>> projectKeys() {
        return Codegen.optional(this.projectKeys);
    }
    /**
     * Title.
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return Title.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Update time.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return Update time.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }
    /**
     * The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     * 
     */
    @Export(name="useInheritedSettings", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useInheritedSettings;

    /**
     * @return Indicates whether or not to inherit default settings. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> useInheritedSettings() {
        return Codegen.optional(this.useInheritedSettings);
    }
    /**
     * The email or username to be used with Jira. For Jira Cloud use an email, for Jira Data Center and Jira Server use a username. Required when using Basic authentication (jira*auth*type is 0).
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> username;

    /**
     * @return The email or username to be used with Jira. For Jira Cloud use an email, for Jira Data Center and Jira Server use a username. Required when using Basic authentication (jira*auth*type is 0).
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceJira(java.lang.String name) {
        this(name, ServiceJiraArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceJira(java.lang.String name, ServiceJiraArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceJira(java.lang.String name, ServiceJiraArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/serviceJira:ServiceJira", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ServiceJira(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceJiraState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/serviceJira:ServiceJira", name, state, makeResourceOptions(options, id), false);
    }

    private static ServiceJiraArgs makeArgs(ServiceJiraArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServiceJiraArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceJira get(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceJiraState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceJira(name, id, state, options);
    }
}
