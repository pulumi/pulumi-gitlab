// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseCommitArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseCommitArgs Empty = new ReleaseCommitArgs();

    /**
     * The email address of the commit author.
     * 
     */
    @Import(name="authorEmail")
    private @Nullable Output<String> authorEmail;

    /**
     * @return The email address of the commit author.
     * 
     */
    public Optional<Output<String>> authorEmail() {
        return Optional.ofNullable(this.authorEmail);
    }

    /**
     * The name of the commit author.
     * 
     */
    @Import(name="authorName")
    private @Nullable Output<String> authorName;

    /**
     * @return The name of the commit author.
     * 
     */
    public Optional<Output<String>> authorName() {
        return Optional.ofNullable(this.authorName);
    }

    /**
     * The date and time the commit was authored. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    @Import(name="authoredDate")
    private @Nullable Output<String> authoredDate;

    /**
     * @return The date and time the commit was authored. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    public Optional<Output<String>> authoredDate() {
        return Optional.ofNullable(this.authoredDate);
    }

    /**
     * The date and time the commit was made. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    @Import(name="committedDate")
    private @Nullable Output<String> committedDate;

    /**
     * @return The date and time the commit was made. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    public Optional<Output<String>> committedDate() {
        return Optional.ofNullable(this.committedDate);
    }

    /**
     * The email address of the committer.
     * 
     */
    @Import(name="committerEmail")
    private @Nullable Output<String> committerEmail;

    /**
     * @return The email address of the committer.
     * 
     */
    public Optional<Output<String>> committerEmail() {
        return Optional.ofNullable(this.committerEmail);
    }

    /**
     * The name of the committer.
     * 
     */
    @Import(name="committerName")
    private @Nullable Output<String> committerName;

    /**
     * @return The name of the committer.
     * 
     */
    public Optional<Output<String>> committerName() {
        return Optional.ofNullable(this.committerName);
    }

    /**
     * The date and time the commit was created. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time the commit was created. In ISO 8601 format (2019-03-15T08:00:00Z).
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The git commit full SHA
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The git commit full SHA
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The commit message.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return The commit message.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The full SHA of any parent commits.
     * 
     */
    @Import(name="parentIds")
    private @Nullable Output<List<String>> parentIds;

    /**
     * @return The full SHA of any parent commits.
     * 
     */
    public Optional<Output<List<String>>> parentIds() {
        return Optional.ofNullable(this.parentIds);
    }

    /**
     * The git commit short SHA.
     * 
     */
    @Import(name="shortId")
    private @Nullable Output<String> shortId;

    /**
     * @return The git commit short SHA.
     * 
     */
    public Optional<Output<String>> shortId() {
        return Optional.ofNullable(this.shortId);
    }

    /**
     * The title of the commit.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the commit.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private ReleaseCommitArgs() {}

    private ReleaseCommitArgs(ReleaseCommitArgs $) {
        this.authorEmail = $.authorEmail;
        this.authorName = $.authorName;
        this.authoredDate = $.authoredDate;
        this.committedDate = $.committedDate;
        this.committerEmail = $.committerEmail;
        this.committerName = $.committerName;
        this.createdAt = $.createdAt;
        this.id = $.id;
        this.message = $.message;
        this.parentIds = $.parentIds;
        this.shortId = $.shortId;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseCommitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseCommitArgs $;

        public Builder() {
            $ = new ReleaseCommitArgs();
        }

        public Builder(ReleaseCommitArgs defaults) {
            $ = new ReleaseCommitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorEmail The email address of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorEmail(@Nullable Output<String> authorEmail) {
            $.authorEmail = authorEmail;
            return this;
        }

        /**
         * @param authorEmail The email address of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorEmail(String authorEmail) {
            return authorEmail(Output.of(authorEmail));
        }

        /**
         * @param authorName The name of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorName(@Nullable Output<String> authorName) {
            $.authorName = authorName;
            return this;
        }

        /**
         * @param authorName The name of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorName(String authorName) {
            return authorName(Output.of(authorName));
        }

        /**
         * @param authoredDate The date and time the commit was authored. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder authoredDate(@Nullable Output<String> authoredDate) {
            $.authoredDate = authoredDate;
            return this;
        }

        /**
         * @param authoredDate The date and time the commit was authored. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder authoredDate(String authoredDate) {
            return authoredDate(Output.of(authoredDate));
        }

        /**
         * @param committedDate The date and time the commit was made. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder committedDate(@Nullable Output<String> committedDate) {
            $.committedDate = committedDate;
            return this;
        }

        /**
         * @param committedDate The date and time the commit was made. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder committedDate(String committedDate) {
            return committedDate(Output.of(committedDate));
        }

        /**
         * @param committerEmail The email address of the committer.
         * 
         * @return builder
         * 
         */
        public Builder committerEmail(@Nullable Output<String> committerEmail) {
            $.committerEmail = committerEmail;
            return this;
        }

        /**
         * @param committerEmail The email address of the committer.
         * 
         * @return builder
         * 
         */
        public Builder committerEmail(String committerEmail) {
            return committerEmail(Output.of(committerEmail));
        }

        /**
         * @param committerName The name of the committer.
         * 
         * @return builder
         * 
         */
        public Builder committerName(@Nullable Output<String> committerName) {
            $.committerName = committerName;
            return this;
        }

        /**
         * @param committerName The name of the committer.
         * 
         * @return builder
         * 
         */
        public Builder committerName(String committerName) {
            return committerName(Output.of(committerName));
        }

        /**
         * @param createdAt The date and time the commit was created. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time the commit was created. In ISO 8601 format (2019-03-15T08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param id The git commit full SHA
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The git commit full SHA
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param message The commit message.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message The commit message.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param parentIds The full SHA of any parent commits.
         * 
         * @return builder
         * 
         */
        public Builder parentIds(@Nullable Output<List<String>> parentIds) {
            $.parentIds = parentIds;
            return this;
        }

        /**
         * @param parentIds The full SHA of any parent commits.
         * 
         * @return builder
         * 
         */
        public Builder parentIds(List<String> parentIds) {
            return parentIds(Output.of(parentIds));
        }

        /**
         * @param parentIds The full SHA of any parent commits.
         * 
         * @return builder
         * 
         */
        public Builder parentIds(String... parentIds) {
            return parentIds(List.of(parentIds));
        }

        /**
         * @param shortId The git commit short SHA.
         * 
         * @return builder
         * 
         */
        public Builder shortId(@Nullable Output<String> shortId) {
            $.shortId = shortId;
            return this;
        }

        /**
         * @param shortId The git commit short SHA.
         * 
         * @return builder
         * 
         */
        public Builder shortId(String shortId) {
            return shortId(Output.of(shortId));
        }

        /**
         * @param title The title of the commit.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the commit.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public ReleaseCommitArgs build() {
            return $;
        }
    }

}
