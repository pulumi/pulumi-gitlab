// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectProtectedEnvironmentArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectProtectedEnvironmentState;
import com.pulumi.gitlab.outputs.ProjectProtectedEnvironmentApprovalRule;
import com.pulumi.gitlab.outputs.ProjectProtectedEnvironmentDeployAccessLevel;
import com.pulumi.gitlab.outputs.ProjectProtectedEnvironmentDeployAccessLevelsAttribute;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectProtectedEnvironment` resource allows to manage the lifecycle of a protected environment in a project.
 * 
 * &gt; In order to use a user or group in the `deploy_access_levels` configuration,
 *    you need to make sure that users have access to the project and groups must have this project shared.
 *    You may use the `gitlab.ProjectMembership` and `gitlab_project_shared_group` resources to achieve this.
 *    Unfortunately, the GitLab API does not complain about users and groups without access to the project and just ignores those.
 *    In case this happens you will get perpetual state diffs.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_environments/)
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_protected_environment`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_protected_environment.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab protected environments can be imported using an id made up of `projectId:environmentName`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment bar 123:production
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment")
public class ProjectProtectedEnvironment extends com.pulumi.resources.CustomResource {
    /**
     * Array of approval rules to deploy, with each described by a hash. Elements in the `approval_rules` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    @Export(name="approvalRules", refs={List.class,ProjectProtectedEnvironmentApprovalRule.class}, tree="[0,1]")
    private Output<List<ProjectProtectedEnvironmentApprovalRule>> approvalRules;

    /**
     * @return Array of approval rules to deploy, with each described by a hash. Elements in the `approval_rules` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    public Output<List<ProjectProtectedEnvironmentApprovalRule>> approvalRules() {
        return this.approvalRules;
    }
    /**
     * Array of access levels allowed to deploy, with each described by a hash.  Elements in the `deploy_access_levels` should be one of `user_id`, `group_id` or `access_level`.
     * 
     * @deprecated
     * This attribute is deprecated. Use `deploy_access_levels_attribute` instead.
     * 
     */
    @Deprecated /* This attribute is deprecated. Use `deploy_access_levels_attribute` instead. */
    @Export(name="deployAccessLevels", refs={List.class,ProjectProtectedEnvironmentDeployAccessLevel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ProjectProtectedEnvironmentDeployAccessLevel>> deployAccessLevels;

    /**
     * @return Array of access levels allowed to deploy, with each described by a hash.  Elements in the `deploy_access_levels` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    public Output<Optional<List<ProjectProtectedEnvironmentDeployAccessLevel>>> deployAccessLevels() {
        return Codegen.optional(this.deployAccessLevels);
    }
    /**
     * Array of access levels allowed to deploy, with each described by a hash.  Elements in the `deploy_access_levels` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    @Export(name="deployAccessLevelsAttributes", refs={List.class,ProjectProtectedEnvironmentDeployAccessLevelsAttribute.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ProjectProtectedEnvironmentDeployAccessLevelsAttribute>> deployAccessLevelsAttributes;

    /**
     * @return Array of access levels allowed to deploy, with each described by a hash.  Elements in the `deploy_access_levels` should be one of `user_id`, `group_id` or `access_level`.
     * 
     */
    public Output<Optional<List<ProjectProtectedEnvironmentDeployAccessLevelsAttribute>>> deployAccessLevelsAttributes() {
        return Codegen.optional(this.deployAccessLevelsAttributes);
    }
    /**
     * The name of the environment.
     * 
     */
    @Export(name="environment", refs={String.class}, tree="[0]")
    private Output<String> environment;

    /**
     * @return The name of the environment.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }
    /**
     * The ID or full path of the project which the protected environment is created against.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or full path of the project which the protected environment is created against.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectProtectedEnvironment(java.lang.String name) {
        this(name, ProjectProtectedEnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectProtectedEnvironment(java.lang.String name, ProjectProtectedEnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectProtectedEnvironment(java.lang.String name, ProjectProtectedEnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectProtectedEnvironment(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectProtectedEnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectProtectedEnvironmentArgs makeArgs(ProjectProtectedEnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectProtectedEnvironmentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectProtectedEnvironment get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectProtectedEnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectProtectedEnvironment(name, id, state, options);
    }
}
