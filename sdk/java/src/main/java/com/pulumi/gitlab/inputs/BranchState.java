// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.BranchCommitArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchState extends com.pulumi.resources.ResourceArgs {

    public static final BranchState Empty = new BranchState();

    /**
     * Bool, true if you can push to the branch.
     * 
     */
    @Import(name="canPush")
    private @Nullable Output<Boolean> canPush;

    /**
     * @return Bool, true if you can push to the branch.
     * 
     */
    public Optional<Output<Boolean>> canPush() {
        return Optional.ofNullable(this.canPush);
    }

    /**
     * The commit associated with the branch ref.
     * 
     */
    @Import(name="commits")
    private @Nullable Output<List<BranchCommitArgs>> commits;

    /**
     * @return The commit associated with the branch ref.
     * 
     */
    public Optional<Output<List<BranchCommitArgs>>> commits() {
        return Optional.ofNullable(this.commits);
    }

    /**
     * Bool, true if branch is the default branch for the project.
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return Bool, true if branch is the default branch for the project.
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * Bool, true if developer level access allows to merge branch.
     * 
     */
    @Import(name="developerCanMerge")
    private @Nullable Output<Boolean> developerCanMerge;

    /**
     * @return Bool, true if developer level access allows to merge branch.
     * 
     */
    public Optional<Output<Boolean>> developerCanMerge() {
        return Optional.ofNullable(this.developerCanMerge);
    }

    /**
     * Bool, true if developer level access allows git push.
     * 
     */
    @Import(name="developerCanPush")
    private @Nullable Output<Boolean> developerCanPush;

    /**
     * @return Bool, true if developer level access allows git push.
     * 
     */
    public Optional<Output<Boolean>> developerCanPush() {
        return Optional.ofNullable(this.developerCanPush);
    }

    /**
     * Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
     * 
     */
    @Import(name="keepOnDestroy")
    private @Nullable Output<Boolean> keepOnDestroy;

    /**
     * @return Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
     * 
     */
    public Optional<Output<Boolean>> keepOnDestroy() {
        return Optional.ofNullable(this.keepOnDestroy);
    }

    /**
     * Bool, true if the branch has been merged into its parent.
     * 
     */
    @Import(name="merged")
    private @Nullable Output<Boolean> merged;

    /**
     * @return Bool, true if the branch has been merged into its parent.
     * 
     */
    public Optional<Output<Boolean>> merged() {
        return Optional.ofNullable(this.merged);
    }

    /**
     * The name for this branch.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for this branch.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or full path of the project which the branch is created against.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or full path of the project which the branch is created against.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Bool, true if branch has branch protection.
     * 
     */
    @Import(name="protected")
    private @Nullable Output<Boolean> protected_;

    /**
     * @return Bool, true if branch has branch protection.
     * 
     */
    public Optional<Output<Boolean>> protected_() {
        return Optional.ofNullable(this.protected_);
    }

    /**
     * The ref which the branch is created from.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return The ref which the branch is created from.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * The url of the created branch (https).
     * 
     */
    @Import(name="webUrl")
    private @Nullable Output<String> webUrl;

    /**
     * @return The url of the created branch (https).
     * 
     */
    public Optional<Output<String>> webUrl() {
        return Optional.ofNullable(this.webUrl);
    }

    private BranchState() {}

    private BranchState(BranchState $) {
        this.canPush = $.canPush;
        this.commits = $.commits;
        this.default_ = $.default_;
        this.developerCanMerge = $.developerCanMerge;
        this.developerCanPush = $.developerCanPush;
        this.keepOnDestroy = $.keepOnDestroy;
        this.merged = $.merged;
        this.name = $.name;
        this.project = $.project;
        this.protected_ = $.protected_;
        this.ref = $.ref;
        this.webUrl = $.webUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchState $;

        public Builder() {
            $ = new BranchState();
        }

        public Builder(BranchState defaults) {
            $ = new BranchState(Objects.requireNonNull(defaults));
        }

        /**
         * @param canPush Bool, true if you can push to the branch.
         * 
         * @return builder
         * 
         */
        public Builder canPush(@Nullable Output<Boolean> canPush) {
            $.canPush = canPush;
            return this;
        }

        /**
         * @param canPush Bool, true if you can push to the branch.
         * 
         * @return builder
         * 
         */
        public Builder canPush(Boolean canPush) {
            return canPush(Output.of(canPush));
        }

        /**
         * @param commits The commit associated with the branch ref.
         * 
         * @return builder
         * 
         */
        public Builder commits(@Nullable Output<List<BranchCommitArgs>> commits) {
            $.commits = commits;
            return this;
        }

        /**
         * @param commits The commit associated with the branch ref.
         * 
         * @return builder
         * 
         */
        public Builder commits(List<BranchCommitArgs> commits) {
            return commits(Output.of(commits));
        }

        /**
         * @param commits The commit associated with the branch ref.
         * 
         * @return builder
         * 
         */
        public Builder commits(BranchCommitArgs... commits) {
            return commits(List.of(commits));
        }

        /**
         * @param default_ Bool, true if branch is the default branch for the project.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Bool, true if branch is the default branch for the project.
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param developerCanMerge Bool, true if developer level access allows to merge branch.
         * 
         * @return builder
         * 
         */
        public Builder developerCanMerge(@Nullable Output<Boolean> developerCanMerge) {
            $.developerCanMerge = developerCanMerge;
            return this;
        }

        /**
         * @param developerCanMerge Bool, true if developer level access allows to merge branch.
         * 
         * @return builder
         * 
         */
        public Builder developerCanMerge(Boolean developerCanMerge) {
            return developerCanMerge(Output.of(developerCanMerge));
        }

        /**
         * @param developerCanPush Bool, true if developer level access allows git push.
         * 
         * @return builder
         * 
         */
        public Builder developerCanPush(@Nullable Output<Boolean> developerCanPush) {
            $.developerCanPush = developerCanPush;
            return this;
        }

        /**
         * @param developerCanPush Bool, true if developer level access allows git push.
         * 
         * @return builder
         * 
         */
        public Builder developerCanPush(Boolean developerCanPush) {
            return developerCanPush(Output.of(developerCanPush));
        }

        /**
         * @param keepOnDestroy Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
         * 
         * @return builder
         * 
         */
        public Builder keepOnDestroy(@Nullable Output<Boolean> keepOnDestroy) {
            $.keepOnDestroy = keepOnDestroy;
            return this;
        }

        /**
         * @param keepOnDestroy Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
         * 
         * @return builder
         * 
         */
        public Builder keepOnDestroy(Boolean keepOnDestroy) {
            return keepOnDestroy(Output.of(keepOnDestroy));
        }

        /**
         * @param merged Bool, true if the branch has been merged into its parent.
         * 
         * @return builder
         * 
         */
        public Builder merged(@Nullable Output<Boolean> merged) {
            $.merged = merged;
            return this;
        }

        /**
         * @param merged Bool, true if the branch has been merged into its parent.
         * 
         * @return builder
         * 
         */
        public Builder merged(Boolean merged) {
            return merged(Output.of(merged));
        }

        /**
         * @param name The name for this branch.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for this branch.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or full path of the project which the branch is created against.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project which the branch is created against.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protected_ Bool, true if branch has branch protection.
         * 
         * @return builder
         * 
         */
        public Builder protected_(@Nullable Output<Boolean> protected_) {
            $.protected_ = protected_;
            return this;
        }

        /**
         * @param protected_ Bool, true if branch has branch protection.
         * 
         * @return builder
         * 
         */
        public Builder protected_(Boolean protected_) {
            return protected_(Output.of(protected_));
        }

        /**
         * @param ref The ref which the branch is created from.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref The ref which the branch is created from.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param webUrl The url of the created branch (https).
         * 
         * @return builder
         * 
         */
        public Builder webUrl(@Nullable Output<String> webUrl) {
            $.webUrl = webUrl;
            return this;
        }

        /**
         * @param webUrl The url of the created branch (https).
         * 
         * @return builder
         * 
         */
        public Builder webUrl(String webUrl) {
            return webUrl(Output.of(webUrl));
        }

        public BranchState build() {
            return $;
        }
    }

}
