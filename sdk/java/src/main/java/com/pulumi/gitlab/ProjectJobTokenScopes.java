// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectJobTokenScopesArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectJobTokenScopesState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectJobTokenScopes` resource allows to manage the CI/CD Job Token scopes in a project.
 * Any project or group not within the defined set of `targetProjectIds` or `targetGroupIds`, respectively, will be removed,
 * which allows this resource to be used as an explicit deny.
 * 
 * &gt; Conflicts with the use of `gitlab.ProjectJobTokenScope` when used on the same project. Use one or the other to ensure the desired state.
 * 
 * &gt; If the `enabled` property is false, any project or group will be allowed regardless of the given allowlist attributes.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_job_token_scopes/)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.ProjectJobTokenScopes;
 * import com.pulumi.gitlab.ProjectJobTokenScopesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var allowedSingleProject = new ProjectJobTokenScopes("allowedSingleProject", ProjectJobTokenScopesArgs.builder()
 *             .project("111")
 *             .targetProjectIds(123)
 *             .build());
 * 
 *         var allowedMultipleProject = new ProjectJobTokenScopes("allowedMultipleProject", ProjectJobTokenScopesArgs.builder()
 *             .project("111")
 *             .targetProjectIds(            
 *                 123,
 *                 456,
 *                 789)
 *             .build());
 * 
 *         var allowedMultipleGroups = new ProjectJobTokenScopes("allowedMultipleGroups", ProjectJobTokenScopesArgs.builder()
 *             .project("111")
 *             .targetProjectIds()
 *             .targetGroupIds(            
 *                 321,
 *                 654)
 *             .build());
 * 
 *         // This will remove all job token scopes, even if added outside of TF.
 *         var explicitDeny = new ProjectJobTokenScopes("explicitDeny", ProjectJobTokenScopesArgs.builder()
 *             .project("111")
 *             .targetProjectIds()
 *             .build());
 * 
 *         // This shows the explicit behavior of the enabled flag with a list of projects and groups.
 *         var allowProjectsAndGroups = new ProjectJobTokenScopes("allowProjectsAndGroups", ProjectJobTokenScopesArgs.builder()
 *             .project("111")
 *             .enabled(true)
 *             .targetProjectIds(            
 *                 123,
 *                 456,
 *                 789)
 *             .targetGroupIds(            
 *                 321,
 *                 654)
 *             .build());
 * 
 *         // This allows all projects and groups (disabling the CI Job Token scope protection)
 *         var allowAll = new ProjectJobTokenScopes("allowAll", ProjectJobTokenScopesArgs.builder()
 *             .project("111")
 *             .enabled(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_job_token_scopes`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_job_token_scopes.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab project job token scopes can be imported using an id made up of just the `project_id`
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes bar 123
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes")
public class ProjectJobTokenScopes extends com.pulumi.resources.CustomResource {
    /**
     * Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `targetProjectIds` or `targetGroupIds`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `targetProjectIds` or `targetGroupIds`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The ID or full path of the project.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The ID of the project.
     * 
     * @deprecated
     * `projectId` has been deprecated and will be removed in 19.0. Use `project` instead.
     * 
     */
    @Deprecated /* `projectId` has been deprecated and will be removed in 19.0. Use `project` instead. */
    @Export(name="projectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<Integer> projectId() {
        return this.projectId;
    }
    /**
     * A set of group IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    @Export(name="targetGroupIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> targetGroupIds;

    /**
     * @return A set of group IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    public Output<List<Integer>> targetGroupIds() {
        return this.targetGroupIds;
    }
    /**
     * A set of project IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    @Export(name="targetProjectIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> targetProjectIds;

    /**
     * @return A set of project IDs that are in the CI/CD job token inbound allowlist.
     * 
     */
    public Output<List<Integer>> targetProjectIds() {
        return this.targetProjectIds;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectJobTokenScopes(java.lang.String name) {
        this(name, ProjectJobTokenScopesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectJobTokenScopes(java.lang.String name, @Nullable ProjectJobTokenScopesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectJobTokenScopes(java.lang.String name, @Nullable ProjectJobTokenScopesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectJobTokenScopes(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectJobTokenScopesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectJobTokenScopesArgs makeArgs(@Nullable ProjectJobTokenScopesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectJobTokenScopesArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectJobTokenScopes get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectJobTokenScopesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectJobTokenScopes(name, id, state, options);
    }
}
