// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProjectPushRule {
    private String authorEmailRegex;
    private String branchNameRegex;
    private Boolean commitCommitterCheck;
    private String commitMessageNegativeRegex;
    private String commitMessageRegex;
    private Boolean denyDeleteTag;
    private String fileNameRegex;
    private Integer maxFileSize;
    private Boolean memberCheck;
    private Boolean preventSecrets;
    private Boolean rejectUnsignedCommits;

    private GetProjectPushRule() {}
    public String authorEmailRegex() {
        return this.authorEmailRegex;
    }
    public String branchNameRegex() {
        return this.branchNameRegex;
    }
    public Boolean commitCommitterCheck() {
        return this.commitCommitterCheck;
    }
    public String commitMessageNegativeRegex() {
        return this.commitMessageNegativeRegex;
    }
    public String commitMessageRegex() {
        return this.commitMessageRegex;
    }
    public Boolean denyDeleteTag() {
        return this.denyDeleteTag;
    }
    public String fileNameRegex() {
        return this.fileNameRegex;
    }
    public Integer maxFileSize() {
        return this.maxFileSize;
    }
    public Boolean memberCheck() {
        return this.memberCheck;
    }
    public Boolean preventSecrets() {
        return this.preventSecrets;
    }
    public Boolean rejectUnsignedCommits() {
        return this.rejectUnsignedCommits;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectPushRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorEmailRegex;
        private String branchNameRegex;
        private Boolean commitCommitterCheck;
        private String commitMessageNegativeRegex;
        private String commitMessageRegex;
        private Boolean denyDeleteTag;
        private String fileNameRegex;
        private Integer maxFileSize;
        private Boolean memberCheck;
        private Boolean preventSecrets;
        private Boolean rejectUnsignedCommits;
        public Builder() {}
        public Builder(GetProjectPushRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorEmailRegex = defaults.authorEmailRegex;
    	      this.branchNameRegex = defaults.branchNameRegex;
    	      this.commitCommitterCheck = defaults.commitCommitterCheck;
    	      this.commitMessageNegativeRegex = defaults.commitMessageNegativeRegex;
    	      this.commitMessageRegex = defaults.commitMessageRegex;
    	      this.denyDeleteTag = defaults.denyDeleteTag;
    	      this.fileNameRegex = defaults.fileNameRegex;
    	      this.maxFileSize = defaults.maxFileSize;
    	      this.memberCheck = defaults.memberCheck;
    	      this.preventSecrets = defaults.preventSecrets;
    	      this.rejectUnsignedCommits = defaults.rejectUnsignedCommits;
        }

        @CustomType.Setter
        public Builder authorEmailRegex(String authorEmailRegex) {
            this.authorEmailRegex = Objects.requireNonNull(authorEmailRegex);
            return this;
        }
        @CustomType.Setter
        public Builder branchNameRegex(String branchNameRegex) {
            this.branchNameRegex = Objects.requireNonNull(branchNameRegex);
            return this;
        }
        @CustomType.Setter
        public Builder commitCommitterCheck(Boolean commitCommitterCheck) {
            this.commitCommitterCheck = Objects.requireNonNull(commitCommitterCheck);
            return this;
        }
        @CustomType.Setter
        public Builder commitMessageNegativeRegex(String commitMessageNegativeRegex) {
            this.commitMessageNegativeRegex = Objects.requireNonNull(commitMessageNegativeRegex);
            return this;
        }
        @CustomType.Setter
        public Builder commitMessageRegex(String commitMessageRegex) {
            this.commitMessageRegex = Objects.requireNonNull(commitMessageRegex);
            return this;
        }
        @CustomType.Setter
        public Builder denyDeleteTag(Boolean denyDeleteTag) {
            this.denyDeleteTag = Objects.requireNonNull(denyDeleteTag);
            return this;
        }
        @CustomType.Setter
        public Builder fileNameRegex(String fileNameRegex) {
            this.fileNameRegex = Objects.requireNonNull(fileNameRegex);
            return this;
        }
        @CustomType.Setter
        public Builder maxFileSize(Integer maxFileSize) {
            this.maxFileSize = Objects.requireNonNull(maxFileSize);
            return this;
        }
        @CustomType.Setter
        public Builder memberCheck(Boolean memberCheck) {
            this.memberCheck = Objects.requireNonNull(memberCheck);
            return this;
        }
        @CustomType.Setter
        public Builder preventSecrets(Boolean preventSecrets) {
            this.preventSecrets = Objects.requireNonNull(preventSecrets);
            return this;
        }
        @CustomType.Setter
        public Builder rejectUnsignedCommits(Boolean rejectUnsignedCommits) {
            this.rejectUnsignedCommits = Objects.requireNonNull(rejectUnsignedCommits);
            return this;
        }
        public GetProjectPushRule build() {
            final var o = new GetProjectPushRule();
            o.authorEmailRegex = authorEmailRegex;
            o.branchNameRegex = branchNameRegex;
            o.commitCommitterCheck = commitCommitterCheck;
            o.commitMessageNegativeRegex = commitMessageNegativeRegex;
            o.commitMessageRegex = commitMessageRegex;
            o.denyDeleteTag = denyDeleteTag;
            o.fileNameRegex = fileNameRegex;
            o.maxFileSize = maxFileSize;
            o.memberCheck = memberCheck;
            o.preventSecrets = preventSecrets;
            o.rejectUnsignedCommits = rejectUnsignedCommits;
            return o;
        }
    }
}
