// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectDeployTokenArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectDeployTokenState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectDeployToken` resource allows you to manage the lifecycle of deploy tokens on a project.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_tokens/)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.ProjectDeployToken;
 * import com.pulumi.gitlab.ProjectDeployTokenArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.TimestampArgs;
 * import com.pulumi.std.inputs.TimeaddArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Example Usage
 *         var example = new ProjectDeployToken("example", ProjectDeployTokenArgs.builder()
 *             .project("example/deploying")
 *             .name("Example project deploy token")
 *             .username("example-username")
 *             .expiresAt("2020-03-14T00:00:00.000Z")
 *             .scopes(            
 *                 "read_repository",
 *                 "read_registry")
 *             .build());
 * 
 *         var example_two = new ProjectDeployToken("example-two", ProjectDeployTokenArgs.builder()
 *             .project("12345678")
 *             .name("Example project deploy token expires in 24h")
 *             .expiresAt(StdFunctions.timeadd(TimeaddArgs.builder()
 *                 .duration(StdFunctions.timestamp(TimestampArgs.builder()
 *                     .build()).result())
 *                 .timestamp("24h")
 *                 .build()).result())
 *             .scopes(            
 *                 "read_repository",
 *                 "read_registry")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_deploy_token`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_deploy_token.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab project deploy tokens can be imported using an id made up of `{project_id}:{deploy_token_id}`.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectDeployToken:ProjectDeployToken project_token 1:4
 * ```
 * 
 * Note: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 * 
 */
@ResourceType(type="gitlab:index/projectDeployToken:ProjectDeployToken")
public class ProjectDeployToken extends com.pulumi.resources.CustomResource {
    /**
     * True if the token is expired.
     * 
     */
    @Export(name="expired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> expired;

    /**
     * @return True if the token is expired.
     * 
     */
    public Output<Boolean> expired() {
        return this.expired;
    }
    /**
     * Time the token expires in RFC3339 format. Not set by default.
     * 
     */
    @Export(name="expiresAt", refs={String.class}, tree="[0]")
    private Output<String> expiresAt;

    /**
     * @return Time the token expires in RFC3339 format. Not set by default.
     * 
     */
    public Output<String> expiresAt() {
        return this.expiresAt;
    }
    /**
     * A name to describe the deploy token with.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A name to describe the deploy token with.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Id or full path of the project.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The Id or full path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * True if the token is revoked.
     * 
     */
    @Export(name="revoked", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> revoked;

    /**
     * @return True if the token is revoked.
     * 
     */
    public Output<Boolean> revoked() {
        return this.revoked;
    }
    /**
     * The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
     * 
     */
    @Export(name="scopes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> scopes;

    /**
     * @return The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }
    /**
     * The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     * 
     */
    public Output<String> username() {
        return this.username;
    }
    /**
     * Wether to validate if the expiration date is in the future.
     * 
     */
    @Export(name="validatePastExpirationDate", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> validatePastExpirationDate;

    /**
     * @return Wether to validate if the expiration date is in the future.
     * 
     */
    public Output<Boolean> validatePastExpirationDate() {
        return this.validatePastExpirationDate;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectDeployToken(java.lang.String name) {
        this(name, ProjectDeployTokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectDeployToken(java.lang.String name, ProjectDeployTokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectDeployToken(java.lang.String name, ProjectDeployTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectDeployToken:ProjectDeployToken", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectDeployToken(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectDeployTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectDeployToken:ProjectDeployToken", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectDeployTokenArgs makeArgs(ProjectDeployTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectDeployTokenArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "token"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectDeployToken get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectDeployTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectDeployToken(name, id, state, options);
    }
}
