// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectProtectedBranchesProtectedBranchArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetProjectProtectedBranchesProtectedBranchArgs Empty = new GetProjectProtectedBranchesProtectedBranchArgs();

    /**
     * Whether force push is allowed.
     * 
     */
    @Import(name="allowForcePush", required=true)
    private Output<Boolean> allowForcePush;

    /**
     * @return Whether force push is allowed.
     * 
     */
    public Output<Boolean> allowForcePush() {
        return this.allowForcePush;
    }

    /**
     * Reject code pushes that change files listed in the CODEOWNERS file.
     * 
     */
    @Import(name="codeOwnerApprovalRequired", required=true)
    private Output<Boolean> codeOwnerApprovalRequired;

    /**
     * @return Reject code pushes that change files listed in the CODEOWNERS file.
     * 
     */
    public Output<Boolean> codeOwnerApprovalRequired() {
        return this.codeOwnerApprovalRequired;
    }

    /**
     * The ID of this resource.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The ID of this resource.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * Array of access levels and user(s)/group(s) allowed to merge to protected branch.
     * 
     */
    @Import(name="mergeAccessLevels")
    private @Nullable Output<List<GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs>> mergeAccessLevels;

    /**
     * @return Array of access levels and user(s)/group(s) allowed to merge to protected branch.
     * 
     */
    public Optional<Output<List<GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs>>> mergeAccessLevels() {
        return Optional.ofNullable(this.mergeAccessLevels);
    }

    /**
     * The name of the protected branch.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the protected branch.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Array of access levels and user(s)/group(s) allowed to push to protected branch.
     * 
     */
    @Import(name="pushAccessLevels")
    private @Nullable Output<List<GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs>> pushAccessLevels;

    /**
     * @return Array of access levels and user(s)/group(s) allowed to push to protected branch.
     * 
     */
    public Optional<Output<List<GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs>>> pushAccessLevels() {
        return Optional.ofNullable(this.pushAccessLevels);
    }

    private GetProjectProtectedBranchesProtectedBranchArgs() {}

    private GetProjectProtectedBranchesProtectedBranchArgs(GetProjectProtectedBranchesProtectedBranchArgs $) {
        this.allowForcePush = $.allowForcePush;
        this.codeOwnerApprovalRequired = $.codeOwnerApprovalRequired;
        this.id = $.id;
        this.mergeAccessLevels = $.mergeAccessLevels;
        this.name = $.name;
        this.pushAccessLevels = $.pushAccessLevels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectProtectedBranchesProtectedBranchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectProtectedBranchesProtectedBranchArgs $;

        public Builder() {
            $ = new GetProjectProtectedBranchesProtectedBranchArgs();
        }

        public Builder(GetProjectProtectedBranchesProtectedBranchArgs defaults) {
            $ = new GetProjectProtectedBranchesProtectedBranchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowForcePush Whether force push is allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowForcePush(Output<Boolean> allowForcePush) {
            $.allowForcePush = allowForcePush;
            return this;
        }

        /**
         * @param allowForcePush Whether force push is allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowForcePush(Boolean allowForcePush) {
            return allowForcePush(Output.of(allowForcePush));
        }

        /**
         * @param codeOwnerApprovalRequired Reject code pushes that change files listed in the CODEOWNERS file.
         * 
         * @return builder
         * 
         */
        public Builder codeOwnerApprovalRequired(Output<Boolean> codeOwnerApprovalRequired) {
            $.codeOwnerApprovalRequired = codeOwnerApprovalRequired;
            return this;
        }

        /**
         * @param codeOwnerApprovalRequired Reject code pushes that change files listed in the CODEOWNERS file.
         * 
         * @return builder
         * 
         */
        public Builder codeOwnerApprovalRequired(Boolean codeOwnerApprovalRequired) {
            return codeOwnerApprovalRequired(Output.of(codeOwnerApprovalRequired));
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(@Nullable Output<List<GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs>> mergeAccessLevels) {
            $.mergeAccessLevels = mergeAccessLevels;
            return this;
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(List<GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs> mergeAccessLevels) {
            return mergeAccessLevels(Output.of(mergeAccessLevels));
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs... mergeAccessLevels) {
            return mergeAccessLevels(List.of(mergeAccessLevels));
        }

        /**
         * @param name The name of the protected branch.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the protected branch.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(@Nullable Output<List<GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs>> pushAccessLevels) {
            $.pushAccessLevels = pushAccessLevels;
            return this;
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(List<GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs> pushAccessLevels) {
            return pushAccessLevels(Output.of(pushAccessLevels));
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs... pushAccessLevels) {
            return pushAccessLevels(List.of(pushAccessLevels));
        }

        public GetProjectProtectedBranchesProtectedBranchArgs build() {
            if ($.allowForcePush == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranchArgs", "allowForcePush");
            }
            if ($.codeOwnerApprovalRequired == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranchArgs", "codeOwnerApprovalRequired");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranchArgs", "id");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranchArgs", "name");
            }
            return $;
        }
    }

}
