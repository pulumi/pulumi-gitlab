// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.GroupHookArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.GroupHookState;
import com.pulumi.gitlab.outputs.GroupHookCustomHeader;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.GroupHook` resource allows to manage the lifecycle of a group hook.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/)
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_hook`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_group_hook.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * A GitLab Group Hook can be imported using a key composed of `&lt;group-id&gt;:&lt;hook-id&gt;`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/groupHook:GroupHook example &#34;12345:1&#34;
 * ```
 * 
 * NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 * 
 */
@ResourceType(type="gitlab:index/groupHook:GroupHook")
public class GroupHook extends com.pulumi.resources.CustomResource {
    /**
     * Filter push events by branch. Valid values are: `wildcard`, `regex`, `all_branches`.
     * 
     */
    @Export(name="branchFilterStrategy", refs={String.class}, tree="[0]")
    private Output<String> branchFilterStrategy;

    /**
     * @return Filter push events by branch. Valid values are: `wildcard`, `regex`, `all_branches`.
     * 
     */
    public Output<String> branchFilterStrategy() {
        return this.branchFilterStrategy;
    }
    /**
     * Invoke the hook for confidential issues events.
     * 
     */
    @Export(name="confidentialIssuesEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> confidentialIssuesEvents;

    /**
     * @return Invoke the hook for confidential issues events.
     * 
     */
    public Output<Boolean> confidentialIssuesEvents() {
        return this.confidentialIssuesEvents;
    }
    /**
     * Invoke the hook for confidential note events.
     * 
     */
    @Export(name="confidentialNoteEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> confidentialNoteEvents;

    /**
     * @return Invoke the hook for confidential note events.
     * 
     */
    public Output<Boolean> confidentialNoteEvents() {
        return this.confidentialNoteEvents;
    }
    /**
     * Custom headers for the project webhook.
     * 
     */
    @Export(name="customHeaders", refs={List.class,GroupHookCustomHeader.class}, tree="[0,1]")
    private Output</* @Nullable */ List<GroupHookCustomHeader>> customHeaders;

    /**
     * @return Custom headers for the project webhook.
     * 
     */
    public Output<Optional<List<GroupHookCustomHeader>>> customHeaders() {
        return Codegen.optional(this.customHeaders);
    }
    /**
     * Custom webhook template.
     * 
     */
    @Export(name="customWebhookTemplate", refs={String.class}, tree="[0]")
    private Output<String> customWebhookTemplate;

    /**
     * @return Custom webhook template.
     * 
     */
    public Output<String> customWebhookTemplate() {
        return this.customWebhookTemplate;
    }
    /**
     * Invoke the hook for deployment events.
     * 
     */
    @Export(name="deploymentEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deploymentEvents;

    /**
     * @return Invoke the hook for deployment events.
     * 
     */
    public Output<Boolean> deploymentEvents() {
        return this.deploymentEvents;
    }
    /**
     * Description of the group webhook.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description of the group webhook.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Invoke the hook for emoji events.
     * 
     */
    @Export(name="emojiEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> emojiEvents;

    /**
     * @return Invoke the hook for emoji events.
     * 
     */
    public Output<Boolean> emojiEvents() {
        return this.emojiEvents;
    }
    /**
     * Enable SSL verification when invoking the hook.
     * 
     */
    @Export(name="enableSslVerification", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableSslVerification;

    /**
     * @return Enable SSL verification when invoking the hook.
     * 
     */
    public Output<Boolean> enableSslVerification() {
        return this.enableSslVerification;
    }
    /**
     * Invoke the hook for feature flag events.
     * 
     */
    @Export(name="featureFlagEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> featureFlagEvents;

    /**
     * @return Invoke the hook for feature flag events.
     * 
     */
    public Output<Boolean> featureFlagEvents() {
        return this.featureFlagEvents;
    }
    /**
     * The full path or id of the group to add the hook to.
     * 
     */
    @Export(name="group", refs={String.class}, tree="[0]")
    private Output<String> group;

    /**
     * @return The full path or id of the group to add the hook to.
     * 
     */
    public Output<String> group() {
        return this.group;
    }
    /**
     * The id of the group for the hook.
     * 
     */
    @Export(name="groupId", refs={Integer.class}, tree="[0]")
    private Output<Integer> groupId;

    /**
     * @return The id of the group for the hook.
     * 
     */
    public Output<Integer> groupId() {
        return this.groupId;
    }
    /**
     * The id of the group hook.
     * 
     */
    @Export(name="hookId", refs={Integer.class}, tree="[0]")
    private Output<Integer> hookId;

    /**
     * @return The id of the group hook.
     * 
     */
    public Output<Integer> hookId() {
        return this.hookId;
    }
    /**
     * Invoke the hook for issues events.
     * 
     */
    @Export(name="issuesEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> issuesEvents;

    /**
     * @return Invoke the hook for issues events.
     * 
     */
    public Output<Boolean> issuesEvents() {
        return this.issuesEvents;
    }
    /**
     * Invoke the hook for job events.
     * 
     */
    @Export(name="jobEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> jobEvents;

    /**
     * @return Invoke the hook for job events.
     * 
     */
    public Output<Boolean> jobEvents() {
        return this.jobEvents;
    }
    /**
     * Invoke the hook for merge requests events.
     * 
     */
    @Export(name="mergeRequestsEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> mergeRequestsEvents;

    /**
     * @return Invoke the hook for merge requests events.
     * 
     */
    public Output<Boolean> mergeRequestsEvents() {
        return this.mergeRequestsEvents;
    }
    /**
     * Name of the group webhook.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the group webhook.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Invoke the hook for note events.
     * 
     */
    @Export(name="noteEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> noteEvents;

    /**
     * @return Invoke the hook for note events.
     * 
     */
    public Output<Boolean> noteEvents() {
        return this.noteEvents;
    }
    /**
     * Invoke the hook for pipeline events.
     * 
     */
    @Export(name="pipelineEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> pipelineEvents;

    /**
     * @return Invoke the hook for pipeline events.
     * 
     */
    public Output<Boolean> pipelineEvents() {
        return this.pipelineEvents;
    }
    /**
     * Invoke the hook for push events.
     * 
     */
    @Export(name="pushEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> pushEvents;

    /**
     * @return Invoke the hook for push events.
     * 
     */
    public Output<Boolean> pushEvents() {
        return this.pushEvents;
    }
    /**
     * Invoke the hook for push events on matching branches only.
     * 
     */
    @Export(name="pushEventsBranchFilter", refs={String.class}, tree="[0]")
    private Output<String> pushEventsBranchFilter;

    /**
     * @return Invoke the hook for push events on matching branches only.
     * 
     */
    public Output<String> pushEventsBranchFilter() {
        return this.pushEventsBranchFilter;
    }
    /**
     * Invoke the hook for release events.
     * 
     */
    @Export(name="releasesEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> releasesEvents;

    /**
     * @return Invoke the hook for release events.
     * 
     */
    public Output<Boolean> releasesEvents() {
        return this.releasesEvents;
    }
    /**
     * Invoke the hook for subgroup events.
     * 
     */
    @Export(name="subgroupEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> subgroupEvents;

    /**
     * @return Invoke the hook for subgroup events.
     * 
     */
    public Output<Boolean> subgroupEvents() {
        return this.subgroupEvents;
    }
    /**
     * Invoke the hook for tag push events.
     * 
     */
    @Export(name="tagPushEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> tagPushEvents;

    /**
     * @return Invoke the hook for tag push events.
     * 
     */
    public Output<Boolean> tagPushEvents() {
        return this.tagPushEvents;
    }
    /**
     * A token to present when invoking the hook. The token is not available for imported resources.
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return A token to present when invoking the hook. The token is not available for imported resources.
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * The url of the hook to invoke. Forces re-creation to preserve `token`.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The url of the hook to invoke. Forces re-creation to preserve `token`.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Invoke the hook for wiki page events.
     * 
     */
    @Export(name="wikiPageEvents", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> wikiPageEvents;

    /**
     * @return Invoke the hook for wiki page events.
     * 
     */
    public Output<Boolean> wikiPageEvents() {
        return this.wikiPageEvents;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GroupHook(java.lang.String name) {
        this(name, GroupHookArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GroupHook(java.lang.String name, GroupHookArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GroupHook(java.lang.String name, GroupHookArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupHook:GroupHook", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GroupHook(java.lang.String name, Output<java.lang.String> id, @Nullable GroupHookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupHook:GroupHook", name, state, makeResourceOptions(options, id), false);
    }

    private static GroupHookArgs makeArgs(GroupHookArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GroupHookArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "token"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GroupHook get(java.lang.String name, Output<java.lang.String> id, @Nullable GroupHookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GroupHook(name, id, state, options);
    }
}
