// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectTagsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectTagsPlainArgs Empty = new GetProjectTagsPlainArgs();

    /**
     * Return tags ordered by `name` or `updated` fields. Default is `updated`.
     * 
     */
    @Import(name="orderBy")
    private @Nullable String orderBy;

    /**
     * @return Return tags ordered by `name` or `updated` fields. Default is `updated`.
     * 
     */
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public String project() {
        return this.project;
    }

    /**
     * Return list of tags matching the search criteria. You can use `^term` and `term$` to find tags that begin and end with `term` respectively. No other regular expressions are supported.
     * 
     */
    @Import(name="search")
    private @Nullable String search;

    /**
     * @return Return list of tags matching the search criteria. You can use `^term` and `term$` to find tags that begin and end with `term` respectively. No other regular expressions are supported.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Return tags sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    @Import(name="sort")
    private @Nullable String sort;

    /**
     * @return Return tags sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    public Optional<String> sort() {
        return Optional.ofNullable(this.sort);
    }

    private GetProjectTagsPlainArgs() {}

    private GetProjectTagsPlainArgs(GetProjectTagsPlainArgs $) {
        this.orderBy = $.orderBy;
        this.project = $.project;
        this.search = $.search;
        this.sort = $.sort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectTagsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectTagsPlainArgs $;

        public Builder() {
            $ = new GetProjectTagsPlainArgs();
        }

        public Builder(GetProjectTagsPlainArgs defaults) {
            $ = new GetProjectTagsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param orderBy Return tags ordered by `name` or `updated` fields. Default is `updated`.
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable String orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        /**
         * @param search Return list of tags matching the search criteria. You can use `^term` and `term$` to find tags that begin and end with `term` respectively. No other regular expressions are supported.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable String search) {
            $.search = search;
            return this;
        }

        /**
         * @param sort Return tags sorted in `asc` or `desc` order. Default is `desc`.
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable String sort) {
            $.sort = sort;
            return this;
        }

        public GetProjectTagsPlainArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectTagsPlainArgs", "project");
            }
            return $;
        }
    }

}
