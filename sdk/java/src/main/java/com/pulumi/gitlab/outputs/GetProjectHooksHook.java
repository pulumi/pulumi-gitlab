// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProjectHooksHook {
    private Boolean confidentialIssuesEvents;
    private Boolean confidentialNoteEvents;
    private Boolean deploymentEvents;
    private Boolean enableSslVerification;
    private Integer hookId;
    private Boolean issuesEvents;
    private Boolean jobEvents;
    private Boolean mergeRequestsEvents;
    private Boolean noteEvents;
    private Boolean pipelineEvents;
    private String project;
    private Integer projectId;
    private Boolean pushEvents;
    private String pushEventsBranchFilter;
    private Boolean releasesEvents;
    private Boolean tagPushEvents;
    private String token;
    private String url;
    private Boolean wikiPageEvents;

    private GetProjectHooksHook() {}
    public Boolean confidentialIssuesEvents() {
        return this.confidentialIssuesEvents;
    }
    public Boolean confidentialNoteEvents() {
        return this.confidentialNoteEvents;
    }
    public Boolean deploymentEvents() {
        return this.deploymentEvents;
    }
    public Boolean enableSslVerification() {
        return this.enableSslVerification;
    }
    public Integer hookId() {
        return this.hookId;
    }
    public Boolean issuesEvents() {
        return this.issuesEvents;
    }
    public Boolean jobEvents() {
        return this.jobEvents;
    }
    public Boolean mergeRequestsEvents() {
        return this.mergeRequestsEvents;
    }
    public Boolean noteEvents() {
        return this.noteEvents;
    }
    public Boolean pipelineEvents() {
        return this.pipelineEvents;
    }
    public String project() {
        return this.project;
    }
    public Integer projectId() {
        return this.projectId;
    }
    public Boolean pushEvents() {
        return this.pushEvents;
    }
    public String pushEventsBranchFilter() {
        return this.pushEventsBranchFilter;
    }
    public Boolean releasesEvents() {
        return this.releasesEvents;
    }
    public Boolean tagPushEvents() {
        return this.tagPushEvents;
    }
    public String token() {
        return this.token;
    }
    public String url() {
        return this.url;
    }
    public Boolean wikiPageEvents() {
        return this.wikiPageEvents;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectHooksHook defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean confidentialIssuesEvents;
        private Boolean confidentialNoteEvents;
        private Boolean deploymentEvents;
        private Boolean enableSslVerification;
        private Integer hookId;
        private Boolean issuesEvents;
        private Boolean jobEvents;
        private Boolean mergeRequestsEvents;
        private Boolean noteEvents;
        private Boolean pipelineEvents;
        private String project;
        private Integer projectId;
        private Boolean pushEvents;
        private String pushEventsBranchFilter;
        private Boolean releasesEvents;
        private Boolean tagPushEvents;
        private String token;
        private String url;
        private Boolean wikiPageEvents;
        public Builder() {}
        public Builder(GetProjectHooksHook defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.confidentialIssuesEvents = defaults.confidentialIssuesEvents;
    	      this.confidentialNoteEvents = defaults.confidentialNoteEvents;
    	      this.deploymentEvents = defaults.deploymentEvents;
    	      this.enableSslVerification = defaults.enableSslVerification;
    	      this.hookId = defaults.hookId;
    	      this.issuesEvents = defaults.issuesEvents;
    	      this.jobEvents = defaults.jobEvents;
    	      this.mergeRequestsEvents = defaults.mergeRequestsEvents;
    	      this.noteEvents = defaults.noteEvents;
    	      this.pipelineEvents = defaults.pipelineEvents;
    	      this.project = defaults.project;
    	      this.projectId = defaults.projectId;
    	      this.pushEvents = defaults.pushEvents;
    	      this.pushEventsBranchFilter = defaults.pushEventsBranchFilter;
    	      this.releasesEvents = defaults.releasesEvents;
    	      this.tagPushEvents = defaults.tagPushEvents;
    	      this.token = defaults.token;
    	      this.url = defaults.url;
    	      this.wikiPageEvents = defaults.wikiPageEvents;
        }

        @CustomType.Setter
        public Builder confidentialIssuesEvents(Boolean confidentialIssuesEvents) {
            if (confidentialIssuesEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "confidentialIssuesEvents");
            }
            this.confidentialIssuesEvents = confidentialIssuesEvents;
            return this;
        }
        @CustomType.Setter
        public Builder confidentialNoteEvents(Boolean confidentialNoteEvents) {
            if (confidentialNoteEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "confidentialNoteEvents");
            }
            this.confidentialNoteEvents = confidentialNoteEvents;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentEvents(Boolean deploymentEvents) {
            if (deploymentEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "deploymentEvents");
            }
            this.deploymentEvents = deploymentEvents;
            return this;
        }
        @CustomType.Setter
        public Builder enableSslVerification(Boolean enableSslVerification) {
            if (enableSslVerification == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "enableSslVerification");
            }
            this.enableSslVerification = enableSslVerification;
            return this;
        }
        @CustomType.Setter
        public Builder hookId(Integer hookId) {
            if (hookId == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "hookId");
            }
            this.hookId = hookId;
            return this;
        }
        @CustomType.Setter
        public Builder issuesEvents(Boolean issuesEvents) {
            if (issuesEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "issuesEvents");
            }
            this.issuesEvents = issuesEvents;
            return this;
        }
        @CustomType.Setter
        public Builder jobEvents(Boolean jobEvents) {
            if (jobEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "jobEvents");
            }
            this.jobEvents = jobEvents;
            return this;
        }
        @CustomType.Setter
        public Builder mergeRequestsEvents(Boolean mergeRequestsEvents) {
            if (mergeRequestsEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "mergeRequestsEvents");
            }
            this.mergeRequestsEvents = mergeRequestsEvents;
            return this;
        }
        @CustomType.Setter
        public Builder noteEvents(Boolean noteEvents) {
            if (noteEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "noteEvents");
            }
            this.noteEvents = noteEvents;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineEvents(Boolean pipelineEvents) {
            if (pipelineEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "pipelineEvents");
            }
            this.pipelineEvents = pipelineEvents;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(Integer projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder pushEvents(Boolean pushEvents) {
            if (pushEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "pushEvents");
            }
            this.pushEvents = pushEvents;
            return this;
        }
        @CustomType.Setter
        public Builder pushEventsBranchFilter(String pushEventsBranchFilter) {
            if (pushEventsBranchFilter == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "pushEventsBranchFilter");
            }
            this.pushEventsBranchFilter = pushEventsBranchFilter;
            return this;
        }
        @CustomType.Setter
        public Builder releasesEvents(Boolean releasesEvents) {
            if (releasesEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "releasesEvents");
            }
            this.releasesEvents = releasesEvents;
            return this;
        }
        @CustomType.Setter
        public Builder tagPushEvents(Boolean tagPushEvents) {
            if (tagPushEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "tagPushEvents");
            }
            this.tagPushEvents = tagPushEvents;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder wikiPageEvents(Boolean wikiPageEvents) {
            if (wikiPageEvents == null) {
              throw new MissingRequiredPropertyException("GetProjectHooksHook", "wikiPageEvents");
            }
            this.wikiPageEvents = wikiPageEvents;
            return this;
        }
        public GetProjectHooksHook build() {
            final var _resultValue = new GetProjectHooksHook();
            _resultValue.confidentialIssuesEvents = confidentialIssuesEvents;
            _resultValue.confidentialNoteEvents = confidentialNoteEvents;
            _resultValue.deploymentEvents = deploymentEvents;
            _resultValue.enableSslVerification = enableSslVerification;
            _resultValue.hookId = hookId;
            _resultValue.issuesEvents = issuesEvents;
            _resultValue.jobEvents = jobEvents;
            _resultValue.mergeRequestsEvents = mergeRequestsEvents;
            _resultValue.noteEvents = noteEvents;
            _resultValue.pipelineEvents = pipelineEvents;
            _resultValue.project = project;
            _resultValue.projectId = projectId;
            _resultValue.pushEvents = pushEvents;
            _resultValue.pushEventsBranchFilter = pushEventsBranchFilter;
            _resultValue.releasesEvents = releasesEvents;
            _resultValue.tagPushEvents = tagPushEvents;
            _resultValue.token = token;
            _resultValue.url = url;
            _resultValue.wikiPageEvents = wikiPageEvents;
            return _resultValue;
        }
    }
}
