// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RunnerArgs extends com.pulumi.resources.ResourceArgs {

    public static final RunnerArgs Empty = new RunnerArgs();

    /**
     * The accessLevel of the runner. Valid values are: `notProtected`, `refProtected`.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return The accessLevel of the runner. Valid values are: `notProtected`, `refProtected`.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * The runner&#39;s description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The runner&#39;s description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the runner should be locked for current project.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Whether the runner should be locked for current project.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Free-form maintenance notes for the runner (1024 characters).
     * 
     */
    @Import(name="maintenanceNote")
    private @Nullable Output<String> maintenanceNote;

    /**
     * @return Free-form maintenance notes for the runner (1024 characters).
     * 
     */
    public Optional<Output<String>> maintenanceNote() {
        return Optional.ofNullable(this.maintenanceNote);
    }

    /**
     * Maximum timeout set when this runner handles the job.
     * 
     */
    @Import(name="maximumTimeout")
    private @Nullable Output<Integer> maximumTimeout;

    /**
     * @return Maximum timeout set when this runner handles the job.
     * 
     */
    public Optional<Output<Integer>> maximumTimeout() {
        return Optional.ofNullable(this.maximumTimeout);
    }

    /**
     * Whether the runner should ignore new jobs.
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return Whether the runner should ignore new jobs.
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * The registration token used to register the runner.
     * 
     */
    @Import(name="registrationToken", required=true)
    private Output<String> registrationToken;

    /**
     * @return The registration token used to register the runner.
     * 
     */
    public Output<String> registrationToken() {
        return this.registrationToken;
    }

    /**
     * Whether the runner should handle untagged jobs.
     * 
     */
    @Import(name="runUntagged")
    private @Nullable Output<Boolean> runUntagged;

    /**
     * @return Whether the runner should handle untagged jobs.
     * 
     */
    public Optional<Output<Boolean>> runUntagged() {
        return Optional.ofNullable(this.runUntagged);
    }

    /**
     * List of runner’s tags.
     * 
     */
    @Import(name="tagLists")
    private @Nullable Output<List<String>> tagLists;

    /**
     * @return List of runner’s tags.
     * 
     */
    public Optional<Output<List<String>>> tagLists() {
        return Optional.ofNullable(this.tagLists);
    }

    private RunnerArgs() {}

    private RunnerArgs(RunnerArgs $) {
        this.accessLevel = $.accessLevel;
        this.description = $.description;
        this.locked = $.locked;
        this.maintenanceNote = $.maintenanceNote;
        this.maximumTimeout = $.maximumTimeout;
        this.paused = $.paused;
        this.registrationToken = $.registrationToken;
        this.runUntagged = $.runUntagged;
        this.tagLists = $.tagLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RunnerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RunnerArgs $;

        public Builder() {
            $ = new RunnerArgs();
        }

        public Builder(RunnerArgs defaults) {
            $ = new RunnerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel The accessLevel of the runner. Valid values are: `notProtected`, `refProtected`.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel The accessLevel of the runner. Valid values are: `notProtected`, `refProtected`.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param description The runner&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The runner&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param locked Whether the runner should be locked for current project.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Whether the runner should be locked for current project.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param maintenanceNote Free-form maintenance notes for the runner (1024 characters).
         * 
         * @return builder
         * 
         */
        public Builder maintenanceNote(@Nullable Output<String> maintenanceNote) {
            $.maintenanceNote = maintenanceNote;
            return this;
        }

        /**
         * @param maintenanceNote Free-form maintenance notes for the runner (1024 characters).
         * 
         * @return builder
         * 
         */
        public Builder maintenanceNote(String maintenanceNote) {
            return maintenanceNote(Output.of(maintenanceNote));
        }

        /**
         * @param maximumTimeout Maximum timeout set when this runner handles the job.
         * 
         * @return builder
         * 
         */
        public Builder maximumTimeout(@Nullable Output<Integer> maximumTimeout) {
            $.maximumTimeout = maximumTimeout;
            return this;
        }

        /**
         * @param maximumTimeout Maximum timeout set when this runner handles the job.
         * 
         * @return builder
         * 
         */
        public Builder maximumTimeout(Integer maximumTimeout) {
            return maximumTimeout(Output.of(maximumTimeout));
        }

        /**
         * @param paused Whether the runner should ignore new jobs.
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused Whether the runner should ignore new jobs.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param registrationToken The registration token used to register the runner.
         * 
         * @return builder
         * 
         */
        public Builder registrationToken(Output<String> registrationToken) {
            $.registrationToken = registrationToken;
            return this;
        }

        /**
         * @param registrationToken The registration token used to register the runner.
         * 
         * @return builder
         * 
         */
        public Builder registrationToken(String registrationToken) {
            return registrationToken(Output.of(registrationToken));
        }

        /**
         * @param runUntagged Whether the runner should handle untagged jobs.
         * 
         * @return builder
         * 
         */
        public Builder runUntagged(@Nullable Output<Boolean> runUntagged) {
            $.runUntagged = runUntagged;
            return this;
        }

        /**
         * @param runUntagged Whether the runner should handle untagged jobs.
         * 
         * @return builder
         * 
         */
        public Builder runUntagged(Boolean runUntagged) {
            return runUntagged(Output.of(runUntagged));
        }

        /**
         * @param tagLists List of runner’s tags.
         * 
         * @return builder
         * 
         */
        public Builder tagLists(@Nullable Output<List<String>> tagLists) {
            $.tagLists = tagLists;
            return this;
        }

        /**
         * @param tagLists List of runner’s tags.
         * 
         * @return builder
         * 
         */
        public Builder tagLists(List<String> tagLists) {
            return tagLists(Output.of(tagLists));
        }

        /**
         * @param tagLists List of runner’s tags.
         * 
         * @return builder
         * 
         */
        public Builder tagLists(String... tagLists) {
            return tagLists(List.of(tagLists));
        }

        public RunnerArgs build() {
            if ($.registrationToken == null) {
                throw new MissingRequiredPropertyException("RunnerArgs", "registrationToken");
            }
            return $;
        }
    }

}
