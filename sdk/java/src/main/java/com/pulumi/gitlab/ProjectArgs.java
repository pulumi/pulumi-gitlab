// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.ProjectContainerExpirationPolicyArgs;
import com.pulumi.gitlab.inputs.ProjectPushRulesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     * 
     */
    @Import(name="allowMergeOnSkippedPipeline")
    private @Nullable Output<Boolean> allowMergeOnSkippedPipeline;

    /**
     * @return Set to true if you want to treat skipped pipelines as if they finished with success.
     * 
     */
    public Optional<Output<Boolean>> allowMergeOnSkippedPipeline() {
        return Optional.ofNullable(this.allowMergeOnSkippedPipeline);
    }

    /**
     * Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
     * 
     */
    @Import(name="allowPipelineTriggerApproveDeployment")
    private @Nullable Output<Boolean> allowPipelineTriggerApproveDeployment;

    /**
     * @return Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
     * 
     */
    public Optional<Output<Boolean>> allowPipelineTriggerApproveDeployment() {
        return Optional.ofNullable(this.allowPipelineTriggerApproveDeployment);
    }

    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="analyticsAccessLevel")
    private @Nullable Output<String> analyticsAccessLevel;

    /**
     * @return Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> analyticsAccessLevel() {
        return Optional.ofNullable(this.analyticsAccessLevel);
    }

    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     * 
     */
    @Import(name="approvalsBeforeMerge")
    private @Nullable Output<Integer> approvalsBeforeMerge;

    /**
     * @return Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     * 
     */
    public Optional<Output<Integer>> approvalsBeforeMerge() {
        return Optional.ofNullable(this.approvalsBeforeMerge);
    }

    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     * 
     */
    @Import(name="archiveOnDestroy")
    private @Nullable Output<Boolean> archiveOnDestroy;

    /**
     * @return Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     * 
     */
    public Optional<Output<Boolean>> archiveOnDestroy() {
        return Optional.ofNullable(this.archiveOnDestroy);
    }

    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     * 
     */
    @Import(name="archived")
    private @Nullable Output<Boolean> archived;

    /**
     * @return Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     * 
     */
    public Optional<Output<Boolean>> archived() {
        return Optional.ofNullable(this.archived);
    }

    /**
     * Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
     * 
     */
    @Import(name="autoCancelPendingPipelines")
    private @Nullable Output<String> autoCancelPendingPipelines;

    /**
     * @return Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
     * 
     */
    public Optional<Output<String>> autoCancelPendingPipelines() {
        return Optional.ofNullable(this.autoCancelPendingPipelines);
    }

    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
     * 
     */
    @Import(name="autoDevopsDeployStrategy")
    private @Nullable Output<String> autoDevopsDeployStrategy;

    /**
     * @return Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
     * 
     */
    public Optional<Output<String>> autoDevopsDeployStrategy() {
        return Optional.ofNullable(this.autoDevopsDeployStrategy);
    }

    /**
     * Enable Auto DevOps for this project.
     * 
     */
    @Import(name="autoDevopsEnabled")
    private @Nullable Output<Boolean> autoDevopsEnabled;

    /**
     * @return Enable Auto DevOps for this project.
     * 
     */
    public Optional<Output<Boolean>> autoDevopsEnabled() {
        return Optional.ofNullable(this.autoDevopsEnabled);
    }

    /**
     * Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
     * 
     */
    @Import(name="autoDuoCodeReviewEnabled")
    private @Nullable Output<Boolean> autoDuoCodeReviewEnabled;

    /**
     * @return Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
     * 
     */
    public Optional<Output<Boolean>> autoDuoCodeReviewEnabled() {
        return Optional.ofNullable(this.autoDuoCodeReviewEnabled);
    }

    /**
     * Set whether auto-closing referenced issues on default branch.
     * 
     */
    @Import(name="autocloseReferencedIssues")
    private @Nullable Output<Boolean> autocloseReferencedIssues;

    /**
     * @return Set whether auto-closing referenced issues on default branch.
     * 
     */
    public Optional<Output<Boolean>> autocloseReferencedIssues() {
        return Optional.ofNullable(this.autocloseReferencedIssues);
    }

    /**
     * A local path to the avatar image to upload. **Note**: not available for imported resources.
     * 
     */
    @Import(name="avatar")
    private @Nullable Output<String> avatar;

    /**
     * @return A local path to the avatar image to upload. **Note**: not available for imported resources.
     * 
     */
    public Optional<Output<String>> avatar() {
        return Optional.ofNullable(this.avatar);
    }

    /**
     * The hash of the avatar image. Use `filesha256(&#34;path/to/avatar.png&#34;)` whenever possible. **Note**: this is used to trigger an update of the avatar. If it&#39;s not given, but an avatar is given, the avatar will be updated each time.
     * 
     */
    @Import(name="avatarHash")
    private @Nullable Output<String> avatarHash;

    /**
     * @return The hash of the avatar image. Use `filesha256(&#34;path/to/avatar.png&#34;)` whenever possible. **Note**: this is used to trigger an update of the avatar. If it&#39;s not given, but an avatar is given, the avatar will be updated each time.
     * 
     */
    public Optional<Output<String>> avatarHash() {
        return Optional.ofNullable(this.avatarHash);
    }

    /**
     * Branches to fork (empty for all branches).
     * 
     */
    @Import(name="branches")
    private @Nullable Output<String> branches;

    /**
     * @return Branches to fork (empty for all branches).
     * 
     */
    public Optional<Output<String>> branches() {
        return Optional.ofNullable(this.branches);
    }

    /**
     * The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
     * 
     */
    @Import(name="buildGitStrategy")
    private @Nullable Output<String> buildGitStrategy;

    /**
     * @return The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
     * 
     */
    public Optional<Output<String>> buildGitStrategy() {
        return Optional.ofNullable(this.buildGitStrategy);
    }

    /**
     * The maximum amount of time, in seconds, that a job can run.
     * 
     */
    @Import(name="buildTimeout")
    private @Nullable Output<Integer> buildTimeout;

    /**
     * @return The maximum amount of time, in seconds, that a job can run.
     * 
     */
    public Optional<Output<Integer>> buildTimeout() {
        return Optional.ofNullable(this.buildTimeout);
    }

    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="buildsAccessLevel")
    private @Nullable Output<String> buildsAccessLevel;

    /**
     * @return Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> buildsAccessLevel() {
        return Optional.ofNullable(this.buildsAccessLevel);
    }

    /**
     * Custom Path to CI config file.
     * 
     */
    @Import(name="ciConfigPath")
    private @Nullable Output<String> ciConfigPath;

    /**
     * @return Custom Path to CI config file.
     * 
     */
    public Optional<Output<String>> ciConfigPath() {
        return Optional.ofNullable(this.ciConfigPath);
    }

    /**
     * Default number of revisions for shallow cloning.
     * 
     */
    @Import(name="ciDefaultGitDepth")
    private @Nullable Output<Integer> ciDefaultGitDepth;

    /**
     * @return Default number of revisions for shallow cloning.
     * 
     */
    public Optional<Output<Integer>> ciDefaultGitDepth() {
        return Optional.ofNullable(this.ciDefaultGitDepth);
    }

    /**
     * Pipelines older than the configured time are deleted.
     * 
     */
    @Import(name="ciDeletePipelinesInSeconds")
    private @Nullable Output<Integer> ciDeletePipelinesInSeconds;

    /**
     * @return Pipelines older than the configured time are deleted.
     * 
     */
    public Optional<Output<Integer>> ciDeletePipelinesInSeconds() {
        return Optional.ofNullable(this.ciDeletePipelinesInSeconds);
    }

    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     * 
     */
    @Import(name="ciForwardDeploymentEnabled")
    private @Nullable Output<Boolean> ciForwardDeploymentEnabled;

    /**
     * @return When a new deployment job starts, skip older deployment jobs that are still pending.
     * 
     */
    public Optional<Output<Boolean>> ciForwardDeploymentEnabled() {
        return Optional.ofNullable(this.ciForwardDeploymentEnabled);
    }

    /**
     * Allow job retries even if the deployment job is outdated.
     * 
     */
    @Import(name="ciForwardDeploymentRollbackAllowed")
    private @Nullable Output<Boolean> ciForwardDeploymentRollbackAllowed;

    /**
     * @return Allow job retries even if the deployment job is outdated.
     * 
     */
    public Optional<Output<Boolean>> ciForwardDeploymentRollbackAllowed() {
        return Optional.ofNullable(this.ciForwardDeploymentRollbackAllowed);
    }

    /**
     * Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to [&#34;project*path&#34;, &#34;ref*type&#34;, &#34;ref&#34;]. Introduced in GitLab 17.10.
     * 
     */
    @Import(name="ciIdTokenSubClaimComponents")
    private @Nullable Output<List<String>> ciIdTokenSubClaimComponents;

    /**
     * @return Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to [&#34;project*path&#34;, &#34;ref*type&#34;, &#34;ref&#34;]. Introduced in GitLab 17.10.
     * 
     */
    public Optional<Output<List<String>>> ciIdTokenSubClaimComponents() {
        return Optional.ofNullable(this.ciIdTokenSubClaimComponents);
    }

    /**
     * The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `no_one_allowed`
     * 
     */
    @Import(name="ciPipelineVariablesMinimumOverrideRole")
    private @Nullable Output<String> ciPipelineVariablesMinimumOverrideRole;

    /**
     * @return The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `no_one_allowed`
     * 
     */
    public Optional<Output<String>> ciPipelineVariablesMinimumOverrideRole() {
        return Optional.ofNullable(this.ciPipelineVariablesMinimumOverrideRole);
    }

    /**
     * The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
     * 
     */
    @Import(name="ciRestrictPipelineCancellationRole")
    private @Nullable Output<String> ciRestrictPipelineCancellationRole;

    /**
     * @return The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
     * 
     */
    public Optional<Output<String>> ciRestrictPipelineCancellationRole() {
        return Optional.ofNullable(this.ciRestrictPipelineCancellationRole);
    }

    /**
     * Use separate caches for protected branches.
     * 
     */
    @Import(name="ciSeparatedCaches")
    private @Nullable Output<Boolean> ciSeparatedCaches;

    /**
     * @return Use separate caches for protected branches.
     * 
     */
    public Optional<Output<Boolean>> ciSeparatedCaches() {
        return Optional.ofNullable(this.ciSeparatedCaches);
    }

    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
     * 
     */
    @Import(name="containerExpirationPolicy")
    private @Nullable Output<ProjectContainerExpirationPolicyArgs> containerExpirationPolicy;

    /**
     * @return Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
     * 
     */
    public Optional<Output<ProjectContainerExpirationPolicyArgs>> containerExpirationPolicy() {
        return Optional.ofNullable(this.containerExpirationPolicy);
    }

    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="containerRegistryAccessLevel")
    private @Nullable Output<String> containerRegistryAccessLevel;

    /**
     * @return Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> containerRegistryAccessLevel() {
        return Optional.ofNullable(this.containerRegistryAccessLevel);
    }

    /**
     * Enable container registry for the project.
     * 
     * @deprecated
     * Use `container_registry_access_level` instead.
     * 
     */
    @Deprecated /* Use `container_registry_access_level` instead. */
    @Import(name="containerRegistryEnabled")
    private @Nullable Output<Boolean> containerRegistryEnabled;

    /**
     * @return Enable container registry for the project.
     * 
     * @deprecated
     * Use `container_registry_access_level` instead.
     * 
     */
    @Deprecated /* Use `container_registry_access_level` instead. */
    public Optional<Output<Boolean>> containerRegistryEnabled() {
        return Optional.ofNullable(this.containerRegistryEnabled);
    }

    /**
     * The default branch for the project.
     * 
     */
    @Import(name="defaultBranch")
    private @Nullable Output<String> defaultBranch;

    /**
     * @return The default branch for the project.
     * 
     */
    public Optional<Output<String>> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }

    /**
     * A description of the project.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the project.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable email notifications.
     * 
     */
    @Import(name="emailsEnabled")
    private @Nullable Output<Boolean> emailsEnabled;

    /**
     * @return Enable email notifications.
     * 
     */
    public Optional<Output<Boolean>> emailsEnabled() {
        return Optional.ofNullable(this.emailsEnabled);
    }

    /**
     * Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="environmentsAccessLevel")
    private @Nullable Output<String> environmentsAccessLevel;

    /**
     * @return Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> environmentsAccessLevel() {
        return Optional.ofNullable(this.environmentsAccessLevel);
    }

    /**
     * The classification label for the project.
     * 
     */
    @Import(name="externalAuthorizationClassificationLabel")
    private @Nullable Output<String> externalAuthorizationClassificationLabel;

    /**
     * @return The classification label for the project.
     * 
     */
    public Optional<Output<String>> externalAuthorizationClassificationLabel() {
        return Optional.ofNullable(this.externalAuthorizationClassificationLabel);
    }

    /**
     * Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="featureFlagsAccessLevel")
    private @Nullable Output<String> featureFlagsAccessLevel;

    /**
     * @return Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> featureFlagsAccessLevel() {
        return Optional.ofNullable(this.featureFlagsAccessLevel);
    }

    /**
     * The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
     * 
     */
    @Import(name="forkedFromProjectId")
    private @Nullable Output<Integer> forkedFromProjectId;

    /**
     * @return The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
     * 
     */
    public Optional<Output<Integer>> forkedFromProjectId() {
        return Optional.ofNullable(this.forkedFromProjectId);
    }

    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="forkingAccessLevel")
    private @Nullable Output<String> forkingAccessLevel;

    /**
     * @return Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> forkingAccessLevel() {
        return Optional.ofNullable(this.forkingAccessLevel);
    }

    /**
     * Enable group runners for this project.
     * 
     */
    @Import(name="groupRunnersEnabled")
    private @Nullable Output<Boolean> groupRunnersEnabled;

    /**
     * @return Enable group runners for this project.
     * 
     */
    public Optional<Output<Boolean>> groupRunnersEnabled() {
        return Optional.ofNullable(this.groupRunnersEnabled);
    }

    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     * 
     */
    @Import(name="groupWithProjectTemplatesId")
    private @Nullable Output<Integer> groupWithProjectTemplatesId;

    /**
     * @return For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     * 
     */
    public Optional<Output<Integer>> groupWithProjectTemplatesId() {
        return Optional.ofNullable(this.groupWithProjectTemplatesId);
    }

    /**
     * Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
     * 
     */
    @Import(name="importUrl")
    private @Nullable Output<String> importUrl;

    /**
     * @return Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
     * 
     */
    public Optional<Output<String>> importUrl() {
        return Optional.ofNullable(this.importUrl);
    }

    /**
     * The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
     * 
     */
    @Import(name="importUrlPassword")
    private @Nullable Output<String> importUrlPassword;

    /**
     * @return The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
     * 
     */
    public Optional<Output<String>> importUrlPassword() {
        return Optional.ofNullable(this.importUrlPassword);
    }

    /**
     * The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
     * 
     */
    @Import(name="importUrlUsername")
    private @Nullable Output<String> importUrlUsername;

    /**
     * @return The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
     * 
     */
    public Optional<Output<String>> importUrlUsername() {
        return Optional.ofNullable(this.importUrlUsername);
    }

    /**
     * Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="infrastructureAccessLevel")
    private @Nullable Output<String> infrastructureAccessLevel;

    /**
     * @return Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> infrastructureAccessLevel() {
        return Optional.ofNullable(this.infrastructureAccessLevel);
    }

    /**
     * Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `default_branch`.
     * 
     */
    @Import(name="initializeWithReadme")
    private @Nullable Output<Boolean> initializeWithReadme;

    /**
     * @return Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `default_branch`.
     * 
     */
    public Optional<Output<Boolean>> initializeWithReadme() {
        return Optional.ofNullable(this.initializeWithReadme);
    }

    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="issuesAccessLevel")
    private @Nullable Output<String> issuesAccessLevel;

    /**
     * @return Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> issuesAccessLevel() {
        return Optional.ofNullable(this.issuesAccessLevel);
    }

    /**
     * Enable issue tracking for the project.
     * 
     */
    @Import(name="issuesEnabled")
    private @Nullable Output<Boolean> issuesEnabled;

    /**
     * @return Enable issue tracking for the project.
     * 
     */
    public Optional<Output<Boolean>> issuesEnabled() {
        return Optional.ofNullable(this.issuesEnabled);
    }

    /**
     * Sets the template for new issues in the project.
     * 
     */
    @Import(name="issuesTemplate")
    private @Nullable Output<String> issuesTemplate;

    /**
     * @return Sets the template for new issues in the project.
     * 
     */
    public Optional<Output<String>> issuesTemplate() {
        return Optional.ofNullable(this.issuesTemplate);
    }

    /**
     * Disable or enable the ability to keep the latest artifact for this project.
     * 
     */
    @Import(name="keepLatestArtifact")
    private @Nullable Output<Boolean> keepLatestArtifact;

    /**
     * @return Disable or enable the ability to keep the latest artifact for this project.
     * 
     */
    public Optional<Output<Boolean>> keepLatestArtifact() {
        return Optional.ofNullable(this.keepLatestArtifact);
    }

    /**
     * Enable LFS for the project.
     * 
     */
    @Import(name="lfsEnabled")
    private @Nullable Output<Boolean> lfsEnabled;

    /**
     * @return Enable LFS for the project.
     * 
     */
    public Optional<Output<Boolean>> lfsEnabled() {
        return Optional.ofNullable(this.lfsEnabled);
    }

    /**
     * Template used to create merge commit message in merge requests.
     * 
     */
    @Import(name="mergeCommitTemplate")
    private @Nullable Output<String> mergeCommitTemplate;

    /**
     * @return Template used to create merge commit message in merge requests.
     * 
     */
    public Optional<Output<String>> mergeCommitTemplate() {
        return Optional.ofNullable(this.mergeCommitTemplate);
    }

    /**
     * Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
     * 
     */
    @Import(name="mergeMethod")
    private @Nullable Output<String> mergeMethod;

    /**
     * @return Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
     * 
     */
    public Optional<Output<String>> mergeMethod() {
        return Optional.ofNullable(this.mergeMethod);
    }

    /**
     * Enable or disable merge pipelines.
     * 
     */
    @Import(name="mergePipelinesEnabled")
    private @Nullable Output<Boolean> mergePipelinesEnabled;

    /**
     * @return Enable or disable merge pipelines.
     * 
     */
    public Optional<Output<Boolean>> mergePipelinesEnabled() {
        return Optional.ofNullable(this.mergePipelinesEnabled);
    }

    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="mergeRequestsAccessLevel")
    private @Nullable Output<String> mergeRequestsAccessLevel;

    /**
     * @return Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> mergeRequestsAccessLevel() {
        return Optional.ofNullable(this.mergeRequestsAccessLevel);
    }

    /**
     * Enable merge requests for the project.
     * 
     */
    @Import(name="mergeRequestsEnabled")
    private @Nullable Output<Boolean> mergeRequestsEnabled;

    /**
     * @return Enable merge requests for the project.
     * 
     */
    public Optional<Output<Boolean>> mergeRequestsEnabled() {
        return Optional.ofNullable(this.mergeRequestsEnabled);
    }

    /**
     * Sets the template for new merge requests in the project.
     * 
     */
    @Import(name="mergeRequestsTemplate")
    private @Nullable Output<String> mergeRequestsTemplate;

    /**
     * @return Sets the template for new merge requests in the project.
     * 
     */
    public Optional<Output<String>> mergeRequestsTemplate() {
        return Optional.ofNullable(this.mergeRequestsTemplate);
    }

    /**
     * Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
     * 
     */
    @Import(name="mergeTrainsEnabled")
    private @Nullable Output<Boolean> mergeTrainsEnabled;

    /**
     * @return Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
     * 
     */
    public Optional<Output<Boolean>> mergeTrainsEnabled() {
        return Optional.ofNullable(this.mergeTrainsEnabled);
    }

    /**
     * Enable project pull mirror.
     * 
     */
    @Import(name="mirror")
    private @Nullable Output<Boolean> mirror;

    /**
     * @return Enable project pull mirror.
     * 
     */
    public Optional<Output<Boolean>> mirror() {
        return Optional.ofNullable(this.mirror);
    }

    /**
     * Enable overwrite diverged branches for a mirrored project.
     * 
     */
    @Import(name="mirrorOverwritesDivergedBranches")
    private @Nullable Output<Boolean> mirrorOverwritesDivergedBranches;

    /**
     * @return Enable overwrite diverged branches for a mirrored project.
     * 
     */
    public Optional<Output<Boolean>> mirrorOverwritesDivergedBranches() {
        return Optional.ofNullable(this.mirrorOverwritesDivergedBranches);
    }

    /**
     * Enable trigger builds on pushes for a mirrored project.
     * 
     */
    @Import(name="mirrorTriggerBuilds")
    private @Nullable Output<Boolean> mirrorTriggerBuilds;

    /**
     * @return Enable trigger builds on pushes for a mirrored project.
     * 
     */
    public Optional<Output<Boolean>> mirrorTriggerBuilds() {
        return Optional.ofNullable(this.mirrorTriggerBuilds);
    }

    /**
     * Set visibility of machine learning model experiments. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="modelExperimentsAccessLevel")
    private @Nullable Output<String> modelExperimentsAccessLevel;

    /**
     * @return Set visibility of machine learning model experiments. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> modelExperimentsAccessLevel() {
        return Optional.ofNullable(this.modelExperimentsAccessLevel);
    }

    /**
     * Set visibility of machine learning model registry. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="modelRegistryAccessLevel")
    private @Nullable Output<String> modelRegistryAccessLevel;

    /**
     * @return Set visibility of machine learning model registry. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> modelRegistryAccessLevel() {
        return Optional.ofNullable(this.modelRegistryAccessLevel);
    }

    /**
     * Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="monitorAccessLevel")
    private @Nullable Output<String> monitorAccessLevel;

    /**
     * @return Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> monitorAccessLevel() {
        return Optional.ofNullable(this.monitorAccessLevel);
    }

    /**
     * For forked projects, target merge requests to this project. If false, the target will be the upstream project.
     * 
     */
    @Import(name="mrDefaultTargetSelf")
    private @Nullable Output<Boolean> mrDefaultTargetSelf;

    /**
     * @return For forked projects, target merge requests to this project. If false, the target will be the upstream project.
     * 
     */
    public Optional<Output<Boolean>> mrDefaultTargetSelf() {
        return Optional.ofNullable(this.mrDefaultTargetSelf);
    }

    /**
     * The name of the project.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the project.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace (group or user) of the project. Defaults to your user.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<Integer> namespaceId;

    /**
     * @return The namespace (group or user) of the project. Defaults to your user.
     * 
     */
    public Optional<Output<Integer>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     * 
     */
    @Import(name="onlyAllowMergeIfAllDiscussionsAreResolved")
    private @Nullable Output<Boolean> onlyAllowMergeIfAllDiscussionsAreResolved;

    /**
     * @return Set to true if you want allow merges only if all discussions are resolved.
     * 
     */
    public Optional<Output<Boolean>> onlyAllowMergeIfAllDiscussionsAreResolved() {
        return Optional.ofNullable(this.onlyAllowMergeIfAllDiscussionsAreResolved);
    }

    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     * 
     */
    @Import(name="onlyAllowMergeIfPipelineSucceeds")
    private @Nullable Output<Boolean> onlyAllowMergeIfPipelineSucceeds;

    /**
     * @return Set to true if you want allow merges only if a pipeline succeeds.
     * 
     */
    public Optional<Output<Boolean>> onlyAllowMergeIfPipelineSucceeds() {
        return Optional.ofNullable(this.onlyAllowMergeIfPipelineSucceeds);
    }

    /**
     * Enable only mirror protected branches for a mirrored project.
     * 
     */
    @Import(name="onlyMirrorProtectedBranches")
    private @Nullable Output<Boolean> onlyMirrorProtectedBranches;

    /**
     * @return Enable only mirror protected branches for a mirrored project.
     * 
     */
    public Optional<Output<Boolean>> onlyMirrorProtectedBranches() {
        return Optional.ofNullable(this.onlyMirrorProtectedBranches);
    }

    /**
     * Enable packages repository for the project.
     * 
     */
    @Import(name="packagesEnabled")
    private @Nullable Output<Boolean> packagesEnabled;

    /**
     * @return Enable packages repository for the project.
     * 
     */
    public Optional<Output<Boolean>> packagesEnabled() {
        return Optional.ofNullable(this.packagesEnabled);
    }

    /**
     * Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
     * 
     */
    @Import(name="pagesAccessLevel")
    private @Nullable Output<String> pagesAccessLevel;

    /**
     * @return Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
     * 
     */
    public Optional<Output<String>> pagesAccessLevel() {
        return Optional.ofNullable(this.pagesAccessLevel);
    }

    /**
     * The path of the repository.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path of the repository.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Set to `true` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
     * 
     */
    @Import(name="permanentlyDeleteOnDestroy")
    private @Nullable Output<Boolean> permanentlyDeleteOnDestroy;

    /**
     * @return Set to `true` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
     * 
     */
    public Optional<Output<Boolean>> permanentlyDeleteOnDestroy() {
        return Optional.ofNullable(this.permanentlyDeleteOnDestroy);
    }

    /**
     * Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
     * 
     * @deprecated
     * Deprecated in favor of `builds_access_level`
     * 
     */
    @Deprecated /* Deprecated in favor of `builds_access_level` */
    @Import(name="pipelinesEnabled")
    private @Nullable Output<Boolean> pipelinesEnabled;

    /**
     * @return Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
     * 
     * @deprecated
     * Deprecated in favor of `builds_access_level`
     * 
     */
    @Deprecated /* Deprecated in favor of `builds_access_level` */
    public Optional<Output<Boolean>> pipelinesEnabled() {
        return Optional.ofNullable(this.pipelinesEnabled);
    }

    /**
     * Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
     * 
     */
    @Import(name="preReceiveSecretDetectionEnabled")
    private @Nullable Output<Boolean> preReceiveSecretDetectionEnabled;

    /**
     * @return Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
     * 
     */
    public Optional<Output<Boolean>> preReceiveSecretDetectionEnabled() {
        return Optional.ofNullable(this.preReceiveSecretDetectionEnabled);
    }

    /**
     * Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
     * 
     */
    @Import(name="preventMergeWithoutJiraIssue")
    private @Nullable Output<Boolean> preventMergeWithoutJiraIssue;

    /**
     * @return Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
     * 
     */
    public Optional<Output<Boolean>> preventMergeWithoutJiraIssue() {
        return Optional.ofNullable(this.preventMergeWithoutJiraIssue);
    }

    /**
     * Show link to create/view merge request when pushing from the command line
     * 
     */
    @Import(name="printingMergeRequestLinkEnabled")
    private @Nullable Output<Boolean> printingMergeRequestLinkEnabled;

    /**
     * @return Show link to create/view merge request when pushing from the command line
     * 
     */
    public Optional<Output<Boolean>> printingMergeRequestLinkEnabled() {
        return Optional.ofNullable(this.printingMergeRequestLinkEnabled);
    }

    /**
     * If true, jobs can be viewed by non-project members.
     * 
     * @deprecated
     * The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider. */
    @Import(name="publicBuilds")
    private @Nullable Output<Boolean> publicBuilds;

    /**
     * @return If true, jobs can be viewed by non-project members.
     * 
     * @deprecated
     * The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider. */
    public Optional<Output<Boolean>> publicBuilds() {
        return Optional.ofNullable(this.publicBuilds);
    }

    /**
     * If true, jobs can be viewed by non-project members.
     * 
     */
    @Import(name="publicJobs")
    private @Nullable Output<Boolean> publicJobs;

    /**
     * @return If true, jobs can be viewed by non-project members.
     * 
     */
    public Optional<Output<Boolean>> publicJobs() {
        return Optional.ofNullable(this.publicJobs);
    }

    /**
     * Push rules for the project.
     * 
     */
    @Import(name="pushRules")
    private @Nullable Output<ProjectPushRulesArgs> pushRules;

    /**
     * @return Push rules for the project.
     * 
     */
    public Optional<Output<ProjectPushRulesArgs>> pushRules() {
        return Optional.ofNullable(this.pushRules);
    }

    /**
     * Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="releasesAccessLevel")
    private @Nullable Output<String> releasesAccessLevel;

    /**
     * @return Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> releasesAccessLevel() {
        return Optional.ofNullable(this.releasesAccessLevel);
    }

    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     * 
     */
    @Import(name="removeSourceBranchAfterMerge")
    private @Nullable Output<Boolean> removeSourceBranchAfterMerge;

    /**
     * @return Enable `Delete source branch` option by default for all new merge requests.
     * 
     */
    public Optional<Output<Boolean>> removeSourceBranchAfterMerge() {
        return Optional.ofNullable(this.removeSourceBranchAfterMerge);
    }

    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="repositoryAccessLevel")
    private @Nullable Output<String> repositoryAccessLevel;

    /**
     * @return Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> repositoryAccessLevel() {
        return Optional.ofNullable(this.repositoryAccessLevel);
    }

    /**
     * Which storage shard the repository is on. (administrator only)
     * 
     */
    @Import(name="repositoryStorage")
    private @Nullable Output<String> repositoryStorage;

    /**
     * @return Which storage shard the repository is on. (administrator only)
     * 
     */
    public Optional<Output<String>> repositoryStorage() {
        return Optional.ofNullable(this.repositoryStorage);
    }

    /**
     * Allow users to request member access.
     * 
     */
    @Import(name="requestAccessEnabled")
    private @Nullable Output<Boolean> requestAccessEnabled;

    /**
     * @return Allow users to request member access.
     * 
     */
    public Optional<Output<Boolean>> requestAccessEnabled() {
        return Optional.ofNullable(this.requestAccessEnabled);
    }

    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="requirementsAccessLevel")
    private @Nullable Output<String> requirementsAccessLevel;

    /**
     * @return Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> requirementsAccessLevel() {
        return Optional.ofNullable(this.requirementsAccessLevel);
    }

    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     * 
     */
    @Import(name="resolveOutdatedDiffDiscussions")
    private @Nullable Output<Boolean> resolveOutdatedDiffDiscussions;

    /**
     * @return Automatically resolve merge request diffs discussions on lines changed with a push.
     * 
     */
    public Optional<Output<Boolean>> resolveOutdatedDiffDiscussions() {
        return Optional.ofNullable(this.resolveOutdatedDiffDiscussions);
    }

    /**
     * Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
     * 
     */
    @Import(name="restrictUserDefinedVariables")
    private @Nullable Output<Boolean> restrictUserDefinedVariables;

    /**
     * @return Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
     * 
     */
    public Optional<Output<Boolean>> restrictUserDefinedVariables() {
        return Optional.ofNullable(this.restrictUserDefinedVariables);
    }

    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="securityAndComplianceAccessLevel")
    private @Nullable Output<String> securityAndComplianceAccessLevel;

    /**
     * @return Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> securityAndComplianceAccessLevel() {
        return Optional.ofNullable(this.securityAndComplianceAccessLevel);
    }

    /**
     * Enable shared runners for this project.
     * 
     */
    @Import(name="sharedRunnersEnabled")
    private @Nullable Output<Boolean> sharedRunnersEnabled;

    /**
     * @return Enable shared runners for this project.
     * 
     */
    public Optional<Output<Boolean>> sharedRunnersEnabled() {
        return Optional.ofNullable(this.sharedRunnersEnabled);
    }

    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     * 
     */
    @Import(name="skipWaitForDefaultBranchProtection")
    private @Nullable Output<Boolean> skipWaitForDefaultBranchProtection;

    /**
     * @return If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     * 
     */
    public Optional<Output<Boolean>> skipWaitForDefaultBranchProtection() {
        return Optional.ofNullable(this.skipWaitForDefaultBranchProtection);
    }

    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="snippetsAccessLevel")
    private @Nullable Output<String> snippetsAccessLevel;

    /**
     * @return Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> snippetsAccessLevel() {
        return Optional.ofNullable(this.snippetsAccessLevel);
    }

    /**
     * Enable snippets for the project.
     * 
     */
    @Import(name="snippetsEnabled")
    private @Nullable Output<Boolean> snippetsEnabled;

    /**
     * @return Enable snippets for the project.
     * 
     */
    public Optional<Output<Boolean>> snippetsEnabled() {
        return Optional.ofNullable(this.snippetsEnabled);
    }

    /**
     * Template used to create squash commit message in merge requests.
     * 
     */
    @Import(name="squashCommitTemplate")
    private @Nullable Output<String> squashCommitTemplate;

    /**
     * @return Template used to create squash commit message in merge requests.
     * 
     */
    public Optional<Output<String>> squashCommitTemplate() {
        return Optional.ofNullable(this.squashCommitTemplate);
    }

    /**
     * Squash commits when merge request is merged. Valid values are `never` (Do not allow), `always` (Require), `default_on` (Encourage), or `default_off` (Allow). The default value is `default_off` (Allow).
     * 
     */
    @Import(name="squashOption")
    private @Nullable Output<String> squashOption;

    /**
     * @return Squash commits when merge request is merged. Valid values are `never` (Do not allow), `always` (Require), `default_on` (Encourage), or `default_off` (Allow). The default value is `default_off` (Allow).
     * 
     */
    public Optional<Output<String>> squashOption() {
        return Optional.ofNullable(this.squashOption);
    }

    /**
     * The commit message used to apply merge request suggestions.
     * 
     */
    @Import(name="suggestionCommitMessage")
    private @Nullable Output<String> suggestionCommitMessage;

    /**
     * @return The commit message used to apply merge request suggestions.
     * 
     */
    public Optional<Output<String>> suggestionCommitMessage() {
        return Optional.ofNullable(this.suggestionCommitMessage);
    }

    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     * 
     */
    @Import(name="templateProjectId")
    private @Nullable Output<Integer> templateProjectId;

    /**
     * @return When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     * 
     */
    public Optional<Output<Integer>> templateProjectId() {
        return Optional.ofNullable(this.templateProjectId);
    }

    /**
     * The list of topics for the project.
     * 
     */
    @Import(name="topics")
    private @Nullable Output<List<String>> topics;

    /**
     * @return The list of topics for the project.
     * 
     */
    public Optional<Output<List<String>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     * 	&gt; When using a custom template, [Group Tokens won&#39;t work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user&#39;s Personal Access Token.
     * 
     */
    @Import(name="useCustomTemplate")
    private @Nullable Output<Boolean> useCustomTemplate;

    /**
     * @return Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     * 	&gt; When using a custom template, [Group Tokens won&#39;t work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user&#39;s Personal Access Token.
     * 
     */
    public Optional<Output<Boolean>> useCustomTemplate() {
        return Optional.ofNullable(this.useCustomTemplate);
    }

    /**
     * Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
     * 
     */
    @Import(name="visibilityLevel")
    private @Nullable Output<String> visibilityLevel;

    /**
     * @return Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
     * 
     */
    public Optional<Output<String>> visibilityLevel() {
        return Optional.ofNullable(this.visibilityLevel);
    }

    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    @Import(name="wikiAccessLevel")
    private @Nullable Output<String> wikiAccessLevel;

    /**
     * @return Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     * 
     */
    public Optional<Output<String>> wikiAccessLevel() {
        return Optional.ofNullable(this.wikiAccessLevel);
    }

    /**
     * Enable wiki for the project.
     * 
     */
    @Import(name="wikiEnabled")
    private @Nullable Output<Boolean> wikiEnabled;

    /**
     * @return Enable wiki for the project.
     * 
     */
    public Optional<Output<Boolean>> wikiEnabled() {
        return Optional.ofNullable(this.wikiEnabled);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.allowMergeOnSkippedPipeline = $.allowMergeOnSkippedPipeline;
        this.allowPipelineTriggerApproveDeployment = $.allowPipelineTriggerApproveDeployment;
        this.analyticsAccessLevel = $.analyticsAccessLevel;
        this.approvalsBeforeMerge = $.approvalsBeforeMerge;
        this.archiveOnDestroy = $.archiveOnDestroy;
        this.archived = $.archived;
        this.autoCancelPendingPipelines = $.autoCancelPendingPipelines;
        this.autoDevopsDeployStrategy = $.autoDevopsDeployStrategy;
        this.autoDevopsEnabled = $.autoDevopsEnabled;
        this.autoDuoCodeReviewEnabled = $.autoDuoCodeReviewEnabled;
        this.autocloseReferencedIssues = $.autocloseReferencedIssues;
        this.avatar = $.avatar;
        this.avatarHash = $.avatarHash;
        this.branches = $.branches;
        this.buildGitStrategy = $.buildGitStrategy;
        this.buildTimeout = $.buildTimeout;
        this.buildsAccessLevel = $.buildsAccessLevel;
        this.ciConfigPath = $.ciConfigPath;
        this.ciDefaultGitDepth = $.ciDefaultGitDepth;
        this.ciDeletePipelinesInSeconds = $.ciDeletePipelinesInSeconds;
        this.ciForwardDeploymentEnabled = $.ciForwardDeploymentEnabled;
        this.ciForwardDeploymentRollbackAllowed = $.ciForwardDeploymentRollbackAllowed;
        this.ciIdTokenSubClaimComponents = $.ciIdTokenSubClaimComponents;
        this.ciPipelineVariablesMinimumOverrideRole = $.ciPipelineVariablesMinimumOverrideRole;
        this.ciRestrictPipelineCancellationRole = $.ciRestrictPipelineCancellationRole;
        this.ciSeparatedCaches = $.ciSeparatedCaches;
        this.containerExpirationPolicy = $.containerExpirationPolicy;
        this.containerRegistryAccessLevel = $.containerRegistryAccessLevel;
        this.containerRegistryEnabled = $.containerRegistryEnabled;
        this.defaultBranch = $.defaultBranch;
        this.description = $.description;
        this.emailsEnabled = $.emailsEnabled;
        this.environmentsAccessLevel = $.environmentsAccessLevel;
        this.externalAuthorizationClassificationLabel = $.externalAuthorizationClassificationLabel;
        this.featureFlagsAccessLevel = $.featureFlagsAccessLevel;
        this.forkedFromProjectId = $.forkedFromProjectId;
        this.forkingAccessLevel = $.forkingAccessLevel;
        this.groupRunnersEnabled = $.groupRunnersEnabled;
        this.groupWithProjectTemplatesId = $.groupWithProjectTemplatesId;
        this.importUrl = $.importUrl;
        this.importUrlPassword = $.importUrlPassword;
        this.importUrlUsername = $.importUrlUsername;
        this.infrastructureAccessLevel = $.infrastructureAccessLevel;
        this.initializeWithReadme = $.initializeWithReadme;
        this.issuesAccessLevel = $.issuesAccessLevel;
        this.issuesEnabled = $.issuesEnabled;
        this.issuesTemplate = $.issuesTemplate;
        this.keepLatestArtifact = $.keepLatestArtifact;
        this.lfsEnabled = $.lfsEnabled;
        this.mergeCommitTemplate = $.mergeCommitTemplate;
        this.mergeMethod = $.mergeMethod;
        this.mergePipelinesEnabled = $.mergePipelinesEnabled;
        this.mergeRequestsAccessLevel = $.mergeRequestsAccessLevel;
        this.mergeRequestsEnabled = $.mergeRequestsEnabled;
        this.mergeRequestsTemplate = $.mergeRequestsTemplate;
        this.mergeTrainsEnabled = $.mergeTrainsEnabled;
        this.mirror = $.mirror;
        this.mirrorOverwritesDivergedBranches = $.mirrorOverwritesDivergedBranches;
        this.mirrorTriggerBuilds = $.mirrorTriggerBuilds;
        this.modelExperimentsAccessLevel = $.modelExperimentsAccessLevel;
        this.modelRegistryAccessLevel = $.modelRegistryAccessLevel;
        this.monitorAccessLevel = $.monitorAccessLevel;
        this.mrDefaultTargetSelf = $.mrDefaultTargetSelf;
        this.name = $.name;
        this.namespaceId = $.namespaceId;
        this.onlyAllowMergeIfAllDiscussionsAreResolved = $.onlyAllowMergeIfAllDiscussionsAreResolved;
        this.onlyAllowMergeIfPipelineSucceeds = $.onlyAllowMergeIfPipelineSucceeds;
        this.onlyMirrorProtectedBranches = $.onlyMirrorProtectedBranches;
        this.packagesEnabled = $.packagesEnabled;
        this.pagesAccessLevel = $.pagesAccessLevel;
        this.path = $.path;
        this.permanentlyDeleteOnDestroy = $.permanentlyDeleteOnDestroy;
        this.pipelinesEnabled = $.pipelinesEnabled;
        this.preReceiveSecretDetectionEnabled = $.preReceiveSecretDetectionEnabled;
        this.preventMergeWithoutJiraIssue = $.preventMergeWithoutJiraIssue;
        this.printingMergeRequestLinkEnabled = $.printingMergeRequestLinkEnabled;
        this.publicBuilds = $.publicBuilds;
        this.publicJobs = $.publicJobs;
        this.pushRules = $.pushRules;
        this.releasesAccessLevel = $.releasesAccessLevel;
        this.removeSourceBranchAfterMerge = $.removeSourceBranchAfterMerge;
        this.repositoryAccessLevel = $.repositoryAccessLevel;
        this.repositoryStorage = $.repositoryStorage;
        this.requestAccessEnabled = $.requestAccessEnabled;
        this.requirementsAccessLevel = $.requirementsAccessLevel;
        this.resolveOutdatedDiffDiscussions = $.resolveOutdatedDiffDiscussions;
        this.restrictUserDefinedVariables = $.restrictUserDefinedVariables;
        this.securityAndComplianceAccessLevel = $.securityAndComplianceAccessLevel;
        this.sharedRunnersEnabled = $.sharedRunnersEnabled;
        this.skipWaitForDefaultBranchProtection = $.skipWaitForDefaultBranchProtection;
        this.snippetsAccessLevel = $.snippetsAccessLevel;
        this.snippetsEnabled = $.snippetsEnabled;
        this.squashCommitTemplate = $.squashCommitTemplate;
        this.squashOption = $.squashOption;
        this.suggestionCommitMessage = $.suggestionCommitMessage;
        this.tags = $.tags;
        this.templateName = $.templateName;
        this.templateProjectId = $.templateProjectId;
        this.topics = $.topics;
        this.useCustomTemplate = $.useCustomTemplate;
        this.visibilityLevel = $.visibilityLevel;
        this.wikiAccessLevel = $.wikiAccessLevel;
        this.wikiEnabled = $.wikiEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowMergeOnSkippedPipeline Set to true if you want to treat skipped pipelines as if they finished with success.
         * 
         * @return builder
         * 
         */
        public Builder allowMergeOnSkippedPipeline(@Nullable Output<Boolean> allowMergeOnSkippedPipeline) {
            $.allowMergeOnSkippedPipeline = allowMergeOnSkippedPipeline;
            return this;
        }

        /**
         * @param allowMergeOnSkippedPipeline Set to true if you want to treat skipped pipelines as if they finished with success.
         * 
         * @return builder
         * 
         */
        public Builder allowMergeOnSkippedPipeline(Boolean allowMergeOnSkippedPipeline) {
            return allowMergeOnSkippedPipeline(Output.of(allowMergeOnSkippedPipeline));
        }

        /**
         * @param allowPipelineTriggerApproveDeployment Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
         * 
         * @return builder
         * 
         */
        public Builder allowPipelineTriggerApproveDeployment(@Nullable Output<Boolean> allowPipelineTriggerApproveDeployment) {
            $.allowPipelineTriggerApproveDeployment = allowPipelineTriggerApproveDeployment;
            return this;
        }

        /**
         * @param allowPipelineTriggerApproveDeployment Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
         * 
         * @return builder
         * 
         */
        public Builder allowPipelineTriggerApproveDeployment(Boolean allowPipelineTriggerApproveDeployment) {
            return allowPipelineTriggerApproveDeployment(Output.of(allowPipelineTriggerApproveDeployment));
        }

        /**
         * @param analyticsAccessLevel Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder analyticsAccessLevel(@Nullable Output<String> analyticsAccessLevel) {
            $.analyticsAccessLevel = analyticsAccessLevel;
            return this;
        }

        /**
         * @param analyticsAccessLevel Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder analyticsAccessLevel(String analyticsAccessLevel) {
            return analyticsAccessLevel(Output.of(analyticsAccessLevel));
        }

        /**
         * @param approvalsBeforeMerge Number of merge request approvals required for merging. Default is 0.
         * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
         * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
         * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
         * 
         * @return builder
         * 
         */
        public Builder approvalsBeforeMerge(@Nullable Output<Integer> approvalsBeforeMerge) {
            $.approvalsBeforeMerge = approvalsBeforeMerge;
            return this;
        }

        /**
         * @param approvalsBeforeMerge Number of merge request approvals required for merging. Default is 0.
         * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
         * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
         * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
         * 
         * @return builder
         * 
         */
        public Builder approvalsBeforeMerge(Integer approvalsBeforeMerge) {
            return approvalsBeforeMerge(Output.of(approvalsBeforeMerge));
        }

        /**
         * @param archiveOnDestroy Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
         * 
         * @return builder
         * 
         */
        public Builder archiveOnDestroy(@Nullable Output<Boolean> archiveOnDestroy) {
            $.archiveOnDestroy = archiveOnDestroy;
            return this;
        }

        /**
         * @param archiveOnDestroy Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
         * 
         * @return builder
         * 
         */
        public Builder archiveOnDestroy(Boolean archiveOnDestroy) {
            return archiveOnDestroy(Output.of(archiveOnDestroy));
        }

        /**
         * @param archived Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
         * 
         * @return builder
         * 
         */
        public Builder archived(@Nullable Output<Boolean> archived) {
            $.archived = archived;
            return this;
        }

        /**
         * @param archived Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
         * 
         * @return builder
         * 
         */
        public Builder archived(Boolean archived) {
            return archived(Output.of(archived));
        }

        /**
         * @param autoCancelPendingPipelines Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder autoCancelPendingPipelines(@Nullable Output<String> autoCancelPendingPipelines) {
            $.autoCancelPendingPipelines = autoCancelPendingPipelines;
            return this;
        }

        /**
         * @param autoCancelPendingPipelines Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder autoCancelPendingPipelines(String autoCancelPendingPipelines) {
            return autoCancelPendingPipelines(Output.of(autoCancelPendingPipelines));
        }

        /**
         * @param autoDevopsDeployStrategy Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsDeployStrategy(@Nullable Output<String> autoDevopsDeployStrategy) {
            $.autoDevopsDeployStrategy = autoDevopsDeployStrategy;
            return this;
        }

        /**
         * @param autoDevopsDeployStrategy Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsDeployStrategy(String autoDevopsDeployStrategy) {
            return autoDevopsDeployStrategy(Output.of(autoDevopsDeployStrategy));
        }

        /**
         * @param autoDevopsEnabled Enable Auto DevOps for this project.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsEnabled(@Nullable Output<Boolean> autoDevopsEnabled) {
            $.autoDevopsEnabled = autoDevopsEnabled;
            return this;
        }

        /**
         * @param autoDevopsEnabled Enable Auto DevOps for this project.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsEnabled(Boolean autoDevopsEnabled) {
            return autoDevopsEnabled(Output.of(autoDevopsEnabled));
        }

        /**
         * @param autoDuoCodeReviewEnabled Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
         * 
         * @return builder
         * 
         */
        public Builder autoDuoCodeReviewEnabled(@Nullable Output<Boolean> autoDuoCodeReviewEnabled) {
            $.autoDuoCodeReviewEnabled = autoDuoCodeReviewEnabled;
            return this;
        }

        /**
         * @param autoDuoCodeReviewEnabled Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
         * 
         * @return builder
         * 
         */
        public Builder autoDuoCodeReviewEnabled(Boolean autoDuoCodeReviewEnabled) {
            return autoDuoCodeReviewEnabled(Output.of(autoDuoCodeReviewEnabled));
        }

        /**
         * @param autocloseReferencedIssues Set whether auto-closing referenced issues on default branch.
         * 
         * @return builder
         * 
         */
        public Builder autocloseReferencedIssues(@Nullable Output<Boolean> autocloseReferencedIssues) {
            $.autocloseReferencedIssues = autocloseReferencedIssues;
            return this;
        }

        /**
         * @param autocloseReferencedIssues Set whether auto-closing referenced issues on default branch.
         * 
         * @return builder
         * 
         */
        public Builder autocloseReferencedIssues(Boolean autocloseReferencedIssues) {
            return autocloseReferencedIssues(Output.of(autocloseReferencedIssues));
        }

        /**
         * @param avatar A local path to the avatar image to upload. **Note**: not available for imported resources.
         * 
         * @return builder
         * 
         */
        public Builder avatar(@Nullable Output<String> avatar) {
            $.avatar = avatar;
            return this;
        }

        /**
         * @param avatar A local path to the avatar image to upload. **Note**: not available for imported resources.
         * 
         * @return builder
         * 
         */
        public Builder avatar(String avatar) {
            return avatar(Output.of(avatar));
        }

        /**
         * @param avatarHash The hash of the avatar image. Use `filesha256(&#34;path/to/avatar.png&#34;)` whenever possible. **Note**: this is used to trigger an update of the avatar. If it&#39;s not given, but an avatar is given, the avatar will be updated each time.
         * 
         * @return builder
         * 
         */
        public Builder avatarHash(@Nullable Output<String> avatarHash) {
            $.avatarHash = avatarHash;
            return this;
        }

        /**
         * @param avatarHash The hash of the avatar image. Use `filesha256(&#34;path/to/avatar.png&#34;)` whenever possible. **Note**: this is used to trigger an update of the avatar. If it&#39;s not given, but an avatar is given, the avatar will be updated each time.
         * 
         * @return builder
         * 
         */
        public Builder avatarHash(String avatarHash) {
            return avatarHash(Output.of(avatarHash));
        }

        /**
         * @param branches Branches to fork (empty for all branches).
         * 
         * @return builder
         * 
         */
        public Builder branches(@Nullable Output<String> branches) {
            $.branches = branches;
            return this;
        }

        /**
         * @param branches Branches to fork (empty for all branches).
         * 
         * @return builder
         * 
         */
        public Builder branches(String branches) {
            return branches(Output.of(branches));
        }

        /**
         * @param buildGitStrategy The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
         * 
         * @return builder
         * 
         */
        public Builder buildGitStrategy(@Nullable Output<String> buildGitStrategy) {
            $.buildGitStrategy = buildGitStrategy;
            return this;
        }

        /**
         * @param buildGitStrategy The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
         * 
         * @return builder
         * 
         */
        public Builder buildGitStrategy(String buildGitStrategy) {
            return buildGitStrategy(Output.of(buildGitStrategy));
        }

        /**
         * @param buildTimeout The maximum amount of time, in seconds, that a job can run.
         * 
         * @return builder
         * 
         */
        public Builder buildTimeout(@Nullable Output<Integer> buildTimeout) {
            $.buildTimeout = buildTimeout;
            return this;
        }

        /**
         * @param buildTimeout The maximum amount of time, in seconds, that a job can run.
         * 
         * @return builder
         * 
         */
        public Builder buildTimeout(Integer buildTimeout) {
            return buildTimeout(Output.of(buildTimeout));
        }

        /**
         * @param buildsAccessLevel Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder buildsAccessLevel(@Nullable Output<String> buildsAccessLevel) {
            $.buildsAccessLevel = buildsAccessLevel;
            return this;
        }

        /**
         * @param buildsAccessLevel Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder buildsAccessLevel(String buildsAccessLevel) {
            return buildsAccessLevel(Output.of(buildsAccessLevel));
        }

        /**
         * @param ciConfigPath Custom Path to CI config file.
         * 
         * @return builder
         * 
         */
        public Builder ciConfigPath(@Nullable Output<String> ciConfigPath) {
            $.ciConfigPath = ciConfigPath;
            return this;
        }

        /**
         * @param ciConfigPath Custom Path to CI config file.
         * 
         * @return builder
         * 
         */
        public Builder ciConfigPath(String ciConfigPath) {
            return ciConfigPath(Output.of(ciConfigPath));
        }

        /**
         * @param ciDefaultGitDepth Default number of revisions for shallow cloning.
         * 
         * @return builder
         * 
         */
        public Builder ciDefaultGitDepth(@Nullable Output<Integer> ciDefaultGitDepth) {
            $.ciDefaultGitDepth = ciDefaultGitDepth;
            return this;
        }

        /**
         * @param ciDefaultGitDepth Default number of revisions for shallow cloning.
         * 
         * @return builder
         * 
         */
        public Builder ciDefaultGitDepth(Integer ciDefaultGitDepth) {
            return ciDefaultGitDepth(Output.of(ciDefaultGitDepth));
        }

        /**
         * @param ciDeletePipelinesInSeconds Pipelines older than the configured time are deleted.
         * 
         * @return builder
         * 
         */
        public Builder ciDeletePipelinesInSeconds(@Nullable Output<Integer> ciDeletePipelinesInSeconds) {
            $.ciDeletePipelinesInSeconds = ciDeletePipelinesInSeconds;
            return this;
        }

        /**
         * @param ciDeletePipelinesInSeconds Pipelines older than the configured time are deleted.
         * 
         * @return builder
         * 
         */
        public Builder ciDeletePipelinesInSeconds(Integer ciDeletePipelinesInSeconds) {
            return ciDeletePipelinesInSeconds(Output.of(ciDeletePipelinesInSeconds));
        }

        /**
         * @param ciForwardDeploymentEnabled When a new deployment job starts, skip older deployment jobs that are still pending.
         * 
         * @return builder
         * 
         */
        public Builder ciForwardDeploymentEnabled(@Nullable Output<Boolean> ciForwardDeploymentEnabled) {
            $.ciForwardDeploymentEnabled = ciForwardDeploymentEnabled;
            return this;
        }

        /**
         * @param ciForwardDeploymentEnabled When a new deployment job starts, skip older deployment jobs that are still pending.
         * 
         * @return builder
         * 
         */
        public Builder ciForwardDeploymentEnabled(Boolean ciForwardDeploymentEnabled) {
            return ciForwardDeploymentEnabled(Output.of(ciForwardDeploymentEnabled));
        }

        /**
         * @param ciForwardDeploymentRollbackAllowed Allow job retries even if the deployment job is outdated.
         * 
         * @return builder
         * 
         */
        public Builder ciForwardDeploymentRollbackAllowed(@Nullable Output<Boolean> ciForwardDeploymentRollbackAllowed) {
            $.ciForwardDeploymentRollbackAllowed = ciForwardDeploymentRollbackAllowed;
            return this;
        }

        /**
         * @param ciForwardDeploymentRollbackAllowed Allow job retries even if the deployment job is outdated.
         * 
         * @return builder
         * 
         */
        public Builder ciForwardDeploymentRollbackAllowed(Boolean ciForwardDeploymentRollbackAllowed) {
            return ciForwardDeploymentRollbackAllowed(Output.of(ciForwardDeploymentRollbackAllowed));
        }

        /**
         * @param ciIdTokenSubClaimComponents Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to [&#34;project*path&#34;, &#34;ref*type&#34;, &#34;ref&#34;]. Introduced in GitLab 17.10.
         * 
         * @return builder
         * 
         */
        public Builder ciIdTokenSubClaimComponents(@Nullable Output<List<String>> ciIdTokenSubClaimComponents) {
            $.ciIdTokenSubClaimComponents = ciIdTokenSubClaimComponents;
            return this;
        }

        /**
         * @param ciIdTokenSubClaimComponents Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to [&#34;project*path&#34;, &#34;ref*type&#34;, &#34;ref&#34;]. Introduced in GitLab 17.10.
         * 
         * @return builder
         * 
         */
        public Builder ciIdTokenSubClaimComponents(List<String> ciIdTokenSubClaimComponents) {
            return ciIdTokenSubClaimComponents(Output.of(ciIdTokenSubClaimComponents));
        }

        /**
         * @param ciIdTokenSubClaimComponents Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to [&#34;project*path&#34;, &#34;ref*type&#34;, &#34;ref&#34;]. Introduced in GitLab 17.10.
         * 
         * @return builder
         * 
         */
        public Builder ciIdTokenSubClaimComponents(String... ciIdTokenSubClaimComponents) {
            return ciIdTokenSubClaimComponents(List.of(ciIdTokenSubClaimComponents));
        }

        /**
         * @param ciPipelineVariablesMinimumOverrideRole The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `no_one_allowed`
         * 
         * @return builder
         * 
         */
        public Builder ciPipelineVariablesMinimumOverrideRole(@Nullable Output<String> ciPipelineVariablesMinimumOverrideRole) {
            $.ciPipelineVariablesMinimumOverrideRole = ciPipelineVariablesMinimumOverrideRole;
            return this;
        }

        /**
         * @param ciPipelineVariablesMinimumOverrideRole The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `no_one_allowed`
         * 
         * @return builder
         * 
         */
        public Builder ciPipelineVariablesMinimumOverrideRole(String ciPipelineVariablesMinimumOverrideRole) {
            return ciPipelineVariablesMinimumOverrideRole(Output.of(ciPipelineVariablesMinimumOverrideRole));
        }

        /**
         * @param ciRestrictPipelineCancellationRole The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
         * 
         * @return builder
         * 
         */
        public Builder ciRestrictPipelineCancellationRole(@Nullable Output<String> ciRestrictPipelineCancellationRole) {
            $.ciRestrictPipelineCancellationRole = ciRestrictPipelineCancellationRole;
            return this;
        }

        /**
         * @param ciRestrictPipelineCancellationRole The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
         * 
         * @return builder
         * 
         */
        public Builder ciRestrictPipelineCancellationRole(String ciRestrictPipelineCancellationRole) {
            return ciRestrictPipelineCancellationRole(Output.of(ciRestrictPipelineCancellationRole));
        }

        /**
         * @param ciSeparatedCaches Use separate caches for protected branches.
         * 
         * @return builder
         * 
         */
        public Builder ciSeparatedCaches(@Nullable Output<Boolean> ciSeparatedCaches) {
            $.ciSeparatedCaches = ciSeparatedCaches;
            return this;
        }

        /**
         * @param ciSeparatedCaches Use separate caches for protected branches.
         * 
         * @return builder
         * 
         */
        public Builder ciSeparatedCaches(Boolean ciSeparatedCaches) {
            return ciSeparatedCaches(Output.of(ciSeparatedCaches));
        }

        /**
         * @param containerExpirationPolicy Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
         * 
         * @return builder
         * 
         */
        public Builder containerExpirationPolicy(@Nullable Output<ProjectContainerExpirationPolicyArgs> containerExpirationPolicy) {
            $.containerExpirationPolicy = containerExpirationPolicy;
            return this;
        }

        /**
         * @param containerExpirationPolicy Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
         * 
         * @return builder
         * 
         */
        public Builder containerExpirationPolicy(ProjectContainerExpirationPolicyArgs containerExpirationPolicy) {
            return containerExpirationPolicy(Output.of(containerExpirationPolicy));
        }

        /**
         * @param containerRegistryAccessLevel Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryAccessLevel(@Nullable Output<String> containerRegistryAccessLevel) {
            $.containerRegistryAccessLevel = containerRegistryAccessLevel;
            return this;
        }

        /**
         * @param containerRegistryAccessLevel Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryAccessLevel(String containerRegistryAccessLevel) {
            return containerRegistryAccessLevel(Output.of(containerRegistryAccessLevel));
        }

        /**
         * @param containerRegistryEnabled Enable container registry for the project.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `container_registry_access_level` instead.
         * 
         */
        @Deprecated /* Use `container_registry_access_level` instead. */
        public Builder containerRegistryEnabled(@Nullable Output<Boolean> containerRegistryEnabled) {
            $.containerRegistryEnabled = containerRegistryEnabled;
            return this;
        }

        /**
         * @param containerRegistryEnabled Enable container registry for the project.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `container_registry_access_level` instead.
         * 
         */
        @Deprecated /* Use `container_registry_access_level` instead. */
        public Builder containerRegistryEnabled(Boolean containerRegistryEnabled) {
            return containerRegistryEnabled(Output.of(containerRegistryEnabled));
        }

        /**
         * @param defaultBranch The default branch for the project.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(@Nullable Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param defaultBranch The default branch for the project.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        /**
         * @param description A description of the project.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the project.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param emailsEnabled Enable email notifications.
         * 
         * @return builder
         * 
         */
        public Builder emailsEnabled(@Nullable Output<Boolean> emailsEnabled) {
            $.emailsEnabled = emailsEnabled;
            return this;
        }

        /**
         * @param emailsEnabled Enable email notifications.
         * 
         * @return builder
         * 
         */
        public Builder emailsEnabled(Boolean emailsEnabled) {
            return emailsEnabled(Output.of(emailsEnabled));
        }

        /**
         * @param environmentsAccessLevel Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder environmentsAccessLevel(@Nullable Output<String> environmentsAccessLevel) {
            $.environmentsAccessLevel = environmentsAccessLevel;
            return this;
        }

        /**
         * @param environmentsAccessLevel Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder environmentsAccessLevel(String environmentsAccessLevel) {
            return environmentsAccessLevel(Output.of(environmentsAccessLevel));
        }

        /**
         * @param externalAuthorizationClassificationLabel The classification label for the project.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationClassificationLabel(@Nullable Output<String> externalAuthorizationClassificationLabel) {
            $.externalAuthorizationClassificationLabel = externalAuthorizationClassificationLabel;
            return this;
        }

        /**
         * @param externalAuthorizationClassificationLabel The classification label for the project.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationClassificationLabel(String externalAuthorizationClassificationLabel) {
            return externalAuthorizationClassificationLabel(Output.of(externalAuthorizationClassificationLabel));
        }

        /**
         * @param featureFlagsAccessLevel Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder featureFlagsAccessLevel(@Nullable Output<String> featureFlagsAccessLevel) {
            $.featureFlagsAccessLevel = featureFlagsAccessLevel;
            return this;
        }

        /**
         * @param featureFlagsAccessLevel Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder featureFlagsAccessLevel(String featureFlagsAccessLevel) {
            return featureFlagsAccessLevel(Output.of(featureFlagsAccessLevel));
        }

        /**
         * @param forkedFromProjectId The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
         * 
         * @return builder
         * 
         */
        public Builder forkedFromProjectId(@Nullable Output<Integer> forkedFromProjectId) {
            $.forkedFromProjectId = forkedFromProjectId;
            return this;
        }

        /**
         * @param forkedFromProjectId The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
         * 
         * @return builder
         * 
         */
        public Builder forkedFromProjectId(Integer forkedFromProjectId) {
            return forkedFromProjectId(Output.of(forkedFromProjectId));
        }

        /**
         * @param forkingAccessLevel Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder forkingAccessLevel(@Nullable Output<String> forkingAccessLevel) {
            $.forkingAccessLevel = forkingAccessLevel;
            return this;
        }

        /**
         * @param forkingAccessLevel Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder forkingAccessLevel(String forkingAccessLevel) {
            return forkingAccessLevel(Output.of(forkingAccessLevel));
        }

        /**
         * @param groupRunnersEnabled Enable group runners for this project.
         * 
         * @return builder
         * 
         */
        public Builder groupRunnersEnabled(@Nullable Output<Boolean> groupRunnersEnabled) {
            $.groupRunnersEnabled = groupRunnersEnabled;
            return this;
        }

        /**
         * @param groupRunnersEnabled Enable group runners for this project.
         * 
         * @return builder
         * 
         */
        public Builder groupRunnersEnabled(Boolean groupRunnersEnabled) {
            return groupRunnersEnabled(Output.of(groupRunnersEnabled));
        }

        /**
         * @param groupWithProjectTemplatesId For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
         * 
         * @return builder
         * 
         */
        public Builder groupWithProjectTemplatesId(@Nullable Output<Integer> groupWithProjectTemplatesId) {
            $.groupWithProjectTemplatesId = groupWithProjectTemplatesId;
            return this;
        }

        /**
         * @param groupWithProjectTemplatesId For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
         * 
         * @return builder
         * 
         */
        public Builder groupWithProjectTemplatesId(Integer groupWithProjectTemplatesId) {
            return groupWithProjectTemplatesId(Output.of(groupWithProjectTemplatesId));
        }

        /**
         * @param importUrl Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
         * 
         * @return builder
         * 
         */
        public Builder importUrl(@Nullable Output<String> importUrl) {
            $.importUrl = importUrl;
            return this;
        }

        /**
         * @param importUrl Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
         * 
         * @return builder
         * 
         */
        public Builder importUrl(String importUrl) {
            return importUrl(Output.of(importUrl));
        }

        /**
         * @param importUrlPassword The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
         * 
         * @return builder
         * 
         */
        public Builder importUrlPassword(@Nullable Output<String> importUrlPassword) {
            $.importUrlPassword = importUrlPassword;
            return this;
        }

        /**
         * @param importUrlPassword The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
         * 
         * @return builder
         * 
         */
        public Builder importUrlPassword(String importUrlPassword) {
            return importUrlPassword(Output.of(importUrlPassword));
        }

        /**
         * @param importUrlUsername The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
         * 
         * @return builder
         * 
         */
        public Builder importUrlUsername(@Nullable Output<String> importUrlUsername) {
            $.importUrlUsername = importUrlUsername;
            return this;
        }

        /**
         * @param importUrlUsername The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
         * 
         * @return builder
         * 
         */
        public Builder importUrlUsername(String importUrlUsername) {
            return importUrlUsername(Output.of(importUrlUsername));
        }

        /**
         * @param infrastructureAccessLevel Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureAccessLevel(@Nullable Output<String> infrastructureAccessLevel) {
            $.infrastructureAccessLevel = infrastructureAccessLevel;
            return this;
        }

        /**
         * @param infrastructureAccessLevel Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureAccessLevel(String infrastructureAccessLevel) {
            return infrastructureAccessLevel(Output.of(infrastructureAccessLevel));
        }

        /**
         * @param initializeWithReadme Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `default_branch`.
         * 
         * @return builder
         * 
         */
        public Builder initializeWithReadme(@Nullable Output<Boolean> initializeWithReadme) {
            $.initializeWithReadme = initializeWithReadme;
            return this;
        }

        /**
         * @param initializeWithReadme Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `default_branch`.
         * 
         * @return builder
         * 
         */
        public Builder initializeWithReadme(Boolean initializeWithReadme) {
            return initializeWithReadme(Output.of(initializeWithReadme));
        }

        /**
         * @param issuesAccessLevel Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder issuesAccessLevel(@Nullable Output<String> issuesAccessLevel) {
            $.issuesAccessLevel = issuesAccessLevel;
            return this;
        }

        /**
         * @param issuesAccessLevel Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder issuesAccessLevel(String issuesAccessLevel) {
            return issuesAccessLevel(Output.of(issuesAccessLevel));
        }

        /**
         * @param issuesEnabled Enable issue tracking for the project.
         * 
         * @return builder
         * 
         */
        public Builder issuesEnabled(@Nullable Output<Boolean> issuesEnabled) {
            $.issuesEnabled = issuesEnabled;
            return this;
        }

        /**
         * @param issuesEnabled Enable issue tracking for the project.
         * 
         * @return builder
         * 
         */
        public Builder issuesEnabled(Boolean issuesEnabled) {
            return issuesEnabled(Output.of(issuesEnabled));
        }

        /**
         * @param issuesTemplate Sets the template for new issues in the project.
         * 
         * @return builder
         * 
         */
        public Builder issuesTemplate(@Nullable Output<String> issuesTemplate) {
            $.issuesTemplate = issuesTemplate;
            return this;
        }

        /**
         * @param issuesTemplate Sets the template for new issues in the project.
         * 
         * @return builder
         * 
         */
        public Builder issuesTemplate(String issuesTemplate) {
            return issuesTemplate(Output.of(issuesTemplate));
        }

        /**
         * @param keepLatestArtifact Disable or enable the ability to keep the latest artifact for this project.
         * 
         * @return builder
         * 
         */
        public Builder keepLatestArtifact(@Nullable Output<Boolean> keepLatestArtifact) {
            $.keepLatestArtifact = keepLatestArtifact;
            return this;
        }

        /**
         * @param keepLatestArtifact Disable or enable the ability to keep the latest artifact for this project.
         * 
         * @return builder
         * 
         */
        public Builder keepLatestArtifact(Boolean keepLatestArtifact) {
            return keepLatestArtifact(Output.of(keepLatestArtifact));
        }

        /**
         * @param lfsEnabled Enable LFS for the project.
         * 
         * @return builder
         * 
         */
        public Builder lfsEnabled(@Nullable Output<Boolean> lfsEnabled) {
            $.lfsEnabled = lfsEnabled;
            return this;
        }

        /**
         * @param lfsEnabled Enable LFS for the project.
         * 
         * @return builder
         * 
         */
        public Builder lfsEnabled(Boolean lfsEnabled) {
            return lfsEnabled(Output.of(lfsEnabled));
        }

        /**
         * @param mergeCommitTemplate Template used to create merge commit message in merge requests.
         * 
         * @return builder
         * 
         */
        public Builder mergeCommitTemplate(@Nullable Output<String> mergeCommitTemplate) {
            $.mergeCommitTemplate = mergeCommitTemplate;
            return this;
        }

        /**
         * @param mergeCommitTemplate Template used to create merge commit message in merge requests.
         * 
         * @return builder
         * 
         */
        public Builder mergeCommitTemplate(String mergeCommitTemplate) {
            return mergeCommitTemplate(Output.of(mergeCommitTemplate));
        }

        /**
         * @param mergeMethod Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
         * 
         * @return builder
         * 
         */
        public Builder mergeMethod(@Nullable Output<String> mergeMethod) {
            $.mergeMethod = mergeMethod;
            return this;
        }

        /**
         * @param mergeMethod Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
         * 
         * @return builder
         * 
         */
        public Builder mergeMethod(String mergeMethod) {
            return mergeMethod(Output.of(mergeMethod));
        }

        /**
         * @param mergePipelinesEnabled Enable or disable merge pipelines.
         * 
         * @return builder
         * 
         */
        public Builder mergePipelinesEnabled(@Nullable Output<Boolean> mergePipelinesEnabled) {
            $.mergePipelinesEnabled = mergePipelinesEnabled;
            return this;
        }

        /**
         * @param mergePipelinesEnabled Enable or disable merge pipelines.
         * 
         * @return builder
         * 
         */
        public Builder mergePipelinesEnabled(Boolean mergePipelinesEnabled) {
            return mergePipelinesEnabled(Output.of(mergePipelinesEnabled));
        }

        /**
         * @param mergeRequestsAccessLevel Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsAccessLevel(@Nullable Output<String> mergeRequestsAccessLevel) {
            $.mergeRequestsAccessLevel = mergeRequestsAccessLevel;
            return this;
        }

        /**
         * @param mergeRequestsAccessLevel Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsAccessLevel(String mergeRequestsAccessLevel) {
            return mergeRequestsAccessLevel(Output.of(mergeRequestsAccessLevel));
        }

        /**
         * @param mergeRequestsEnabled Enable merge requests for the project.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsEnabled(@Nullable Output<Boolean> mergeRequestsEnabled) {
            $.mergeRequestsEnabled = mergeRequestsEnabled;
            return this;
        }

        /**
         * @param mergeRequestsEnabled Enable merge requests for the project.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsEnabled(Boolean mergeRequestsEnabled) {
            return mergeRequestsEnabled(Output.of(mergeRequestsEnabled));
        }

        /**
         * @param mergeRequestsTemplate Sets the template for new merge requests in the project.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsTemplate(@Nullable Output<String> mergeRequestsTemplate) {
            $.mergeRequestsTemplate = mergeRequestsTemplate;
            return this;
        }

        /**
         * @param mergeRequestsTemplate Sets the template for new merge requests in the project.
         * 
         * @return builder
         * 
         */
        public Builder mergeRequestsTemplate(String mergeRequestsTemplate) {
            return mergeRequestsTemplate(Output.of(mergeRequestsTemplate));
        }

        /**
         * @param mergeTrainsEnabled Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
         * 
         * @return builder
         * 
         */
        public Builder mergeTrainsEnabled(@Nullable Output<Boolean> mergeTrainsEnabled) {
            $.mergeTrainsEnabled = mergeTrainsEnabled;
            return this;
        }

        /**
         * @param mergeTrainsEnabled Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
         * 
         * @return builder
         * 
         */
        public Builder mergeTrainsEnabled(Boolean mergeTrainsEnabled) {
            return mergeTrainsEnabled(Output.of(mergeTrainsEnabled));
        }

        /**
         * @param mirror Enable project pull mirror.
         * 
         * @return builder
         * 
         */
        public Builder mirror(@Nullable Output<Boolean> mirror) {
            $.mirror = mirror;
            return this;
        }

        /**
         * @param mirror Enable project pull mirror.
         * 
         * @return builder
         * 
         */
        public Builder mirror(Boolean mirror) {
            return mirror(Output.of(mirror));
        }

        /**
         * @param mirrorOverwritesDivergedBranches Enable overwrite diverged branches for a mirrored project.
         * 
         * @return builder
         * 
         */
        public Builder mirrorOverwritesDivergedBranches(@Nullable Output<Boolean> mirrorOverwritesDivergedBranches) {
            $.mirrorOverwritesDivergedBranches = mirrorOverwritesDivergedBranches;
            return this;
        }

        /**
         * @param mirrorOverwritesDivergedBranches Enable overwrite diverged branches for a mirrored project.
         * 
         * @return builder
         * 
         */
        public Builder mirrorOverwritesDivergedBranches(Boolean mirrorOverwritesDivergedBranches) {
            return mirrorOverwritesDivergedBranches(Output.of(mirrorOverwritesDivergedBranches));
        }

        /**
         * @param mirrorTriggerBuilds Enable trigger builds on pushes for a mirrored project.
         * 
         * @return builder
         * 
         */
        public Builder mirrorTriggerBuilds(@Nullable Output<Boolean> mirrorTriggerBuilds) {
            $.mirrorTriggerBuilds = mirrorTriggerBuilds;
            return this;
        }

        /**
         * @param mirrorTriggerBuilds Enable trigger builds on pushes for a mirrored project.
         * 
         * @return builder
         * 
         */
        public Builder mirrorTriggerBuilds(Boolean mirrorTriggerBuilds) {
            return mirrorTriggerBuilds(Output.of(mirrorTriggerBuilds));
        }

        /**
         * @param modelExperimentsAccessLevel Set visibility of machine learning model experiments. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder modelExperimentsAccessLevel(@Nullable Output<String> modelExperimentsAccessLevel) {
            $.modelExperimentsAccessLevel = modelExperimentsAccessLevel;
            return this;
        }

        /**
         * @param modelExperimentsAccessLevel Set visibility of machine learning model experiments. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder modelExperimentsAccessLevel(String modelExperimentsAccessLevel) {
            return modelExperimentsAccessLevel(Output.of(modelExperimentsAccessLevel));
        }

        /**
         * @param modelRegistryAccessLevel Set visibility of machine learning model registry. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder modelRegistryAccessLevel(@Nullable Output<String> modelRegistryAccessLevel) {
            $.modelRegistryAccessLevel = modelRegistryAccessLevel;
            return this;
        }

        /**
         * @param modelRegistryAccessLevel Set visibility of machine learning model registry. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder modelRegistryAccessLevel(String modelRegistryAccessLevel) {
            return modelRegistryAccessLevel(Output.of(modelRegistryAccessLevel));
        }

        /**
         * @param monitorAccessLevel Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder monitorAccessLevel(@Nullable Output<String> monitorAccessLevel) {
            $.monitorAccessLevel = monitorAccessLevel;
            return this;
        }

        /**
         * @param monitorAccessLevel Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder monitorAccessLevel(String monitorAccessLevel) {
            return monitorAccessLevel(Output.of(monitorAccessLevel));
        }

        /**
         * @param mrDefaultTargetSelf For forked projects, target merge requests to this project. If false, the target will be the upstream project.
         * 
         * @return builder
         * 
         */
        public Builder mrDefaultTargetSelf(@Nullable Output<Boolean> mrDefaultTargetSelf) {
            $.mrDefaultTargetSelf = mrDefaultTargetSelf;
            return this;
        }

        /**
         * @param mrDefaultTargetSelf For forked projects, target merge requests to this project. If false, the target will be the upstream project.
         * 
         * @return builder
         * 
         */
        public Builder mrDefaultTargetSelf(Boolean mrDefaultTargetSelf) {
            return mrDefaultTargetSelf(Output.of(mrDefaultTargetSelf));
        }

        /**
         * @param name The name of the project.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the project.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceId The namespace (group or user) of the project. Defaults to your user.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<Integer> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId The namespace (group or user) of the project. Defaults to your user.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(Integer namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param onlyAllowMergeIfAllDiscussionsAreResolved Set to true if you want allow merges only if all discussions are resolved.
         * 
         * @return builder
         * 
         */
        public Builder onlyAllowMergeIfAllDiscussionsAreResolved(@Nullable Output<Boolean> onlyAllowMergeIfAllDiscussionsAreResolved) {
            $.onlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
            return this;
        }

        /**
         * @param onlyAllowMergeIfAllDiscussionsAreResolved Set to true if you want allow merges only if all discussions are resolved.
         * 
         * @return builder
         * 
         */
        public Builder onlyAllowMergeIfAllDiscussionsAreResolved(Boolean onlyAllowMergeIfAllDiscussionsAreResolved) {
            return onlyAllowMergeIfAllDiscussionsAreResolved(Output.of(onlyAllowMergeIfAllDiscussionsAreResolved));
        }

        /**
         * @param onlyAllowMergeIfPipelineSucceeds Set to true if you want allow merges only if a pipeline succeeds.
         * 
         * @return builder
         * 
         */
        public Builder onlyAllowMergeIfPipelineSucceeds(@Nullable Output<Boolean> onlyAllowMergeIfPipelineSucceeds) {
            $.onlyAllowMergeIfPipelineSucceeds = onlyAllowMergeIfPipelineSucceeds;
            return this;
        }

        /**
         * @param onlyAllowMergeIfPipelineSucceeds Set to true if you want allow merges only if a pipeline succeeds.
         * 
         * @return builder
         * 
         */
        public Builder onlyAllowMergeIfPipelineSucceeds(Boolean onlyAllowMergeIfPipelineSucceeds) {
            return onlyAllowMergeIfPipelineSucceeds(Output.of(onlyAllowMergeIfPipelineSucceeds));
        }

        /**
         * @param onlyMirrorProtectedBranches Enable only mirror protected branches for a mirrored project.
         * 
         * @return builder
         * 
         */
        public Builder onlyMirrorProtectedBranches(@Nullable Output<Boolean> onlyMirrorProtectedBranches) {
            $.onlyMirrorProtectedBranches = onlyMirrorProtectedBranches;
            return this;
        }

        /**
         * @param onlyMirrorProtectedBranches Enable only mirror protected branches for a mirrored project.
         * 
         * @return builder
         * 
         */
        public Builder onlyMirrorProtectedBranches(Boolean onlyMirrorProtectedBranches) {
            return onlyMirrorProtectedBranches(Output.of(onlyMirrorProtectedBranches));
        }

        /**
         * @param packagesEnabled Enable packages repository for the project.
         * 
         * @return builder
         * 
         */
        public Builder packagesEnabled(@Nullable Output<Boolean> packagesEnabled) {
            $.packagesEnabled = packagesEnabled;
            return this;
        }

        /**
         * @param packagesEnabled Enable packages repository for the project.
         * 
         * @return builder
         * 
         */
        public Builder packagesEnabled(Boolean packagesEnabled) {
            return packagesEnabled(Output.of(packagesEnabled));
        }

        /**
         * @param pagesAccessLevel Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder pagesAccessLevel(@Nullable Output<String> pagesAccessLevel) {
            $.pagesAccessLevel = pagesAccessLevel;
            return this;
        }

        /**
         * @param pagesAccessLevel Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder pagesAccessLevel(String pagesAccessLevel) {
            return pagesAccessLevel(Output.of(pagesAccessLevel));
        }

        /**
         * @param path The path of the repository.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of the repository.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param permanentlyDeleteOnDestroy Set to `true` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
         * 
         * @return builder
         * 
         */
        public Builder permanentlyDeleteOnDestroy(@Nullable Output<Boolean> permanentlyDeleteOnDestroy) {
            $.permanentlyDeleteOnDestroy = permanentlyDeleteOnDestroy;
            return this;
        }

        /**
         * @param permanentlyDeleteOnDestroy Set to `true` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
         * 
         * @return builder
         * 
         */
        public Builder permanentlyDeleteOnDestroy(Boolean permanentlyDeleteOnDestroy) {
            return permanentlyDeleteOnDestroy(Output.of(permanentlyDeleteOnDestroy));
        }

        /**
         * @param pipelinesEnabled Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated in favor of `builds_access_level`
         * 
         */
        @Deprecated /* Deprecated in favor of `builds_access_level` */
        public Builder pipelinesEnabled(@Nullable Output<Boolean> pipelinesEnabled) {
            $.pipelinesEnabled = pipelinesEnabled;
            return this;
        }

        /**
         * @param pipelinesEnabled Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated in favor of `builds_access_level`
         * 
         */
        @Deprecated /* Deprecated in favor of `builds_access_level` */
        public Builder pipelinesEnabled(Boolean pipelinesEnabled) {
            return pipelinesEnabled(Output.of(pipelinesEnabled));
        }

        /**
         * @param preReceiveSecretDetectionEnabled Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
         * 
         * @return builder
         * 
         */
        public Builder preReceiveSecretDetectionEnabled(@Nullable Output<Boolean> preReceiveSecretDetectionEnabled) {
            $.preReceiveSecretDetectionEnabled = preReceiveSecretDetectionEnabled;
            return this;
        }

        /**
         * @param preReceiveSecretDetectionEnabled Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
         * 
         * @return builder
         * 
         */
        public Builder preReceiveSecretDetectionEnabled(Boolean preReceiveSecretDetectionEnabled) {
            return preReceiveSecretDetectionEnabled(Output.of(preReceiveSecretDetectionEnabled));
        }

        /**
         * @param preventMergeWithoutJiraIssue Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
         * 
         * @return builder
         * 
         */
        public Builder preventMergeWithoutJiraIssue(@Nullable Output<Boolean> preventMergeWithoutJiraIssue) {
            $.preventMergeWithoutJiraIssue = preventMergeWithoutJiraIssue;
            return this;
        }

        /**
         * @param preventMergeWithoutJiraIssue Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
         * 
         * @return builder
         * 
         */
        public Builder preventMergeWithoutJiraIssue(Boolean preventMergeWithoutJiraIssue) {
            return preventMergeWithoutJiraIssue(Output.of(preventMergeWithoutJiraIssue));
        }

        /**
         * @param printingMergeRequestLinkEnabled Show link to create/view merge request when pushing from the command line
         * 
         * @return builder
         * 
         */
        public Builder printingMergeRequestLinkEnabled(@Nullable Output<Boolean> printingMergeRequestLinkEnabled) {
            $.printingMergeRequestLinkEnabled = printingMergeRequestLinkEnabled;
            return this;
        }

        /**
         * @param printingMergeRequestLinkEnabled Show link to create/view merge request when pushing from the command line
         * 
         * @return builder
         * 
         */
        public Builder printingMergeRequestLinkEnabled(Boolean printingMergeRequestLinkEnabled) {
            return printingMergeRequestLinkEnabled(Output.of(printingMergeRequestLinkEnabled));
        }

        /**
         * @param publicBuilds If true, jobs can be viewed by non-project members.
         * 
         * @return builder
         * 
         * @deprecated
         * The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider.
         * 
         */
        @Deprecated /* The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider. */
        public Builder publicBuilds(@Nullable Output<Boolean> publicBuilds) {
            $.publicBuilds = publicBuilds;
            return this;
        }

        /**
         * @param publicBuilds If true, jobs can be viewed by non-project members.
         * 
         * @return builder
         * 
         * @deprecated
         * The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider.
         * 
         */
        @Deprecated /* The `public_builds` attribute has been deprecated in favor of `public_jobs` and will be removed in the next major version of the provider. */
        public Builder publicBuilds(Boolean publicBuilds) {
            return publicBuilds(Output.of(publicBuilds));
        }

        /**
         * @param publicJobs If true, jobs can be viewed by non-project members.
         * 
         * @return builder
         * 
         */
        public Builder publicJobs(@Nullable Output<Boolean> publicJobs) {
            $.publicJobs = publicJobs;
            return this;
        }

        /**
         * @param publicJobs If true, jobs can be viewed by non-project members.
         * 
         * @return builder
         * 
         */
        public Builder publicJobs(Boolean publicJobs) {
            return publicJobs(Output.of(publicJobs));
        }

        /**
         * @param pushRules Push rules for the project.
         * 
         * @return builder
         * 
         */
        public Builder pushRules(@Nullable Output<ProjectPushRulesArgs> pushRules) {
            $.pushRules = pushRules;
            return this;
        }

        /**
         * @param pushRules Push rules for the project.
         * 
         * @return builder
         * 
         */
        public Builder pushRules(ProjectPushRulesArgs pushRules) {
            return pushRules(Output.of(pushRules));
        }

        /**
         * @param releasesAccessLevel Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder releasesAccessLevel(@Nullable Output<String> releasesAccessLevel) {
            $.releasesAccessLevel = releasesAccessLevel;
            return this;
        }

        /**
         * @param releasesAccessLevel Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder releasesAccessLevel(String releasesAccessLevel) {
            return releasesAccessLevel(Output.of(releasesAccessLevel));
        }

        /**
         * @param removeSourceBranchAfterMerge Enable `Delete source branch` option by default for all new merge requests.
         * 
         * @return builder
         * 
         */
        public Builder removeSourceBranchAfterMerge(@Nullable Output<Boolean> removeSourceBranchAfterMerge) {
            $.removeSourceBranchAfterMerge = removeSourceBranchAfterMerge;
            return this;
        }

        /**
         * @param removeSourceBranchAfterMerge Enable `Delete source branch` option by default for all new merge requests.
         * 
         * @return builder
         * 
         */
        public Builder removeSourceBranchAfterMerge(Boolean removeSourceBranchAfterMerge) {
            return removeSourceBranchAfterMerge(Output.of(removeSourceBranchAfterMerge));
        }

        /**
         * @param repositoryAccessLevel Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryAccessLevel(@Nullable Output<String> repositoryAccessLevel) {
            $.repositoryAccessLevel = repositoryAccessLevel;
            return this;
        }

        /**
         * @param repositoryAccessLevel Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryAccessLevel(String repositoryAccessLevel) {
            return repositoryAccessLevel(Output.of(repositoryAccessLevel));
        }

        /**
         * @param repositoryStorage Which storage shard the repository is on. (administrator only)
         * 
         * @return builder
         * 
         */
        public Builder repositoryStorage(@Nullable Output<String> repositoryStorage) {
            $.repositoryStorage = repositoryStorage;
            return this;
        }

        /**
         * @param repositoryStorage Which storage shard the repository is on. (administrator only)
         * 
         * @return builder
         * 
         */
        public Builder repositoryStorage(String repositoryStorage) {
            return repositoryStorage(Output.of(repositoryStorage));
        }

        /**
         * @param requestAccessEnabled Allow users to request member access.
         * 
         * @return builder
         * 
         */
        public Builder requestAccessEnabled(@Nullable Output<Boolean> requestAccessEnabled) {
            $.requestAccessEnabled = requestAccessEnabled;
            return this;
        }

        /**
         * @param requestAccessEnabled Allow users to request member access.
         * 
         * @return builder
         * 
         */
        public Builder requestAccessEnabled(Boolean requestAccessEnabled) {
            return requestAccessEnabled(Output.of(requestAccessEnabled));
        }

        /**
         * @param requirementsAccessLevel Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder requirementsAccessLevel(@Nullable Output<String> requirementsAccessLevel) {
            $.requirementsAccessLevel = requirementsAccessLevel;
            return this;
        }

        /**
         * @param requirementsAccessLevel Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder requirementsAccessLevel(String requirementsAccessLevel) {
            return requirementsAccessLevel(Output.of(requirementsAccessLevel));
        }

        /**
         * @param resolveOutdatedDiffDiscussions Automatically resolve merge request diffs discussions on lines changed with a push.
         * 
         * @return builder
         * 
         */
        public Builder resolveOutdatedDiffDiscussions(@Nullable Output<Boolean> resolveOutdatedDiffDiscussions) {
            $.resolveOutdatedDiffDiscussions = resolveOutdatedDiffDiscussions;
            return this;
        }

        /**
         * @param resolveOutdatedDiffDiscussions Automatically resolve merge request diffs discussions on lines changed with a push.
         * 
         * @return builder
         * 
         */
        public Builder resolveOutdatedDiffDiscussions(Boolean resolveOutdatedDiffDiscussions) {
            return resolveOutdatedDiffDiscussions(Output.of(resolveOutdatedDiffDiscussions));
        }

        /**
         * @param restrictUserDefinedVariables Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder restrictUserDefinedVariables(@Nullable Output<Boolean> restrictUserDefinedVariables) {
            $.restrictUserDefinedVariables = restrictUserDefinedVariables;
            return this;
        }

        /**
         * @param restrictUserDefinedVariables Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder restrictUserDefinedVariables(Boolean restrictUserDefinedVariables) {
            return restrictUserDefinedVariables(Output.of(restrictUserDefinedVariables));
        }

        /**
         * @param securityAndComplianceAccessLevel Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder securityAndComplianceAccessLevel(@Nullable Output<String> securityAndComplianceAccessLevel) {
            $.securityAndComplianceAccessLevel = securityAndComplianceAccessLevel;
            return this;
        }

        /**
         * @param securityAndComplianceAccessLevel Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder securityAndComplianceAccessLevel(String securityAndComplianceAccessLevel) {
            return securityAndComplianceAccessLevel(Output.of(securityAndComplianceAccessLevel));
        }

        /**
         * @param sharedRunnersEnabled Enable shared runners for this project.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersEnabled(@Nullable Output<Boolean> sharedRunnersEnabled) {
            $.sharedRunnersEnabled = sharedRunnersEnabled;
            return this;
        }

        /**
         * @param sharedRunnersEnabled Enable shared runners for this project.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersEnabled(Boolean sharedRunnersEnabled) {
            return sharedRunnersEnabled(Output.of(sharedRunnersEnabled));
        }

        /**
         * @param skipWaitForDefaultBranchProtection If `true`, the default behavior to wait for the default branch protection to be created is skipped.
         * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
         * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
         * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
         * 
         * @return builder
         * 
         */
        public Builder skipWaitForDefaultBranchProtection(@Nullable Output<Boolean> skipWaitForDefaultBranchProtection) {
            $.skipWaitForDefaultBranchProtection = skipWaitForDefaultBranchProtection;
            return this;
        }

        /**
         * @param skipWaitForDefaultBranchProtection If `true`, the default behavior to wait for the default branch protection to be created is skipped.
         * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
         * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
         * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
         * 
         * @return builder
         * 
         */
        public Builder skipWaitForDefaultBranchProtection(Boolean skipWaitForDefaultBranchProtection) {
            return skipWaitForDefaultBranchProtection(Output.of(skipWaitForDefaultBranchProtection));
        }

        /**
         * @param snippetsAccessLevel Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder snippetsAccessLevel(@Nullable Output<String> snippetsAccessLevel) {
            $.snippetsAccessLevel = snippetsAccessLevel;
            return this;
        }

        /**
         * @param snippetsAccessLevel Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder snippetsAccessLevel(String snippetsAccessLevel) {
            return snippetsAccessLevel(Output.of(snippetsAccessLevel));
        }

        /**
         * @param snippetsEnabled Enable snippets for the project.
         * 
         * @return builder
         * 
         */
        public Builder snippetsEnabled(@Nullable Output<Boolean> snippetsEnabled) {
            $.snippetsEnabled = snippetsEnabled;
            return this;
        }

        /**
         * @param snippetsEnabled Enable snippets for the project.
         * 
         * @return builder
         * 
         */
        public Builder snippetsEnabled(Boolean snippetsEnabled) {
            return snippetsEnabled(Output.of(snippetsEnabled));
        }

        /**
         * @param squashCommitTemplate Template used to create squash commit message in merge requests.
         * 
         * @return builder
         * 
         */
        public Builder squashCommitTemplate(@Nullable Output<String> squashCommitTemplate) {
            $.squashCommitTemplate = squashCommitTemplate;
            return this;
        }

        /**
         * @param squashCommitTemplate Template used to create squash commit message in merge requests.
         * 
         * @return builder
         * 
         */
        public Builder squashCommitTemplate(String squashCommitTemplate) {
            return squashCommitTemplate(Output.of(squashCommitTemplate));
        }

        /**
         * @param squashOption Squash commits when merge request is merged. Valid values are `never` (Do not allow), `always` (Require), `default_on` (Encourage), or `default_off` (Allow). The default value is `default_off` (Allow).
         * 
         * @return builder
         * 
         */
        public Builder squashOption(@Nullable Output<String> squashOption) {
            $.squashOption = squashOption;
            return this;
        }

        /**
         * @param squashOption Squash commits when merge request is merged. Valid values are `never` (Do not allow), `always` (Require), `default_on` (Encourage), or `default_off` (Allow). The default value is `default_off` (Allow).
         * 
         * @return builder
         * 
         */
        public Builder squashOption(String squashOption) {
            return squashOption(Output.of(squashOption));
        }

        /**
         * @param suggestionCommitMessage The commit message used to apply merge request suggestions.
         * 
         * @return builder
         * 
         */
        public Builder suggestionCommitMessage(@Nullable Output<String> suggestionCommitMessage) {
            $.suggestionCommitMessage = suggestionCommitMessage;
            return this;
        }

        /**
         * @param suggestionCommitMessage The commit message used to apply merge request suggestions.
         * 
         * @return builder
         * 
         */
        public Builder suggestionCommitMessage(String suggestionCommitMessage) {
            return suggestionCommitMessage(Output.of(suggestionCommitMessage));
        }

        /**
         * @param tags The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param templateName When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param templateProjectId When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder templateProjectId(@Nullable Output<Integer> templateProjectId) {
            $.templateProjectId = templateProjectId;
            return this;
        }

        /**
         * @param templateProjectId When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder templateProjectId(Integer templateProjectId) {
            return templateProjectId(Output.of(templateProjectId));
        }

        /**
         * @param topics The list of topics for the project.
         * 
         * @return builder
         * 
         */
        public Builder topics(@Nullable Output<List<String>> topics) {
            $.topics = topics;
            return this;
        }

        /**
         * @param topics The list of topics for the project.
         * 
         * @return builder
         * 
         */
        public Builder topics(List<String> topics) {
            return topics(Output.of(topics));
        }

        /**
         * @param topics The list of topics for the project.
         * 
         * @return builder
         * 
         */
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        /**
         * @param useCustomTemplate Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
         * 	&gt; When using a custom template, [Group Tokens won&#39;t work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user&#39;s Personal Access Token.
         * 
         * @return builder
         * 
         */
        public Builder useCustomTemplate(@Nullable Output<Boolean> useCustomTemplate) {
            $.useCustomTemplate = useCustomTemplate;
            return this;
        }

        /**
         * @param useCustomTemplate Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
         * 	&gt; When using a custom template, [Group Tokens won&#39;t work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user&#39;s Personal Access Token.
         * 
         * @return builder
         * 
         */
        public Builder useCustomTemplate(Boolean useCustomTemplate) {
            return useCustomTemplate(Output.of(useCustomTemplate));
        }

        /**
         * @param visibilityLevel Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
         * 
         * @return builder
         * 
         */
        public Builder visibilityLevel(@Nullable Output<String> visibilityLevel) {
            $.visibilityLevel = visibilityLevel;
            return this;
        }

        /**
         * @param visibilityLevel Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
         * 
         * @return builder
         * 
         */
        public Builder visibilityLevel(String visibilityLevel) {
            return visibilityLevel(Output.of(visibilityLevel));
        }

        /**
         * @param wikiAccessLevel Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder wikiAccessLevel(@Nullable Output<String> wikiAccessLevel) {
            $.wikiAccessLevel = wikiAccessLevel;
            return this;
        }

        /**
         * @param wikiAccessLevel Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder wikiAccessLevel(String wikiAccessLevel) {
            return wikiAccessLevel(Output.of(wikiAccessLevel));
        }

        /**
         * @param wikiEnabled Enable wiki for the project.
         * 
         * @return builder
         * 
         */
        public Builder wikiEnabled(@Nullable Output<Boolean> wikiEnabled) {
            $.wikiEnabled = wikiEnabled;
            return this;
        }

        /**
         * @param wikiEnabled Enable wiki for the project.
         * 
         * @return builder
         * 
         */
        public Builder wikiEnabled(Boolean wikiEnabled) {
            return wikiEnabled(Output.of(wikiEnabled));
        }

        public ProjectArgs build() {
            return $;
        }
    }

}
