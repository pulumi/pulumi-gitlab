// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectContainerRepositoryProtectionState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectContainerRepositoryProtectionState Empty = new ProjectContainerRepositoryProtectionState();

    /**
     * Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
     * 
     */
    @Import(name="minimumAccessLevelForDelete")
    private @Nullable Output<String> minimumAccessLevelForDelete;

    /**
     * @return Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
     * 
     */
    public Optional<Output<String>> minimumAccessLevelForDelete() {
        return Optional.ofNullable(this.minimumAccessLevelForDelete);
    }

    /**
     * Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
     * 
     */
    @Import(name="minimumAccessLevelForPush")
    private @Nullable Output<String> minimumAccessLevelForPush;

    /**
     * @return Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
     * 
     */
    public Optional<Output<String>> minimumAccessLevelForPush() {
        return Optional.ofNullable(this.minimumAccessLevelForPush);
    }

    /**
     * ID or URL-encoded path of the project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return ID or URL-encoded path of the project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Unique ID of the protection rule.
     * 
     */
    @Import(name="protectionRuleId")
    private @Nullable Output<Integer> protectionRuleId;

    /**
     * @return Unique ID of the protection rule.
     * 
     */
    public Optional<Output<Integer>> protectionRuleId() {
        return Optional.ofNullable(this.protectionRuleId);
    }

    /**
     * Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project&#39;s full path
     * 
     */
    @Import(name="repositoryPathPattern")
    private @Nullable Output<String> repositoryPathPattern;

    /**
     * @return Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project&#39;s full path
     * 
     */
    public Optional<Output<String>> repositoryPathPattern() {
        return Optional.ofNullable(this.repositoryPathPattern);
    }

    private ProjectContainerRepositoryProtectionState() {}

    private ProjectContainerRepositoryProtectionState(ProjectContainerRepositoryProtectionState $) {
        this.minimumAccessLevelForDelete = $.minimumAccessLevelForDelete;
        this.minimumAccessLevelForPush = $.minimumAccessLevelForPush;
        this.project = $.project;
        this.protectionRuleId = $.protectionRuleId;
        this.repositoryPathPattern = $.repositoryPathPattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectContainerRepositoryProtectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectContainerRepositoryProtectionState $;

        public Builder() {
            $ = new ProjectContainerRepositoryProtectionState();
        }

        public Builder(ProjectContainerRepositoryProtectionState defaults) {
            $ = new ProjectContainerRepositoryProtectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param minimumAccessLevelForDelete Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
         * 
         * @return builder
         * 
         */
        public Builder minimumAccessLevelForDelete(@Nullable Output<String> minimumAccessLevelForDelete) {
            $.minimumAccessLevelForDelete = minimumAccessLevelForDelete;
            return this;
        }

        /**
         * @param minimumAccessLevelForDelete Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
         * 
         * @return builder
         * 
         */
        public Builder minimumAccessLevelForDelete(String minimumAccessLevelForDelete) {
            return minimumAccessLevelForDelete(Output.of(minimumAccessLevelForDelete));
        }

        /**
         * @param minimumAccessLevelForPush Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
         * 
         * @return builder
         * 
         */
        public Builder minimumAccessLevelForPush(@Nullable Output<String> minimumAccessLevelForPush) {
            $.minimumAccessLevelForPush = minimumAccessLevelForPush;
            return this;
        }

        /**
         * @param minimumAccessLevelForPush Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
         * 
         * @return builder
         * 
         */
        public Builder minimumAccessLevelForPush(String minimumAccessLevelForPush) {
            return minimumAccessLevelForPush(Output.of(minimumAccessLevelForPush));
        }

        /**
         * @param project ID or URL-encoded path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project ID or URL-encoded path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protectionRuleId Unique ID of the protection rule.
         * 
         * @return builder
         * 
         */
        public Builder protectionRuleId(@Nullable Output<Integer> protectionRuleId) {
            $.protectionRuleId = protectionRuleId;
            return this;
        }

        /**
         * @param protectionRuleId Unique ID of the protection rule.
         * 
         * @return builder
         * 
         */
        public Builder protectionRuleId(Integer protectionRuleId) {
            return protectionRuleId(Output.of(protectionRuleId));
        }

        /**
         * @param repositoryPathPattern Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project&#39;s full path
         * 
         * @return builder
         * 
         */
        public Builder repositoryPathPattern(@Nullable Output<String> repositoryPathPattern) {
            $.repositoryPathPattern = repositoryPathPattern;
            return this;
        }

        /**
         * @param repositoryPathPattern Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project&#39;s full path
         * 
         * @return builder
         * 
         */
        public Builder repositoryPathPattern(String repositoryPathPattern) {
            return repositoryPathPattern(Output.of(repositoryPathPattern));
        }

        public ProjectContainerRepositoryProtectionState build() {
            return $;
        }
    }

}
