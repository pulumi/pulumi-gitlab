// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesProtectedBranchArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectProtectedBranchesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectProtectedBranchesArgs Empty = new GetProjectProtectedBranchesArgs();

    /**
     * The integer or path with namespace that uniquely identifies the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The integer or path with namespace that uniquely identifies the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * A list of protected branches, as defined below.
     * 
     */
    @Import(name="protectedBranches")
    private @Nullable Output<List<GetProjectProtectedBranchesProtectedBranchArgs>> protectedBranches;

    /**
     * @return A list of protected branches, as defined below.
     * 
     */
    public Optional<Output<List<GetProjectProtectedBranchesProtectedBranchArgs>>> protectedBranches() {
        return Optional.ofNullable(this.protectedBranches);
    }

    private GetProjectProtectedBranchesArgs() {}

    private GetProjectProtectedBranchesArgs(GetProjectProtectedBranchesArgs $) {
        this.projectId = $.projectId;
        this.protectedBranches = $.protectedBranches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectProtectedBranchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectProtectedBranchesArgs $;

        public Builder() {
            $ = new GetProjectProtectedBranchesArgs();
        }

        public Builder(GetProjectProtectedBranchesArgs defaults) {
            $ = new GetProjectProtectedBranchesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param projectId The integer or path with namespace that uniquely identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The integer or path with namespace that uniquely identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param protectedBranches A list of protected branches, as defined below.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranches(@Nullable Output<List<GetProjectProtectedBranchesProtectedBranchArgs>> protectedBranches) {
            $.protectedBranches = protectedBranches;
            return this;
        }

        /**
         * @param protectedBranches A list of protected branches, as defined below.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranches(List<GetProjectProtectedBranchesProtectedBranchArgs> protectedBranches) {
            return protectedBranches(Output.of(protectedBranches));
        }

        /**
         * @param protectedBranches A list of protected branches, as defined below.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranches(GetProjectProtectedBranchesProtectedBranchArgs... protectedBranches) {
            return protectedBranches(List.of(protectedBranches));
        }

        public GetProjectProtectedBranchesArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesArgs", "projectId");
            }
            return $;
        }
    }

}
