// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupProjectFileTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final GroupProjectFileTemplateState Empty = new GroupProjectFileTemplateState();

    /**
     * The ID of the project that will be used for file templates. This project must be the direct
     * child of the project defined by the group_id
     * 
     */
    @Import(name="fileTemplateProjectId")
    private @Nullable Output<Integer> fileTemplateProjectId;

    /**
     * @return The ID of the project that will be used for file templates. This project must be the direct
     * child of the project defined by the group_id
     * 
     */
    public Optional<Output<Integer>> fileTemplateProjectId() {
        return Optional.ofNullable(this.fileTemplateProjectId);
    }

    /**
     * The ID of the group that will use the file template project. This group must be the direct
     * parent of the project defined by project_id
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return The ID of the group that will use the file template project. This group must be the direct
     * parent of the project defined by project_id
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    private GroupProjectFileTemplateState() {}

    private GroupProjectFileTemplateState(GroupProjectFileTemplateState $) {
        this.fileTemplateProjectId = $.fileTemplateProjectId;
        this.groupId = $.groupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupProjectFileTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupProjectFileTemplateState $;

        public Builder() {
            $ = new GroupProjectFileTemplateState();
        }

        public Builder(GroupProjectFileTemplateState defaults) {
            $ = new GroupProjectFileTemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileTemplateProjectId The ID of the project that will be used for file templates. This project must be the direct
         * child of the project defined by the group_id
         * 
         * @return builder
         * 
         */
        public Builder fileTemplateProjectId(@Nullable Output<Integer> fileTemplateProjectId) {
            $.fileTemplateProjectId = fileTemplateProjectId;
            return this;
        }

        /**
         * @param fileTemplateProjectId The ID of the project that will be used for file templates. This project must be the direct
         * child of the project defined by the group_id
         * 
         * @return builder
         * 
         */
        public Builder fileTemplateProjectId(Integer fileTemplateProjectId) {
            return fileTemplateProjectId(Output.of(fileTemplateProjectId));
        }

        /**
         * @param groupId The ID of the group that will use the file template project. This group must be the direct
         * parent of the project defined by project_id
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The ID of the group that will use the file template project. This group must be the direct
         * parent of the project defined by project_id
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        public GroupProjectFileTemplateState build() {
            return $;
        }
    }

}
