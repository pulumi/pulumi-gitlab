// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserImpersonationTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserImpersonationTokenArgs Empty = new UserImpersonationTokenArgs();

    /**
     * Expiration date of the impersonation token in ISO format (YYYY-MM-DD).
     * 
     */
    @Import(name="expiresAt", required=true)
    private Output<String> expiresAt;

    /**
     * @return Expiration date of the impersonation token in ISO format (YYYY-MM-DD).
     * 
     */
    public Output<String> expiresAt() {
        return this.expiresAt;
    }

    /**
     * The name of the impersonation token.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the impersonation token.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Array of scopes of the impersonation token. valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    /**
     * @return Array of scopes of the impersonation token. valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }

    /**
     * The ID of the user.
     * 
     */
    @Import(name="userId", required=true)
    private Output<Integer> userId;

    /**
     * @return The ID of the user.
     * 
     */
    public Output<Integer> userId() {
        return this.userId;
    }

    /**
     * Wether to validate if the expiration date is in the future.
     * 
     */
    @Import(name="validatePastExpirationDate")
    private @Nullable Output<Boolean> validatePastExpirationDate;

    /**
     * @return Wether to validate if the expiration date is in the future.
     * 
     */
    public Optional<Output<Boolean>> validatePastExpirationDate() {
        return Optional.ofNullable(this.validatePastExpirationDate);
    }

    private UserImpersonationTokenArgs() {}

    private UserImpersonationTokenArgs(UserImpersonationTokenArgs $) {
        this.expiresAt = $.expiresAt;
        this.name = $.name;
        this.scopes = $.scopes;
        this.userId = $.userId;
        this.validatePastExpirationDate = $.validatePastExpirationDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserImpersonationTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserImpersonationTokenArgs $;

        public Builder() {
            $ = new UserImpersonationTokenArgs();
        }

        public Builder(UserImpersonationTokenArgs defaults) {
            $ = new UserImpersonationTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expiresAt Expiration date of the impersonation token in ISO format (YYYY-MM-DD).
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt Expiration date of the impersonation token in ISO format (YYYY-MM-DD).
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param name The name of the impersonation token.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the impersonation token.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scopes Array of scopes of the impersonation token. valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Array of scopes of the impersonation token. valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Array of scopes of the impersonation token. valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param userId The ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param validatePastExpirationDate Wether to validate if the expiration date is in the future.
         * 
         * @return builder
         * 
         */
        public Builder validatePastExpirationDate(@Nullable Output<Boolean> validatePastExpirationDate) {
            $.validatePastExpirationDate = validatePastExpirationDate;
            return this;
        }

        /**
         * @param validatePastExpirationDate Wether to validate if the expiration date is in the future.
         * 
         * @return builder
         * 
         */
        public Builder validatePastExpirationDate(Boolean validatePastExpirationDate) {
            return validatePastExpirationDate(Output.of(validatePastExpirationDate));
        }

        public UserImpersonationTokenArgs build() {
            if ($.expiresAt == null) {
                throw new MissingRequiredPropertyException("UserImpersonationTokenArgs", "expiresAt");
            }
            if ($.scopes == null) {
                throw new MissingRequiredPropertyException("UserImpersonationTokenArgs", "scopes");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserImpersonationTokenArgs", "userId");
            }
            return $;
        }
    }

}
