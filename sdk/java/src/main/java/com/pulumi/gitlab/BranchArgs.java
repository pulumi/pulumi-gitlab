// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchArgs extends com.pulumi.resources.ResourceArgs {

    public static final BranchArgs Empty = new BranchArgs();

    /**
     * The name for this branch.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for this branch.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or full path of the project which the branch is created against.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or full path of the project which the branch is created against.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The ref which the branch is created from.
     * 
     */
    @Import(name="ref", required=true)
    private Output<String> ref;

    /**
     * @return The ref which the branch is created from.
     * 
     */
    public Output<String> ref() {
        return this.ref;
    }

    private BranchArgs() {}

    private BranchArgs(BranchArgs $) {
        this.name = $.name;
        this.project = $.project;
        this.ref = $.ref;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchArgs $;

        public Builder() {
            $ = new BranchArgs();
        }

        public Builder(BranchArgs defaults) {
            $ = new BranchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name for this branch.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for this branch.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or full path of the project which the branch is created against.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project which the branch is created against.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param ref The ref which the branch is created from.
         * 
         * @return builder
         * 
         */
        public Builder ref(Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref The ref which the branch is created from.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        public BranchArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("BranchArgs", "project");
            }
            if ($.ref == null) {
                throw new MissingRequiredPropertyException("BranchArgs", "ref");
            }
            return $;
        }
    }

}
