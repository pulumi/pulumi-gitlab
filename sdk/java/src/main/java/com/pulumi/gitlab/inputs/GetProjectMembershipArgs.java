// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectMembershipArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectMembershipArgs Empty = new GetProjectMembershipArgs();

    /**
     * The full path of the project.
     * 
     * @deprecated
     * Will be removed in 19.0. Use `project` instead.
     * 
     */
    @Deprecated /* Will be removed in 19.0. Use `project` instead. */
    @Import(name="fullPath")
    private @Nullable Output<String> fullPath;

    /**
     * @return The full path of the project.
     * 
     * @deprecated
     * Will be removed in 19.0. Use `project` instead.
     * 
     */
    @Deprecated /* Will be removed in 19.0. Use `project` instead. */
    public Optional<Output<String>> fullPath() {
        return Optional.ofNullable(this.fullPath);
    }

    /**
     * Return all project members including members through ancestor groups
     * 
     */
    @Import(name="inherited")
    private @Nullable Output<Boolean> inherited;

    /**
     * @return Return all project members including members through ancestor groups
     * 
     */
    public Optional<Output<Boolean>> inherited() {
        return Optional.ofNullable(this.inherited);
    }

    /**
     * The ID or full path of the project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID of the project.
     * 
     * @deprecated
     * Will be removed in 19.0. Use `project` instead.
     * 
     */
    @Deprecated /* Will be removed in 19.0. Use `project` instead. */
    @Import(name="projectId")
    private @Nullable Output<Integer> projectId;

    /**
     * @return The ID of the project.
     * 
     * @deprecated
     * Will be removed in 19.0. Use `project` instead.
     * 
     */
    @Deprecated /* Will be removed in 19.0. Use `project` instead. */
    public Optional<Output<Integer>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * A query string to search for members
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return A query string to search for members
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * List of user ids to filter members by
     * 
     */
    @Import(name="userIds")
    private @Nullable Output<List<Integer>> userIds;

    /**
     * @return List of user ids to filter members by
     * 
     */
    public Optional<Output<List<Integer>>> userIds() {
        return Optional.ofNullable(this.userIds);
    }

    private GetProjectMembershipArgs() {}

    private GetProjectMembershipArgs(GetProjectMembershipArgs $) {
        this.fullPath = $.fullPath;
        this.inherited = $.inherited;
        this.project = $.project;
        this.projectId = $.projectId;
        this.query = $.query;
        this.userIds = $.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectMembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectMembershipArgs $;

        public Builder() {
            $ = new GetProjectMembershipArgs();
        }

        public Builder(GetProjectMembershipArgs defaults) {
            $ = new GetProjectMembershipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fullPath The full path of the project.
         * 
         * @return builder
         * 
         * @deprecated
         * Will be removed in 19.0. Use `project` instead.
         * 
         */
        @Deprecated /* Will be removed in 19.0. Use `project` instead. */
        public Builder fullPath(@Nullable Output<String> fullPath) {
            $.fullPath = fullPath;
            return this;
        }

        /**
         * @param fullPath The full path of the project.
         * 
         * @return builder
         * 
         * @deprecated
         * Will be removed in 19.0. Use `project` instead.
         * 
         */
        @Deprecated /* Will be removed in 19.0. Use `project` instead. */
        public Builder fullPath(String fullPath) {
            return fullPath(Output.of(fullPath));
        }

        /**
         * @param inherited Return all project members including members through ancestor groups
         * 
         * @return builder
         * 
         */
        public Builder inherited(@Nullable Output<Boolean> inherited) {
            $.inherited = inherited;
            return this;
        }

        /**
         * @param inherited Return all project members including members through ancestor groups
         * 
         * @return builder
         * 
         */
        public Builder inherited(Boolean inherited) {
            return inherited(Output.of(inherited));
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         * @deprecated
         * Will be removed in 19.0. Use `project` instead.
         * 
         */
        @Deprecated /* Will be removed in 19.0. Use `project` instead. */
        public Builder projectId(@Nullable Output<Integer> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         * @deprecated
         * Will be removed in 19.0. Use `project` instead.
         * 
         */
        @Deprecated /* Will be removed in 19.0. Use `project` instead. */
        public Builder projectId(Integer projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param query A query string to search for members
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query A query string to search for members
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param userIds List of user ids to filter members by
         * 
         * @return builder
         * 
         */
        public Builder userIds(@Nullable Output<List<Integer>> userIds) {
            $.userIds = userIds;
            return this;
        }

        /**
         * @param userIds List of user ids to filter members by
         * 
         * @return builder
         * 
         */
        public Builder userIds(List<Integer> userIds) {
            return userIds(Output.of(userIds));
        }

        /**
         * @param userIds List of user ids to filter members by
         * 
         * @return builder
         * 
         */
        public Builder userIds(Integer... userIds) {
            return userIds(List.of(userIds));
        }

        public GetProjectMembershipArgs build() {
            return $;
        }
    }

}
