// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectMirrorArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectMirrorState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectMirror` resource allows to manage the lifecycle of a project mirror.
 * 
 * This is for *pushing* changes to a remote repository. *Pull Mirroring* can be configured using a combination of the
 * import_url, mirror, and mirrorTriggerBuilds properties on the gitlab.Project resource.
 * 
 * &gt; **Warning** By default, the provider sets the `keepDivergentRefs` argument to `True`.
 *    If you manually set `keepDivergentRefs` to `False`, GitLab mirroring removes branches in the target that aren&#39;t in the source.
 *    This action can result in unexpected branch deletions.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/remote_mirrors/)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.ProjectMirror;
 * import com.pulumi.gitlab.ProjectMirrorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var foo = new ProjectMirror("foo", ProjectMirrorArgs.builder()
 *             .project("1")
 *             .url("https://username:password}{@literal @}{@code github.com/org/repository.git")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_mirror`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_mirror.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab project mirror can be imported using an id made up of `project_id:mirror_id`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectMirror:ProjectMirror foo &#34;12345:1337&#34;
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectMirror:ProjectMirror")
public class ProjectMirror extends com.pulumi.resources.CustomResource {
    /**
     * Determines the mirror authentication method. Valid values are: `sshPublicKey`, `password`.
     * 
     */
    @Export(name="authMethod", refs={String.class}, tree="[0]")
    private Output<String> authMethod;

    /**
     * @return Determines the mirror authentication method. Valid values are: `sshPublicKey`, `password`.
     * 
     */
    public Output<String> authMethod() {
        return this.authMethod;
    }
    /**
     * Determines if the mirror is enabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Determines if the mirror is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Determines if divergent refs are skipped.
     * 
     */
    @Export(name="keepDivergentRefs", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> keepDivergentRefs;

    /**
     * @return Determines if divergent refs are skipped.
     * 
     */
    public Output<Boolean> keepDivergentRefs() {
        return this.keepDivergentRefs;
    }
    /**
     * Contains a regular expression. Only branches with names matching the regex are mirrored. Requires only*protected*branches to be disabled. Premium and Ultimate only.
     * 
     */
    @Export(name="mirrorBranchRegex", refs={String.class}, tree="[0]")
    private Output<String> mirrorBranchRegex;

    /**
     * @return Contains a regular expression. Only branches with names matching the regex are mirrored. Requires only*protected*branches to be disabled. Premium and Ultimate only.
     * 
     */
    public Output<String> mirrorBranchRegex() {
        return this.mirrorBranchRegex;
    }
    /**
     * Mirror ID.
     * 
     */
    @Export(name="mirrorId", refs={Integer.class}, tree="[0]")
    private Output<Integer> mirrorId;

    /**
     * @return Mirror ID.
     * 
     */
    public Output<Integer> mirrorId() {
        return this.mirrorId;
    }
    /**
     * Determines if only protected branches are mirrored.
     * 
     */
    @Export(name="onlyProtectedBranches", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> onlyProtectedBranches;

    /**
     * @return Determines if only protected branches are mirrored.
     * 
     */
    public Output<Boolean> onlyProtectedBranches() {
        return this.onlyProtectedBranches;
    }
    /**
     * The id of the project.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The id of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The URL of the remote repository to be mirrored.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL of the remote repository to be mirrored.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectMirror(java.lang.String name) {
        this(name, ProjectMirrorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectMirror(java.lang.String name, ProjectMirrorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectMirror(java.lang.String name, ProjectMirrorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectMirror:ProjectMirror", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectMirror(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectMirrorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectMirror:ProjectMirror", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectMirrorArgs makeArgs(ProjectMirrorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectMirrorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "url"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectMirror get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectMirrorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectMirror(name, id, state, options);
    }
}
