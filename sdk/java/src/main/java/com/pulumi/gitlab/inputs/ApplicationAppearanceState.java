// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationAppearanceState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationAppearanceState Empty = new ApplicationAppearanceState();

    /**
     * Markdown text shown on the sign-in and sign-up page.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Markdown text shown on the sign-in and sign-up page.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Add header and footer to all outgoing emails if enabled.
     * 
     */
    @Import(name="emailHeaderAndFooterEnabled")
    private @Nullable Output<Boolean> emailHeaderAndFooterEnabled;

    /**
     * @return Add header and footer to all outgoing emails if enabled.
     * 
     */
    public Optional<Output<Boolean>> emailHeaderAndFooterEnabled() {
        return Optional.ofNullable(this.emailHeaderAndFooterEnabled);
    }

    /**
     * Message in the system footer bar.
     * 
     */
    @Import(name="footerMessage")
    private @Nullable Output<String> footerMessage;

    /**
     * @return Message in the system footer bar.
     * 
     */
    public Optional<Output<String>> footerMessage() {
        return Optional.ofNullable(this.footerMessage);
    }

    /**
     * Message in the system header bar.
     * 
     */
    @Import(name="headerMessage")
    private @Nullable Output<String> headerMessage;

    /**
     * @return Message in the system header bar.
     * 
     */
    public Optional<Output<String>> headerMessage() {
        return Optional.ofNullable(this.headerMessage);
    }

    @Import(name="keepSettingsOnDestroy")
    private @Nullable Output<Boolean> keepSettingsOnDestroy;

    public Optional<Output<Boolean>> keepSettingsOnDestroy() {
        return Optional.ofNullable(this.keepSettingsOnDestroy);
    }

    /**
     * Markdown text shown on the group or project member page for users with permission to change members.
     * 
     */
    @Import(name="memberGuidelines")
    private @Nullable Output<String> memberGuidelines;

    /**
     * @return Markdown text shown on the group or project member page for users with permission to change members.
     * 
     */
    public Optional<Output<String>> memberGuidelines() {
        return Optional.ofNullable(this.memberGuidelines);
    }

    /**
     * Background color for the system header or footer bar, in CSS hex notation.
     * 
     */
    @Import(name="messageBackgroundColor")
    private @Nullable Output<String> messageBackgroundColor;

    /**
     * @return Background color for the system header or footer bar, in CSS hex notation.
     * 
     */
    public Optional<Output<String>> messageBackgroundColor() {
        return Optional.ofNullable(this.messageBackgroundColor);
    }

    /**
     * Font color for the system header or footer bar, in CSS hex notation.
     * 
     */
    @Import(name="messageFontColor")
    private @Nullable Output<String> messageFontColor;

    /**
     * @return Font color for the system header or footer bar, in CSS hex notation.
     * 
     */
    public Optional<Output<String>> messageFontColor() {
        return Optional.ofNullable(this.messageFontColor);
    }

    /**
     * Markdown text shown on the new project page.
     * 
     */
    @Import(name="newProjectGuidelines")
    private @Nullable Output<String> newProjectGuidelines;

    /**
     * @return Markdown text shown on the new project page.
     * 
     */
    public Optional<Output<String>> newProjectGuidelines() {
        return Optional.ofNullable(this.newProjectGuidelines);
    }

    /**
     * Markdown text shown on the profile page below the Public Avatar.
     * 
     */
    @Import(name="profileImageGuidelines")
    private @Nullable Output<String> profileImageGuidelines;

    /**
     * @return Markdown text shown on the profile page below the Public Avatar.
     * 
     */
    public Optional<Output<String>> profileImageGuidelines() {
        return Optional.ofNullable(this.profileImageGuidelines);
    }

    /**
     * An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
     * 
     */
    @Import(name="pwaDescription")
    private @Nullable Output<String> pwaDescription;

    /**
     * @return An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
     * 
     */
    public Optional<Output<String>> pwaDescription() {
        return Optional.ofNullable(this.pwaDescription);
    }

    /**
     * Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
     * 
     */
    @Import(name="pwaName")
    private @Nullable Output<String> pwaName;

    /**
     * @return Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
     * 
     */
    public Optional<Output<String>> pwaName() {
        return Optional.ofNullable(this.pwaName);
    }

    /**
     * Short name for Progressive Web App.
     * 
     */
    @Import(name="pwaShortName")
    private @Nullable Output<String> pwaShortName;

    /**
     * @return Short name for Progressive Web App.
     * 
     */
    public Optional<Output<String>> pwaShortName() {
        return Optional.ofNullable(this.pwaShortName);
    }

    /**
     * Application title on the sign-in and sign-up page.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Application title on the sign-in and sign-up page.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private ApplicationAppearanceState() {}

    private ApplicationAppearanceState(ApplicationAppearanceState $) {
        this.description = $.description;
        this.emailHeaderAndFooterEnabled = $.emailHeaderAndFooterEnabled;
        this.footerMessage = $.footerMessage;
        this.headerMessage = $.headerMessage;
        this.keepSettingsOnDestroy = $.keepSettingsOnDestroy;
        this.memberGuidelines = $.memberGuidelines;
        this.messageBackgroundColor = $.messageBackgroundColor;
        this.messageFontColor = $.messageFontColor;
        this.newProjectGuidelines = $.newProjectGuidelines;
        this.profileImageGuidelines = $.profileImageGuidelines;
        this.pwaDescription = $.pwaDescription;
        this.pwaName = $.pwaName;
        this.pwaShortName = $.pwaShortName;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationAppearanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationAppearanceState $;

        public Builder() {
            $ = new ApplicationAppearanceState();
        }

        public Builder(ApplicationAppearanceState defaults) {
            $ = new ApplicationAppearanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Markdown text shown on the sign-in and sign-up page.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Markdown text shown on the sign-in and sign-up page.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param emailHeaderAndFooterEnabled Add header and footer to all outgoing emails if enabled.
         * 
         * @return builder
         * 
         */
        public Builder emailHeaderAndFooterEnabled(@Nullable Output<Boolean> emailHeaderAndFooterEnabled) {
            $.emailHeaderAndFooterEnabled = emailHeaderAndFooterEnabled;
            return this;
        }

        /**
         * @param emailHeaderAndFooterEnabled Add header and footer to all outgoing emails if enabled.
         * 
         * @return builder
         * 
         */
        public Builder emailHeaderAndFooterEnabled(Boolean emailHeaderAndFooterEnabled) {
            return emailHeaderAndFooterEnabled(Output.of(emailHeaderAndFooterEnabled));
        }

        /**
         * @param footerMessage Message in the system footer bar.
         * 
         * @return builder
         * 
         */
        public Builder footerMessage(@Nullable Output<String> footerMessage) {
            $.footerMessage = footerMessage;
            return this;
        }

        /**
         * @param footerMessage Message in the system footer bar.
         * 
         * @return builder
         * 
         */
        public Builder footerMessage(String footerMessage) {
            return footerMessage(Output.of(footerMessage));
        }

        /**
         * @param headerMessage Message in the system header bar.
         * 
         * @return builder
         * 
         */
        public Builder headerMessage(@Nullable Output<String> headerMessage) {
            $.headerMessage = headerMessage;
            return this;
        }

        /**
         * @param headerMessage Message in the system header bar.
         * 
         * @return builder
         * 
         */
        public Builder headerMessage(String headerMessage) {
            return headerMessage(Output.of(headerMessage));
        }

        public Builder keepSettingsOnDestroy(@Nullable Output<Boolean> keepSettingsOnDestroy) {
            $.keepSettingsOnDestroy = keepSettingsOnDestroy;
            return this;
        }

        public Builder keepSettingsOnDestroy(Boolean keepSettingsOnDestroy) {
            return keepSettingsOnDestroy(Output.of(keepSettingsOnDestroy));
        }

        /**
         * @param memberGuidelines Markdown text shown on the group or project member page for users with permission to change members.
         * 
         * @return builder
         * 
         */
        public Builder memberGuidelines(@Nullable Output<String> memberGuidelines) {
            $.memberGuidelines = memberGuidelines;
            return this;
        }

        /**
         * @param memberGuidelines Markdown text shown on the group or project member page for users with permission to change members.
         * 
         * @return builder
         * 
         */
        public Builder memberGuidelines(String memberGuidelines) {
            return memberGuidelines(Output.of(memberGuidelines));
        }

        /**
         * @param messageBackgroundColor Background color for the system header or footer bar, in CSS hex notation.
         * 
         * @return builder
         * 
         */
        public Builder messageBackgroundColor(@Nullable Output<String> messageBackgroundColor) {
            $.messageBackgroundColor = messageBackgroundColor;
            return this;
        }

        /**
         * @param messageBackgroundColor Background color for the system header or footer bar, in CSS hex notation.
         * 
         * @return builder
         * 
         */
        public Builder messageBackgroundColor(String messageBackgroundColor) {
            return messageBackgroundColor(Output.of(messageBackgroundColor));
        }

        /**
         * @param messageFontColor Font color for the system header or footer bar, in CSS hex notation.
         * 
         * @return builder
         * 
         */
        public Builder messageFontColor(@Nullable Output<String> messageFontColor) {
            $.messageFontColor = messageFontColor;
            return this;
        }

        /**
         * @param messageFontColor Font color for the system header or footer bar, in CSS hex notation.
         * 
         * @return builder
         * 
         */
        public Builder messageFontColor(String messageFontColor) {
            return messageFontColor(Output.of(messageFontColor));
        }

        /**
         * @param newProjectGuidelines Markdown text shown on the new project page.
         * 
         * @return builder
         * 
         */
        public Builder newProjectGuidelines(@Nullable Output<String> newProjectGuidelines) {
            $.newProjectGuidelines = newProjectGuidelines;
            return this;
        }

        /**
         * @param newProjectGuidelines Markdown text shown on the new project page.
         * 
         * @return builder
         * 
         */
        public Builder newProjectGuidelines(String newProjectGuidelines) {
            return newProjectGuidelines(Output.of(newProjectGuidelines));
        }

        /**
         * @param profileImageGuidelines Markdown text shown on the profile page below the Public Avatar.
         * 
         * @return builder
         * 
         */
        public Builder profileImageGuidelines(@Nullable Output<String> profileImageGuidelines) {
            $.profileImageGuidelines = profileImageGuidelines;
            return this;
        }

        /**
         * @param profileImageGuidelines Markdown text shown on the profile page below the Public Avatar.
         * 
         * @return builder
         * 
         */
        public Builder profileImageGuidelines(String profileImageGuidelines) {
            return profileImageGuidelines(Output.of(profileImageGuidelines));
        }

        /**
         * @param pwaDescription An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
         * 
         * @return builder
         * 
         */
        public Builder pwaDescription(@Nullable Output<String> pwaDescription) {
            $.pwaDescription = pwaDescription;
            return this;
        }

        /**
         * @param pwaDescription An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
         * 
         * @return builder
         * 
         */
        public Builder pwaDescription(String pwaDescription) {
            return pwaDescription(Output.of(pwaDescription));
        }

        /**
         * @param pwaName Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
         * 
         * @return builder
         * 
         */
        public Builder pwaName(@Nullable Output<String> pwaName) {
            $.pwaName = pwaName;
            return this;
        }

        /**
         * @param pwaName Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
         * 
         * @return builder
         * 
         */
        public Builder pwaName(String pwaName) {
            return pwaName(Output.of(pwaName));
        }

        /**
         * @param pwaShortName Short name for Progressive Web App.
         * 
         * @return builder
         * 
         */
        public Builder pwaShortName(@Nullable Output<String> pwaShortName) {
            $.pwaShortName = pwaShortName;
            return this;
        }

        /**
         * @param pwaShortName Short name for Progressive Web App.
         * 
         * @return builder
         * 
         */
        public Builder pwaShortName(String pwaShortName) {
            return pwaShortName(Output.of(pwaShortName));
        }

        /**
         * @param title Application title on the sign-in and sign-up page.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Application title on the sign-in and sign-up page.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public ApplicationAppearanceState build() {
            return $;
        }
    }

}
