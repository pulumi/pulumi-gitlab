// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectPagesSettingsDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectPagesSettingsDeploymentArgs Empty = new ProjectPagesSettingsDeploymentArgs();

    /**
     * Date the deployment was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date the deployment was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The path prefix of the deployment when using parallel deployments.
     * 
     */
    @Import(name="pathPrefix")
    private @Nullable Output<String> pathPrefix;

    /**
     * @return The path prefix of the deployment when using parallel deployments.
     * 
     */
    public Optional<Output<String>> pathPrefix() {
        return Optional.ofNullable(this.pathPrefix);
    }

    /**
     * The root directory of the deployment.
     * 
     */
    @Import(name="rootDirectory")
    private @Nullable Output<String> rootDirectory;

    /**
     * @return The root directory of the deployment.
     * 
     */
    public Optional<Output<String>> rootDirectory() {
        return Optional.ofNullable(this.rootDirectory);
    }

    /**
     * The URL of the deployment.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the deployment.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ProjectPagesSettingsDeploymentArgs() {}

    private ProjectPagesSettingsDeploymentArgs(ProjectPagesSettingsDeploymentArgs $) {
        this.createdAt = $.createdAt;
        this.pathPrefix = $.pathPrefix;
        this.rootDirectory = $.rootDirectory;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectPagesSettingsDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectPagesSettingsDeploymentArgs $;

        public Builder() {
            $ = new ProjectPagesSettingsDeploymentArgs();
        }

        public Builder(ProjectPagesSettingsDeploymentArgs defaults) {
            $ = new ProjectPagesSettingsDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Date the deployment was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date the deployment was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param pathPrefix The path prefix of the deployment when using parallel deployments.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(@Nullable Output<String> pathPrefix) {
            $.pathPrefix = pathPrefix;
            return this;
        }

        /**
         * @param pathPrefix The path prefix of the deployment when using parallel deployments.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefix(String pathPrefix) {
            return pathPrefix(Output.of(pathPrefix));
        }

        /**
         * @param rootDirectory The root directory of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(@Nullable Output<String> rootDirectory) {
            $.rootDirectory = rootDirectory;
            return this;
        }

        /**
         * @param rootDirectory The root directory of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(String rootDirectory) {
            return rootDirectory(Output.of(rootDirectory));
        }

        /**
         * @param url The URL of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ProjectPagesSettingsDeploymentArgs build() {
            return $;
        }
    }

}
