// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevel;
import com.pulumi.gitlab.inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevel;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectProtectedBranchesProtectedBranch extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectProtectedBranchesProtectedBranch Empty = new GetProjectProtectedBranchesProtectedBranch();

    /**
     * Whether force push is allowed.
     * 
     */
    @Import(name="allowForcePush", required=true)
    private Boolean allowForcePush;

    /**
     * @return Whether force push is allowed.
     * 
     */
    public Boolean allowForcePush() {
        return this.allowForcePush;
    }

    /**
     * Reject code pushes that change files listed in the CODEOWNERS file.
     * 
     */
    @Import(name="codeOwnerApprovalRequired", required=true)
    private Boolean codeOwnerApprovalRequired;

    /**
     * @return Reject code pushes that change files listed in the CODEOWNERS file.
     * 
     */
    public Boolean codeOwnerApprovalRequired() {
        return this.codeOwnerApprovalRequired;
    }

    /**
     * The ID of this resource.
     * 
     */
    @Import(name="id", required=true)
    private Integer id;

    /**
     * @return The ID of this resource.
     * 
     */
    public Integer id() {
        return this.id;
    }

    /**
     * Array of access levels and user(s)/group(s) allowed to merge to protected branch.
     * 
     */
    @Import(name="mergeAccessLevels")
    private @Nullable List<GetProjectProtectedBranchesProtectedBranchMergeAccessLevel> mergeAccessLevels;

    /**
     * @return Array of access levels and user(s)/group(s) allowed to merge to protected branch.
     * 
     */
    public Optional<List<GetProjectProtectedBranchesProtectedBranchMergeAccessLevel>> mergeAccessLevels() {
        return Optional.ofNullable(this.mergeAccessLevels);
    }

    /**
     * The name of the protected branch.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the protected branch.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Array of access levels and user(s)/group(s) allowed to push to protected branch.
     * 
     */
    @Import(name="pushAccessLevels")
    private @Nullable List<GetProjectProtectedBranchesProtectedBranchPushAccessLevel> pushAccessLevels;

    /**
     * @return Array of access levels and user(s)/group(s) allowed to push to protected branch.
     * 
     */
    public Optional<List<GetProjectProtectedBranchesProtectedBranchPushAccessLevel>> pushAccessLevels() {
        return Optional.ofNullable(this.pushAccessLevels);
    }

    private GetProjectProtectedBranchesProtectedBranch() {}

    private GetProjectProtectedBranchesProtectedBranch(GetProjectProtectedBranchesProtectedBranch $) {
        this.allowForcePush = $.allowForcePush;
        this.codeOwnerApprovalRequired = $.codeOwnerApprovalRequired;
        this.id = $.id;
        this.mergeAccessLevels = $.mergeAccessLevels;
        this.name = $.name;
        this.pushAccessLevels = $.pushAccessLevels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectProtectedBranchesProtectedBranch defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectProtectedBranchesProtectedBranch $;

        public Builder() {
            $ = new GetProjectProtectedBranchesProtectedBranch();
        }

        public Builder(GetProjectProtectedBranchesProtectedBranch defaults) {
            $ = new GetProjectProtectedBranchesProtectedBranch(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowForcePush Whether force push is allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowForcePush(Boolean allowForcePush) {
            $.allowForcePush = allowForcePush;
            return this;
        }

        /**
         * @param codeOwnerApprovalRequired Reject code pushes that change files listed in the CODEOWNERS file.
         * 
         * @return builder
         * 
         */
        public Builder codeOwnerApprovalRequired(Boolean codeOwnerApprovalRequired) {
            $.codeOwnerApprovalRequired = codeOwnerApprovalRequired;
            return this;
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            $.id = id;
            return this;
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(@Nullable List<GetProjectProtectedBranchesProtectedBranchMergeAccessLevel> mergeAccessLevels) {
            $.mergeAccessLevels = mergeAccessLevels;
            return this;
        }

        /**
         * @param mergeAccessLevels Array of access levels and user(s)/group(s) allowed to merge to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder mergeAccessLevels(GetProjectProtectedBranchesProtectedBranchMergeAccessLevel... mergeAccessLevels) {
            return mergeAccessLevels(List.of(mergeAccessLevels));
        }

        /**
         * @param name The name of the protected branch.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(@Nullable List<GetProjectProtectedBranchesProtectedBranchPushAccessLevel> pushAccessLevels) {
            $.pushAccessLevels = pushAccessLevels;
            return this;
        }

        /**
         * @param pushAccessLevels Array of access levels and user(s)/group(s) allowed to push to protected branch.
         * 
         * @return builder
         * 
         */
        public Builder pushAccessLevels(GetProjectProtectedBranchesProtectedBranchPushAccessLevel... pushAccessLevels) {
            return pushAccessLevels(List.of(pushAccessLevels));
        }

        public GetProjectProtectedBranchesProtectedBranch build() {
            if ($.allowForcePush == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranch", "allowForcePush");
            }
            if ($.codeOwnerApprovalRequired == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranch", "codeOwnerApprovalRequired");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranch", "id");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetProjectProtectedBranchesProtectedBranch", "name");
            }
            return $;
        }
    }

}
