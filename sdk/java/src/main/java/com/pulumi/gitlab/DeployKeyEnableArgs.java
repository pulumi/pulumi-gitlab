// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeployKeyEnableArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeployKeyEnableArgs Empty = new DeployKeyEnableArgs();

    /**
     * Can deploy key push to the project&#39;s repository.
     * 
     */
    @Import(name="canPush")
    private @Nullable Output<Boolean> canPush;

    /**
     * @return Can deploy key push to the project&#39;s repository.
     * 
     */
    public Optional<Output<Boolean>> canPush() {
        return Optional.ofNullable(this.canPush);
    }

    /**
     * Deploy key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Deploy key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The Gitlab key id for the pre-existing deploy key
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The Gitlab key id for the pre-existing deploy key
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * The name or id of the project to add the deploy key to.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The name or id of the project to add the deploy key to.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Deploy key&#39;s title.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Deploy key&#39;s title.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private DeployKeyEnableArgs() {}

    private DeployKeyEnableArgs(DeployKeyEnableArgs $) {
        this.canPush = $.canPush;
        this.key = $.key;
        this.keyId = $.keyId;
        this.project = $.project;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeployKeyEnableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeployKeyEnableArgs $;

        public Builder() {
            $ = new DeployKeyEnableArgs();
        }

        public Builder(DeployKeyEnableArgs defaults) {
            $ = new DeployKeyEnableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param canPush Can deploy key push to the project&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder canPush(@Nullable Output<Boolean> canPush) {
            $.canPush = canPush;
            return this;
        }

        /**
         * @param canPush Can deploy key push to the project&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder canPush(Boolean canPush) {
            return canPush(Output.of(canPush));
        }

        /**
         * @param key Deploy key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Deploy key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param keyId The Gitlab key id for the pre-existing deploy key
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The Gitlab key id for the pre-existing deploy key
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param project The name or id of the project to add the deploy key to.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or id of the project to add the deploy key to.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param title Deploy key&#39;s title.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Deploy key&#39;s title.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public DeployKeyEnableArgs build() {
            if ($.keyId == null) {
                throw new MissingRequiredPropertyException("DeployKeyEnableArgs", "keyId");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("DeployKeyEnableArgs", "project");
            }
            return $;
        }
    }

}
