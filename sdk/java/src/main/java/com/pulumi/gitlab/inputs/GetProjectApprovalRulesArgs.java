// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetProjectApprovalRulesApprovalRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectApprovalRulesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectApprovalRulesArgs Empty = new GetProjectApprovalRulesArgs();

    /**
     * A list of project approval rules, as defined below.
     * 
     */
    @Import(name="approvalRules")
    private @Nullable Output<List<GetProjectApprovalRulesApprovalRuleArgs>> approvalRules;

    /**
     * @return A list of project approval rules, as defined below.
     * 
     */
    public Optional<Output<List<GetProjectApprovalRulesApprovalRuleArgs>>> approvalRules() {
        return Optional.ofNullable(this.approvalRules);
    }

    /**
     * The ID or path with namespace that identifies the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or path with namespace that identifies the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    private GetProjectApprovalRulesArgs() {}

    private GetProjectApprovalRulesArgs(GetProjectApprovalRulesArgs $) {
        this.approvalRules = $.approvalRules;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectApprovalRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectApprovalRulesArgs $;

        public Builder() {
            $ = new GetProjectApprovalRulesArgs();
        }

        public Builder(GetProjectApprovalRulesArgs defaults) {
            $ = new GetProjectApprovalRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvalRules A list of project approval rules, as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvalRules(@Nullable Output<List<GetProjectApprovalRulesApprovalRuleArgs>> approvalRules) {
            $.approvalRules = approvalRules;
            return this;
        }

        /**
         * @param approvalRules A list of project approval rules, as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvalRules(List<GetProjectApprovalRulesApprovalRuleArgs> approvalRules) {
            return approvalRules(Output.of(approvalRules));
        }

        /**
         * @param approvalRules A list of project approval rules, as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvalRules(GetProjectApprovalRulesApprovalRuleArgs... approvalRules) {
            return approvalRules(List.of(approvalRules));
        }

        /**
         * @param project The ID or path with namespace that identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or path with namespace that identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetProjectApprovalRulesArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectApprovalRulesArgs", "project");
            }
            return $;
        }
    }

}
