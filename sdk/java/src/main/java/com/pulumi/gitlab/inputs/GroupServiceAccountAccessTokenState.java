// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gitlab.inputs.GroupServiceAccountAccessTokenRotationConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupServiceAccountAccessTokenState extends com.pulumi.resources.ResourceArgs {

    public static final GroupServiceAccountAccessTokenState Empty = new GroupServiceAccountAccessTokenState();

    /**
     * True if the token is active.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return True if the token is active.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Time the token has been created, RFC3339 format.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Time the token has been created, RFC3339 format.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The service account access token expiry date. When left blank, the token follows the standard rule of expiry for personal access tokens.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return The service account access token expiry date. When left blank, the token follows the standard rule of expiry for personal access tokens.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * The ID or URL-encoded path of the group containing the service account. Must be a top level group.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return The ID or URL-encoded path of the group containing the service account. Must be a top level group.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * The name of the personal access token.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the personal access token.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * True if the token is revoked.
     * 
     */
    @Import(name="revoked")
    private @Nullable Output<Boolean> revoked;

    /**
     * @return True if the token is revoked.
     * 
     */
    public Optional<Output<Boolean>> revoked() {
        return Optional.ofNullable(this.revoked);
    }

    /**
     * The configuration for when to rotate a token automatically. Will not rotate a token until `pulumi up` is run.
     * 
     */
    @Import(name="rotationConfiguration")
    private @Nullable Output<GroupServiceAccountAccessTokenRotationConfigurationArgs> rotationConfiguration;

    /**
     * @return The configuration for when to rotate a token automatically. Will not rotate a token until `pulumi up` is run.
     * 
     */
    public Optional<Output<GroupServiceAccountAccessTokenRotationConfigurationArgs>> rotationConfiguration() {
        return Optional.ofNullable(this.rotationConfiguration);
    }

    /**
     * The scopes of the group service account access token. Valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`. If `selfRotate` is included, you must also provide either `expiresAt` or `rotationConfiguration`.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return The scopes of the group service account access token. Valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`. If `selfRotate` is included, you must also provide either `expiresAt` or `rotationConfiguration`.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The token of the group service account access token. **Note**: the token is not available for imported resources.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The token of the group service account access token. **Note**: the token is not available for imported resources.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The ID of a service account user.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<Integer> userId;

    /**
     * @return The ID of a service account user.
     * 
     */
    public Optional<Output<Integer>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * Wether to validate if the expiration date is in the future.
     * 
     */
    @Import(name="validatePastExpirationDate")
    private @Nullable Output<Boolean> validatePastExpirationDate;

    /**
     * @return Wether to validate if the expiration date is in the future.
     * 
     */
    public Optional<Output<Boolean>> validatePastExpirationDate() {
        return Optional.ofNullable(this.validatePastExpirationDate);
    }

    private GroupServiceAccountAccessTokenState() {}

    private GroupServiceAccountAccessTokenState(GroupServiceAccountAccessTokenState $) {
        this.active = $.active;
        this.createdAt = $.createdAt;
        this.expiresAt = $.expiresAt;
        this.group = $.group;
        this.name = $.name;
        this.revoked = $.revoked;
        this.rotationConfiguration = $.rotationConfiguration;
        this.scopes = $.scopes;
        this.token = $.token;
        this.userId = $.userId;
        this.validatePastExpirationDate = $.validatePastExpirationDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupServiceAccountAccessTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupServiceAccountAccessTokenState $;

        public Builder() {
            $ = new GroupServiceAccountAccessTokenState();
        }

        public Builder(GroupServiceAccountAccessTokenState defaults) {
            $ = new GroupServiceAccountAccessTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active True if the token is active.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active True if the token is active.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param createdAt Time the token has been created, RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Time the token has been created, RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param expiresAt The service account access token expiry date. When left blank, the token follows the standard rule of expiry for personal access tokens.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt The service account access token expiry date. When left blank, the token follows the standard rule of expiry for personal access tokens.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param group The ID or URL-encoded path of the group containing the service account. Must be a top level group.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The ID or URL-encoded path of the group containing the service account. Must be a top level group.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param name The name of the personal access token.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the personal access token.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param revoked True if the token is revoked.
         * 
         * @return builder
         * 
         */
        public Builder revoked(@Nullable Output<Boolean> revoked) {
            $.revoked = revoked;
            return this;
        }

        /**
         * @param revoked True if the token is revoked.
         * 
         * @return builder
         * 
         */
        public Builder revoked(Boolean revoked) {
            return revoked(Output.of(revoked));
        }

        /**
         * @param rotationConfiguration The configuration for when to rotate a token automatically. Will not rotate a token until `pulumi up` is run.
         * 
         * @return builder
         * 
         */
        public Builder rotationConfiguration(@Nullable Output<GroupServiceAccountAccessTokenRotationConfigurationArgs> rotationConfiguration) {
            $.rotationConfiguration = rotationConfiguration;
            return this;
        }

        /**
         * @param rotationConfiguration The configuration for when to rotate a token automatically. Will not rotate a token until `pulumi up` is run.
         * 
         * @return builder
         * 
         */
        public Builder rotationConfiguration(GroupServiceAccountAccessTokenRotationConfigurationArgs rotationConfiguration) {
            return rotationConfiguration(Output.of(rotationConfiguration));
        }

        /**
         * @param scopes The scopes of the group service account access token. Valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`. If `selfRotate` is included, you must also provide either `expiresAt` or `rotationConfiguration`.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes The scopes of the group service account access token. Valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`. If `selfRotate` is included, you must also provide either `expiresAt` or `rotationConfiguration`.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes The scopes of the group service account access token. Valid values are: `api`, `readUser`, `readApi`, `readRepository`, `writeRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `sudo`, `adminMode`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `selfRotate`, `readServicePing`. If `selfRotate` is included, you must also provide either `expiresAt` or `rotationConfiguration`.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param token The token of the group service account access token. **Note**: the token is not available for imported resources.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The token of the group service account access token. **Note**: the token is not available for imported resources.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param userId The ID of a service account user.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of a service account user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param validatePastExpirationDate Wether to validate if the expiration date is in the future.
         * 
         * @return builder
         * 
         */
        public Builder validatePastExpirationDate(@Nullable Output<Boolean> validatePastExpirationDate) {
            $.validatePastExpirationDate = validatePastExpirationDate;
            return this;
        }

        /**
         * @param validatePastExpirationDate Wether to validate if the expiration date is in the future.
         * 
         * @return builder
         * 
         */
        public Builder validatePastExpirationDate(Boolean validatePastExpirationDate) {
            return validatePastExpirationDate(Output.of(validatePastExpirationDate));
        }

        public GroupServiceAccountAccessTokenState build() {
            return $;
        }
    }

}
