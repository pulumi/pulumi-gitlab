// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ProjectRunnerEnablementArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectRunnerEnablementArgs Empty = new ProjectRunnerEnablementArgs();

    /**
     * The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The ID of a runner to enable for the project.
     * 
     */
    @Import(name="runnerId", required=true)
    private Output<Integer> runnerId;

    /**
     * @return The ID of a runner to enable for the project.
     * 
     */
    public Output<Integer> runnerId() {
        return this.runnerId;
    }

    private ProjectRunnerEnablementArgs() {}

    private ProjectRunnerEnablementArgs(ProjectRunnerEnablementArgs $) {
        this.project = $.project;
        this.runnerId = $.runnerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectRunnerEnablementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectRunnerEnablementArgs $;

        public Builder() {
            $ = new ProjectRunnerEnablementArgs();
        }

        public Builder(ProjectRunnerEnablementArgs defaults) {
            $ = new ProjectRunnerEnablementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param runnerId The ID of a runner to enable for the project.
         * 
         * @return builder
         * 
         */
        public Builder runnerId(Output<Integer> runnerId) {
            $.runnerId = runnerId;
            return this;
        }

        /**
         * @param runnerId The ID of a runner to enable for the project.
         * 
         * @return builder
         * 
         */
        public Builder runnerId(Integer runnerId) {
            return runnerId(Output.of(runnerId));
        }

        public ProjectRunnerEnablementArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectRunnerEnablementArgs", "project");
            }
            if ($.runnerId == null) {
                throw new MissingRequiredPropertyException("ProjectRunnerEnablementArgs", "runnerId");
            }
            return $;
        }
    }

}
