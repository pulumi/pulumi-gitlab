// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectAccessTokensPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectAccessTokensPlainArgs Empty = new GetProjectAccessTokensPlainArgs();

    /**
     * The name or id of the project.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    /**
     * @return The name or id of the project.
     * 
     */
    public String project() {
        return this.project;
    }

    /**
     * List all project access token that match the specified state. Valid values are `active`, `inactive`. Returns all project access token if not set.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return List all project access token that match the specified state. Valid values are `active`, `inactive`. Returns all project access token if not set.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetProjectAccessTokensPlainArgs() {}

    private GetProjectAccessTokensPlainArgs(GetProjectAccessTokensPlainArgs $) {
        this.project = $.project;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectAccessTokensPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectAccessTokensPlainArgs $;

        public Builder() {
            $ = new GetProjectAccessTokensPlainArgs();
        }

        public Builder(GetProjectAccessTokensPlainArgs defaults) {
            $ = new GetProjectAccessTokensPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param project The name or id of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            $.project = project;
            return this;
        }

        /**
         * @param state List all project access token that match the specified state. Valid values are `active`, `inactive`. Returns all project access token if not set.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetProjectAccessTokensPlainArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectAccessTokensPlainArgs", "project");
            }
            return $;
        }
    }

}
