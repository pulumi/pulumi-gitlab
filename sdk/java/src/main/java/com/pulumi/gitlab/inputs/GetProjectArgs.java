// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectArgs Empty = new GetProjectArgs();

    /**
     * Default number of revisions for shallow cloning.
     * 
     */
    @Import(name="ciDefaultGitDepth")
    private @Nullable Output<Integer> ciDefaultGitDepth;

    /**
     * @return Default number of revisions for shallow cloning.
     * 
     */
    public Optional<Output<Integer>> ciDefaultGitDepth() {
        return Optional.ofNullable(this.ciDefaultGitDepth);
    }

    /**
     * The integer that uniquely identifies the project within the gitlab install.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The integer that uniquely identifies the project within the gitlab install.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The path of the repository with namespace.
     * 
     */
    @Import(name="pathWithNamespace")
    private @Nullable Output<String> pathWithNamespace;

    /**
     * @return The path of the repository with namespace.
     * 
     */
    public Optional<Output<String>> pathWithNamespace() {
        return Optional.ofNullable(this.pathWithNamespace);
    }

    /**
     * If true, jobs can be viewed by non-project members.
     * 
     */
    @Import(name="publicBuilds")
    private @Nullable Output<Boolean> publicBuilds;

    /**
     * @return If true, jobs can be viewed by non-project members.
     * 
     */
    public Optional<Output<Boolean>> publicBuilds() {
        return Optional.ofNullable(this.publicBuilds);
    }

    private GetProjectArgs() {}

    private GetProjectArgs(GetProjectArgs $) {
        this.ciDefaultGitDepth = $.ciDefaultGitDepth;
        this.id = $.id;
        this.pathWithNamespace = $.pathWithNamespace;
        this.publicBuilds = $.publicBuilds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectArgs $;

        public Builder() {
            $ = new GetProjectArgs();
        }

        public Builder(GetProjectArgs defaults) {
            $ = new GetProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ciDefaultGitDepth Default number of revisions for shallow cloning.
         * 
         * @return builder
         * 
         */
        public Builder ciDefaultGitDepth(@Nullable Output<Integer> ciDefaultGitDepth) {
            $.ciDefaultGitDepth = ciDefaultGitDepth;
            return this;
        }

        /**
         * @param ciDefaultGitDepth Default number of revisions for shallow cloning.
         * 
         * @return builder
         * 
         */
        public Builder ciDefaultGitDepth(Integer ciDefaultGitDepth) {
            return ciDefaultGitDepth(Output.of(ciDefaultGitDepth));
        }

        /**
         * @param id The integer that uniquely identifies the project within the gitlab install.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The integer that uniquely identifies the project within the gitlab install.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param pathWithNamespace The path of the repository with namespace.
         * 
         * @return builder
         * 
         */
        public Builder pathWithNamespace(@Nullable Output<String> pathWithNamespace) {
            $.pathWithNamespace = pathWithNamespace;
            return this;
        }

        /**
         * @param pathWithNamespace The path of the repository with namespace.
         * 
         * @return builder
         * 
         */
        public Builder pathWithNamespace(String pathWithNamespace) {
            return pathWithNamespace(Output.of(pathWithNamespace));
        }

        /**
         * @param publicBuilds If true, jobs can be viewed by non-project members.
         * 
         * @return builder
         * 
         */
        public Builder publicBuilds(@Nullable Output<Boolean> publicBuilds) {
            $.publicBuilds = publicBuilds;
            return this;
        }

        /**
         * @param publicBuilds If true, jobs can be viewed by non-project members.
         * 
         * @return builder
         * 
         */
        public Builder publicBuilds(Boolean publicBuilds) {
            return publicBuilds(Output.of(publicBuilds));
        }

        public GetProjectArgs build() {
            return $;
        }
    }

}
