// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.ReleaseAssetsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseArgs Empty = new ReleaseArgs();

    /**
     * The release assets.
     * 
     */
    @Import(name="assets")
    private @Nullable Output<ReleaseAssetsArgs> assets;

    /**
     * @return The release assets.
     * 
     */
    public Optional<Output<ReleaseAssetsArgs>> assets() {
        return Optional.ofNullable(this.assets);
    }

    /**
     * The description of the release. You can use Markdown.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the release. You can use Markdown.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
     * 
     */
    @Import(name="milestones")
    private @Nullable Output<List<String>> milestones;

    /**
     * @return The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
     * 
     */
    public Optional<Output<List<String>>> milestones() {
        return Optional.ofNullable(this.milestones);
    }

    /**
     * The name of the release.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the release.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID or full path of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or full path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
     * 
     */
    @Import(name="releasedAt")
    private @Nullable Output<String> releasedAt;

    /**
     * @return Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
     * 
     */
    public Optional<Output<String>> releasedAt() {
        return Optional.ofNullable(this.releasedAt);
    }

    /**
     * Message to use if creating a new annotated tag.
     * 
     */
    @Import(name="tagMessage")
    private @Nullable Output<String> tagMessage;

    /**
     * @return Message to use if creating a new annotated tag.
     * 
     */
    public Optional<Output<String>> tagMessage() {
        return Optional.ofNullable(this.tagMessage);
    }

    /**
     * The tag where the release is created from.
     * 
     */
    @Import(name="tagName", required=true)
    private Output<String> tagName;

    /**
     * @return The tag where the release is created from.
     * 
     */
    public Output<String> tagName() {
        return this.tagName;
    }

    private ReleaseArgs() {}

    private ReleaseArgs(ReleaseArgs $) {
        this.assets = $.assets;
        this.description = $.description;
        this.milestones = $.milestones;
        this.name = $.name;
        this.project = $.project;
        this.ref = $.ref;
        this.releasedAt = $.releasedAt;
        this.tagMessage = $.tagMessage;
        this.tagName = $.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseArgs $;

        public Builder() {
            $ = new ReleaseArgs();
        }

        public Builder(ReleaseArgs defaults) {
            $ = new ReleaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assets The release assets.
         * 
         * @return builder
         * 
         */
        public Builder assets(@Nullable Output<ReleaseAssetsArgs> assets) {
            $.assets = assets;
            return this;
        }

        /**
         * @param assets The release assets.
         * 
         * @return builder
         * 
         */
        public Builder assets(ReleaseAssetsArgs assets) {
            return assets(Output.of(assets));
        }

        /**
         * @param description The description of the release. You can use Markdown.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the release. You can use Markdown.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param milestones The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
         * 
         * @return builder
         * 
         */
        public Builder milestones(@Nullable Output<List<String>> milestones) {
            $.milestones = milestones;
            return this;
        }

        /**
         * @param milestones The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
         * 
         * @return builder
         * 
         */
        public Builder milestones(List<String> milestones) {
            return milestones(Output.of(milestones));
        }

        /**
         * @param milestones The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
         * 
         * @return builder
         * 
         */
        public Builder milestones(String... milestones) {
            return milestones(List.of(milestones));
        }

        /**
         * @param name The name of the release.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the release.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or full path of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param ref If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref If a tag specified in tag*name doesn&#39;t exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param releasedAt Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
         * 
         * @return builder
         * 
         */
        public Builder releasedAt(@Nullable Output<String> releasedAt) {
            $.releasedAt = releasedAt;
            return this;
        }

        /**
         * @param releasedAt Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
         * 
         * @return builder
         * 
         */
        public Builder releasedAt(String releasedAt) {
            return releasedAt(Output.of(releasedAt));
        }

        /**
         * @param tagMessage Message to use if creating a new annotated tag.
         * 
         * @return builder
         * 
         */
        public Builder tagMessage(@Nullable Output<String> tagMessage) {
            $.tagMessage = tagMessage;
            return this;
        }

        /**
         * @param tagMessage Message to use if creating a new annotated tag.
         * 
         * @return builder
         * 
         */
        public Builder tagMessage(String tagMessage) {
            return tagMessage(Output.of(tagMessage));
        }

        /**
         * @param tagName The tag where the release is created from.
         * 
         * @return builder
         * 
         */
        public Builder tagName(Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        /**
         * @param tagName The tag where the release is created from.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        public ReleaseArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ReleaseArgs", "project");
            }
            if ($.tagName == null) {
                throw new MissingRequiredPropertyException("ReleaseArgs", "tagName");
            }
            return $;
        }
    }

}
