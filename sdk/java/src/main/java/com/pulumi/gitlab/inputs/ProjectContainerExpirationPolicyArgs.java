// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectContainerExpirationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectContainerExpirationPolicyArgs Empty = new ProjectContainerExpirationPolicyArgs();

    /**
     * The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
     * 
     */
    @Import(name="cadence")
    private @Nullable Output<String> cadence;

    /**
     * @return The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
     * 
     */
    public Optional<Output<String>> cadence() {
        return Optional.ofNullable(this.cadence);
    }

    /**
     * If true, the policy is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If true, the policy is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The number of images to keep.
     * 
     */
    @Import(name="keepN")
    private @Nullable Output<Integer> keepN;

    /**
     * @return The number of images to keep.
     * 
     */
    public Optional<Output<Integer>> keepN() {
        return Optional.ofNullable(this.keepN);
    }

    /**
     * The regular expression to match image names to delete.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable Output<String> nameRegex;

    /**
     * @return The regular expression to match image names to delete.
     * 
     */
    public Optional<Output<String>> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The regular expression to match image names to delete.
     * 
     * @deprecated
     * `name_regex_delete` has been deprecated. Use `name_regex` instead.
     * 
     */
    @Deprecated /* `name_regex_delete` has been deprecated. Use `name_regex` instead. */
    @Import(name="nameRegexDelete")
    private @Nullable Output<String> nameRegexDelete;

    /**
     * @return The regular expression to match image names to delete.
     * 
     * @deprecated
     * `name_regex_delete` has been deprecated. Use `name_regex` instead.
     * 
     */
    @Deprecated /* `name_regex_delete` has been deprecated. Use `name_regex` instead. */
    public Optional<Output<String>> nameRegexDelete() {
        return Optional.ofNullable(this.nameRegexDelete);
    }

    /**
     * The regular expression to match image names to keep.
     * 
     */
    @Import(name="nameRegexKeep")
    private @Nullable Output<String> nameRegexKeep;

    /**
     * @return The regular expression to match image names to keep.
     * 
     */
    public Optional<Output<String>> nameRegexKeep() {
        return Optional.ofNullable(this.nameRegexKeep);
    }

    /**
     * The next time the policy will run.
     * 
     */
    @Import(name="nextRunAt")
    private @Nullable Output<String> nextRunAt;

    /**
     * @return The next time the policy will run.
     * 
     */
    public Optional<Output<String>> nextRunAt() {
        return Optional.ofNullable(this.nextRunAt);
    }

    /**
     * The number of days to keep images.
     * 
     */
    @Import(name="olderThan")
    private @Nullable Output<String> olderThan;

    /**
     * @return The number of days to keep images.
     * 
     */
    public Optional<Output<String>> olderThan() {
        return Optional.ofNullable(this.olderThan);
    }

    private ProjectContainerExpirationPolicyArgs() {}

    private ProjectContainerExpirationPolicyArgs(ProjectContainerExpirationPolicyArgs $) {
        this.cadence = $.cadence;
        this.enabled = $.enabled;
        this.keepN = $.keepN;
        this.nameRegex = $.nameRegex;
        this.nameRegexDelete = $.nameRegexDelete;
        this.nameRegexKeep = $.nameRegexKeep;
        this.nextRunAt = $.nextRunAt;
        this.olderThan = $.olderThan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectContainerExpirationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectContainerExpirationPolicyArgs $;

        public Builder() {
            $ = new ProjectContainerExpirationPolicyArgs();
        }

        public Builder(ProjectContainerExpirationPolicyArgs defaults) {
            $ = new ProjectContainerExpirationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cadence The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
         * 
         * @return builder
         * 
         */
        public Builder cadence(@Nullable Output<String> cadence) {
            $.cadence = cadence;
            return this;
        }

        /**
         * @param cadence The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
         * 
         * @return builder
         * 
         */
        public Builder cadence(String cadence) {
            return cadence(Output.of(cadence));
        }

        /**
         * @param enabled If true, the policy is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If true, the policy is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param keepN The number of images to keep.
         * 
         * @return builder
         * 
         */
        public Builder keepN(@Nullable Output<Integer> keepN) {
            $.keepN = keepN;
            return this;
        }

        /**
         * @param keepN The number of images to keep.
         * 
         * @return builder
         * 
         */
        public Builder keepN(Integer keepN) {
            return keepN(Output.of(keepN));
        }

        /**
         * @param nameRegex The regular expression to match image names to delete.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable Output<String> nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param nameRegex The regular expression to match image names to delete.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(String nameRegex) {
            return nameRegex(Output.of(nameRegex));
        }

        /**
         * @param nameRegexDelete The regular expression to match image names to delete.
         * 
         * @return builder
         * 
         * @deprecated
         * `name_regex_delete` has been deprecated. Use `name_regex` instead.
         * 
         */
        @Deprecated /* `name_regex_delete` has been deprecated. Use `name_regex` instead. */
        public Builder nameRegexDelete(@Nullable Output<String> nameRegexDelete) {
            $.nameRegexDelete = nameRegexDelete;
            return this;
        }

        /**
         * @param nameRegexDelete The regular expression to match image names to delete.
         * 
         * @return builder
         * 
         * @deprecated
         * `name_regex_delete` has been deprecated. Use `name_regex` instead.
         * 
         */
        @Deprecated /* `name_regex_delete` has been deprecated. Use `name_regex` instead. */
        public Builder nameRegexDelete(String nameRegexDelete) {
            return nameRegexDelete(Output.of(nameRegexDelete));
        }

        /**
         * @param nameRegexKeep The regular expression to match image names to keep.
         * 
         * @return builder
         * 
         */
        public Builder nameRegexKeep(@Nullable Output<String> nameRegexKeep) {
            $.nameRegexKeep = nameRegexKeep;
            return this;
        }

        /**
         * @param nameRegexKeep The regular expression to match image names to keep.
         * 
         * @return builder
         * 
         */
        public Builder nameRegexKeep(String nameRegexKeep) {
            return nameRegexKeep(Output.of(nameRegexKeep));
        }

        /**
         * @param nextRunAt The next time the policy will run.
         * 
         * @return builder
         * 
         */
        public Builder nextRunAt(@Nullable Output<String> nextRunAt) {
            $.nextRunAt = nextRunAt;
            return this;
        }

        /**
         * @param nextRunAt The next time the policy will run.
         * 
         * @return builder
         * 
         */
        public Builder nextRunAt(String nextRunAt) {
            return nextRunAt(Output.of(nextRunAt));
        }

        /**
         * @param olderThan The number of days to keep images.
         * 
         * @return builder
         * 
         */
        public Builder olderThan(@Nullable Output<String> olderThan) {
            $.olderThan = olderThan;
            return this;
        }

        /**
         * @param olderThan The number of days to keep images.
         * 
         * @return builder
         * 
         */
        public Builder olderThan(String olderThan) {
            return olderThan(Output.of(olderThan));
        }

        public ProjectContainerExpirationPolicyArgs build() {
            return $;
        }
    }

}
