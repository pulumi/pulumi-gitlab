// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
     * Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
     * the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
     * 
     */
    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    /**
     * @return This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
     * Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
     * the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
     * 
     */
    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    /**
     * This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
     * CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
     * 
     */
    @Import(name="cacertFile")
    private @Nullable Output<String> cacertFile;

    /**
     * @return This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
     * CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
     * 
     */
    public Optional<Output<String>> cacertFile() {
        return Optional.ofNullable(this.cacertFile);
    }

    /**
     * File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
     * 
     */
    @Import(name="clientCert")
    private @Nullable Output<String> clientCert;

    /**
     * @return File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
     * 
     */
    public Optional<Output<String>> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }

    /**
     * File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
     * `client_cert` is set.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
     * `client_cert` is set.
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    @Import(name="earlyAuthCheck", json=true)
    private @Nullable Output<Boolean> earlyAuthCheck;

    public Optional<Output<Boolean>> earlyAuthCheck() {
        return Optional.ofNullable(this.earlyAuthCheck);
    }

    /**
     * A map of headers to append to all API request to the GitLab instance.
     * 
     */
    @Import(name="headers", json=true)
    private @Nullable Output<Map<String,String>> headers;

    /**
     * @return A map of headers to append to all API request to the GitLab instance.
     * 
     */
    public Optional<Output<Map<String,String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * When set to true this disables SSL verification of the connection to the GitLab instance.
     * 
     */
    @Import(name="insecure", json=true)
    private @Nullable Output<Boolean> insecure;

    /**
     * @return When set to true this disables SSL verification of the connection to the GitLab instance.
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * The number of retries to execute when receiving a 429 Rate Limit error. Each retry will exponentially back off.
     * 
     */
    @Import(name="retries", json=true)
    private @Nullable Output<Integer> retries;

    /**
     * @return The number of retries to execute when receiving a 429 Rate Limit error. Each retry will exponentially back off.
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
     * used in this provider for authentication (using Bearer authorization token). See
     * https://docs.gitlab.com/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
     * used in this provider for authentication (using Bearer authorization token). See
     * https://docs.gitlab.com/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.baseUrl = $.baseUrl;
        this.cacertFile = $.cacertFile;
        this.clientCert = $.clientCert;
        this.clientKey = $.clientKey;
        this.earlyAuthCheck = $.earlyAuthCheck;
        this.headers = $.headers;
        this.insecure = $.insecure;
        this.retries = $.retries;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseUrl This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
         * Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
         * the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
         * Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
         * the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param cacertFile This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
         * CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder cacertFile(@Nullable Output<String> cacertFile) {
            $.cacertFile = cacertFile;
            return this;
        }

        /**
         * @param cacertFile This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
         * CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder cacertFile(String cacertFile) {
            return cacertFile(Output.of(cacertFile));
        }

        /**
         * @param clientCert File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
         * 
         * @return builder
         * 
         */
        public Builder clientCert(@Nullable Output<String> clientCert) {
            $.clientCert = clientCert;
            return this;
        }

        /**
         * @param clientCert File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
         * 
         * @return builder
         * 
         */
        public Builder clientCert(String clientCert) {
            return clientCert(Output.of(clientCert));
        }

        /**
         * @param clientKey File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
         * `client_cert` is set.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
         * `client_cert` is set.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        public Builder earlyAuthCheck(@Nullable Output<Boolean> earlyAuthCheck) {
            $.earlyAuthCheck = earlyAuthCheck;
            return this;
        }

        public Builder earlyAuthCheck(Boolean earlyAuthCheck) {
            return earlyAuthCheck(Output.of(earlyAuthCheck));
        }

        /**
         * @param headers A map of headers to append to all API request to the GitLab instance.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<Map<String,String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers A map of headers to append to all API request to the GitLab instance.
         * 
         * @return builder
         * 
         */
        public Builder headers(Map<String,String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param insecure When set to true this disables SSL verification of the connection to the GitLab instance.
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure When set to true this disables SSL verification of the connection to the GitLab instance.
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param retries The number of retries to execute when receiving a 429 Rate Limit error. Each retry will exponentially back off.
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries The number of retries to execute when receiving a 429 Rate Limit error. Each retry will exponentially back off.
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param token The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
         * used in this provider for authentication (using Bearer authorization token). See
         * https://docs.gitlab.com/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
         * used in this provider for authentication (using Bearer authorization token). See
         * https://docs.gitlab.com/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
