// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class UserIdentityArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserIdentityArgs Empty = new UserIdentityArgs();

    /**
     * The external provider name.
     * 
     */
    @Import(name="externalProvider", required=true)
    private Output<String> externalProvider;

    /**
     * @return The external provider name.
     * 
     */
    public Output<String> externalProvider() {
        return this.externalProvider;
    }

    /**
     * A specific external authentication provider UID.
     * 
     */
    @Import(name="externalUid", required=true)
    private Output<String> externalUid;

    /**
     * @return A specific external authentication provider UID.
     * 
     */
    public Output<String> externalUid() {
        return this.externalUid;
    }

    /**
     * The GitLab ID of the user.
     * 
     */
    @Import(name="userId", required=true)
    private Output<Integer> userId;

    /**
     * @return The GitLab ID of the user.
     * 
     */
    public Output<Integer> userId() {
        return this.userId;
    }

    private UserIdentityArgs() {}

    private UserIdentityArgs(UserIdentityArgs $) {
        this.externalProvider = $.externalProvider;
        this.externalUid = $.externalUid;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserIdentityArgs $;

        public Builder() {
            $ = new UserIdentityArgs();
        }

        public Builder(UserIdentityArgs defaults) {
            $ = new UserIdentityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalProvider The external provider name.
         * 
         * @return builder
         * 
         */
        public Builder externalProvider(Output<String> externalProvider) {
            $.externalProvider = externalProvider;
            return this;
        }

        /**
         * @param externalProvider The external provider name.
         * 
         * @return builder
         * 
         */
        public Builder externalProvider(String externalProvider) {
            return externalProvider(Output.of(externalProvider));
        }

        /**
         * @param externalUid A specific external authentication provider UID.
         * 
         * @return builder
         * 
         */
        public Builder externalUid(Output<String> externalUid) {
            $.externalUid = externalUid;
            return this;
        }

        /**
         * @param externalUid A specific external authentication provider UID.
         * 
         * @return builder
         * 
         */
        public Builder externalUid(String externalUid) {
            return externalUid(Output.of(externalUid));
        }

        /**
         * @param userId The GitLab ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The GitLab ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        public UserIdentityArgs build() {
            if ($.externalProvider == null) {
                throw new MissingRequiredPropertyException("UserIdentityArgs", "externalProvider");
            }
            if ($.externalUid == null) {
                throw new MissingRequiredPropertyException("UserIdentityArgs", "externalUid");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserIdentityArgs", "userId");
            }
            return $;
        }
    }

}
