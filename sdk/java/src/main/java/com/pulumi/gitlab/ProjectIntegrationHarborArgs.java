// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectIntegrationHarborArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIntegrationHarborArgs Empty = new ProjectIntegrationHarborArgs();

    /**
     * Password for authentication with the Harbor server, if authentication is required by the server.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password for authentication with the Harbor server, if authentication is required by the server.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * ID of the GitLab project you want to activate integration on.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return ID of the GitLab project you want to activate integration on.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `my_project_name`.
     * 
     */
    @Import(name="projectName", required=true)
    private Output<String> projectName;

    /**
     * @return The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `my_project_name`.
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }

    /**
     * Harbor URL. Example: `http://harbor.example.com`
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return Harbor URL. Example: `http://harbor.example.com`
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     * 
     */
    @Import(name="useInheritedSettings")
    private @Nullable Output<Boolean> useInheritedSettings;

    /**
     * @return Indicates whether or not to inherit default settings. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> useInheritedSettings() {
        return Optional.ofNullable(this.useInheritedSettings);
    }

    /**
     * Username for authentication with the Harbor server, if authentication is required by the server.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username for authentication with the Harbor server, if authentication is required by the server.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ProjectIntegrationHarborArgs() {}

    private ProjectIntegrationHarborArgs(ProjectIntegrationHarborArgs $) {
        this.password = $.password;
        this.project = $.project;
        this.projectName = $.projectName;
        this.url = $.url;
        this.useInheritedSettings = $.useInheritedSettings;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIntegrationHarborArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIntegrationHarborArgs $;

        public Builder() {
            $ = new ProjectIntegrationHarborArgs();
        }

        public Builder(ProjectIntegrationHarborArgs defaults) {
            $ = new ProjectIntegrationHarborArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Password for authentication with the Harbor server, if authentication is required by the server.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for authentication with the Harbor server, if authentication is required by the server.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param project ID of the GitLab project you want to activate integration on.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project ID of the GitLab project you want to activate integration on.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectName The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `my_project_name`.
         * 
         * @return builder
         * 
         */
        public Builder projectName(Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `my_project_name`.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param url Harbor URL. Example: `http://harbor.example.com`
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url Harbor URL. Example: `http://harbor.example.com`
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param useInheritedSettings Indicates whether or not to inherit default settings. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder useInheritedSettings(@Nullable Output<Boolean> useInheritedSettings) {
            $.useInheritedSettings = useInheritedSettings;
            return this;
        }

        /**
         * @param useInheritedSettings Indicates whether or not to inherit default settings. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder useInheritedSettings(Boolean useInheritedSettings) {
            return useInheritedSettings(Output.of(useInheritedSettings));
        }

        /**
         * @param username Username for authentication with the Harbor server, if authentication is required by the server.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for authentication with the Harbor server, if authentication is required by the server.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProjectIntegrationHarborArgs build() {
            if ($.password == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationHarborArgs", "password");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationHarborArgs", "project");
            }
            if ($.projectName == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationHarborArgs", "projectName");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationHarborArgs", "url");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ProjectIntegrationHarborArgs", "username");
            }
            return $;
        }
    }

}
