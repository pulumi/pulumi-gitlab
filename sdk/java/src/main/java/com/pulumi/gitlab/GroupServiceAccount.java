// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.GroupServiceAccountArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.GroupServiceAccountState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `gitlab.GroupServiceAccount` resource allows creating a GitLab group service account.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Group;
 * import com.pulumi.gitlab.GroupArgs;
 * import com.pulumi.gitlab.GroupServiceAccount;
 * import com.pulumi.gitlab.GroupServiceAccountArgs;
 * import com.pulumi.gitlab.GroupMembership;
 * import com.pulumi.gitlab.GroupMembershipArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // This must be a top-level group
 *         var example = new Group("example", GroupArgs.builder()
 *             .name("example")
 *             .path("example")
 *             .description("An example group")
 *             .build());
 * 
 *         // The service account against the top-level group
 *         var exampleSa = new GroupServiceAccount("exampleSa", GroupServiceAccountArgs.builder()
 *             .group(example.id())
 *             .name("example-name")
 *             .username("example-username")
 *             .build());
 * 
 *         // Group to assign the service account to. Can be the same top-level group resource as above, or a subgroup of that group.
 *         var exampleSubgroup = new Group("exampleSubgroup", GroupArgs.builder()
 *             .name("subgroup")
 *             .path("example/subgroup")
 *             .description("An example subgroup")
 *             .build());
 * 
 *         // To assign the service account to a group
 *         var exampleMembership = new GroupMembership("exampleMembership", GroupMembershipArgs.builder()
 *             .groupId(exampleSubgroup.id())
 *             .userId(exampleSa.serviceAccountId())
 *             .accessLevel("developer")
 *             .expiresAt("2020-03-14")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_service_account`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_group_service_account.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * ```sh
 * $ pulumi import gitlab:index/groupServiceAccount:GroupServiceAccount You can import a group service account using `&lt;resource&gt; &lt;id&gt;`. The
 * ```
 * 
 * `id` is in the form of &lt;group_id&gt;:&lt;service_account_id&gt;
 * 
 * ```sh
 * $ pulumi import gitlab:index/groupServiceAccount:GroupServiceAccount example example
 * ```
 * 
 */
@ResourceType(type="gitlab:index/groupServiceAccount:GroupServiceAccount")
public class GroupServiceAccount extends com.pulumi.resources.CustomResource {
    /**
     * User account email. If not specified, generates an email prepended with `service_account_group_`. Custom email addresses require confirmation before the account is active, unless the group has a matching verified domain.
     * 
     */
    @Export(name="email", refs={String.class}, tree="[0]")
    private Output<String> email;

    /**
     * @return User account email. If not specified, generates an email prepended with `service_account_group_`. Custom email addresses require confirmation before the account is active, unless the group has a matching verified domain.
     * 
     */
    public Output<String> email() {
        return this.email;
    }
    /**
     * The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
     * 
     */
    @Export(name="group", refs={String.class}, tree="[0]")
    private Output<String> group;

    /**
     * @return The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
     * 
     */
    public Output<String> group() {
        return this.group;
    }
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the user. If not specified, the default Service account user name is used.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The service account id.
     * 
     */
    @Export(name="serviceAccountId", refs={String.class}, tree="[0]")
    private Output<String> serviceAccountId;

    /**
     * @return The service account id.
     * 
     */
    public Output<String> serviceAccountId() {
        return this.serviceAccountId;
    }
    /**
     * The username of the user. If not specified, it’s automatically generated.
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> username;

    /**
     * @return The username of the user. If not specified, it’s automatically generated.
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GroupServiceAccount(java.lang.String name) {
        this(name, GroupServiceAccountArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GroupServiceAccount(java.lang.String name, GroupServiceAccountArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GroupServiceAccount(java.lang.String name, GroupServiceAccountArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupServiceAccount:GroupServiceAccount", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GroupServiceAccount(java.lang.String name, Output<java.lang.String> id, @Nullable GroupServiceAccountState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupServiceAccount:GroupServiceAccount", name, state, makeResourceOptions(options, id), false);
    }

    private static GroupServiceAccountArgs makeArgs(GroupServiceAccountArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GroupServiceAccountArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GroupServiceAccount get(java.lang.String name, Output<java.lang.String> id, @Nullable GroupServiceAccountState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GroupServiceAccount(name, id, state, options);
    }
}
