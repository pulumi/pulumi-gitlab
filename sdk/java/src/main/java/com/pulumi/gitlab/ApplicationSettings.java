// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ApplicationSettingsArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ApplicationSettingsState;
import com.pulumi.gitlab.outputs.ApplicationSettingsDefaultBranchProtectionDefaults;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 */
@ResourceType(type="gitlab:index/applicationSettings:ApplicationSettings")
public class ApplicationSettings extends com.pulumi.resources.CustomResource {
    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     * 
     */
    @Export(name="abuseNotificationEmail", refs={String.class}, tree="[0]")
    private Output<String> abuseNotificationEmail;

    /**
     * @return If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     * 
     */
    public Output<String> abuseNotificationEmail() {
        return this.abuseNotificationEmail;
    }
    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     * 
     */
    @Export(name="adminMode", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> adminMode;

    /**
     * @return Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     * 
     */
    public Output<Boolean> adminMode() {
        return this.adminMode;
    }
    /**
     * Where to redirect users after logout.
     * 
     */
    @Export(name="afterSignOutPath", refs={String.class}, tree="[0]")
    private Output<String> afterSignOutPath;

    /**
     * @return Where to redirect users after logout.
     * 
     */
    public Output<String> afterSignOutPath() {
        return this.afterSignOutPath;
    }
    /**
     * Text shown to the user after signing up.
     * 
     */
    @Export(name="afterSignUpText", refs={String.class}, tree="[0]")
    private Output<String> afterSignUpText;

    /**
     * @return Text shown to the user after signing up.
     * 
     */
    public Output<String> afterSignUpText() {
        return this.afterSignUpText;
    }
    /**
     * API key for Akismet spam protection.
     * 
     */
    @Export(name="akismetApiKey", refs={String.class}, tree="[0]")
    private Output<String> akismetApiKey;

    /**
     * @return API key for Akismet spam protection.
     * 
     */
    public Output<String> akismetApiKey() {
        return this.akismetApiKey;
    }
    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     * 
     */
    @Export(name="akismetEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> akismetEnabled;

    /**
     * @return (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     * 
     */
    public Output<Boolean> akismetEnabled() {
        return this.akismetEnabled;
    }
    /**
     * Set to true to allow users to delete their accounts. Premium and Ultimate only.
     * 
     */
    @Export(name="allowAccountDeletion", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowAccountDeletion;

    /**
     * @return Set to true to allow users to delete their accounts. Premium and Ultimate only.
     * 
     */
    public Output<Boolean> allowAccountDeletion() {
        return this.allowAccountDeletion;
    }
    /**
     * Set to true to allow group owners to manage LDAP.
     * 
     */
    @Export(name="allowGroupOwnersToManageLdap", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowGroupOwnersToManageLdap;

    /**
     * @return Set to true to allow group owners to manage LDAP.
     * 
     */
    public Output<Boolean> allowGroupOwnersToManageLdap() {
        return this.allowGroupOwnersToManageLdap;
    }
    /**
     * Allow requests to the local network from system hooks.
     * 
     */
    @Export(name="allowLocalRequestsFromSystemHooks", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowLocalRequestsFromSystemHooks;

    /**
     * @return Allow requests to the local network from system hooks.
     * 
     */
    public Output<Boolean> allowLocalRequestsFromSystemHooks() {
        return this.allowLocalRequestsFromSystemHooks;
    }
    /**
     * Allow requests to the local network from web hooks and services.
     * 
     */
    @Export(name="allowLocalRequestsFromWebHooksAndServices", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowLocalRequestsFromWebHooksAndServices;

    /**
     * @return Allow requests to the local network from web hooks and services.
     * 
     */
    public Output<Boolean> allowLocalRequestsFromWebHooksAndServices() {
        return this.allowLocalRequestsFromWebHooksAndServices;
    }
    /**
     * Indicates whether users assigned up to the Guest role can create groups and personal projects.
     * 
     */
    @Export(name="allowProjectCreationForGuestAndBelow", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowProjectCreationForGuestAndBelow;

    /**
     * @return Indicates whether users assigned up to the Guest role can create groups and personal projects.
     * 
     */
    public Output<Boolean> allowProjectCreationForGuestAndBelow() {
        return this.allowProjectCreationForGuestAndBelow;
    }
    /**
     * Allow using a registration token to create a runner.
     * 
     */
    @Export(name="allowRunnerRegistrationToken", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowRunnerRegistrationToken;

    /**
     * @return Allow using a registration token to create a runner.
     * 
     */
    public Output<Boolean> allowRunnerRegistrationToken() {
        return this.allowRunnerRegistrationToken;
    }
    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     * 
     */
    @Export(name="archiveBuildsInHumanReadable", refs={String.class}, tree="[0]")
    private Output<String> archiveBuildsInHumanReadable;

    /**
     * @return Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     * 
     */
    public Output<String> archiveBuildsInHumanReadable() {
        return this.archiveBuildsInHumanReadable;
    }
    /**
     * Maximum limit of AsciiDoc include directives being processed in any one document. Maximum: 64.
     * 
     */
    @Export(name="asciidocMaxIncludes", refs={Integer.class}, tree="[0]")
    private Output<Integer> asciidocMaxIncludes;

    /**
     * @return Maximum limit of AsciiDoc include directives being processed in any one document. Maximum: 64.
     * 
     */
    public Output<Integer> asciidocMaxIncludes() {
        return this.asciidocMaxIncludes;
    }
    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     * 
     */
    @Export(name="assetProxyAllowlists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> assetProxyAllowlists;

    /**
     * @return Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     * 
     */
    public Output<List<String>> assetProxyAllowlists() {
        return this.assetProxyAllowlists;
    }
    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     * 
     */
    @Export(name="assetProxyEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> assetProxyEnabled;

    /**
     * @return (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     * 
     */
    public Output<Boolean> assetProxyEnabled() {
        return this.assetProxyEnabled;
    }
    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    @Export(name="assetProxySecretKey", refs={String.class}, tree="[0]")
    private Output<String> assetProxySecretKey;

    /**
     * @return Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    public Output<String> assetProxySecretKey() {
        return this.assetProxySecretKey;
    }
    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    @Export(name="assetProxyUrl", refs={String.class}, tree="[0]")
    private Output<String> assetProxyUrl;

    /**
     * @return URL of the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    public Output<String> assetProxyUrl() {
        return this.assetProxyUrl;
    }
    /**
     * By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     * 
     */
    @Export(name="authorizedKeysEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> authorizedKeysEnabled;

    /**
     * @return By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     * 
     */
    public Output<Boolean> authorizedKeysEnabled() {
        return this.authorizedKeysEnabled;
    }
    /**
     * When enabled, users will get automatically banned from the application when they download more than the maximum number of unique projects in the time period specified by max*number*of*repository*downloads and max*number*of*repository*downloads*within*time_period respectively. Self-managed, Ultimate only.
     * 
     */
    @Export(name="autoBanUserOnExcessiveProjectsDownload", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoBanUserOnExcessiveProjectsDownload;

    /**
     * @return When enabled, users will get automatically banned from the application when they download more than the maximum number of unique projects in the time period specified by max*number*of*repository*downloads and max*number*of*repository*downloads*within*time_period respectively. Self-managed, Ultimate only.
     * 
     */
    public Output<Boolean> autoBanUserOnExcessiveProjectsDownload() {
        return this.autoBanUserOnExcessiveProjectsDownload;
    }
    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     * 
     */
    @Export(name="autoDevopsDomain", refs={String.class}, tree="[0]")
    private Output<String> autoDevopsDomain;

    /**
     * @return Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     * 
     */
    public Output<String> autoDevopsDomain() {
        return this.autoDevopsDomain;
    }
    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     * 
     */
    @Export(name="autoDevopsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoDevopsEnabled;

    /**
     * @return Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     * 
     */
    public Output<Boolean> autoDevopsEnabled() {
        return this.autoDevopsEnabled;
    }
    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     * 
     */
    @Export(name="automaticPurchasedStorageAllocation", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> automaticPurchasedStorageAllocation;

    /**
     * @return Enabling this permits automatic allocation of purchased storage in a namespace.
     * 
     */
    public Output<Boolean> automaticPurchasedStorageAllocation() {
        return this.automaticPurchasedStorageAllocation;
    }
    /**
     * Maximum simultaneous Direct Transfer batches to process.
     * 
     */
    @Export(name="bulkImportConcurrentPipelineBatchLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> bulkImportConcurrentPipelineBatchLimit;

    /**
     * @return Maximum simultaneous Direct Transfer batches to process.
     * 
     */
    public Output<Integer> bulkImportConcurrentPipelineBatchLimit() {
        return this.bulkImportConcurrentPipelineBatchLimit;
    }
    /**
     * Enable migrating GitLab groups by direct transfer.
     * 
     */
    @Export(name="bulkImportEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> bulkImportEnabled;

    /**
     * @return Enable migrating GitLab groups by direct transfer.
     * 
     */
    public Output<Boolean> bulkImportEnabled() {
        return this.bulkImportEnabled;
    }
    /**
     * Maximum download file size when importing from source GitLab instances by direct transfer.
     * 
     */
    @Export(name="bulkImportMaxDownloadFileSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> bulkImportMaxDownloadFileSize;

    /**
     * @return Maximum download file size when importing from source GitLab instances by direct transfer.
     * 
     */
    public Output<Integer> bulkImportMaxDownloadFileSize() {
        return this.bulkImportMaxDownloadFileSize;
    }
    /**
     * Indicates whether users can create top-level groups.
     * 
     */
    @Export(name="canCreateGroup", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> canCreateGroup;

    /**
     * @return Indicates whether users can create top-level groups.
     * 
     */
    public Output<Boolean> canCreateGroup() {
        return this.canCreateGroup;
    }
    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     * 
     */
    @Export(name="checkNamespacePlan", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> checkNamespacePlan;

    /**
     * @return Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     * 
     */
    public Output<Boolean> checkNamespacePlan() {
        return this.checkNamespacePlan;
    }
    /**
     * The maximum number of includes per pipeline.
     * 
     */
    @Export(name="ciMaxIncludes", refs={Integer.class}, tree="[0]")
    private Output<Integer> ciMaxIncludes;

    /**
     * @return The maximum number of includes per pipeline.
     * 
     */
    public Output<Integer> ciMaxIncludes() {
        return this.ciMaxIncludes;
    }
    /**
     * The maximum amount of memory, in bytes, that can be allocated for the pipeline configuration, with all included YAML configuration files.
     * 
     */
    @Export(name="ciMaxTotalYamlSizeBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> ciMaxTotalYamlSizeBytes;

    /**
     * @return The maximum amount of memory, in bytes, that can be allocated for the pipeline configuration, with all included YAML configuration files.
     * 
     */
    public Output<Integer> ciMaxTotalYamlSizeBytes() {
        return this.ciMaxTotalYamlSizeBytes;
    }
    /**
     * Custom hostname (for private commit emails).
     * 
     */
    @Export(name="commitEmailHostname", refs={String.class}, tree="[0]")
    private Output<String> commitEmailHostname;

    /**
     * @return Custom hostname (for private commit emails).
     * 
     */
    public Output<String> commitEmailHostname() {
        return this.commitEmailHostname;
    }
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Cloud importer.
     * 
     */
    @Export(name="concurrentBitbucketImportJobsLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> concurrentBitbucketImportJobsLimit;

    /**
     * @return Maximum number of simultaneous import jobs for the Bitbucket Cloud importer.
     * 
     */
    public Output<Integer> concurrentBitbucketImportJobsLimit() {
        return this.concurrentBitbucketImportJobsLimit;
    }
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Server importer.
     * 
     */
    @Export(name="concurrentBitbucketServerImportJobsLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> concurrentBitbucketServerImportJobsLimit;

    /**
     * @return Maximum number of simultaneous import jobs for the Bitbucket Server importer.
     * 
     */
    public Output<Integer> concurrentBitbucketServerImportJobsLimit() {
        return this.concurrentBitbucketServerImportJobsLimit;
    }
    /**
     * Maximum number of simultaneous import jobs for the GitHub importer.
     * 
     */
    @Export(name="concurrentGithubImportJobsLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> concurrentGithubImportJobsLimit;

    /**
     * @return Maximum number of simultaneous import jobs for the GitHub importer.
     * 
     */
    public Output<Integer> concurrentGithubImportJobsLimit() {
        return this.concurrentGithubImportJobsLimit;
    }
    /**
     * Enable cleanup policies for all projects.
     * 
     */
    @Export(name="containerExpirationPoliciesEnableHistoricEntries", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> containerExpirationPoliciesEnableHistoricEntries;

    /**
     * @return Enable cleanup policies for all projects.
     * 
     */
    public Output<Boolean> containerExpirationPoliciesEnableHistoricEntries() {
        return this.containerExpirationPoliciesEnableHistoricEntries;
    }
    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     * 
     */
    @Export(name="containerRegistryCleanupTagsServiceMaxListSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> containerRegistryCleanupTagsServiceMaxListSize;

    /**
     * @return The maximum number of tags that can be deleted in a single execution of cleanup policies.
     * 
     */
    public Output<Integer> containerRegistryCleanupTagsServiceMaxListSize() {
        return this.containerRegistryCleanupTagsServiceMaxListSize;
    }
    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     * 
     */
    @Export(name="containerRegistryDeleteTagsServiceTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> containerRegistryDeleteTagsServiceTimeout;

    /**
     * @return The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     * 
     */
    public Output<Integer> containerRegistryDeleteTagsServiceTimeout() {
        return this.containerRegistryDeleteTagsServiceTimeout;
    }
    /**
     * Caching during the execution of cleanup policies.
     * 
     */
    @Export(name="containerRegistryExpirationPoliciesCaching", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> containerRegistryExpirationPoliciesCaching;

    /**
     * @return Caching during the execution of cleanup policies.
     * 
     */
    public Output<Boolean> containerRegistryExpirationPoliciesCaching() {
        return this.containerRegistryExpirationPoliciesCaching;
    }
    /**
     * Number of workers for cleanup policies.
     * 
     */
    @Export(name="containerRegistryExpirationPoliciesWorkerCapacity", refs={Integer.class}, tree="[0]")
    private Output<Integer> containerRegistryExpirationPoliciesWorkerCapacity;

    /**
     * @return Number of workers for cleanup policies.
     * 
     */
    public Output<Integer> containerRegistryExpirationPoliciesWorkerCapacity() {
        return this.containerRegistryExpirationPoliciesWorkerCapacity;
    }
    /**
     * Container Registry token duration in minutes.
     * 
     */
    @Export(name="containerRegistryTokenExpireDelay", refs={Integer.class}, tree="[0]")
    private Output<Integer> containerRegistryTokenExpireDelay;

    /**
     * @return Container Registry token duration in minutes.
     * 
     */
    public Output<Integer> containerRegistryTokenExpireDelay() {
        return this.containerRegistryTokenExpireDelay;
    }
    /**
     * Enable automatic deactivation of dormant users.
     * 
     */
    @Export(name="deactivateDormantUsers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deactivateDormantUsers;

    /**
     * @return Enable automatic deactivation of dormant users.
     * 
     */
    public Output<Boolean> deactivateDormantUsers() {
        return this.deactivateDormantUsers;
    }
    /**
     * Length of time (in days) after which a user is considered dormant.
     * 
     */
    @Export(name="deactivateDormantUsersPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> deactivateDormantUsersPeriod;

    /**
     * @return Length of time (in days) after which a user is considered dormant.
     * 
     */
    public Output<Integer> deactivateDormantUsersPeriod() {
        return this.deactivateDormantUsersPeriod;
    }
    /**
     * Default timeout for decompressing archived files, in seconds. Set to 0 to disable timeouts.
     * 
     */
    @Export(name="decompressArchiveFileTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> decompressArchiveFileTimeout;

    /**
     * @return Default timeout for decompressing archived files, in seconds. Set to 0 to disable timeouts.
     * 
     */
    public Output<Integer> decompressArchiveFileTimeout() {
        return this.decompressArchiveFileTimeout;
    }
    /**
     * Set the default expiration time for each job’s artifacts.
     * 
     */
    @Export(name="defaultArtifactsExpireIn", refs={String.class}, tree="[0]")
    private Output<String> defaultArtifactsExpireIn;

    /**
     * @return Set the default expiration time for each job’s artifacts.
     * 
     */
    public Output<String> defaultArtifactsExpireIn() {
        return this.defaultArtifactsExpireIn;
    }
    /**
     * Instance-level custom initial branch name
     * 
     */
    @Export(name="defaultBranchName", refs={String.class}, tree="[0]")
    private Output<String> defaultBranchName;

    /**
     * @return Instance-level custom initial branch name
     * 
     */
    public Output<String> defaultBranchName() {
        return this.defaultBranchName;
    }
    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
     * 
     */
    @Export(name="defaultBranchProtection", refs={Integer.class}, tree="[0]")
    private Output<Integer> defaultBranchProtection;

    /**
     * @return Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
     * 
     */
    public Output<Integer> defaultBranchProtection() {
        return this.defaultBranchProtection;
    }
    /**
     * The default*branch*protection*defaults attribute describes the default branch protection defaults. All parameters are optional.
     * 
     */
    @Export(name="defaultBranchProtectionDefaults", refs={ApplicationSettingsDefaultBranchProtectionDefaults.class}, tree="[0]")
    private Output<ApplicationSettingsDefaultBranchProtectionDefaults> defaultBranchProtectionDefaults;

    /**
     * @return The default*branch*protection*defaults attribute describes the default branch protection defaults. All parameters are optional.
     * 
     */
    public Output<ApplicationSettingsDefaultBranchProtectionDefaults> defaultBranchProtectionDefaults() {
        return this.defaultBranchProtectionDefaults;
    }
    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     * 
     */
    @Export(name="defaultCiConfigPath", refs={String.class}, tree="[0]")
    private Output<String> defaultCiConfigPath;

    /**
     * @return Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     * 
     */
    public Output<String> defaultCiConfigPath() {
        return this.defaultCiConfigPath;
    }
    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter.
     * 
     */
    @Export(name="defaultGroupVisibility", refs={String.class}, tree="[0]")
    private Output<String> defaultGroupVisibility;

    /**
     * @return What visibility level new groups receive. Can take private, internal and public as a parameter.
     * 
     */
    public Output<String> defaultGroupVisibility() {
        return this.defaultGroupVisibility;
    }
    /**
     * Default preferred language for users who are not logged in.
     * 
     */
    @Export(name="defaultPreferredLanguage", refs={String.class}, tree="[0]")
    private Output<String> defaultPreferredLanguage;

    /**
     * @return Default preferred language for users who are not logged in.
     * 
     */
    public Output<String> defaultPreferredLanguage() {
        return this.defaultPreferredLanguage;
    }
    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     * 
     */
    @Export(name="defaultProjectCreation", refs={Integer.class}, tree="[0]")
    private Output<Integer> defaultProjectCreation;

    /**
     * @return Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     * 
     */
    public Output<Integer> defaultProjectCreation() {
        return this.defaultProjectCreation;
    }
    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter.
     * 
     */
    @Export(name="defaultProjectVisibility", refs={String.class}, tree="[0]")
    private Output<String> defaultProjectVisibility;

    /**
     * @return What visibility level new projects receive. Can take private, internal and public as a parameter.
     * 
     */
    public Output<String> defaultProjectVisibility() {
        return this.defaultProjectVisibility;
    }
    /**
     * Project limit per user.
     * 
     */
    @Export(name="defaultProjectsLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> defaultProjectsLimit;

    /**
     * @return Project limit per user.
     * 
     */
    public Output<Integer> defaultProjectsLimit() {
        return this.defaultProjectsLimit;
    }
    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter.
     * 
     */
    @Export(name="defaultSnippetVisibility", refs={String.class}, tree="[0]")
    private Output<String> defaultSnippetVisibility;

    /**
     * @return What visibility level new snippets receive. Can take private, internal and public as a parameter.
     * 
     */
    public Output<String> defaultSnippetVisibility() {
        return this.defaultSnippetVisibility;
    }
    /**
     * Default syntax highlighting theme for users who are new or not signed in. See IDs of available themes (https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/themes.rb#L16)
     * 
     */
    @Export(name="defaultSyntaxHighlightingTheme", refs={Integer.class}, tree="[0]")
    private Output<Integer> defaultSyntaxHighlightingTheme;

    /**
     * @return Default syntax highlighting theme for users who are new or not signed in. See IDs of available themes (https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/themes.rb#L16)
     * 
     */
    public Output<Integer> defaultSyntaxHighlightingTheme() {
        return this.defaultSyntaxHighlightingTheme;
    }
    /**
     * Enable inactive project deletion feature.
     * 
     */
    @Export(name="deleteInactiveProjects", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deleteInactiveProjects;

    /**
     * @return Enable inactive project deletion feature.
     * 
     */
    public Output<Boolean> deleteInactiveProjects() {
        return this.deleteInactiveProjects;
    }
    /**
     * Specifies whether users who have not confirmed their email should be deleted. When set to true, unconfirmed users are deleted after unconfirmed*users*delete*after*days days. Self-managed, Premium and Ultimate only.
     * 
     */
    @Export(name="deleteUnconfirmedUsers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deleteUnconfirmedUsers;

    /**
     * @return Specifies whether users who have not confirmed their email should be deleted. When set to true, unconfirmed users are deleted after unconfirmed*users*delete*after*days days. Self-managed, Premium and Ultimate only.
     * 
     */
    public Output<Boolean> deleteUnconfirmedUsers() {
        return this.deleteUnconfirmedUsers;
    }
    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90.
     * 
     */
    @Export(name="deletionAdjournedPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> deletionAdjournedPeriod;

    /**
     * @return The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90.
     * 
     */
    public Output<Integer> deletionAdjournedPeriod() {
        return this.deletionAdjournedPeriod;
    }
    /**
     * (If enabled, requires diagramsnet_url) Enable Diagrams.net integration.
     * 
     */
    @Export(name="diagramsnetEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> diagramsnetEnabled;

    /**
     * @return (If enabled, requires diagramsnet_url) Enable Diagrams.net integration.
     * 
     */
    public Output<Boolean> diagramsnetEnabled() {
        return this.diagramsnetEnabled;
    }
    /**
     * The Diagrams.net instance URL for integration.
     * 
     */
    @Export(name="diagramsnetUrl", refs={String.class}, tree="[0]")
    private Output<String> diagramsnetUrl;

    /**
     * @return The Diagrams.net instance URL for integration.
     * 
     */
    public Output<String> diagramsnetUrl() {
        return this.diagramsnetUrl;
    }
    /**
     * Maximum files in a diff.
     * 
     */
    @Export(name="diffMaxFiles", refs={Integer.class}, tree="[0]")
    private Output<Integer> diffMaxFiles;

    /**
     * @return Maximum files in a diff.
     * 
     */
    public Output<Integer> diffMaxFiles() {
        return this.diffMaxFiles;
    }
    /**
     * Maximum lines in a diff.
     * 
     */
    @Export(name="diffMaxLines", refs={Integer.class}, tree="[0]")
    private Output<Integer> diffMaxLines;

    /**
     * @return Maximum lines in a diff.
     * 
     */
    public Output<Integer> diffMaxLines() {
        return this.diffMaxLines;
    }
    /**
     * Maximum diff patch size, in bytes.
     * 
     */
    @Export(name="diffMaxPatchBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> diffMaxPatchBytes;

    /**
     * @return Maximum diff patch size, in bytes.
     * 
     */
    public Output<Integer> diffMaxPatchBytes() {
        return this.diffMaxPatchBytes;
    }
    /**
     * Stops administrators from connecting their GitLab accounts to non-trusted OAuth 2.0 applications that have the api, read*api, read*repository, write*repository, read*registry, write_registry, or sudo scopes.
     * 
     */
    @Export(name="disableAdminOauthScopes", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disableAdminOauthScopes;

    /**
     * @return Stops administrators from connecting their GitLab accounts to non-trusted OAuth 2.0 applications that have the api, read*api, read*repository, write*repository, read*registry, write_registry, or sudo scopes.
     * 
     */
    public Output<Boolean> disableAdminOauthScopes() {
        return this.disableAdminOauthScopes;
    }
    /**
     * Disable display of RSS/Atom and calendar feed tokens.
     * 
     */
    @Export(name="disableFeedToken", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disableFeedToken;

    /**
     * @return Disable display of RSS/Atom and calendar feed tokens.
     * 
     */
    public Output<Boolean> disableFeedToken() {
        return this.disableFeedToken;
    }
    /**
     * Disable personal access tokens. Self-managed, Premium and Ultimate only. There is no method available to enable a personal access token that’s been disabled through the API. This is a known issue.
     * 
     */
    @Export(name="disablePersonalAccessTokens", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disablePersonalAccessTokens;

    /**
     * @return Disable personal access tokens. Self-managed, Premium and Ultimate only. There is no method available to enable a personal access token that’s been disabled through the API. This is a known issue.
     * 
     */
    public Output<Boolean> disablePersonalAccessTokens() {
        return this.disablePersonalAccessTokens;
    }
    /**
     * Disabled OAuth sign-in sources.
     * 
     */
    @Export(name="disabledOauthSignInSources", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> disabledOauthSignInSources;

    /**
     * @return Disabled OAuth sign-in sources.
     * 
     */
    public Output<List<String>> disabledOauthSignInSources() {
        return this.disabledOauthSignInSources;
    }
    /**
     * Enforce DNS rebinding attack protection.
     * 
     */
    @Export(name="dnsRebindingProtectionEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> dnsRebindingProtectionEnabled;

    /**
     * @return Enforce DNS rebinding attack protection.
     * 
     */
    public Output<Boolean> dnsRebindingProtectionEnabled() {
        return this.dnsRebindingProtectionEnabled;
    }
    /**
     * Force people to use only corporate emails for sign-up. Null means there is no restriction.
     * 
     */
    @Export(name="domainAllowlists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> domainAllowlists;

    /**
     * @return Force people to use only corporate emails for sign-up. Null means there is no restriction.
     * 
     */
    public Output<List<String>> domainAllowlists() {
        return this.domainAllowlists;
    }
    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     * 
     */
    @Export(name="domainDenylistEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> domainDenylistEnabled;

    /**
     * @return (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     * 
     */
    public Output<Boolean> domainDenylistEnabled() {
        return this.domainDenylistEnabled;
    }
    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     * 
     */
    @Export(name="domainDenylists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> domainDenylists;

    /**
     * @return Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     * 
     */
    public Output<List<String>> domainDenylists() {
        return this.domainDenylists;
    }
    /**
     * Maximum downstream pipeline trigger rate.
     * 
     */
    @Export(name="downstreamPipelineTriggerLimitPerProjectUserSha", refs={Integer.class}, tree="[0]")
    private Output<Integer> downstreamPipelineTriggerLimitPerProjectUserSha;

    /**
     * @return Maximum downstream pipeline trigger rate.
     * 
     */
    public Output<Integer> downstreamPipelineTriggerLimitPerProjectUserSha() {
        return this.downstreamPipelineTriggerLimitPerProjectUserSha;
    }
    /**
     * The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
     * 
     */
    @Export(name="dsaKeyRestriction", refs={Integer.class}, tree="[0]")
    private Output<Integer> dsaKeyRestriction;

    /**
     * @return The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
     * 
     */
    public Output<Integer> dsaKeyRestriction() {
        return this.dsaKeyRestriction;
    }
    /**
     * Indicates whether GitLab Duo features are enabled for this instance. Self-managed, Premium and Ultimate only.
     * 
     */
    @Export(name="duoFeaturesEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> duoFeaturesEnabled;

    /**
     * @return Indicates whether GitLab Duo features are enabled for this instance. Self-managed, Premium and Ultimate only.
     * 
     */
    public Output<Boolean> duoFeaturesEnabled() {
        return this.duoFeaturesEnabled;
    }
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
     * 
     */
    @Export(name="ecdsaKeyRestriction", refs={Integer.class}, tree="[0]")
    private Output<Integer> ecdsaKeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
     * 
     */
    public Output<Integer> ecdsaKeyRestriction() {
        return this.ecdsaKeyRestriction;
    }
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
     * 
     */
    @Export(name="ecdsaSkKeyRestriction", refs={Integer.class}, tree="[0]")
    private Output<Integer> ecdsaSkKeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
     * 
     */
    public Output<Integer> ecdsaSkKeyRestriction() {
        return this.ecdsaSkKeyRestriction;
    }
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
     * 
     */
    @Export(name="ed25519KeyRestriction", refs={Integer.class}, tree="[0]")
    private Output<Integer> ed25519KeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
     * 
     */
    public Output<Integer> ed25519KeyRestriction() {
        return this.ed25519KeyRestriction;
    }
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
     * 
     */
    @Export(name="ed25519SkKeyRestriction", refs={Integer.class}, tree="[0]")
    private Output<Integer> ed25519SkKeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
     * 
     */
    public Output<Integer> ed25519SkKeyRestriction() {
        return this.ed25519SkKeyRestriction;
    }
    /**
     * AWS IAM access key ID.
     * 
     */
    @Export(name="eksAccessKeyId", refs={String.class}, tree="[0]")
    private Output<String> eksAccessKeyId;

    /**
     * @return AWS IAM access key ID.
     * 
     */
    public Output<String> eksAccessKeyId() {
        return this.eksAccessKeyId;
    }
    /**
     * Amazon account ID.
     * 
     */
    @Export(name="eksAccountId", refs={String.class}, tree="[0]")
    private Output<String> eksAccountId;

    /**
     * @return Amazon account ID.
     * 
     */
    public Output<String> eksAccountId() {
        return this.eksAccountId;
    }
    /**
     * Enable integration with Amazon EKS.
     * 
     */
    @Export(name="eksIntegrationEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> eksIntegrationEnabled;

    /**
     * @return Enable integration with Amazon EKS.
     * 
     */
    public Output<Boolean> eksIntegrationEnabled() {
        return this.eksIntegrationEnabled;
    }
    /**
     * AWS IAM secret access key.
     * 
     */
    @Export(name="eksSecretAccessKey", refs={String.class}, tree="[0]")
    private Output<String> eksSecretAccessKey;

    /**
     * @return AWS IAM secret access key.
     * 
     */
    public Output<String> eksSecretAccessKey() {
        return this.eksSecretAccessKey;
    }
    /**
     * Enable the use of AWS hosted Elasticsearch.
     * 
     */
    @Export(name="elasticsearchAws", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> elasticsearchAws;

    /**
     * @return Enable the use of AWS hosted Elasticsearch.
     * 
     */
    public Output<Boolean> elasticsearchAws() {
        return this.elasticsearchAws;
    }
    /**
     * AWS IAM access key.
     * 
     */
    @Export(name="elasticsearchAwsAccessKey", refs={String.class}, tree="[0]")
    private Output<String> elasticsearchAwsAccessKey;

    /**
     * @return AWS IAM access key.
     * 
     */
    public Output<String> elasticsearchAwsAccessKey() {
        return this.elasticsearchAwsAccessKey;
    }
    /**
     * The AWS region the Elasticsearch domain is configured.
     * 
     */
    @Export(name="elasticsearchAwsRegion", refs={String.class}, tree="[0]")
    private Output<String> elasticsearchAwsRegion;

    /**
     * @return The AWS region the Elasticsearch domain is configured.
     * 
     */
    public Output<String> elasticsearchAwsRegion() {
        return this.elasticsearchAwsRegion;
    }
    /**
     * AWS IAM secret access key.
     * 
     */
    @Export(name="elasticsearchAwsSecretAccessKey", refs={String.class}, tree="[0]")
    private Output<String> elasticsearchAwsSecretAccessKey;

    /**
     * @return AWS IAM secret access key.
     * 
     */
    public Output<String> elasticsearchAwsSecretAccessKey() {
        return this.elasticsearchAwsSecretAccessKey;
    }
    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     * 
     */
    @Export(name="elasticsearchIndexedFieldLengthLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> elasticsearchIndexedFieldLengthLimit;

    /**
     * @return Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     * 
     */
    public Output<Integer> elasticsearchIndexedFieldLengthLimit() {
        return this.elasticsearchIndexedFieldLengthLimit;
    }
    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     * 
     */
    @Export(name="elasticsearchIndexedFileSizeLimitKb", refs={Integer.class}, tree="[0]")
    private Output<Integer> elasticsearchIndexedFileSizeLimitKb;

    /**
     * @return Maximum size of repository and wiki files that are indexed by Elasticsearch.
     * 
     */
    public Output<Integer> elasticsearchIndexedFileSizeLimitKb() {
        return this.elasticsearchIndexedFileSizeLimitKb;
    }
    /**
     * Enable Elasticsearch indexing.
     * 
     */
    @Export(name="elasticsearchIndexing", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> elasticsearchIndexing;

    /**
     * @return Enable Elasticsearch indexing.
     * 
     */
    public Output<Boolean> elasticsearchIndexing() {
        return this.elasticsearchIndexing;
    }
    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     * 
     */
    @Export(name="elasticsearchLimitIndexing", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> elasticsearchLimitIndexing;

    /**
     * @return Limit Elasticsearch to index certain namespaces and projects.
     * 
     */
    public Output<Boolean> elasticsearchLimitIndexing() {
        return this.elasticsearchLimitIndexing;
    }
    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     * 
     */
    @Export(name="elasticsearchMaxBulkConcurrency", refs={Integer.class}, tree="[0]")
    private Output<Integer> elasticsearchMaxBulkConcurrency;

    /**
     * @return Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     * 
     */
    public Output<Integer> elasticsearchMaxBulkConcurrency() {
        return this.elasticsearchMaxBulkConcurrency;
    }
    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     * 
     */
    @Export(name="elasticsearchMaxBulkSizeMb", refs={Integer.class}, tree="[0]")
    private Output<Integer> elasticsearchMaxBulkSizeMb;

    /**
     * @return Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     * 
     */
    public Output<Integer> elasticsearchMaxBulkSizeMb() {
        return this.elasticsearchMaxBulkSizeMb;
    }
    /**
     * Maximum concurrency of Elasticsearch code indexing background jobs. This only applies to repository indexing operations. Premium and Ultimate only.
     * 
     */
    @Export(name="elasticsearchMaxCodeIndexingConcurrency", refs={Integer.class}, tree="[0]")
    private Output<Integer> elasticsearchMaxCodeIndexingConcurrency;

    /**
     * @return Maximum concurrency of Elasticsearch code indexing background jobs. This only applies to repository indexing operations. Premium and Ultimate only.
     * 
     */
    public Output<Integer> elasticsearchMaxCodeIndexingConcurrency() {
        return this.elasticsearchMaxCodeIndexingConcurrency;
    }
    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    @Export(name="elasticsearchNamespaceIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> elasticsearchNamespaceIds;

    /**
     * @return The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    public Output<List<Integer>> elasticsearchNamespaceIds() {
        return this.elasticsearchNamespaceIds;
    }
    /**
     * The password of your Elasticsearch instance.
     * 
     */
    @Export(name="elasticsearchPassword", refs={String.class}, tree="[0]")
    private Output<String> elasticsearchPassword;

    /**
     * @return The password of your Elasticsearch instance.
     * 
     */
    public Output<String> elasticsearchPassword() {
        return this.elasticsearchPassword;
    }
    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    @Export(name="elasticsearchProjectIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> elasticsearchProjectIds;

    /**
     * @return The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    public Output<List<Integer>> elasticsearchProjectIds() {
        return this.elasticsearchProjectIds;
    }
    /**
     * Enable automatic requeuing of indexing workers. This improves non-code indexing throughput by enqueuing Sidekiq jobs until all documents are processed. Premium and Ultimate only.
     * 
     */
    @Export(name="elasticsearchRequeueWorkers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> elasticsearchRequeueWorkers;

    /**
     * @return Enable automatic requeuing of indexing workers. This improves non-code indexing throughput by enqueuing Sidekiq jobs until all documents are processed. Premium and Ultimate only.
     * 
     */
    public Output<Boolean> elasticsearchRequeueWorkers() {
        return this.elasticsearchRequeueWorkers;
    }
    /**
     * Enable Elasticsearch search.
     * 
     */
    @Export(name="elasticsearchSearch", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> elasticsearchSearch;

    /**
     * @return Enable Elasticsearch search.
     * 
     */
    public Output<Boolean> elasticsearchSearch() {
        return this.elasticsearchSearch;
    }
    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     * 
     */
    @Export(name="elasticsearchUrls", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> elasticsearchUrls;

    /**
     * @return The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     * 
     */
    public Output<List<String>> elasticsearchUrls() {
        return this.elasticsearchUrls;
    }
    /**
     * The username of your Elasticsearch instance.
     * 
     */
    @Export(name="elasticsearchUsername", refs={String.class}, tree="[0]")
    private Output<String> elasticsearchUsername;

    /**
     * @return The username of your Elasticsearch instance.
     * 
     */
    public Output<String> elasticsearchUsername() {
        return this.elasticsearchUsername;
    }
    /**
     * Number of indexing worker shards. This improves non-code indexing throughput by enqueuing more parallel Sidekiq jobs. Premium and Ultimate only.
     * 
     */
    @Export(name="elasticsearchWorkerNumberOfShards", refs={Integer.class}, tree="[0]")
    private Output<Integer> elasticsearchWorkerNumberOfShards;

    /**
     * @return Number of indexing worker shards. This improves non-code indexing throughput by enqueuing more parallel Sidekiq jobs. Premium and Ultimate only.
     * 
     */
    public Output<Integer> elasticsearchWorkerNumberOfShards() {
        return this.elasticsearchWorkerNumberOfShards;
    }
    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     * 
     */
    @Export(name="emailAdditionalText", refs={String.class}, tree="[0]")
    private Output<String> emailAdditionalText;

    /**
     * @return Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     * 
     */
    public Output<String> emailAdditionalText() {
        return this.emailAdditionalText;
    }
    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     * 
     */
    @Export(name="emailAuthorInBody", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> emailAuthorInBody;

    /**
     * @return Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     * 
     */
    public Output<Boolean> emailAuthorInBody() {
        return this.emailAuthorInBody;
    }
    /**
     * Specifies whether users must confirm their email before sign in. Possible values are off, soft, and hard.
     * 
     */
    @Export(name="emailConfirmationSetting", refs={String.class}, tree="[0]")
    private Output<String> emailConfirmationSetting;

    /**
     * @return Specifies whether users must confirm their email before sign in. Possible values are off, soft, and hard.
     * 
     */
    public Output<String> emailConfirmationSetting() {
        return this.emailConfirmationSetting;
    }
    /**
     * Show the external redirect page that warns you about user-generated content in GitLab Pages.
     * 
     */
    @Export(name="enableArtifactExternalRedirectWarningPage", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableArtifactExternalRedirectWarningPage;

    /**
     * @return Show the external redirect page that warns you about user-generated content in GitLab Pages.
     * 
     */
    public Output<Boolean> enableArtifactExternalRedirectWarningPage() {
        return this.enableArtifactExternalRedirectWarningPage;
    }
    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     * 
     */
    @Export(name="enabledGitAccessProtocol", refs={String.class}, tree="[0]")
    private Output<String> enabledGitAccessProtocol;

    /**
     * @return Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     * 
     */
    public Output<String> enabledGitAccessProtocol() {
        return this.enabledGitAccessProtocol;
    }
    /**
     * Enabling this permits enforcement of namespace storage limits.
     * 
     */
    @Export(name="enforceNamespaceStorageLimit", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceNamespaceStorageLimit;

    /**
     * @return Enabling this permits enforcement of namespace storage limits.
     * 
     */
    public Output<Boolean> enforceNamespaceStorageLimit() {
        return this.enforceNamespaceStorageLimit;
    }
    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     * 
     */
    @Export(name="enforceTerms", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceTerms;

    /**
     * @return (If enabled, requires: terms) Enforce application ToS to all users.
     * 
     */
    public Output<Boolean> enforceTerms() {
        return this.enforceTerms;
    }
    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     * 
     */
    @Export(name="externalAuthClientCert", refs={String.class}, tree="[0]")
    private Output<String> externalAuthClientCert;

    /**
     * @return (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     * 
     */
    public Output<String> externalAuthClientCert() {
        return this.externalAuthClientCert;
    }
    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     * 
     */
    @Export(name="externalAuthClientKey", refs={String.class}, tree="[0]")
    private Output<String> externalAuthClientKey;

    /**
     * @return Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     * 
     */
    public Output<String> externalAuthClientKey() {
        return this.externalAuthClientKey;
    }
    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     * 
     */
    @Export(name="externalAuthClientKeyPass", refs={String.class}, tree="[0]")
    private Output<String> externalAuthClientKeyPass;

    /**
     * @return Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     * 
     */
    public Output<String> externalAuthClientKeyPass() {
        return this.externalAuthClientKeyPass;
    }
    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     * 
     */
    @Export(name="externalAuthorizationServiceDefaultLabel", refs={String.class}, tree="[0]")
    private Output<String> externalAuthorizationServiceDefaultLabel;

    /**
     * @return The default classification label to use when requesting authorization and no classification label has been specified on the project.
     * 
     */
    public Output<String> externalAuthorizationServiceDefaultLabel() {
        return this.externalAuthorizationServiceDefaultLabel;
    }
    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     * 
     */
    @Export(name="externalAuthorizationServiceEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> externalAuthorizationServiceEnabled;

    /**
     * @return (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     * 
     */
    public Output<Boolean> externalAuthorizationServiceEnabled() {
        return this.externalAuthorizationServiceEnabled;
    }
    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     * 
     */
    @Export(name="externalAuthorizationServiceTimeout", refs={Double.class}, tree="[0]")
    private Output<Double> externalAuthorizationServiceTimeout;

    /**
     * @return The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     * 
     */
    public Output<Double> externalAuthorizationServiceTimeout() {
        return this.externalAuthorizationServiceTimeout;
    }
    /**
     * URL to which authorization requests are directed.
     * 
     */
    @Export(name="externalAuthorizationServiceUrl", refs={String.class}, tree="[0]")
    private Output<String> externalAuthorizationServiceUrl;

    /**
     * @return URL to which authorization requests are directed.
     * 
     */
    public Output<String> externalAuthorizationServiceUrl() {
        return this.externalAuthorizationServiceUrl;
    }
    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     * 
     */
    @Export(name="externalPipelineValidationServiceTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> externalPipelineValidationServiceTimeout;

    /**
     * @return How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     * 
     */
    public Output<Integer> externalPipelineValidationServiceTimeout() {
        return this.externalPipelineValidationServiceTimeout;
    }
    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     * 
     */
    @Export(name="externalPipelineValidationServiceToken", refs={String.class}, tree="[0]")
    private Output<String> externalPipelineValidationServiceToken;

    /**
     * @return Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     * 
     */
    public Output<String> externalPipelineValidationServiceToken() {
        return this.externalPipelineValidationServiceToken;
    }
    /**
     * URL to use for pipeline validation requests.
     * 
     */
    @Export(name="externalPipelineValidationServiceUrl", refs={String.class}, tree="[0]")
    private Output<String> externalPipelineValidationServiceUrl;

    /**
     * @return URL to use for pipeline validation requests.
     * 
     */
    public Output<String> externalPipelineValidationServiceUrl() {
        return this.externalPipelineValidationServiceUrl;
    }
    /**
     * Time period in minutes after which the user is unlocked when maximum number of failed sign-in attempts reached.
     * 
     */
    @Export(name="failedLoginAttemptsUnlockPeriodInMinutes", refs={Integer.class}, tree="[0]")
    private Output<Integer> failedLoginAttemptsUnlockPeriodInMinutes;

    /**
     * @return Time period in minutes after which the user is unlocked when maximum number of failed sign-in attempts reached.
     * 
     */
    public Output<Integer> failedLoginAttemptsUnlockPeriodInMinutes() {
        return this.failedLoginAttemptsUnlockPeriodInMinutes;
    }
    /**
     * The ID of a project to load custom file templates from.
     * 
     */
    @Export(name="fileTemplateProjectId", refs={Integer.class}, tree="[0]")
    private Output<Integer> fileTemplateProjectId;

    /**
     * @return The ID of a project to load custom file templates from.
     * 
     */
    public Output<Integer> fileTemplateProjectId() {
        return this.fileTemplateProjectId;
    }
    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
     * 
     */
    @Export(name="firstDayOfWeek", refs={Integer.class}, tree="[0]")
    private Output<Integer> firstDayOfWeek;

    /**
     * @return Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
     * 
     */
    public Output<Integer> firstDayOfWeek() {
        return this.firstDayOfWeek;
    }
    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     * 
     */
    @Export(name="geoNodeAllowedIps", refs={String.class}, tree="[0]")
    private Output<String> geoNodeAllowedIps;

    /**
     * @return Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     * 
     */
    public Output<String> geoNodeAllowedIps() {
        return this.geoNodeAllowedIps;
    }
    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     * 
     */
    @Export(name="geoStatusTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> geoStatusTimeout;

    /**
     * @return The amount of seconds after which a request to get a secondary node status times out.
     * 
     */
    public Output<Integer> geoStatusTimeout() {
        return this.geoStatusTimeout;
    }
    /**
     * List of user IDs that are emailed when the Git abuse rate limit is exceeded. Maximum: 100 user IDs. Self-managed, Ultimate only.
     * 
     */
    @Export(name="gitRateLimitUsersAlertlists", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> gitRateLimitUsersAlertlists;

    /**
     * @return List of user IDs that are emailed when the Git abuse rate limit is exceeded. Maximum: 100 user IDs. Self-managed, Ultimate only.
     * 
     */
    public Output<List<Integer>> gitRateLimitUsersAlertlists() {
        return this.gitRateLimitUsersAlertlists;
    }
    /**
     * List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Self-managed, Ultimate only.
     * 
     */
    @Export(name="gitRateLimitUsersAllowlists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> gitRateLimitUsersAllowlists;

    /**
     * @return List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Self-managed, Ultimate only.
     * 
     */
    public Output<List<String>> gitRateLimitUsersAllowlists() {
        return this.gitRateLimitUsersAllowlists;
    }
    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     * 
     */
    @Export(name="gitTwoFactorSessionExpiry", refs={Integer.class}, tree="[0]")
    private Output<Integer> gitTwoFactorSessionExpiry;

    /**
     * @return Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     * 
     */
    public Output<Integer> gitTwoFactorSessionExpiry() {
        return this.gitTwoFactorSessionExpiry;
    }
    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     * 
     */
    @Export(name="gitalyTimeoutDefault", refs={Integer.class}, tree="[0]")
    private Output<Integer> gitalyTimeoutDefault;

    /**
     * @return Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     * 
     */
    public Output<Integer> gitalyTimeoutDefault() {
        return this.gitalyTimeoutDefault;
    }
    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     * 
     */
    @Export(name="gitalyTimeoutFast", refs={Integer.class}, tree="[0]")
    private Output<Integer> gitalyTimeoutFast;

    /**
     * @return Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     * 
     */
    public Output<Integer> gitalyTimeoutFast() {
        return this.gitalyTimeoutFast;
    }
    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     * 
     */
    @Export(name="gitalyTimeoutMedium", refs={Integer.class}, tree="[0]")
    private Output<Integer> gitalyTimeoutMedium;

    /**
     * @return Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     * 
     */
    public Output<Integer> gitalyTimeoutMedium() {
        return this.gitalyTimeoutMedium;
    }
    /**
     * Indicates whether the instance was provisioned for GitLab Dedicated.
     * 
     */
    @Export(name="gitlabDedicatedInstance", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> gitlabDedicatedInstance;

    /**
     * @return Indicates whether the instance was provisioned for GitLab Dedicated.
     * 
     */
    public Output<Boolean> gitlabDedicatedInstance() {
        return this.gitlabDedicatedInstance;
    }
    /**
     * Indicates whether the instance was provisioned with the GitLab Environment Toolkit for Service Ping reporting.
     * 
     */
    @Export(name="gitlabEnvironmentToolkitInstance", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> gitlabEnvironmentToolkitInstance;

    /**
     * @return Indicates whether the instance was provisioned with the GitLab Environment Toolkit for Service Ping reporting.
     * 
     */
    public Output<Boolean> gitlabEnvironmentToolkitInstance() {
        return this.gitlabEnvironmentToolkitInstance;
    }
    /**
     * Maximum number of Git operations per minute a user can perform.
     * 
     */
    @Export(name="gitlabShellOperationLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> gitlabShellOperationLimit;

    /**
     * @return Maximum number of Git operations per minute a user can perform.
     * 
     */
    public Output<Integer> gitlabShellOperationLimit() {
        return this.gitlabShellOperationLimit;
    }
    /**
     * Enable Gitpod integration.
     * 
     */
    @Export(name="gitpodEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> gitpodEnabled;

    /**
     * @return Enable Gitpod integration.
     * 
     */
    public Output<Boolean> gitpodEnabled() {
        return this.gitpodEnabled;
    }
    /**
     * The Gitpod instance URL for integration.
     * 
     */
    @Export(name="gitpodUrl", refs={String.class}, tree="[0]")
    private Output<String> gitpodUrl;

    /**
     * @return The Gitpod instance URL for integration.
     * 
     */
    public Output<String> gitpodUrl() {
        return this.gitpodUrl;
    }
    /**
     * Comma-separated list of IP addresses and CIDRs always allowed for inbound traffic. For example, 1.1.1.1, 2.2.2.0/24.
     * 
     */
    @Export(name="globallyAllowedIps", refs={String.class}, tree="[0]")
    private Output<String> globallyAllowedIps;

    /**
     * @return Comma-separated list of IP addresses and CIDRs always allowed for inbound traffic. For example, 1.1.1.1, 2.2.2.0/24.
     * 
     */
    public Output<String> globallyAllowedIps() {
        return this.globallyAllowedIps;
    }
    /**
     * Enable Grafana.
     * 
     */
    @Export(name="grafanaEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> grafanaEnabled;

    /**
     * @return Enable Grafana.
     * 
     */
    public Output<Boolean> grafanaEnabled() {
        return this.grafanaEnabled;
    }
    /**
     * Grafana URL.
     * 
     */
    @Export(name="grafanaUrl", refs={String.class}, tree="[0]")
    private Output<String> grafanaUrl;

    /**
     * @return Grafana URL.
     * 
     */
    public Output<String> grafanaUrl() {
        return this.grafanaUrl;
    }
    /**
     * Enable Gravatar.
     * 
     */
    @Export(name="gravatarEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> gravatarEnabled;

    /**
     * @return Enable Gravatar.
     * 
     */
    public Output<Boolean> gravatarEnabled() {
        return this.gravatarEnabled;
    }
    /**
     * Prevent overrides of default branch protection.
     * 
     */
    @Export(name="groupOwnersCanManageDefaultBranchProtection", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> groupOwnersCanManageDefaultBranchProtection;

    /**
     * @return Prevent overrides of default branch protection.
     * 
     */
    public Output<Boolean> groupOwnersCanManageDefaultBranchProtection() {
        return this.groupOwnersCanManageDefaultBranchProtection;
    }
    /**
     * Hide marketing-related entries from help.
     * 
     */
    @Export(name="helpPageHideCommercialContent", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> helpPageHideCommercialContent;

    /**
     * @return Hide marketing-related entries from help.
     * 
     */
    public Output<Boolean> helpPageHideCommercialContent() {
        return this.helpPageHideCommercialContent;
    }
    /**
     * Alternate support URL for help page and help dropdown.
     * 
     */
    @Export(name="helpPageSupportUrl", refs={String.class}, tree="[0]")
    private Output<String> helpPageSupportUrl;

    /**
     * @return Alternate support URL for help page and help dropdown.
     * 
     */
    public Output<String> helpPageSupportUrl() {
        return this.helpPageSupportUrl;
    }
    /**
     * Custom text displayed on the help page.
     * 
     */
    @Export(name="helpPageText", refs={String.class}, tree="[0]")
    private Output<String> helpPageText;

    /**
     * @return Custom text displayed on the help page.
     * 
     */
    public Output<String> helpPageText() {
        return this.helpPageText;
    }
    /**
     * GitLab server administrator information.
     * 
     */
    @Export(name="helpText", refs={String.class}, tree="[0]")
    private Output<String> helpText;

    /**
     * @return GitLab server administrator information.
     * 
     */
    public Output<String> helpText() {
        return this.helpText;
    }
    /**
     * Do not display offers from third parties in GitLab.
     * 
     */
    @Export(name="hideThirdPartyOffers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> hideThirdPartyOffers;

    /**
     * @return Do not display offers from third parties in GitLab.
     * 
     */
    public Output<Boolean> hideThirdPartyOffers() {
        return this.hideThirdPartyOffers;
    }
    /**
     * Redirect to this URL when not logged in.
     * 
     */
    @Export(name="homePageUrl", refs={String.class}, tree="[0]")
    private Output<String> homePageUrl;

    /**
     * @return Redirect to this URL when not logged in.
     * 
     */
    public Output<String> homePageUrl() {
        return this.homePageUrl;
    }
    /**
     * Enable or disable Git housekeeping. If enabled, requires housekeeping*optimize*repository_period.
     * 
     */
    @Export(name="housekeepingEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> housekeepingEnabled;

    /**
     * @return Enable or disable Git housekeeping. If enabled, requires housekeeping*optimize*repository_period.
     * 
     */
    public Output<Boolean> housekeepingEnabled() {
        return this.housekeepingEnabled;
    }
    /**
     * Number of Git pushes after which an incremental git-repack is run.
     * 
     */
    @Export(name="housekeepingOptimizeRepositoryPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> housekeepingOptimizeRepositoryPeriod;

    /**
     * @return Number of Git pushes after which an incremental git-repack is run.
     * 
     */
    public Output<Integer> housekeepingOptimizeRepositoryPeriod() {
        return this.housekeepingOptimizeRepositoryPeriod;
    }
    /**
     * Enable HTML emails.
     * 
     */
    @Export(name="htmlEmailsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> htmlEmailsEnabled;

    /**
     * @return Enable HTML emails.
     * 
     */
    public Output<Boolean> htmlEmailsEnabled() {
        return this.htmlEmailsEnabled;
    }
    /**
     * Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `gitlab.Project`, `gitea`, `manifest`
     * 
     */
    @Export(name="importSources", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> importSources;

    /**
     * @return Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `gitlab.Project`, `gitea`, `manifest`
     * 
     */
    public Output<List<String>> importSources() {
        return this.importSources;
    }
    /**
     * Enable in-product marketing emails.
     * 
     */
    @Export(name="inProductMarketingEmailsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> inProductMarketingEmailsEnabled;

    /**
     * @return Enable in-product marketing emails.
     * 
     */
    public Output<Boolean> inProductMarketingEmailsEnabled() {
        return this.inProductMarketingEmailsEnabled;
    }
    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects.
     * 
     */
    @Export(name="inactiveProjectsDeleteAfterMonths", refs={Integer.class}, tree="[0]")
    private Output<Integer> inactiveProjectsDeleteAfterMonths;

    /**
     * @return If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects.
     * 
     */
    public Output<Integer> inactiveProjectsDeleteAfterMonths() {
        return this.inactiveProjectsDeleteAfterMonths;
    }
    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity.
     * 
     */
    @Export(name="inactiveProjectsMinSizeMb", refs={Integer.class}, tree="[0]")
    private Output<Integer> inactiveProjectsMinSizeMb;

    /**
     * @return If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity.
     * 
     */
    public Output<Integer> inactiveProjectsMinSizeMb() {
        return this.inactiveProjectsMinSizeMb;
    }
    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive.
     * 
     */
    @Export(name="inactiveProjectsSendWarningEmailAfterMonths", refs={Integer.class}, tree="[0]")
    private Output<Integer> inactiveProjectsSendWarningEmailAfterMonths;

    /**
     * @return If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive.
     * 
     */
    public Output<Integer> inactiveProjectsSendWarningEmailAfterMonths() {
        return this.inactiveProjectsSendWarningEmailAfterMonths;
    }
    /**
     * Whether or not optional metrics are enabled in Service Ping.
     * 
     */
    @Export(name="includeOptionalMetricsInServicePing", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> includeOptionalMetricsInServicePing;

    /**
     * @return Whether or not optional metrics are enabled in Service Ping.
     * 
     */
    public Output<Boolean> includeOptionalMetricsInServicePing() {
        return this.includeOptionalMetricsInServicePing;
    }
    /**
     * Enable Invisible CAPTCHA spam detection during sign-up.
     * 
     */
    @Export(name="invisibleCaptchaEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> invisibleCaptchaEnabled;

    /**
     * @return Enable Invisible CAPTCHA spam detection during sign-up.
     * 
     */
    public Output<Boolean> invisibleCaptchaEnabled() {
        return this.invisibleCaptchaEnabled;
    }
    /**
     * Max number of issue creation requests per minute per user.
     * 
     */
    @Export(name="issuesCreateLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> issuesCreateLimit;

    /**
     * @return Max number of issue creation requests per minute per user.
     * 
     */
    public Output<Integer> issuesCreateLimit() {
        return this.issuesCreateLimit;
    }
    /**
     * ID of the OAuth application used to authenticate with the GitLab for Jira Cloud app.
     * 
     */
    @Export(name="jiraConnectApplicationKey", refs={String.class}, tree="[0]")
    private Output<String> jiraConnectApplicationKey;

    /**
     * @return ID of the OAuth application used to authenticate with the GitLab for Jira Cloud app.
     * 
     */
    public Output<String> jiraConnectApplicationKey() {
        return this.jiraConnectApplicationKey;
    }
    /**
     * URL of the GitLab instance used as a proxy for the GitLab for Jira Cloud app.
     * 
     */
    @Export(name="jiraConnectProxyUrl", refs={String.class}, tree="[0]")
    private Output<String> jiraConnectProxyUrl;

    /**
     * @return URL of the GitLab instance used as a proxy for the GitLab for Jira Cloud app.
     * 
     */
    public Output<String> jiraConnectProxyUrl() {
        return this.jiraConnectProxyUrl;
    }
    /**
     * Enable public key storage for the GitLab for Jira Cloud app.
     * 
     */
    @Export(name="jiraConnectPublicKeyStorageEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> jiraConnectPublicKeyStorageEnabled;

    /**
     * @return Enable public key storage for the GitLab for Jira Cloud app.
     * 
     */
    public Output<Boolean> jiraConnectPublicKeyStorageEnabled() {
        return this.jiraConnectPublicKeyStorageEnabled;
    }
    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
     * 
     */
    @Export(name="keepLatestArtifact", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> keepLatestArtifact;

    /**
     * @return Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
     * 
     */
    public Output<Boolean> keepLatestArtifact() {
        return this.keepLatestArtifact;
    }
    /**
     * Increase this value when any cached Markdown should be invalidated.
     * 
     */
    @Export(name="localMarkdownVersion", refs={Integer.class}, tree="[0]")
    private Output<Integer> localMarkdownVersion;

    /**
     * @return Increase this value when any cached Markdown should be invalidated.
     * 
     */
    public Output<Integer> localMarkdownVersion() {
        return this.localMarkdownVersion;
    }
    /**
     * Indicates whether the GitLab Duo features enabled setting is enforced for all subgroups. Self-managed, Premium and Ultimate only.
     * 
     */
    @Export(name="lockDuoFeaturesEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> lockDuoFeaturesEnabled;

    /**
     * @return Indicates whether the GitLab Duo features enabled setting is enforced for all subgroups. Self-managed, Premium and Ultimate only.
     * 
     */
    public Output<Boolean> lockDuoFeaturesEnabled() {
        return this.lockDuoFeaturesEnabled;
    }
    /**
     * Set to true to lock all memberships to LDAP. Premium and Ultimate only.
     * 
     */
    @Export(name="lockMembershipsToLdap", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> lockMembershipsToLdap;

    /**
     * @return Set to true to lock all memberships to LDAP. Premium and Ultimate only.
     * 
     */
    public Output<Boolean> lockMembershipsToLdap() {
        return this.lockMembershipsToLdap;
    }
    /**
     * Enable Mailgun event receiver.
     * 
     */
    @Export(name="mailgunEventsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> mailgunEventsEnabled;

    /**
     * @return Enable Mailgun event receiver.
     * 
     */
    public Output<Boolean> mailgunEventsEnabled() {
        return this.mailgunEventsEnabled;
    }
    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     * 
     */
    @Export(name="mailgunSigningKey", refs={String.class}, tree="[0]")
    private Output<String> mailgunSigningKey;

    /**
     * @return The Mailgun HTTP webhook signing key for receiving events from webhook.
     * 
     */
    public Output<String> mailgunSigningKey() {
        return this.mailgunSigningKey;
    }
    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     * 
     */
    @Export(name="maintenanceMode", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> maintenanceMode;

    /**
     * @return When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     * 
     */
    public Output<Boolean> maintenanceMode() {
        return this.maintenanceMode;
    }
    /**
     * Message displayed when instance is in maintenance mode.
     * 
     */
    @Export(name="maintenanceModeMessage", refs={String.class}, tree="[0]")
    private Output<String> maintenanceModeMessage;

    /**
     * @return Message displayed when instance is in maintenance mode.
     * 
     */
    public Output<String> maintenanceModeMessage() {
        return this.maintenanceModeMessage;
    }
    /**
     * Use repo.maven.apache.org as a default remote repository when the package is not found in the GitLab Package Registry for Maven. Premium and Ultimate only.
     * 
     */
    @Export(name="mavenPackageRequestsForwarding", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> mavenPackageRequestsForwarding;

    /**
     * @return Use repo.maven.apache.org as a default remote repository when the package is not found in the GitLab Package Registry for Maven. Premium and Ultimate only.
     * 
     */
    public Output<Boolean> mavenPackageRequestsForwarding() {
        return this.mavenPackageRequestsForwarding;
    }
    /**
     * Maximum artifacts size in MB.
     * 
     */
    @Export(name="maxArtifactsSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxArtifactsSize;

    /**
     * @return Maximum artifacts size in MB.
     * 
     */
    public Output<Integer> maxArtifactsSize() {
        return this.maxArtifactsSize;
    }
    /**
     * Limit attachment size in MB.
     * 
     */
    @Export(name="maxAttachmentSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxAttachmentSize;

    /**
     * @return Limit attachment size in MB.
     * 
     */
    public Output<Integer> maxAttachmentSize() {
        return this.maxAttachmentSize;
    }
    /**
     * Maximum decompressed archive size in bytes.
     * 
     */
    @Export(name="maxDecompressedArchiveSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxDecompressedArchiveSize;

    /**
     * @return Maximum decompressed archive size in bytes.
     * 
     */
    public Output<Integer> maxDecompressedArchiveSize() {
        return this.maxDecompressedArchiveSize;
    }
    /**
     * Maximum export size in MB. 0 for unlimited.
     * 
     */
    @Export(name="maxExportSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxExportSize;

    /**
     * @return Maximum export size in MB. 0 for unlimited.
     * 
     */
    public Output<Integer> maxExportSize() {
        return this.maxExportSize;
    }
    /**
     * Maximum remote file size for imports from external object storages.
     * 
     */
    @Export(name="maxImportRemoteFileSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxImportRemoteFileSize;

    /**
     * @return Maximum remote file size for imports from external object storages.
     * 
     */
    public Output<Integer> maxImportRemoteFileSize() {
        return this.maxImportRemoteFileSize;
    }
    /**
     * Maximum import size in MB. 0 for unlimited.
     * 
     */
    @Export(name="maxImportSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxImportSize;

    /**
     * @return Maximum import size in MB. 0 for unlimited.
     * 
     */
    public Output<Integer> maxImportSize() {
        return this.maxImportSize;
    }
    /**
     * Maximum number of sign-in attempts before locking out the user.
     * 
     */
    @Export(name="maxLoginAttempts", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxLoginAttempts;

    /**
     * @return Maximum number of sign-in attempts before locking out the user.
     * 
     */
    public Output<Integer> maxLoginAttempts() {
        return this.maxLoginAttempts;
    }
    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories.
     * 
     */
    @Export(name="maxNumberOfRepositoryDownloads", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxNumberOfRepositoryDownloads;

    /**
     * @return Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories.
     * 
     */
    public Output<Integer> maxNumberOfRepositoryDownloads() {
        return this.maxNumberOfRepositoryDownloads;
    }
    /**
     * Reporting time period (in seconds). Maximum: 864000 seconds (10 days).
     * 
     */
    @Export(name="maxNumberOfRepositoryDownloadsWithinTimePeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxNumberOfRepositoryDownloadsWithinTimePeriod;

    /**
     * @return Reporting time period (in seconds). Maximum: 864000 seconds (10 days).
     * 
     */
    public Output<Integer> maxNumberOfRepositoryDownloadsWithinTimePeriod() {
        return this.maxNumberOfRepositoryDownloadsWithinTimePeriod;
    }
    /**
     * Maximum size of pages repositories in MB.
     * 
     */
    @Export(name="maxPagesSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxPagesSize;

    /**
     * @return Maximum size of pages repositories in MB.
     * 
     */
    public Output<Integer> maxPagesSize() {
        return this.maxPagesSize;
    }
    /**
     * Maximum allowable lifetime for access tokens in days.
     * 
     */
    @Export(name="maxPersonalAccessTokenLifetime", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxPersonalAccessTokenLifetime;

    /**
     * @return Maximum allowable lifetime for access tokens in days.
     * 
     */
    public Output<Integer> maxPersonalAccessTokenLifetime() {
        return this.maxPersonalAccessTokenLifetime;
    }
    /**
     * Maximum allowable lifetime for SSH keys in days.
     * 
     */
    @Export(name="maxSshKeyLifetime", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxSshKeyLifetime;

    /**
     * @return Maximum allowable lifetime for SSH keys in days.
     * 
     */
    public Output<Integer> maxSshKeyLifetime() {
        return this.maxSshKeyLifetime;
    }
    @Export(name="maxTerraformStateSizeBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxTerraformStateSizeBytes;

    public Output<Integer> maxTerraformStateSizeBytes() {
        return this.maxTerraformStateSizeBytes;
    }
    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     * 
     */
    @Export(name="metricsMethodCallThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> metricsMethodCallThreshold;

    /**
     * @return A method call is only tracked when it takes longer than the given amount of milliseconds.
     * 
     */
    public Output<Integer> metricsMethodCallThreshold() {
        return this.metricsMethodCallThreshold;
    }
    /**
     * Indicates whether passwords require a minimum length. Premium and Ultimate only.
     * 
     */
    @Export(name="minimumPasswordLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> minimumPasswordLength;

    /**
     * @return Indicates whether passwords require a minimum length. Premium and Ultimate only.
     * 
     */
    public Output<Integer> minimumPasswordLength() {
        return this.minimumPasswordLength;
    }
    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     * 
     */
    @Export(name="mirrorAvailable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> mirrorAvailable;

    /**
     * @return Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     * 
     */
    public Output<Boolean> mirrorAvailable() {
        return this.mirrorAvailable;
    }
    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     * 
     */
    @Export(name="mirrorCapacityThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> mirrorCapacityThreshold;

    /**
     * @return Minimum capacity to be available before scheduling more mirrors preemptively.
     * 
     */
    public Output<Integer> mirrorCapacityThreshold() {
        return this.mirrorCapacityThreshold;
    }
    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     * 
     */
    @Export(name="mirrorMaxCapacity", refs={Integer.class}, tree="[0]")
    private Output<Integer> mirrorMaxCapacity;

    /**
     * @return Maximum number of mirrors that can be synchronizing at the same time.
     * 
     */
    public Output<Integer> mirrorMaxCapacity() {
        return this.mirrorMaxCapacity;
    }
    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     * 
     */
    @Export(name="mirrorMaxDelay", refs={Integer.class}, tree="[0]")
    private Output<Integer> mirrorMaxDelay;

    /**
     * @return Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     * 
     */
    public Output<Integer> mirrorMaxDelay() {
        return this.mirrorMaxDelay;
    }
    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     * 
     */
    @Export(name="npmPackageRequestsForwarding", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> npmPackageRequestsForwarding;

    /**
     * @return Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     * 
     */
    public Output<Boolean> npmPackageRequestsForwarding() {
        return this.npmPackageRequestsForwarding;
    }
    /**
     * Indicates whether to skip metadata URL validation for the NuGet package.
     * 
     */
    @Export(name="nugetSkipMetadataUrlValidation", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> nugetSkipMetadataUrlValidation;

    /**
     * @return Indicates whether to skip metadata URL validation for the NuGet package.
     * 
     */
    public Output<Boolean> nugetSkipMetadataUrlValidation() {
        return this.nugetSkipMetadataUrlValidation;
    }
    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     * 
     */
    @Export(name="outboundLocalRequestsWhitelists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> outboundLocalRequestsWhitelists;

    /**
     * @return Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     * 
     */
    public Output<List<String>> outboundLocalRequestsWhitelists() {
        return this.outboundLocalRequestsWhitelists;
    }
    /**
     * List of package registry metadata to sync. See the list of the available values (https://gitlab.com/gitlab-org/gitlab/-/blob/ace16c20d5da7c4928dd03fb139692638b557fe3/app/models/concerns/enums/package_metadata.rb#L5). Self-managed, Ultimate only.
     * 
     */
    @Export(name="packageMetadataPurlTypes", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> packageMetadataPurlTypes;

    /**
     * @return List of package registry metadata to sync. See the list of the available values (https://gitlab.com/gitlab-org/gitlab/-/blob/ace16c20d5da7c4928dd03fb139692638b557fe3/app/models/concerns/enums/package_metadata.rb#L5). Self-managed, Ultimate only.
     * 
     */
    public Output<List<Integer>> packageMetadataPurlTypes() {
        return this.packageMetadataPurlTypes;
    }
    /**
     * Enable to allow anyone to pull from Package Registry visible and changeable.
     * 
     */
    @Export(name="packageRegistryAllowAnyoneToPullOption", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> packageRegistryAllowAnyoneToPullOption;

    /**
     * @return Enable to allow anyone to pull from Package Registry visible and changeable.
     * 
     */
    public Output<Boolean> packageRegistryAllowAnyoneToPullOption() {
        return this.packageRegistryAllowAnyoneToPullOption;
    }
    /**
     * Number of workers assigned to the packages cleanup policies.
     * 
     */
    @Export(name="packageRegistryCleanupPoliciesWorkerCapacity", refs={Integer.class}, tree="[0]")
    private Output<Integer> packageRegistryCleanupPoliciesWorkerCapacity;

    /**
     * @return Number of workers assigned to the packages cleanup policies.
     * 
     */
    public Output<Integer> packageRegistryCleanupPoliciesWorkerCapacity() {
        return this.packageRegistryCleanupPoliciesWorkerCapacity;
    }
    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     * 
     */
    @Export(name="pagesDomainVerificationEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> pagesDomainVerificationEnabled;

    /**
     * @return Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     * 
     */
    public Output<Boolean> pagesDomainVerificationEnabled() {
        return this.pagesDomainVerificationEnabled;
    }
    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password.
     * 
     */
    @Export(name="passwordAuthenticationEnabledForGit", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> passwordAuthenticationEnabledForGit;

    /**
     * @return Enable authentication for Git over HTTP(S) via a GitLab account password.
     * 
     */
    public Output<Boolean> passwordAuthenticationEnabledForGit() {
        return this.passwordAuthenticationEnabledForGit;
    }
    /**
     * Enable authentication for the web interface via a GitLab account password.
     * 
     */
    @Export(name="passwordAuthenticationEnabledForWeb", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> passwordAuthenticationEnabledForWeb;

    /**
     * @return Enable authentication for the web interface via a GitLab account password.
     * 
     */
    public Output<Boolean> passwordAuthenticationEnabledForWeb() {
        return this.passwordAuthenticationEnabledForWeb;
    }
    /**
     * Indicates whether passwords require at least one lowercase letter.
     * 
     */
    @Export(name="passwordLowercaseRequired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> passwordLowercaseRequired;

    /**
     * @return Indicates whether passwords require at least one lowercase letter.
     * 
     */
    public Output<Boolean> passwordLowercaseRequired() {
        return this.passwordLowercaseRequired;
    }
    /**
     * Indicates whether passwords require at least one number.
     * 
     */
    @Export(name="passwordNumberRequired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> passwordNumberRequired;

    /**
     * @return Indicates whether passwords require at least one number.
     * 
     */
    public Output<Boolean> passwordNumberRequired() {
        return this.passwordNumberRequired;
    }
    /**
     * Indicates whether passwords require at least one symbol character.
     * 
     */
    @Export(name="passwordSymbolRequired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> passwordSymbolRequired;

    /**
     * @return Indicates whether passwords require at least one symbol character.
     * 
     */
    public Output<Boolean> passwordSymbolRequired() {
        return this.passwordSymbolRequired;
    }
    /**
     * Indicates whether passwords require at least one uppercase letter.
     * 
     */
    @Export(name="passwordUppercaseRequired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> passwordUppercaseRequired;

    /**
     * @return Indicates whether passwords require at least one uppercase letter.
     * 
     */
    public Output<Boolean> passwordUppercaseRequired() {
        return this.passwordUppercaseRequired;
    }
    /**
     * Path of the group that is allowed to toggle the performance bar.
     * 
     */
    @Export(name="performanceBarAllowedGroupPath", refs={String.class}, tree="[0]")
    private Output<String> performanceBarAllowedGroupPath;

    /**
     * @return Path of the group that is allowed to toggle the performance bar.
     * 
     */
    public Output<String> performanceBarAllowedGroupPath() {
        return this.performanceBarAllowedGroupPath;
    }
    /**
     * Prefix for all generated personal access tokens.
     * 
     */
    @Export(name="personalAccessTokenPrefix", refs={String.class}, tree="[0]")
    private Output<String> personalAccessTokenPrefix;

    /**
     * @return Prefix for all generated personal access tokens.
     * 
     */
    public Output<String> personalAccessTokenPrefix() {
        return this.personalAccessTokenPrefix;
    }
    /**
     * Maximum number of pipeline creation requests per minute per user and commit.
     * 
     */
    @Export(name="pipelineLimitPerProjectUserSha", refs={Integer.class}, tree="[0]")
    private Output<Integer> pipelineLimitPerProjectUserSha;

    /**
     * @return Maximum number of pipeline creation requests per minute per user and commit.
     * 
     */
    public Output<Integer> pipelineLimitPerProjectUserSha() {
        return this.pipelineLimitPerProjectUserSha;
    }
    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration.
     * 
     */
    @Export(name="plantumlEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> plantumlEnabled;

    /**
     * @return (If enabled, requires: plantuml_url) Enable PlantUML integration.
     * 
     */
    public Output<Boolean> plantumlEnabled() {
        return this.plantumlEnabled;
    }
    /**
     * The PlantUML instance URL for integration.
     * 
     */
    @Export(name="plantumlUrl", refs={String.class}, tree="[0]")
    private Output<String> plantumlUrl;

    /**
     * @return The PlantUML instance URL for integration.
     * 
     */
    public Output<String> plantumlUrl() {
        return this.plantumlUrl;
    }
    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     * 
     */
    @Export(name="pollingIntervalMultiplier", refs={Double.class}, tree="[0]")
    private Output<Double> pollingIntervalMultiplier;

    /**
     * @return Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     * 
     */
    public Output<Double> pollingIntervalMultiplier() {
        return this.pollingIntervalMultiplier;
    }
    /**
     * Enable project export.
     * 
     */
    @Export(name="projectExportEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> projectExportEnabled;

    /**
     * @return Enable project export.
     * 
     */
    public Output<Boolean> projectExportEnabled() {
        return this.projectExportEnabled;
    }
    /**
     * Maximum authenticated requests to /project/:id/jobs per minute.
     * 
     */
    @Export(name="projectJobsApiRateLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectJobsApiRateLimit;

    /**
     * @return Maximum authenticated requests to /project/:id/jobs per minute.
     * 
     */
    public Output<Integer> projectJobsApiRateLimit() {
        return this.projectJobsApiRateLimit;
    }
    /**
     * Max number of requests per 10 minutes per IP address for unauthenticated requests to the list all projects API. To disable throttling set to 0.
     * 
     */
    @Export(name="projectsApiRateLimitUnauthenticated", refs={Integer.class}, tree="[0]")
    private Output<Integer> projectsApiRateLimitUnauthenticated;

    /**
     * @return Max number of requests per 10 minutes per IP address for unauthenticated requests to the list all projects API. To disable throttling set to 0.
     * 
     */
    public Output<Integer> projectsApiRateLimitUnauthenticated() {
        return this.projectsApiRateLimitUnauthenticated;
    }
    /**
     * Enable Prometheus metrics.
     * 
     */
    @Export(name="prometheusMetricsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> prometheusMetricsEnabled;

    /**
     * @return Enable Prometheus metrics.
     * 
     */
    public Output<Boolean> prometheusMetricsEnabled() {
        return this.prometheusMetricsEnabled;
    }
    /**
     * CI/CD variables are protected by default.
     * 
     */
    @Export(name="protectedCiVariables", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> protectedCiVariables;

    /**
     * @return CI/CD variables are protected by default.
     * 
     */
    public Output<Boolean> protectedCiVariables() {
        return this.protectedCiVariables;
    }
    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     * 
     */
    @Export(name="pushEventActivitiesLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> pushEventActivitiesLimit;

    /**
     * @return Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     * 
     */
    public Output<Integer> pushEventActivitiesLimit() {
        return this.pushEventActivitiesLimit;
    }
    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     * 
     */
    @Export(name="pushEventHooksLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> pushEventHooksLimit;

    /**
     * @return Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     * 
     */
    public Output<Integer> pushEventHooksLimit() {
        return this.pushEventHooksLimit;
    }
    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     * 
     */
    @Export(name="pypiPackageRequestsForwarding", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> pypiPackageRequestsForwarding;

    /**
     * @return Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     * 
     */
    public Output<Boolean> pypiPackageRequestsForwarding() {
        return this.pypiPackageRequestsForwarding;
    }
    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     * 
     */
    @Export(name="rateLimitingResponseText", refs={String.class}, tree="[0]")
    private Output<String> rateLimitingResponseText;

    /**
     * @return When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     * 
     */
    public Output<String> rateLimitingResponseText() {
        return this.rateLimitingResponseText;
    }
    /**
     * Max number of requests per minute for each raw path. To disable throttling set to 0.
     * 
     */
    @Export(name="rawBlobRequestLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> rawBlobRequestLimit;

    /**
     * @return Max number of requests per minute for each raw path. To disable throttling set to 0.
     * 
     */
    public Output<Integer> rawBlobRequestLimit() {
        return this.rawBlobRequestLimit;
    }
    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     * 
     */
    @Export(name="recaptchaEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> recaptchaEnabled;

    /**
     * @return (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     * 
     */
    public Output<Boolean> recaptchaEnabled() {
        return this.recaptchaEnabled;
    }
    /**
     * Private key for reCAPTCHA.
     * 
     */
    @Export(name="recaptchaPrivateKey", refs={String.class}, tree="[0]")
    private Output<String> recaptchaPrivateKey;

    /**
     * @return Private key for reCAPTCHA.
     * 
     */
    public Output<String> recaptchaPrivateKey() {
        return this.recaptchaPrivateKey;
    }
    /**
     * Site key for reCAPTCHA.
     * 
     */
    @Export(name="recaptchaSiteKey", refs={String.class}, tree="[0]")
    private Output<String> recaptchaSiteKey;

    /**
     * @return Site key for reCAPTCHA.
     * 
     */
    public Output<String> recaptchaSiteKey() {
        return this.recaptchaSiteKey;
    }
    /**
     * Maximum push size (MB).
     * 
     */
    @Export(name="receiveMaxInputSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> receiveMaxInputSize;

    /**
     * @return Maximum push size (MB).
     * 
     */
    public Output<Integer> receiveMaxInputSize() {
        return this.receiveMaxInputSize;
    }
    /**
     * Enable receptive mode for GitLab Agents for Kubernetes.
     * 
     */
    @Export(name="receptiveClusterAgentsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> receptiveClusterAgentsEnabled;

    /**
     * @return Enable receptive mode for GitLab Agents for Kubernetes.
     * 
     */
    public Output<Boolean> receptiveClusterAgentsEnabled() {
        return this.receptiveClusterAgentsEnabled;
    }
    /**
     * Enable Remember me setting.
     * 
     */
    @Export(name="rememberMeEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> rememberMeEnabled;

    /**
     * @return Enable Remember me setting.
     * 
     */
    public Output<Boolean> rememberMeEnabled() {
        return this.rememberMeEnabled;
    }
    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     * 
     */
    @Export(name="repositoryChecksEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> repositoryChecksEnabled;

    /**
     * @return GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     * 
     */
    public Output<Boolean> repositoryChecksEnabled() {
        return this.repositoryChecksEnabled;
    }
    /**
     * Size limit per repository (MB).
     * 
     */
    @Export(name="repositorySizeLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> repositorySizeLimit;

    /**
     * @return Size limit per repository (MB).
     * 
     */
    public Output<Integer> repositorySizeLimit() {
        return this.repositorySizeLimit;
    }
    /**
     * Hash of names taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     * 
     */
    @Export(name="repositoryStoragesWeighted", refs={Map.class,String.class,Integer.class}, tree="[0,1,2]")
    private Output<Map<String,Integer>> repositoryStoragesWeighted;

    /**
     * @return Hash of names taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     * 
     */
    public Output<Map<String,Integer>> repositoryStoragesWeighted() {
        return this.repositoryStoragesWeighted;
    }
    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     * 
     */
    @Export(name="requireAdminApprovalAfterUserSignup", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> requireAdminApprovalAfterUserSignup;

    /**
     * @return When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     * 
     */
    public Output<Boolean> requireAdminApprovalAfterUserSignup() {
        return this.requireAdminApprovalAfterUserSignup;
    }
    /**
     * Allow administrators to require 2FA for all administrators on the instance.
     * 
     */
    @Export(name="requireAdminTwoFactorAuthentication", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> requireAdminTwoFactorAuthentication;

    /**
     * @return Allow administrators to require 2FA for all administrators on the instance.
     * 
     */
    public Output<Boolean> requireAdminTwoFactorAuthentication() {
        return this.requireAdminTwoFactorAuthentication;
    }
    /**
     * When enabled, users must set an expiration date when creating a group or project access token, or a personal access token owned by a non-service account.
     * 
     */
    @Export(name="requirePersonalAccessTokenExpiry", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> requirePersonalAccessTokenExpiry;

    /**
     * @return When enabled, users must set an expiration date when creating a group or project access token, or a personal access token owned by a non-service account.
     * 
     */
    public Output<Boolean> requirePersonalAccessTokenExpiry() {
        return this.requirePersonalAccessTokenExpiry;
    }
    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     * 
     */
    @Export(name="requireTwoFactorAuthentication", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> requireTwoFactorAuthentication;

    /**
     * @return (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     * 
     */
    public Output<Boolean> requireTwoFactorAuthentication() {
        return this.requireTwoFactorAuthentication;
    }
    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
     * 
     */
    @Export(name="restrictedVisibilityLevels", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> restrictedVisibilityLevels;

    /**
     * @return Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
     * 
     */
    public Output<List<String>> restrictedVisibilityLevels() {
        return this.restrictedVisibilityLevels;
    }
    /**
     * The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
     * 
     */
    @Export(name="rsaKeyRestriction", refs={Integer.class}, tree="[0]")
    private Output<Integer> rsaKeyRestriction;

    /**
     * @return The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
     * 
     */
    public Output<Integer> rsaKeyRestriction() {
        return this.rsaKeyRestriction;
    }
    /**
     * Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
     * 
     */
    @Export(name="searchRateLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> searchRateLimit;

    /**
     * @return Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
     * 
     */
    public Output<Integer> searchRateLimit() {
        return this.searchRateLimit;
    }
    /**
     * Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
     * 
     */
    @Export(name="searchRateLimitUnauthenticated", refs={Integer.class}, tree="[0]")
    private Output<Integer> searchRateLimitUnauthenticated;

    /**
     * @return Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
     * 
     */
    public Output<Integer> searchRateLimitUnauthenticated() {
        return this.searchRateLimitUnauthenticated;
    }
    /**
     * Maximum number of active merge request approval policies per security policy project. Maximum: 20
     * 
     */
    @Export(name="securityApprovalPoliciesLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> securityApprovalPoliciesLimit;

    /**
     * @return Maximum number of active merge request approval policies per security policy project. Maximum: 20
     * 
     */
    public Output<Integer> securityApprovalPoliciesLimit() {
        return this.securityApprovalPoliciesLimit;
    }
    /**
     * Whether to look up merge request approval policy approval groups globally or within project hierarchies.
     * 
     */
    @Export(name="securityPolicyGlobalGroupApproversEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> securityPolicyGlobalGroupApproversEnabled;

    /**
     * @return Whether to look up merge request approval policy approval groups globally or within project hierarchies.
     * 
     */
    public Output<Boolean> securityPolicyGlobalGroupApproversEnabled() {
        return this.securityPolicyGlobalGroupApproversEnabled;
    }
    /**
     * Public security contact information.
     * 
     */
    @Export(name="securityTxtContent", refs={String.class}, tree="[0]")
    private Output<String> securityTxtContent;

    /**
     * @return Public security contact information.
     * 
     */
    public Output<String> securityTxtContent() {
        return this.securityTxtContent;
    }
    /**
     * Send confirmation email on sign-up.
     * 
     */
    @Export(name="sendUserConfirmationEmail", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> sendUserConfirmationEmail;

    /**
     * @return Send confirmation email on sign-up.
     * 
     */
    public Output<Boolean> sendUserConfirmationEmail() {
        return this.sendUserConfirmationEmail;
    }
    /**
     * Flag to indicate if token expiry date can be optional for service account users
     * 
     */
    @Export(name="serviceAccessTokensExpirationEnforced", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> serviceAccessTokensExpirationEnforced;

    /**
     * @return Flag to indicate if token expiry date can be optional for service account users
     * 
     */
    public Output<Boolean> serviceAccessTokensExpirationEnforced() {
        return this.serviceAccessTokensExpirationEnforced;
    }
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     * 
     */
    @Export(name="sessionExpireDelay", refs={Integer.class}, tree="[0]")
    private Output<Integer> sessionExpireDelay;

    /**
     * @return Session duration in minutes. GitLab restart is required to apply changes.
     * 
     */
    public Output<Integer> sessionExpireDelay() {
        return this.sessionExpireDelay;
    }
    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     * 
     */
    @Export(name="sharedRunnersEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> sharedRunnersEnabled;

    /**
     * @return (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     * 
     */
    public Output<Boolean> sharedRunnersEnabled() {
        return this.sharedRunnersEnabled;
    }
    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     * 
     */
    @Export(name="sharedRunnersMinutes", refs={Integer.class}, tree="[0]")
    private Output<Integer> sharedRunnersMinutes;

    /**
     * @return Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     * 
     */
    public Output<Integer> sharedRunnersMinutes() {
        return this.sharedRunnersMinutes;
    }
    /**
     * Shared runners text.
     * 
     */
    @Export(name="sharedRunnersText", refs={String.class}, tree="[0]")
    private Output<String> sharedRunnersText;

    /**
     * @return Shared runners text.
     * 
     */
    public Output<String> sharedRunnersText() {
        return this.sharedRunnersText;
    }
    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
     * 
     */
    @Export(name="sidekiqJobLimiterCompressionThresholdBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> sidekiqJobLimiterCompressionThresholdBytes;

    /**
     * @return The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
     * 
     */
    public Output<Integer> sidekiqJobLimiterCompressionThresholdBytes() {
        return this.sidekiqJobLimiterCompressionThresholdBytes;
    }
    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
     * 
     */
    @Export(name="sidekiqJobLimiterLimitBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> sidekiqJobLimiterLimitBytes;

    /**
     * @return The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
     * 
     */
    public Output<Integer> sidekiqJobLimiterLimitBytes() {
        return this.sidekiqJobLimiterLimitBytes;
    }
    /**
     * track or compress. Sets the behavior for Sidekiq job size limits.
     * 
     */
    @Export(name="sidekiqJobLimiterMode", refs={String.class}, tree="[0]")
    private Output<String> sidekiqJobLimiterMode;

    /**
     * @return track or compress. Sets the behavior for Sidekiq job size limits.
     * 
     */
    public Output<String> sidekiqJobLimiterMode() {
        return this.sidekiqJobLimiterMode;
    }
    /**
     * Text on the login page.
     * 
     */
    @Export(name="signInText", refs={String.class}, tree="[0]")
    private Output<String> signInText;

    /**
     * @return Text on the login page.
     * 
     */
    public Output<String> signInText() {
        return this.signInText;
    }
    /**
     * Enable registration.
     * 
     */
    @Export(name="signupEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> signupEnabled;

    /**
     * @return Enable registration.
     * 
     */
    public Output<Boolean> signupEnabled() {
        return this.signupEnabled;
    }
    /**
     * Enable Silent admin exports.
     * 
     */
    @Export(name="silentAdminExportsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> silentAdminExportsEnabled;

    /**
     * @return Enable Silent admin exports.
     * 
     */
    public Output<Boolean> silentAdminExportsEnabled() {
        return this.silentAdminExportsEnabled;
    }
    /**
     * Enable Silent mode.
     * 
     */
    @Export(name="silentModeEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> silentModeEnabled;

    /**
     * @return Enable Silent mode.
     * 
     */
    public Output<Boolean> silentModeEnabled() {
        return this.silentModeEnabled;
    }
    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     * 
     */
    @Export(name="slackAppEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> slackAppEnabled;

    /**
     * @return (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     * 
     */
    public Output<Boolean> slackAppEnabled() {
        return this.slackAppEnabled;
    }
    /**
     * The app ID of the Slack-app.
     * 
     */
    @Export(name="slackAppId", refs={String.class}, tree="[0]")
    private Output<String> slackAppId;

    /**
     * @return The app ID of the Slack-app.
     * 
     */
    public Output<String> slackAppId() {
        return this.slackAppId;
    }
    /**
     * The app secret of the Slack-app.
     * 
     */
    @Export(name="slackAppSecret", refs={String.class}, tree="[0]")
    private Output<String> slackAppSecret;

    /**
     * @return The app secret of the Slack-app.
     * 
     */
    public Output<String> slackAppSecret() {
        return this.slackAppSecret;
    }
    /**
     * The signing secret of the Slack-app.
     * 
     */
    @Export(name="slackAppSigningSecret", refs={String.class}, tree="[0]")
    private Output<String> slackAppSigningSecret;

    /**
     * @return The signing secret of the Slack-app.
     * 
     */
    public Output<String> slackAppSigningSecret() {
        return this.slackAppSigningSecret;
    }
    /**
     * The verification token of the Slack-app.
     * 
     */
    @Export(name="slackAppVerificationToken", refs={String.class}, tree="[0]")
    private Output<String> slackAppVerificationToken;

    /**
     * @return The verification token of the Slack-app.
     * 
     */
    public Output<String> slackAppVerificationToken() {
        return this.slackAppVerificationToken;
    }
    /**
     * Max snippet content size in bytes.
     * 
     */
    @Export(name="snippetSizeLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> snippetSizeLimit;

    /**
     * @return Max snippet content size in bytes.
     * 
     */
    public Output<Integer> snippetSizeLimit() {
        return this.snippetSizeLimit;
    }
    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     * 
     */
    @Export(name="snowplowAppId", refs={String.class}, tree="[0]")
    private Output<String> snowplowAppId;

    /**
     * @return The Snowplow site name / application ID. (for example, gitlab)
     * 
     */
    public Output<String> snowplowAppId() {
        return this.snowplowAppId;
    }
    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     * 
     */
    @Export(name="snowplowCollectorHostname", refs={String.class}, tree="[0]")
    private Output<String> snowplowCollectorHostname;

    /**
     * @return The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     * 
     */
    public Output<String> snowplowCollectorHostname() {
        return this.snowplowCollectorHostname;
    }
    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     * 
     */
    @Export(name="snowplowCookieDomain", refs={String.class}, tree="[0]")
    private Output<String> snowplowCookieDomain;

    /**
     * @return The Snowplow cookie domain. (for example, .gitlab.com)
     * 
     */
    public Output<String> snowplowCookieDomain() {
        return this.snowplowCookieDomain;
    }
    /**
     * The Snowplow collector for database events hostname. (for example, db-snowplow.trx.gitlab.net)
     * 
     */
    @Export(name="snowplowDatabaseCollectorHostname", refs={String.class}, tree="[0]")
    private Output<String> snowplowDatabaseCollectorHostname;

    /**
     * @return The Snowplow collector for database events hostname. (for example, db-snowplow.trx.gitlab.net)
     * 
     */
    public Output<String> snowplowDatabaseCollectorHostname() {
        return this.snowplowDatabaseCollectorHostname;
    }
    /**
     * Enable snowplow tracking.
     * 
     */
    @Export(name="snowplowEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> snowplowEnabled;

    /**
     * @return Enable snowplow tracking.
     * 
     */
    public Output<Boolean> snowplowEnabled() {
        return this.snowplowEnabled;
    }
    /**
     * Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
     * 
     */
    @Export(name="sourcegraphEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> sourcegraphEnabled;

    /**
     * @return Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
     * 
     */
    public Output<Boolean> sourcegraphEnabled() {
        return this.sourcegraphEnabled;
    }
    /**
     * Blocks Sourcegraph from being loaded on private and internal projects.
     * 
     */
    @Export(name="sourcegraphPublicOnly", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> sourcegraphPublicOnly;

    /**
     * @return Blocks Sourcegraph from being loaded on private and internal projects.
     * 
     */
    public Output<Boolean> sourcegraphPublicOnly() {
        return this.sourcegraphPublicOnly;
    }
    /**
     * The Sourcegraph instance URL for integration.
     * 
     */
    @Export(name="sourcegraphUrl", refs={String.class}, tree="[0]")
    private Output<String> sourcegraphUrl;

    /**
     * @return The Sourcegraph instance URL for integration.
     * 
     */
    public Output<String> sourcegraphUrl() {
        return this.sourcegraphUrl;
    }
    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     * 
     */
    @Export(name="spamCheckApiKey", refs={String.class}, tree="[0]")
    private Output<String> spamCheckApiKey;

    /**
     * @return API key used by GitLab for accessing the Spam Check service endpoint.
     * 
     */
    public Output<String> spamCheckApiKey() {
        return this.spamCheckApiKey;
    }
    /**
     * Enables spam checking using external Spam Check API endpoint.
     * 
     */
    @Export(name="spamCheckEndpointEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> spamCheckEndpointEnabled;

    /**
     * @return Enables spam checking using external Spam Check API endpoint.
     * 
     */
    public Output<Boolean> spamCheckEndpointEnabled() {
        return this.spamCheckEndpointEnabled;
    }
    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     * 
     */
    @Export(name="spamCheckEndpointUrl", refs={String.class}, tree="[0]")
    private Output<String> spamCheckEndpointUrl;

    /**
     * @return URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     * 
     */
    public Output<String> spamCheckEndpointUrl() {
        return this.spamCheckEndpointUrl;
    }
    /**
     * Authentication token for the external storage linked in static*objects*external*storage*url.
     * 
     */
    @Export(name="staticObjectsExternalStorageAuthToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> staticObjectsExternalStorageAuthToken;

    /**
     * @return Authentication token for the external storage linked in static*objects*external*storage*url.
     * 
     */
    public Output<Optional<String>> staticObjectsExternalStorageAuthToken() {
        return Codegen.optional(this.staticObjectsExternalStorageAuthToken);
    }
    /**
     * URL to an external storage for repository static objects.
     * 
     */
    @Export(name="staticObjectsExternalStorageUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> staticObjectsExternalStorageUrl;

    /**
     * @return URL to an external storage for repository static objects.
     * 
     */
    public Output<Optional<String>> staticObjectsExternalStorageUrl() {
        return Codegen.optional(this.staticObjectsExternalStorageUrl);
    }
    /**
     * Enable pipeline suggestion banner.
     * 
     */
    @Export(name="suggestPipelineEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> suggestPipelineEnabled;

    /**
     * @return Enable pipeline suggestion banner.
     * 
     */
    public Output<Boolean> suggestPipelineEnabled() {
        return this.suggestPipelineEnabled;
    }
    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     * 
     */
    @Export(name="terminalMaxSessionTime", refs={Integer.class}, tree="[0]")
    private Output<Integer> terminalMaxSessionTime;

    /**
     * @return Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     * 
     */
    public Output<Integer> terminalMaxSessionTime() {
        return this.terminalMaxSessionTime;
    }
    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     * 
     */
    @Export(name="terms", refs={String.class}, tree="[0]")
    private Output<String> terms;

    /**
     * @return (Required by: enforce_terms) Markdown content for the ToS.
     * 
     */
    public Output<String> terms() {
        return this.terms;
    }
    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Export(name="throttleAuthenticatedApiEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> throttleAuthenticatedApiEnabled;

    /**
     * @return (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Output<Boolean> throttleAuthenticatedApiEnabled() {
        return this.throttleAuthenticatedApiEnabled;
    }
    /**
     * Rate limit period (in seconds).
     * 
     */
    @Export(name="throttleAuthenticatedApiPeriodInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleAuthenticatedApiPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds).
     * 
     */
    public Output<Integer> throttleAuthenticatedApiPeriodInSeconds() {
        return this.throttleAuthenticatedApiPeriodInSeconds;
    }
    /**
     * Maximum requests per period per user.
     * 
     */
    @Export(name="throttleAuthenticatedApiRequestsPerPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleAuthenticatedApiRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user.
     * 
     */
    public Output<Integer> throttleAuthenticatedApiRequestsPerPeriod() {
        return this.throttleAuthenticatedApiRequestsPerPeriod;
    }
    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    @Export(name="throttleAuthenticatedPackagesApiEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> throttleAuthenticatedPackagesApiEnabled;

    /**
     * @return (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    public Output<Boolean> throttleAuthenticatedPackagesApiEnabled() {
        return this.throttleAuthenticatedPackagesApiEnabled;
    }
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    @Export(name="throttleAuthenticatedPackagesApiPeriodInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleAuthenticatedPackagesApiPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    public Output<Integer> throttleAuthenticatedPackagesApiPeriodInSeconds() {
        return this.throttleAuthenticatedPackagesApiPeriodInSeconds;
    }
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    @Export(name="throttleAuthenticatedPackagesApiRequestsPerPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleAuthenticatedPackagesApiRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    public Output<Integer> throttleAuthenticatedPackagesApiRequestsPerPeriod() {
        return this.throttleAuthenticatedPackagesApiRequestsPerPeriod;
    }
    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Export(name="throttleAuthenticatedWebEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> throttleAuthenticatedWebEnabled;

    /**
     * @return (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Output<Boolean> throttleAuthenticatedWebEnabled() {
        return this.throttleAuthenticatedWebEnabled;
    }
    /**
     * Rate limit period (in seconds).
     * 
     */
    @Export(name="throttleAuthenticatedWebPeriodInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleAuthenticatedWebPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds).
     * 
     */
    public Output<Integer> throttleAuthenticatedWebPeriodInSeconds() {
        return this.throttleAuthenticatedWebPeriodInSeconds;
    }
    /**
     * Maximum requests per period per user.
     * 
     */
    @Export(name="throttleAuthenticatedWebRequestsPerPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleAuthenticatedWebRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user.
     * 
     */
    public Output<Integer> throttleAuthenticatedWebRequestsPerPeriod() {
        return this.throttleAuthenticatedWebRequestsPerPeriod;
    }
    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Export(name="throttleUnauthenticatedApiEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> throttleUnauthenticatedApiEnabled;

    /**
     * @return (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Output<Boolean> throttleUnauthenticatedApiEnabled() {
        return this.throttleUnauthenticatedApiEnabled;
    }
    /**
     * Rate limit period in seconds.
     * 
     */
    @Export(name="throttleUnauthenticatedApiPeriodInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleUnauthenticatedApiPeriodInSeconds;

    /**
     * @return Rate limit period in seconds.
     * 
     */
    public Output<Integer> throttleUnauthenticatedApiPeriodInSeconds() {
        return this.throttleUnauthenticatedApiPeriodInSeconds;
    }
    /**
     * Max requests per period per IP.
     * 
     */
    @Export(name="throttleUnauthenticatedApiRequestsPerPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleUnauthenticatedApiRequestsPerPeriod;

    /**
     * @return Max requests per period per IP.
     * 
     */
    public Output<Integer> throttleUnauthenticatedApiRequestsPerPeriod() {
        return this.throttleUnauthenticatedApiRequestsPerPeriod;
    }
    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    @Export(name="throttleUnauthenticatedPackagesApiEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> throttleUnauthenticatedPackagesApiEnabled;

    /**
     * @return (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    public Output<Boolean> throttleUnauthenticatedPackagesApiEnabled() {
        return this.throttleUnauthenticatedPackagesApiEnabled;
    }
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    @Export(name="throttleUnauthenticatedPackagesApiPeriodInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleUnauthenticatedPackagesApiPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    public Output<Integer> throttleUnauthenticatedPackagesApiPeriodInSeconds() {
        return this.throttleUnauthenticatedPackagesApiPeriodInSeconds;
    }
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    @Export(name="throttleUnauthenticatedPackagesApiRequestsPerPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleUnauthenticatedPackagesApiRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    public Output<Integer> throttleUnauthenticatedPackagesApiRequestsPerPeriod() {
        return this.throttleUnauthenticatedPackagesApiRequestsPerPeriod;
    }
    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Export(name="throttleUnauthenticatedWebEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> throttleUnauthenticatedWebEnabled;

    /**
     * @return (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Output<Boolean> throttleUnauthenticatedWebEnabled() {
        return this.throttleUnauthenticatedWebEnabled;
    }
    /**
     * Rate limit period in seconds.
     * 
     */
    @Export(name="throttleUnauthenticatedWebPeriodInSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleUnauthenticatedWebPeriodInSeconds;

    /**
     * @return Rate limit period in seconds.
     * 
     */
    public Output<Integer> throttleUnauthenticatedWebPeriodInSeconds() {
        return this.throttleUnauthenticatedWebPeriodInSeconds;
    }
    /**
     * Max requests per period per IP.
     * 
     */
    @Export(name="throttleUnauthenticatedWebRequestsPerPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> throttleUnauthenticatedWebRequestsPerPeriod;

    /**
     * @return Max requests per period per IP.
     * 
     */
    public Output<Integer> throttleUnauthenticatedWebRequestsPerPeriod() {
        return this.throttleUnauthenticatedWebRequestsPerPeriod;
    }
    /**
     * Limit display of time tracking units to hours.
     * 
     */
    @Export(name="timeTrackingLimitToHours", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> timeTrackingLimitToHours;

    /**
     * @return Limit display of time tracking units to hours.
     * 
     */
    public Output<Boolean> timeTrackingLimitToHours() {
        return this.timeTrackingLimitToHours;
    }
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     * 
     */
    @Export(name="twoFactorGracePeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> twoFactorGracePeriod;

    /**
     * @return Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     * 
     */
    public Output<Integer> twoFactorGracePeriod() {
        return this.twoFactorGracePeriod;
    }
    /**
     * Specifies how many days after sign-up to delete users who have not confirmed their email. Only applicable if delete*unconfirmed*users is set to true. Must be 1 or greater. Self-managed, Premium and Ultimate only.
     * 
     */
    @Export(name="unconfirmedUsersDeleteAfterDays", refs={Integer.class}, tree="[0]")
    private Output<Integer> unconfirmedUsersDeleteAfterDays;

    /**
     * @return Specifies how many days after sign-up to delete users who have not confirmed their email. Only applicable if delete*unconfirmed*users is set to true. Must be 1 or greater. Self-managed, Premium and Ultimate only.
     * 
     */
    public Output<Integer> unconfirmedUsersDeleteAfterDays() {
        return this.unconfirmedUsersDeleteAfterDays;
    }
    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     * 
     */
    @Export(name="uniqueIpsLimitEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> uniqueIpsLimitEnabled;

    /**
     * @return (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     * 
     */
    public Output<Boolean> uniqueIpsLimitEnabled() {
        return this.uniqueIpsLimitEnabled;
    }
    /**
     * Maximum number of IPs per user.
     * 
     */
    @Export(name="uniqueIpsLimitPerUser", refs={Integer.class}, tree="[0]")
    private Output<Integer> uniqueIpsLimitPerUser;

    /**
     * @return Maximum number of IPs per user.
     * 
     */
    public Output<Integer> uniqueIpsLimitPerUser() {
        return this.uniqueIpsLimitPerUser;
    }
    /**
     * How many seconds an IP is counted towards the limit.
     * 
     */
    @Export(name="uniqueIpsLimitTimeWindow", refs={Integer.class}, tree="[0]")
    private Output<Integer> uniqueIpsLimitTimeWindow;

    /**
     * @return How many seconds an IP is counted towards the limit.
     * 
     */
    public Output<Integer> uniqueIpsLimitTimeWindow() {
        return this.uniqueIpsLimitTimeWindow;
    }
    /**
     * Fetch GitLab Runner release version data from GitLab.com.
     * 
     */
    @Export(name="updateRunnerVersionsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> updateRunnerVersionsEnabled;

    /**
     * @return Fetch GitLab Runner release version data from GitLab.com.
     * 
     */
    public Output<Boolean> updateRunnerVersionsEnabled() {
        return this.updateRunnerVersionsEnabled;
    }
    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     * 
     */
    @Export(name="usagePingEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> usagePingEnabled;

    /**
     * @return Every week GitLab reports license usage back to GitLab, Inc.
     * 
     */
    public Output<Boolean> usagePingEnabled() {
        return this.usagePingEnabled;
    }
    /**
     * Enables ClickHouse as a data source for analytics reports. ClickHouse must be configured for this setting to take effect. Available on Premium and Ultimate only.
     * 
     */
    @Export(name="useClickhouseForAnalytics", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> useClickhouseForAnalytics;

    /**
     * @return Enables ClickHouse as a data source for analytics reports. ClickHouse must be configured for this setting to take effect. Available on Premium and Ultimate only.
     * 
     */
    public Output<Boolean> useClickhouseForAnalytics() {
        return this.useClickhouseForAnalytics;
    }
    /**
     * Send an email to users upon account deactivation.
     * 
     */
    @Export(name="userDeactivationEmailsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> userDeactivationEmailsEnabled;

    /**
     * @return Send an email to users upon account deactivation.
     * 
     */
    public Output<Boolean> userDeactivationEmailsEnabled() {
        return this.userDeactivationEmailsEnabled;
    }
    /**
     * Newly registered users are external by default.
     * 
     */
    @Export(name="userDefaultExternal", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> userDefaultExternal;

    /**
     * @return Newly registered users are external by default.
     * 
     */
    public Output<Boolean> userDefaultExternal() {
        return this.userDefaultExternal;
    }
    /**
     * Specify an email address regex pattern to identify default internal users.
     * 
     */
    @Export(name="userDefaultInternalRegex", refs={String.class}, tree="[0]")
    private Output<String> userDefaultInternalRegex;

    /**
     * @return Specify an email address regex pattern to identify default internal users.
     * 
     */
    public Output<String> userDefaultInternalRegex() {
        return this.userDefaultInternalRegex;
    }
    /**
     * Newly created users have private profile by default.
     * 
     */
    @Export(name="userDefaultsToPrivateProfile", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> userDefaultsToPrivateProfile;

    /**
     * @return Newly created users have private profile by default.
     * 
     */
    public Output<Boolean> userDefaultsToPrivateProfile() {
        return this.userDefaultsToPrivateProfile;
    }
    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     * 
     */
    @Export(name="userOauthApplications", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> userOauthApplications;

    /**
     * @return Allow users to register any application to use GitLab as an OAuth provider.
     * 
     */
    public Output<Boolean> userOauthApplications() {
        return this.userOauthApplications;
    }
    /**
     * When set to false disable the You won&#39;t be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     * 
     */
    @Export(name="userShowAddSshKeyMessage", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> userShowAddSshKeyMessage;

    /**
     * @return When set to false disable the You won&#39;t be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     * 
     */
    public Output<Boolean> userShowAddSshKeyMessage() {
        return this.userShowAddSshKeyMessage;
    }
    /**
     * List of types which are allowed to register a GitLab Runner. Can be [], [&#39;group&#39;], [&#39;project&#39;] or [&#39;group&#39;, &#39;project&#39;].
     * 
     */
    @Export(name="validRunnerRegistrars", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> validRunnerRegistrars;

    /**
     * @return List of types which are allowed to register a GitLab Runner. Can be [], [&#39;group&#39;], [&#39;project&#39;] or [&#39;group&#39;, &#39;project&#39;].
     * 
     */
    public Output<List<String>> validRunnerRegistrars() {
        return this.validRunnerRegistrars;
    }
    /**
     * Let GitLab inform you when an update is available.
     * 
     */
    @Export(name="versionCheckEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> versionCheckEnabled;

    /**
     * @return Let GitLab inform you when an update is available.
     * 
     */
    public Output<Boolean> versionCheckEnabled() {
        return this.versionCheckEnabled;
    }
    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     * 
     */
    @Export(name="webIdeClientsidePreviewEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> webIdeClientsidePreviewEnabled;

    /**
     * @return Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     * 
     */
    public Output<Boolean> webIdeClientsidePreviewEnabled() {
        return this.webIdeClientsidePreviewEnabled;
    }
    /**
     * What&#39;s new variant, possible values: all*tiers, current*tier, and disabled.
     * 
     */
    @Export(name="whatsNewVariant", refs={String.class}, tree="[0]")
    private Output<String> whatsNewVariant;

    /**
     * @return What&#39;s new variant, possible values: all*tiers, current*tier, and disabled.
     * 
     */
    public Output<String> whatsNewVariant() {
        return this.whatsNewVariant;
    }
    /**
     * Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
     * 
     */
    @Export(name="wikiPageMaxContentBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> wikiPageMaxContentBytes;

    /**
     * @return Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
     * 
     */
    public Output<Integer> wikiPageMaxContentBytes() {
        return this.wikiPageMaxContentBytes;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ApplicationSettings(java.lang.String name) {
        this(name, ApplicationSettingsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ApplicationSettings(java.lang.String name, @Nullable ApplicationSettingsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ApplicationSettings(java.lang.String name, @Nullable ApplicationSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/applicationSettings:ApplicationSettings", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ApplicationSettings(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/applicationSettings:ApplicationSettings", name, state, makeResourceOptions(options, id), false);
    }

    private static ApplicationSettingsArgs makeArgs(@Nullable ApplicationSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApplicationSettingsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "akismetApiKey",
                "assetProxySecretKey",
                "eksAccessKeyId",
                "eksSecretAccessKey",
                "elasticsearchAwsAccessKey",
                "elasticsearchAwsSecretAccessKey",
                "elasticsearchPassword",
                "externalAuthClientKey",
                "externalAuthClientKeyPass",
                "mailgunSigningKey",
                "recaptchaPrivateKey",
                "recaptchaSiteKey",
                "slackAppSecret",
                "slackAppSigningSecret",
                "spamCheckApiKey",
                "staticObjectsExternalStorageAuthToken",
                "staticObjectsExternalStorageUrl"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ApplicationSettings get(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ApplicationSettings(name, id, state, options);
    }
}
