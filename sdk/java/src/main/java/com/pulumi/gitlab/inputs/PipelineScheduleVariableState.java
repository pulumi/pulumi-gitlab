// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineScheduleVariableState extends com.pulumi.resources.ResourceArgs {

    public static final PipelineScheduleVariableState Empty = new PipelineScheduleVariableState();

    /**
     * Name of the variable.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Name of the variable.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The id of the pipeline schedule.
     * 
     */
    @Import(name="pipelineScheduleId")
    private @Nullable Output<Integer> pipelineScheduleId;

    /**
     * @return The id of the pipeline schedule.
     * 
     */
    public Optional<Output<Integer>> pipelineScheduleId() {
        return Optional.ofNullable(this.pipelineScheduleId);
    }

    /**
     * The id of the project to add the schedule to.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The id of the project to add the schedule to.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Value of the variable.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Value of the variable.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * The type of a variable. Available types are: `envVar`, `file`. Default is `envVar`.
     * 
     */
    @Import(name="variableType")
    private @Nullable Output<String> variableType;

    /**
     * @return The type of a variable. Available types are: `envVar`, `file`. Default is `envVar`.
     * 
     */
    public Optional<Output<String>> variableType() {
        return Optional.ofNullable(this.variableType);
    }

    private PipelineScheduleVariableState() {}

    private PipelineScheduleVariableState(PipelineScheduleVariableState $) {
        this.key = $.key;
        this.pipelineScheduleId = $.pipelineScheduleId;
        this.project = $.project;
        this.value = $.value;
        this.variableType = $.variableType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineScheduleVariableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineScheduleVariableState $;

        public Builder() {
            $ = new PipelineScheduleVariableState();
        }

        public Builder(PipelineScheduleVariableState defaults) {
            $ = new PipelineScheduleVariableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param pipelineScheduleId The id of the pipeline schedule.
         * 
         * @return builder
         * 
         */
        public Builder pipelineScheduleId(@Nullable Output<Integer> pipelineScheduleId) {
            $.pipelineScheduleId = pipelineScheduleId;
            return this;
        }

        /**
         * @param pipelineScheduleId The id of the pipeline schedule.
         * 
         * @return builder
         * 
         */
        public Builder pipelineScheduleId(Integer pipelineScheduleId) {
            return pipelineScheduleId(Output.of(pipelineScheduleId));
        }

        /**
         * @param project The id of the project to add the schedule to.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The id of the project to add the schedule to.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param value Value of the variable.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of the variable.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param variableType The type of a variable. Available types are: `envVar`, `file`. Default is `envVar`.
         * 
         * @return builder
         * 
         */
        public Builder variableType(@Nullable Output<String> variableType) {
            $.variableType = variableType;
            return this;
        }

        /**
         * @param variableType The type of a variable. Available types are: `envVar`, `file`. Default is `envVar`.
         * 
         * @return builder
         * 
         */
        public Builder variableType(String variableType) {
            return variableType(Output.of(variableType));
        }

        public PipelineScheduleVariableState build() {
            return $;
        }
    }

}
