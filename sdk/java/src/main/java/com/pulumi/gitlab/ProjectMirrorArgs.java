// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectMirrorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectMirrorArgs Empty = new ProjectMirrorArgs();

    /**
     * Determines the mirror authentication method. Valid values are: `sshPublicKey`, `password`.
     * 
     */
    @Import(name="authMethod")
    private @Nullable Output<String> authMethod;

    /**
     * @return Determines the mirror authentication method. Valid values are: `sshPublicKey`, `password`.
     * 
     */
    public Optional<Output<String>> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }

    /**
     * Determines if the mirror is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Determines if the mirror is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Determines if divergent refs are skipped.
     * 
     */
    @Import(name="keepDivergentRefs")
    private @Nullable Output<Boolean> keepDivergentRefs;

    /**
     * @return Determines if divergent refs are skipped.
     * 
     */
    public Optional<Output<Boolean>> keepDivergentRefs() {
        return Optional.ofNullable(this.keepDivergentRefs);
    }

    /**
     * Contains a regular expression. Only branches with names matching the regex are mirrored. Requires only*protected*branches to be disabled. Premium and Ultimate only.
     * 
     */
    @Import(name="mirrorBranchRegex")
    private @Nullable Output<String> mirrorBranchRegex;

    /**
     * @return Contains a regular expression. Only branches with names matching the regex are mirrored. Requires only*protected*branches to be disabled. Premium and Ultimate only.
     * 
     */
    public Optional<Output<String>> mirrorBranchRegex() {
        return Optional.ofNullable(this.mirrorBranchRegex);
    }

    /**
     * Determines if only protected branches are mirrored.
     * 
     */
    @Import(name="onlyProtectedBranches")
    private @Nullable Output<Boolean> onlyProtectedBranches;

    /**
     * @return Determines if only protected branches are mirrored.
     * 
     */
    public Optional<Output<Boolean>> onlyProtectedBranches() {
        return Optional.ofNullable(this.onlyProtectedBranches);
    }

    /**
     * The id of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The id of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The URL of the remote repository to be mirrored.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the remote repository to be mirrored.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private ProjectMirrorArgs() {}

    private ProjectMirrorArgs(ProjectMirrorArgs $) {
        this.authMethod = $.authMethod;
        this.enabled = $.enabled;
        this.keepDivergentRefs = $.keepDivergentRefs;
        this.mirrorBranchRegex = $.mirrorBranchRegex;
        this.onlyProtectedBranches = $.onlyProtectedBranches;
        this.project = $.project;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectMirrorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectMirrorArgs $;

        public Builder() {
            $ = new ProjectMirrorArgs();
        }

        public Builder(ProjectMirrorArgs defaults) {
            $ = new ProjectMirrorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authMethod Determines the mirror authentication method. Valid values are: `sshPublicKey`, `password`.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(@Nullable Output<String> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        /**
         * @param authMethod Determines the mirror authentication method. Valid values are: `sshPublicKey`, `password`.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(String authMethod) {
            return authMethod(Output.of(authMethod));
        }

        /**
         * @param enabled Determines if the mirror is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Determines if the mirror is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param keepDivergentRefs Determines if divergent refs are skipped.
         * 
         * @return builder
         * 
         */
        public Builder keepDivergentRefs(@Nullable Output<Boolean> keepDivergentRefs) {
            $.keepDivergentRefs = keepDivergentRefs;
            return this;
        }

        /**
         * @param keepDivergentRefs Determines if divergent refs are skipped.
         * 
         * @return builder
         * 
         */
        public Builder keepDivergentRefs(Boolean keepDivergentRefs) {
            return keepDivergentRefs(Output.of(keepDivergentRefs));
        }

        /**
         * @param mirrorBranchRegex Contains a regular expression. Only branches with names matching the regex are mirrored. Requires only*protected*branches to be disabled. Premium and Ultimate only.
         * 
         * @return builder
         * 
         */
        public Builder mirrorBranchRegex(@Nullable Output<String> mirrorBranchRegex) {
            $.mirrorBranchRegex = mirrorBranchRegex;
            return this;
        }

        /**
         * @param mirrorBranchRegex Contains a regular expression. Only branches with names matching the regex are mirrored. Requires only*protected*branches to be disabled. Premium and Ultimate only.
         * 
         * @return builder
         * 
         */
        public Builder mirrorBranchRegex(String mirrorBranchRegex) {
            return mirrorBranchRegex(Output.of(mirrorBranchRegex));
        }

        /**
         * @param onlyProtectedBranches Determines if only protected branches are mirrored.
         * 
         * @return builder
         * 
         */
        public Builder onlyProtectedBranches(@Nullable Output<Boolean> onlyProtectedBranches) {
            $.onlyProtectedBranches = onlyProtectedBranches;
            return this;
        }

        /**
         * @param onlyProtectedBranches Determines if only protected branches are mirrored.
         * 
         * @return builder
         * 
         */
        public Builder onlyProtectedBranches(Boolean onlyProtectedBranches) {
            return onlyProtectedBranches(Output.of(onlyProtectedBranches));
        }

        /**
         * @param project The id of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The id of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param url The URL of the remote repository to be mirrored.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the remote repository to be mirrored.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ProjectMirrorArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ProjectMirrorArgs", "project");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("ProjectMirrorArgs", "url");
            }
            return $;
        }
    }

}
