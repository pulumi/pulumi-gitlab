// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetProjectMergeRequestsMergeRequest;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectMergeRequestsResult {
    /**
     * @return Return merge requests created by the given user ID.
     * 
     */
    private @Nullable Integer authorId;
    /**
     * @return Return merge requests created by the given username.
     * 
     */
    private @Nullable String authorUsername;
    /**
     * @return Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    private @Nullable String createdAfter;
    /**
     * @return Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    private @Nullable String createdBefore;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The unique internal IDs of the merge requests.
     * 
     */
    private @Nullable List<Integer> iids;
    /**
     * @return The list of merge requests.
     * 
     */
    private List<GetProjectMergeRequestsMergeRequest> mergeRequests;
    /**
     * @return Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
     * 
     */
    private @Nullable String milestone;
    /**
     * @return Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
     * 
     */
    private @Nullable String myReactionEmoji;
    /**
     * @return Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
     * 
     */
    private @Nullable String orderBy;
    /**
     * @return The ID or path of the project.
     * 
     */
    private String project;
    /**
     * @return Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
     * 
     */
    private @Nullable String reviewerUsername;
    /**
     * @return Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
     * 
     */
    private @Nullable String scope;
    /**
     * @return Search merge requests against their `title` or `description`.
     * 
     */
    private @Nullable String search;
    /**
     * @return Return requests sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    private @Nullable String sort;
    /**
     * @return Return merge requests with the given source branch.
     * 
     */
    private @Nullable String sourceBranch;
    /**
     * @return Return all merge requests (all) or just those that are opened, closed, locked, or merged.
     * 
     */
    private @Nullable String state;
    /**
     * @return Return merge requests with the given target branch.
     * 
     */
    private @Nullable String targetBranch;
    /**
     * @return Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    private @Nullable String updatedAfter;
    /**
     * @return Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    private @Nullable String updatedBefore;
    /**
     * @return Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
     * 
     */
    private @Nullable String wip;

    private GetProjectMergeRequestsResult() {}
    /**
     * @return Return merge requests created by the given user ID.
     * 
     */
    public Optional<Integer> authorId() {
        return Optional.ofNullable(this.authorId);
    }
    /**
     * @return Return merge requests created by the given username.
     * 
     */
    public Optional<String> authorUsername() {
        return Optional.ofNullable(this.authorUsername);
    }
    /**
     * @return Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<String> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }
    /**
     * @return Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<String> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The unique internal IDs of the merge requests.
     * 
     */
    public List<Integer> iids() {
        return this.iids == null ? List.of() : this.iids;
    }
    /**
     * @return The list of merge requests.
     * 
     */
    public List<GetProjectMergeRequestsMergeRequest> mergeRequests() {
        return this.mergeRequests;
    }
    /**
     * @return Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
     * 
     */
    public Optional<String> milestone() {
        return Optional.ofNullable(this.milestone);
    }
    /**
     * @return Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
     * 
     */
    public Optional<String> myReactionEmoji() {
        return Optional.ofNullable(this.myReactionEmoji);
    }
    /**
     * @return Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
     * 
     */
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }
    /**
     * @return The ID or path of the project.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
     * 
     */
    public Optional<String> reviewerUsername() {
        return Optional.ofNullable(this.reviewerUsername);
    }
    /**
     * @return Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return Search merge requests against their `title` or `description`.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return Return requests sorted in `asc` or `desc` order. Default is `desc`.
     * 
     */
    public Optional<String> sort() {
        return Optional.ofNullable(this.sort);
    }
    /**
     * @return Return merge requests with the given source branch.
     * 
     */
    public Optional<String> sourceBranch() {
        return Optional.ofNullable(this.sourceBranch);
    }
    /**
     * @return Return all merge requests (all) or just those that are opened, closed, locked, or merged.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Return merge requests with the given target branch.
     * 
     */
    public Optional<String> targetBranch() {
        return Optional.ofNullable(this.targetBranch);
    }
    /**
     * @return Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<String> updatedAfter() {
        return Optional.ofNullable(this.updatedAfter);
    }
    /**
     * @return Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     * 
     */
    public Optional<String> updatedBefore() {
        return Optional.ofNullable(this.updatedBefore);
    }
    /**
     * @return Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
     * 
     */
    public Optional<String> wip() {
        return Optional.ofNullable(this.wip);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectMergeRequestsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer authorId;
        private @Nullable String authorUsername;
        private @Nullable String createdAfter;
        private @Nullable String createdBefore;
        private String id;
        private @Nullable List<Integer> iids;
        private List<GetProjectMergeRequestsMergeRequest> mergeRequests;
        private @Nullable String milestone;
        private @Nullable String myReactionEmoji;
        private @Nullable String orderBy;
        private String project;
        private @Nullable String reviewerUsername;
        private @Nullable String scope;
        private @Nullable String search;
        private @Nullable String sort;
        private @Nullable String sourceBranch;
        private @Nullable String state;
        private @Nullable String targetBranch;
        private @Nullable String updatedAfter;
        private @Nullable String updatedBefore;
        private @Nullable String wip;
        public Builder() {}
        public Builder(GetProjectMergeRequestsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorId = defaults.authorId;
    	      this.authorUsername = defaults.authorUsername;
    	      this.createdAfter = defaults.createdAfter;
    	      this.createdBefore = defaults.createdBefore;
    	      this.id = defaults.id;
    	      this.iids = defaults.iids;
    	      this.mergeRequests = defaults.mergeRequests;
    	      this.milestone = defaults.milestone;
    	      this.myReactionEmoji = defaults.myReactionEmoji;
    	      this.orderBy = defaults.orderBy;
    	      this.project = defaults.project;
    	      this.reviewerUsername = defaults.reviewerUsername;
    	      this.scope = defaults.scope;
    	      this.search = defaults.search;
    	      this.sort = defaults.sort;
    	      this.sourceBranch = defaults.sourceBranch;
    	      this.state = defaults.state;
    	      this.targetBranch = defaults.targetBranch;
    	      this.updatedAfter = defaults.updatedAfter;
    	      this.updatedBefore = defaults.updatedBefore;
    	      this.wip = defaults.wip;
        }

        @CustomType.Setter
        public Builder authorId(@Nullable Integer authorId) {

            this.authorId = authorId;
            return this;
        }
        @CustomType.Setter
        public Builder authorUsername(@Nullable String authorUsername) {

            this.authorUsername = authorUsername;
            return this;
        }
        @CustomType.Setter
        public Builder createdAfter(@Nullable String createdAfter) {

            this.createdAfter = createdAfter;
            return this;
        }
        @CustomType.Setter
        public Builder createdBefore(@Nullable String createdBefore) {

            this.createdBefore = createdBefore;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectMergeRequestsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iids(@Nullable List<Integer> iids) {

            this.iids = iids;
            return this;
        }
        public Builder iids(Integer... iids) {
            return iids(List.of(iids));
        }
        @CustomType.Setter
        public Builder mergeRequests(List<GetProjectMergeRequestsMergeRequest> mergeRequests) {
            if (mergeRequests == null) {
              throw new MissingRequiredPropertyException("GetProjectMergeRequestsResult", "mergeRequests");
            }
            this.mergeRequests = mergeRequests;
            return this;
        }
        public Builder mergeRequests(GetProjectMergeRequestsMergeRequest... mergeRequests) {
            return mergeRequests(List.of(mergeRequests));
        }
        @CustomType.Setter
        public Builder milestone(@Nullable String milestone) {

            this.milestone = milestone;
            return this;
        }
        @CustomType.Setter
        public Builder myReactionEmoji(@Nullable String myReactionEmoji) {

            this.myReactionEmoji = myReactionEmoji;
            return this;
        }
        @CustomType.Setter
        public Builder orderBy(@Nullable String orderBy) {

            this.orderBy = orderBy;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetProjectMergeRequestsResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder reviewerUsername(@Nullable String reviewerUsername) {

            this.reviewerUsername = reviewerUsername;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder search(@Nullable String search) {

            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder sort(@Nullable String sort) {

            this.sort = sort;
            return this;
        }
        @CustomType.Setter
        public Builder sourceBranch(@Nullable String sourceBranch) {

            this.sourceBranch = sourceBranch;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetBranch(@Nullable String targetBranch) {

            this.targetBranch = targetBranch;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAfter(@Nullable String updatedAfter) {

            this.updatedAfter = updatedAfter;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBefore(@Nullable String updatedBefore) {

            this.updatedBefore = updatedBefore;
            return this;
        }
        @CustomType.Setter
        public Builder wip(@Nullable String wip) {

            this.wip = wip;
            return this;
        }
        public GetProjectMergeRequestsResult build() {
            final var _resultValue = new GetProjectMergeRequestsResult();
            _resultValue.authorId = authorId;
            _resultValue.authorUsername = authorUsername;
            _resultValue.createdAfter = createdAfter;
            _resultValue.createdBefore = createdBefore;
            _resultValue.id = id;
            _resultValue.iids = iids;
            _resultValue.mergeRequests = mergeRequests;
            _resultValue.milestone = milestone;
            _resultValue.myReactionEmoji = myReactionEmoji;
            _resultValue.orderBy = orderBy;
            _resultValue.project = project;
            _resultValue.reviewerUsername = reviewerUsername;
            _resultValue.scope = scope;
            _resultValue.search = search;
            _resultValue.sort = sort;
            _resultValue.sourceBranch = sourceBranch;
            _resultValue.state = state;
            _resultValue.targetBranch = targetBranch;
            _resultValue.updatedAfter = updatedAfter;
            _resultValue.updatedBefore = updatedBefore;
            _resultValue.wip = wip;
            return _resultValue;
        }
    }
}
