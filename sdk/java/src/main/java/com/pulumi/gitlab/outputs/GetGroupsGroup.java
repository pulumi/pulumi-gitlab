// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGroupsGroup {
    private Integer defaultBranchProtection;
    private String description;
    private String fullName;
    private String fullPath;
    private Integer groupId;
    private Boolean lfsEnabled;
    private String name;
    private Integer parentId;
    private String path;
    private Boolean preventForkingOutsideGroup;
    private Boolean requestAccessEnabled;
    private String runnersToken;
    private String visibilityLevel;
    private String webUrl;

    private GetGroupsGroup() {}
    public Integer defaultBranchProtection() {
        return this.defaultBranchProtection;
    }
    public String description() {
        return this.description;
    }
    public String fullName() {
        return this.fullName;
    }
    public String fullPath() {
        return this.fullPath;
    }
    public Integer groupId() {
        return this.groupId;
    }
    public Boolean lfsEnabled() {
        return this.lfsEnabled;
    }
    public String name() {
        return this.name;
    }
    public Integer parentId() {
        return this.parentId;
    }
    public String path() {
        return this.path;
    }
    public Boolean preventForkingOutsideGroup() {
        return this.preventForkingOutsideGroup;
    }
    public Boolean requestAccessEnabled() {
        return this.requestAccessEnabled;
    }
    public String runnersToken() {
        return this.runnersToken;
    }
    public String visibilityLevel() {
        return this.visibilityLevel;
    }
    public String webUrl() {
        return this.webUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer defaultBranchProtection;
        private String description;
        private String fullName;
        private String fullPath;
        private Integer groupId;
        private Boolean lfsEnabled;
        private String name;
        private Integer parentId;
        private String path;
        private Boolean preventForkingOutsideGroup;
        private Boolean requestAccessEnabled;
        private String runnersToken;
        private String visibilityLevel;
        private String webUrl;
        public Builder() {}
        public Builder(GetGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultBranchProtection = defaults.defaultBranchProtection;
    	      this.description = defaults.description;
    	      this.fullName = defaults.fullName;
    	      this.fullPath = defaults.fullPath;
    	      this.groupId = defaults.groupId;
    	      this.lfsEnabled = defaults.lfsEnabled;
    	      this.name = defaults.name;
    	      this.parentId = defaults.parentId;
    	      this.path = defaults.path;
    	      this.preventForkingOutsideGroup = defaults.preventForkingOutsideGroup;
    	      this.requestAccessEnabled = defaults.requestAccessEnabled;
    	      this.runnersToken = defaults.runnersToken;
    	      this.visibilityLevel = defaults.visibilityLevel;
    	      this.webUrl = defaults.webUrl;
        }

        @CustomType.Setter
        public Builder defaultBranchProtection(Integer defaultBranchProtection) {
            this.defaultBranchProtection = Objects.requireNonNull(defaultBranchProtection);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder fullName(String fullName) {
            this.fullName = Objects.requireNonNull(fullName);
            return this;
        }
        @CustomType.Setter
        public Builder fullPath(String fullPath) {
            this.fullPath = Objects.requireNonNull(fullPath);
            return this;
        }
        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        @CustomType.Setter
        public Builder lfsEnabled(Boolean lfsEnabled) {
            this.lfsEnabled = Objects.requireNonNull(lfsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder parentId(Integer parentId) {
            this.parentId = Objects.requireNonNull(parentId);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder preventForkingOutsideGroup(Boolean preventForkingOutsideGroup) {
            this.preventForkingOutsideGroup = Objects.requireNonNull(preventForkingOutsideGroup);
            return this;
        }
        @CustomType.Setter
        public Builder requestAccessEnabled(Boolean requestAccessEnabled) {
            this.requestAccessEnabled = Objects.requireNonNull(requestAccessEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder runnersToken(String runnersToken) {
            this.runnersToken = Objects.requireNonNull(runnersToken);
            return this;
        }
        @CustomType.Setter
        public Builder visibilityLevel(String visibilityLevel) {
            this.visibilityLevel = Objects.requireNonNull(visibilityLevel);
            return this;
        }
        @CustomType.Setter
        public Builder webUrl(String webUrl) {
            this.webUrl = Objects.requireNonNull(webUrl);
            return this;
        }
        public GetGroupsGroup build() {
            final var o = new GetGroupsGroup();
            o.defaultBranchProtection = defaultBranchProtection;
            o.description = description;
            o.fullName = fullName;
            o.fullPath = fullPath;
            o.groupId = groupId;
            o.lfsEnabled = lfsEnabled;
            o.name = name;
            o.parentId = parentId;
            o.path = path;
            o.preventForkingOutsideGroup = preventForkingOutsideGroup;
            o.requestAccessEnabled = requestAccessEnabled;
            o.runnersToken = runnersToken;
            o.visibilityLevel = visibilityLevel;
            o.webUrl = webUrl;
            return o;
        }
    }
}
