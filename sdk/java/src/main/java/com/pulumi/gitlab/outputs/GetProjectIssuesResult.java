// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gitlab.outputs.GetProjectIssuesIssue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectIssuesResult {
    /**
     * @return Return issues assigned to the given user id. Mutually exclusive with assignee_username. None returns unassigned issues. Any returns issues with an assignee.
     * 
     */
    private @Nullable Integer assigneeId;
    /**
     * @return Return issues assigned to the given username. Similar to assignee*id and mutually exclusive with assignee*id. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.
     * 
     */
    private @Nullable String assigneeUsername;
    /**
     * @return Return issues created by the given user id. Combine with scope=all or scope=assigned*to*me.
     * 
     */
    private @Nullable Integer authorId;
    /**
     * @return Filter confidential or public issues.
     * 
     */
    private @Nullable Boolean confidential;
    /**
     * @return Return issues created on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    private @Nullable String createdAfter;
    /**
     * @return Return issues created on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    private @Nullable String createdBefore;
    /**
     * @return Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), any, today, tomorrow, overdue, week, month, next*month*and*previous*two_weeks.
     * 
     */
    private @Nullable String dueDate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Return only the issues having the given iid
     * 
     */
    private @Nullable List<Integer> iids;
    /**
     * @return Filter to a given type of issue. Valid values are [issue incident test_case]. (Introduced in GitLab 13.12)
     * 
     */
    private @Nullable String issueType;
    /**
     * @return The list of issues returned by the search.
     * 
     */
    private List<GetProjectIssuesIssue> issues;
    /**
     * @return Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.
     * 
     */
    private @Nullable List<String> labels;
    /**
     * @return The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.
     * 
     */
    private @Nullable String milestone;
    /**
     * @return Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction.
     * 
     */
    private @Nullable String myReactionEmoji;
    /**
     * @return Return issues that do not match the assignee id.
     * 
     */
    private @Nullable List<Integer> notAssigneeIds;
    /**
     * @return Return issues that do not match the author id.
     * 
     */
    private @Nullable List<Integer> notAuthorIds;
    /**
     * @return Return issues that do not match the labels.
     * 
     */
    private @Nullable List<String> notLabels;
    /**
     * @return Return issues that do not match the milestone.
     * 
     */
    private @Nullable String notMilestone;
    /**
     * @return Return issues not reacted by the authenticated user by the given emoji.
     * 
     */
    private @Nullable List<String> notMyReactionEmojis;
    /**
     * @return Return issues ordered by. Valid values are `created_at`, `updated_at`, `priority`, `due_date`, `relative_position`, `label_priority`, `milestone_due`, `popularity`, `weight`. Default is created_at
     * 
     */
    private @Nullable String orderBy;
    /**
     * @return The name or id of the project.
     * 
     */
    private String project;
    /**
     * @return Return issues for the given scope. Valid values are `created_by_me`, `assigned_to_me`, `all`. Defaults to all.
     * 
     */
    private @Nullable String scope;
    /**
     * @return Search project issues against their title and description
     * 
     */
    private @Nullable String search;
    /**
     * @return Return issues sorted in asc or desc order. Default is desc
     * 
     */
    private @Nullable String sort;
    /**
     * @return Return issues updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    private @Nullable String updatedAfter;
    /**
     * @return Return issues updated on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    private @Nullable String updatedBefore;
    /**
     * @return Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned.
     * 
     */
    private @Nullable Integer weight;
    /**
     * @return If true, the response returns more details for each label in labels field: :name, :color, :description, :description*html, :text*color. Default is false. description_html was introduced in GitLab 12.7
     * 
     */
    private @Nullable Boolean withLabelsDetails;

    private GetProjectIssuesResult() {}
    /**
     * @return Return issues assigned to the given user id. Mutually exclusive with assignee_username. None returns unassigned issues. Any returns issues with an assignee.
     * 
     */
    public Optional<Integer> assigneeId() {
        return Optional.ofNullable(this.assigneeId);
    }
    /**
     * @return Return issues assigned to the given username. Similar to assignee*id and mutually exclusive with assignee*id. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.
     * 
     */
    public Optional<String> assigneeUsername() {
        return Optional.ofNullable(this.assigneeUsername);
    }
    /**
     * @return Return issues created by the given user id. Combine with scope=all or scope=assigned*to*me.
     * 
     */
    public Optional<Integer> authorId() {
        return Optional.ofNullable(this.authorId);
    }
    /**
     * @return Filter confidential or public issues.
     * 
     */
    public Optional<Boolean> confidential() {
        return Optional.ofNullable(this.confidential);
    }
    /**
     * @return Return issues created on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<String> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }
    /**
     * @return Return issues created on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<String> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }
    /**
     * @return Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), any, today, tomorrow, overdue, week, month, next*month*and*previous*two_weeks.
     * 
     */
    public Optional<String> dueDate() {
        return Optional.ofNullable(this.dueDate);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Return only the issues having the given iid
     * 
     */
    public List<Integer> iids() {
        return this.iids == null ? List.of() : this.iids;
    }
    /**
     * @return Filter to a given type of issue. Valid values are [issue incident test_case]. (Introduced in GitLab 13.12)
     * 
     */
    public Optional<String> issueType() {
        return Optional.ofNullable(this.issueType);
    }
    /**
     * @return The list of issues returned by the search.
     * 
     */
    public List<GetProjectIssuesIssue> issues() {
        return this.issues;
    }
    /**
     * @return Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.
     * 
     */
    public List<String> labels() {
        return this.labels == null ? List.of() : this.labels;
    }
    /**
     * @return The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.
     * 
     */
    public Optional<String> milestone() {
        return Optional.ofNullable(this.milestone);
    }
    /**
     * @return Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction.
     * 
     */
    public Optional<String> myReactionEmoji() {
        return Optional.ofNullable(this.myReactionEmoji);
    }
    /**
     * @return Return issues that do not match the assignee id.
     * 
     */
    public List<Integer> notAssigneeIds() {
        return this.notAssigneeIds == null ? List.of() : this.notAssigneeIds;
    }
    /**
     * @return Return issues that do not match the author id.
     * 
     */
    public List<Integer> notAuthorIds() {
        return this.notAuthorIds == null ? List.of() : this.notAuthorIds;
    }
    /**
     * @return Return issues that do not match the labels.
     * 
     */
    public List<String> notLabels() {
        return this.notLabels == null ? List.of() : this.notLabels;
    }
    /**
     * @return Return issues that do not match the milestone.
     * 
     */
    public Optional<String> notMilestone() {
        return Optional.ofNullable(this.notMilestone);
    }
    /**
     * @return Return issues not reacted by the authenticated user by the given emoji.
     * 
     */
    public List<String> notMyReactionEmojis() {
        return this.notMyReactionEmojis == null ? List.of() : this.notMyReactionEmojis;
    }
    /**
     * @return Return issues ordered by. Valid values are `created_at`, `updated_at`, `priority`, `due_date`, `relative_position`, `label_priority`, `milestone_due`, `popularity`, `weight`. Default is created_at
     * 
     */
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }
    /**
     * @return The name or id of the project.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Return issues for the given scope. Valid values are `created_by_me`, `assigned_to_me`, `all`. Defaults to all.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return Search project issues against their title and description
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return Return issues sorted in asc or desc order. Default is desc
     * 
     */
    public Optional<String> sort() {
        return Optional.ofNullable(this.sort);
    }
    /**
     * @return Return issues updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<String> updatedAfter() {
        return Optional.ofNullable(this.updatedAfter);
    }
    /**
     * @return Return issues updated on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<String> updatedBefore() {
        return Optional.ofNullable(this.updatedBefore);
    }
    /**
     * @return Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned.
     * 
     */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }
    /**
     * @return If true, the response returns more details for each label in labels field: :name, :color, :description, :description*html, :text*color. Default is false. description_html was introduced in GitLab 12.7
     * 
     */
    public Optional<Boolean> withLabelsDetails() {
        return Optional.ofNullable(this.withLabelsDetails);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectIssuesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer assigneeId;
        private @Nullable String assigneeUsername;
        private @Nullable Integer authorId;
        private @Nullable Boolean confidential;
        private @Nullable String createdAfter;
        private @Nullable String createdBefore;
        private @Nullable String dueDate;
        private String id;
        private @Nullable List<Integer> iids;
        private @Nullable String issueType;
        private List<GetProjectIssuesIssue> issues;
        private @Nullable List<String> labels;
        private @Nullable String milestone;
        private @Nullable String myReactionEmoji;
        private @Nullable List<Integer> notAssigneeIds;
        private @Nullable List<Integer> notAuthorIds;
        private @Nullable List<String> notLabels;
        private @Nullable String notMilestone;
        private @Nullable List<String> notMyReactionEmojis;
        private @Nullable String orderBy;
        private String project;
        private @Nullable String scope;
        private @Nullable String search;
        private @Nullable String sort;
        private @Nullable String updatedAfter;
        private @Nullable String updatedBefore;
        private @Nullable Integer weight;
        private @Nullable Boolean withLabelsDetails;
        public Builder() {}
        public Builder(GetProjectIssuesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assigneeId = defaults.assigneeId;
    	      this.assigneeUsername = defaults.assigneeUsername;
    	      this.authorId = defaults.authorId;
    	      this.confidential = defaults.confidential;
    	      this.createdAfter = defaults.createdAfter;
    	      this.createdBefore = defaults.createdBefore;
    	      this.dueDate = defaults.dueDate;
    	      this.id = defaults.id;
    	      this.iids = defaults.iids;
    	      this.issueType = defaults.issueType;
    	      this.issues = defaults.issues;
    	      this.labels = defaults.labels;
    	      this.milestone = defaults.milestone;
    	      this.myReactionEmoji = defaults.myReactionEmoji;
    	      this.notAssigneeIds = defaults.notAssigneeIds;
    	      this.notAuthorIds = defaults.notAuthorIds;
    	      this.notLabels = defaults.notLabels;
    	      this.notMilestone = defaults.notMilestone;
    	      this.notMyReactionEmojis = defaults.notMyReactionEmojis;
    	      this.orderBy = defaults.orderBy;
    	      this.project = defaults.project;
    	      this.scope = defaults.scope;
    	      this.search = defaults.search;
    	      this.sort = defaults.sort;
    	      this.updatedAfter = defaults.updatedAfter;
    	      this.updatedBefore = defaults.updatedBefore;
    	      this.weight = defaults.weight;
    	      this.withLabelsDetails = defaults.withLabelsDetails;
        }

        @CustomType.Setter
        public Builder assigneeId(@Nullable Integer assigneeId) {
            this.assigneeId = assigneeId;
            return this;
        }
        @CustomType.Setter
        public Builder assigneeUsername(@Nullable String assigneeUsername) {
            this.assigneeUsername = assigneeUsername;
            return this;
        }
        @CustomType.Setter
        public Builder authorId(@Nullable Integer authorId) {
            this.authorId = authorId;
            return this;
        }
        @CustomType.Setter
        public Builder confidential(@Nullable Boolean confidential) {
            this.confidential = confidential;
            return this;
        }
        @CustomType.Setter
        public Builder createdAfter(@Nullable String createdAfter) {
            this.createdAfter = createdAfter;
            return this;
        }
        @CustomType.Setter
        public Builder createdBefore(@Nullable String createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }
        @CustomType.Setter
        public Builder dueDate(@Nullable String dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder iids(@Nullable List<Integer> iids) {
            this.iids = iids;
            return this;
        }
        public Builder iids(Integer... iids) {
            return iids(List.of(iids));
        }
        @CustomType.Setter
        public Builder issueType(@Nullable String issueType) {
            this.issueType = issueType;
            return this;
        }
        @CustomType.Setter
        public Builder issues(List<GetProjectIssuesIssue> issues) {
            this.issues = Objects.requireNonNull(issues);
            return this;
        }
        public Builder issues(GetProjectIssuesIssue... issues) {
            return issues(List.of(issues));
        }
        @CustomType.Setter
        public Builder labels(@Nullable List<String> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder milestone(@Nullable String milestone) {
            this.milestone = milestone;
            return this;
        }
        @CustomType.Setter
        public Builder myReactionEmoji(@Nullable String myReactionEmoji) {
            this.myReactionEmoji = myReactionEmoji;
            return this;
        }
        @CustomType.Setter
        public Builder notAssigneeIds(@Nullable List<Integer> notAssigneeIds) {
            this.notAssigneeIds = notAssigneeIds;
            return this;
        }
        public Builder notAssigneeIds(Integer... notAssigneeIds) {
            return notAssigneeIds(List.of(notAssigneeIds));
        }
        @CustomType.Setter
        public Builder notAuthorIds(@Nullable List<Integer> notAuthorIds) {
            this.notAuthorIds = notAuthorIds;
            return this;
        }
        public Builder notAuthorIds(Integer... notAuthorIds) {
            return notAuthorIds(List.of(notAuthorIds));
        }
        @CustomType.Setter
        public Builder notLabels(@Nullable List<String> notLabels) {
            this.notLabels = notLabels;
            return this;
        }
        public Builder notLabels(String... notLabels) {
            return notLabels(List.of(notLabels));
        }
        @CustomType.Setter
        public Builder notMilestone(@Nullable String notMilestone) {
            this.notMilestone = notMilestone;
            return this;
        }
        @CustomType.Setter
        public Builder notMyReactionEmojis(@Nullable List<String> notMyReactionEmojis) {
            this.notMyReactionEmojis = notMyReactionEmojis;
            return this;
        }
        public Builder notMyReactionEmojis(String... notMyReactionEmojis) {
            return notMyReactionEmojis(List.of(notMyReactionEmojis));
        }
        @CustomType.Setter
        public Builder orderBy(@Nullable String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder search(@Nullable String search) {
            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder sort(@Nullable String sort) {
            this.sort = sort;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAfter(@Nullable String updatedAfter) {
            this.updatedAfter = updatedAfter;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBefore(@Nullable String updatedBefore) {
            this.updatedBefore = updatedBefore;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Integer weight) {
            this.weight = weight;
            return this;
        }
        @CustomType.Setter
        public Builder withLabelsDetails(@Nullable Boolean withLabelsDetails) {
            this.withLabelsDetails = withLabelsDetails;
            return this;
        }
        public GetProjectIssuesResult build() {
            final var _resultValue = new GetProjectIssuesResult();
            _resultValue.assigneeId = assigneeId;
            _resultValue.assigneeUsername = assigneeUsername;
            _resultValue.authorId = authorId;
            _resultValue.confidential = confidential;
            _resultValue.createdAfter = createdAfter;
            _resultValue.createdBefore = createdBefore;
            _resultValue.dueDate = dueDate;
            _resultValue.id = id;
            _resultValue.iids = iids;
            _resultValue.issueType = issueType;
            _resultValue.issues = issues;
            _resultValue.labels = labels;
            _resultValue.milestone = milestone;
            _resultValue.myReactionEmoji = myReactionEmoji;
            _resultValue.notAssigneeIds = notAssigneeIds;
            _resultValue.notAuthorIds = notAuthorIds;
            _resultValue.notLabels = notLabels;
            _resultValue.notMilestone = notMilestone;
            _resultValue.notMyReactionEmojis = notMyReactionEmojis;
            _resultValue.orderBy = orderBy;
            _resultValue.project = project;
            _resultValue.scope = scope;
            _resultValue.search = search;
            _resultValue.sort = sort;
            _resultValue.updatedAfter = updatedAfter;
            _resultValue.updatedBefore = updatedBefore;
            _resultValue.weight = weight;
            _resultValue.withLabelsDetails = withLabelsDetails;
            return _resultValue;
        }
    }
}
