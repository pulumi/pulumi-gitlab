// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.GroupBadgeArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.GroupBadgeState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * The `gitlab.GroupBadge` resource allows to mange the lifecycle of group badges.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/user/project/badges.html#group-badges)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.Group;
 * import com.pulumi.gitlab.GroupBadge;
 * import com.pulumi.gitlab.GroupBadgeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Group(&#34;foo&#34;);
 * 
 *         var example = new GroupBadge(&#34;example&#34;, GroupBadgeArgs.builder()        
 *             .group(foo.id())
 *             .linkUrl(&#34;https://example.com/badge-123&#34;)
 *             .imageUrl(&#34;https://example.com/badge-123.svg&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * GitLab group badges can be imported using an id made up of `{group_id}:{badge_id}`, e.g.
 * 
 * ```sh
 *  $ pulumi import gitlab:index/groupBadge:GroupBadge foo 1:3
 * ```
 * 
 */
@ResourceType(type="gitlab:index/groupBadge:GroupBadge")
public class GroupBadge extends com.pulumi.resources.CustomResource {
    /**
     * The id of the group to add the badge to.
     * 
     */
    @Export(name="group", refs={String.class}, tree="[0]")
    private Output<String> group;

    /**
     * @return The id of the group to add the badge to.
     * 
     */
    public Output<String> group() {
        return this.group;
    }
    /**
     * The image url which will be presented on group overview.
     * 
     */
    @Export(name="imageUrl", refs={String.class}, tree="[0]")
    private Output<String> imageUrl;

    /**
     * @return The image url which will be presented on group overview.
     * 
     */
    public Output<String> imageUrl() {
        return this.imageUrl;
    }
    /**
     * The url linked with the badge.
     * 
     */
    @Export(name="linkUrl", refs={String.class}, tree="[0]")
    private Output<String> linkUrl;

    /**
     * @return The url linked with the badge.
     * 
     */
    public Output<String> linkUrl() {
        return this.linkUrl;
    }
    /**
     * The image_url argument rendered (in case of use of placeholders).
     * 
     */
    @Export(name="renderedImageUrl", refs={String.class}, tree="[0]")
    private Output<String> renderedImageUrl;

    /**
     * @return The image_url argument rendered (in case of use of placeholders).
     * 
     */
    public Output<String> renderedImageUrl() {
        return this.renderedImageUrl;
    }
    /**
     * The link_url argument rendered (in case of use of placeholders).
     * 
     */
    @Export(name="renderedLinkUrl", refs={String.class}, tree="[0]")
    private Output<String> renderedLinkUrl;

    /**
     * @return The link_url argument rendered (in case of use of placeholders).
     * 
     */
    public Output<String> renderedLinkUrl() {
        return this.renderedLinkUrl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GroupBadge(String name) {
        this(name, GroupBadgeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GroupBadge(String name, GroupBadgeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GroupBadge(String name, GroupBadgeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupBadge:GroupBadge", name, args == null ? GroupBadgeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GroupBadge(String name, Output<String> id, @Nullable GroupBadgeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/groupBadge:GroupBadge", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GroupBadge get(String name, Output<String> id, @Nullable GroupBadgeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GroupBadge(name, id, state, options);
    }
}
