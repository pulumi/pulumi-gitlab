// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRepositoryFileResult {
    /**
     * @return The blob id.
     * 
     */
    private String blobId;
    /**
     * @return The commit id.
     * 
     */
    private String commitId;
    /**
     * @return File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).
     * 
     */
    private String content;
    /**
     * @return File content sha256 digest.
     * 
     */
    private String contentSha256;
    /**
     * @return The file content encoding.
     * 
     */
    private String encoding;
    /**
     * @return Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.
     * 
     */
    private Boolean executeFilemode;
    /**
     * @return The filename.
     * 
     */
    private String fileName;
    /**
     * @return The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     * 
     */
    private String filePath;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The last known commit id.
     * 
     */
    private String lastCommitId;
    /**
     * @return The name or ID of the project.
     * 
     */
    private String project;
    /**
     * @return The name of branch, tag or commit.
     * 
     */
    private String ref;
    /**
     * @return The file size.
     * 
     */
    private Integer size;

    private GetRepositoryFileResult() {}
    /**
     * @return The blob id.
     * 
     */
    public String blobId() {
        return this.blobId;
    }
    /**
     * @return The commit id.
     * 
     */
    public String commitId() {
        return this.commitId;
    }
    /**
     * @return File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return File content sha256 digest.
     * 
     */
    public String contentSha256() {
        return this.contentSha256;
    }
    /**
     * @return The file content encoding.
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.
     * 
     */
    public Boolean executeFilemode() {
        return this.executeFilemode;
    }
    /**
     * @return The filename.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    /**
     * @return The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     * 
     */
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The last known commit id.
     * 
     */
    public String lastCommitId() {
        return this.lastCommitId;
    }
    /**
     * @return The name or ID of the project.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The name of branch, tag or commit.
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return The file size.
     * 
     */
    public Integer size() {
        return this.size;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryFileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String blobId;
        private String commitId;
        private String content;
        private String contentSha256;
        private String encoding;
        private Boolean executeFilemode;
        private String fileName;
        private String filePath;
        private String id;
        private String lastCommitId;
        private String project;
        private String ref;
        private Integer size;
        public Builder() {}
        public Builder(GetRepositoryFileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobId = defaults.blobId;
    	      this.commitId = defaults.commitId;
    	      this.content = defaults.content;
    	      this.contentSha256 = defaults.contentSha256;
    	      this.encoding = defaults.encoding;
    	      this.executeFilemode = defaults.executeFilemode;
    	      this.fileName = defaults.fileName;
    	      this.filePath = defaults.filePath;
    	      this.id = defaults.id;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.project = defaults.project;
    	      this.ref = defaults.ref;
    	      this.size = defaults.size;
        }

        @CustomType.Setter
        public Builder blobId(String blobId) {
            this.blobId = Objects.requireNonNull(blobId);
            return this;
        }
        @CustomType.Setter
        public Builder commitId(String commitId) {
            this.commitId = Objects.requireNonNull(commitId);
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        @CustomType.Setter
        public Builder contentSha256(String contentSha256) {
            this.contentSha256 = Objects.requireNonNull(contentSha256);
            return this;
        }
        @CustomType.Setter
        public Builder encoding(String encoding) {
            this.encoding = Objects.requireNonNull(encoding);
            return this;
        }
        @CustomType.Setter
        public Builder executeFilemode(Boolean executeFilemode) {
            this.executeFilemode = Objects.requireNonNull(executeFilemode);
            return this;
        }
        @CustomType.Setter
        public Builder fileName(String fileName) {
            this.fileName = Objects.requireNonNull(fileName);
            return this;
        }
        @CustomType.Setter
        public Builder filePath(String filePath) {
            this.filePath = Objects.requireNonNull(filePath);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitId(String lastCommitId) {
            this.lastCommitId = Objects.requireNonNull(lastCommitId);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            this.ref = Objects.requireNonNull(ref);
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public GetRepositoryFileResult build() {
            final var o = new GetRepositoryFileResult();
            o.blobId = blobId;
            o.commitId = commitId;
            o.content = content;
            o.contentSha256 = contentSha256;
            o.encoding = encoding;
            o.executeFilemode = executeFilemode;
            o.fileName = fileName;
            o.filePath = filePath;
            o.id = id;
            o.lastCommitId = lastCommitId;
            o.project = project;
            o.ref = ref;
            o.size = size;
            return o;
        }
    }
}
