// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRepositoryFileResult {
    /**
     * @return The blob id.
     * 
     */
    private String blobId;
    /**
     * @return The commit id.
     * 
     */
    private String commitId;
    /**
     * @return File content.
     * 
     */
    private String content;
    /**
     * @return File content sha256 digest.
     * 
     */
    private String contentSha256;
    /**
     * @return The file content encoding.
     * 
     */
    private String encoding;
    /**
     * @return Enables or disables the execute flag on the file.
     * 
     */
    private Boolean executeFilemode;
    /**
     * @return The filename.
     * 
     */
    private String fileName;
    /**
     * @return The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     * 
     */
    private String filePath;
    /**
     * @return The ID of this datasource. In the format `&lt;project:ref:file_path&gt;`.
     * 
     */
    private String id;
    /**
     * @return The last known commit id.
     * 
     */
    private String lastCommitId;
    /**
     * @return The name or ID of the project.
     * 
     */
    private String project;
    /**
     * @return The name of branch, tag or commit.
     * 
     */
    private String ref;
    /**
     * @return The file size.
     * 
     */
    private Integer size;

    private GetRepositoryFileResult() {}
    /**
     * @return The blob id.
     * 
     */
    public String blobId() {
        return this.blobId;
    }
    /**
     * @return The commit id.
     * 
     */
    public String commitId() {
        return this.commitId;
    }
    /**
     * @return File content.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return File content sha256 digest.
     * 
     */
    public String contentSha256() {
        return this.contentSha256;
    }
    /**
     * @return The file content encoding.
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return Enables or disables the execute flag on the file.
     * 
     */
    public Boolean executeFilemode() {
        return this.executeFilemode;
    }
    /**
     * @return The filename.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    /**
     * @return The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     * 
     */
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return The ID of this datasource. In the format `&lt;project:ref:file_path&gt;`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The last known commit id.
     * 
     */
    public String lastCommitId() {
        return this.lastCommitId;
    }
    /**
     * @return The name or ID of the project.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The name of branch, tag or commit.
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return The file size.
     * 
     */
    public Integer size() {
        return this.size;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryFileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String blobId;
        private String commitId;
        private String content;
        private String contentSha256;
        private String encoding;
        private Boolean executeFilemode;
        private String fileName;
        private String filePath;
        private String id;
        private String lastCommitId;
        private String project;
        private String ref;
        private Integer size;
        public Builder() {}
        public Builder(GetRepositoryFileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobId = defaults.blobId;
    	      this.commitId = defaults.commitId;
    	      this.content = defaults.content;
    	      this.contentSha256 = defaults.contentSha256;
    	      this.encoding = defaults.encoding;
    	      this.executeFilemode = defaults.executeFilemode;
    	      this.fileName = defaults.fileName;
    	      this.filePath = defaults.filePath;
    	      this.id = defaults.id;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.project = defaults.project;
    	      this.ref = defaults.ref;
    	      this.size = defaults.size;
        }

        @CustomType.Setter
        public Builder blobId(String blobId) {
            if (blobId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "blobId");
            }
            this.blobId = blobId;
            return this;
        }
        @CustomType.Setter
        public Builder commitId(String commitId) {
            if (commitId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "commitId");
            }
            this.commitId = commitId;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentSha256(String contentSha256) {
            if (contentSha256 == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "contentSha256");
            }
            this.contentSha256 = contentSha256;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(String encoding) {
            if (encoding == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "encoding");
            }
            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder executeFilemode(Boolean executeFilemode) {
            if (executeFilemode == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "executeFilemode");
            }
            this.executeFilemode = executeFilemode;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(String fileName) {
            if (fileName == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "fileName");
            }
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder filePath(String filePath) {
            if (filePath == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "filePath");
            }
            this.filePath = filePath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitId(String lastCommitId) {
            if (lastCommitId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "lastCommitId");
            }
            this.lastCommitId = lastCommitId;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetRepositoryFileResult", "size");
            }
            this.size = size;
            return this;
        }
        public GetRepositoryFileResult build() {
            final var _resultValue = new GetRepositoryFileResult();
            _resultValue.blobId = blobId;
            _resultValue.commitId = commitId;
            _resultValue.content = content;
            _resultValue.contentSha256 = contentSha256;
            _resultValue.encoding = encoding;
            _resultValue.executeFilemode = executeFilemode;
            _resultValue.fileName = fileName;
            _resultValue.filePath = filePath;
            _resultValue.id = id;
            _resultValue.lastCommitId = lastCommitId;
            _resultValue.project = project;
            _resultValue.ref = ref;
            _resultValue.size = size;
            return _resultValue;
        }
    }
}
