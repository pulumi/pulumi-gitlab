// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProjectsProjectForkedFromProject {
    /**
     * @return The HTTP clone URL of the upstream project.
     * 
     */
    private String httpUrlToRepo;
    /**
     * @return The ID of the upstream project.
     * 
     */
    private Integer id;
    /**
     * @return The name of the upstream project.
     * 
     */
    private String name;
    /**
     * @return In `group / subgroup / project` or `user / project` format.
     * 
     */
    private String nameWithNamespace;
    /**
     * @return The path of the upstream project.
     * 
     */
    private String path;
    /**
     * @return In `group/subgroup/project` or `user/project` format.
     * 
     */
    private String pathWithNamespace;
    /**
     * @return The web url of the upstream project.
     * 
     */
    private String webUrl;

    private GetProjectsProjectForkedFromProject() {}
    /**
     * @return The HTTP clone URL of the upstream project.
     * 
     */
    public String httpUrlToRepo() {
        return this.httpUrlToRepo;
    }
    /**
     * @return The ID of the upstream project.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The name of the upstream project.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return In `group / subgroup / project` or `user / project` format.
     * 
     */
    public String nameWithNamespace() {
        return this.nameWithNamespace;
    }
    /**
     * @return The path of the upstream project.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return In `group/subgroup/project` or `user/project` format.
     * 
     */
    public String pathWithNamespace() {
        return this.pathWithNamespace;
    }
    /**
     * @return The web url of the upstream project.
     * 
     */
    public String webUrl() {
        return this.webUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectsProjectForkedFromProject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String httpUrlToRepo;
        private Integer id;
        private String name;
        private String nameWithNamespace;
        private String path;
        private String pathWithNamespace;
        private String webUrl;
        public Builder() {}
        public Builder(GetProjectsProjectForkedFromProject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpUrlToRepo = defaults.httpUrlToRepo;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nameWithNamespace = defaults.nameWithNamespace;
    	      this.path = defaults.path;
    	      this.pathWithNamespace = defaults.pathWithNamespace;
    	      this.webUrl = defaults.webUrl;
        }

        @CustomType.Setter
        public Builder httpUrlToRepo(String httpUrlToRepo) {
            if (httpUrlToRepo == null) {
              throw new MissingRequiredPropertyException("GetProjectsProjectForkedFromProject", "httpUrlToRepo");
            }
            this.httpUrlToRepo = httpUrlToRepo;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectsProjectForkedFromProject", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectsProjectForkedFromProject", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameWithNamespace(String nameWithNamespace) {
            if (nameWithNamespace == null) {
              throw new MissingRequiredPropertyException("GetProjectsProjectForkedFromProject", "nameWithNamespace");
            }
            this.nameWithNamespace = nameWithNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetProjectsProjectForkedFromProject", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pathWithNamespace(String pathWithNamespace) {
            if (pathWithNamespace == null) {
              throw new MissingRequiredPropertyException("GetProjectsProjectForkedFromProject", "pathWithNamespace");
            }
            this.pathWithNamespace = pathWithNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder webUrl(String webUrl) {
            if (webUrl == null) {
              throw new MissingRequiredPropertyException("GetProjectsProjectForkedFromProject", "webUrl");
            }
            this.webUrl = webUrl;
            return this;
        }
        public GetProjectsProjectForkedFromProject build() {
            final var _resultValue = new GetProjectsProjectForkedFromProject();
            _resultValue.httpUrlToRepo = httpUrlToRepo;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.nameWithNamespace = nameWithNamespace;
            _resultValue.path = path;
            _resultValue.pathWithNamespace = pathWithNamespace;
            _resultValue.webUrl = webUrl;
            return _resultValue;
        }
    }
}
