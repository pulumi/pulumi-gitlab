// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupAccessTokensAccessToken {
    private String accessLevel;
    private Boolean active;
    private String createdAt;
    private String expiresAt;
    private String group;
    private String id;
    private String name;
    private Boolean revoked;
    private List<String> scopes;
    private Integer userId;

    private GetGroupAccessTokensAccessToken() {}
    public String accessLevel() {
        return this.accessLevel;
    }
    public Boolean active() {
        return this.active;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public String expiresAt() {
        return this.expiresAt;
    }
    public String group() {
        return this.group;
    }
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public Boolean revoked() {
        return this.revoked;
    }
    public List<String> scopes() {
        return this.scopes;
    }
    public Integer userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupAccessTokensAccessToken defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessLevel;
        private Boolean active;
        private String createdAt;
        private String expiresAt;
        private String group;
        private String id;
        private String name;
        private Boolean revoked;
        private List<String> scopes;
        private Integer userId;
        public Builder() {}
        public Builder(GetGroupAccessTokensAccessToken defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.active = defaults.active;
    	      this.createdAt = defaults.createdAt;
    	      this.expiresAt = defaults.expiresAt;
    	      this.group = defaults.group;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.revoked = defaults.revoked;
    	      this.scopes = defaults.scopes;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder accessLevel(String accessLevel) {
            if (accessLevel == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "accessLevel");
            }
            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder expiresAt(String expiresAt) {
            if (expiresAt == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "expiresAt");
            }
            this.expiresAt = expiresAt;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder revoked(Boolean revoked) {
            if (revoked == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "revoked");
            }
            this.revoked = revoked;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder userId(Integer userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetGroupAccessTokensAccessToken", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetGroupAccessTokensAccessToken build() {
            final var _resultValue = new GetGroupAccessTokensAccessToken();
            _resultValue.accessLevel = accessLevel;
            _resultValue.active = active;
            _resultValue.createdAt = createdAt;
            _resultValue.expiresAt = expiresAt;
            _resultValue.group = group;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.revoked = revoked;
            _resultValue.scopes = scopes;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
