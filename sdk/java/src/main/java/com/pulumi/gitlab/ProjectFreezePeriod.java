// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectFreezePeriodArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectFreezePeriodState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * The `gitlab.ProjectFreezePeriod` resource allows to manage the lifecycle of a freeze period for a project.
 * 
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/freeze_periods/)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.ProjectFreezePeriod;
 * import com.pulumi.gitlab.ProjectFreezePeriodArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var schedule = new ProjectFreezePeriod("schedule", ProjectFreezePeriodArgs.builder()
 *             .project(foo.id())
 *             .freezeStart("0 23 * * 5")
 *             .freezeEnd("0 7 * * 1")
 *             .cronTimezone("UTC")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_freeze_period`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_freeze_period.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * GitLab project freeze periods can be imported using an id made up of `project_id:freeze_period_id`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectFreezePeriod:ProjectFreezePeriod schedule &#34;12345:1337&#34;
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectFreezePeriod:ProjectFreezePeriod")
public class ProjectFreezePeriod extends com.pulumi.resources.CustomResource {
    /**
     * The timezone.
     * 
     */
    @Export(name="cronTimezone", refs={String.class}, tree="[0]")
    private Output<String> cronTimezone;

    /**
     * @return The timezone.
     * 
     */
    public Output<String> cronTimezone() {
        return this.cronTimezone;
    }
    /**
     * End of the Freeze Period in cron format (for example, `0 2 * * *`).
     * 
     */
    @Export(name="freezeEnd", refs={String.class}, tree="[0]")
    private Output<String> freezeEnd;

    /**
     * @return End of the Freeze Period in cron format (for example, `0 2 * * *`).
     * 
     */
    public Output<String> freezeEnd() {
        return this.freezeEnd;
    }
    /**
     * Start of the Freeze Period in cron format (for example, `0 1 * * *`).
     * 
     */
    @Export(name="freezeStart", refs={String.class}, tree="[0]")
    private Output<String> freezeStart;

    /**
     * @return Start of the Freeze Period in cron format (for example, `0 1 * * *`).
     * 
     */
    public Output<String> freezeStart() {
        return this.freezeStart;
    }
    /**
     * The ID or path of the project to add the freeze period to.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or path of the project to add the freeze period to.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectFreezePeriod(java.lang.String name) {
        this(name, ProjectFreezePeriodArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectFreezePeriod(java.lang.String name, ProjectFreezePeriodArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectFreezePeriod(java.lang.String name, ProjectFreezePeriodArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectFreezePeriod:ProjectFreezePeriod", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectFreezePeriod(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectFreezePeriodState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectFreezePeriod:ProjectFreezePeriod", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectFreezePeriodArgs makeArgs(ProjectFreezePeriodArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectFreezePeriodArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectFreezePeriod get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectFreezePeriodState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectFreezePeriod(name, id, state, options);
    }
}
