// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectIssueBoardListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectIssueBoardListArgs Empty = new ProjectIssueBoardListArgs();

    /**
     * The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="assigneeId")
    private @Nullable Output<Integer> assigneeId;

    /**
     * @return The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<Integer>> assigneeId() {
        return Optional.ofNullable(this.assigneeId);
    }

    /**
     * The ID of the list
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The ID of the list
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="iterationId")
    private @Nullable Output<Integer> iterationId;

    /**
     * @return The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<Integer>> iterationId() {
        return Optional.ofNullable(this.iterationId);
    }

    /**
     * The ID of the label the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="labelId")
    private @Nullable Output<Integer> labelId;

    /**
     * @return The ID of the label the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<Integer>> labelId() {
        return Optional.ofNullable(this.labelId);
    }

    /**
     * The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    @Import(name="milestoneId")
    private @Nullable Output<Integer> milestoneId;

    /**
     * @return The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
     * 
     */
    public Optional<Output<Integer>> milestoneId() {
        return Optional.ofNullable(this.milestoneId);
    }

    /**
     * The position of the list within the board. The position for the list is based on the its position in the `lists` array.
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return The position of the list within the board. The position for the list is based on the its position in the `lists` array.
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    private ProjectIssueBoardListArgs() {}

    private ProjectIssueBoardListArgs(ProjectIssueBoardListArgs $) {
        this.assigneeId = $.assigneeId;
        this.id = $.id;
        this.iterationId = $.iterationId;
        this.labelId = $.labelId;
        this.milestoneId = $.milestoneId;
        this.position = $.position;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectIssueBoardListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectIssueBoardListArgs $;

        public Builder() {
            $ = new ProjectIssueBoardListArgs();
        }

        public Builder(ProjectIssueBoardListArgs defaults) {
            $ = new ProjectIssueBoardListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assigneeId The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder assigneeId(@Nullable Output<Integer> assigneeId) {
            $.assigneeId = assigneeId;
            return this;
        }

        /**
         * @param assigneeId The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder assigneeId(Integer assigneeId) {
            return assigneeId(Output.of(assigneeId));
        }

        /**
         * @param id The ID of the list
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the list
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param iterationId The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder iterationId(@Nullable Output<Integer> iterationId) {
            $.iterationId = iterationId;
            return this;
        }

        /**
         * @param iterationId The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder iterationId(Integer iterationId) {
            return iterationId(Output.of(iterationId));
        }

        /**
         * @param labelId The ID of the label the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder labelId(@Nullable Output<Integer> labelId) {
            $.labelId = labelId;
            return this;
        }

        /**
         * @param labelId The ID of the label the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder labelId(Integer labelId) {
            return labelId(Output.of(labelId));
        }

        /**
         * @param milestoneId The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(@Nullable Output<Integer> milestoneId) {
            $.milestoneId = milestoneId;
            return this;
        }

        /**
         * @param milestoneId The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
         * 
         * @return builder
         * 
         */
        public Builder milestoneId(Integer milestoneId) {
            return milestoneId(Output.of(milestoneId));
        }

        /**
         * @param position The position of the list within the board. The position for the list is based on the its position in the `lists` array.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position The position of the list within the board. The position for the list is based on the its position in the `lists` array.
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        public ProjectIssueBoardListArgs build() {
            return $;
        }
    }

}
