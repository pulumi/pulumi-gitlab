// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectApprovalRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectApprovalRuleState Empty = new ProjectApprovalRuleState();

    /**
     * Whether the rule is applied to all protected branches. If set to &#39;true&#39;, the value of `protected_branch_ids` is ignored. Default is &#39;false&#39;.
     * 
     */
    @Import(name="appliesToAllProtectedBranches")
    private @Nullable Output<Boolean> appliesToAllProtectedBranches;

    /**
     * @return Whether the rule is applied to all protected branches. If set to &#39;true&#39;, the value of `protected_branch_ids` is ignored. Default is &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> appliesToAllProtectedBranches() {
        return Optional.ofNullable(this.appliesToAllProtectedBranches);
    }

    /**
     * The number of approvals required for this rule.
     * 
     */
    @Import(name="approvalsRequired")
    private @Nullable Output<Integer> approvalsRequired;

    /**
     * @return The number of approvals required for this rule.
     * 
     */
    public Optional<Output<Integer>> approvalsRequired() {
        return Optional.ofNullable(this.approvalsRequired);
    }

    /**
     * When this flag is set, the default `any_approver` rule will not be imported if present.
     * 
     */
    @Import(name="disableImportingDefaultAnyApproverRuleOnCreate")
    private @Nullable Output<Boolean> disableImportingDefaultAnyApproverRuleOnCreate;

    /**
     * @return When this flag is set, the default `any_approver` rule will not be imported if present.
     * 
     */
    public Optional<Output<Boolean>> disableImportingDefaultAnyApproverRuleOnCreate() {
        return Optional.ofNullable(this.disableImportingDefaultAnyApproverRuleOnCreate);
    }

    /**
     * A list of group IDs whose members can approve of the merge request.
     * 
     */
    @Import(name="groupIds")
    private @Nullable Output<List<Integer>> groupIds;

    /**
     * @return A list of group IDs whose members can approve of the merge request.
     * 
     */
    public Optional<Output<List<Integer>>> groupIds() {
        return Optional.ofNullable(this.groupIds);
    }

    /**
     * The name of the approval rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the approval rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name or id of the project to add the approval rules.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The name or id of the project to add the approval rules.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A list of protected branch IDs (not branch names) for which the rule applies.
     * 
     */
    @Import(name="protectedBranchIds")
    private @Nullable Output<List<Integer>> protectedBranchIds;

    /**
     * @return A list of protected branch IDs (not branch names) for which the rule applies.
     * 
     */
    public Optional<Output<List<Integer>>> protectedBranchIds() {
        return Optional.ofNullable(this.protectedBranchIds);
    }

    /**
     * Report type is required when the rule_type is `report_approver`. Valid values are `code_coverage`.
     * 
     */
    @Import(name="reportType")
    private @Nullable Output<String> reportType;

    /**
     * @return Report type is required when the rule_type is `report_approver`. Valid values are `code_coverage`.
     * 
     */
    public Optional<Output<String>> reportType() {
        return Optional.ofNullable(this.reportType);
    }

    /**
     * String, defaults to &#39;regular&#39;. The type of rule. `any_approver` is a pre-configured default rule with `approvals_required` at `0`. Valid values are `regular`, `any_approver`, `report_approver`.
     * 
     */
    @Import(name="ruleType")
    private @Nullable Output<String> ruleType;

    /**
     * @return String, defaults to &#39;regular&#39;. The type of rule. `any_approver` is a pre-configured default rule with `approvals_required` at `0`. Valid values are `regular`, `any_approver`, `report_approver`.
     * 
     */
    public Optional<Output<String>> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    /**
     * A list of specific User IDs to add to the list of approvers.
     * 
     */
    @Import(name="userIds")
    private @Nullable Output<List<Integer>> userIds;

    /**
     * @return A list of specific User IDs to add to the list of approvers.
     * 
     */
    public Optional<Output<List<Integer>>> userIds() {
        return Optional.ofNullable(this.userIds);
    }

    private ProjectApprovalRuleState() {}

    private ProjectApprovalRuleState(ProjectApprovalRuleState $) {
        this.appliesToAllProtectedBranches = $.appliesToAllProtectedBranches;
        this.approvalsRequired = $.approvalsRequired;
        this.disableImportingDefaultAnyApproverRuleOnCreate = $.disableImportingDefaultAnyApproverRuleOnCreate;
        this.groupIds = $.groupIds;
        this.name = $.name;
        this.project = $.project;
        this.protectedBranchIds = $.protectedBranchIds;
        this.reportType = $.reportType;
        this.ruleType = $.ruleType;
        this.userIds = $.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectApprovalRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectApprovalRuleState $;

        public Builder() {
            $ = new ProjectApprovalRuleState();
        }

        public Builder(ProjectApprovalRuleState defaults) {
            $ = new ProjectApprovalRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliesToAllProtectedBranches Whether the rule is applied to all protected branches. If set to &#39;true&#39;, the value of `protected_branch_ids` is ignored. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder appliesToAllProtectedBranches(@Nullable Output<Boolean> appliesToAllProtectedBranches) {
            $.appliesToAllProtectedBranches = appliesToAllProtectedBranches;
            return this;
        }

        /**
         * @param appliesToAllProtectedBranches Whether the rule is applied to all protected branches. If set to &#39;true&#39;, the value of `protected_branch_ids` is ignored. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder appliesToAllProtectedBranches(Boolean appliesToAllProtectedBranches) {
            return appliesToAllProtectedBranches(Output.of(appliesToAllProtectedBranches));
        }

        /**
         * @param approvalsRequired The number of approvals required for this rule.
         * 
         * @return builder
         * 
         */
        public Builder approvalsRequired(@Nullable Output<Integer> approvalsRequired) {
            $.approvalsRequired = approvalsRequired;
            return this;
        }

        /**
         * @param approvalsRequired The number of approvals required for this rule.
         * 
         * @return builder
         * 
         */
        public Builder approvalsRequired(Integer approvalsRequired) {
            return approvalsRequired(Output.of(approvalsRequired));
        }

        /**
         * @param disableImportingDefaultAnyApproverRuleOnCreate When this flag is set, the default `any_approver` rule will not be imported if present.
         * 
         * @return builder
         * 
         */
        public Builder disableImportingDefaultAnyApproverRuleOnCreate(@Nullable Output<Boolean> disableImportingDefaultAnyApproverRuleOnCreate) {
            $.disableImportingDefaultAnyApproverRuleOnCreate = disableImportingDefaultAnyApproverRuleOnCreate;
            return this;
        }

        /**
         * @param disableImportingDefaultAnyApproverRuleOnCreate When this flag is set, the default `any_approver` rule will not be imported if present.
         * 
         * @return builder
         * 
         */
        public Builder disableImportingDefaultAnyApproverRuleOnCreate(Boolean disableImportingDefaultAnyApproverRuleOnCreate) {
            return disableImportingDefaultAnyApproverRuleOnCreate(Output.of(disableImportingDefaultAnyApproverRuleOnCreate));
        }

        /**
         * @param groupIds A list of group IDs whose members can approve of the merge request.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(@Nullable Output<List<Integer>> groupIds) {
            $.groupIds = groupIds;
            return this;
        }

        /**
         * @param groupIds A list of group IDs whose members can approve of the merge request.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(List<Integer> groupIds) {
            return groupIds(Output.of(groupIds));
        }

        /**
         * @param groupIds A list of group IDs whose members can approve of the merge request.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(Integer... groupIds) {
            return groupIds(List.of(groupIds));
        }

        /**
         * @param name The name of the approval rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the approval rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The name or id of the project to add the approval rules.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or id of the project to add the approval rules.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protectedBranchIds A list of protected branch IDs (not branch names) for which the rule applies.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(@Nullable Output<List<Integer>> protectedBranchIds) {
            $.protectedBranchIds = protectedBranchIds;
            return this;
        }

        /**
         * @param protectedBranchIds A list of protected branch IDs (not branch names) for which the rule applies.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(List<Integer> protectedBranchIds) {
            return protectedBranchIds(Output.of(protectedBranchIds));
        }

        /**
         * @param protectedBranchIds A list of protected branch IDs (not branch names) for which the rule applies.
         * 
         * @return builder
         * 
         */
        public Builder protectedBranchIds(Integer... protectedBranchIds) {
            return protectedBranchIds(List.of(protectedBranchIds));
        }

        /**
         * @param reportType Report type is required when the rule_type is `report_approver`. Valid values are `code_coverage`.
         * 
         * @return builder
         * 
         */
        public Builder reportType(@Nullable Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        /**
         * @param reportType Report type is required when the rule_type is `report_approver`. Valid values are `code_coverage`.
         * 
         * @return builder
         * 
         */
        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        /**
         * @param ruleType String, defaults to &#39;regular&#39;. The type of rule. `any_approver` is a pre-configured default rule with `approvals_required` at `0`. Valid values are `regular`, `any_approver`, `report_approver`.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(@Nullable Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType String, defaults to &#39;regular&#39;. The type of rule. `any_approver` is a pre-configured default rule with `approvals_required` at `0`. Valid values are `regular`, `any_approver`, `report_approver`.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        /**
         * @param userIds A list of specific User IDs to add to the list of approvers.
         * 
         * @return builder
         * 
         */
        public Builder userIds(@Nullable Output<List<Integer>> userIds) {
            $.userIds = userIds;
            return this;
        }

        /**
         * @param userIds A list of specific User IDs to add to the list of approvers.
         * 
         * @return builder
         * 
         */
        public Builder userIds(List<Integer> userIds) {
            return userIds(Output.of(userIds));
        }

        /**
         * @param userIds A list of specific User IDs to add to the list of approvers.
         * 
         * @return builder
         * 
         */
        public Builder userIds(Integer... userIds) {
            return userIds(List.of(userIds));
        }

        public ProjectApprovalRuleState build() {
            return $;
        }
    }

}
