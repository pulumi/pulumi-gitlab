// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetProjectTagCommit;
import com.pulumi.gitlab.outputs.GetProjectTagRelease;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectTagResult {
    /**
     * @return The commit associated with the tag.
     * 
     */
    private List<GetProjectTagCommit> commits;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The message of the annotated tag.
     * 
     */
    private String message;
    /**
     * @return The name of a tag.
     * 
     */
    private String name;
    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    private String project;
    /**
     * @return Bool, true if tag has tag protection.
     * 
     */
    private Boolean protected_;
    /**
     * @return The release associated with the tag.
     * 
     */
    private List<GetProjectTagRelease> releases;
    /**
     * @return The unique id assigned to the commit by Gitlab.
     * 
     */
    private String target;

    private GetProjectTagResult() {}
    /**
     * @return The commit associated with the tag.
     * 
     */
    public List<GetProjectTagCommit> commits() {
        return this.commits;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The message of the annotated tag.
     * 
     */
    public String message() {
        return this.message;
    }
    /**
     * @return The name of a tag.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Bool, true if tag has tag protection.
     * 
     */
    public Boolean protected_() {
        return this.protected_;
    }
    /**
     * @return The release associated with the tag.
     * 
     */
    public List<GetProjectTagRelease> releases() {
        return this.releases;
    }
    /**
     * @return The unique id assigned to the commit by Gitlab.
     * 
     */
    public String target() {
        return this.target;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectTagResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetProjectTagCommit> commits;
        private String id;
        private String message;
        private String name;
        private String project;
        private Boolean protected_;
        private List<GetProjectTagRelease> releases;
        private String target;
        public Builder() {}
        public Builder(GetProjectTagResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commits = defaults.commits;
    	      this.id = defaults.id;
    	      this.message = defaults.message;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.protected_ = defaults.protected_;
    	      this.releases = defaults.releases;
    	      this.target = defaults.target;
        }

        @CustomType.Setter
        public Builder commits(List<GetProjectTagCommit> commits) {
            if (commits == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "commits");
            }
            this.commits = commits;
            return this;
        }
        public Builder commits(GetProjectTagCommit... commits) {
            return commits(List.of(commits));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            if (message == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "message");
            }
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter("protected")
        public Builder protected_(Boolean protected_) {
            if (protected_ == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "protected_");
            }
            this.protected_ = protected_;
            return this;
        }
        @CustomType.Setter
        public Builder releases(List<GetProjectTagRelease> releases) {
            if (releases == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "releases");
            }
            this.releases = releases;
            return this;
        }
        public Builder releases(GetProjectTagRelease... releases) {
            return releases(List.of(releases));
        }
        @CustomType.Setter
        public Builder target(String target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("GetProjectTagResult", "target");
            }
            this.target = target;
            return this;
        }
        public GetProjectTagResult build() {
            final var _resultValue = new GetProjectTagResult();
            _resultValue.commits = commits;
            _resultValue.id = id;
            _resultValue.message = message;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.protected_ = protected_;
            _resultValue.releases = releases;
            _resultValue.target = target;
            return _resultValue;
        }
    }
}
