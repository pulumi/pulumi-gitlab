// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCurrentUserResult {
    /**
     * @return Indicates if the user is a bot.
     * 
     */
    private Boolean bot;
    /**
     * @return Global ID of the user. This is in the form of a GraphQL globally unique ID.
     * 
     */
    private String globalId;
    /**
     * @return Personal namespace of the user. This is in the form of a GraphQL globally unique ID.
     * 
     */
    private String globalNamespaceId;
    /**
     * @return Group count for the user.
     * 
     */
    private Integer groupCount;
    /**
     * @return ID of the user.
     * 
     */
    private String id;
    /**
     * @return Human-readable name of the user. Returns **** if the user is a project bot and the requester does not have permission to view the project.
     * 
     */
    private String name;
    /**
     * @return Personal namespace of the user.
     * 
     */
    private String namespaceId;
    /**
     * @return User’s public email.
     * 
     */
    private String publicEmail;
    /**
     * @return Username of the user. Unique within this instance of GitLab.
     * 
     */
    private String username;

    private GetCurrentUserResult() {}
    /**
     * @return Indicates if the user is a bot.
     * 
     */
    public Boolean bot() {
        return this.bot;
    }
    /**
     * @return Global ID of the user. This is in the form of a GraphQL globally unique ID.
     * 
     */
    public String globalId() {
        return this.globalId;
    }
    /**
     * @return Personal namespace of the user. This is in the form of a GraphQL globally unique ID.
     * 
     */
    public String globalNamespaceId() {
        return this.globalNamespaceId;
    }
    /**
     * @return Group count for the user.
     * 
     */
    public Integer groupCount() {
        return this.groupCount;
    }
    /**
     * @return ID of the user.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Human-readable name of the user. Returns **** if the user is a project bot and the requester does not have permission to view the project.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Personal namespace of the user.
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    /**
     * @return User’s public email.
     * 
     */
    public String publicEmail() {
        return this.publicEmail;
    }
    /**
     * @return Username of the user. Unique within this instance of GitLab.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCurrentUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean bot;
        private String globalId;
        private String globalNamespaceId;
        private Integer groupCount;
        private String id;
        private String name;
        private String namespaceId;
        private String publicEmail;
        private String username;
        public Builder() {}
        public Builder(GetCurrentUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bot = defaults.bot;
    	      this.globalId = defaults.globalId;
    	      this.globalNamespaceId = defaults.globalNamespaceId;
    	      this.groupCount = defaults.groupCount;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namespaceId = defaults.namespaceId;
    	      this.publicEmail = defaults.publicEmail;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder bot(Boolean bot) {
            this.bot = Objects.requireNonNull(bot);
            return this;
        }
        @CustomType.Setter
        public Builder globalId(String globalId) {
            this.globalId = Objects.requireNonNull(globalId);
            return this;
        }
        @CustomType.Setter
        public Builder globalNamespaceId(String globalNamespaceId) {
            this.globalNamespaceId = Objects.requireNonNull(globalNamespaceId);
            return this;
        }
        @CustomType.Setter
        public Builder groupCount(Integer groupCount) {
            this.groupCount = Objects.requireNonNull(groupCount);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(String namespaceId) {
            this.namespaceId = Objects.requireNonNull(namespaceId);
            return this;
        }
        @CustomType.Setter
        public Builder publicEmail(String publicEmail) {
            this.publicEmail = Objects.requireNonNull(publicEmail);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public GetCurrentUserResult build() {
            final var _resultValue = new GetCurrentUserResult();
            _resultValue.bot = bot;
            _resultValue.globalId = globalId;
            _resultValue.globalNamespaceId = globalNamespaceId;
            _resultValue.groupCount = groupCount;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.namespaceId = namespaceId;
            _resultValue.publicEmail = publicEmail;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
