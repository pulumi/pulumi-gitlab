// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectIssuesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectIssuesArgs Empty = new GetProjectIssuesArgs();

    /**
     * Return issues assigned to the given user id. Mutually exclusive with assignee_username. None returns unassigned issues. Any returns issues with an assignee.
     * 
     */
    @Import(name="assigneeId")
    private @Nullable Output<Integer> assigneeId;

    /**
     * @return Return issues assigned to the given user id. Mutually exclusive with assignee_username. None returns unassigned issues. Any returns issues with an assignee.
     * 
     */
    public Optional<Output<Integer>> assigneeId() {
        return Optional.ofNullable(this.assigneeId);
    }

    /**
     * Return issues assigned to the given username. Similar to assignee*id and mutually exclusive with assignee*id. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.
     * 
     */
    @Import(name="assigneeUsername")
    private @Nullable Output<String> assigneeUsername;

    /**
     * @return Return issues assigned to the given username. Similar to assignee*id and mutually exclusive with assignee*id. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.
     * 
     */
    public Optional<Output<String>> assigneeUsername() {
        return Optional.ofNullable(this.assigneeUsername);
    }

    /**
     * Return issues created by the given user id. Combine with scope=all or scope=assigned*to*me.
     * 
     */
    @Import(name="authorId")
    private @Nullable Output<Integer> authorId;

    /**
     * @return Return issues created by the given user id. Combine with scope=all or scope=assigned*to*me.
     * 
     */
    public Optional<Output<Integer>> authorId() {
        return Optional.ofNullable(this.authorId);
    }

    /**
     * Filter confidential or public issues.
     * 
     */
    @Import(name="confidential")
    private @Nullable Output<Boolean> confidential;

    /**
     * @return Filter confidential or public issues.
     * 
     */
    public Optional<Output<Boolean>> confidential() {
        return Optional.ofNullable(this.confidential);
    }

    /**
     * Return issues created on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    @Import(name="createdAfter")
    private @Nullable Output<String> createdAfter;

    /**
     * @return Return issues created on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<Output<String>> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }

    /**
     * Return issues created on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    @Import(name="createdBefore")
    private @Nullable Output<String> createdBefore;

    /**
     * @return Return issues created on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<Output<String>> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }

    /**
     * Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), any, today, tomorrow, overdue, week, month, next*month*and*previous*two_weeks.
     * 
     */
    @Import(name="dueDate")
    private @Nullable Output<String> dueDate;

    /**
     * @return Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), any, today, tomorrow, overdue, week, month, next*month*and*previous*two_weeks.
     * 
     */
    public Optional<Output<String>> dueDate() {
        return Optional.ofNullable(this.dueDate);
    }

    /**
     * Return only the issues having the given iid
     * 
     */
    @Import(name="iids")
    private @Nullable Output<List<Integer>> iids;

    /**
     * @return Return only the issues having the given iid
     * 
     */
    public Optional<Output<List<Integer>>> iids() {
        return Optional.ofNullable(this.iids);
    }

    /**
     * Filter to a given type of issue. Valid values are [issue incident test_case].
     * 
     */
    @Import(name="issueType")
    private @Nullable Output<String> issueType;

    /**
     * @return Filter to a given type of issue. Valid values are [issue incident test_case].
     * 
     */
    public Optional<Output<String>> issueType() {
        return Optional.ofNullable(this.issueType);
    }

    /**
     * Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.
     * 
     */
    @Import(name="milestone")
    private @Nullable Output<String> milestone;

    /**
     * @return The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.
     * 
     */
    public Optional<Output<String>> milestone() {
        return Optional.ofNullable(this.milestone);
    }

    /**
     * Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction.
     * 
     */
    @Import(name="myReactionEmoji")
    private @Nullable Output<String> myReactionEmoji;

    /**
     * @return Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction.
     * 
     */
    public Optional<Output<String>> myReactionEmoji() {
        return Optional.ofNullable(this.myReactionEmoji);
    }

    /**
     * Return issues that do not match the assignee id.
     * 
     */
    @Import(name="notAssigneeId")
    private @Nullable Output<Integer> notAssigneeId;

    /**
     * @return Return issues that do not match the assignee id.
     * 
     */
    public Optional<Output<Integer>> notAssigneeId() {
        return Optional.ofNullable(this.notAssigneeId);
    }

    /**
     * Return issues that do not match the author id.
     * 
     */
    @Import(name="notAuthorId")
    private @Nullable Output<Integer> notAuthorId;

    /**
     * @return Return issues that do not match the author id.
     * 
     */
    public Optional<Output<Integer>> notAuthorId() {
        return Optional.ofNullable(this.notAuthorId);
    }

    /**
     * Return issues that do not match the labels.
     * 
     */
    @Import(name="notLabels")
    private @Nullable Output<List<String>> notLabels;

    /**
     * @return Return issues that do not match the labels.
     * 
     */
    public Optional<Output<List<String>>> notLabels() {
        return Optional.ofNullable(this.notLabels);
    }

    /**
     * Return issues that do not match the milestone.
     * 
     */
    @Import(name="notMilestone")
    private @Nullable Output<String> notMilestone;

    /**
     * @return Return issues that do not match the milestone.
     * 
     */
    public Optional<Output<String>> notMilestone() {
        return Optional.ofNullable(this.notMilestone);
    }

    /**
     * Return issues not reacted by the authenticated user by the given emoji.
     * 
     */
    @Import(name="notMyReactionEmoji")
    private @Nullable Output<String> notMyReactionEmoji;

    /**
     * @return Return issues not reacted by the authenticated user by the given emoji.
     * 
     */
    public Optional<Output<String>> notMyReactionEmoji() {
        return Optional.ofNullable(this.notMyReactionEmoji);
    }

    /**
     * Return issues ordered by. Valid values are `created_at`, `updated_at`, `priority`, `due_date`, `relative_position`, `label_priority`, `milestone_due`, `popularity`, `weight`. Default is created_at
     * 
     */
    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    /**
     * @return Return issues ordered by. Valid values are `created_at`, `updated_at`, `priority`, `due_date`, `relative_position`, `label_priority`, `milestone_due`, `popularity`, `weight`. Default is created_at
     * 
     */
    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * The name or id of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The name or id of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Return issues for the given scope. Valid values are `created_by_me`, `assigned_to_me`, `all`. Defaults to all.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Return issues for the given scope. Valid values are `created_by_me`, `assigned_to_me`, `all`. Defaults to all.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Search project issues against their title and description
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Search project issues against their title and description
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Return issues sorted in asc or desc order. Default is desc
     * 
     */
    @Import(name="sort")
    private @Nullable Output<String> sort;

    /**
     * @return Return issues sorted in asc or desc order. Default is desc
     * 
     */
    public Optional<Output<String>> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * Return issues updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    @Import(name="updatedAfter")
    private @Nullable Output<String> updatedAfter;

    /**
     * @return Return issues updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<Output<String>> updatedAfter() {
        return Optional.ofNullable(this.updatedAfter);
    }

    /**
     * Return issues updated on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    @Import(name="updatedBefore")
    private @Nullable Output<String> updatedBefore;

    /**
     * @return Return issues updated on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
     * 
     */
    public Optional<Output<String>> updatedBefore() {
        return Optional.ofNullable(this.updatedBefore);
    }

    /**
     * Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    /**
     * If true, the response returns more details for each label in labels field: :name, :color, :description, :description*html, :text*color. Default is false.
     * 
     */
    @Import(name="withLabelsDetails")
    private @Nullable Output<Boolean> withLabelsDetails;

    /**
     * @return If true, the response returns more details for each label in labels field: :name, :color, :description, :description*html, :text*color. Default is false.
     * 
     */
    public Optional<Output<Boolean>> withLabelsDetails() {
        return Optional.ofNullable(this.withLabelsDetails);
    }

    private GetProjectIssuesArgs() {}

    private GetProjectIssuesArgs(GetProjectIssuesArgs $) {
        this.assigneeId = $.assigneeId;
        this.assigneeUsername = $.assigneeUsername;
        this.authorId = $.authorId;
        this.confidential = $.confidential;
        this.createdAfter = $.createdAfter;
        this.createdBefore = $.createdBefore;
        this.dueDate = $.dueDate;
        this.iids = $.iids;
        this.issueType = $.issueType;
        this.labels = $.labels;
        this.milestone = $.milestone;
        this.myReactionEmoji = $.myReactionEmoji;
        this.notAssigneeId = $.notAssigneeId;
        this.notAuthorId = $.notAuthorId;
        this.notLabels = $.notLabels;
        this.notMilestone = $.notMilestone;
        this.notMyReactionEmoji = $.notMyReactionEmoji;
        this.orderBy = $.orderBy;
        this.project = $.project;
        this.scope = $.scope;
        this.search = $.search;
        this.sort = $.sort;
        this.updatedAfter = $.updatedAfter;
        this.updatedBefore = $.updatedBefore;
        this.weight = $.weight;
        this.withLabelsDetails = $.withLabelsDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectIssuesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectIssuesArgs $;

        public Builder() {
            $ = new GetProjectIssuesArgs();
        }

        public Builder(GetProjectIssuesArgs defaults) {
            $ = new GetProjectIssuesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assigneeId Return issues assigned to the given user id. Mutually exclusive with assignee_username. None returns unassigned issues. Any returns issues with an assignee.
         * 
         * @return builder
         * 
         */
        public Builder assigneeId(@Nullable Output<Integer> assigneeId) {
            $.assigneeId = assigneeId;
            return this;
        }

        /**
         * @param assigneeId Return issues assigned to the given user id. Mutually exclusive with assignee_username. None returns unassigned issues. Any returns issues with an assignee.
         * 
         * @return builder
         * 
         */
        public Builder assigneeId(Integer assigneeId) {
            return assigneeId(Output.of(assigneeId));
        }

        /**
         * @param assigneeUsername Return issues assigned to the given username. Similar to assignee*id and mutually exclusive with assignee*id. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.
         * 
         * @return builder
         * 
         */
        public Builder assigneeUsername(@Nullable Output<String> assigneeUsername) {
            $.assigneeUsername = assigneeUsername;
            return this;
        }

        /**
         * @param assigneeUsername Return issues assigned to the given username. Similar to assignee*id and mutually exclusive with assignee*id. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.
         * 
         * @return builder
         * 
         */
        public Builder assigneeUsername(String assigneeUsername) {
            return assigneeUsername(Output.of(assigneeUsername));
        }

        /**
         * @param authorId Return issues created by the given user id. Combine with scope=all or scope=assigned*to*me.
         * 
         * @return builder
         * 
         */
        public Builder authorId(@Nullable Output<Integer> authorId) {
            $.authorId = authorId;
            return this;
        }

        /**
         * @param authorId Return issues created by the given user id. Combine with scope=all or scope=assigned*to*me.
         * 
         * @return builder
         * 
         */
        public Builder authorId(Integer authorId) {
            return authorId(Output.of(authorId));
        }

        /**
         * @param confidential Filter confidential or public issues.
         * 
         * @return builder
         * 
         */
        public Builder confidential(@Nullable Output<Boolean> confidential) {
            $.confidential = confidential;
            return this;
        }

        /**
         * @param confidential Filter confidential or public issues.
         * 
         * @return builder
         * 
         */
        public Builder confidential(Boolean confidential) {
            return confidential(Output.of(confidential));
        }

        /**
         * @param createdAfter Return issues created on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(@Nullable Output<String> createdAfter) {
            $.createdAfter = createdAfter;
            return this;
        }

        /**
         * @param createdAfter Return issues created on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(String createdAfter) {
            return createdAfter(Output.of(createdAfter));
        }

        /**
         * @param createdBefore Return issues created on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(@Nullable Output<String> createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        /**
         * @param createdBefore Return issues created on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder createdBefore(String createdBefore) {
            return createdBefore(Output.of(createdBefore));
        }

        /**
         * @param dueDate Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), any, today, tomorrow, overdue, week, month, next*month*and*previous*two_weeks.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(@Nullable Output<String> dueDate) {
            $.dueDate = dueDate;
            return this;
        }

        /**
         * @param dueDate Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), any, today, tomorrow, overdue, week, month, next*month*and*previous*two_weeks.
         * 
         * @return builder
         * 
         */
        public Builder dueDate(String dueDate) {
            return dueDate(Output.of(dueDate));
        }

        /**
         * @param iids Return only the issues having the given iid
         * 
         * @return builder
         * 
         */
        public Builder iids(@Nullable Output<List<Integer>> iids) {
            $.iids = iids;
            return this;
        }

        /**
         * @param iids Return only the issues having the given iid
         * 
         * @return builder
         * 
         */
        public Builder iids(List<Integer> iids) {
            return iids(Output.of(iids));
        }

        /**
         * @param iids Return only the issues having the given iid
         * 
         * @return builder
         * 
         */
        public Builder iids(Integer... iids) {
            return iids(List.of(iids));
        }

        /**
         * @param issueType Filter to a given type of issue. Valid values are [issue incident test_case].
         * 
         * @return builder
         * 
         */
        public Builder issueType(@Nullable Output<String> issueType) {
            $.issueType = issueType;
            return this;
        }

        /**
         * @param issueType Filter to a given type of issue. Valid values are [issue incident test_case].
         * 
         * @return builder
         * 
         */
        public Builder issueType(String issueType) {
            return issueType(Output.of(issueType));
        }

        /**
         * @param labels Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param milestone The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.
         * 
         * @return builder
         * 
         */
        public Builder milestone(@Nullable Output<String> milestone) {
            $.milestone = milestone;
            return this;
        }

        /**
         * @param milestone The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.
         * 
         * @return builder
         * 
         */
        public Builder milestone(String milestone) {
            return milestone(Output.of(milestone));
        }

        /**
         * @param myReactionEmoji Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction.
         * 
         * @return builder
         * 
         */
        public Builder myReactionEmoji(@Nullable Output<String> myReactionEmoji) {
            $.myReactionEmoji = myReactionEmoji;
            return this;
        }

        /**
         * @param myReactionEmoji Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction.
         * 
         * @return builder
         * 
         */
        public Builder myReactionEmoji(String myReactionEmoji) {
            return myReactionEmoji(Output.of(myReactionEmoji));
        }

        /**
         * @param notAssigneeId Return issues that do not match the assignee id.
         * 
         * @return builder
         * 
         */
        public Builder notAssigneeId(@Nullable Output<Integer> notAssigneeId) {
            $.notAssigneeId = notAssigneeId;
            return this;
        }

        /**
         * @param notAssigneeId Return issues that do not match the assignee id.
         * 
         * @return builder
         * 
         */
        public Builder notAssigneeId(Integer notAssigneeId) {
            return notAssigneeId(Output.of(notAssigneeId));
        }

        /**
         * @param notAuthorId Return issues that do not match the author id.
         * 
         * @return builder
         * 
         */
        public Builder notAuthorId(@Nullable Output<Integer> notAuthorId) {
            $.notAuthorId = notAuthorId;
            return this;
        }

        /**
         * @param notAuthorId Return issues that do not match the author id.
         * 
         * @return builder
         * 
         */
        public Builder notAuthorId(Integer notAuthorId) {
            return notAuthorId(Output.of(notAuthorId));
        }

        /**
         * @param notLabels Return issues that do not match the labels.
         * 
         * @return builder
         * 
         */
        public Builder notLabels(@Nullable Output<List<String>> notLabels) {
            $.notLabels = notLabels;
            return this;
        }

        /**
         * @param notLabels Return issues that do not match the labels.
         * 
         * @return builder
         * 
         */
        public Builder notLabels(List<String> notLabels) {
            return notLabels(Output.of(notLabels));
        }

        /**
         * @param notLabels Return issues that do not match the labels.
         * 
         * @return builder
         * 
         */
        public Builder notLabels(String... notLabels) {
            return notLabels(List.of(notLabels));
        }

        /**
         * @param notMilestone Return issues that do not match the milestone.
         * 
         * @return builder
         * 
         */
        public Builder notMilestone(@Nullable Output<String> notMilestone) {
            $.notMilestone = notMilestone;
            return this;
        }

        /**
         * @param notMilestone Return issues that do not match the milestone.
         * 
         * @return builder
         * 
         */
        public Builder notMilestone(String notMilestone) {
            return notMilestone(Output.of(notMilestone));
        }

        /**
         * @param notMyReactionEmoji Return issues not reacted by the authenticated user by the given emoji.
         * 
         * @return builder
         * 
         */
        public Builder notMyReactionEmoji(@Nullable Output<String> notMyReactionEmoji) {
            $.notMyReactionEmoji = notMyReactionEmoji;
            return this;
        }

        /**
         * @param notMyReactionEmoji Return issues not reacted by the authenticated user by the given emoji.
         * 
         * @return builder
         * 
         */
        public Builder notMyReactionEmoji(String notMyReactionEmoji) {
            return notMyReactionEmoji(Output.of(notMyReactionEmoji));
        }

        /**
         * @param orderBy Return issues ordered by. Valid values are `created_at`, `updated_at`, `priority`, `due_date`, `relative_position`, `label_priority`, `milestone_due`, `popularity`, `weight`. Default is created_at
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param orderBy Return issues ordered by. Valid values are `created_at`, `updated_at`, `priority`, `due_date`, `relative_position`, `label_priority`, `milestone_due`, `popularity`, `weight`. Default is created_at
         * 
         * @return builder
         * 
         */
        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        /**
         * @param project The name or id of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or id of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scope Return issues for the given scope. Valid values are `created_by_me`, `assigned_to_me`, `all`. Defaults to all.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Return issues for the given scope. Valid values are `created_by_me`, `assigned_to_me`, `all`. Defaults to all.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param search Search project issues against their title and description
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Search project issues against their title and description
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param sort Return issues sorted in asc or desc order. Default is desc
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable Output<String> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Return issues sorted in asc or desc order. Default is desc
         * 
         * @return builder
         * 
         */
        public Builder sort(String sort) {
            return sort(Output.of(sort));
        }

        /**
         * @param updatedAfter Return issues updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder updatedAfter(@Nullable Output<String> updatedAfter) {
            $.updatedAfter = updatedAfter;
            return this;
        }

        /**
         * @param updatedAfter Return issues updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder updatedAfter(String updatedAfter) {
            return updatedAfter(Output.of(updatedAfter));
        }

        /**
         * @param updatedBefore Return issues updated on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder updatedBefore(@Nullable Output<String> updatedBefore) {
            $.updatedBefore = updatedBefore;
            return this;
        }

        /**
         * @param updatedBefore Return issues updated on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
         * 
         * @return builder
         * 
         */
        public Builder updatedBefore(String updatedBefore) {
            return updatedBefore(Output.of(updatedBefore));
        }

        /**
         * @param weight Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        /**
         * @param withLabelsDetails If true, the response returns more details for each label in labels field: :name, :color, :description, :description*html, :text*color. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder withLabelsDetails(@Nullable Output<Boolean> withLabelsDetails) {
            $.withLabelsDetails = withLabelsDetails;
            return this;
        }

        /**
         * @param withLabelsDetails If true, the response returns more details for each label in labels field: :name, :color, :description, :description*html, :text*color. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder withLabelsDetails(Boolean withLabelsDetails) {
            return withLabelsDetails(Output.of(withLabelsDetails));
        }

        public GetProjectIssuesArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectIssuesArgs", "project");
            }
            return $;
        }
    }

}
