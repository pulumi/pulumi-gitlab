// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.outputs.GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceDeployKeysDeployKey {
    /**
     * @return The creation date of the deploy key. In RFC3339 format.
     * 
     */
    private String createdAt;
    /**
     * @return The fingerprint of the deploy key.
     * 
     */
    private String fingerprint;
    /**
     * @return The ID of the deploy key.
     * 
     */
    private Integer id;
    /**
     * @return The deploy key.
     * 
     */
    private String key;
    /**
     * @return The list of projects that the deploy key has write access to.
     * 
     */
    private List<GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess> projectsWithWriteAccesses;
    /**
     * @return The title of the deploy key.
     * 
     */
    private String title;

    private GetInstanceDeployKeysDeployKey() {}
    /**
     * @return The creation date of the deploy key. In RFC3339 format.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The fingerprint of the deploy key.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The ID of the deploy key.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The deploy key.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The list of projects that the deploy key has write access to.
     * 
     */
    public List<GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess> projectsWithWriteAccesses() {
        return this.projectsWithWriteAccesses;
    }
    /**
     * @return The title of the deploy key.
     * 
     */
    public String title() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceDeployKeysDeployKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String fingerprint;
        private Integer id;
        private String key;
        private List<GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess> projectsWithWriteAccesses;
        private String title;
        public Builder() {}
        public Builder(GetInstanceDeployKeysDeployKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.projectsWithWriteAccesses = defaults.projectsWithWriteAccesses;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetInstanceDeployKeysDeployKey", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetInstanceDeployKeysDeployKey", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceDeployKeysDeployKey", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetInstanceDeployKeysDeployKey", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder projectsWithWriteAccesses(List<GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess> projectsWithWriteAccesses) {
            if (projectsWithWriteAccesses == null) {
              throw new MissingRequiredPropertyException("GetInstanceDeployKeysDeployKey", "projectsWithWriteAccesses");
            }
            this.projectsWithWriteAccesses = projectsWithWriteAccesses;
            return this;
        }
        public Builder projectsWithWriteAccesses(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess... projectsWithWriteAccesses) {
            return projectsWithWriteAccesses(List.of(projectsWithWriteAccesses));
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetInstanceDeployKeysDeployKey", "title");
            }
            this.title = title;
            return this;
        }
        public GetInstanceDeployKeysDeployKey build() {
            final var _resultValue = new GetInstanceDeployKeysDeployKey();
            _resultValue.createdAt = createdAt;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.key = key;
            _resultValue.projectsWithWriteAccesses = projectsWithWriteAccesses;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
