// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectMilestonesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectMilestonesArgs Empty = new GetProjectMilestonesArgs();

    /**
     * Return only the milestones having the given `iid` (Note: ignored if `include_parent_milestones` is set as `true`).
     * 
     */
    @Import(name="iids")
    private @Nullable Output<List<Integer>> iids;

    /**
     * @return Return only the milestones having the given `iid` (Note: ignored if `include_parent_milestones` is set as `true`).
     * 
     */
    public Optional<Output<List<Integer>>> iids() {
        return Optional.ofNullable(this.iids);
    }

    /**
     * Include group milestones from parent group and its ancestors. Introduced in GitLab 13.4.
     * 
     */
    @Import(name="includeParentMilestones")
    private @Nullable Output<Boolean> includeParentMilestones;

    /**
     * @return Include group milestones from parent group and its ancestors. Introduced in GitLab 13.4.
     * 
     */
    public Optional<Output<Boolean>> includeParentMilestones() {
        return Optional.ofNullable(this.includeParentMilestones);
    }

    /**
     * The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID or URL-encoded path of the project owned by the authenticated user.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Return only milestones with a title or description matching the provided string.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Return only milestones with a title or description matching the provided string.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Return only `active` or `closed` milestones.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Return only `active` or `closed` milestones.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Return only the milestones having the given `title`.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Return only the milestones having the given `title`.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private GetProjectMilestonesArgs() {}

    private GetProjectMilestonesArgs(GetProjectMilestonesArgs $) {
        this.iids = $.iids;
        this.includeParentMilestones = $.includeParentMilestones;
        this.project = $.project;
        this.search = $.search;
        this.state = $.state;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectMilestonesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectMilestonesArgs $;

        public Builder() {
            $ = new GetProjectMilestonesArgs();
        }

        public Builder(GetProjectMilestonesArgs defaults) {
            $ = new GetProjectMilestonesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param iids Return only the milestones having the given `iid` (Note: ignored if `include_parent_milestones` is set as `true`).
         * 
         * @return builder
         * 
         */
        public Builder iids(@Nullable Output<List<Integer>> iids) {
            $.iids = iids;
            return this;
        }

        /**
         * @param iids Return only the milestones having the given `iid` (Note: ignored if `include_parent_milestones` is set as `true`).
         * 
         * @return builder
         * 
         */
        public Builder iids(List<Integer> iids) {
            return iids(Output.of(iids));
        }

        /**
         * @param iids Return only the milestones having the given `iid` (Note: ignored if `include_parent_milestones` is set as `true`).
         * 
         * @return builder
         * 
         */
        public Builder iids(Integer... iids) {
            return iids(List.of(iids));
        }

        /**
         * @param includeParentMilestones Include group milestones from parent group and its ancestors. Introduced in GitLab 13.4.
         * 
         * @return builder
         * 
         */
        public Builder includeParentMilestones(@Nullable Output<Boolean> includeParentMilestones) {
            $.includeParentMilestones = includeParentMilestones;
            return this;
        }

        /**
         * @param includeParentMilestones Include group milestones from parent group and its ancestors. Introduced in GitLab 13.4.
         * 
         * @return builder
         * 
         */
        public Builder includeParentMilestones(Boolean includeParentMilestones) {
            return includeParentMilestones(Output.of(includeParentMilestones));
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID or URL-encoded path of the project owned by the authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param search Return only milestones with a title or description matching the provided string.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Return only milestones with a title or description matching the provided string.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param state Return only `active` or `closed` milestones.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Return only `active` or `closed` milestones.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param title Return only the milestones having the given `title`.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Return only the milestones having the given `title`.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public GetProjectMilestonesArgs build() {
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetProjectMilestonesArgs", "project");
            }
            return $;
        }
    }

}
