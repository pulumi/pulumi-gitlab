// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("gitlab");
/**
 * This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
 * Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
 * the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
 * 
 */
    public Optional<String> baseUrl() {
        return Codegen.stringProp("baseUrl").config(config).get();
    }
/**
 * This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
 * CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
 * 
 */
    public Optional<String> cacertFile() {
        return Codegen.stringProp("cacertFile").config(config).get();
    }
/**
 * File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
 * 
 */
    public Optional<String> clientCert() {
        return Codegen.stringProp("clientCert").config(config).get();
    }
/**
 * File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
 * `client_cert` is set.
 * 
 */
    public Optional<String> clientKey() {
        return Codegen.stringProp("clientKey").config(config).get();
    }
    public Optional<Boolean> earlyAuthCheck() {
        return Codegen.booleanProp("earlyAuthCheck").config(config).get();
    }
/**
 * A map of headers to append to all API request to the GitLab instance.
 * 
 */
    public Optional<Map<String,String>> headers() {
        return Codegen.objectProp("headers", TypeShape.<Map<String,String>>builder(Map.class).addParameter(String.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * When set to true this disables SSL verification of the connection to the GitLab instance.
 * 
 */
    public Optional<Boolean> insecure() {
        return Codegen.booleanProp("insecure").config(config).get();
    }
/**
 * The number of retries to execute when receiving a 429 Rate Limit error. Each retry will exponentially back off.
 * 
 */
    public Optional<Integer> retries() {
        return Codegen.integerProp("retries").config(config).get();
    }
/**
 * The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
 * used in this provider for authentication (using Bearer authorization token). See
 * https://docs.gitlab.com/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.
 * 
 */
    public Optional<String> token() {
        return Codegen.stringProp("token").config(config).get();
    }
}
