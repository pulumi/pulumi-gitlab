// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryFileArgs Empty = new RepositoryFileArgs();

    /**
     * Email of the commit author.
     * 
     */
    @Import(name="authorEmail")
    private @Nullable Output<String> authorEmail;

    /**
     * @return Email of the commit author.
     * 
     */
    public Optional<Output<String>> authorEmail() {
        return Optional.ofNullable(this.authorEmail);
    }

    /**
     * Name of the commit author.
     * 
     */
    @Import(name="authorName")
    private @Nullable Output<String> authorName;

    /**
     * @return Name of the commit author.
     * 
     */
    public Optional<Output<String>> authorName() {
        return Optional.ofNullable(this.authorName);
    }

    /**
     * Name of the branch to which to commit to.
     * 
     */
    @Import(name="branch", required=true)
    private Output<String> branch;

    /**
     * @return Name of the branch to which to commit to.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }

    /**
     * Commit message.
     * 
     */
    @Import(name="commitMessage", required=true)
    private Output<String> commitMessage;

    /**
     * @return Commit message.
     * 
     */
    public Output<String> commitMessage() {
        return this.commitMessage;
    }

    /**
     * File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.
     * 
     */
    @Import(name="executeFilemode")
    private @Nullable Output<Boolean> executeFilemode;

    /**
     * @return Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.
     * 
     */
    public Optional<Output<Boolean>> executeFilemode() {
        return Optional.ofNullable(this.executeFilemode);
    }

    /**
     * The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     * 
     */
    @Import(name="filePath", required=true)
    private Output<String> filePath;

    /**
     * @return The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     * 
     */
    public Output<String> filePath() {
        return this.filePath;
    }

    /**
     * Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
     * 
     */
    @Import(name="overwriteOnCreate")
    private @Nullable Output<Boolean> overwriteOnCreate;

    /**
     * @return Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
     * 
     */
    public Optional<Output<Boolean>> overwriteOnCreate() {
        return Optional.ofNullable(this.overwriteOnCreate);
    }

    /**
     * The name or ID of the project.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The name or ID of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Name of the branch to start the new commit from.
     * 
     */
    @Import(name="startBranch")
    private @Nullable Output<String> startBranch;

    /**
     * @return Name of the branch to start the new commit from.
     * 
     */
    public Optional<Output<String>> startBranch() {
        return Optional.ofNullable(this.startBranch);
    }

    private RepositoryFileArgs() {}

    private RepositoryFileArgs(RepositoryFileArgs $) {
        this.authorEmail = $.authorEmail;
        this.authorName = $.authorName;
        this.branch = $.branch;
        this.commitMessage = $.commitMessage;
        this.content = $.content;
        this.executeFilemode = $.executeFilemode;
        this.filePath = $.filePath;
        this.overwriteOnCreate = $.overwriteOnCreate;
        this.project = $.project;
        this.startBranch = $.startBranch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryFileArgs $;

        public Builder() {
            $ = new RepositoryFileArgs();
        }

        public Builder(RepositoryFileArgs defaults) {
            $ = new RepositoryFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorEmail Email of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorEmail(@Nullable Output<String> authorEmail) {
            $.authorEmail = authorEmail;
            return this;
        }

        /**
         * @param authorEmail Email of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorEmail(String authorEmail) {
            return authorEmail(Output.of(authorEmail));
        }

        /**
         * @param authorName Name of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorName(@Nullable Output<String> authorName) {
            $.authorName = authorName;
            return this;
        }

        /**
         * @param authorName Name of the commit author.
         * 
         * @return builder
         * 
         */
        public Builder authorName(String authorName) {
            return authorName(Output.of(authorName));
        }

        /**
         * @param branch Name of the branch to which to commit to.
         * 
         * @return builder
         * 
         */
        public Builder branch(Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch Name of the branch to which to commit to.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param commitMessage Commit message.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(Output<String> commitMessage) {
            $.commitMessage = commitMessage;
            return this;
        }

        /**
         * @param commitMessage Commit message.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(String commitMessage) {
            return commitMessage(Output.of(commitMessage));
        }

        /**
         * @param content File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param executeFilemode Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.
         * 
         * @return builder
         * 
         */
        public Builder executeFilemode(@Nullable Output<Boolean> executeFilemode) {
            $.executeFilemode = executeFilemode;
            return this;
        }

        /**
         * @param executeFilemode Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.
         * 
         * @return builder
         * 
         */
        public Builder executeFilemode(Boolean executeFilemode) {
            return executeFilemode(Output.of(executeFilemode));
        }

        /**
         * @param filePath The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
         * 
         * @return builder
         * 
         */
        public Builder filePath(Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param overwriteOnCreate Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
         * 
         * @return builder
         * 
         */
        public Builder overwriteOnCreate(@Nullable Output<Boolean> overwriteOnCreate) {
            $.overwriteOnCreate = overwriteOnCreate;
            return this;
        }

        /**
         * @param overwriteOnCreate Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
         * 
         * @return builder
         * 
         */
        public Builder overwriteOnCreate(Boolean overwriteOnCreate) {
            return overwriteOnCreate(Output.of(overwriteOnCreate));
        }

        /**
         * @param project The name or ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The name or ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param startBranch Name of the branch to start the new commit from.
         * 
         * @return builder
         * 
         */
        public Builder startBranch(@Nullable Output<String> startBranch) {
            $.startBranch = startBranch;
            return this;
        }

        /**
         * @param startBranch Name of the branch to start the new commit from.
         * 
         * @return builder
         * 
         */
        public Builder startBranch(String startBranch) {
            return startBranch(Output.of(startBranch));
        }

        public RepositoryFileArgs build() {
            $.branch = Objects.requireNonNull($.branch, "expected parameter 'branch' to be non-null");
            $.commitMessage = Objects.requireNonNull($.commitMessage, "expected parameter 'commitMessage' to be non-null");
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.filePath = Objects.requireNonNull($.filePath, "expected parameter 'filePath' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
