// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRunnersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRunnersArgs Empty = new GetRunnersArgs();

    /**
     * Filters for runners with the given paused value
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return Filters for runners with the given paused value
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Filters for runners with all of the given tags
     * 
     */
    @Import(name="tagLists")
    private @Nullable Output<List<String>> tagLists;

    /**
     * @return Filters for runners with all of the given tags
     * 
     */
    public Optional<Output<List<String>>> tagLists() {
        return Optional.ofNullable(this.tagLists);
    }

    /**
     * The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private GetRunnersArgs() {}

    private GetRunnersArgs(GetRunnersArgs $) {
        this.paused = $.paused;
        this.status = $.status;
        this.tagLists = $.tagLists;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRunnersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRunnersArgs $;

        public Builder() {
            $ = new GetRunnersArgs();
        }

        public Builder(GetRunnersArgs defaults) {
            $ = new GetRunnersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param paused Filters for runners with the given paused value
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused Filters for runners with the given paused value
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param status Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tagLists Filters for runners with all of the given tags
         * 
         * @return builder
         * 
         */
        public Builder tagLists(@Nullable Output<List<String>> tagLists) {
            $.tagLists = tagLists;
            return this;
        }

        /**
         * @param tagLists Filters for runners with all of the given tags
         * 
         * @return builder
         * 
         */
        public Builder tagLists(List<String> tagLists) {
            return tagLists(Output.of(tagLists));
        }

        /**
         * @param tagLists Filters for runners with all of the given tags
         * 
         * @return builder
         * 
         */
        public Builder tagLists(String... tagLists) {
            return tagLists(List.of(tagLists));
        }

        /**
         * @param type The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetRunnersArgs build() {
            return $;
        }
    }

}
