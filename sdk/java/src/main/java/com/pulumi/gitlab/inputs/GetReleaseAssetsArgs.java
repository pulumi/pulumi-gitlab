// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gitlab.inputs.GetReleaseAssetsLinkArgs;
import com.pulumi.gitlab.inputs.GetReleaseAssetsSourceArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetReleaseAssetsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetReleaseAssetsArgs Empty = new GetReleaseAssetsArgs();

    /**
     * The number of assets for a release
     * 
     */
    @Import(name="count", required=true)
    private Output<Integer> count;

    /**
     * @return The number of assets for a release
     * 
     */
    public Output<Integer> count() {
        return this.count;
    }

    /**
     * The links for a release
     * 
     */
    @Import(name="links")
    private @Nullable Output<List<GetReleaseAssetsLinkArgs>> links;

    /**
     * @return The links for a release
     * 
     */
    public Optional<Output<List<GetReleaseAssetsLinkArgs>>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * The sources for a release
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<GetReleaseAssetsSourceArgs>> sources;

    /**
     * @return The sources for a release
     * 
     */
    public Optional<Output<List<GetReleaseAssetsSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    private GetReleaseAssetsArgs() {}

    private GetReleaseAssetsArgs(GetReleaseAssetsArgs $) {
        this.count = $.count;
        this.links = $.links;
        this.sources = $.sources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetReleaseAssetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetReleaseAssetsArgs $;

        public Builder() {
            $ = new GetReleaseAssetsArgs();
        }

        public Builder(GetReleaseAssetsArgs defaults) {
            $ = new GetReleaseAssetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count The number of assets for a release
         * 
         * @return builder
         * 
         */
        public Builder count(Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count The number of assets for a release
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param links The links for a release
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable Output<List<GetReleaseAssetsLinkArgs>> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links The links for a release
         * 
         * @return builder
         * 
         */
        public Builder links(List<GetReleaseAssetsLinkArgs> links) {
            return links(Output.of(links));
        }

        /**
         * @param links The links for a release
         * 
         * @return builder
         * 
         */
        public Builder links(GetReleaseAssetsLinkArgs... links) {
            return links(List.of(links));
        }

        /**
         * @param sources The sources for a release
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<GetReleaseAssetsSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources The sources for a release
         * 
         * @return builder
         * 
         */
        public Builder sources(List<GetReleaseAssetsSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources The sources for a release
         * 
         * @return builder
         * 
         */
        public Builder sources(GetReleaseAssetsSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public GetReleaseAssetsArgs build() {
            if ($.count == null) {
                throw new MissingRequiredPropertyException("GetReleaseAssetsArgs", "count");
            }
            return $;
        }
    }

}
