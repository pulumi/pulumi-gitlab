// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComplianceFrameworkState extends com.pulumi.resources.ResourceArgs {

    public static final ComplianceFrameworkState Empty = new ComplianceFrameworkState();

    /**
     * New color representation of the compliance framework in hex format. e.g. #FCA121.
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return New color representation of the compliance framework in hex format. e.g. #FCA121.
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * Set this compliance framework as the default framework for the group. Default: `false`
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return Set this compliance framework as the default framework for the group. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * Description for the compliance framework.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the compliance framework.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Globally unique ID of the compliance framework.
     * 
     */
    @Import(name="frameworkId")
    private @Nullable Output<String> frameworkId;

    /**
     * @return Globally unique ID of the compliance framework.
     * 
     */
    public Optional<Output<String>> frameworkId() {
        return Optional.ofNullable(this.frameworkId);
    }

    /**
     * Name for the compliance framework.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for the compliance framework.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Full path of the namespace to add the compliance framework to.
     * 
     */
    @Import(name="namespacePath")
    private @Nullable Output<String> namespacePath;

    /**
     * @return Full path of the namespace to add the compliance framework to.
     * 
     */
    public Optional<Output<String>> namespacePath() {
        return Optional.ofNullable(this.namespacePath);
    }

    /**
     * Full path of the compliance pipeline configuration stored in a project repository, such as `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa`. Required format: `path/file.y[a]ml@group-name/project-name` **Note**: Ultimate license required.
     * 
     */
    @Import(name="pipelineConfigurationFullPath")
    private @Nullable Output<String> pipelineConfigurationFullPath;

    /**
     * @return Full path of the compliance pipeline configuration stored in a project repository, such as `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa`. Required format: `path/file.y[a]ml@group-name/project-name` **Note**: Ultimate license required.
     * 
     */
    public Optional<Output<String>> pipelineConfigurationFullPath() {
        return Optional.ofNullable(this.pipelineConfigurationFullPath);
    }

    private ComplianceFrameworkState() {}

    private ComplianceFrameworkState(ComplianceFrameworkState $) {
        this.color = $.color;
        this.default_ = $.default_;
        this.description = $.description;
        this.frameworkId = $.frameworkId;
        this.name = $.name;
        this.namespacePath = $.namespacePath;
        this.pipelineConfigurationFullPath = $.pipelineConfigurationFullPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComplianceFrameworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComplianceFrameworkState $;

        public Builder() {
            $ = new ComplianceFrameworkState();
        }

        public Builder(ComplianceFrameworkState defaults) {
            $ = new ComplianceFrameworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param color New color representation of the compliance framework in hex format. e.g. #FCA121.
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color New color representation of the compliance framework in hex format. e.g. #FCA121.
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param default_ Set this compliance framework as the default framework for the group. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Set this compliance framework as the default framework for the group. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param description Description for the compliance framework.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the compliance framework.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param frameworkId Globally unique ID of the compliance framework.
         * 
         * @return builder
         * 
         */
        public Builder frameworkId(@Nullable Output<String> frameworkId) {
            $.frameworkId = frameworkId;
            return this;
        }

        /**
         * @param frameworkId Globally unique ID of the compliance framework.
         * 
         * @return builder
         * 
         */
        public Builder frameworkId(String frameworkId) {
            return frameworkId(Output.of(frameworkId));
        }

        /**
         * @param name Name for the compliance framework.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the compliance framework.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespacePath Full path of the namespace to add the compliance framework to.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(@Nullable Output<String> namespacePath) {
            $.namespacePath = namespacePath;
            return this;
        }

        /**
         * @param namespacePath Full path of the namespace to add the compliance framework to.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(String namespacePath) {
            return namespacePath(Output.of(namespacePath));
        }

        /**
         * @param pipelineConfigurationFullPath Full path of the compliance pipeline configuration stored in a project repository, such as `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa`. Required format: `path/file.y[a]ml@group-name/project-name` **Note**: Ultimate license required.
         * 
         * @return builder
         * 
         */
        public Builder pipelineConfigurationFullPath(@Nullable Output<String> pipelineConfigurationFullPath) {
            $.pipelineConfigurationFullPath = pipelineConfigurationFullPath;
            return this;
        }

        /**
         * @param pipelineConfigurationFullPath Full path of the compliance pipeline configuration stored in a project repository, such as `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa`. Required format: `path/file.y[a]ml@group-name/project-name` **Note**: Ultimate license required.
         * 
         * @return builder
         * 
         */
        public Builder pipelineConfigurationFullPath(String pipelineConfigurationFullPath) {
            return pipelineConfigurationFullPath(Output.of(pipelineConfigurationFullPath));
        }

        public ComplianceFrameworkState build() {
            return $;
        }
    }

}
