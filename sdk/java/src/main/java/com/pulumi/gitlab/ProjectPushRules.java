// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gitlab.ProjectPushRulesArgs;
import com.pulumi.gitlab.Utilities;
import com.pulumi.gitlab.inputs.ProjectPushRulesState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gitlab.ProjectPushRules;
 * import com.pulumi.gitlab.ProjectPushRulesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var sample = new ProjectPushRules("sample", ProjectPushRulesArgs.builder()
 *             .project("42")
 *             .authorEmailRegex("}{@literal @}{@code gitlab.com$")
 *             .branchNameRegex("(feat|fix)\\/*")
 *             .commitCommitterCheck(true)
 *             .commitCommitterNameCheck(true)
 *             .commitMessageNegativeRegex("ssh\\:\\/\\/")
 *             .commitMessageRegex("(feat|fix):.*")
 *             .denyDeleteTag(false)
 *             .fileNameRegex("(jar|exe)$")
 *             .maxFileSize(4)
 *             .memberCheck(true)
 *             .preventSecrets(true)
 *             .rejectUnsignedCommits(false)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_push_rules`. For example:
 * 
 * terraform
 * 
 * import {
 * 
 *   to = gitlab_project_push_rules.example
 * 
 *   id = &#34;see CLI command below for ID&#34;
 * 
 * }
 * 
 * Importing using the CLI is supported with the following syntax:
 * 
 * Gitlab project push rules can be imported with a key composed of `&lt;project_id&gt;`, e.g.
 * 
 * ```sh
 * $ pulumi import gitlab:index/projectPushRules:ProjectPushRules sample &#34;42&#34;
 * ```
 * 
 */
@ResourceType(type="gitlab:index/projectPushRules:ProjectPushRules")
public class ProjectPushRules extends com.pulumi.resources.CustomResource {
    /**
     * All commit author emails must match this regex, e.g. `{@literal @}my-company.com$`.
     * 
     */
    @Export(name="authorEmailRegex", refs={String.class}, tree="[0]")
    private Output<String> authorEmailRegex;

    /**
     * @return All commit author emails must match this regex, e.g. `{@literal @}my-company.com$`.
     * 
     */
    public Output<String> authorEmailRegex() {
        return this.authorEmailRegex;
    }
    /**
     * All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     * 
     */
    @Export(name="branchNameRegex", refs={String.class}, tree="[0]")
    private Output<String> branchNameRegex;

    /**
     * @return All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     * 
     */
    public Output<String> branchNameRegex() {
        return this.branchNameRegex;
    }
    /**
     * Users can only push commits to this repository that were committed with one of their own verified emails.
     * 
     */
    @Export(name="commitCommitterCheck", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> commitCommitterCheck;

    /**
     * @return Users can only push commits to this repository that were committed with one of their own verified emails.
     * 
     */
    public Output<Boolean> commitCommitterCheck() {
        return this.commitCommitterCheck;
    }
    /**
     * Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
     * 
     */
    @Export(name="commitCommitterNameCheck", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> commitCommitterNameCheck;

    /**
     * @return Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
     * 
     */
    public Output<Boolean> commitCommitterNameCheck() {
        return this.commitCommitterNameCheck;
    }
    /**
     * No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
     * 
     */
    @Export(name="commitMessageNegativeRegex", refs={String.class}, tree="[0]")
    private Output<String> commitMessageNegativeRegex;

    /**
     * @return No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
     * 
     */
    public Output<String> commitMessageNegativeRegex() {
        return this.commitMessageNegativeRegex;
    }
    /**
     * All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     * 
     */
    @Export(name="commitMessageRegex", refs={String.class}, tree="[0]")
    private Output<String> commitMessageRegex;

    /**
     * @return All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     * 
     */
    public Output<String> commitMessageRegex() {
        return this.commitMessageRegex;
    }
    /**
     * Deny deleting a tag.
     * 
     */
    @Export(name="denyDeleteTag", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> denyDeleteTag;

    /**
     * @return Deny deleting a tag.
     * 
     */
    public Output<Boolean> denyDeleteTag() {
        return this.denyDeleteTag;
    }
    /**
     * All committed filenames must not match this regex, e.g. `(jar|exe)$`.
     * 
     */
    @Export(name="fileNameRegex", refs={String.class}, tree="[0]")
    private Output<String> fileNameRegex;

    /**
     * @return All committed filenames must not match this regex, e.g. `(jar|exe)$`.
     * 
     */
    public Output<String> fileNameRegex() {
        return this.fileNameRegex;
    }
    /**
     * Maximum file size (MB).
     * 
     */
    @Export(name="maxFileSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxFileSize;

    /**
     * @return Maximum file size (MB).
     * 
     */
    public Output<Integer> maxFileSize() {
        return this.maxFileSize;
    }
    /**
     * Restrict commits by author (email) to existing GitLab users.
     * 
     */
    @Export(name="memberCheck", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> memberCheck;

    /**
     * @return Restrict commits by author (email) to existing GitLab users.
     * 
     */
    public Output<Boolean> memberCheck() {
        return this.memberCheck;
    }
    /**
     * GitLab will reject any files that are likely to contain secrets.
     * 
     */
    @Export(name="preventSecrets", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> preventSecrets;

    /**
     * @return GitLab will reject any files that are likely to contain secrets.
     * 
     */
    public Output<Boolean> preventSecrets() {
        return this.preventSecrets;
    }
    /**
     * The ID or URL-encoded path of the project.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID or URL-encoded path of the project.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Reject commit when it’s not DCO certified.
     * 
     */
    @Export(name="rejectNonDcoCommits", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> rejectNonDcoCommits;

    /**
     * @return Reject commit when it’s not DCO certified.
     * 
     */
    public Output<Boolean> rejectNonDcoCommits() {
        return this.rejectNonDcoCommits;
    }
    /**
     * Reject commit when it’s not signed.
     * 
     */
    @Export(name="rejectUnsignedCommits", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> rejectUnsignedCommits;

    /**
     * @return Reject commit when it’s not signed.
     * 
     */
    public Output<Boolean> rejectUnsignedCommits() {
        return this.rejectUnsignedCommits;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectPushRules(java.lang.String name) {
        this(name, ProjectPushRulesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectPushRules(java.lang.String name, ProjectPushRulesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectPushRules(java.lang.String name, ProjectPushRulesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectPushRules:ProjectPushRules", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ProjectPushRules(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectPushRulesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gitlab:index/projectPushRules:ProjectPushRules", name, state, makeResourceOptions(options, id), false);
    }

    private static ProjectPushRulesArgs makeArgs(ProjectPushRulesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ProjectPushRulesArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectPushRules get(java.lang.String name, Output<java.lang.String> id, @Nullable ProjectPushRulesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectPushRules(name, id, state, options);
    }
}
