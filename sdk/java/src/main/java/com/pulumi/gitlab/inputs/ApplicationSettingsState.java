// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationSettingsState Empty = new ApplicationSettingsState();

    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     * 
     */
    @Import(name="abuseNotificationEmail")
    private @Nullable Output<String> abuseNotificationEmail;

    /**
     * @return If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     * 
     */
    public Optional<Output<String>> abuseNotificationEmail() {
        return Optional.ofNullable(this.abuseNotificationEmail);
    }

    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     * 
     */
    @Import(name="adminMode")
    private @Nullable Output<Boolean> adminMode;

    /**
     * @return Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     * 
     */
    public Optional<Output<Boolean>> adminMode() {
        return Optional.ofNullable(this.adminMode);
    }

    /**
     * Where to redirect users after logout.
     * 
     */
    @Import(name="afterSignOutPath")
    private @Nullable Output<String> afterSignOutPath;

    /**
     * @return Where to redirect users after logout.
     * 
     */
    public Optional<Output<String>> afterSignOutPath() {
        return Optional.ofNullable(this.afterSignOutPath);
    }

    /**
     * Text shown to the user after signing up.
     * 
     */
    @Import(name="afterSignUpText")
    private @Nullable Output<String> afterSignUpText;

    /**
     * @return Text shown to the user after signing up.
     * 
     */
    public Optional<Output<String>> afterSignUpText() {
        return Optional.ofNullable(this.afterSignUpText);
    }

    /**
     * API key for Akismet spam protection.
     * 
     */
    @Import(name="akismetApiKey")
    private @Nullable Output<String> akismetApiKey;

    /**
     * @return API key for Akismet spam protection.
     * 
     */
    public Optional<Output<String>> akismetApiKey() {
        return Optional.ofNullable(this.akismetApiKey);
    }

    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     * 
     */
    @Import(name="akismetEnabled")
    private @Nullable Output<Boolean> akismetEnabled;

    /**
     * @return (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     * 
     */
    public Optional<Output<Boolean>> akismetEnabled() {
        return Optional.ofNullable(this.akismetEnabled);
    }

    /**
     * Set to true to allow group owners to manage LDAP.
     * 
     */
    @Import(name="allowGroupOwnersToManageLdap")
    private @Nullable Output<Boolean> allowGroupOwnersToManageLdap;

    /**
     * @return Set to true to allow group owners to manage LDAP.
     * 
     */
    public Optional<Output<Boolean>> allowGroupOwnersToManageLdap() {
        return Optional.ofNullable(this.allowGroupOwnersToManageLdap);
    }

    /**
     * Allow requests to the local network from system hooks.
     * 
     */
    @Import(name="allowLocalRequestsFromSystemHooks")
    private @Nullable Output<Boolean> allowLocalRequestsFromSystemHooks;

    /**
     * @return Allow requests to the local network from system hooks.
     * 
     */
    public Optional<Output<Boolean>> allowLocalRequestsFromSystemHooks() {
        return Optional.ofNullable(this.allowLocalRequestsFromSystemHooks);
    }

    /**
     * Allow requests to the local network from web hooks and services.
     * 
     */
    @Import(name="allowLocalRequestsFromWebHooksAndServices")
    private @Nullable Output<Boolean> allowLocalRequestsFromWebHooksAndServices;

    /**
     * @return Allow requests to the local network from web hooks and services.
     * 
     */
    public Optional<Output<Boolean>> allowLocalRequestsFromWebHooksAndServices() {
        return Optional.ofNullable(this.allowLocalRequestsFromWebHooksAndServices);
    }

    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     * 
     */
    @Import(name="archiveBuildsInHumanReadable")
    private @Nullable Output<String> archiveBuildsInHumanReadable;

    /**
     * @return Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     * 
     */
    public Optional<Output<String>> archiveBuildsInHumanReadable() {
        return Optional.ofNullable(this.archiveBuildsInHumanReadable);
    }

    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     * 
     */
    @Import(name="assetProxyAllowlists")
    private @Nullable Output<List<String>> assetProxyAllowlists;

    /**
     * @return Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     * 
     */
    public Optional<Output<List<String>>> assetProxyAllowlists() {
        return Optional.ofNullable(this.assetProxyAllowlists);
    }

    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     * 
     */
    @Import(name="assetProxyEnabled")
    private @Nullable Output<Boolean> assetProxyEnabled;

    /**
     * @return (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     * 
     */
    public Optional<Output<Boolean>> assetProxyEnabled() {
        return Optional.ofNullable(this.assetProxyEnabled);
    }

    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    @Import(name="assetProxySecretKey")
    private @Nullable Output<String> assetProxySecretKey;

    /**
     * @return Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    public Optional<Output<String>> assetProxySecretKey() {
        return Optional.ofNullable(this.assetProxySecretKey);
    }

    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    @Import(name="assetProxyUrl")
    private @Nullable Output<String> assetProxyUrl;

    /**
     * @return URL of the asset proxy server. GitLab restart is required to apply changes.
     * 
     */
    public Optional<Output<String>> assetProxyUrl() {
        return Optional.ofNullable(this.assetProxyUrl);
    }

    /**
     * By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     * 
     */
    @Import(name="authorizedKeysEnabled")
    private @Nullable Output<Boolean> authorizedKeysEnabled;

    /**
     * @return By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     * 
     */
    public Optional<Output<Boolean>> authorizedKeysEnabled() {
        return Optional.ofNullable(this.authorizedKeysEnabled);
    }

    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     * 
     */
    @Import(name="autoDevopsDomain")
    private @Nullable Output<String> autoDevopsDomain;

    /**
     * @return Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     * 
     */
    public Optional<Output<String>> autoDevopsDomain() {
        return Optional.ofNullable(this.autoDevopsDomain);
    }

    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     * 
     */
    @Import(name="autoDevopsEnabled")
    private @Nullable Output<Boolean> autoDevopsEnabled;

    /**
     * @return Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     * 
     */
    public Optional<Output<Boolean>> autoDevopsEnabled() {
        return Optional.ofNullable(this.autoDevopsEnabled);
    }

    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     * 
     */
    @Import(name="automaticPurchasedStorageAllocation")
    private @Nullable Output<Boolean> automaticPurchasedStorageAllocation;

    /**
     * @return Enabling this permits automatic allocation of purchased storage in a namespace.
     * 
     */
    public Optional<Output<Boolean>> automaticPurchasedStorageAllocation() {
        return Optional.ofNullable(this.automaticPurchasedStorageAllocation);
    }

    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     * 
     */
    @Import(name="checkNamespacePlan")
    private @Nullable Output<Boolean> checkNamespacePlan;

    /**
     * @return Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     * 
     */
    public Optional<Output<Boolean>> checkNamespacePlan() {
        return Optional.ofNullable(this.checkNamespacePlan);
    }

    /**
     * Custom hostname (for private commit emails).
     * 
     */
    @Import(name="commitEmailHostname")
    private @Nullable Output<String> commitEmailHostname;

    /**
     * @return Custom hostname (for private commit emails).
     * 
     */
    public Optional<Output<String>> commitEmailHostname() {
        return Optional.ofNullable(this.commitEmailHostname);
    }

    /**
     * Enable cleanup policies for all projects.
     * 
     */
    @Import(name="containerExpirationPoliciesEnableHistoricEntries")
    private @Nullable Output<Boolean> containerExpirationPoliciesEnableHistoricEntries;

    /**
     * @return Enable cleanup policies for all projects.
     * 
     */
    public Optional<Output<Boolean>> containerExpirationPoliciesEnableHistoricEntries() {
        return Optional.ofNullable(this.containerExpirationPoliciesEnableHistoricEntries);
    }

    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     * 
     */
    @Import(name="containerRegistryCleanupTagsServiceMaxListSize")
    private @Nullable Output<Integer> containerRegistryCleanupTagsServiceMaxListSize;

    /**
     * @return The maximum number of tags that can be deleted in a single execution of cleanup policies.
     * 
     */
    public Optional<Output<Integer>> containerRegistryCleanupTagsServiceMaxListSize() {
        return Optional.ofNullable(this.containerRegistryCleanupTagsServiceMaxListSize);
    }

    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     * 
     */
    @Import(name="containerRegistryDeleteTagsServiceTimeout")
    private @Nullable Output<Integer> containerRegistryDeleteTagsServiceTimeout;

    /**
     * @return The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     * 
     */
    public Optional<Output<Integer>> containerRegistryDeleteTagsServiceTimeout() {
        return Optional.ofNullable(this.containerRegistryDeleteTagsServiceTimeout);
    }

    /**
     * Caching during the execution of cleanup policies.
     * 
     */
    @Import(name="containerRegistryExpirationPoliciesCaching")
    private @Nullable Output<Boolean> containerRegistryExpirationPoliciesCaching;

    /**
     * @return Caching during the execution of cleanup policies.
     * 
     */
    public Optional<Output<Boolean>> containerRegistryExpirationPoliciesCaching() {
        return Optional.ofNullable(this.containerRegistryExpirationPoliciesCaching);
    }

    /**
     * Number of workers for cleanup policies.
     * 
     */
    @Import(name="containerRegistryExpirationPoliciesWorkerCapacity")
    private @Nullable Output<Integer> containerRegistryExpirationPoliciesWorkerCapacity;

    /**
     * @return Number of workers for cleanup policies.
     * 
     */
    public Optional<Output<Integer>> containerRegistryExpirationPoliciesWorkerCapacity() {
        return Optional.ofNullable(this.containerRegistryExpirationPoliciesWorkerCapacity);
    }

    /**
     * Container Registry token duration in minutes.
     * 
     */
    @Import(name="containerRegistryTokenExpireDelay")
    private @Nullable Output<Integer> containerRegistryTokenExpireDelay;

    /**
     * @return Container Registry token duration in minutes.
     * 
     */
    public Optional<Output<Integer>> containerRegistryTokenExpireDelay() {
        return Optional.ofNullable(this.containerRegistryTokenExpireDelay);
    }

    /**
     * Enable automatic deactivation of dormant users.
     * 
     */
    @Import(name="deactivateDormantUsers")
    private @Nullable Output<Boolean> deactivateDormantUsers;

    /**
     * @return Enable automatic deactivation of dormant users.
     * 
     */
    public Optional<Output<Boolean>> deactivateDormantUsers() {
        return Optional.ofNullable(this.deactivateDormantUsers);
    }

    /**
     * Set the default expiration time for each job’s artifacts.
     * 
     */
    @Import(name="defaultArtifactsExpireIn")
    private @Nullable Output<String> defaultArtifactsExpireIn;

    /**
     * @return Set the default expiration time for each job’s artifacts.
     * 
     */
    public Optional<Output<String>> defaultArtifactsExpireIn() {
        return Optional.ofNullable(this.defaultArtifactsExpireIn);
    }

    /**
     * Instance-level custom initial branch name (introduced in GitLab 13.2).
     * 
     */
    @Import(name="defaultBranchName")
    private @Nullable Output<String> defaultBranchName;

    /**
     * @return Instance-level custom initial branch name (introduced in GitLab 13.2).
     * 
     */
    public Optional<Output<String>> defaultBranchName() {
        return Optional.ofNullable(this.defaultBranchName);
    }

    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
     * 
     */
    @Import(name="defaultBranchProtection")
    private @Nullable Output<Integer> defaultBranchProtection;

    /**
     * @return Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
     * 
     */
    public Optional<Output<Integer>> defaultBranchProtection() {
        return Optional.ofNullable(this.defaultBranchProtection);
    }

    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     * 
     */
    @Import(name="defaultCiConfigPath")
    private @Nullable Output<String> defaultCiConfigPath;

    /**
     * @return Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     * 
     */
    public Optional<Output<String>> defaultCiConfigPath() {
        return Optional.ofNullable(this.defaultCiConfigPath);
    }

    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
     * 
     */
    @Import(name="defaultGroupVisibility")
    private @Nullable Output<String> defaultGroupVisibility;

    /**
     * @return What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
     * 
     */
    public Optional<Output<String>> defaultGroupVisibility() {
        return Optional.ofNullable(this.defaultGroupVisibility);
    }

    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     * 
     */
    @Import(name="defaultProjectCreation")
    private @Nullable Output<Integer> defaultProjectCreation;

    /**
     * @return Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     * 
     */
    public Optional<Output<Integer>> defaultProjectCreation() {
        return Optional.ofNullable(this.defaultProjectCreation);
    }

    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
     * 
     */
    @Import(name="defaultProjectVisibility")
    private @Nullable Output<String> defaultProjectVisibility;

    /**
     * @return What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
     * 
     */
    public Optional<Output<String>> defaultProjectVisibility() {
        return Optional.ofNullable(this.defaultProjectVisibility);
    }

    /**
     * Project limit per user. Default is 100000.
     * 
     */
    @Import(name="defaultProjectsLimit")
    private @Nullable Output<Integer> defaultProjectsLimit;

    /**
     * @return Project limit per user. Default is 100000.
     * 
     */
    public Optional<Output<Integer>> defaultProjectsLimit() {
        return Optional.ofNullable(this.defaultProjectsLimit);
    }

    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
     * 
     */
    @Import(name="defaultSnippetVisibility")
    private @Nullable Output<String> defaultSnippetVisibility;

    /**
     * @return What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
     * 
     */
    public Optional<Output<String>> defaultSnippetVisibility() {
        return Optional.ofNullable(this.defaultSnippetVisibility);
    }

    /**
     * Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
     * 
     */
    @Import(name="delayedGroupDeletion")
    private @Nullable Output<Boolean> delayedGroupDeletion;

    /**
     * @return Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
     * 
     */
    public Optional<Output<Boolean>> delayedGroupDeletion() {
        return Optional.ofNullable(this.delayedGroupDeletion);
    }

    /**
     * Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
     * 
     */
    @Import(name="delayedProjectDeletion")
    private @Nullable Output<Boolean> delayedProjectDeletion;

    /**
     * @return Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
     * 
     */
    public Optional<Output<Boolean>> delayedProjectDeletion() {
        return Optional.ofNullable(this.delayedProjectDeletion);
    }

    /**
     * Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
     * 
     */
    @Import(name="deleteInactiveProjects")
    private @Nullable Output<Boolean> deleteInactiveProjects;

    /**
     * @return Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
     * 
     */
    public Optional<Output<Boolean>> deleteInactiveProjects() {
        return Optional.ofNullable(this.deleteInactiveProjects);
    }

    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
     * 
     */
    @Import(name="deletionAdjournedPeriod")
    private @Nullable Output<Integer> deletionAdjournedPeriod;

    /**
     * @return The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
     * 
     */
    public Optional<Output<Integer>> deletionAdjournedPeriod() {
        return Optional.ofNullable(this.deletionAdjournedPeriod);
    }

    /**
     * Maximum files in a diff.
     * 
     */
    @Import(name="diffMaxFiles")
    private @Nullable Output<Integer> diffMaxFiles;

    /**
     * @return Maximum files in a diff.
     * 
     */
    public Optional<Output<Integer>> diffMaxFiles() {
        return Optional.ofNullable(this.diffMaxFiles);
    }

    /**
     * Maximum lines in a diff.
     * 
     */
    @Import(name="diffMaxLines")
    private @Nullable Output<Integer> diffMaxLines;

    /**
     * @return Maximum lines in a diff.
     * 
     */
    public Optional<Output<Integer>> diffMaxLines() {
        return Optional.ofNullable(this.diffMaxLines);
    }

    /**
     * Maximum diff patch size, in bytes.
     * 
     */
    @Import(name="diffMaxPatchBytes")
    private @Nullable Output<Integer> diffMaxPatchBytes;

    /**
     * @return Maximum diff patch size, in bytes.
     * 
     */
    public Optional<Output<Integer>> diffMaxPatchBytes() {
        return Optional.ofNullable(this.diffMaxPatchBytes);
    }

    /**
     * Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
     * 
     */
    @Import(name="disableFeedToken")
    private @Nullable Output<Boolean> disableFeedToken;

    /**
     * @return Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
     * 
     */
    public Optional<Output<Boolean>> disableFeedToken() {
        return Optional.ofNullable(this.disableFeedToken);
    }

    /**
     * Disabled OAuth sign-in sources.
     * 
     */
    @Import(name="disabledOauthSignInSources")
    private @Nullable Output<List<String>> disabledOauthSignInSources;

    /**
     * @return Disabled OAuth sign-in sources.
     * 
     */
    public Optional<Output<List<String>>> disabledOauthSignInSources() {
        return Optional.ofNullable(this.disabledOauthSignInSources);
    }

    /**
     * Enforce DNS rebinding attack protection.
     * 
     */
    @Import(name="dnsRebindingProtectionEnabled")
    private @Nullable Output<Boolean> dnsRebindingProtectionEnabled;

    /**
     * @return Enforce DNS rebinding attack protection.
     * 
     */
    public Optional<Output<Boolean>> dnsRebindingProtectionEnabled() {
        return Optional.ofNullable(this.dnsRebindingProtectionEnabled);
    }

    /**
     * Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
     * 
     */
    @Import(name="domainAllowlists")
    private @Nullable Output<List<String>> domainAllowlists;

    /**
     * @return Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
     * 
     */
    public Optional<Output<List<String>>> domainAllowlists() {
        return Optional.ofNullable(this.domainAllowlists);
    }

    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     * 
     */
    @Import(name="domainDenylistEnabled")
    private @Nullable Output<Boolean> domainDenylistEnabled;

    /**
     * @return (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     * 
     */
    public Optional<Output<Boolean>> domainDenylistEnabled() {
        return Optional.ofNullable(this.domainDenylistEnabled);
    }

    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     * 
     */
    @Import(name="domainDenylists")
    private @Nullable Output<List<String>> domainDenylists;

    /**
     * @return Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     * 
     */
    public Optional<Output<List<String>>> domainDenylists() {
        return Optional.ofNullable(this.domainDenylists);
    }

    /**
     * The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
     * 
     */
    @Import(name="dsaKeyRestriction")
    private @Nullable Output<Integer> dsaKeyRestriction;

    /**
     * @return The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
     * 
     */
    public Optional<Output<Integer>> dsaKeyRestriction() {
        return Optional.ofNullable(this.dsaKeyRestriction);
    }

    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
     * 
     */
    @Import(name="ecdsaKeyRestriction")
    private @Nullable Output<Integer> ecdsaKeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
     * 
     */
    public Optional<Output<Integer>> ecdsaKeyRestriction() {
        return Optional.ofNullable(this.ecdsaKeyRestriction);
    }

    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
     * 
     */
    @Import(name="ecdsaSkKeyRestriction")
    private @Nullable Output<Integer> ecdsaSkKeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
     * 
     */
    public Optional<Output<Integer>> ecdsaSkKeyRestriction() {
        return Optional.ofNullable(this.ecdsaSkKeyRestriction);
    }

    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
     * 
     */
    @Import(name="ed25519KeyRestriction")
    private @Nullable Output<Integer> ed25519KeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
     * 
     */
    public Optional<Output<Integer>> ed25519KeyRestriction() {
        return Optional.ofNullable(this.ed25519KeyRestriction);
    }

    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
     * 
     */
    @Import(name="ed25519SkKeyRestriction")
    private @Nullable Output<Integer> ed25519SkKeyRestriction;

    /**
     * @return The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
     * 
     */
    public Optional<Output<Integer>> ed25519SkKeyRestriction() {
        return Optional.ofNullable(this.ed25519SkKeyRestriction);
    }

    /**
     * AWS IAM access key ID.
     * 
     */
    @Import(name="eksAccessKeyId")
    private @Nullable Output<String> eksAccessKeyId;

    /**
     * @return AWS IAM access key ID.
     * 
     */
    public Optional<Output<String>> eksAccessKeyId() {
        return Optional.ofNullable(this.eksAccessKeyId);
    }

    /**
     * Amazon account ID.
     * 
     */
    @Import(name="eksAccountId")
    private @Nullable Output<String> eksAccountId;

    /**
     * @return Amazon account ID.
     * 
     */
    public Optional<Output<String>> eksAccountId() {
        return Optional.ofNullable(this.eksAccountId);
    }

    /**
     * Enable integration with Amazon EKS.
     * 
     */
    @Import(name="eksIntegrationEnabled")
    private @Nullable Output<Boolean> eksIntegrationEnabled;

    /**
     * @return Enable integration with Amazon EKS.
     * 
     */
    public Optional<Output<Boolean>> eksIntegrationEnabled() {
        return Optional.ofNullable(this.eksIntegrationEnabled);
    }

    /**
     * AWS IAM secret access key.
     * 
     */
    @Import(name="eksSecretAccessKey")
    private @Nullable Output<String> eksSecretAccessKey;

    /**
     * @return AWS IAM secret access key.
     * 
     */
    public Optional<Output<String>> eksSecretAccessKey() {
        return Optional.ofNullable(this.eksSecretAccessKey);
    }

    /**
     * Enable the use of AWS hosted Elasticsearch.
     * 
     */
    @Import(name="elasticsearchAws")
    private @Nullable Output<Boolean> elasticsearchAws;

    /**
     * @return Enable the use of AWS hosted Elasticsearch.
     * 
     */
    public Optional<Output<Boolean>> elasticsearchAws() {
        return Optional.ofNullable(this.elasticsearchAws);
    }

    /**
     * AWS IAM access key.
     * 
     */
    @Import(name="elasticsearchAwsAccessKey")
    private @Nullable Output<String> elasticsearchAwsAccessKey;

    /**
     * @return AWS IAM access key.
     * 
     */
    public Optional<Output<String>> elasticsearchAwsAccessKey() {
        return Optional.ofNullable(this.elasticsearchAwsAccessKey);
    }

    /**
     * The AWS region the Elasticsearch domain is configured.
     * 
     */
    @Import(name="elasticsearchAwsRegion")
    private @Nullable Output<String> elasticsearchAwsRegion;

    /**
     * @return The AWS region the Elasticsearch domain is configured.
     * 
     */
    public Optional<Output<String>> elasticsearchAwsRegion() {
        return Optional.ofNullable(this.elasticsearchAwsRegion);
    }

    /**
     * AWS IAM secret access key.
     * 
     */
    @Import(name="elasticsearchAwsSecretAccessKey")
    private @Nullable Output<String> elasticsearchAwsSecretAccessKey;

    /**
     * @return AWS IAM secret access key.
     * 
     */
    public Optional<Output<String>> elasticsearchAwsSecretAccessKey() {
        return Optional.ofNullable(this.elasticsearchAwsSecretAccessKey);
    }

    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     * 
     */
    @Import(name="elasticsearchIndexedFieldLengthLimit")
    private @Nullable Output<Integer> elasticsearchIndexedFieldLengthLimit;

    /**
     * @return Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     * 
     */
    public Optional<Output<Integer>> elasticsearchIndexedFieldLengthLimit() {
        return Optional.ofNullable(this.elasticsearchIndexedFieldLengthLimit);
    }

    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     * 
     */
    @Import(name="elasticsearchIndexedFileSizeLimitKb")
    private @Nullable Output<Integer> elasticsearchIndexedFileSizeLimitKb;

    /**
     * @return Maximum size of repository and wiki files that are indexed by Elasticsearch.
     * 
     */
    public Optional<Output<Integer>> elasticsearchIndexedFileSizeLimitKb() {
        return Optional.ofNullable(this.elasticsearchIndexedFileSizeLimitKb);
    }

    /**
     * Enable Elasticsearch indexing.
     * 
     */
    @Import(name="elasticsearchIndexing")
    private @Nullable Output<Boolean> elasticsearchIndexing;

    /**
     * @return Enable Elasticsearch indexing.
     * 
     */
    public Optional<Output<Boolean>> elasticsearchIndexing() {
        return Optional.ofNullable(this.elasticsearchIndexing);
    }

    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     * 
     */
    @Import(name="elasticsearchLimitIndexing")
    private @Nullable Output<Boolean> elasticsearchLimitIndexing;

    /**
     * @return Limit Elasticsearch to index certain namespaces and projects.
     * 
     */
    public Optional<Output<Boolean>> elasticsearchLimitIndexing() {
        return Optional.ofNullable(this.elasticsearchLimitIndexing);
    }

    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     * 
     */
    @Import(name="elasticsearchMaxBulkConcurrency")
    private @Nullable Output<Integer> elasticsearchMaxBulkConcurrency;

    /**
     * @return Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     * 
     */
    public Optional<Output<Integer>> elasticsearchMaxBulkConcurrency() {
        return Optional.ofNullable(this.elasticsearchMaxBulkConcurrency);
    }

    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     * 
     */
    @Import(name="elasticsearchMaxBulkSizeMb")
    private @Nullable Output<Integer> elasticsearchMaxBulkSizeMb;

    /**
     * @return Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     * 
     */
    public Optional<Output<Integer>> elasticsearchMaxBulkSizeMb() {
        return Optional.ofNullable(this.elasticsearchMaxBulkSizeMb);
    }

    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    @Import(name="elasticsearchNamespaceIds")
    private @Nullable Output<List<String>> elasticsearchNamespaceIds;

    /**
     * @return The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    public Optional<Output<List<String>>> elasticsearchNamespaceIds() {
        return Optional.ofNullable(this.elasticsearchNamespaceIds);
    }

    /**
     * The password of your Elasticsearch instance.
     * 
     */
    @Import(name="elasticsearchPassword")
    private @Nullable Output<String> elasticsearchPassword;

    /**
     * @return The password of your Elasticsearch instance.
     * 
     */
    public Optional<Output<String>> elasticsearchPassword() {
        return Optional.ofNullable(this.elasticsearchPassword);
    }

    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    @Import(name="elasticsearchProjectIds")
    private @Nullable Output<List<String>> elasticsearchProjectIds;

    /**
     * @return The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     * 
     */
    public Optional<Output<List<String>>> elasticsearchProjectIds() {
        return Optional.ofNullable(this.elasticsearchProjectIds);
    }

    /**
     * Enable Elasticsearch search.
     * 
     */
    @Import(name="elasticsearchSearch")
    private @Nullable Output<Boolean> elasticsearchSearch;

    /**
     * @return Enable Elasticsearch search.
     * 
     */
    public Optional<Output<Boolean>> elasticsearchSearch() {
        return Optional.ofNullable(this.elasticsearchSearch);
    }

    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     * 
     */
    @Import(name="elasticsearchUrls")
    private @Nullable Output<List<String>> elasticsearchUrls;

    /**
     * @return The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     * 
     */
    public Optional<Output<List<String>>> elasticsearchUrls() {
        return Optional.ofNullable(this.elasticsearchUrls);
    }

    /**
     * The username of your Elasticsearch instance.
     * 
     */
    @Import(name="elasticsearchUsername")
    private @Nullable Output<String> elasticsearchUsername;

    /**
     * @return The username of your Elasticsearch instance.
     * 
     */
    public Optional<Output<String>> elasticsearchUsername() {
        return Optional.ofNullable(this.elasticsearchUsername);
    }

    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     * 
     */
    @Import(name="emailAdditionalText")
    private @Nullable Output<String> emailAdditionalText;

    /**
     * @return Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     * 
     */
    public Optional<Output<String>> emailAdditionalText() {
        return Optional.ofNullable(this.emailAdditionalText);
    }

    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     * 
     */
    @Import(name="emailAuthorInBody")
    private @Nullable Output<Boolean> emailAuthorInBody;

    /**
     * @return Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     * 
     */
    public Optional<Output<Boolean>> emailAuthorInBody() {
        return Optional.ofNullable(this.emailAuthorInBody);
    }

    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     * 
     */
    @Import(name="enabledGitAccessProtocol")
    private @Nullable Output<String> enabledGitAccessProtocol;

    /**
     * @return Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     * 
     */
    public Optional<Output<String>> enabledGitAccessProtocol() {
        return Optional.ofNullable(this.enabledGitAccessProtocol);
    }

    /**
     * Enabling this permits enforcement of namespace storage limits.
     * 
     */
    @Import(name="enforceNamespaceStorageLimit")
    private @Nullable Output<Boolean> enforceNamespaceStorageLimit;

    /**
     * @return Enabling this permits enforcement of namespace storage limits.
     * 
     */
    public Optional<Output<Boolean>> enforceNamespaceStorageLimit() {
        return Optional.ofNullable(this.enforceNamespaceStorageLimit);
    }

    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     * 
     */
    @Import(name="enforceTerms")
    private @Nullable Output<Boolean> enforceTerms;

    /**
     * @return (If enabled, requires: terms) Enforce application ToS to all users.
     * 
     */
    public Optional<Output<Boolean>> enforceTerms() {
        return Optional.ofNullable(this.enforceTerms);
    }

    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     * 
     */
    @Import(name="externalAuthClientCert")
    private @Nullable Output<String> externalAuthClientCert;

    /**
     * @return (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     * 
     */
    public Optional<Output<String>> externalAuthClientCert() {
        return Optional.ofNullable(this.externalAuthClientCert);
    }

    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     * 
     */
    @Import(name="externalAuthClientKey")
    private @Nullable Output<String> externalAuthClientKey;

    /**
     * @return Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     * 
     */
    public Optional<Output<String>> externalAuthClientKey() {
        return Optional.ofNullable(this.externalAuthClientKey);
    }

    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     * 
     */
    @Import(name="externalAuthClientKeyPass")
    private @Nullable Output<String> externalAuthClientKeyPass;

    /**
     * @return Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     * 
     */
    public Optional<Output<String>> externalAuthClientKeyPass() {
        return Optional.ofNullable(this.externalAuthClientKeyPass);
    }

    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     * 
     */
    @Import(name="externalAuthorizationServiceDefaultLabel")
    private @Nullable Output<String> externalAuthorizationServiceDefaultLabel;

    /**
     * @return The default classification label to use when requesting authorization and no classification label has been specified on the project.
     * 
     */
    public Optional<Output<String>> externalAuthorizationServiceDefaultLabel() {
        return Optional.ofNullable(this.externalAuthorizationServiceDefaultLabel);
    }

    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     * 
     */
    @Import(name="externalAuthorizationServiceEnabled")
    private @Nullable Output<Boolean> externalAuthorizationServiceEnabled;

    /**
     * @return (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     * 
     */
    public Optional<Output<Boolean>> externalAuthorizationServiceEnabled() {
        return Optional.ofNullable(this.externalAuthorizationServiceEnabled);
    }

    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     * 
     */
    @Import(name="externalAuthorizationServiceTimeout")
    private @Nullable Output<Double> externalAuthorizationServiceTimeout;

    /**
     * @return The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     * 
     */
    public Optional<Output<Double>> externalAuthorizationServiceTimeout() {
        return Optional.ofNullable(this.externalAuthorizationServiceTimeout);
    }

    /**
     * URL to which authorization requests are directed.
     * 
     */
    @Import(name="externalAuthorizationServiceUrl")
    private @Nullable Output<String> externalAuthorizationServiceUrl;

    /**
     * @return URL to which authorization requests are directed.
     * 
     */
    public Optional<Output<String>> externalAuthorizationServiceUrl() {
        return Optional.ofNullable(this.externalAuthorizationServiceUrl);
    }

    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     * 
     */
    @Import(name="externalPipelineValidationServiceTimeout")
    private @Nullable Output<Integer> externalPipelineValidationServiceTimeout;

    /**
     * @return How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     * 
     */
    public Optional<Output<Integer>> externalPipelineValidationServiceTimeout() {
        return Optional.ofNullable(this.externalPipelineValidationServiceTimeout);
    }

    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     * 
     */
    @Import(name="externalPipelineValidationServiceToken")
    private @Nullable Output<String> externalPipelineValidationServiceToken;

    /**
     * @return Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     * 
     */
    public Optional<Output<String>> externalPipelineValidationServiceToken() {
        return Optional.ofNullable(this.externalPipelineValidationServiceToken);
    }

    /**
     * URL to use for pipeline validation requests.
     * 
     */
    @Import(name="externalPipelineValidationServiceUrl")
    private @Nullable Output<String> externalPipelineValidationServiceUrl;

    /**
     * @return URL to use for pipeline validation requests.
     * 
     */
    public Optional<Output<String>> externalPipelineValidationServiceUrl() {
        return Optional.ofNullable(this.externalPipelineValidationServiceUrl);
    }

    /**
     * The ID of a project to load custom file templates from.
     * 
     */
    @Import(name="fileTemplateProjectId")
    private @Nullable Output<Integer> fileTemplateProjectId;

    /**
     * @return The ID of a project to load custom file templates from.
     * 
     */
    public Optional<Output<Integer>> fileTemplateProjectId() {
        return Optional.ofNullable(this.fileTemplateProjectId);
    }

    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
     * 
     */
    @Import(name="firstDayOfWeek")
    private @Nullable Output<Integer> firstDayOfWeek;

    /**
     * @return Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
     * 
     */
    public Optional<Output<Integer>> firstDayOfWeek() {
        return Optional.ofNullable(this.firstDayOfWeek);
    }

    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     * 
     */
    @Import(name="geoNodeAllowedIps")
    private @Nullable Output<String> geoNodeAllowedIps;

    /**
     * @return Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     * 
     */
    public Optional<Output<String>> geoNodeAllowedIps() {
        return Optional.ofNullable(this.geoNodeAllowedIps);
    }

    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     * 
     */
    @Import(name="geoStatusTimeout")
    private @Nullable Output<Integer> geoStatusTimeout;

    /**
     * @return The amount of seconds after which a request to get a secondary node status times out.
     * 
     */
    public Optional<Output<Integer>> geoStatusTimeout() {
        return Optional.ofNullable(this.geoStatusTimeout);
    }

    /**
     * List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
     * 
     */
    @Import(name="gitRateLimitUsersAllowlists")
    private @Nullable Output<List<String>> gitRateLimitUsersAllowlists;

    /**
     * @return List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
     * 
     */
    public Optional<Output<List<String>>> gitRateLimitUsersAllowlists() {
        return Optional.ofNullable(this.gitRateLimitUsersAllowlists);
    }

    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     * 
     */
    @Import(name="gitTwoFactorSessionExpiry")
    private @Nullable Output<Integer> gitTwoFactorSessionExpiry;

    /**
     * @return Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     * 
     */
    public Optional<Output<Integer>> gitTwoFactorSessionExpiry() {
        return Optional.ofNullable(this.gitTwoFactorSessionExpiry);
    }

    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     * 
     */
    @Import(name="gitalyTimeoutDefault")
    private @Nullable Output<Integer> gitalyTimeoutDefault;

    /**
     * @return Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     * 
     */
    public Optional<Output<Integer>> gitalyTimeoutDefault() {
        return Optional.ofNullable(this.gitalyTimeoutDefault);
    }

    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     * 
     */
    @Import(name="gitalyTimeoutFast")
    private @Nullable Output<Integer> gitalyTimeoutFast;

    /**
     * @return Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     * 
     */
    public Optional<Output<Integer>> gitalyTimeoutFast() {
        return Optional.ofNullable(this.gitalyTimeoutFast);
    }

    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     * 
     */
    @Import(name="gitalyTimeoutMedium")
    private @Nullable Output<Integer> gitalyTimeoutMedium;

    /**
     * @return Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     * 
     */
    public Optional<Output<Integer>> gitalyTimeoutMedium() {
        return Optional.ofNullable(this.gitalyTimeoutMedium);
    }

    /**
     * Enable Grafana.
     * 
     */
    @Import(name="grafanaEnabled")
    private @Nullable Output<Boolean> grafanaEnabled;

    /**
     * @return Enable Grafana.
     * 
     */
    public Optional<Output<Boolean>> grafanaEnabled() {
        return Optional.ofNullable(this.grafanaEnabled);
    }

    /**
     * Grafana URL.
     * 
     */
    @Import(name="grafanaUrl")
    private @Nullable Output<String> grafanaUrl;

    /**
     * @return Grafana URL.
     * 
     */
    public Optional<Output<String>> grafanaUrl() {
        return Optional.ofNullable(this.grafanaUrl);
    }

    /**
     * Enable Gravatar.
     * 
     */
    @Import(name="gravatarEnabled")
    private @Nullable Output<Boolean> gravatarEnabled;

    /**
     * @return Enable Gravatar.
     * 
     */
    public Optional<Output<Boolean>> gravatarEnabled() {
        return Optional.ofNullable(this.gravatarEnabled);
    }

    /**
     * Prevent overrides of default branch protection.
     * 
     */
    @Import(name="groupOwnersCanManageDefaultBranchProtection")
    private @Nullable Output<Boolean> groupOwnersCanManageDefaultBranchProtection;

    /**
     * @return Prevent overrides of default branch protection.
     * 
     */
    public Optional<Output<Boolean>> groupOwnersCanManageDefaultBranchProtection() {
        return Optional.ofNullable(this.groupOwnersCanManageDefaultBranchProtection);
    }

    /**
     * Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
     * 
     */
    @Import(name="hashedStorageEnabled")
    private @Nullable Output<Boolean> hashedStorageEnabled;

    /**
     * @return Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
     * 
     */
    public Optional<Output<Boolean>> hashedStorageEnabled() {
        return Optional.ofNullable(this.hashedStorageEnabled);
    }

    /**
     * Hide marketing-related entries from help.
     * 
     */
    @Import(name="helpPageHideCommercialContent")
    private @Nullable Output<Boolean> helpPageHideCommercialContent;

    /**
     * @return Hide marketing-related entries from help.
     * 
     */
    public Optional<Output<Boolean>> helpPageHideCommercialContent() {
        return Optional.ofNullable(this.helpPageHideCommercialContent);
    }

    /**
     * Alternate support URL for help page and help dropdown.
     * 
     */
    @Import(name="helpPageSupportUrl")
    private @Nullable Output<String> helpPageSupportUrl;

    /**
     * @return Alternate support URL for help page and help dropdown.
     * 
     */
    public Optional<Output<String>> helpPageSupportUrl() {
        return Optional.ofNullable(this.helpPageSupportUrl);
    }

    /**
     * Custom text displayed on the help page.
     * 
     */
    @Import(name="helpPageText")
    private @Nullable Output<String> helpPageText;

    /**
     * @return Custom text displayed on the help page.
     * 
     */
    public Optional<Output<String>> helpPageText() {
        return Optional.ofNullable(this.helpPageText);
    }

    /**
     * GitLab server administrator information.
     * 
     */
    @Import(name="helpText")
    private @Nullable Output<String> helpText;

    /**
     * @return GitLab server administrator information.
     * 
     */
    public Optional<Output<String>> helpText() {
        return Optional.ofNullable(this.helpText);
    }

    /**
     * Do not display offers from third parties in GitLab.
     * 
     */
    @Import(name="hideThirdPartyOffers")
    private @Nullable Output<Boolean> hideThirdPartyOffers;

    /**
     * @return Do not display offers from third parties in GitLab.
     * 
     */
    public Optional<Output<Boolean>> hideThirdPartyOffers() {
        return Optional.ofNullable(this.hideThirdPartyOffers);
    }

    /**
     * Redirect to this URL when not logged in.
     * 
     */
    @Import(name="homePageUrl")
    private @Nullable Output<String> homePageUrl;

    /**
     * @return Redirect to this URL when not logged in.
     * 
     */
    public Optional<Output<String>> homePageUrl() {
        return Optional.ofNullable(this.homePageUrl);
    }

    /**
     * (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
     * 
     */
    @Import(name="housekeepingEnabled")
    private @Nullable Output<Boolean> housekeepingEnabled;

    /**
     * @return (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
     * 
     */
    public Optional<Output<Boolean>> housekeepingEnabled() {
        return Optional.ofNullable(this.housekeepingEnabled);
    }

    /**
     * Number of Git pushes after which an incremental git repack is run.
     * 
     */
    @Import(name="housekeepingFullRepackPeriod")
    private @Nullable Output<Integer> housekeepingFullRepackPeriod;

    /**
     * @return Number of Git pushes after which an incremental git repack is run.
     * 
     */
    public Optional<Output<Integer>> housekeepingFullRepackPeriod() {
        return Optional.ofNullable(this.housekeepingFullRepackPeriod);
    }

    /**
     * Number of Git pushes after which git gc is run.
     * 
     */
    @Import(name="housekeepingGcPeriod")
    private @Nullable Output<Integer> housekeepingGcPeriod;

    /**
     * @return Number of Git pushes after which git gc is run.
     * 
     */
    public Optional<Output<Integer>> housekeepingGcPeriod() {
        return Optional.ofNullable(this.housekeepingGcPeriod);
    }

    /**
     * Number of Git pushes after which an incremental git repack is run.
     * 
     */
    @Import(name="housekeepingIncrementalRepackPeriod")
    private @Nullable Output<Integer> housekeepingIncrementalRepackPeriod;

    /**
     * @return Number of Git pushes after which an incremental git repack is run.
     * 
     */
    public Optional<Output<Integer>> housekeepingIncrementalRepackPeriod() {
        return Optional.ofNullable(this.housekeepingIncrementalRepackPeriod);
    }

    /**
     * Enable HTML emails.
     * 
     */
    @Import(name="htmlEmailsEnabled")
    private @Nullable Output<Boolean> htmlEmailsEnabled;

    /**
     * @return Enable HTML emails.
     * 
     */
    public Optional<Output<Boolean>> htmlEmailsEnabled() {
        return Optional.ofNullable(this.htmlEmailsEnabled);
    }

    /**
     * Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
     * 
     */
    @Import(name="importSources")
    private @Nullable Output<List<String>> importSources;

    /**
     * @return Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
     * 
     */
    public Optional<Output<List<String>>> importSources() {
        return Optional.ofNullable(this.importSources);
    }

    /**
     * Enable in-product marketing emails. Enabled by default.
     * 
     */
    @Import(name="inProductMarketingEmailsEnabled")
    private @Nullable Output<Boolean> inProductMarketingEmailsEnabled;

    /**
     * @return Enable in-product marketing emails. Enabled by default.
     * 
     */
    public Optional<Output<Boolean>> inProductMarketingEmailsEnabled() {
        return Optional.ofNullable(this.inProductMarketingEmailsEnabled);
    }

    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     * 
     */
    @Import(name="inactiveProjectsDeleteAfterMonths")
    private @Nullable Output<Integer> inactiveProjectsDeleteAfterMonths;

    /**
     * @return If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     * 
     */
    public Optional<Output<Integer>> inactiveProjectsDeleteAfterMonths() {
        return Optional.ofNullable(this.inactiveProjectsDeleteAfterMonths);
    }

    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     * 
     */
    @Import(name="inactiveProjectsMinSizeMb")
    private @Nullable Output<Integer> inactiveProjectsMinSizeMb;

    /**
     * @return If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     * 
     */
    public Optional<Output<Integer>> inactiveProjectsMinSizeMb() {
        return Optional.ofNullable(this.inactiveProjectsMinSizeMb);
    }

    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     * 
     */
    @Import(name="inactiveProjectsSendWarningEmailAfterMonths")
    private @Nullable Output<Integer> inactiveProjectsSendWarningEmailAfterMonths;

    /**
     * @return If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     * 
     */
    public Optional<Output<Integer>> inactiveProjectsSendWarningEmailAfterMonths() {
        return Optional.ofNullable(this.inactiveProjectsSendWarningEmailAfterMonths);
    }

    /**
     * Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
     * 
     */
    @Import(name="invisibleCaptchaEnabled")
    private @Nullable Output<Boolean> invisibleCaptchaEnabled;

    /**
     * @return Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
     * 
     */
    public Optional<Output<Boolean>> invisibleCaptchaEnabled() {
        return Optional.ofNullable(this.invisibleCaptchaEnabled);
    }

    /**
     * Max number of issue creation requests per minute per user. Disabled by default.
     * 
     */
    @Import(name="issuesCreateLimit")
    private @Nullable Output<Integer> issuesCreateLimit;

    /**
     * @return Max number of issue creation requests per minute per user. Disabled by default.
     * 
     */
    public Optional<Output<Integer>> issuesCreateLimit() {
        return Optional.ofNullable(this.issuesCreateLimit);
    }

    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
     * 
     */
    @Import(name="keepLatestArtifact")
    private @Nullable Output<Boolean> keepLatestArtifact;

    /**
     * @return Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
     * 
     */
    public Optional<Output<Boolean>> keepLatestArtifact() {
        return Optional.ofNullable(this.keepLatestArtifact);
    }

    /**
     * Increase this value when any cached Markdown should be invalidated.
     * 
     */
    @Import(name="localMarkdownVersion")
    private @Nullable Output<Integer> localMarkdownVersion;

    /**
     * @return Increase this value when any cached Markdown should be invalidated.
     * 
     */
    public Optional<Output<Integer>> localMarkdownVersion() {
        return Optional.ofNullable(this.localMarkdownVersion);
    }

    /**
     * Enable Mailgun event receiver.
     * 
     */
    @Import(name="mailgunEventsEnabled")
    private @Nullable Output<Boolean> mailgunEventsEnabled;

    /**
     * @return Enable Mailgun event receiver.
     * 
     */
    public Optional<Output<Boolean>> mailgunEventsEnabled() {
        return Optional.ofNullable(this.mailgunEventsEnabled);
    }

    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     * 
     */
    @Import(name="mailgunSigningKey")
    private @Nullable Output<String> mailgunSigningKey;

    /**
     * @return The Mailgun HTTP webhook signing key for receiving events from webhook.
     * 
     */
    public Optional<Output<String>> mailgunSigningKey() {
        return Optional.ofNullable(this.mailgunSigningKey);
    }

    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     * 
     */
    @Import(name="maintenanceMode")
    private @Nullable Output<Boolean> maintenanceMode;

    /**
     * @return When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     * 
     */
    public Optional<Output<Boolean>> maintenanceMode() {
        return Optional.ofNullable(this.maintenanceMode);
    }

    /**
     * Message displayed when instance is in maintenance mode.
     * 
     */
    @Import(name="maintenanceModeMessage")
    private @Nullable Output<String> maintenanceModeMessage;

    /**
     * @return Message displayed when instance is in maintenance mode.
     * 
     */
    public Optional<Output<String>> maintenanceModeMessage() {
        return Optional.ofNullable(this.maintenanceModeMessage);
    }

    /**
     * Maximum artifacts size in MB.
     * 
     */
    @Import(name="maxArtifactsSize")
    private @Nullable Output<Integer> maxArtifactsSize;

    /**
     * @return Maximum artifacts size in MB.
     * 
     */
    public Optional<Output<Integer>> maxArtifactsSize() {
        return Optional.ofNullable(this.maxArtifactsSize);
    }

    /**
     * Limit attachment size in MB.
     * 
     */
    @Import(name="maxAttachmentSize")
    private @Nullable Output<Integer> maxAttachmentSize;

    /**
     * @return Limit attachment size in MB.
     * 
     */
    public Optional<Output<Integer>> maxAttachmentSize() {
        return Optional.ofNullable(this.maxAttachmentSize);
    }

    /**
     * Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
     * 
     */
    @Import(name="maxExportSize")
    private @Nullable Output<Integer> maxExportSize;

    /**
     * @return Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
     * 
     */
    public Optional<Output<Integer>> maxExportSize() {
        return Optional.ofNullable(this.maxExportSize);
    }

    /**
     * Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
     * 
     */
    @Import(name="maxImportSize")
    private @Nullable Output<Integer> maxImportSize;

    /**
     * @return Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
     * 
     */
    public Optional<Output<Integer>> maxImportSize() {
        return Optional.ofNullable(this.maxImportSize);
    }

    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
     * 
     */
    @Import(name="maxNumberOfRepositoryDownloads")
    private @Nullable Output<Integer> maxNumberOfRepositoryDownloads;

    /**
     * @return Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
     * 
     */
    public Optional<Output<Integer>> maxNumberOfRepositoryDownloads() {
        return Optional.ofNullable(this.maxNumberOfRepositoryDownloads);
    }

    /**
     * Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
     * 
     */
    @Import(name="maxNumberOfRepositoryDownloadsWithinTimePeriod")
    private @Nullable Output<Integer> maxNumberOfRepositoryDownloadsWithinTimePeriod;

    /**
     * @return Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
     * 
     */
    public Optional<Output<Integer>> maxNumberOfRepositoryDownloadsWithinTimePeriod() {
        return Optional.ofNullable(this.maxNumberOfRepositoryDownloadsWithinTimePeriod);
    }

    /**
     * Maximum size of pages repositories in MB.
     * 
     */
    @Import(name="maxPagesSize")
    private @Nullable Output<Integer> maxPagesSize;

    /**
     * @return Maximum size of pages repositories in MB.
     * 
     */
    public Optional<Output<Integer>> maxPagesSize() {
        return Optional.ofNullable(this.maxPagesSize);
    }

    /**
     * Maximum allowable lifetime for access tokens in days.
     * 
     */
    @Import(name="maxPersonalAccessTokenLifetime")
    private @Nullable Output<Integer> maxPersonalAccessTokenLifetime;

    /**
     * @return Maximum allowable lifetime for access tokens in days.
     * 
     */
    public Optional<Output<Integer>> maxPersonalAccessTokenLifetime() {
        return Optional.ofNullable(this.maxPersonalAccessTokenLifetime);
    }

    /**
     * Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
     * 
     */
    @Import(name="maxSshKeyLifetime")
    private @Nullable Output<Integer> maxSshKeyLifetime;

    /**
     * @return Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
     * 
     */
    public Optional<Output<Integer>> maxSshKeyLifetime() {
        return Optional.ofNullable(this.maxSshKeyLifetime);
    }

    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     * 
     */
    @Import(name="metricsMethodCallThreshold")
    private @Nullable Output<Integer> metricsMethodCallThreshold;

    /**
     * @return A method call is only tracked when it takes longer than the given amount of milliseconds.
     * 
     */
    public Optional<Output<Integer>> metricsMethodCallThreshold() {
        return Optional.ofNullable(this.metricsMethodCallThreshold);
    }

    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     * 
     */
    @Import(name="mirrorAvailable")
    private @Nullable Output<Boolean> mirrorAvailable;

    /**
     * @return Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     * 
     */
    public Optional<Output<Boolean>> mirrorAvailable() {
        return Optional.ofNullable(this.mirrorAvailable);
    }

    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     * 
     */
    @Import(name="mirrorCapacityThreshold")
    private @Nullable Output<Integer> mirrorCapacityThreshold;

    /**
     * @return Minimum capacity to be available before scheduling more mirrors preemptively.
     * 
     */
    public Optional<Output<Integer>> mirrorCapacityThreshold() {
        return Optional.ofNullable(this.mirrorCapacityThreshold);
    }

    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     * 
     */
    @Import(name="mirrorMaxCapacity")
    private @Nullable Output<Integer> mirrorMaxCapacity;

    /**
     * @return Maximum number of mirrors that can be synchronizing at the same time.
     * 
     */
    public Optional<Output<Integer>> mirrorMaxCapacity() {
        return Optional.ofNullable(this.mirrorMaxCapacity);
    }

    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     * 
     */
    @Import(name="mirrorMaxDelay")
    private @Nullable Output<Integer> mirrorMaxDelay;

    /**
     * @return Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     * 
     */
    public Optional<Output<Integer>> mirrorMaxDelay() {
        return Optional.ofNullable(this.mirrorMaxDelay);
    }

    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     * 
     */
    @Import(name="npmPackageRequestsForwarding")
    private @Nullable Output<Boolean> npmPackageRequestsForwarding;

    /**
     * @return Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     * 
     */
    public Optional<Output<Boolean>> npmPackageRequestsForwarding() {
        return Optional.ofNullable(this.npmPackageRequestsForwarding);
    }

    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     * 
     */
    @Import(name="outboundLocalRequestsWhitelists")
    private @Nullable Output<List<String>> outboundLocalRequestsWhitelists;

    /**
     * @return Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     * 
     */
    public Optional<Output<List<String>>> outboundLocalRequestsWhitelists() {
        return Optional.ofNullable(this.outboundLocalRequestsWhitelists);
    }

    /**
     * Number of workers assigned to the packages cleanup policies.
     * 
     */
    @Import(name="packageRegistryCleanupPoliciesWorkerCapacity")
    private @Nullable Output<Integer> packageRegistryCleanupPoliciesWorkerCapacity;

    /**
     * @return Number of workers assigned to the packages cleanup policies.
     * 
     */
    public Optional<Output<Integer>> packageRegistryCleanupPoliciesWorkerCapacity() {
        return Optional.ofNullable(this.packageRegistryCleanupPoliciesWorkerCapacity);
    }

    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     * 
     */
    @Import(name="pagesDomainVerificationEnabled")
    private @Nullable Output<Boolean> pagesDomainVerificationEnabled;

    /**
     * @return Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     * 
     */
    public Optional<Output<Boolean>> pagesDomainVerificationEnabled() {
        return Optional.ofNullable(this.pagesDomainVerificationEnabled);
    }

    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
     * 
     */
    @Import(name="passwordAuthenticationEnabledForGit")
    private @Nullable Output<Boolean> passwordAuthenticationEnabledForGit;

    /**
     * @return Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
     * 
     */
    public Optional<Output<Boolean>> passwordAuthenticationEnabledForGit() {
        return Optional.ofNullable(this.passwordAuthenticationEnabledForGit);
    }

    /**
     * Enable authentication for the web interface via a GitLab account password. Default is true.
     * 
     */
    @Import(name="passwordAuthenticationEnabledForWeb")
    private @Nullable Output<Boolean> passwordAuthenticationEnabledForWeb;

    /**
     * @return Enable authentication for the web interface via a GitLab account password. Default is true.
     * 
     */
    public Optional<Output<Boolean>> passwordAuthenticationEnabledForWeb() {
        return Optional.ofNullable(this.passwordAuthenticationEnabledForWeb);
    }

    /**
     * Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
     * 
     */
    @Import(name="passwordLowercaseRequired")
    private @Nullable Output<Boolean> passwordLowercaseRequired;

    /**
     * @return Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
     * 
     */
    public Optional<Output<Boolean>> passwordLowercaseRequired() {
        return Optional.ofNullable(this.passwordLowercaseRequired);
    }

    /**
     * Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
     * 
     */
    @Import(name="passwordNumberRequired")
    private @Nullable Output<Boolean> passwordNumberRequired;

    /**
     * @return Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
     * 
     */
    public Optional<Output<Boolean>> passwordNumberRequired() {
        return Optional.ofNullable(this.passwordNumberRequired);
    }

    /**
     * Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
     * 
     */
    @Import(name="passwordSymbolRequired")
    private @Nullable Output<Boolean> passwordSymbolRequired;

    /**
     * @return Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
     * 
     */
    public Optional<Output<Boolean>> passwordSymbolRequired() {
        return Optional.ofNullable(this.passwordSymbolRequired);
    }

    /**
     * Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
     * 
     */
    @Import(name="passwordUppercaseRequired")
    private @Nullable Output<Boolean> passwordUppercaseRequired;

    /**
     * @return Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
     * 
     */
    public Optional<Output<Boolean>> passwordUppercaseRequired() {
        return Optional.ofNullable(this.passwordUppercaseRequired);
    }

    /**
     * Path of the group that is allowed to toggle the performance bar.
     * 
     */
    @Import(name="performanceBarAllowedGroupPath")
    private @Nullable Output<String> performanceBarAllowedGroupPath;

    /**
     * @return Path of the group that is allowed to toggle the performance bar.
     * 
     */
    public Optional<Output<String>> performanceBarAllowedGroupPath() {
        return Optional.ofNullable(this.performanceBarAllowedGroupPath);
    }

    /**
     * Prefix for all generated personal access tokens.
     * 
     */
    @Import(name="personalAccessTokenPrefix")
    private @Nullable Output<String> personalAccessTokenPrefix;

    /**
     * @return Prefix for all generated personal access tokens.
     * 
     */
    public Optional<Output<String>> personalAccessTokenPrefix() {
        return Optional.ofNullable(this.personalAccessTokenPrefix);
    }

    /**
     * Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
     * 
     */
    @Import(name="pipelineLimitPerProjectUserSha")
    private @Nullable Output<Integer> pipelineLimitPerProjectUserSha;

    /**
     * @return Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
     * 
     */
    public Optional<Output<Integer>> pipelineLimitPerProjectUserSha() {
        return Optional.ofNullable(this.pipelineLimitPerProjectUserSha);
    }

    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
     * 
     */
    @Import(name="plantumlEnabled")
    private @Nullable Output<Boolean> plantumlEnabled;

    /**
     * @return (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
     * 
     */
    public Optional<Output<Boolean>> plantumlEnabled() {
        return Optional.ofNullable(this.plantumlEnabled);
    }

    /**
     * The PlantUML instance URL for integration.
     * 
     */
    @Import(name="plantumlUrl")
    private @Nullable Output<String> plantumlUrl;

    /**
     * @return The PlantUML instance URL for integration.
     * 
     */
    public Optional<Output<String>> plantumlUrl() {
        return Optional.ofNullable(this.plantumlUrl);
    }

    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     * 
     */
    @Import(name="pollingIntervalMultiplier")
    private @Nullable Output<Double> pollingIntervalMultiplier;

    /**
     * @return Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     * 
     */
    public Optional<Output<Double>> pollingIntervalMultiplier() {
        return Optional.ofNullable(this.pollingIntervalMultiplier);
    }

    /**
     * Enable project export.
     * 
     */
    @Import(name="projectExportEnabled")
    private @Nullable Output<Boolean> projectExportEnabled;

    /**
     * @return Enable project export.
     * 
     */
    public Optional<Output<Boolean>> projectExportEnabled() {
        return Optional.ofNullable(this.projectExportEnabled);
    }

    /**
     * Enable Prometheus metrics.
     * 
     */
    @Import(name="prometheusMetricsEnabled")
    private @Nullable Output<Boolean> prometheusMetricsEnabled;

    /**
     * @return Enable Prometheus metrics.
     * 
     */
    public Optional<Output<Boolean>> prometheusMetricsEnabled() {
        return Optional.ofNullable(this.prometheusMetricsEnabled);
    }

    /**
     * CI/CD variables are protected by default.
     * 
     */
    @Import(name="protectedCiVariables")
    private @Nullable Output<Boolean> protectedCiVariables;

    /**
     * @return CI/CD variables are protected by default.
     * 
     */
    public Optional<Output<Boolean>> protectedCiVariables() {
        return Optional.ofNullable(this.protectedCiVariables);
    }

    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     * 
     */
    @Import(name="pushEventActivitiesLimit")
    private @Nullable Output<Integer> pushEventActivitiesLimit;

    /**
     * @return Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     * 
     */
    public Optional<Output<Integer>> pushEventActivitiesLimit() {
        return Optional.ofNullable(this.pushEventActivitiesLimit);
    }

    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     * 
     */
    @Import(name="pushEventHooksLimit")
    private @Nullable Output<Integer> pushEventHooksLimit;

    /**
     * @return Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     * 
     */
    public Optional<Output<Integer>> pushEventHooksLimit() {
        return Optional.ofNullable(this.pushEventHooksLimit);
    }

    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     * 
     */
    @Import(name="pypiPackageRequestsForwarding")
    private @Nullable Output<Boolean> pypiPackageRequestsForwarding;

    /**
     * @return Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     * 
     */
    public Optional<Output<Boolean>> pypiPackageRequestsForwarding() {
        return Optional.ofNullable(this.pypiPackageRequestsForwarding);
    }

    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     * 
     */
    @Import(name="rateLimitingResponseText")
    private @Nullable Output<String> rateLimitingResponseText;

    /**
     * @return When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     * 
     */
    public Optional<Output<String>> rateLimitingResponseText() {
        return Optional.ofNullable(this.rateLimitingResponseText);
    }

    /**
     * Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
     * 
     */
    @Import(name="rawBlobRequestLimit")
    private @Nullable Output<Integer> rawBlobRequestLimit;

    /**
     * @return Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
     * 
     */
    public Optional<Output<Integer>> rawBlobRequestLimit() {
        return Optional.ofNullable(this.rawBlobRequestLimit);
    }

    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     * 
     */
    @Import(name="recaptchaEnabled")
    private @Nullable Output<Boolean> recaptchaEnabled;

    /**
     * @return (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     * 
     */
    public Optional<Output<Boolean>> recaptchaEnabled() {
        return Optional.ofNullable(this.recaptchaEnabled);
    }

    /**
     * Private key for reCAPTCHA.
     * 
     */
    @Import(name="recaptchaPrivateKey")
    private @Nullable Output<String> recaptchaPrivateKey;

    /**
     * @return Private key for reCAPTCHA.
     * 
     */
    public Optional<Output<String>> recaptchaPrivateKey() {
        return Optional.ofNullable(this.recaptchaPrivateKey);
    }

    /**
     * Site key for reCAPTCHA.
     * 
     */
    @Import(name="recaptchaSiteKey")
    private @Nullable Output<String> recaptchaSiteKey;

    /**
     * @return Site key for reCAPTCHA.
     * 
     */
    public Optional<Output<String>> recaptchaSiteKey() {
        return Optional.ofNullable(this.recaptchaSiteKey);
    }

    /**
     * Maximum push size (MB).
     * 
     */
    @Import(name="receiveMaxInputSize")
    private @Nullable Output<Integer> receiveMaxInputSize;

    /**
     * @return Maximum push size (MB).
     * 
     */
    public Optional<Output<Integer>> receiveMaxInputSize() {
        return Optional.ofNullable(this.receiveMaxInputSize);
    }

    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     * 
     */
    @Import(name="repositoryChecksEnabled")
    private @Nullable Output<Boolean> repositoryChecksEnabled;

    /**
     * @return GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     * 
     */
    public Optional<Output<Boolean>> repositoryChecksEnabled() {
        return Optional.ofNullable(this.repositoryChecksEnabled);
    }

    /**
     * Size limit per repository (MB).
     * 
     */
    @Import(name="repositorySizeLimit")
    private @Nullable Output<Integer> repositorySizeLimit;

    /**
     * @return Size limit per repository (MB).
     * 
     */
    public Optional<Output<Integer>> repositorySizeLimit() {
        return Optional.ofNullable(this.repositorySizeLimit);
    }

    /**
     * (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
     * 
     */
    @Import(name="repositoryStorages")
    private @Nullable Output<List<String>> repositoryStorages;

    /**
     * @return (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
     * 
     */
    public Optional<Output<List<String>>> repositoryStorages() {
        return Optional.ofNullable(this.repositoryStorages);
    }

    /**
     * (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     * 
     */
    @Import(name="repositoryStoragesWeighted")
    private @Nullable Output<Map<String,Integer>> repositoryStoragesWeighted;

    /**
     * @return (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     * 
     */
    public Optional<Output<Map<String,Integer>>> repositoryStoragesWeighted() {
        return Optional.ofNullable(this.repositoryStoragesWeighted);
    }

    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     * 
     */
    @Import(name="requireAdminApprovalAfterUserSignup")
    private @Nullable Output<Boolean> requireAdminApprovalAfterUserSignup;

    /**
     * @return When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     * 
     */
    public Optional<Output<Boolean>> requireAdminApprovalAfterUserSignup() {
        return Optional.ofNullable(this.requireAdminApprovalAfterUserSignup);
    }

    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     * 
     */
    @Import(name="requireTwoFactorAuthentication")
    private @Nullable Output<Boolean> requireTwoFactorAuthentication;

    /**
     * @return (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     * 
     */
    public Optional<Output<Boolean>> requireTwoFactorAuthentication() {
        return Optional.ofNullable(this.requireTwoFactorAuthentication);
    }

    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
     * 
     */
    @Import(name="restrictedVisibilityLevels")
    private @Nullable Output<List<String>> restrictedVisibilityLevels;

    /**
     * @return Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
     * 
     */
    public Optional<Output<List<String>>> restrictedVisibilityLevels() {
        return Optional.ofNullable(this.restrictedVisibilityLevels);
    }

    /**
     * The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
     * 
     */
    @Import(name="rsaKeyRestriction")
    private @Nullable Output<Integer> rsaKeyRestriction;

    /**
     * @return The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
     * 
     */
    public Optional<Output<Integer>> rsaKeyRestriction() {
        return Optional.ofNullable(this.rsaKeyRestriction);
    }

    /**
     * Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
     * 
     */
    @Import(name="searchRateLimit")
    private @Nullable Output<Integer> searchRateLimit;

    /**
     * @return Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
     * 
     */
    public Optional<Output<Integer>> searchRateLimit() {
        return Optional.ofNullable(this.searchRateLimit);
    }

    /**
     * Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
     * 
     */
    @Import(name="searchRateLimitUnauthenticated")
    private @Nullable Output<Integer> searchRateLimitUnauthenticated;

    /**
     * @return Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
     * 
     */
    public Optional<Output<Integer>> searchRateLimitUnauthenticated() {
        return Optional.ofNullable(this.searchRateLimitUnauthenticated);
    }

    /**
     * Send confirmation email on sign-up.
     * 
     */
    @Import(name="sendUserConfirmationEmail")
    private @Nullable Output<Boolean> sendUserConfirmationEmail;

    /**
     * @return Send confirmation email on sign-up.
     * 
     */
    public Optional<Output<Boolean>> sendUserConfirmationEmail() {
        return Optional.ofNullable(this.sendUserConfirmationEmail);
    }

    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     * 
     */
    @Import(name="sessionExpireDelay")
    private @Nullable Output<Integer> sessionExpireDelay;

    /**
     * @return Session duration in minutes. GitLab restart is required to apply changes.
     * 
     */
    public Optional<Output<Integer>> sessionExpireDelay() {
        return Optional.ofNullable(this.sessionExpireDelay);
    }

    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     * 
     */
    @Import(name="sharedRunnersEnabled")
    private @Nullable Output<Boolean> sharedRunnersEnabled;

    /**
     * @return (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     * 
     */
    public Optional<Output<Boolean>> sharedRunnersEnabled() {
        return Optional.ofNullable(this.sharedRunnersEnabled);
    }

    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     * 
     */
    @Import(name="sharedRunnersMinutes")
    private @Nullable Output<Integer> sharedRunnersMinutes;

    /**
     * @return Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     * 
     */
    public Optional<Output<Integer>> sharedRunnersMinutes() {
        return Optional.ofNullable(this.sharedRunnersMinutes);
    }

    /**
     * Shared runners text.
     * 
     */
    @Import(name="sharedRunnersText")
    private @Nullable Output<String> sharedRunnersText;

    /**
     * @return Shared runners text.
     * 
     */
    public Optional<Output<String>> sharedRunnersText() {
        return Optional.ofNullable(this.sharedRunnersText);
    }

    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
     * 
     */
    @Import(name="sidekiqJobLimiterCompressionThresholdBytes")
    private @Nullable Output<Integer> sidekiqJobLimiterCompressionThresholdBytes;

    /**
     * @return The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
     * 
     */
    public Optional<Output<Integer>> sidekiqJobLimiterCompressionThresholdBytes() {
        return Optional.ofNullable(this.sidekiqJobLimiterCompressionThresholdBytes);
    }

    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
     * 
     */
    @Import(name="sidekiqJobLimiterLimitBytes")
    private @Nullable Output<Integer> sidekiqJobLimiterLimitBytes;

    /**
     * @return The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
     * 
     */
    public Optional<Output<Integer>> sidekiqJobLimiterLimitBytes() {
        return Optional.ofNullable(this.sidekiqJobLimiterLimitBytes);
    }

    /**
     * track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
     * 
     */
    @Import(name="sidekiqJobLimiterMode")
    private @Nullable Output<String> sidekiqJobLimiterMode;

    /**
     * @return track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
     * 
     */
    public Optional<Output<String>> sidekiqJobLimiterMode() {
        return Optional.ofNullable(this.sidekiqJobLimiterMode);
    }

    /**
     * Text on the login page.
     * 
     */
    @Import(name="signInText")
    private @Nullable Output<String> signInText;

    /**
     * @return Text on the login page.
     * 
     */
    public Optional<Output<String>> signInText() {
        return Optional.ofNullable(this.signInText);
    }

    /**
     * Enable registration. Default is true.
     * 
     */
    @Import(name="signupEnabled")
    private @Nullable Output<Boolean> signupEnabled;

    /**
     * @return Enable registration. Default is true.
     * 
     */
    public Optional<Output<Boolean>> signupEnabled() {
        return Optional.ofNullable(this.signupEnabled);
    }

    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     * 
     */
    @Import(name="slackAppEnabled")
    private @Nullable Output<Boolean> slackAppEnabled;

    /**
     * @return (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     * 
     */
    public Optional<Output<Boolean>> slackAppEnabled() {
        return Optional.ofNullable(this.slackAppEnabled);
    }

    /**
     * The app ID of the Slack-app.
     * 
     */
    @Import(name="slackAppId")
    private @Nullable Output<String> slackAppId;

    /**
     * @return The app ID of the Slack-app.
     * 
     */
    public Optional<Output<String>> slackAppId() {
        return Optional.ofNullable(this.slackAppId);
    }

    /**
     * The app secret of the Slack-app.
     * 
     */
    @Import(name="slackAppSecret")
    private @Nullable Output<String> slackAppSecret;

    /**
     * @return The app secret of the Slack-app.
     * 
     */
    public Optional<Output<String>> slackAppSecret() {
        return Optional.ofNullable(this.slackAppSecret);
    }

    /**
     * The signing secret of the Slack-app.
     * 
     */
    @Import(name="slackAppSigningSecret")
    private @Nullable Output<String> slackAppSigningSecret;

    /**
     * @return The signing secret of the Slack-app.
     * 
     */
    public Optional<Output<String>> slackAppSigningSecret() {
        return Optional.ofNullable(this.slackAppSigningSecret);
    }

    /**
     * The verification token of the Slack-app.
     * 
     */
    @Import(name="slackAppVerificationToken")
    private @Nullable Output<String> slackAppVerificationToken;

    /**
     * @return The verification token of the Slack-app.
     * 
     */
    public Optional<Output<String>> slackAppVerificationToken() {
        return Optional.ofNullable(this.slackAppVerificationToken);
    }

    /**
     * Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
     * 
     */
    @Import(name="snippetSizeLimit")
    private @Nullable Output<Integer> snippetSizeLimit;

    /**
     * @return Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
     * 
     */
    public Optional<Output<Integer>> snippetSizeLimit() {
        return Optional.ofNullable(this.snippetSizeLimit);
    }

    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     * 
     */
    @Import(name="snowplowAppId")
    private @Nullable Output<String> snowplowAppId;

    /**
     * @return The Snowplow site name / application ID. (for example, gitlab)
     * 
     */
    public Optional<Output<String>> snowplowAppId() {
        return Optional.ofNullable(this.snowplowAppId);
    }

    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     * 
     */
    @Import(name="snowplowCollectorHostname")
    private @Nullable Output<String> snowplowCollectorHostname;

    /**
     * @return The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     * 
     */
    public Optional<Output<String>> snowplowCollectorHostname() {
        return Optional.ofNullable(this.snowplowCollectorHostname);
    }

    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     * 
     */
    @Import(name="snowplowCookieDomain")
    private @Nullable Output<String> snowplowCookieDomain;

    /**
     * @return The Snowplow cookie domain. (for example, .gitlab.com)
     * 
     */
    public Optional<Output<String>> snowplowCookieDomain() {
        return Optional.ofNullable(this.snowplowCookieDomain);
    }

    /**
     * Enable snowplow tracking.
     * 
     */
    @Import(name="snowplowEnabled")
    private @Nullable Output<Boolean> snowplowEnabled;

    /**
     * @return Enable snowplow tracking.
     * 
     */
    public Optional<Output<Boolean>> snowplowEnabled() {
        return Optional.ofNullable(this.snowplowEnabled);
    }

    /**
     * Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
     * 
     */
    @Import(name="sourcegraphEnabled")
    private @Nullable Output<Boolean> sourcegraphEnabled;

    /**
     * @return Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
     * 
     */
    public Optional<Output<Boolean>> sourcegraphEnabled() {
        return Optional.ofNullable(this.sourcegraphEnabled);
    }

    /**
     * Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
     * 
     */
    @Import(name="sourcegraphPublicOnly")
    private @Nullable Output<Boolean> sourcegraphPublicOnly;

    /**
     * @return Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
     * 
     */
    public Optional<Output<Boolean>> sourcegraphPublicOnly() {
        return Optional.ofNullable(this.sourcegraphPublicOnly);
    }

    /**
     * The Sourcegraph instance URL for integration.
     * 
     */
    @Import(name="sourcegraphUrl")
    private @Nullable Output<String> sourcegraphUrl;

    /**
     * @return The Sourcegraph instance URL for integration.
     * 
     */
    public Optional<Output<String>> sourcegraphUrl() {
        return Optional.ofNullable(this.sourcegraphUrl);
    }

    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     * 
     */
    @Import(name="spamCheckApiKey")
    private @Nullable Output<String> spamCheckApiKey;

    /**
     * @return API key used by GitLab for accessing the Spam Check service endpoint.
     * 
     */
    public Optional<Output<String>> spamCheckApiKey() {
        return Optional.ofNullable(this.spamCheckApiKey);
    }

    /**
     * Enables spam checking using external Spam Check API endpoint. Default is false.
     * 
     */
    @Import(name="spamCheckEndpointEnabled")
    private @Nullable Output<Boolean> spamCheckEndpointEnabled;

    /**
     * @return Enables spam checking using external Spam Check API endpoint. Default is false.
     * 
     */
    public Optional<Output<Boolean>> spamCheckEndpointEnabled() {
        return Optional.ofNullable(this.spamCheckEndpointEnabled);
    }

    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     * 
     */
    @Import(name="spamCheckEndpointUrl")
    private @Nullable Output<String> spamCheckEndpointUrl;

    /**
     * @return URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     * 
     */
    public Optional<Output<String>> spamCheckEndpointUrl() {
        return Optional.ofNullable(this.spamCheckEndpointUrl);
    }

    /**
     * Enable pipeline suggestion banner.
     * 
     */
    @Import(name="suggestPipelineEnabled")
    private @Nullable Output<Boolean> suggestPipelineEnabled;

    /**
     * @return Enable pipeline suggestion banner.
     * 
     */
    public Optional<Output<Boolean>> suggestPipelineEnabled() {
        return Optional.ofNullable(this.suggestPipelineEnabled);
    }

    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     * 
     */
    @Import(name="terminalMaxSessionTime")
    private @Nullable Output<Integer> terminalMaxSessionTime;

    /**
     * @return Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     * 
     */
    public Optional<Output<Integer>> terminalMaxSessionTime() {
        return Optional.ofNullable(this.terminalMaxSessionTime);
    }

    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     * 
     */
    @Import(name="terms")
    private @Nullable Output<String> terms;

    /**
     * @return (Required by: enforce_terms) Markdown content for the ToS.
     * 
     */
    public Optional<Output<String>> terms() {
        return Optional.ofNullable(this.terms);
    }

    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Import(name="throttleAuthenticatedApiEnabled")
    private @Nullable Output<Boolean> throttleAuthenticatedApiEnabled;

    /**
     * @return (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Optional<Output<Boolean>> throttleAuthenticatedApiEnabled() {
        return Optional.ofNullable(this.throttleAuthenticatedApiEnabled);
    }

    /**
     * Rate limit period (in seconds).
     * 
     */
    @Import(name="throttleAuthenticatedApiPeriodInSeconds")
    private @Nullable Output<Integer> throttleAuthenticatedApiPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds).
     * 
     */
    public Optional<Output<Integer>> throttleAuthenticatedApiPeriodInSeconds() {
        return Optional.ofNullable(this.throttleAuthenticatedApiPeriodInSeconds);
    }

    /**
     * Maximum requests per period per user.
     * 
     */
    @Import(name="throttleAuthenticatedApiRequestsPerPeriod")
    private @Nullable Output<Integer> throttleAuthenticatedApiRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user.
     * 
     */
    public Optional<Output<Integer>> throttleAuthenticatedApiRequestsPerPeriod() {
        return Optional.ofNullable(this.throttleAuthenticatedApiRequestsPerPeriod);
    }

    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    @Import(name="throttleAuthenticatedPackagesApiEnabled")
    private @Nullable Output<Boolean> throttleAuthenticatedPackagesApiEnabled;

    /**
     * @return (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    public Optional<Output<Boolean>> throttleAuthenticatedPackagesApiEnabled() {
        return Optional.ofNullable(this.throttleAuthenticatedPackagesApiEnabled);
    }

    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    @Import(name="throttleAuthenticatedPackagesApiPeriodInSeconds")
    private @Nullable Output<Integer> throttleAuthenticatedPackagesApiPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    public Optional<Output<Integer>> throttleAuthenticatedPackagesApiPeriodInSeconds() {
        return Optional.ofNullable(this.throttleAuthenticatedPackagesApiPeriodInSeconds);
    }

    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    @Import(name="throttleAuthenticatedPackagesApiRequestsPerPeriod")
    private @Nullable Output<Integer> throttleAuthenticatedPackagesApiRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    public Optional<Output<Integer>> throttleAuthenticatedPackagesApiRequestsPerPeriod() {
        return Optional.ofNullable(this.throttleAuthenticatedPackagesApiRequestsPerPeriod);
    }

    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Import(name="throttleAuthenticatedWebEnabled")
    private @Nullable Output<Boolean> throttleAuthenticatedWebEnabled;

    /**
     * @return (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Optional<Output<Boolean>> throttleAuthenticatedWebEnabled() {
        return Optional.ofNullable(this.throttleAuthenticatedWebEnabled);
    }

    /**
     * Rate limit period (in seconds).
     * 
     */
    @Import(name="throttleAuthenticatedWebPeriodInSeconds")
    private @Nullable Output<Integer> throttleAuthenticatedWebPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds).
     * 
     */
    public Optional<Output<Integer>> throttleAuthenticatedWebPeriodInSeconds() {
        return Optional.ofNullable(this.throttleAuthenticatedWebPeriodInSeconds);
    }

    /**
     * Maximum requests per period per user.
     * 
     */
    @Import(name="throttleAuthenticatedWebRequestsPerPeriod")
    private @Nullable Output<Integer> throttleAuthenticatedWebRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user.
     * 
     */
    public Optional<Output<Integer>> throttleAuthenticatedWebRequestsPerPeriod() {
        return Optional.ofNullable(this.throttleAuthenticatedWebRequestsPerPeriod);
    }

    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Import(name="throttleUnauthenticatedApiEnabled")
    private @Nullable Output<Boolean> throttleUnauthenticatedApiEnabled;

    /**
     * @return (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Optional<Output<Boolean>> throttleUnauthenticatedApiEnabled() {
        return Optional.ofNullable(this.throttleUnauthenticatedApiEnabled);
    }

    /**
     * Rate limit period in seconds.
     * 
     */
    @Import(name="throttleUnauthenticatedApiPeriodInSeconds")
    private @Nullable Output<Integer> throttleUnauthenticatedApiPeriodInSeconds;

    /**
     * @return Rate limit period in seconds.
     * 
     */
    public Optional<Output<Integer>> throttleUnauthenticatedApiPeriodInSeconds() {
        return Optional.ofNullable(this.throttleUnauthenticatedApiPeriodInSeconds);
    }

    /**
     * Max requests per period per IP.
     * 
     */
    @Import(name="throttleUnauthenticatedApiRequestsPerPeriod")
    private @Nullable Output<Integer> throttleUnauthenticatedApiRequestsPerPeriod;

    /**
     * @return Max requests per period per IP.
     * 
     */
    public Optional<Output<Integer>> throttleUnauthenticatedApiRequestsPerPeriod() {
        return Optional.ofNullable(this.throttleUnauthenticatedApiRequestsPerPeriod);
    }

    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    @Import(name="throttleUnauthenticatedPackagesApiEnabled")
    private @Nullable Output<Boolean> throttleUnauthenticatedPackagesApiEnabled;

    /**
     * @return (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     * 
     */
    public Optional<Output<Boolean>> throttleUnauthenticatedPackagesApiEnabled() {
        return Optional.ofNullable(this.throttleUnauthenticatedPackagesApiEnabled);
    }

    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    @Import(name="throttleUnauthenticatedPackagesApiPeriodInSeconds")
    private @Nullable Output<Integer> throttleUnauthenticatedPackagesApiPeriodInSeconds;

    /**
     * @return Rate limit period (in seconds). View Package Registry rate limits for more details.
     * 
     */
    public Optional<Output<Integer>> throttleUnauthenticatedPackagesApiPeriodInSeconds() {
        return Optional.ofNullable(this.throttleUnauthenticatedPackagesApiPeriodInSeconds);
    }

    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    @Import(name="throttleUnauthenticatedPackagesApiRequestsPerPeriod")
    private @Nullable Output<Integer> throttleUnauthenticatedPackagesApiRequestsPerPeriod;

    /**
     * @return Maximum requests per period per user. View Package Registry rate limits for more details.
     * 
     */
    public Optional<Output<Integer>> throttleUnauthenticatedPackagesApiRequestsPerPeriod() {
        return Optional.ofNullable(this.throttleUnauthenticatedPackagesApiRequestsPerPeriod);
    }

    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    @Import(name="throttleUnauthenticatedWebEnabled")
    private @Nullable Output<Boolean> throttleUnauthenticatedWebEnabled;

    /**
     * @return (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     * 
     */
    public Optional<Output<Boolean>> throttleUnauthenticatedWebEnabled() {
        return Optional.ofNullable(this.throttleUnauthenticatedWebEnabled);
    }

    /**
     * Rate limit period in seconds.
     * 
     */
    @Import(name="throttleUnauthenticatedWebPeriodInSeconds")
    private @Nullable Output<Integer> throttleUnauthenticatedWebPeriodInSeconds;

    /**
     * @return Rate limit period in seconds.
     * 
     */
    public Optional<Output<Integer>> throttleUnauthenticatedWebPeriodInSeconds() {
        return Optional.ofNullable(this.throttleUnauthenticatedWebPeriodInSeconds);
    }

    /**
     * Max requests per period per IP.
     * 
     */
    @Import(name="throttleUnauthenticatedWebRequestsPerPeriod")
    private @Nullable Output<Integer> throttleUnauthenticatedWebRequestsPerPeriod;

    /**
     * @return Max requests per period per IP.
     * 
     */
    public Optional<Output<Integer>> throttleUnauthenticatedWebRequestsPerPeriod() {
        return Optional.ofNullable(this.throttleUnauthenticatedWebRequestsPerPeriod);
    }

    /**
     * Limit display of time tracking units to hours. Default is false.
     * 
     */
    @Import(name="timeTrackingLimitToHours")
    private @Nullable Output<Boolean> timeTrackingLimitToHours;

    /**
     * @return Limit display of time tracking units to hours. Default is false.
     * 
     */
    public Optional<Output<Boolean>> timeTrackingLimitToHours() {
        return Optional.ofNullable(this.timeTrackingLimitToHours);
    }

    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     * 
     */
    @Import(name="twoFactorGracePeriod")
    private @Nullable Output<Integer> twoFactorGracePeriod;

    /**
     * @return Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     * 
     */
    public Optional<Output<Integer>> twoFactorGracePeriod() {
        return Optional.ofNullable(this.twoFactorGracePeriod);
    }

    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     * 
     */
    @Import(name="uniqueIpsLimitEnabled")
    private @Nullable Output<Boolean> uniqueIpsLimitEnabled;

    /**
     * @return (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     * 
     */
    public Optional<Output<Boolean>> uniqueIpsLimitEnabled() {
        return Optional.ofNullable(this.uniqueIpsLimitEnabled);
    }

    /**
     * Maximum number of IPs per user.
     * 
     */
    @Import(name="uniqueIpsLimitPerUser")
    private @Nullable Output<Integer> uniqueIpsLimitPerUser;

    /**
     * @return Maximum number of IPs per user.
     * 
     */
    public Optional<Output<Integer>> uniqueIpsLimitPerUser() {
        return Optional.ofNullable(this.uniqueIpsLimitPerUser);
    }

    /**
     * How many seconds an IP is counted towards the limit.
     * 
     */
    @Import(name="uniqueIpsLimitTimeWindow")
    private @Nullable Output<Integer> uniqueIpsLimitTimeWindow;

    /**
     * @return How many seconds an IP is counted towards the limit.
     * 
     */
    public Optional<Output<Integer>> uniqueIpsLimitTimeWindow() {
        return Optional.ofNullable(this.uniqueIpsLimitTimeWindow);
    }

    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     * 
     */
    @Import(name="usagePingEnabled")
    private @Nullable Output<Boolean> usagePingEnabled;

    /**
     * @return Every week GitLab reports license usage back to GitLab, Inc.
     * 
     */
    public Optional<Output<Boolean>> usagePingEnabled() {
        return Optional.ofNullable(this.usagePingEnabled);
    }

    /**
     * Send an email to users upon account deactivation.
     * 
     */
    @Import(name="userDeactivationEmailsEnabled")
    private @Nullable Output<Boolean> userDeactivationEmailsEnabled;

    /**
     * @return Send an email to users upon account deactivation.
     * 
     */
    public Optional<Output<Boolean>> userDeactivationEmailsEnabled() {
        return Optional.ofNullable(this.userDeactivationEmailsEnabled);
    }

    /**
     * Newly registered users are external by default.
     * 
     */
    @Import(name="userDefaultExternal")
    private @Nullable Output<Boolean> userDefaultExternal;

    /**
     * @return Newly registered users are external by default.
     * 
     */
    public Optional<Output<Boolean>> userDefaultExternal() {
        return Optional.ofNullable(this.userDefaultExternal);
    }

    /**
     * Specify an email address regex pattern to identify default internal users.
     * 
     */
    @Import(name="userDefaultInternalRegex")
    private @Nullable Output<String> userDefaultInternalRegex;

    /**
     * @return Specify an email address regex pattern to identify default internal users.
     * 
     */
    public Optional<Output<String>> userDefaultInternalRegex() {
        return Optional.ofNullable(this.userDefaultInternalRegex);
    }

    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     * 
     */
    @Import(name="userOauthApplications")
    private @Nullable Output<Boolean> userOauthApplications;

    /**
     * @return Allow users to register any application to use GitLab as an OAuth provider.
     * 
     */
    public Optional<Output<Boolean>> userOauthApplications() {
        return Optional.ofNullable(this.userOauthApplications);
    }

    /**
     * When set to false disable the You won&#39;t be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     * 
     */
    @Import(name="userShowAddSshKeyMessage")
    private @Nullable Output<Boolean> userShowAddSshKeyMessage;

    /**
     * @return When set to false disable the You won&#39;t be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     * 
     */
    public Optional<Output<Boolean>> userShowAddSshKeyMessage() {
        return Optional.ofNullable(this.userShowAddSshKeyMessage);
    }

    /**
     * Let GitLab inform you when an update is available.
     * 
     */
    @Import(name="versionCheckEnabled")
    private @Nullable Output<Boolean> versionCheckEnabled;

    /**
     * @return Let GitLab inform you when an update is available.
     * 
     */
    public Optional<Output<Boolean>> versionCheckEnabled() {
        return Optional.ofNullable(this.versionCheckEnabled);
    }

    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     * 
     */
    @Import(name="webIdeClientsidePreviewEnabled")
    private @Nullable Output<Boolean> webIdeClientsidePreviewEnabled;

    /**
     * @return Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     * 
     */
    public Optional<Output<Boolean>> webIdeClientsidePreviewEnabled() {
        return Optional.ofNullable(this.webIdeClientsidePreviewEnabled);
    }

    /**
     * What’s new variant, possible values: all*tiers, current*tier, and disabled.
     * 
     */
    @Import(name="whatsNewVariant")
    private @Nullable Output<String> whatsNewVariant;

    /**
     * @return What’s new variant, possible values: all*tiers, current*tier, and disabled.
     * 
     */
    public Optional<Output<String>> whatsNewVariant() {
        return Optional.ofNullable(this.whatsNewVariant);
    }

    /**
     * Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
     * 
     */
    @Import(name="wikiPageMaxContentBytes")
    private @Nullable Output<Integer> wikiPageMaxContentBytes;

    /**
     * @return Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
     * 
     */
    public Optional<Output<Integer>> wikiPageMaxContentBytes() {
        return Optional.ofNullable(this.wikiPageMaxContentBytes);
    }

    private ApplicationSettingsState() {}

    private ApplicationSettingsState(ApplicationSettingsState $) {
        this.abuseNotificationEmail = $.abuseNotificationEmail;
        this.adminMode = $.adminMode;
        this.afterSignOutPath = $.afterSignOutPath;
        this.afterSignUpText = $.afterSignUpText;
        this.akismetApiKey = $.akismetApiKey;
        this.akismetEnabled = $.akismetEnabled;
        this.allowGroupOwnersToManageLdap = $.allowGroupOwnersToManageLdap;
        this.allowLocalRequestsFromSystemHooks = $.allowLocalRequestsFromSystemHooks;
        this.allowLocalRequestsFromWebHooksAndServices = $.allowLocalRequestsFromWebHooksAndServices;
        this.archiveBuildsInHumanReadable = $.archiveBuildsInHumanReadable;
        this.assetProxyAllowlists = $.assetProxyAllowlists;
        this.assetProxyEnabled = $.assetProxyEnabled;
        this.assetProxySecretKey = $.assetProxySecretKey;
        this.assetProxyUrl = $.assetProxyUrl;
        this.authorizedKeysEnabled = $.authorizedKeysEnabled;
        this.autoDevopsDomain = $.autoDevopsDomain;
        this.autoDevopsEnabled = $.autoDevopsEnabled;
        this.automaticPurchasedStorageAllocation = $.automaticPurchasedStorageAllocation;
        this.checkNamespacePlan = $.checkNamespacePlan;
        this.commitEmailHostname = $.commitEmailHostname;
        this.containerExpirationPoliciesEnableHistoricEntries = $.containerExpirationPoliciesEnableHistoricEntries;
        this.containerRegistryCleanupTagsServiceMaxListSize = $.containerRegistryCleanupTagsServiceMaxListSize;
        this.containerRegistryDeleteTagsServiceTimeout = $.containerRegistryDeleteTagsServiceTimeout;
        this.containerRegistryExpirationPoliciesCaching = $.containerRegistryExpirationPoliciesCaching;
        this.containerRegistryExpirationPoliciesWorkerCapacity = $.containerRegistryExpirationPoliciesWorkerCapacity;
        this.containerRegistryTokenExpireDelay = $.containerRegistryTokenExpireDelay;
        this.deactivateDormantUsers = $.deactivateDormantUsers;
        this.defaultArtifactsExpireIn = $.defaultArtifactsExpireIn;
        this.defaultBranchName = $.defaultBranchName;
        this.defaultBranchProtection = $.defaultBranchProtection;
        this.defaultCiConfigPath = $.defaultCiConfigPath;
        this.defaultGroupVisibility = $.defaultGroupVisibility;
        this.defaultProjectCreation = $.defaultProjectCreation;
        this.defaultProjectVisibility = $.defaultProjectVisibility;
        this.defaultProjectsLimit = $.defaultProjectsLimit;
        this.defaultSnippetVisibility = $.defaultSnippetVisibility;
        this.delayedGroupDeletion = $.delayedGroupDeletion;
        this.delayedProjectDeletion = $.delayedProjectDeletion;
        this.deleteInactiveProjects = $.deleteInactiveProjects;
        this.deletionAdjournedPeriod = $.deletionAdjournedPeriod;
        this.diffMaxFiles = $.diffMaxFiles;
        this.diffMaxLines = $.diffMaxLines;
        this.diffMaxPatchBytes = $.diffMaxPatchBytes;
        this.disableFeedToken = $.disableFeedToken;
        this.disabledOauthSignInSources = $.disabledOauthSignInSources;
        this.dnsRebindingProtectionEnabled = $.dnsRebindingProtectionEnabled;
        this.domainAllowlists = $.domainAllowlists;
        this.domainDenylistEnabled = $.domainDenylistEnabled;
        this.domainDenylists = $.domainDenylists;
        this.dsaKeyRestriction = $.dsaKeyRestriction;
        this.ecdsaKeyRestriction = $.ecdsaKeyRestriction;
        this.ecdsaSkKeyRestriction = $.ecdsaSkKeyRestriction;
        this.ed25519KeyRestriction = $.ed25519KeyRestriction;
        this.ed25519SkKeyRestriction = $.ed25519SkKeyRestriction;
        this.eksAccessKeyId = $.eksAccessKeyId;
        this.eksAccountId = $.eksAccountId;
        this.eksIntegrationEnabled = $.eksIntegrationEnabled;
        this.eksSecretAccessKey = $.eksSecretAccessKey;
        this.elasticsearchAws = $.elasticsearchAws;
        this.elasticsearchAwsAccessKey = $.elasticsearchAwsAccessKey;
        this.elasticsearchAwsRegion = $.elasticsearchAwsRegion;
        this.elasticsearchAwsSecretAccessKey = $.elasticsearchAwsSecretAccessKey;
        this.elasticsearchIndexedFieldLengthLimit = $.elasticsearchIndexedFieldLengthLimit;
        this.elasticsearchIndexedFileSizeLimitKb = $.elasticsearchIndexedFileSizeLimitKb;
        this.elasticsearchIndexing = $.elasticsearchIndexing;
        this.elasticsearchLimitIndexing = $.elasticsearchLimitIndexing;
        this.elasticsearchMaxBulkConcurrency = $.elasticsearchMaxBulkConcurrency;
        this.elasticsearchMaxBulkSizeMb = $.elasticsearchMaxBulkSizeMb;
        this.elasticsearchNamespaceIds = $.elasticsearchNamespaceIds;
        this.elasticsearchPassword = $.elasticsearchPassword;
        this.elasticsearchProjectIds = $.elasticsearchProjectIds;
        this.elasticsearchSearch = $.elasticsearchSearch;
        this.elasticsearchUrls = $.elasticsearchUrls;
        this.elasticsearchUsername = $.elasticsearchUsername;
        this.emailAdditionalText = $.emailAdditionalText;
        this.emailAuthorInBody = $.emailAuthorInBody;
        this.enabledGitAccessProtocol = $.enabledGitAccessProtocol;
        this.enforceNamespaceStorageLimit = $.enforceNamespaceStorageLimit;
        this.enforceTerms = $.enforceTerms;
        this.externalAuthClientCert = $.externalAuthClientCert;
        this.externalAuthClientKey = $.externalAuthClientKey;
        this.externalAuthClientKeyPass = $.externalAuthClientKeyPass;
        this.externalAuthorizationServiceDefaultLabel = $.externalAuthorizationServiceDefaultLabel;
        this.externalAuthorizationServiceEnabled = $.externalAuthorizationServiceEnabled;
        this.externalAuthorizationServiceTimeout = $.externalAuthorizationServiceTimeout;
        this.externalAuthorizationServiceUrl = $.externalAuthorizationServiceUrl;
        this.externalPipelineValidationServiceTimeout = $.externalPipelineValidationServiceTimeout;
        this.externalPipelineValidationServiceToken = $.externalPipelineValidationServiceToken;
        this.externalPipelineValidationServiceUrl = $.externalPipelineValidationServiceUrl;
        this.fileTemplateProjectId = $.fileTemplateProjectId;
        this.firstDayOfWeek = $.firstDayOfWeek;
        this.geoNodeAllowedIps = $.geoNodeAllowedIps;
        this.geoStatusTimeout = $.geoStatusTimeout;
        this.gitRateLimitUsersAllowlists = $.gitRateLimitUsersAllowlists;
        this.gitTwoFactorSessionExpiry = $.gitTwoFactorSessionExpiry;
        this.gitalyTimeoutDefault = $.gitalyTimeoutDefault;
        this.gitalyTimeoutFast = $.gitalyTimeoutFast;
        this.gitalyTimeoutMedium = $.gitalyTimeoutMedium;
        this.grafanaEnabled = $.grafanaEnabled;
        this.grafanaUrl = $.grafanaUrl;
        this.gravatarEnabled = $.gravatarEnabled;
        this.groupOwnersCanManageDefaultBranchProtection = $.groupOwnersCanManageDefaultBranchProtection;
        this.hashedStorageEnabled = $.hashedStorageEnabled;
        this.helpPageHideCommercialContent = $.helpPageHideCommercialContent;
        this.helpPageSupportUrl = $.helpPageSupportUrl;
        this.helpPageText = $.helpPageText;
        this.helpText = $.helpText;
        this.hideThirdPartyOffers = $.hideThirdPartyOffers;
        this.homePageUrl = $.homePageUrl;
        this.housekeepingEnabled = $.housekeepingEnabled;
        this.housekeepingFullRepackPeriod = $.housekeepingFullRepackPeriod;
        this.housekeepingGcPeriod = $.housekeepingGcPeriod;
        this.housekeepingIncrementalRepackPeriod = $.housekeepingIncrementalRepackPeriod;
        this.htmlEmailsEnabled = $.htmlEmailsEnabled;
        this.importSources = $.importSources;
        this.inProductMarketingEmailsEnabled = $.inProductMarketingEmailsEnabled;
        this.inactiveProjectsDeleteAfterMonths = $.inactiveProjectsDeleteAfterMonths;
        this.inactiveProjectsMinSizeMb = $.inactiveProjectsMinSizeMb;
        this.inactiveProjectsSendWarningEmailAfterMonths = $.inactiveProjectsSendWarningEmailAfterMonths;
        this.invisibleCaptchaEnabled = $.invisibleCaptchaEnabled;
        this.issuesCreateLimit = $.issuesCreateLimit;
        this.keepLatestArtifact = $.keepLatestArtifact;
        this.localMarkdownVersion = $.localMarkdownVersion;
        this.mailgunEventsEnabled = $.mailgunEventsEnabled;
        this.mailgunSigningKey = $.mailgunSigningKey;
        this.maintenanceMode = $.maintenanceMode;
        this.maintenanceModeMessage = $.maintenanceModeMessage;
        this.maxArtifactsSize = $.maxArtifactsSize;
        this.maxAttachmentSize = $.maxAttachmentSize;
        this.maxExportSize = $.maxExportSize;
        this.maxImportSize = $.maxImportSize;
        this.maxNumberOfRepositoryDownloads = $.maxNumberOfRepositoryDownloads;
        this.maxNumberOfRepositoryDownloadsWithinTimePeriod = $.maxNumberOfRepositoryDownloadsWithinTimePeriod;
        this.maxPagesSize = $.maxPagesSize;
        this.maxPersonalAccessTokenLifetime = $.maxPersonalAccessTokenLifetime;
        this.maxSshKeyLifetime = $.maxSshKeyLifetime;
        this.metricsMethodCallThreshold = $.metricsMethodCallThreshold;
        this.mirrorAvailable = $.mirrorAvailable;
        this.mirrorCapacityThreshold = $.mirrorCapacityThreshold;
        this.mirrorMaxCapacity = $.mirrorMaxCapacity;
        this.mirrorMaxDelay = $.mirrorMaxDelay;
        this.npmPackageRequestsForwarding = $.npmPackageRequestsForwarding;
        this.outboundLocalRequestsWhitelists = $.outboundLocalRequestsWhitelists;
        this.packageRegistryCleanupPoliciesWorkerCapacity = $.packageRegistryCleanupPoliciesWorkerCapacity;
        this.pagesDomainVerificationEnabled = $.pagesDomainVerificationEnabled;
        this.passwordAuthenticationEnabledForGit = $.passwordAuthenticationEnabledForGit;
        this.passwordAuthenticationEnabledForWeb = $.passwordAuthenticationEnabledForWeb;
        this.passwordLowercaseRequired = $.passwordLowercaseRequired;
        this.passwordNumberRequired = $.passwordNumberRequired;
        this.passwordSymbolRequired = $.passwordSymbolRequired;
        this.passwordUppercaseRequired = $.passwordUppercaseRequired;
        this.performanceBarAllowedGroupPath = $.performanceBarAllowedGroupPath;
        this.personalAccessTokenPrefix = $.personalAccessTokenPrefix;
        this.pipelineLimitPerProjectUserSha = $.pipelineLimitPerProjectUserSha;
        this.plantumlEnabled = $.plantumlEnabled;
        this.plantumlUrl = $.plantumlUrl;
        this.pollingIntervalMultiplier = $.pollingIntervalMultiplier;
        this.projectExportEnabled = $.projectExportEnabled;
        this.prometheusMetricsEnabled = $.prometheusMetricsEnabled;
        this.protectedCiVariables = $.protectedCiVariables;
        this.pushEventActivitiesLimit = $.pushEventActivitiesLimit;
        this.pushEventHooksLimit = $.pushEventHooksLimit;
        this.pypiPackageRequestsForwarding = $.pypiPackageRequestsForwarding;
        this.rateLimitingResponseText = $.rateLimitingResponseText;
        this.rawBlobRequestLimit = $.rawBlobRequestLimit;
        this.recaptchaEnabled = $.recaptchaEnabled;
        this.recaptchaPrivateKey = $.recaptchaPrivateKey;
        this.recaptchaSiteKey = $.recaptchaSiteKey;
        this.receiveMaxInputSize = $.receiveMaxInputSize;
        this.repositoryChecksEnabled = $.repositoryChecksEnabled;
        this.repositorySizeLimit = $.repositorySizeLimit;
        this.repositoryStorages = $.repositoryStorages;
        this.repositoryStoragesWeighted = $.repositoryStoragesWeighted;
        this.requireAdminApprovalAfterUserSignup = $.requireAdminApprovalAfterUserSignup;
        this.requireTwoFactorAuthentication = $.requireTwoFactorAuthentication;
        this.restrictedVisibilityLevels = $.restrictedVisibilityLevels;
        this.rsaKeyRestriction = $.rsaKeyRestriction;
        this.searchRateLimit = $.searchRateLimit;
        this.searchRateLimitUnauthenticated = $.searchRateLimitUnauthenticated;
        this.sendUserConfirmationEmail = $.sendUserConfirmationEmail;
        this.sessionExpireDelay = $.sessionExpireDelay;
        this.sharedRunnersEnabled = $.sharedRunnersEnabled;
        this.sharedRunnersMinutes = $.sharedRunnersMinutes;
        this.sharedRunnersText = $.sharedRunnersText;
        this.sidekiqJobLimiterCompressionThresholdBytes = $.sidekiqJobLimiterCompressionThresholdBytes;
        this.sidekiqJobLimiterLimitBytes = $.sidekiqJobLimiterLimitBytes;
        this.sidekiqJobLimiterMode = $.sidekiqJobLimiterMode;
        this.signInText = $.signInText;
        this.signupEnabled = $.signupEnabled;
        this.slackAppEnabled = $.slackAppEnabled;
        this.slackAppId = $.slackAppId;
        this.slackAppSecret = $.slackAppSecret;
        this.slackAppSigningSecret = $.slackAppSigningSecret;
        this.slackAppVerificationToken = $.slackAppVerificationToken;
        this.snippetSizeLimit = $.snippetSizeLimit;
        this.snowplowAppId = $.snowplowAppId;
        this.snowplowCollectorHostname = $.snowplowCollectorHostname;
        this.snowplowCookieDomain = $.snowplowCookieDomain;
        this.snowplowEnabled = $.snowplowEnabled;
        this.sourcegraphEnabled = $.sourcegraphEnabled;
        this.sourcegraphPublicOnly = $.sourcegraphPublicOnly;
        this.sourcegraphUrl = $.sourcegraphUrl;
        this.spamCheckApiKey = $.spamCheckApiKey;
        this.spamCheckEndpointEnabled = $.spamCheckEndpointEnabled;
        this.spamCheckEndpointUrl = $.spamCheckEndpointUrl;
        this.suggestPipelineEnabled = $.suggestPipelineEnabled;
        this.terminalMaxSessionTime = $.terminalMaxSessionTime;
        this.terms = $.terms;
        this.throttleAuthenticatedApiEnabled = $.throttleAuthenticatedApiEnabled;
        this.throttleAuthenticatedApiPeriodInSeconds = $.throttleAuthenticatedApiPeriodInSeconds;
        this.throttleAuthenticatedApiRequestsPerPeriod = $.throttleAuthenticatedApiRequestsPerPeriod;
        this.throttleAuthenticatedPackagesApiEnabled = $.throttleAuthenticatedPackagesApiEnabled;
        this.throttleAuthenticatedPackagesApiPeriodInSeconds = $.throttleAuthenticatedPackagesApiPeriodInSeconds;
        this.throttleAuthenticatedPackagesApiRequestsPerPeriod = $.throttleAuthenticatedPackagesApiRequestsPerPeriod;
        this.throttleAuthenticatedWebEnabled = $.throttleAuthenticatedWebEnabled;
        this.throttleAuthenticatedWebPeriodInSeconds = $.throttleAuthenticatedWebPeriodInSeconds;
        this.throttleAuthenticatedWebRequestsPerPeriod = $.throttleAuthenticatedWebRequestsPerPeriod;
        this.throttleUnauthenticatedApiEnabled = $.throttleUnauthenticatedApiEnabled;
        this.throttleUnauthenticatedApiPeriodInSeconds = $.throttleUnauthenticatedApiPeriodInSeconds;
        this.throttleUnauthenticatedApiRequestsPerPeriod = $.throttleUnauthenticatedApiRequestsPerPeriod;
        this.throttleUnauthenticatedPackagesApiEnabled = $.throttleUnauthenticatedPackagesApiEnabled;
        this.throttleUnauthenticatedPackagesApiPeriodInSeconds = $.throttleUnauthenticatedPackagesApiPeriodInSeconds;
        this.throttleUnauthenticatedPackagesApiRequestsPerPeriod = $.throttleUnauthenticatedPackagesApiRequestsPerPeriod;
        this.throttleUnauthenticatedWebEnabled = $.throttleUnauthenticatedWebEnabled;
        this.throttleUnauthenticatedWebPeriodInSeconds = $.throttleUnauthenticatedWebPeriodInSeconds;
        this.throttleUnauthenticatedWebRequestsPerPeriod = $.throttleUnauthenticatedWebRequestsPerPeriod;
        this.timeTrackingLimitToHours = $.timeTrackingLimitToHours;
        this.twoFactorGracePeriod = $.twoFactorGracePeriod;
        this.uniqueIpsLimitEnabled = $.uniqueIpsLimitEnabled;
        this.uniqueIpsLimitPerUser = $.uniqueIpsLimitPerUser;
        this.uniqueIpsLimitTimeWindow = $.uniqueIpsLimitTimeWindow;
        this.usagePingEnabled = $.usagePingEnabled;
        this.userDeactivationEmailsEnabled = $.userDeactivationEmailsEnabled;
        this.userDefaultExternal = $.userDefaultExternal;
        this.userDefaultInternalRegex = $.userDefaultInternalRegex;
        this.userOauthApplications = $.userOauthApplications;
        this.userShowAddSshKeyMessage = $.userShowAddSshKeyMessage;
        this.versionCheckEnabled = $.versionCheckEnabled;
        this.webIdeClientsidePreviewEnabled = $.webIdeClientsidePreviewEnabled;
        this.whatsNewVariant = $.whatsNewVariant;
        this.wikiPageMaxContentBytes = $.wikiPageMaxContentBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationSettingsState $;

        public Builder() {
            $ = new ApplicationSettingsState();
        }

        public Builder(ApplicationSettingsState defaults) {
            $ = new ApplicationSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param abuseNotificationEmail If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
         * 
         * @return builder
         * 
         */
        public Builder abuseNotificationEmail(@Nullable Output<String> abuseNotificationEmail) {
            $.abuseNotificationEmail = abuseNotificationEmail;
            return this;
        }

        /**
         * @param abuseNotificationEmail If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
         * 
         * @return builder
         * 
         */
        public Builder abuseNotificationEmail(String abuseNotificationEmail) {
            return abuseNotificationEmail(Output.of(abuseNotificationEmail));
        }

        /**
         * @param adminMode Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
         * 
         * @return builder
         * 
         */
        public Builder adminMode(@Nullable Output<Boolean> adminMode) {
            $.adminMode = adminMode;
            return this;
        }

        /**
         * @param adminMode Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
         * 
         * @return builder
         * 
         */
        public Builder adminMode(Boolean adminMode) {
            return adminMode(Output.of(adminMode));
        }

        /**
         * @param afterSignOutPath Where to redirect users after logout.
         * 
         * @return builder
         * 
         */
        public Builder afterSignOutPath(@Nullable Output<String> afterSignOutPath) {
            $.afterSignOutPath = afterSignOutPath;
            return this;
        }

        /**
         * @param afterSignOutPath Where to redirect users after logout.
         * 
         * @return builder
         * 
         */
        public Builder afterSignOutPath(String afterSignOutPath) {
            return afterSignOutPath(Output.of(afterSignOutPath));
        }

        /**
         * @param afterSignUpText Text shown to the user after signing up.
         * 
         * @return builder
         * 
         */
        public Builder afterSignUpText(@Nullable Output<String> afterSignUpText) {
            $.afterSignUpText = afterSignUpText;
            return this;
        }

        /**
         * @param afterSignUpText Text shown to the user after signing up.
         * 
         * @return builder
         * 
         */
        public Builder afterSignUpText(String afterSignUpText) {
            return afterSignUpText(Output.of(afterSignUpText));
        }

        /**
         * @param akismetApiKey API key for Akismet spam protection.
         * 
         * @return builder
         * 
         */
        public Builder akismetApiKey(@Nullable Output<String> akismetApiKey) {
            $.akismetApiKey = akismetApiKey;
            return this;
        }

        /**
         * @param akismetApiKey API key for Akismet spam protection.
         * 
         * @return builder
         * 
         */
        public Builder akismetApiKey(String akismetApiKey) {
            return akismetApiKey(Output.of(akismetApiKey));
        }

        /**
         * @param akismetEnabled (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
         * 
         * @return builder
         * 
         */
        public Builder akismetEnabled(@Nullable Output<Boolean> akismetEnabled) {
            $.akismetEnabled = akismetEnabled;
            return this;
        }

        /**
         * @param akismetEnabled (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
         * 
         * @return builder
         * 
         */
        public Builder akismetEnabled(Boolean akismetEnabled) {
            return akismetEnabled(Output.of(akismetEnabled));
        }

        /**
         * @param allowGroupOwnersToManageLdap Set to true to allow group owners to manage LDAP.
         * 
         * @return builder
         * 
         */
        public Builder allowGroupOwnersToManageLdap(@Nullable Output<Boolean> allowGroupOwnersToManageLdap) {
            $.allowGroupOwnersToManageLdap = allowGroupOwnersToManageLdap;
            return this;
        }

        /**
         * @param allowGroupOwnersToManageLdap Set to true to allow group owners to manage LDAP.
         * 
         * @return builder
         * 
         */
        public Builder allowGroupOwnersToManageLdap(Boolean allowGroupOwnersToManageLdap) {
            return allowGroupOwnersToManageLdap(Output.of(allowGroupOwnersToManageLdap));
        }

        /**
         * @param allowLocalRequestsFromSystemHooks Allow requests to the local network from system hooks.
         * 
         * @return builder
         * 
         */
        public Builder allowLocalRequestsFromSystemHooks(@Nullable Output<Boolean> allowLocalRequestsFromSystemHooks) {
            $.allowLocalRequestsFromSystemHooks = allowLocalRequestsFromSystemHooks;
            return this;
        }

        /**
         * @param allowLocalRequestsFromSystemHooks Allow requests to the local network from system hooks.
         * 
         * @return builder
         * 
         */
        public Builder allowLocalRequestsFromSystemHooks(Boolean allowLocalRequestsFromSystemHooks) {
            return allowLocalRequestsFromSystemHooks(Output.of(allowLocalRequestsFromSystemHooks));
        }

        /**
         * @param allowLocalRequestsFromWebHooksAndServices Allow requests to the local network from web hooks and services.
         * 
         * @return builder
         * 
         */
        public Builder allowLocalRequestsFromWebHooksAndServices(@Nullable Output<Boolean> allowLocalRequestsFromWebHooksAndServices) {
            $.allowLocalRequestsFromWebHooksAndServices = allowLocalRequestsFromWebHooksAndServices;
            return this;
        }

        /**
         * @param allowLocalRequestsFromWebHooksAndServices Allow requests to the local network from web hooks and services.
         * 
         * @return builder
         * 
         */
        public Builder allowLocalRequestsFromWebHooksAndServices(Boolean allowLocalRequestsFromWebHooksAndServices) {
            return allowLocalRequestsFromWebHooksAndServices(Output.of(allowLocalRequestsFromWebHooksAndServices));
        }

        /**
         * @param archiveBuildsInHumanReadable Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
         * 
         * @return builder
         * 
         */
        public Builder archiveBuildsInHumanReadable(@Nullable Output<String> archiveBuildsInHumanReadable) {
            $.archiveBuildsInHumanReadable = archiveBuildsInHumanReadable;
            return this;
        }

        /**
         * @param archiveBuildsInHumanReadable Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
         * 
         * @return builder
         * 
         */
        public Builder archiveBuildsInHumanReadable(String archiveBuildsInHumanReadable) {
            return archiveBuildsInHumanReadable(Output.of(archiveBuildsInHumanReadable));
        }

        /**
         * @param assetProxyAllowlists Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxyAllowlists(@Nullable Output<List<String>> assetProxyAllowlists) {
            $.assetProxyAllowlists = assetProxyAllowlists;
            return this;
        }

        /**
         * @param assetProxyAllowlists Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxyAllowlists(List<String> assetProxyAllowlists) {
            return assetProxyAllowlists(Output.of(assetProxyAllowlists));
        }

        /**
         * @param assetProxyAllowlists Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxyAllowlists(String... assetProxyAllowlists) {
            return assetProxyAllowlists(List.of(assetProxyAllowlists));
        }

        /**
         * @param assetProxyEnabled (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxyEnabled(@Nullable Output<Boolean> assetProxyEnabled) {
            $.assetProxyEnabled = assetProxyEnabled;
            return this;
        }

        /**
         * @param assetProxyEnabled (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxyEnabled(Boolean assetProxyEnabled) {
            return assetProxyEnabled(Output.of(assetProxyEnabled));
        }

        /**
         * @param assetProxySecretKey Shared secret with the asset proxy server. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxySecretKey(@Nullable Output<String> assetProxySecretKey) {
            $.assetProxySecretKey = assetProxySecretKey;
            return this;
        }

        /**
         * @param assetProxySecretKey Shared secret with the asset proxy server. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxySecretKey(String assetProxySecretKey) {
            return assetProxySecretKey(Output.of(assetProxySecretKey));
        }

        /**
         * @param assetProxyUrl URL of the asset proxy server. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxyUrl(@Nullable Output<String> assetProxyUrl) {
            $.assetProxyUrl = assetProxyUrl;
            return this;
        }

        /**
         * @param assetProxyUrl URL of the asset proxy server. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder assetProxyUrl(String assetProxyUrl) {
            return assetProxyUrl(Output.of(assetProxyUrl));
        }

        /**
         * @param authorizedKeysEnabled By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeysEnabled(@Nullable Output<Boolean> authorizedKeysEnabled) {
            $.authorizedKeysEnabled = authorizedKeysEnabled;
            return this;
        }

        /**
         * @param authorizedKeysEnabled By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeysEnabled(Boolean authorizedKeysEnabled) {
            return authorizedKeysEnabled(Output.of(authorizedKeysEnabled));
        }

        /**
         * @param autoDevopsDomain Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsDomain(@Nullable Output<String> autoDevopsDomain) {
            $.autoDevopsDomain = autoDevopsDomain;
            return this;
        }

        /**
         * @param autoDevopsDomain Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsDomain(String autoDevopsDomain) {
            return autoDevopsDomain(Output.of(autoDevopsDomain));
        }

        /**
         * @param autoDevopsEnabled Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsEnabled(@Nullable Output<Boolean> autoDevopsEnabled) {
            $.autoDevopsEnabled = autoDevopsEnabled;
            return this;
        }

        /**
         * @param autoDevopsEnabled Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
         * 
         * @return builder
         * 
         */
        public Builder autoDevopsEnabled(Boolean autoDevopsEnabled) {
            return autoDevopsEnabled(Output.of(autoDevopsEnabled));
        }

        /**
         * @param automaticPurchasedStorageAllocation Enabling this permits automatic allocation of purchased storage in a namespace.
         * 
         * @return builder
         * 
         */
        public Builder automaticPurchasedStorageAllocation(@Nullable Output<Boolean> automaticPurchasedStorageAllocation) {
            $.automaticPurchasedStorageAllocation = automaticPurchasedStorageAllocation;
            return this;
        }

        /**
         * @param automaticPurchasedStorageAllocation Enabling this permits automatic allocation of purchased storage in a namespace.
         * 
         * @return builder
         * 
         */
        public Builder automaticPurchasedStorageAllocation(Boolean automaticPurchasedStorageAllocation) {
            return automaticPurchasedStorageAllocation(Output.of(automaticPurchasedStorageAllocation));
        }

        /**
         * @param checkNamespacePlan Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
         * 
         * @return builder
         * 
         */
        public Builder checkNamespacePlan(@Nullable Output<Boolean> checkNamespacePlan) {
            $.checkNamespacePlan = checkNamespacePlan;
            return this;
        }

        /**
         * @param checkNamespacePlan Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
         * 
         * @return builder
         * 
         */
        public Builder checkNamespacePlan(Boolean checkNamespacePlan) {
            return checkNamespacePlan(Output.of(checkNamespacePlan));
        }

        /**
         * @param commitEmailHostname Custom hostname (for private commit emails).
         * 
         * @return builder
         * 
         */
        public Builder commitEmailHostname(@Nullable Output<String> commitEmailHostname) {
            $.commitEmailHostname = commitEmailHostname;
            return this;
        }

        /**
         * @param commitEmailHostname Custom hostname (for private commit emails).
         * 
         * @return builder
         * 
         */
        public Builder commitEmailHostname(String commitEmailHostname) {
            return commitEmailHostname(Output.of(commitEmailHostname));
        }

        /**
         * @param containerExpirationPoliciesEnableHistoricEntries Enable cleanup policies for all projects.
         * 
         * @return builder
         * 
         */
        public Builder containerExpirationPoliciesEnableHistoricEntries(@Nullable Output<Boolean> containerExpirationPoliciesEnableHistoricEntries) {
            $.containerExpirationPoliciesEnableHistoricEntries = containerExpirationPoliciesEnableHistoricEntries;
            return this;
        }

        /**
         * @param containerExpirationPoliciesEnableHistoricEntries Enable cleanup policies for all projects.
         * 
         * @return builder
         * 
         */
        public Builder containerExpirationPoliciesEnableHistoricEntries(Boolean containerExpirationPoliciesEnableHistoricEntries) {
            return containerExpirationPoliciesEnableHistoricEntries(Output.of(containerExpirationPoliciesEnableHistoricEntries));
        }

        /**
         * @param containerRegistryCleanupTagsServiceMaxListSize The maximum number of tags that can be deleted in a single execution of cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryCleanupTagsServiceMaxListSize(@Nullable Output<Integer> containerRegistryCleanupTagsServiceMaxListSize) {
            $.containerRegistryCleanupTagsServiceMaxListSize = containerRegistryCleanupTagsServiceMaxListSize;
            return this;
        }

        /**
         * @param containerRegistryCleanupTagsServiceMaxListSize The maximum number of tags that can be deleted in a single execution of cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryCleanupTagsServiceMaxListSize(Integer containerRegistryCleanupTagsServiceMaxListSize) {
            return containerRegistryCleanupTagsServiceMaxListSize(Output.of(containerRegistryCleanupTagsServiceMaxListSize));
        }

        /**
         * @param containerRegistryDeleteTagsServiceTimeout The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryDeleteTagsServiceTimeout(@Nullable Output<Integer> containerRegistryDeleteTagsServiceTimeout) {
            $.containerRegistryDeleteTagsServiceTimeout = containerRegistryDeleteTagsServiceTimeout;
            return this;
        }

        /**
         * @param containerRegistryDeleteTagsServiceTimeout The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryDeleteTagsServiceTimeout(Integer containerRegistryDeleteTagsServiceTimeout) {
            return containerRegistryDeleteTagsServiceTimeout(Output.of(containerRegistryDeleteTagsServiceTimeout));
        }

        /**
         * @param containerRegistryExpirationPoliciesCaching Caching during the execution of cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryExpirationPoliciesCaching(@Nullable Output<Boolean> containerRegistryExpirationPoliciesCaching) {
            $.containerRegistryExpirationPoliciesCaching = containerRegistryExpirationPoliciesCaching;
            return this;
        }

        /**
         * @param containerRegistryExpirationPoliciesCaching Caching during the execution of cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryExpirationPoliciesCaching(Boolean containerRegistryExpirationPoliciesCaching) {
            return containerRegistryExpirationPoliciesCaching(Output.of(containerRegistryExpirationPoliciesCaching));
        }

        /**
         * @param containerRegistryExpirationPoliciesWorkerCapacity Number of workers for cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryExpirationPoliciesWorkerCapacity(@Nullable Output<Integer> containerRegistryExpirationPoliciesWorkerCapacity) {
            $.containerRegistryExpirationPoliciesWorkerCapacity = containerRegistryExpirationPoliciesWorkerCapacity;
            return this;
        }

        /**
         * @param containerRegistryExpirationPoliciesWorkerCapacity Number of workers for cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryExpirationPoliciesWorkerCapacity(Integer containerRegistryExpirationPoliciesWorkerCapacity) {
            return containerRegistryExpirationPoliciesWorkerCapacity(Output.of(containerRegistryExpirationPoliciesWorkerCapacity));
        }

        /**
         * @param containerRegistryTokenExpireDelay Container Registry token duration in minutes.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryTokenExpireDelay(@Nullable Output<Integer> containerRegistryTokenExpireDelay) {
            $.containerRegistryTokenExpireDelay = containerRegistryTokenExpireDelay;
            return this;
        }

        /**
         * @param containerRegistryTokenExpireDelay Container Registry token duration in minutes.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryTokenExpireDelay(Integer containerRegistryTokenExpireDelay) {
            return containerRegistryTokenExpireDelay(Output.of(containerRegistryTokenExpireDelay));
        }

        /**
         * @param deactivateDormantUsers Enable automatic deactivation of dormant users.
         * 
         * @return builder
         * 
         */
        public Builder deactivateDormantUsers(@Nullable Output<Boolean> deactivateDormantUsers) {
            $.deactivateDormantUsers = deactivateDormantUsers;
            return this;
        }

        /**
         * @param deactivateDormantUsers Enable automatic deactivation of dormant users.
         * 
         * @return builder
         * 
         */
        public Builder deactivateDormantUsers(Boolean deactivateDormantUsers) {
            return deactivateDormantUsers(Output.of(deactivateDormantUsers));
        }

        /**
         * @param defaultArtifactsExpireIn Set the default expiration time for each job’s artifacts.
         * 
         * @return builder
         * 
         */
        public Builder defaultArtifactsExpireIn(@Nullable Output<String> defaultArtifactsExpireIn) {
            $.defaultArtifactsExpireIn = defaultArtifactsExpireIn;
            return this;
        }

        /**
         * @param defaultArtifactsExpireIn Set the default expiration time for each job’s artifacts.
         * 
         * @return builder
         * 
         */
        public Builder defaultArtifactsExpireIn(String defaultArtifactsExpireIn) {
            return defaultArtifactsExpireIn(Output.of(defaultArtifactsExpireIn));
        }

        /**
         * @param defaultBranchName Instance-level custom initial branch name (introduced in GitLab 13.2).
         * 
         * @return builder
         * 
         */
        public Builder defaultBranchName(@Nullable Output<String> defaultBranchName) {
            $.defaultBranchName = defaultBranchName;
            return this;
        }

        /**
         * @param defaultBranchName Instance-level custom initial branch name (introduced in GitLab 13.2).
         * 
         * @return builder
         * 
         */
        public Builder defaultBranchName(String defaultBranchName) {
            return defaultBranchName(Output.of(defaultBranchName));
        }

        /**
         * @param defaultBranchProtection Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranchProtection(@Nullable Output<Integer> defaultBranchProtection) {
            $.defaultBranchProtection = defaultBranchProtection;
            return this;
        }

        /**
         * @param defaultBranchProtection Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranchProtection(Integer defaultBranchProtection) {
            return defaultBranchProtection(Output.of(defaultBranchProtection));
        }

        /**
         * @param defaultCiConfigPath Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
         * 
         * @return builder
         * 
         */
        public Builder defaultCiConfigPath(@Nullable Output<String> defaultCiConfigPath) {
            $.defaultCiConfigPath = defaultCiConfigPath;
            return this;
        }

        /**
         * @param defaultCiConfigPath Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
         * 
         * @return builder
         * 
         */
        public Builder defaultCiConfigPath(String defaultCiConfigPath) {
            return defaultCiConfigPath(Output.of(defaultCiConfigPath));
        }

        /**
         * @param defaultGroupVisibility What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
         * 
         * @return builder
         * 
         */
        public Builder defaultGroupVisibility(@Nullable Output<String> defaultGroupVisibility) {
            $.defaultGroupVisibility = defaultGroupVisibility;
            return this;
        }

        /**
         * @param defaultGroupVisibility What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
         * 
         * @return builder
         * 
         */
        public Builder defaultGroupVisibility(String defaultGroupVisibility) {
            return defaultGroupVisibility(Output.of(defaultGroupVisibility));
        }

        /**
         * @param defaultProjectCreation Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectCreation(@Nullable Output<Integer> defaultProjectCreation) {
            $.defaultProjectCreation = defaultProjectCreation;
            return this;
        }

        /**
         * @param defaultProjectCreation Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectCreation(Integer defaultProjectCreation) {
            return defaultProjectCreation(Output.of(defaultProjectCreation));
        }

        /**
         * @param defaultProjectVisibility What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectVisibility(@Nullable Output<String> defaultProjectVisibility) {
            $.defaultProjectVisibility = defaultProjectVisibility;
            return this;
        }

        /**
         * @param defaultProjectVisibility What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectVisibility(String defaultProjectVisibility) {
            return defaultProjectVisibility(Output.of(defaultProjectVisibility));
        }

        /**
         * @param defaultProjectsLimit Project limit per user. Default is 100000.
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectsLimit(@Nullable Output<Integer> defaultProjectsLimit) {
            $.defaultProjectsLimit = defaultProjectsLimit;
            return this;
        }

        /**
         * @param defaultProjectsLimit Project limit per user. Default is 100000.
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectsLimit(Integer defaultProjectsLimit) {
            return defaultProjectsLimit(Output.of(defaultProjectsLimit));
        }

        /**
         * @param defaultSnippetVisibility What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
         * 
         * @return builder
         * 
         */
        public Builder defaultSnippetVisibility(@Nullable Output<String> defaultSnippetVisibility) {
            $.defaultSnippetVisibility = defaultSnippetVisibility;
            return this;
        }

        /**
         * @param defaultSnippetVisibility What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
         * 
         * @return builder
         * 
         */
        public Builder defaultSnippetVisibility(String defaultSnippetVisibility) {
            return defaultSnippetVisibility(Output.of(defaultSnippetVisibility));
        }

        /**
         * @param delayedGroupDeletion Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
         * 
         * @return builder
         * 
         */
        public Builder delayedGroupDeletion(@Nullable Output<Boolean> delayedGroupDeletion) {
            $.delayedGroupDeletion = delayedGroupDeletion;
            return this;
        }

        /**
         * @param delayedGroupDeletion Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
         * 
         * @return builder
         * 
         */
        public Builder delayedGroupDeletion(Boolean delayedGroupDeletion) {
            return delayedGroupDeletion(Output.of(delayedGroupDeletion));
        }

        /**
         * @param delayedProjectDeletion Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
         * 
         * @return builder
         * 
         */
        public Builder delayedProjectDeletion(@Nullable Output<Boolean> delayedProjectDeletion) {
            $.delayedProjectDeletion = delayedProjectDeletion;
            return this;
        }

        /**
         * @param delayedProjectDeletion Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
         * 
         * @return builder
         * 
         */
        public Builder delayedProjectDeletion(Boolean delayedProjectDeletion) {
            return delayedProjectDeletion(Output.of(delayedProjectDeletion));
        }

        /**
         * @param deleteInactiveProjects Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
         * 
         * @return builder
         * 
         */
        public Builder deleteInactiveProjects(@Nullable Output<Boolean> deleteInactiveProjects) {
            $.deleteInactiveProjects = deleteInactiveProjects;
            return this;
        }

        /**
         * @param deleteInactiveProjects Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
         * 
         * @return builder
         * 
         */
        public Builder deleteInactiveProjects(Boolean deleteInactiveProjects) {
            return deleteInactiveProjects(Output.of(deleteInactiveProjects));
        }

        /**
         * @param deletionAdjournedPeriod The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
         * 
         * @return builder
         * 
         */
        public Builder deletionAdjournedPeriod(@Nullable Output<Integer> deletionAdjournedPeriod) {
            $.deletionAdjournedPeriod = deletionAdjournedPeriod;
            return this;
        }

        /**
         * @param deletionAdjournedPeriod The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
         * 
         * @return builder
         * 
         */
        public Builder deletionAdjournedPeriod(Integer deletionAdjournedPeriod) {
            return deletionAdjournedPeriod(Output.of(deletionAdjournedPeriod));
        }

        /**
         * @param diffMaxFiles Maximum files in a diff.
         * 
         * @return builder
         * 
         */
        public Builder diffMaxFiles(@Nullable Output<Integer> diffMaxFiles) {
            $.diffMaxFiles = diffMaxFiles;
            return this;
        }

        /**
         * @param diffMaxFiles Maximum files in a diff.
         * 
         * @return builder
         * 
         */
        public Builder diffMaxFiles(Integer diffMaxFiles) {
            return diffMaxFiles(Output.of(diffMaxFiles));
        }

        /**
         * @param diffMaxLines Maximum lines in a diff.
         * 
         * @return builder
         * 
         */
        public Builder diffMaxLines(@Nullable Output<Integer> diffMaxLines) {
            $.diffMaxLines = diffMaxLines;
            return this;
        }

        /**
         * @param diffMaxLines Maximum lines in a diff.
         * 
         * @return builder
         * 
         */
        public Builder diffMaxLines(Integer diffMaxLines) {
            return diffMaxLines(Output.of(diffMaxLines));
        }

        /**
         * @param diffMaxPatchBytes Maximum diff patch size, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder diffMaxPatchBytes(@Nullable Output<Integer> diffMaxPatchBytes) {
            $.diffMaxPatchBytes = diffMaxPatchBytes;
            return this;
        }

        /**
         * @param diffMaxPatchBytes Maximum diff patch size, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder diffMaxPatchBytes(Integer diffMaxPatchBytes) {
            return diffMaxPatchBytes(Output.of(diffMaxPatchBytes));
        }

        /**
         * @param disableFeedToken Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
         * 
         * @return builder
         * 
         */
        public Builder disableFeedToken(@Nullable Output<Boolean> disableFeedToken) {
            $.disableFeedToken = disableFeedToken;
            return this;
        }

        /**
         * @param disableFeedToken Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
         * 
         * @return builder
         * 
         */
        public Builder disableFeedToken(Boolean disableFeedToken) {
            return disableFeedToken(Output.of(disableFeedToken));
        }

        /**
         * @param disabledOauthSignInSources Disabled OAuth sign-in sources.
         * 
         * @return builder
         * 
         */
        public Builder disabledOauthSignInSources(@Nullable Output<List<String>> disabledOauthSignInSources) {
            $.disabledOauthSignInSources = disabledOauthSignInSources;
            return this;
        }

        /**
         * @param disabledOauthSignInSources Disabled OAuth sign-in sources.
         * 
         * @return builder
         * 
         */
        public Builder disabledOauthSignInSources(List<String> disabledOauthSignInSources) {
            return disabledOauthSignInSources(Output.of(disabledOauthSignInSources));
        }

        /**
         * @param disabledOauthSignInSources Disabled OAuth sign-in sources.
         * 
         * @return builder
         * 
         */
        public Builder disabledOauthSignInSources(String... disabledOauthSignInSources) {
            return disabledOauthSignInSources(List.of(disabledOauthSignInSources));
        }

        /**
         * @param dnsRebindingProtectionEnabled Enforce DNS rebinding attack protection.
         * 
         * @return builder
         * 
         */
        public Builder dnsRebindingProtectionEnabled(@Nullable Output<Boolean> dnsRebindingProtectionEnabled) {
            $.dnsRebindingProtectionEnabled = dnsRebindingProtectionEnabled;
            return this;
        }

        /**
         * @param dnsRebindingProtectionEnabled Enforce DNS rebinding attack protection.
         * 
         * @return builder
         * 
         */
        public Builder dnsRebindingProtectionEnabled(Boolean dnsRebindingProtectionEnabled) {
            return dnsRebindingProtectionEnabled(Output.of(dnsRebindingProtectionEnabled));
        }

        /**
         * @param domainAllowlists Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
         * 
         * @return builder
         * 
         */
        public Builder domainAllowlists(@Nullable Output<List<String>> domainAllowlists) {
            $.domainAllowlists = domainAllowlists;
            return this;
        }

        /**
         * @param domainAllowlists Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
         * 
         * @return builder
         * 
         */
        public Builder domainAllowlists(List<String> domainAllowlists) {
            return domainAllowlists(Output.of(domainAllowlists));
        }

        /**
         * @param domainAllowlists Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
         * 
         * @return builder
         * 
         */
        public Builder domainAllowlists(String... domainAllowlists) {
            return domainAllowlists(List.of(domainAllowlists));
        }

        /**
         * @param domainDenylistEnabled (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
         * 
         * @return builder
         * 
         */
        public Builder domainDenylistEnabled(@Nullable Output<Boolean> domainDenylistEnabled) {
            $.domainDenylistEnabled = domainDenylistEnabled;
            return this;
        }

        /**
         * @param domainDenylistEnabled (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
         * 
         * @return builder
         * 
         */
        public Builder domainDenylistEnabled(Boolean domainDenylistEnabled) {
            return domainDenylistEnabled(Output.of(domainDenylistEnabled));
        }

        /**
         * @param domainDenylists Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
         * 
         * @return builder
         * 
         */
        public Builder domainDenylists(@Nullable Output<List<String>> domainDenylists) {
            $.domainDenylists = domainDenylists;
            return this;
        }

        /**
         * @param domainDenylists Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
         * 
         * @return builder
         * 
         */
        public Builder domainDenylists(List<String> domainDenylists) {
            return domainDenylists(Output.of(domainDenylists));
        }

        /**
         * @param domainDenylists Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
         * 
         * @return builder
         * 
         */
        public Builder domainDenylists(String... domainDenylists) {
            return domainDenylists(List.of(domainDenylists));
        }

        /**
         * @param dsaKeyRestriction The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
         * 
         * @return builder
         * 
         */
        public Builder dsaKeyRestriction(@Nullable Output<Integer> dsaKeyRestriction) {
            $.dsaKeyRestriction = dsaKeyRestriction;
            return this;
        }

        /**
         * @param dsaKeyRestriction The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
         * 
         * @return builder
         * 
         */
        public Builder dsaKeyRestriction(Integer dsaKeyRestriction) {
            return dsaKeyRestriction(Output.of(dsaKeyRestriction));
        }

        /**
         * @param ecdsaKeyRestriction The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
         * 
         * @return builder
         * 
         */
        public Builder ecdsaKeyRestriction(@Nullable Output<Integer> ecdsaKeyRestriction) {
            $.ecdsaKeyRestriction = ecdsaKeyRestriction;
            return this;
        }

        /**
         * @param ecdsaKeyRestriction The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
         * 
         * @return builder
         * 
         */
        public Builder ecdsaKeyRestriction(Integer ecdsaKeyRestriction) {
            return ecdsaKeyRestriction(Output.of(ecdsaKeyRestriction));
        }

        /**
         * @param ecdsaSkKeyRestriction The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
         * 
         * @return builder
         * 
         */
        public Builder ecdsaSkKeyRestriction(@Nullable Output<Integer> ecdsaSkKeyRestriction) {
            $.ecdsaSkKeyRestriction = ecdsaSkKeyRestriction;
            return this;
        }

        /**
         * @param ecdsaSkKeyRestriction The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
         * 
         * @return builder
         * 
         */
        public Builder ecdsaSkKeyRestriction(Integer ecdsaSkKeyRestriction) {
            return ecdsaSkKeyRestriction(Output.of(ecdsaSkKeyRestriction));
        }

        /**
         * @param ed25519KeyRestriction The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
         * 
         * @return builder
         * 
         */
        public Builder ed25519KeyRestriction(@Nullable Output<Integer> ed25519KeyRestriction) {
            $.ed25519KeyRestriction = ed25519KeyRestriction;
            return this;
        }

        /**
         * @param ed25519KeyRestriction The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
         * 
         * @return builder
         * 
         */
        public Builder ed25519KeyRestriction(Integer ed25519KeyRestriction) {
            return ed25519KeyRestriction(Output.of(ed25519KeyRestriction));
        }

        /**
         * @param ed25519SkKeyRestriction The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
         * 
         * @return builder
         * 
         */
        public Builder ed25519SkKeyRestriction(@Nullable Output<Integer> ed25519SkKeyRestriction) {
            $.ed25519SkKeyRestriction = ed25519SkKeyRestriction;
            return this;
        }

        /**
         * @param ed25519SkKeyRestriction The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
         * 
         * @return builder
         * 
         */
        public Builder ed25519SkKeyRestriction(Integer ed25519SkKeyRestriction) {
            return ed25519SkKeyRestriction(Output.of(ed25519SkKeyRestriction));
        }

        /**
         * @param eksAccessKeyId AWS IAM access key ID.
         * 
         * @return builder
         * 
         */
        public Builder eksAccessKeyId(@Nullable Output<String> eksAccessKeyId) {
            $.eksAccessKeyId = eksAccessKeyId;
            return this;
        }

        /**
         * @param eksAccessKeyId AWS IAM access key ID.
         * 
         * @return builder
         * 
         */
        public Builder eksAccessKeyId(String eksAccessKeyId) {
            return eksAccessKeyId(Output.of(eksAccessKeyId));
        }

        /**
         * @param eksAccountId Amazon account ID.
         * 
         * @return builder
         * 
         */
        public Builder eksAccountId(@Nullable Output<String> eksAccountId) {
            $.eksAccountId = eksAccountId;
            return this;
        }

        /**
         * @param eksAccountId Amazon account ID.
         * 
         * @return builder
         * 
         */
        public Builder eksAccountId(String eksAccountId) {
            return eksAccountId(Output.of(eksAccountId));
        }

        /**
         * @param eksIntegrationEnabled Enable integration with Amazon EKS.
         * 
         * @return builder
         * 
         */
        public Builder eksIntegrationEnabled(@Nullable Output<Boolean> eksIntegrationEnabled) {
            $.eksIntegrationEnabled = eksIntegrationEnabled;
            return this;
        }

        /**
         * @param eksIntegrationEnabled Enable integration with Amazon EKS.
         * 
         * @return builder
         * 
         */
        public Builder eksIntegrationEnabled(Boolean eksIntegrationEnabled) {
            return eksIntegrationEnabled(Output.of(eksIntegrationEnabled));
        }

        /**
         * @param eksSecretAccessKey AWS IAM secret access key.
         * 
         * @return builder
         * 
         */
        public Builder eksSecretAccessKey(@Nullable Output<String> eksSecretAccessKey) {
            $.eksSecretAccessKey = eksSecretAccessKey;
            return this;
        }

        /**
         * @param eksSecretAccessKey AWS IAM secret access key.
         * 
         * @return builder
         * 
         */
        public Builder eksSecretAccessKey(String eksSecretAccessKey) {
            return eksSecretAccessKey(Output.of(eksSecretAccessKey));
        }

        /**
         * @param elasticsearchAws Enable the use of AWS hosted Elasticsearch.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAws(@Nullable Output<Boolean> elasticsearchAws) {
            $.elasticsearchAws = elasticsearchAws;
            return this;
        }

        /**
         * @param elasticsearchAws Enable the use of AWS hosted Elasticsearch.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAws(Boolean elasticsearchAws) {
            return elasticsearchAws(Output.of(elasticsearchAws));
        }

        /**
         * @param elasticsearchAwsAccessKey AWS IAM access key.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAwsAccessKey(@Nullable Output<String> elasticsearchAwsAccessKey) {
            $.elasticsearchAwsAccessKey = elasticsearchAwsAccessKey;
            return this;
        }

        /**
         * @param elasticsearchAwsAccessKey AWS IAM access key.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAwsAccessKey(String elasticsearchAwsAccessKey) {
            return elasticsearchAwsAccessKey(Output.of(elasticsearchAwsAccessKey));
        }

        /**
         * @param elasticsearchAwsRegion The AWS region the Elasticsearch domain is configured.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAwsRegion(@Nullable Output<String> elasticsearchAwsRegion) {
            $.elasticsearchAwsRegion = elasticsearchAwsRegion;
            return this;
        }

        /**
         * @param elasticsearchAwsRegion The AWS region the Elasticsearch domain is configured.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAwsRegion(String elasticsearchAwsRegion) {
            return elasticsearchAwsRegion(Output.of(elasticsearchAwsRegion));
        }

        /**
         * @param elasticsearchAwsSecretAccessKey AWS IAM secret access key.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAwsSecretAccessKey(@Nullable Output<String> elasticsearchAwsSecretAccessKey) {
            $.elasticsearchAwsSecretAccessKey = elasticsearchAwsSecretAccessKey;
            return this;
        }

        /**
         * @param elasticsearchAwsSecretAccessKey AWS IAM secret access key.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchAwsSecretAccessKey(String elasticsearchAwsSecretAccessKey) {
            return elasticsearchAwsSecretAccessKey(Output.of(elasticsearchAwsSecretAccessKey));
        }

        /**
         * @param elasticsearchIndexedFieldLengthLimit Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchIndexedFieldLengthLimit(@Nullable Output<Integer> elasticsearchIndexedFieldLengthLimit) {
            $.elasticsearchIndexedFieldLengthLimit = elasticsearchIndexedFieldLengthLimit;
            return this;
        }

        /**
         * @param elasticsearchIndexedFieldLengthLimit Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchIndexedFieldLengthLimit(Integer elasticsearchIndexedFieldLengthLimit) {
            return elasticsearchIndexedFieldLengthLimit(Output.of(elasticsearchIndexedFieldLengthLimit));
        }

        /**
         * @param elasticsearchIndexedFileSizeLimitKb Maximum size of repository and wiki files that are indexed by Elasticsearch.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchIndexedFileSizeLimitKb(@Nullable Output<Integer> elasticsearchIndexedFileSizeLimitKb) {
            $.elasticsearchIndexedFileSizeLimitKb = elasticsearchIndexedFileSizeLimitKb;
            return this;
        }

        /**
         * @param elasticsearchIndexedFileSizeLimitKb Maximum size of repository and wiki files that are indexed by Elasticsearch.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchIndexedFileSizeLimitKb(Integer elasticsearchIndexedFileSizeLimitKb) {
            return elasticsearchIndexedFileSizeLimitKb(Output.of(elasticsearchIndexedFileSizeLimitKb));
        }

        /**
         * @param elasticsearchIndexing Enable Elasticsearch indexing.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchIndexing(@Nullable Output<Boolean> elasticsearchIndexing) {
            $.elasticsearchIndexing = elasticsearchIndexing;
            return this;
        }

        /**
         * @param elasticsearchIndexing Enable Elasticsearch indexing.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchIndexing(Boolean elasticsearchIndexing) {
            return elasticsearchIndexing(Output.of(elasticsearchIndexing));
        }

        /**
         * @param elasticsearchLimitIndexing Limit Elasticsearch to index certain namespaces and projects.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchLimitIndexing(@Nullable Output<Boolean> elasticsearchLimitIndexing) {
            $.elasticsearchLimitIndexing = elasticsearchLimitIndexing;
            return this;
        }

        /**
         * @param elasticsearchLimitIndexing Limit Elasticsearch to index certain namespaces and projects.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchLimitIndexing(Boolean elasticsearchLimitIndexing) {
            return elasticsearchLimitIndexing(Output.of(elasticsearchLimitIndexing));
        }

        /**
         * @param elasticsearchMaxBulkConcurrency Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchMaxBulkConcurrency(@Nullable Output<Integer> elasticsearchMaxBulkConcurrency) {
            $.elasticsearchMaxBulkConcurrency = elasticsearchMaxBulkConcurrency;
            return this;
        }

        /**
         * @param elasticsearchMaxBulkConcurrency Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchMaxBulkConcurrency(Integer elasticsearchMaxBulkConcurrency) {
            return elasticsearchMaxBulkConcurrency(Output.of(elasticsearchMaxBulkConcurrency));
        }

        /**
         * @param elasticsearchMaxBulkSizeMb Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchMaxBulkSizeMb(@Nullable Output<Integer> elasticsearchMaxBulkSizeMb) {
            $.elasticsearchMaxBulkSizeMb = elasticsearchMaxBulkSizeMb;
            return this;
        }

        /**
         * @param elasticsearchMaxBulkSizeMb Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchMaxBulkSizeMb(Integer elasticsearchMaxBulkSizeMb) {
            return elasticsearchMaxBulkSizeMb(Output.of(elasticsearchMaxBulkSizeMb));
        }

        /**
         * @param elasticsearchNamespaceIds The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchNamespaceIds(@Nullable Output<List<String>> elasticsearchNamespaceIds) {
            $.elasticsearchNamespaceIds = elasticsearchNamespaceIds;
            return this;
        }

        /**
         * @param elasticsearchNamespaceIds The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchNamespaceIds(List<String> elasticsearchNamespaceIds) {
            return elasticsearchNamespaceIds(Output.of(elasticsearchNamespaceIds));
        }

        /**
         * @param elasticsearchNamespaceIds The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchNamespaceIds(String... elasticsearchNamespaceIds) {
            return elasticsearchNamespaceIds(List.of(elasticsearchNamespaceIds));
        }

        /**
         * @param elasticsearchPassword The password of your Elasticsearch instance.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchPassword(@Nullable Output<String> elasticsearchPassword) {
            $.elasticsearchPassword = elasticsearchPassword;
            return this;
        }

        /**
         * @param elasticsearchPassword The password of your Elasticsearch instance.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchPassword(String elasticsearchPassword) {
            return elasticsearchPassword(Output.of(elasticsearchPassword));
        }

        /**
         * @param elasticsearchProjectIds The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchProjectIds(@Nullable Output<List<String>> elasticsearchProjectIds) {
            $.elasticsearchProjectIds = elasticsearchProjectIds;
            return this;
        }

        /**
         * @param elasticsearchProjectIds The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchProjectIds(List<String> elasticsearchProjectIds) {
            return elasticsearchProjectIds(Output.of(elasticsearchProjectIds));
        }

        /**
         * @param elasticsearchProjectIds The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchProjectIds(String... elasticsearchProjectIds) {
            return elasticsearchProjectIds(List.of(elasticsearchProjectIds));
        }

        /**
         * @param elasticsearchSearch Enable Elasticsearch search.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchSearch(@Nullable Output<Boolean> elasticsearchSearch) {
            $.elasticsearchSearch = elasticsearchSearch;
            return this;
        }

        /**
         * @param elasticsearchSearch Enable Elasticsearch search.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchSearch(Boolean elasticsearchSearch) {
            return elasticsearchSearch(Output.of(elasticsearchSearch));
        }

        /**
         * @param elasticsearchUrls The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchUrls(@Nullable Output<List<String>> elasticsearchUrls) {
            $.elasticsearchUrls = elasticsearchUrls;
            return this;
        }

        /**
         * @param elasticsearchUrls The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchUrls(List<String> elasticsearchUrls) {
            return elasticsearchUrls(Output.of(elasticsearchUrls));
        }

        /**
         * @param elasticsearchUrls The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchUrls(String... elasticsearchUrls) {
            return elasticsearchUrls(List.of(elasticsearchUrls));
        }

        /**
         * @param elasticsearchUsername The username of your Elasticsearch instance.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchUsername(@Nullable Output<String> elasticsearchUsername) {
            $.elasticsearchUsername = elasticsearchUsername;
            return this;
        }

        /**
         * @param elasticsearchUsername The username of your Elasticsearch instance.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchUsername(String elasticsearchUsername) {
            return elasticsearchUsername(Output.of(elasticsearchUsername));
        }

        /**
         * @param emailAdditionalText Additional text added to the bottom of every email for legal/auditing/compliance reasons.
         * 
         * @return builder
         * 
         */
        public Builder emailAdditionalText(@Nullable Output<String> emailAdditionalText) {
            $.emailAdditionalText = emailAdditionalText;
            return this;
        }

        /**
         * @param emailAdditionalText Additional text added to the bottom of every email for legal/auditing/compliance reasons.
         * 
         * @return builder
         * 
         */
        public Builder emailAdditionalText(String emailAdditionalText) {
            return emailAdditionalText(Output.of(emailAdditionalText));
        }

        /**
         * @param emailAuthorInBody Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
         * 
         * @return builder
         * 
         */
        public Builder emailAuthorInBody(@Nullable Output<Boolean> emailAuthorInBody) {
            $.emailAuthorInBody = emailAuthorInBody;
            return this;
        }

        /**
         * @param emailAuthorInBody Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
         * 
         * @return builder
         * 
         */
        public Builder emailAuthorInBody(Boolean emailAuthorInBody) {
            return emailAuthorInBody(Output.of(emailAuthorInBody));
        }

        /**
         * @param enabledGitAccessProtocol Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
         * 
         * @return builder
         * 
         */
        public Builder enabledGitAccessProtocol(@Nullable Output<String> enabledGitAccessProtocol) {
            $.enabledGitAccessProtocol = enabledGitAccessProtocol;
            return this;
        }

        /**
         * @param enabledGitAccessProtocol Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
         * 
         * @return builder
         * 
         */
        public Builder enabledGitAccessProtocol(String enabledGitAccessProtocol) {
            return enabledGitAccessProtocol(Output.of(enabledGitAccessProtocol));
        }

        /**
         * @param enforceNamespaceStorageLimit Enabling this permits enforcement of namespace storage limits.
         * 
         * @return builder
         * 
         */
        public Builder enforceNamespaceStorageLimit(@Nullable Output<Boolean> enforceNamespaceStorageLimit) {
            $.enforceNamespaceStorageLimit = enforceNamespaceStorageLimit;
            return this;
        }

        /**
         * @param enforceNamespaceStorageLimit Enabling this permits enforcement of namespace storage limits.
         * 
         * @return builder
         * 
         */
        public Builder enforceNamespaceStorageLimit(Boolean enforceNamespaceStorageLimit) {
            return enforceNamespaceStorageLimit(Output.of(enforceNamespaceStorageLimit));
        }

        /**
         * @param enforceTerms (If enabled, requires: terms) Enforce application ToS to all users.
         * 
         * @return builder
         * 
         */
        public Builder enforceTerms(@Nullable Output<Boolean> enforceTerms) {
            $.enforceTerms = enforceTerms;
            return this;
        }

        /**
         * @param enforceTerms (If enabled, requires: terms) Enforce application ToS to all users.
         * 
         * @return builder
         * 
         */
        public Builder enforceTerms(Boolean enforceTerms) {
            return enforceTerms(Output.of(enforceTerms));
        }

        /**
         * @param externalAuthClientCert (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthClientCert(@Nullable Output<String> externalAuthClientCert) {
            $.externalAuthClientCert = externalAuthClientCert;
            return this;
        }

        /**
         * @param externalAuthClientCert (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthClientCert(String externalAuthClientCert) {
            return externalAuthClientCert(Output.of(externalAuthClientCert));
        }

        /**
         * @param externalAuthClientKey Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthClientKey(@Nullable Output<String> externalAuthClientKey) {
            $.externalAuthClientKey = externalAuthClientKey;
            return this;
        }

        /**
         * @param externalAuthClientKey Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthClientKey(String externalAuthClientKey) {
            return externalAuthClientKey(Output.of(externalAuthClientKey));
        }

        /**
         * @param externalAuthClientKeyPass Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthClientKeyPass(@Nullable Output<String> externalAuthClientKeyPass) {
            $.externalAuthClientKeyPass = externalAuthClientKeyPass;
            return this;
        }

        /**
         * @param externalAuthClientKeyPass Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthClientKeyPass(String externalAuthClientKeyPass) {
            return externalAuthClientKeyPass(Output.of(externalAuthClientKeyPass));
        }

        /**
         * @param externalAuthorizationServiceDefaultLabel The default classification label to use when requesting authorization and no classification label has been specified on the project.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceDefaultLabel(@Nullable Output<String> externalAuthorizationServiceDefaultLabel) {
            $.externalAuthorizationServiceDefaultLabel = externalAuthorizationServiceDefaultLabel;
            return this;
        }

        /**
         * @param externalAuthorizationServiceDefaultLabel The default classification label to use when requesting authorization and no classification label has been specified on the project.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceDefaultLabel(String externalAuthorizationServiceDefaultLabel) {
            return externalAuthorizationServiceDefaultLabel(Output.of(externalAuthorizationServiceDefaultLabel));
        }

        /**
         * @param externalAuthorizationServiceEnabled (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceEnabled(@Nullable Output<Boolean> externalAuthorizationServiceEnabled) {
            $.externalAuthorizationServiceEnabled = externalAuthorizationServiceEnabled;
            return this;
        }

        /**
         * @param externalAuthorizationServiceEnabled (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceEnabled(Boolean externalAuthorizationServiceEnabled) {
            return externalAuthorizationServiceEnabled(Output.of(externalAuthorizationServiceEnabled));
        }

        /**
         * @param externalAuthorizationServiceTimeout The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceTimeout(@Nullable Output<Double> externalAuthorizationServiceTimeout) {
            $.externalAuthorizationServiceTimeout = externalAuthorizationServiceTimeout;
            return this;
        }

        /**
         * @param externalAuthorizationServiceTimeout The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceTimeout(Double externalAuthorizationServiceTimeout) {
            return externalAuthorizationServiceTimeout(Output.of(externalAuthorizationServiceTimeout));
        }

        /**
         * @param externalAuthorizationServiceUrl URL to which authorization requests are directed.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceUrl(@Nullable Output<String> externalAuthorizationServiceUrl) {
            $.externalAuthorizationServiceUrl = externalAuthorizationServiceUrl;
            return this;
        }

        /**
         * @param externalAuthorizationServiceUrl URL to which authorization requests are directed.
         * 
         * @return builder
         * 
         */
        public Builder externalAuthorizationServiceUrl(String externalAuthorizationServiceUrl) {
            return externalAuthorizationServiceUrl(Output.of(externalAuthorizationServiceUrl));
        }

        /**
         * @param externalPipelineValidationServiceTimeout How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
         * 
         * @return builder
         * 
         */
        public Builder externalPipelineValidationServiceTimeout(@Nullable Output<Integer> externalPipelineValidationServiceTimeout) {
            $.externalPipelineValidationServiceTimeout = externalPipelineValidationServiceTimeout;
            return this;
        }

        /**
         * @param externalPipelineValidationServiceTimeout How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
         * 
         * @return builder
         * 
         */
        public Builder externalPipelineValidationServiceTimeout(Integer externalPipelineValidationServiceTimeout) {
            return externalPipelineValidationServiceTimeout(Output.of(externalPipelineValidationServiceTimeout));
        }

        /**
         * @param externalPipelineValidationServiceToken Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
         * 
         * @return builder
         * 
         */
        public Builder externalPipelineValidationServiceToken(@Nullable Output<String> externalPipelineValidationServiceToken) {
            $.externalPipelineValidationServiceToken = externalPipelineValidationServiceToken;
            return this;
        }

        /**
         * @param externalPipelineValidationServiceToken Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
         * 
         * @return builder
         * 
         */
        public Builder externalPipelineValidationServiceToken(String externalPipelineValidationServiceToken) {
            return externalPipelineValidationServiceToken(Output.of(externalPipelineValidationServiceToken));
        }

        /**
         * @param externalPipelineValidationServiceUrl URL to use for pipeline validation requests.
         * 
         * @return builder
         * 
         */
        public Builder externalPipelineValidationServiceUrl(@Nullable Output<String> externalPipelineValidationServiceUrl) {
            $.externalPipelineValidationServiceUrl = externalPipelineValidationServiceUrl;
            return this;
        }

        /**
         * @param externalPipelineValidationServiceUrl URL to use for pipeline validation requests.
         * 
         * @return builder
         * 
         */
        public Builder externalPipelineValidationServiceUrl(String externalPipelineValidationServiceUrl) {
            return externalPipelineValidationServiceUrl(Output.of(externalPipelineValidationServiceUrl));
        }

        /**
         * @param fileTemplateProjectId The ID of a project to load custom file templates from.
         * 
         * @return builder
         * 
         */
        public Builder fileTemplateProjectId(@Nullable Output<Integer> fileTemplateProjectId) {
            $.fileTemplateProjectId = fileTemplateProjectId;
            return this;
        }

        /**
         * @param fileTemplateProjectId The ID of a project to load custom file templates from.
         * 
         * @return builder
         * 
         */
        public Builder fileTemplateProjectId(Integer fileTemplateProjectId) {
            return fileTemplateProjectId(Output.of(fileTemplateProjectId));
        }

        /**
         * @param firstDayOfWeek Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
         * 
         * @return builder
         * 
         */
        public Builder firstDayOfWeek(@Nullable Output<Integer> firstDayOfWeek) {
            $.firstDayOfWeek = firstDayOfWeek;
            return this;
        }

        /**
         * @param firstDayOfWeek Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
         * 
         * @return builder
         * 
         */
        public Builder firstDayOfWeek(Integer firstDayOfWeek) {
            return firstDayOfWeek(Output.of(firstDayOfWeek));
        }

        /**
         * @param geoNodeAllowedIps Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
         * 
         * @return builder
         * 
         */
        public Builder geoNodeAllowedIps(@Nullable Output<String> geoNodeAllowedIps) {
            $.geoNodeAllowedIps = geoNodeAllowedIps;
            return this;
        }

        /**
         * @param geoNodeAllowedIps Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
         * 
         * @return builder
         * 
         */
        public Builder geoNodeAllowedIps(String geoNodeAllowedIps) {
            return geoNodeAllowedIps(Output.of(geoNodeAllowedIps));
        }

        /**
         * @param geoStatusTimeout The amount of seconds after which a request to get a secondary node status times out.
         * 
         * @return builder
         * 
         */
        public Builder geoStatusTimeout(@Nullable Output<Integer> geoStatusTimeout) {
            $.geoStatusTimeout = geoStatusTimeout;
            return this;
        }

        /**
         * @param geoStatusTimeout The amount of seconds after which a request to get a secondary node status times out.
         * 
         * @return builder
         * 
         */
        public Builder geoStatusTimeout(Integer geoStatusTimeout) {
            return geoStatusTimeout(Output.of(geoStatusTimeout));
        }

        /**
         * @param gitRateLimitUsersAllowlists List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
         * 
         * @return builder
         * 
         */
        public Builder gitRateLimitUsersAllowlists(@Nullable Output<List<String>> gitRateLimitUsersAllowlists) {
            $.gitRateLimitUsersAllowlists = gitRateLimitUsersAllowlists;
            return this;
        }

        /**
         * @param gitRateLimitUsersAllowlists List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
         * 
         * @return builder
         * 
         */
        public Builder gitRateLimitUsersAllowlists(List<String> gitRateLimitUsersAllowlists) {
            return gitRateLimitUsersAllowlists(Output.of(gitRateLimitUsersAllowlists));
        }

        /**
         * @param gitRateLimitUsersAllowlists List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
         * 
         * @return builder
         * 
         */
        public Builder gitRateLimitUsersAllowlists(String... gitRateLimitUsersAllowlists) {
            return gitRateLimitUsersAllowlists(List.of(gitRateLimitUsersAllowlists));
        }

        /**
         * @param gitTwoFactorSessionExpiry Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder gitTwoFactorSessionExpiry(@Nullable Output<Integer> gitTwoFactorSessionExpiry) {
            $.gitTwoFactorSessionExpiry = gitTwoFactorSessionExpiry;
            return this;
        }

        /**
         * @param gitTwoFactorSessionExpiry Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
         * 
         * @return builder
         * 
         */
        public Builder gitTwoFactorSessionExpiry(Integer gitTwoFactorSessionExpiry) {
            return gitTwoFactorSessionExpiry(Output.of(gitTwoFactorSessionExpiry));
        }

        /**
         * @param gitalyTimeoutDefault Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
         * 
         * @return builder
         * 
         */
        public Builder gitalyTimeoutDefault(@Nullable Output<Integer> gitalyTimeoutDefault) {
            $.gitalyTimeoutDefault = gitalyTimeoutDefault;
            return this;
        }

        /**
         * @param gitalyTimeoutDefault Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
         * 
         * @return builder
         * 
         */
        public Builder gitalyTimeoutDefault(Integer gitalyTimeoutDefault) {
            return gitalyTimeoutDefault(Output.of(gitalyTimeoutDefault));
        }

        /**
         * @param gitalyTimeoutFast Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
         * 
         * @return builder
         * 
         */
        public Builder gitalyTimeoutFast(@Nullable Output<Integer> gitalyTimeoutFast) {
            $.gitalyTimeoutFast = gitalyTimeoutFast;
            return this;
        }

        /**
         * @param gitalyTimeoutFast Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
         * 
         * @return builder
         * 
         */
        public Builder gitalyTimeoutFast(Integer gitalyTimeoutFast) {
            return gitalyTimeoutFast(Output.of(gitalyTimeoutFast));
        }

        /**
         * @param gitalyTimeoutMedium Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
         * 
         * @return builder
         * 
         */
        public Builder gitalyTimeoutMedium(@Nullable Output<Integer> gitalyTimeoutMedium) {
            $.gitalyTimeoutMedium = gitalyTimeoutMedium;
            return this;
        }

        /**
         * @param gitalyTimeoutMedium Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
         * 
         * @return builder
         * 
         */
        public Builder gitalyTimeoutMedium(Integer gitalyTimeoutMedium) {
            return gitalyTimeoutMedium(Output.of(gitalyTimeoutMedium));
        }

        /**
         * @param grafanaEnabled Enable Grafana.
         * 
         * @return builder
         * 
         */
        public Builder grafanaEnabled(@Nullable Output<Boolean> grafanaEnabled) {
            $.grafanaEnabled = grafanaEnabled;
            return this;
        }

        /**
         * @param grafanaEnabled Enable Grafana.
         * 
         * @return builder
         * 
         */
        public Builder grafanaEnabled(Boolean grafanaEnabled) {
            return grafanaEnabled(Output.of(grafanaEnabled));
        }

        /**
         * @param grafanaUrl Grafana URL.
         * 
         * @return builder
         * 
         */
        public Builder grafanaUrl(@Nullable Output<String> grafanaUrl) {
            $.grafanaUrl = grafanaUrl;
            return this;
        }

        /**
         * @param grafanaUrl Grafana URL.
         * 
         * @return builder
         * 
         */
        public Builder grafanaUrl(String grafanaUrl) {
            return grafanaUrl(Output.of(grafanaUrl));
        }

        /**
         * @param gravatarEnabled Enable Gravatar.
         * 
         * @return builder
         * 
         */
        public Builder gravatarEnabled(@Nullable Output<Boolean> gravatarEnabled) {
            $.gravatarEnabled = gravatarEnabled;
            return this;
        }

        /**
         * @param gravatarEnabled Enable Gravatar.
         * 
         * @return builder
         * 
         */
        public Builder gravatarEnabled(Boolean gravatarEnabled) {
            return gravatarEnabled(Output.of(gravatarEnabled));
        }

        /**
         * @param groupOwnersCanManageDefaultBranchProtection Prevent overrides of default branch protection.
         * 
         * @return builder
         * 
         */
        public Builder groupOwnersCanManageDefaultBranchProtection(@Nullable Output<Boolean> groupOwnersCanManageDefaultBranchProtection) {
            $.groupOwnersCanManageDefaultBranchProtection = groupOwnersCanManageDefaultBranchProtection;
            return this;
        }

        /**
         * @param groupOwnersCanManageDefaultBranchProtection Prevent overrides of default branch protection.
         * 
         * @return builder
         * 
         */
        public Builder groupOwnersCanManageDefaultBranchProtection(Boolean groupOwnersCanManageDefaultBranchProtection) {
            return groupOwnersCanManageDefaultBranchProtection(Output.of(groupOwnersCanManageDefaultBranchProtection));
        }

        /**
         * @param hashedStorageEnabled Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
         * 
         * @return builder
         * 
         */
        public Builder hashedStorageEnabled(@Nullable Output<Boolean> hashedStorageEnabled) {
            $.hashedStorageEnabled = hashedStorageEnabled;
            return this;
        }

        /**
         * @param hashedStorageEnabled Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
         * 
         * @return builder
         * 
         */
        public Builder hashedStorageEnabled(Boolean hashedStorageEnabled) {
            return hashedStorageEnabled(Output.of(hashedStorageEnabled));
        }

        /**
         * @param helpPageHideCommercialContent Hide marketing-related entries from help.
         * 
         * @return builder
         * 
         */
        public Builder helpPageHideCommercialContent(@Nullable Output<Boolean> helpPageHideCommercialContent) {
            $.helpPageHideCommercialContent = helpPageHideCommercialContent;
            return this;
        }

        /**
         * @param helpPageHideCommercialContent Hide marketing-related entries from help.
         * 
         * @return builder
         * 
         */
        public Builder helpPageHideCommercialContent(Boolean helpPageHideCommercialContent) {
            return helpPageHideCommercialContent(Output.of(helpPageHideCommercialContent));
        }

        /**
         * @param helpPageSupportUrl Alternate support URL for help page and help dropdown.
         * 
         * @return builder
         * 
         */
        public Builder helpPageSupportUrl(@Nullable Output<String> helpPageSupportUrl) {
            $.helpPageSupportUrl = helpPageSupportUrl;
            return this;
        }

        /**
         * @param helpPageSupportUrl Alternate support URL for help page and help dropdown.
         * 
         * @return builder
         * 
         */
        public Builder helpPageSupportUrl(String helpPageSupportUrl) {
            return helpPageSupportUrl(Output.of(helpPageSupportUrl));
        }

        /**
         * @param helpPageText Custom text displayed on the help page.
         * 
         * @return builder
         * 
         */
        public Builder helpPageText(@Nullable Output<String> helpPageText) {
            $.helpPageText = helpPageText;
            return this;
        }

        /**
         * @param helpPageText Custom text displayed on the help page.
         * 
         * @return builder
         * 
         */
        public Builder helpPageText(String helpPageText) {
            return helpPageText(Output.of(helpPageText));
        }

        /**
         * @param helpText GitLab server administrator information.
         * 
         * @return builder
         * 
         */
        public Builder helpText(@Nullable Output<String> helpText) {
            $.helpText = helpText;
            return this;
        }

        /**
         * @param helpText GitLab server administrator information.
         * 
         * @return builder
         * 
         */
        public Builder helpText(String helpText) {
            return helpText(Output.of(helpText));
        }

        /**
         * @param hideThirdPartyOffers Do not display offers from third parties in GitLab.
         * 
         * @return builder
         * 
         */
        public Builder hideThirdPartyOffers(@Nullable Output<Boolean> hideThirdPartyOffers) {
            $.hideThirdPartyOffers = hideThirdPartyOffers;
            return this;
        }

        /**
         * @param hideThirdPartyOffers Do not display offers from third parties in GitLab.
         * 
         * @return builder
         * 
         */
        public Builder hideThirdPartyOffers(Boolean hideThirdPartyOffers) {
            return hideThirdPartyOffers(Output.of(hideThirdPartyOffers));
        }

        /**
         * @param homePageUrl Redirect to this URL when not logged in.
         * 
         * @return builder
         * 
         */
        public Builder homePageUrl(@Nullable Output<String> homePageUrl) {
            $.homePageUrl = homePageUrl;
            return this;
        }

        /**
         * @param homePageUrl Redirect to this URL when not logged in.
         * 
         * @return builder
         * 
         */
        public Builder homePageUrl(String homePageUrl) {
            return homePageUrl(Output.of(homePageUrl));
        }

        /**
         * @param housekeepingEnabled (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingEnabled(@Nullable Output<Boolean> housekeepingEnabled) {
            $.housekeepingEnabled = housekeepingEnabled;
            return this;
        }

        /**
         * @param housekeepingEnabled (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingEnabled(Boolean housekeepingEnabled) {
            return housekeepingEnabled(Output.of(housekeepingEnabled));
        }

        /**
         * @param housekeepingFullRepackPeriod Number of Git pushes after which an incremental git repack is run.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingFullRepackPeriod(@Nullable Output<Integer> housekeepingFullRepackPeriod) {
            $.housekeepingFullRepackPeriod = housekeepingFullRepackPeriod;
            return this;
        }

        /**
         * @param housekeepingFullRepackPeriod Number of Git pushes after which an incremental git repack is run.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingFullRepackPeriod(Integer housekeepingFullRepackPeriod) {
            return housekeepingFullRepackPeriod(Output.of(housekeepingFullRepackPeriod));
        }

        /**
         * @param housekeepingGcPeriod Number of Git pushes after which git gc is run.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingGcPeriod(@Nullable Output<Integer> housekeepingGcPeriod) {
            $.housekeepingGcPeriod = housekeepingGcPeriod;
            return this;
        }

        /**
         * @param housekeepingGcPeriod Number of Git pushes after which git gc is run.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingGcPeriod(Integer housekeepingGcPeriod) {
            return housekeepingGcPeriod(Output.of(housekeepingGcPeriod));
        }

        /**
         * @param housekeepingIncrementalRepackPeriod Number of Git pushes after which an incremental git repack is run.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingIncrementalRepackPeriod(@Nullable Output<Integer> housekeepingIncrementalRepackPeriod) {
            $.housekeepingIncrementalRepackPeriod = housekeepingIncrementalRepackPeriod;
            return this;
        }

        /**
         * @param housekeepingIncrementalRepackPeriod Number of Git pushes after which an incremental git repack is run.
         * 
         * @return builder
         * 
         */
        public Builder housekeepingIncrementalRepackPeriod(Integer housekeepingIncrementalRepackPeriod) {
            return housekeepingIncrementalRepackPeriod(Output.of(housekeepingIncrementalRepackPeriod));
        }

        /**
         * @param htmlEmailsEnabled Enable HTML emails.
         * 
         * @return builder
         * 
         */
        public Builder htmlEmailsEnabled(@Nullable Output<Boolean> htmlEmailsEnabled) {
            $.htmlEmailsEnabled = htmlEmailsEnabled;
            return this;
        }

        /**
         * @param htmlEmailsEnabled Enable HTML emails.
         * 
         * @return builder
         * 
         */
        public Builder htmlEmailsEnabled(Boolean htmlEmailsEnabled) {
            return htmlEmailsEnabled(Output.of(htmlEmailsEnabled));
        }

        /**
         * @param importSources Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
         * 
         * @return builder
         * 
         */
        public Builder importSources(@Nullable Output<List<String>> importSources) {
            $.importSources = importSources;
            return this;
        }

        /**
         * @param importSources Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
         * 
         * @return builder
         * 
         */
        public Builder importSources(List<String> importSources) {
            return importSources(Output.of(importSources));
        }

        /**
         * @param importSources Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
         * 
         * @return builder
         * 
         */
        public Builder importSources(String... importSources) {
            return importSources(List.of(importSources));
        }

        /**
         * @param inProductMarketingEmailsEnabled Enable in-product marketing emails. Enabled by default.
         * 
         * @return builder
         * 
         */
        public Builder inProductMarketingEmailsEnabled(@Nullable Output<Boolean> inProductMarketingEmailsEnabled) {
            $.inProductMarketingEmailsEnabled = inProductMarketingEmailsEnabled;
            return this;
        }

        /**
         * @param inProductMarketingEmailsEnabled Enable in-product marketing emails. Enabled by default.
         * 
         * @return builder
         * 
         */
        public Builder inProductMarketingEmailsEnabled(Boolean inProductMarketingEmailsEnabled) {
            return inProductMarketingEmailsEnabled(Output.of(inProductMarketingEmailsEnabled));
        }

        /**
         * @param inactiveProjectsDeleteAfterMonths If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
         * 
         * @return builder
         * 
         */
        public Builder inactiveProjectsDeleteAfterMonths(@Nullable Output<Integer> inactiveProjectsDeleteAfterMonths) {
            $.inactiveProjectsDeleteAfterMonths = inactiveProjectsDeleteAfterMonths;
            return this;
        }

        /**
         * @param inactiveProjectsDeleteAfterMonths If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
         * 
         * @return builder
         * 
         */
        public Builder inactiveProjectsDeleteAfterMonths(Integer inactiveProjectsDeleteAfterMonths) {
            return inactiveProjectsDeleteAfterMonths(Output.of(inactiveProjectsDeleteAfterMonths));
        }

        /**
         * @param inactiveProjectsMinSizeMb If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
         * 
         * @return builder
         * 
         */
        public Builder inactiveProjectsMinSizeMb(@Nullable Output<Integer> inactiveProjectsMinSizeMb) {
            $.inactiveProjectsMinSizeMb = inactiveProjectsMinSizeMb;
            return this;
        }

        /**
         * @param inactiveProjectsMinSizeMb If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
         * 
         * @return builder
         * 
         */
        public Builder inactiveProjectsMinSizeMb(Integer inactiveProjectsMinSizeMb) {
            return inactiveProjectsMinSizeMb(Output.of(inactiveProjectsMinSizeMb));
        }

        /**
         * @param inactiveProjectsSendWarningEmailAfterMonths If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
         * 
         * @return builder
         * 
         */
        public Builder inactiveProjectsSendWarningEmailAfterMonths(@Nullable Output<Integer> inactiveProjectsSendWarningEmailAfterMonths) {
            $.inactiveProjectsSendWarningEmailAfterMonths = inactiveProjectsSendWarningEmailAfterMonths;
            return this;
        }

        /**
         * @param inactiveProjectsSendWarningEmailAfterMonths If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
         * 
         * @return builder
         * 
         */
        public Builder inactiveProjectsSendWarningEmailAfterMonths(Integer inactiveProjectsSendWarningEmailAfterMonths) {
            return inactiveProjectsSendWarningEmailAfterMonths(Output.of(inactiveProjectsSendWarningEmailAfterMonths));
        }

        /**
         * @param invisibleCaptchaEnabled Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder invisibleCaptchaEnabled(@Nullable Output<Boolean> invisibleCaptchaEnabled) {
            $.invisibleCaptchaEnabled = invisibleCaptchaEnabled;
            return this;
        }

        /**
         * @param invisibleCaptchaEnabled Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder invisibleCaptchaEnabled(Boolean invisibleCaptchaEnabled) {
            return invisibleCaptchaEnabled(Output.of(invisibleCaptchaEnabled));
        }

        /**
         * @param issuesCreateLimit Max number of issue creation requests per minute per user. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder issuesCreateLimit(@Nullable Output<Integer> issuesCreateLimit) {
            $.issuesCreateLimit = issuesCreateLimit;
            return this;
        }

        /**
         * @param issuesCreateLimit Max number of issue creation requests per minute per user. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder issuesCreateLimit(Integer issuesCreateLimit) {
            return issuesCreateLimit(Output.of(issuesCreateLimit));
        }

        /**
         * @param keepLatestArtifact Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
         * 
         * @return builder
         * 
         */
        public Builder keepLatestArtifact(@Nullable Output<Boolean> keepLatestArtifact) {
            $.keepLatestArtifact = keepLatestArtifact;
            return this;
        }

        /**
         * @param keepLatestArtifact Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
         * 
         * @return builder
         * 
         */
        public Builder keepLatestArtifact(Boolean keepLatestArtifact) {
            return keepLatestArtifact(Output.of(keepLatestArtifact));
        }

        /**
         * @param localMarkdownVersion Increase this value when any cached Markdown should be invalidated.
         * 
         * @return builder
         * 
         */
        public Builder localMarkdownVersion(@Nullable Output<Integer> localMarkdownVersion) {
            $.localMarkdownVersion = localMarkdownVersion;
            return this;
        }

        /**
         * @param localMarkdownVersion Increase this value when any cached Markdown should be invalidated.
         * 
         * @return builder
         * 
         */
        public Builder localMarkdownVersion(Integer localMarkdownVersion) {
            return localMarkdownVersion(Output.of(localMarkdownVersion));
        }

        /**
         * @param mailgunEventsEnabled Enable Mailgun event receiver.
         * 
         * @return builder
         * 
         */
        public Builder mailgunEventsEnabled(@Nullable Output<Boolean> mailgunEventsEnabled) {
            $.mailgunEventsEnabled = mailgunEventsEnabled;
            return this;
        }

        /**
         * @param mailgunEventsEnabled Enable Mailgun event receiver.
         * 
         * @return builder
         * 
         */
        public Builder mailgunEventsEnabled(Boolean mailgunEventsEnabled) {
            return mailgunEventsEnabled(Output.of(mailgunEventsEnabled));
        }

        /**
         * @param mailgunSigningKey The Mailgun HTTP webhook signing key for receiving events from webhook.
         * 
         * @return builder
         * 
         */
        public Builder mailgunSigningKey(@Nullable Output<String> mailgunSigningKey) {
            $.mailgunSigningKey = mailgunSigningKey;
            return this;
        }

        /**
         * @param mailgunSigningKey The Mailgun HTTP webhook signing key for receiving events from webhook.
         * 
         * @return builder
         * 
         */
        public Builder mailgunSigningKey(String mailgunSigningKey) {
            return mailgunSigningKey(Output.of(mailgunSigningKey));
        }

        /**
         * @param maintenanceMode When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceMode(@Nullable Output<Boolean> maintenanceMode) {
            $.maintenanceMode = maintenanceMode;
            return this;
        }

        /**
         * @param maintenanceMode When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceMode(Boolean maintenanceMode) {
            return maintenanceMode(Output.of(maintenanceMode));
        }

        /**
         * @param maintenanceModeMessage Message displayed when instance is in maintenance mode.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceModeMessage(@Nullable Output<String> maintenanceModeMessage) {
            $.maintenanceModeMessage = maintenanceModeMessage;
            return this;
        }

        /**
         * @param maintenanceModeMessage Message displayed when instance is in maintenance mode.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceModeMessage(String maintenanceModeMessage) {
            return maintenanceModeMessage(Output.of(maintenanceModeMessage));
        }

        /**
         * @param maxArtifactsSize Maximum artifacts size in MB.
         * 
         * @return builder
         * 
         */
        public Builder maxArtifactsSize(@Nullable Output<Integer> maxArtifactsSize) {
            $.maxArtifactsSize = maxArtifactsSize;
            return this;
        }

        /**
         * @param maxArtifactsSize Maximum artifacts size in MB.
         * 
         * @return builder
         * 
         */
        public Builder maxArtifactsSize(Integer maxArtifactsSize) {
            return maxArtifactsSize(Output.of(maxArtifactsSize));
        }

        /**
         * @param maxAttachmentSize Limit attachment size in MB.
         * 
         * @return builder
         * 
         */
        public Builder maxAttachmentSize(@Nullable Output<Integer> maxAttachmentSize) {
            $.maxAttachmentSize = maxAttachmentSize;
            return this;
        }

        /**
         * @param maxAttachmentSize Limit attachment size in MB.
         * 
         * @return builder
         * 
         */
        public Builder maxAttachmentSize(Integer maxAttachmentSize) {
            return maxAttachmentSize(Output.of(maxAttachmentSize));
        }

        /**
         * @param maxExportSize Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
         * 
         * @return builder
         * 
         */
        public Builder maxExportSize(@Nullable Output<Integer> maxExportSize) {
            $.maxExportSize = maxExportSize;
            return this;
        }

        /**
         * @param maxExportSize Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
         * 
         * @return builder
         * 
         */
        public Builder maxExportSize(Integer maxExportSize) {
            return maxExportSize(Output.of(maxExportSize));
        }

        /**
         * @param maxImportSize Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
         * 
         * @return builder
         * 
         */
        public Builder maxImportSize(@Nullable Output<Integer> maxImportSize) {
            $.maxImportSize = maxImportSize;
            return this;
        }

        /**
         * @param maxImportSize Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
         * 
         * @return builder
         * 
         */
        public Builder maxImportSize(Integer maxImportSize) {
            return maxImportSize(Output.of(maxImportSize));
        }

        /**
         * @param maxNumberOfRepositoryDownloads Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder maxNumberOfRepositoryDownloads(@Nullable Output<Integer> maxNumberOfRepositoryDownloads) {
            $.maxNumberOfRepositoryDownloads = maxNumberOfRepositoryDownloads;
            return this;
        }

        /**
         * @param maxNumberOfRepositoryDownloads Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder maxNumberOfRepositoryDownloads(Integer maxNumberOfRepositoryDownloads) {
            return maxNumberOfRepositoryDownloads(Output.of(maxNumberOfRepositoryDownloads));
        }

        /**
         * @param maxNumberOfRepositoryDownloadsWithinTimePeriod Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder maxNumberOfRepositoryDownloadsWithinTimePeriod(@Nullable Output<Integer> maxNumberOfRepositoryDownloadsWithinTimePeriod) {
            $.maxNumberOfRepositoryDownloadsWithinTimePeriod = maxNumberOfRepositoryDownloadsWithinTimePeriod;
            return this;
        }

        /**
         * @param maxNumberOfRepositoryDownloadsWithinTimePeriod Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder maxNumberOfRepositoryDownloadsWithinTimePeriod(Integer maxNumberOfRepositoryDownloadsWithinTimePeriod) {
            return maxNumberOfRepositoryDownloadsWithinTimePeriod(Output.of(maxNumberOfRepositoryDownloadsWithinTimePeriod));
        }

        /**
         * @param maxPagesSize Maximum size of pages repositories in MB.
         * 
         * @return builder
         * 
         */
        public Builder maxPagesSize(@Nullable Output<Integer> maxPagesSize) {
            $.maxPagesSize = maxPagesSize;
            return this;
        }

        /**
         * @param maxPagesSize Maximum size of pages repositories in MB.
         * 
         * @return builder
         * 
         */
        public Builder maxPagesSize(Integer maxPagesSize) {
            return maxPagesSize(Output.of(maxPagesSize));
        }

        /**
         * @param maxPersonalAccessTokenLifetime Maximum allowable lifetime for access tokens in days.
         * 
         * @return builder
         * 
         */
        public Builder maxPersonalAccessTokenLifetime(@Nullable Output<Integer> maxPersonalAccessTokenLifetime) {
            $.maxPersonalAccessTokenLifetime = maxPersonalAccessTokenLifetime;
            return this;
        }

        /**
         * @param maxPersonalAccessTokenLifetime Maximum allowable lifetime for access tokens in days.
         * 
         * @return builder
         * 
         */
        public Builder maxPersonalAccessTokenLifetime(Integer maxPersonalAccessTokenLifetime) {
            return maxPersonalAccessTokenLifetime(Output.of(maxPersonalAccessTokenLifetime));
        }

        /**
         * @param maxSshKeyLifetime Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
         * 
         * @return builder
         * 
         */
        public Builder maxSshKeyLifetime(@Nullable Output<Integer> maxSshKeyLifetime) {
            $.maxSshKeyLifetime = maxSshKeyLifetime;
            return this;
        }

        /**
         * @param maxSshKeyLifetime Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
         * 
         * @return builder
         * 
         */
        public Builder maxSshKeyLifetime(Integer maxSshKeyLifetime) {
            return maxSshKeyLifetime(Output.of(maxSshKeyLifetime));
        }

        /**
         * @param metricsMethodCallThreshold A method call is only tracked when it takes longer than the given amount of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder metricsMethodCallThreshold(@Nullable Output<Integer> metricsMethodCallThreshold) {
            $.metricsMethodCallThreshold = metricsMethodCallThreshold;
            return this;
        }

        /**
         * @param metricsMethodCallThreshold A method call is only tracked when it takes longer than the given amount of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder metricsMethodCallThreshold(Integer metricsMethodCallThreshold) {
            return metricsMethodCallThreshold(Output.of(metricsMethodCallThreshold));
        }

        /**
         * @param mirrorAvailable Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
         * 
         * @return builder
         * 
         */
        public Builder mirrorAvailable(@Nullable Output<Boolean> mirrorAvailable) {
            $.mirrorAvailable = mirrorAvailable;
            return this;
        }

        /**
         * @param mirrorAvailable Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
         * 
         * @return builder
         * 
         */
        public Builder mirrorAvailable(Boolean mirrorAvailable) {
            return mirrorAvailable(Output.of(mirrorAvailable));
        }

        /**
         * @param mirrorCapacityThreshold Minimum capacity to be available before scheduling more mirrors preemptively.
         * 
         * @return builder
         * 
         */
        public Builder mirrorCapacityThreshold(@Nullable Output<Integer> mirrorCapacityThreshold) {
            $.mirrorCapacityThreshold = mirrorCapacityThreshold;
            return this;
        }

        /**
         * @param mirrorCapacityThreshold Minimum capacity to be available before scheduling more mirrors preemptively.
         * 
         * @return builder
         * 
         */
        public Builder mirrorCapacityThreshold(Integer mirrorCapacityThreshold) {
            return mirrorCapacityThreshold(Output.of(mirrorCapacityThreshold));
        }

        /**
         * @param mirrorMaxCapacity Maximum number of mirrors that can be synchronizing at the same time.
         * 
         * @return builder
         * 
         */
        public Builder mirrorMaxCapacity(@Nullable Output<Integer> mirrorMaxCapacity) {
            $.mirrorMaxCapacity = mirrorMaxCapacity;
            return this;
        }

        /**
         * @param mirrorMaxCapacity Maximum number of mirrors that can be synchronizing at the same time.
         * 
         * @return builder
         * 
         */
        public Builder mirrorMaxCapacity(Integer mirrorMaxCapacity) {
            return mirrorMaxCapacity(Output.of(mirrorMaxCapacity));
        }

        /**
         * @param mirrorMaxDelay Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
         * 
         * @return builder
         * 
         */
        public Builder mirrorMaxDelay(@Nullable Output<Integer> mirrorMaxDelay) {
            $.mirrorMaxDelay = mirrorMaxDelay;
            return this;
        }

        /**
         * @param mirrorMaxDelay Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
         * 
         * @return builder
         * 
         */
        public Builder mirrorMaxDelay(Integer mirrorMaxDelay) {
            return mirrorMaxDelay(Output.of(mirrorMaxDelay));
        }

        /**
         * @param npmPackageRequestsForwarding Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
         * 
         * @return builder
         * 
         */
        public Builder npmPackageRequestsForwarding(@Nullable Output<Boolean> npmPackageRequestsForwarding) {
            $.npmPackageRequestsForwarding = npmPackageRequestsForwarding;
            return this;
        }

        /**
         * @param npmPackageRequestsForwarding Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
         * 
         * @return builder
         * 
         */
        public Builder npmPackageRequestsForwarding(Boolean npmPackageRequestsForwarding) {
            return npmPackageRequestsForwarding(Output.of(npmPackageRequestsForwarding));
        }

        /**
         * @param outboundLocalRequestsWhitelists Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
         * 
         * @return builder
         * 
         */
        public Builder outboundLocalRequestsWhitelists(@Nullable Output<List<String>> outboundLocalRequestsWhitelists) {
            $.outboundLocalRequestsWhitelists = outboundLocalRequestsWhitelists;
            return this;
        }

        /**
         * @param outboundLocalRequestsWhitelists Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
         * 
         * @return builder
         * 
         */
        public Builder outboundLocalRequestsWhitelists(List<String> outboundLocalRequestsWhitelists) {
            return outboundLocalRequestsWhitelists(Output.of(outboundLocalRequestsWhitelists));
        }

        /**
         * @param outboundLocalRequestsWhitelists Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
         * 
         * @return builder
         * 
         */
        public Builder outboundLocalRequestsWhitelists(String... outboundLocalRequestsWhitelists) {
            return outboundLocalRequestsWhitelists(List.of(outboundLocalRequestsWhitelists));
        }

        /**
         * @param packageRegistryCleanupPoliciesWorkerCapacity Number of workers assigned to the packages cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder packageRegistryCleanupPoliciesWorkerCapacity(@Nullable Output<Integer> packageRegistryCleanupPoliciesWorkerCapacity) {
            $.packageRegistryCleanupPoliciesWorkerCapacity = packageRegistryCleanupPoliciesWorkerCapacity;
            return this;
        }

        /**
         * @param packageRegistryCleanupPoliciesWorkerCapacity Number of workers assigned to the packages cleanup policies.
         * 
         * @return builder
         * 
         */
        public Builder packageRegistryCleanupPoliciesWorkerCapacity(Integer packageRegistryCleanupPoliciesWorkerCapacity) {
            return packageRegistryCleanupPoliciesWorkerCapacity(Output.of(packageRegistryCleanupPoliciesWorkerCapacity));
        }

        /**
         * @param pagesDomainVerificationEnabled Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder pagesDomainVerificationEnabled(@Nullable Output<Boolean> pagesDomainVerificationEnabled) {
            $.pagesDomainVerificationEnabled = pagesDomainVerificationEnabled;
            return this;
        }

        /**
         * @param pagesDomainVerificationEnabled Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder pagesDomainVerificationEnabled(Boolean pagesDomainVerificationEnabled) {
            return pagesDomainVerificationEnabled(Output.of(pagesDomainVerificationEnabled));
        }

        /**
         * @param passwordAuthenticationEnabledForGit Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder passwordAuthenticationEnabledForGit(@Nullable Output<Boolean> passwordAuthenticationEnabledForGit) {
            $.passwordAuthenticationEnabledForGit = passwordAuthenticationEnabledForGit;
            return this;
        }

        /**
         * @param passwordAuthenticationEnabledForGit Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder passwordAuthenticationEnabledForGit(Boolean passwordAuthenticationEnabledForGit) {
            return passwordAuthenticationEnabledForGit(Output.of(passwordAuthenticationEnabledForGit));
        }

        /**
         * @param passwordAuthenticationEnabledForWeb Enable authentication for the web interface via a GitLab account password. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder passwordAuthenticationEnabledForWeb(@Nullable Output<Boolean> passwordAuthenticationEnabledForWeb) {
            $.passwordAuthenticationEnabledForWeb = passwordAuthenticationEnabledForWeb;
            return this;
        }

        /**
         * @param passwordAuthenticationEnabledForWeb Enable authentication for the web interface via a GitLab account password. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder passwordAuthenticationEnabledForWeb(Boolean passwordAuthenticationEnabledForWeb) {
            return passwordAuthenticationEnabledForWeb(Output.of(passwordAuthenticationEnabledForWeb));
        }

        /**
         * @param passwordLowercaseRequired Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordLowercaseRequired(@Nullable Output<Boolean> passwordLowercaseRequired) {
            $.passwordLowercaseRequired = passwordLowercaseRequired;
            return this;
        }

        /**
         * @param passwordLowercaseRequired Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordLowercaseRequired(Boolean passwordLowercaseRequired) {
            return passwordLowercaseRequired(Output.of(passwordLowercaseRequired));
        }

        /**
         * @param passwordNumberRequired Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordNumberRequired(@Nullable Output<Boolean> passwordNumberRequired) {
            $.passwordNumberRequired = passwordNumberRequired;
            return this;
        }

        /**
         * @param passwordNumberRequired Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordNumberRequired(Boolean passwordNumberRequired) {
            return passwordNumberRequired(Output.of(passwordNumberRequired));
        }

        /**
         * @param passwordSymbolRequired Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordSymbolRequired(@Nullable Output<Boolean> passwordSymbolRequired) {
            $.passwordSymbolRequired = passwordSymbolRequired;
            return this;
        }

        /**
         * @param passwordSymbolRequired Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordSymbolRequired(Boolean passwordSymbolRequired) {
            return passwordSymbolRequired(Output.of(passwordSymbolRequired));
        }

        /**
         * @param passwordUppercaseRequired Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordUppercaseRequired(@Nullable Output<Boolean> passwordUppercaseRequired) {
            $.passwordUppercaseRequired = passwordUppercaseRequired;
            return this;
        }

        /**
         * @param passwordUppercaseRequired Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
         * 
         * @return builder
         * 
         */
        public Builder passwordUppercaseRequired(Boolean passwordUppercaseRequired) {
            return passwordUppercaseRequired(Output.of(passwordUppercaseRequired));
        }

        /**
         * @param performanceBarAllowedGroupPath Path of the group that is allowed to toggle the performance bar.
         * 
         * @return builder
         * 
         */
        public Builder performanceBarAllowedGroupPath(@Nullable Output<String> performanceBarAllowedGroupPath) {
            $.performanceBarAllowedGroupPath = performanceBarAllowedGroupPath;
            return this;
        }

        /**
         * @param performanceBarAllowedGroupPath Path of the group that is allowed to toggle the performance bar.
         * 
         * @return builder
         * 
         */
        public Builder performanceBarAllowedGroupPath(String performanceBarAllowedGroupPath) {
            return performanceBarAllowedGroupPath(Output.of(performanceBarAllowedGroupPath));
        }

        /**
         * @param personalAccessTokenPrefix Prefix for all generated personal access tokens.
         * 
         * @return builder
         * 
         */
        public Builder personalAccessTokenPrefix(@Nullable Output<String> personalAccessTokenPrefix) {
            $.personalAccessTokenPrefix = personalAccessTokenPrefix;
            return this;
        }

        /**
         * @param personalAccessTokenPrefix Prefix for all generated personal access tokens.
         * 
         * @return builder
         * 
         */
        public Builder personalAccessTokenPrefix(String personalAccessTokenPrefix) {
            return personalAccessTokenPrefix(Output.of(personalAccessTokenPrefix));
        }

        /**
         * @param pipelineLimitPerProjectUserSha Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder pipelineLimitPerProjectUserSha(@Nullable Output<Integer> pipelineLimitPerProjectUserSha) {
            $.pipelineLimitPerProjectUserSha = pipelineLimitPerProjectUserSha;
            return this;
        }

        /**
         * @param pipelineLimitPerProjectUserSha Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder pipelineLimitPerProjectUserSha(Integer pipelineLimitPerProjectUserSha) {
            return pipelineLimitPerProjectUserSha(Output.of(pipelineLimitPerProjectUserSha));
        }

        /**
         * @param plantumlEnabled (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder plantumlEnabled(@Nullable Output<Boolean> plantumlEnabled) {
            $.plantumlEnabled = plantumlEnabled;
            return this;
        }

        /**
         * @param plantumlEnabled (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder plantumlEnabled(Boolean plantumlEnabled) {
            return plantumlEnabled(Output.of(plantumlEnabled));
        }

        /**
         * @param plantumlUrl The PlantUML instance URL for integration.
         * 
         * @return builder
         * 
         */
        public Builder plantumlUrl(@Nullable Output<String> plantumlUrl) {
            $.plantumlUrl = plantumlUrl;
            return this;
        }

        /**
         * @param plantumlUrl The PlantUML instance URL for integration.
         * 
         * @return builder
         * 
         */
        public Builder plantumlUrl(String plantumlUrl) {
            return plantumlUrl(Output.of(plantumlUrl));
        }

        /**
         * @param pollingIntervalMultiplier Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
         * 
         * @return builder
         * 
         */
        public Builder pollingIntervalMultiplier(@Nullable Output<Double> pollingIntervalMultiplier) {
            $.pollingIntervalMultiplier = pollingIntervalMultiplier;
            return this;
        }

        /**
         * @param pollingIntervalMultiplier Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
         * 
         * @return builder
         * 
         */
        public Builder pollingIntervalMultiplier(Double pollingIntervalMultiplier) {
            return pollingIntervalMultiplier(Output.of(pollingIntervalMultiplier));
        }

        /**
         * @param projectExportEnabled Enable project export.
         * 
         * @return builder
         * 
         */
        public Builder projectExportEnabled(@Nullable Output<Boolean> projectExportEnabled) {
            $.projectExportEnabled = projectExportEnabled;
            return this;
        }

        /**
         * @param projectExportEnabled Enable project export.
         * 
         * @return builder
         * 
         */
        public Builder projectExportEnabled(Boolean projectExportEnabled) {
            return projectExportEnabled(Output.of(projectExportEnabled));
        }

        /**
         * @param prometheusMetricsEnabled Enable Prometheus metrics.
         * 
         * @return builder
         * 
         */
        public Builder prometheusMetricsEnabled(@Nullable Output<Boolean> prometheusMetricsEnabled) {
            $.prometheusMetricsEnabled = prometheusMetricsEnabled;
            return this;
        }

        /**
         * @param prometheusMetricsEnabled Enable Prometheus metrics.
         * 
         * @return builder
         * 
         */
        public Builder prometheusMetricsEnabled(Boolean prometheusMetricsEnabled) {
            return prometheusMetricsEnabled(Output.of(prometheusMetricsEnabled));
        }

        /**
         * @param protectedCiVariables CI/CD variables are protected by default.
         * 
         * @return builder
         * 
         */
        public Builder protectedCiVariables(@Nullable Output<Boolean> protectedCiVariables) {
            $.protectedCiVariables = protectedCiVariables;
            return this;
        }

        /**
         * @param protectedCiVariables CI/CD variables are protected by default.
         * 
         * @return builder
         * 
         */
        public Builder protectedCiVariables(Boolean protectedCiVariables) {
            return protectedCiVariables(Output.of(protectedCiVariables));
        }

        /**
         * @param pushEventActivitiesLimit Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
         * 
         * @return builder
         * 
         */
        public Builder pushEventActivitiesLimit(@Nullable Output<Integer> pushEventActivitiesLimit) {
            $.pushEventActivitiesLimit = pushEventActivitiesLimit;
            return this;
        }

        /**
         * @param pushEventActivitiesLimit Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
         * 
         * @return builder
         * 
         */
        public Builder pushEventActivitiesLimit(Integer pushEventActivitiesLimit) {
            return pushEventActivitiesLimit(Output.of(pushEventActivitiesLimit));
        }

        /**
         * @param pushEventHooksLimit Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
         * 
         * @return builder
         * 
         */
        public Builder pushEventHooksLimit(@Nullable Output<Integer> pushEventHooksLimit) {
            $.pushEventHooksLimit = pushEventHooksLimit;
            return this;
        }

        /**
         * @param pushEventHooksLimit Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
         * 
         * @return builder
         * 
         */
        public Builder pushEventHooksLimit(Integer pushEventHooksLimit) {
            return pushEventHooksLimit(Output.of(pushEventHooksLimit));
        }

        /**
         * @param pypiPackageRequestsForwarding Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
         * 
         * @return builder
         * 
         */
        public Builder pypiPackageRequestsForwarding(@Nullable Output<Boolean> pypiPackageRequestsForwarding) {
            $.pypiPackageRequestsForwarding = pypiPackageRequestsForwarding;
            return this;
        }

        /**
         * @param pypiPackageRequestsForwarding Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
         * 
         * @return builder
         * 
         */
        public Builder pypiPackageRequestsForwarding(Boolean pypiPackageRequestsForwarding) {
            return pypiPackageRequestsForwarding(Output.of(pypiPackageRequestsForwarding));
        }

        /**
         * @param rateLimitingResponseText When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitingResponseText(@Nullable Output<String> rateLimitingResponseText) {
            $.rateLimitingResponseText = rateLimitingResponseText;
            return this;
        }

        /**
         * @param rateLimitingResponseText When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitingResponseText(String rateLimitingResponseText) {
            return rateLimitingResponseText(Output.of(rateLimitingResponseText));
        }

        /**
         * @param rawBlobRequestLimit Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
         * 
         * @return builder
         * 
         */
        public Builder rawBlobRequestLimit(@Nullable Output<Integer> rawBlobRequestLimit) {
            $.rawBlobRequestLimit = rawBlobRequestLimit;
            return this;
        }

        /**
         * @param rawBlobRequestLimit Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
         * 
         * @return builder
         * 
         */
        public Builder rawBlobRequestLimit(Integer rawBlobRequestLimit) {
            return rawBlobRequestLimit(Output.of(rawBlobRequestLimit));
        }

        /**
         * @param recaptchaEnabled (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
         * 
         * @return builder
         * 
         */
        public Builder recaptchaEnabled(@Nullable Output<Boolean> recaptchaEnabled) {
            $.recaptchaEnabled = recaptchaEnabled;
            return this;
        }

        /**
         * @param recaptchaEnabled (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
         * 
         * @return builder
         * 
         */
        public Builder recaptchaEnabled(Boolean recaptchaEnabled) {
            return recaptchaEnabled(Output.of(recaptchaEnabled));
        }

        /**
         * @param recaptchaPrivateKey Private key for reCAPTCHA.
         * 
         * @return builder
         * 
         */
        public Builder recaptchaPrivateKey(@Nullable Output<String> recaptchaPrivateKey) {
            $.recaptchaPrivateKey = recaptchaPrivateKey;
            return this;
        }

        /**
         * @param recaptchaPrivateKey Private key for reCAPTCHA.
         * 
         * @return builder
         * 
         */
        public Builder recaptchaPrivateKey(String recaptchaPrivateKey) {
            return recaptchaPrivateKey(Output.of(recaptchaPrivateKey));
        }

        /**
         * @param recaptchaSiteKey Site key for reCAPTCHA.
         * 
         * @return builder
         * 
         */
        public Builder recaptchaSiteKey(@Nullable Output<String> recaptchaSiteKey) {
            $.recaptchaSiteKey = recaptchaSiteKey;
            return this;
        }

        /**
         * @param recaptchaSiteKey Site key for reCAPTCHA.
         * 
         * @return builder
         * 
         */
        public Builder recaptchaSiteKey(String recaptchaSiteKey) {
            return recaptchaSiteKey(Output.of(recaptchaSiteKey));
        }

        /**
         * @param receiveMaxInputSize Maximum push size (MB).
         * 
         * @return builder
         * 
         */
        public Builder receiveMaxInputSize(@Nullable Output<Integer> receiveMaxInputSize) {
            $.receiveMaxInputSize = receiveMaxInputSize;
            return this;
        }

        /**
         * @param receiveMaxInputSize Maximum push size (MB).
         * 
         * @return builder
         * 
         */
        public Builder receiveMaxInputSize(Integer receiveMaxInputSize) {
            return receiveMaxInputSize(Output.of(receiveMaxInputSize));
        }

        /**
         * @param repositoryChecksEnabled GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
         * 
         * @return builder
         * 
         */
        public Builder repositoryChecksEnabled(@Nullable Output<Boolean> repositoryChecksEnabled) {
            $.repositoryChecksEnabled = repositoryChecksEnabled;
            return this;
        }

        /**
         * @param repositoryChecksEnabled GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
         * 
         * @return builder
         * 
         */
        public Builder repositoryChecksEnabled(Boolean repositoryChecksEnabled) {
            return repositoryChecksEnabled(Output.of(repositoryChecksEnabled));
        }

        /**
         * @param repositorySizeLimit Size limit per repository (MB).
         * 
         * @return builder
         * 
         */
        public Builder repositorySizeLimit(@Nullable Output<Integer> repositorySizeLimit) {
            $.repositorySizeLimit = repositorySizeLimit;
            return this;
        }

        /**
         * @param repositorySizeLimit Size limit per repository (MB).
         * 
         * @return builder
         * 
         */
        public Builder repositorySizeLimit(Integer repositorySizeLimit) {
            return repositorySizeLimit(Output.of(repositorySizeLimit));
        }

        /**
         * @param repositoryStorages (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
         * 
         * @return builder
         * 
         */
        public Builder repositoryStorages(@Nullable Output<List<String>> repositoryStorages) {
            $.repositoryStorages = repositoryStorages;
            return this;
        }

        /**
         * @param repositoryStorages (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
         * 
         * @return builder
         * 
         */
        public Builder repositoryStorages(List<String> repositoryStorages) {
            return repositoryStorages(Output.of(repositoryStorages));
        }

        /**
         * @param repositoryStorages (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
         * 
         * @return builder
         * 
         */
        public Builder repositoryStorages(String... repositoryStorages) {
            return repositoryStorages(List.of(repositoryStorages));
        }

        /**
         * @param repositoryStoragesWeighted (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
         * 
         * @return builder
         * 
         */
        public Builder repositoryStoragesWeighted(@Nullable Output<Map<String,Integer>> repositoryStoragesWeighted) {
            $.repositoryStoragesWeighted = repositoryStoragesWeighted;
            return this;
        }

        /**
         * @param repositoryStoragesWeighted (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
         * 
         * @return builder
         * 
         */
        public Builder repositoryStoragesWeighted(Map<String,Integer> repositoryStoragesWeighted) {
            return repositoryStoragesWeighted(Output.of(repositoryStoragesWeighted));
        }

        /**
         * @param requireAdminApprovalAfterUserSignup When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
         * 
         * @return builder
         * 
         */
        public Builder requireAdminApprovalAfterUserSignup(@Nullable Output<Boolean> requireAdminApprovalAfterUserSignup) {
            $.requireAdminApprovalAfterUserSignup = requireAdminApprovalAfterUserSignup;
            return this;
        }

        /**
         * @param requireAdminApprovalAfterUserSignup When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
         * 
         * @return builder
         * 
         */
        public Builder requireAdminApprovalAfterUserSignup(Boolean requireAdminApprovalAfterUserSignup) {
            return requireAdminApprovalAfterUserSignup(Output.of(requireAdminApprovalAfterUserSignup));
        }

        /**
         * @param requireTwoFactorAuthentication (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
         * 
         * @return builder
         * 
         */
        public Builder requireTwoFactorAuthentication(@Nullable Output<Boolean> requireTwoFactorAuthentication) {
            $.requireTwoFactorAuthentication = requireTwoFactorAuthentication;
            return this;
        }

        /**
         * @param requireTwoFactorAuthentication (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
         * 
         * @return builder
         * 
         */
        public Builder requireTwoFactorAuthentication(Boolean requireTwoFactorAuthentication) {
            return requireTwoFactorAuthentication(Output.of(requireTwoFactorAuthentication));
        }

        /**
         * @param restrictedVisibilityLevels Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
         * 
         * @return builder
         * 
         */
        public Builder restrictedVisibilityLevels(@Nullable Output<List<String>> restrictedVisibilityLevels) {
            $.restrictedVisibilityLevels = restrictedVisibilityLevels;
            return this;
        }

        /**
         * @param restrictedVisibilityLevels Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
         * 
         * @return builder
         * 
         */
        public Builder restrictedVisibilityLevels(List<String> restrictedVisibilityLevels) {
            return restrictedVisibilityLevels(Output.of(restrictedVisibilityLevels));
        }

        /**
         * @param restrictedVisibilityLevels Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
         * 
         * @return builder
         * 
         */
        public Builder restrictedVisibilityLevels(String... restrictedVisibilityLevels) {
            return restrictedVisibilityLevels(List.of(restrictedVisibilityLevels));
        }

        /**
         * @param rsaKeyRestriction The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
         * 
         * @return builder
         * 
         */
        public Builder rsaKeyRestriction(@Nullable Output<Integer> rsaKeyRestriction) {
            $.rsaKeyRestriction = rsaKeyRestriction;
            return this;
        }

        /**
         * @param rsaKeyRestriction The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
         * 
         * @return builder
         * 
         */
        public Builder rsaKeyRestriction(Integer rsaKeyRestriction) {
            return rsaKeyRestriction(Output.of(rsaKeyRestriction));
        }

        /**
         * @param searchRateLimit Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
         * 
         * @return builder
         * 
         */
        public Builder searchRateLimit(@Nullable Output<Integer> searchRateLimit) {
            $.searchRateLimit = searchRateLimit;
            return this;
        }

        /**
         * @param searchRateLimit Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
         * 
         * @return builder
         * 
         */
        public Builder searchRateLimit(Integer searchRateLimit) {
            return searchRateLimit(Output.of(searchRateLimit));
        }

        /**
         * @param searchRateLimitUnauthenticated Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
         * 
         * @return builder
         * 
         */
        public Builder searchRateLimitUnauthenticated(@Nullable Output<Integer> searchRateLimitUnauthenticated) {
            $.searchRateLimitUnauthenticated = searchRateLimitUnauthenticated;
            return this;
        }

        /**
         * @param searchRateLimitUnauthenticated Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
         * 
         * @return builder
         * 
         */
        public Builder searchRateLimitUnauthenticated(Integer searchRateLimitUnauthenticated) {
            return searchRateLimitUnauthenticated(Output.of(searchRateLimitUnauthenticated));
        }

        /**
         * @param sendUserConfirmationEmail Send confirmation email on sign-up.
         * 
         * @return builder
         * 
         */
        public Builder sendUserConfirmationEmail(@Nullable Output<Boolean> sendUserConfirmationEmail) {
            $.sendUserConfirmationEmail = sendUserConfirmationEmail;
            return this;
        }

        /**
         * @param sendUserConfirmationEmail Send confirmation email on sign-up.
         * 
         * @return builder
         * 
         */
        public Builder sendUserConfirmationEmail(Boolean sendUserConfirmationEmail) {
            return sendUserConfirmationEmail(Output.of(sendUserConfirmationEmail));
        }

        /**
         * @param sessionExpireDelay Session duration in minutes. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder sessionExpireDelay(@Nullable Output<Integer> sessionExpireDelay) {
            $.sessionExpireDelay = sessionExpireDelay;
            return this;
        }

        /**
         * @param sessionExpireDelay Session duration in minutes. GitLab restart is required to apply changes.
         * 
         * @return builder
         * 
         */
        public Builder sessionExpireDelay(Integer sessionExpireDelay) {
            return sessionExpireDelay(Output.of(sessionExpireDelay));
        }

        /**
         * @param sharedRunnersEnabled (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersEnabled(@Nullable Output<Boolean> sharedRunnersEnabled) {
            $.sharedRunnersEnabled = sharedRunnersEnabled;
            return this;
        }

        /**
         * @param sharedRunnersEnabled (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersEnabled(Boolean sharedRunnersEnabled) {
            return sharedRunnersEnabled(Output.of(sharedRunnersEnabled));
        }

        /**
         * @param sharedRunnersMinutes Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersMinutes(@Nullable Output<Integer> sharedRunnersMinutes) {
            $.sharedRunnersMinutes = sharedRunnersMinutes;
            return this;
        }

        /**
         * @param sharedRunnersMinutes Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersMinutes(Integer sharedRunnersMinutes) {
            return sharedRunnersMinutes(Output.of(sharedRunnersMinutes));
        }

        /**
         * @param sharedRunnersText Shared runners text.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersText(@Nullable Output<String> sharedRunnersText) {
            $.sharedRunnersText = sharedRunnersText;
            return this;
        }

        /**
         * @param sharedRunnersText Shared runners text.
         * 
         * @return builder
         * 
         */
        public Builder sharedRunnersText(String sharedRunnersText) {
            return sharedRunnersText(Output.of(sharedRunnersText));
        }

        /**
         * @param sidekiqJobLimiterCompressionThresholdBytes The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
         * 
         * @return builder
         * 
         */
        public Builder sidekiqJobLimiterCompressionThresholdBytes(@Nullable Output<Integer> sidekiqJobLimiterCompressionThresholdBytes) {
            $.sidekiqJobLimiterCompressionThresholdBytes = sidekiqJobLimiterCompressionThresholdBytes;
            return this;
        }

        /**
         * @param sidekiqJobLimiterCompressionThresholdBytes The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
         * 
         * @return builder
         * 
         */
        public Builder sidekiqJobLimiterCompressionThresholdBytes(Integer sidekiqJobLimiterCompressionThresholdBytes) {
            return sidekiqJobLimiterCompressionThresholdBytes(Output.of(sidekiqJobLimiterCompressionThresholdBytes));
        }

        /**
         * @param sidekiqJobLimiterLimitBytes The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
         * 
         * @return builder
         * 
         */
        public Builder sidekiqJobLimiterLimitBytes(@Nullable Output<Integer> sidekiqJobLimiterLimitBytes) {
            $.sidekiqJobLimiterLimitBytes = sidekiqJobLimiterLimitBytes;
            return this;
        }

        /**
         * @param sidekiqJobLimiterLimitBytes The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
         * 
         * @return builder
         * 
         */
        public Builder sidekiqJobLimiterLimitBytes(Integer sidekiqJobLimiterLimitBytes) {
            return sidekiqJobLimiterLimitBytes(Output.of(sidekiqJobLimiterLimitBytes));
        }

        /**
         * @param sidekiqJobLimiterMode track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
         * 
         * @return builder
         * 
         */
        public Builder sidekiqJobLimiterMode(@Nullable Output<String> sidekiqJobLimiterMode) {
            $.sidekiqJobLimiterMode = sidekiqJobLimiterMode;
            return this;
        }

        /**
         * @param sidekiqJobLimiterMode track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
         * 
         * @return builder
         * 
         */
        public Builder sidekiqJobLimiterMode(String sidekiqJobLimiterMode) {
            return sidekiqJobLimiterMode(Output.of(sidekiqJobLimiterMode));
        }

        /**
         * @param signInText Text on the login page.
         * 
         * @return builder
         * 
         */
        public Builder signInText(@Nullable Output<String> signInText) {
            $.signInText = signInText;
            return this;
        }

        /**
         * @param signInText Text on the login page.
         * 
         * @return builder
         * 
         */
        public Builder signInText(String signInText) {
            return signInText(Output.of(signInText));
        }

        /**
         * @param signupEnabled Enable registration. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder signupEnabled(@Nullable Output<Boolean> signupEnabled) {
            $.signupEnabled = signupEnabled;
            return this;
        }

        /**
         * @param signupEnabled Enable registration. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder signupEnabled(Boolean signupEnabled) {
            return signupEnabled(Output.of(signupEnabled));
        }

        /**
         * @param slackAppEnabled (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppEnabled(@Nullable Output<Boolean> slackAppEnabled) {
            $.slackAppEnabled = slackAppEnabled;
            return this;
        }

        /**
         * @param slackAppEnabled (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppEnabled(Boolean slackAppEnabled) {
            return slackAppEnabled(Output.of(slackAppEnabled));
        }

        /**
         * @param slackAppId The app ID of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppId(@Nullable Output<String> slackAppId) {
            $.slackAppId = slackAppId;
            return this;
        }

        /**
         * @param slackAppId The app ID of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppId(String slackAppId) {
            return slackAppId(Output.of(slackAppId));
        }

        /**
         * @param slackAppSecret The app secret of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppSecret(@Nullable Output<String> slackAppSecret) {
            $.slackAppSecret = slackAppSecret;
            return this;
        }

        /**
         * @param slackAppSecret The app secret of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppSecret(String slackAppSecret) {
            return slackAppSecret(Output.of(slackAppSecret));
        }

        /**
         * @param slackAppSigningSecret The signing secret of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppSigningSecret(@Nullable Output<String> slackAppSigningSecret) {
            $.slackAppSigningSecret = slackAppSigningSecret;
            return this;
        }

        /**
         * @param slackAppSigningSecret The signing secret of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppSigningSecret(String slackAppSigningSecret) {
            return slackAppSigningSecret(Output.of(slackAppSigningSecret));
        }

        /**
         * @param slackAppVerificationToken The verification token of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppVerificationToken(@Nullable Output<String> slackAppVerificationToken) {
            $.slackAppVerificationToken = slackAppVerificationToken;
            return this;
        }

        /**
         * @param slackAppVerificationToken The verification token of the Slack-app.
         * 
         * @return builder
         * 
         */
        public Builder slackAppVerificationToken(String slackAppVerificationToken) {
            return slackAppVerificationToken(Output.of(slackAppVerificationToken));
        }

        /**
         * @param snippetSizeLimit Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
         * 
         * @return builder
         * 
         */
        public Builder snippetSizeLimit(@Nullable Output<Integer> snippetSizeLimit) {
            $.snippetSizeLimit = snippetSizeLimit;
            return this;
        }

        /**
         * @param snippetSizeLimit Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
         * 
         * @return builder
         * 
         */
        public Builder snippetSizeLimit(Integer snippetSizeLimit) {
            return snippetSizeLimit(Output.of(snippetSizeLimit));
        }

        /**
         * @param snowplowAppId The Snowplow site name / application ID. (for example, gitlab)
         * 
         * @return builder
         * 
         */
        public Builder snowplowAppId(@Nullable Output<String> snowplowAppId) {
            $.snowplowAppId = snowplowAppId;
            return this;
        }

        /**
         * @param snowplowAppId The Snowplow site name / application ID. (for example, gitlab)
         * 
         * @return builder
         * 
         */
        public Builder snowplowAppId(String snowplowAppId) {
            return snowplowAppId(Output.of(snowplowAppId));
        }

        /**
         * @param snowplowCollectorHostname The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
         * 
         * @return builder
         * 
         */
        public Builder snowplowCollectorHostname(@Nullable Output<String> snowplowCollectorHostname) {
            $.snowplowCollectorHostname = snowplowCollectorHostname;
            return this;
        }

        /**
         * @param snowplowCollectorHostname The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
         * 
         * @return builder
         * 
         */
        public Builder snowplowCollectorHostname(String snowplowCollectorHostname) {
            return snowplowCollectorHostname(Output.of(snowplowCollectorHostname));
        }

        /**
         * @param snowplowCookieDomain The Snowplow cookie domain. (for example, .gitlab.com)
         * 
         * @return builder
         * 
         */
        public Builder snowplowCookieDomain(@Nullable Output<String> snowplowCookieDomain) {
            $.snowplowCookieDomain = snowplowCookieDomain;
            return this;
        }

        /**
         * @param snowplowCookieDomain The Snowplow cookie domain. (for example, .gitlab.com)
         * 
         * @return builder
         * 
         */
        public Builder snowplowCookieDomain(String snowplowCookieDomain) {
            return snowplowCookieDomain(Output.of(snowplowCookieDomain));
        }

        /**
         * @param snowplowEnabled Enable snowplow tracking.
         * 
         * @return builder
         * 
         */
        public Builder snowplowEnabled(@Nullable Output<Boolean> snowplowEnabled) {
            $.snowplowEnabled = snowplowEnabled;
            return this;
        }

        /**
         * @param snowplowEnabled Enable snowplow tracking.
         * 
         * @return builder
         * 
         */
        public Builder snowplowEnabled(Boolean snowplowEnabled) {
            return snowplowEnabled(Output.of(snowplowEnabled));
        }

        /**
         * @param sourcegraphEnabled Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
         * 
         * @return builder
         * 
         */
        public Builder sourcegraphEnabled(@Nullable Output<Boolean> sourcegraphEnabled) {
            $.sourcegraphEnabled = sourcegraphEnabled;
            return this;
        }

        /**
         * @param sourcegraphEnabled Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
         * 
         * @return builder
         * 
         */
        public Builder sourcegraphEnabled(Boolean sourcegraphEnabled) {
            return sourcegraphEnabled(Output.of(sourcegraphEnabled));
        }

        /**
         * @param sourcegraphPublicOnly Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder sourcegraphPublicOnly(@Nullable Output<Boolean> sourcegraphPublicOnly) {
            $.sourcegraphPublicOnly = sourcegraphPublicOnly;
            return this;
        }

        /**
         * @param sourcegraphPublicOnly Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder sourcegraphPublicOnly(Boolean sourcegraphPublicOnly) {
            return sourcegraphPublicOnly(Output.of(sourcegraphPublicOnly));
        }

        /**
         * @param sourcegraphUrl The Sourcegraph instance URL for integration.
         * 
         * @return builder
         * 
         */
        public Builder sourcegraphUrl(@Nullable Output<String> sourcegraphUrl) {
            $.sourcegraphUrl = sourcegraphUrl;
            return this;
        }

        /**
         * @param sourcegraphUrl The Sourcegraph instance URL for integration.
         * 
         * @return builder
         * 
         */
        public Builder sourcegraphUrl(String sourcegraphUrl) {
            return sourcegraphUrl(Output.of(sourcegraphUrl));
        }

        /**
         * @param spamCheckApiKey API key used by GitLab for accessing the Spam Check service endpoint.
         * 
         * @return builder
         * 
         */
        public Builder spamCheckApiKey(@Nullable Output<String> spamCheckApiKey) {
            $.spamCheckApiKey = spamCheckApiKey;
            return this;
        }

        /**
         * @param spamCheckApiKey API key used by GitLab for accessing the Spam Check service endpoint.
         * 
         * @return builder
         * 
         */
        public Builder spamCheckApiKey(String spamCheckApiKey) {
            return spamCheckApiKey(Output.of(spamCheckApiKey));
        }

        /**
         * @param spamCheckEndpointEnabled Enables spam checking using external Spam Check API endpoint. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder spamCheckEndpointEnabled(@Nullable Output<Boolean> spamCheckEndpointEnabled) {
            $.spamCheckEndpointEnabled = spamCheckEndpointEnabled;
            return this;
        }

        /**
         * @param spamCheckEndpointEnabled Enables spam checking using external Spam Check API endpoint. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder spamCheckEndpointEnabled(Boolean spamCheckEndpointEnabled) {
            return spamCheckEndpointEnabled(Output.of(spamCheckEndpointEnabled));
        }

        /**
         * @param spamCheckEndpointUrl URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder spamCheckEndpointUrl(@Nullable Output<String> spamCheckEndpointUrl) {
            $.spamCheckEndpointUrl = spamCheckEndpointUrl;
            return this;
        }

        /**
         * @param spamCheckEndpointUrl URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder spamCheckEndpointUrl(String spamCheckEndpointUrl) {
            return spamCheckEndpointUrl(Output.of(spamCheckEndpointUrl));
        }

        /**
         * @param suggestPipelineEnabled Enable pipeline suggestion banner.
         * 
         * @return builder
         * 
         */
        public Builder suggestPipelineEnabled(@Nullable Output<Boolean> suggestPipelineEnabled) {
            $.suggestPipelineEnabled = suggestPipelineEnabled;
            return this;
        }

        /**
         * @param suggestPipelineEnabled Enable pipeline suggestion banner.
         * 
         * @return builder
         * 
         */
        public Builder suggestPipelineEnabled(Boolean suggestPipelineEnabled) {
            return suggestPipelineEnabled(Output.of(suggestPipelineEnabled));
        }

        /**
         * @param terminalMaxSessionTime Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
         * 
         * @return builder
         * 
         */
        public Builder terminalMaxSessionTime(@Nullable Output<Integer> terminalMaxSessionTime) {
            $.terminalMaxSessionTime = terminalMaxSessionTime;
            return this;
        }

        /**
         * @param terminalMaxSessionTime Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
         * 
         * @return builder
         * 
         */
        public Builder terminalMaxSessionTime(Integer terminalMaxSessionTime) {
            return terminalMaxSessionTime(Output.of(terminalMaxSessionTime));
        }

        /**
         * @param terms (Required by: enforce_terms) Markdown content for the ToS.
         * 
         * @return builder
         * 
         */
        public Builder terms(@Nullable Output<String> terms) {
            $.terms = terms;
            return this;
        }

        /**
         * @param terms (Required by: enforce_terms) Markdown content for the ToS.
         * 
         * @return builder
         * 
         */
        public Builder terms(String terms) {
            return terms(Output.of(terms));
        }

        /**
         * @param throttleAuthenticatedApiEnabled (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedApiEnabled(@Nullable Output<Boolean> throttleAuthenticatedApiEnabled) {
            $.throttleAuthenticatedApiEnabled = throttleAuthenticatedApiEnabled;
            return this;
        }

        /**
         * @param throttleAuthenticatedApiEnabled (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedApiEnabled(Boolean throttleAuthenticatedApiEnabled) {
            return throttleAuthenticatedApiEnabled(Output.of(throttleAuthenticatedApiEnabled));
        }

        /**
         * @param throttleAuthenticatedApiPeriodInSeconds Rate limit period (in seconds).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedApiPeriodInSeconds(@Nullable Output<Integer> throttleAuthenticatedApiPeriodInSeconds) {
            $.throttleAuthenticatedApiPeriodInSeconds = throttleAuthenticatedApiPeriodInSeconds;
            return this;
        }

        /**
         * @param throttleAuthenticatedApiPeriodInSeconds Rate limit period (in seconds).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedApiPeriodInSeconds(Integer throttleAuthenticatedApiPeriodInSeconds) {
            return throttleAuthenticatedApiPeriodInSeconds(Output.of(throttleAuthenticatedApiPeriodInSeconds));
        }

        /**
         * @param throttleAuthenticatedApiRequestsPerPeriod Maximum requests per period per user.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedApiRequestsPerPeriod(@Nullable Output<Integer> throttleAuthenticatedApiRequestsPerPeriod) {
            $.throttleAuthenticatedApiRequestsPerPeriod = throttleAuthenticatedApiRequestsPerPeriod;
            return this;
        }

        /**
         * @param throttleAuthenticatedApiRequestsPerPeriod Maximum requests per period per user.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedApiRequestsPerPeriod(Integer throttleAuthenticatedApiRequestsPerPeriod) {
            return throttleAuthenticatedApiRequestsPerPeriod(Output.of(throttleAuthenticatedApiRequestsPerPeriod));
        }

        /**
         * @param throttleAuthenticatedPackagesApiEnabled (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedPackagesApiEnabled(@Nullable Output<Boolean> throttleAuthenticatedPackagesApiEnabled) {
            $.throttleAuthenticatedPackagesApiEnabled = throttleAuthenticatedPackagesApiEnabled;
            return this;
        }

        /**
         * @param throttleAuthenticatedPackagesApiEnabled (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedPackagesApiEnabled(Boolean throttleAuthenticatedPackagesApiEnabled) {
            return throttleAuthenticatedPackagesApiEnabled(Output.of(throttleAuthenticatedPackagesApiEnabled));
        }

        /**
         * @param throttleAuthenticatedPackagesApiPeriodInSeconds Rate limit period (in seconds). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedPackagesApiPeriodInSeconds(@Nullable Output<Integer> throttleAuthenticatedPackagesApiPeriodInSeconds) {
            $.throttleAuthenticatedPackagesApiPeriodInSeconds = throttleAuthenticatedPackagesApiPeriodInSeconds;
            return this;
        }

        /**
         * @param throttleAuthenticatedPackagesApiPeriodInSeconds Rate limit period (in seconds). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedPackagesApiPeriodInSeconds(Integer throttleAuthenticatedPackagesApiPeriodInSeconds) {
            return throttleAuthenticatedPackagesApiPeriodInSeconds(Output.of(throttleAuthenticatedPackagesApiPeriodInSeconds));
        }

        /**
         * @param throttleAuthenticatedPackagesApiRequestsPerPeriod Maximum requests per period per user. View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedPackagesApiRequestsPerPeriod(@Nullable Output<Integer> throttleAuthenticatedPackagesApiRequestsPerPeriod) {
            $.throttleAuthenticatedPackagesApiRequestsPerPeriod = throttleAuthenticatedPackagesApiRequestsPerPeriod;
            return this;
        }

        /**
         * @param throttleAuthenticatedPackagesApiRequestsPerPeriod Maximum requests per period per user. View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedPackagesApiRequestsPerPeriod(Integer throttleAuthenticatedPackagesApiRequestsPerPeriod) {
            return throttleAuthenticatedPackagesApiRequestsPerPeriod(Output.of(throttleAuthenticatedPackagesApiRequestsPerPeriod));
        }

        /**
         * @param throttleAuthenticatedWebEnabled (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedWebEnabled(@Nullable Output<Boolean> throttleAuthenticatedWebEnabled) {
            $.throttleAuthenticatedWebEnabled = throttleAuthenticatedWebEnabled;
            return this;
        }

        /**
         * @param throttleAuthenticatedWebEnabled (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedWebEnabled(Boolean throttleAuthenticatedWebEnabled) {
            return throttleAuthenticatedWebEnabled(Output.of(throttleAuthenticatedWebEnabled));
        }

        /**
         * @param throttleAuthenticatedWebPeriodInSeconds Rate limit period (in seconds).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedWebPeriodInSeconds(@Nullable Output<Integer> throttleAuthenticatedWebPeriodInSeconds) {
            $.throttleAuthenticatedWebPeriodInSeconds = throttleAuthenticatedWebPeriodInSeconds;
            return this;
        }

        /**
         * @param throttleAuthenticatedWebPeriodInSeconds Rate limit period (in seconds).
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedWebPeriodInSeconds(Integer throttleAuthenticatedWebPeriodInSeconds) {
            return throttleAuthenticatedWebPeriodInSeconds(Output.of(throttleAuthenticatedWebPeriodInSeconds));
        }

        /**
         * @param throttleAuthenticatedWebRequestsPerPeriod Maximum requests per period per user.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedWebRequestsPerPeriod(@Nullable Output<Integer> throttleAuthenticatedWebRequestsPerPeriod) {
            $.throttleAuthenticatedWebRequestsPerPeriod = throttleAuthenticatedWebRequestsPerPeriod;
            return this;
        }

        /**
         * @param throttleAuthenticatedWebRequestsPerPeriod Maximum requests per period per user.
         * 
         * @return builder
         * 
         */
        public Builder throttleAuthenticatedWebRequestsPerPeriod(Integer throttleAuthenticatedWebRequestsPerPeriod) {
            return throttleAuthenticatedWebRequestsPerPeriod(Output.of(throttleAuthenticatedWebRequestsPerPeriod));
        }

        /**
         * @param throttleUnauthenticatedApiEnabled (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedApiEnabled(@Nullable Output<Boolean> throttleUnauthenticatedApiEnabled) {
            $.throttleUnauthenticatedApiEnabled = throttleUnauthenticatedApiEnabled;
            return this;
        }

        /**
         * @param throttleUnauthenticatedApiEnabled (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedApiEnabled(Boolean throttleUnauthenticatedApiEnabled) {
            return throttleUnauthenticatedApiEnabled(Output.of(throttleUnauthenticatedApiEnabled));
        }

        /**
         * @param throttleUnauthenticatedApiPeriodInSeconds Rate limit period in seconds.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedApiPeriodInSeconds(@Nullable Output<Integer> throttleUnauthenticatedApiPeriodInSeconds) {
            $.throttleUnauthenticatedApiPeriodInSeconds = throttleUnauthenticatedApiPeriodInSeconds;
            return this;
        }

        /**
         * @param throttleUnauthenticatedApiPeriodInSeconds Rate limit period in seconds.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedApiPeriodInSeconds(Integer throttleUnauthenticatedApiPeriodInSeconds) {
            return throttleUnauthenticatedApiPeriodInSeconds(Output.of(throttleUnauthenticatedApiPeriodInSeconds));
        }

        /**
         * @param throttleUnauthenticatedApiRequestsPerPeriod Max requests per period per IP.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedApiRequestsPerPeriod(@Nullable Output<Integer> throttleUnauthenticatedApiRequestsPerPeriod) {
            $.throttleUnauthenticatedApiRequestsPerPeriod = throttleUnauthenticatedApiRequestsPerPeriod;
            return this;
        }

        /**
         * @param throttleUnauthenticatedApiRequestsPerPeriod Max requests per period per IP.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedApiRequestsPerPeriod(Integer throttleUnauthenticatedApiRequestsPerPeriod) {
            return throttleUnauthenticatedApiRequestsPerPeriod(Output.of(throttleUnauthenticatedApiRequestsPerPeriod));
        }

        /**
         * @param throttleUnauthenticatedPackagesApiEnabled (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedPackagesApiEnabled(@Nullable Output<Boolean> throttleUnauthenticatedPackagesApiEnabled) {
            $.throttleUnauthenticatedPackagesApiEnabled = throttleUnauthenticatedPackagesApiEnabled;
            return this;
        }

        /**
         * @param throttleUnauthenticatedPackagesApiEnabled (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedPackagesApiEnabled(Boolean throttleUnauthenticatedPackagesApiEnabled) {
            return throttleUnauthenticatedPackagesApiEnabled(Output.of(throttleUnauthenticatedPackagesApiEnabled));
        }

        /**
         * @param throttleUnauthenticatedPackagesApiPeriodInSeconds Rate limit period (in seconds). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedPackagesApiPeriodInSeconds(@Nullable Output<Integer> throttleUnauthenticatedPackagesApiPeriodInSeconds) {
            $.throttleUnauthenticatedPackagesApiPeriodInSeconds = throttleUnauthenticatedPackagesApiPeriodInSeconds;
            return this;
        }

        /**
         * @param throttleUnauthenticatedPackagesApiPeriodInSeconds Rate limit period (in seconds). View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedPackagesApiPeriodInSeconds(Integer throttleUnauthenticatedPackagesApiPeriodInSeconds) {
            return throttleUnauthenticatedPackagesApiPeriodInSeconds(Output.of(throttleUnauthenticatedPackagesApiPeriodInSeconds));
        }

        /**
         * @param throttleUnauthenticatedPackagesApiRequestsPerPeriod Maximum requests per period per user. View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedPackagesApiRequestsPerPeriod(@Nullable Output<Integer> throttleUnauthenticatedPackagesApiRequestsPerPeriod) {
            $.throttleUnauthenticatedPackagesApiRequestsPerPeriod = throttleUnauthenticatedPackagesApiRequestsPerPeriod;
            return this;
        }

        /**
         * @param throttleUnauthenticatedPackagesApiRequestsPerPeriod Maximum requests per period per user. View Package Registry rate limits for more details.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedPackagesApiRequestsPerPeriod(Integer throttleUnauthenticatedPackagesApiRequestsPerPeriod) {
            return throttleUnauthenticatedPackagesApiRequestsPerPeriod(Output.of(throttleUnauthenticatedPackagesApiRequestsPerPeriod));
        }

        /**
         * @param throttleUnauthenticatedWebEnabled (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedWebEnabled(@Nullable Output<Boolean> throttleUnauthenticatedWebEnabled) {
            $.throttleUnauthenticatedWebEnabled = throttleUnauthenticatedWebEnabled;
            return this;
        }

        /**
         * @param throttleUnauthenticatedWebEnabled (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedWebEnabled(Boolean throttleUnauthenticatedWebEnabled) {
            return throttleUnauthenticatedWebEnabled(Output.of(throttleUnauthenticatedWebEnabled));
        }

        /**
         * @param throttleUnauthenticatedWebPeriodInSeconds Rate limit period in seconds.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedWebPeriodInSeconds(@Nullable Output<Integer> throttleUnauthenticatedWebPeriodInSeconds) {
            $.throttleUnauthenticatedWebPeriodInSeconds = throttleUnauthenticatedWebPeriodInSeconds;
            return this;
        }

        /**
         * @param throttleUnauthenticatedWebPeriodInSeconds Rate limit period in seconds.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedWebPeriodInSeconds(Integer throttleUnauthenticatedWebPeriodInSeconds) {
            return throttleUnauthenticatedWebPeriodInSeconds(Output.of(throttleUnauthenticatedWebPeriodInSeconds));
        }

        /**
         * @param throttleUnauthenticatedWebRequestsPerPeriod Max requests per period per IP.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedWebRequestsPerPeriod(@Nullable Output<Integer> throttleUnauthenticatedWebRequestsPerPeriod) {
            $.throttleUnauthenticatedWebRequestsPerPeriod = throttleUnauthenticatedWebRequestsPerPeriod;
            return this;
        }

        /**
         * @param throttleUnauthenticatedWebRequestsPerPeriod Max requests per period per IP.
         * 
         * @return builder
         * 
         */
        public Builder throttleUnauthenticatedWebRequestsPerPeriod(Integer throttleUnauthenticatedWebRequestsPerPeriod) {
            return throttleUnauthenticatedWebRequestsPerPeriod(Output.of(throttleUnauthenticatedWebRequestsPerPeriod));
        }

        /**
         * @param timeTrackingLimitToHours Limit display of time tracking units to hours. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder timeTrackingLimitToHours(@Nullable Output<Boolean> timeTrackingLimitToHours) {
            $.timeTrackingLimitToHours = timeTrackingLimitToHours;
            return this;
        }

        /**
         * @param timeTrackingLimitToHours Limit display of time tracking units to hours. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder timeTrackingLimitToHours(Boolean timeTrackingLimitToHours) {
            return timeTrackingLimitToHours(Output.of(timeTrackingLimitToHours));
        }

        /**
         * @param twoFactorGracePeriod Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorGracePeriod(@Nullable Output<Integer> twoFactorGracePeriod) {
            $.twoFactorGracePeriod = twoFactorGracePeriod;
            return this;
        }

        /**
         * @param twoFactorGracePeriod Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorGracePeriod(Integer twoFactorGracePeriod) {
            return twoFactorGracePeriod(Output.of(twoFactorGracePeriod));
        }

        /**
         * @param uniqueIpsLimitEnabled (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
         * 
         * @return builder
         * 
         */
        public Builder uniqueIpsLimitEnabled(@Nullable Output<Boolean> uniqueIpsLimitEnabled) {
            $.uniqueIpsLimitEnabled = uniqueIpsLimitEnabled;
            return this;
        }

        /**
         * @param uniqueIpsLimitEnabled (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
         * 
         * @return builder
         * 
         */
        public Builder uniqueIpsLimitEnabled(Boolean uniqueIpsLimitEnabled) {
            return uniqueIpsLimitEnabled(Output.of(uniqueIpsLimitEnabled));
        }

        /**
         * @param uniqueIpsLimitPerUser Maximum number of IPs per user.
         * 
         * @return builder
         * 
         */
        public Builder uniqueIpsLimitPerUser(@Nullable Output<Integer> uniqueIpsLimitPerUser) {
            $.uniqueIpsLimitPerUser = uniqueIpsLimitPerUser;
            return this;
        }

        /**
         * @param uniqueIpsLimitPerUser Maximum number of IPs per user.
         * 
         * @return builder
         * 
         */
        public Builder uniqueIpsLimitPerUser(Integer uniqueIpsLimitPerUser) {
            return uniqueIpsLimitPerUser(Output.of(uniqueIpsLimitPerUser));
        }

        /**
         * @param uniqueIpsLimitTimeWindow How many seconds an IP is counted towards the limit.
         * 
         * @return builder
         * 
         */
        public Builder uniqueIpsLimitTimeWindow(@Nullable Output<Integer> uniqueIpsLimitTimeWindow) {
            $.uniqueIpsLimitTimeWindow = uniqueIpsLimitTimeWindow;
            return this;
        }

        /**
         * @param uniqueIpsLimitTimeWindow How many seconds an IP is counted towards the limit.
         * 
         * @return builder
         * 
         */
        public Builder uniqueIpsLimitTimeWindow(Integer uniqueIpsLimitTimeWindow) {
            return uniqueIpsLimitTimeWindow(Output.of(uniqueIpsLimitTimeWindow));
        }

        /**
         * @param usagePingEnabled Every week GitLab reports license usage back to GitLab, Inc.
         * 
         * @return builder
         * 
         */
        public Builder usagePingEnabled(@Nullable Output<Boolean> usagePingEnabled) {
            $.usagePingEnabled = usagePingEnabled;
            return this;
        }

        /**
         * @param usagePingEnabled Every week GitLab reports license usage back to GitLab, Inc.
         * 
         * @return builder
         * 
         */
        public Builder usagePingEnabled(Boolean usagePingEnabled) {
            return usagePingEnabled(Output.of(usagePingEnabled));
        }

        /**
         * @param userDeactivationEmailsEnabled Send an email to users upon account deactivation.
         * 
         * @return builder
         * 
         */
        public Builder userDeactivationEmailsEnabled(@Nullable Output<Boolean> userDeactivationEmailsEnabled) {
            $.userDeactivationEmailsEnabled = userDeactivationEmailsEnabled;
            return this;
        }

        /**
         * @param userDeactivationEmailsEnabled Send an email to users upon account deactivation.
         * 
         * @return builder
         * 
         */
        public Builder userDeactivationEmailsEnabled(Boolean userDeactivationEmailsEnabled) {
            return userDeactivationEmailsEnabled(Output.of(userDeactivationEmailsEnabled));
        }

        /**
         * @param userDefaultExternal Newly registered users are external by default.
         * 
         * @return builder
         * 
         */
        public Builder userDefaultExternal(@Nullable Output<Boolean> userDefaultExternal) {
            $.userDefaultExternal = userDefaultExternal;
            return this;
        }

        /**
         * @param userDefaultExternal Newly registered users are external by default.
         * 
         * @return builder
         * 
         */
        public Builder userDefaultExternal(Boolean userDefaultExternal) {
            return userDefaultExternal(Output.of(userDefaultExternal));
        }

        /**
         * @param userDefaultInternalRegex Specify an email address regex pattern to identify default internal users.
         * 
         * @return builder
         * 
         */
        public Builder userDefaultInternalRegex(@Nullable Output<String> userDefaultInternalRegex) {
            $.userDefaultInternalRegex = userDefaultInternalRegex;
            return this;
        }

        /**
         * @param userDefaultInternalRegex Specify an email address regex pattern to identify default internal users.
         * 
         * @return builder
         * 
         */
        public Builder userDefaultInternalRegex(String userDefaultInternalRegex) {
            return userDefaultInternalRegex(Output.of(userDefaultInternalRegex));
        }

        /**
         * @param userOauthApplications Allow users to register any application to use GitLab as an OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder userOauthApplications(@Nullable Output<Boolean> userOauthApplications) {
            $.userOauthApplications = userOauthApplications;
            return this;
        }

        /**
         * @param userOauthApplications Allow users to register any application to use GitLab as an OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder userOauthApplications(Boolean userOauthApplications) {
            return userOauthApplications(Output.of(userOauthApplications));
        }

        /**
         * @param userShowAddSshKeyMessage When set to false disable the You won&#39;t be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
         * 
         * @return builder
         * 
         */
        public Builder userShowAddSshKeyMessage(@Nullable Output<Boolean> userShowAddSshKeyMessage) {
            $.userShowAddSshKeyMessage = userShowAddSshKeyMessage;
            return this;
        }

        /**
         * @param userShowAddSshKeyMessage When set to false disable the You won&#39;t be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
         * 
         * @return builder
         * 
         */
        public Builder userShowAddSshKeyMessage(Boolean userShowAddSshKeyMessage) {
            return userShowAddSshKeyMessage(Output.of(userShowAddSshKeyMessage));
        }

        /**
         * @param versionCheckEnabled Let GitLab inform you when an update is available.
         * 
         * @return builder
         * 
         */
        public Builder versionCheckEnabled(@Nullable Output<Boolean> versionCheckEnabled) {
            $.versionCheckEnabled = versionCheckEnabled;
            return this;
        }

        /**
         * @param versionCheckEnabled Let GitLab inform you when an update is available.
         * 
         * @return builder
         * 
         */
        public Builder versionCheckEnabled(Boolean versionCheckEnabled) {
            return versionCheckEnabled(Output.of(versionCheckEnabled));
        }

        /**
         * @param webIdeClientsidePreviewEnabled Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
         * 
         * @return builder
         * 
         */
        public Builder webIdeClientsidePreviewEnabled(@Nullable Output<Boolean> webIdeClientsidePreviewEnabled) {
            $.webIdeClientsidePreviewEnabled = webIdeClientsidePreviewEnabled;
            return this;
        }

        /**
         * @param webIdeClientsidePreviewEnabled Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
         * 
         * @return builder
         * 
         */
        public Builder webIdeClientsidePreviewEnabled(Boolean webIdeClientsidePreviewEnabled) {
            return webIdeClientsidePreviewEnabled(Output.of(webIdeClientsidePreviewEnabled));
        }

        /**
         * @param whatsNewVariant What’s new variant, possible values: all*tiers, current*tier, and disabled.
         * 
         * @return builder
         * 
         */
        public Builder whatsNewVariant(@Nullable Output<String> whatsNewVariant) {
            $.whatsNewVariant = whatsNewVariant;
            return this;
        }

        /**
         * @param whatsNewVariant What’s new variant, possible values: all*tiers, current*tier, and disabled.
         * 
         * @return builder
         * 
         */
        public Builder whatsNewVariant(String whatsNewVariant) {
            return whatsNewVariant(Output.of(whatsNewVariant));
        }

        /**
         * @param wikiPageMaxContentBytes Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
         * 
         * @return builder
         * 
         */
        public Builder wikiPageMaxContentBytes(@Nullable Output<Integer> wikiPageMaxContentBytes) {
            $.wikiPageMaxContentBytes = wikiPageMaxContentBytes;
            return this;
        }

        /**
         * @param wikiPageMaxContentBytes Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
         * 
         * @return builder
         * 
         */
        public Builder wikiPageMaxContentBytes(Integer wikiPageMaxContentBytes) {
            return wikiPageMaxContentBytes(Output.of(wikiPageMaxContentBytes));
        }

        public ApplicationSettingsState build() {
            return $;
        }
    }

}
