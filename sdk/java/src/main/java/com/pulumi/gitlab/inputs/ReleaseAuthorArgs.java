// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseAuthorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseAuthorArgs Empty = new ReleaseAuthorArgs();

    /**
     * The url of the author&#39;s&#39; user avatar.
     * 
     */
    @Import(name="avatarUrl")
    private @Nullable Output<String> avatarUrl;

    /**
     * @return The url of the author&#39;s&#39; user avatar.
     * 
     */
    public Optional<Output<String>> avatarUrl() {
        return Optional.ofNullable(this.avatarUrl);
    }

    /**
     * The ID of the author&#39;s user.
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The ID of the author&#39;s user.
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the author.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the author.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The state of the author&#39;s user.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the author&#39;s user.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The username of the author.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username of the author.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * The url to the author&#39;s user profile.
     * 
     */
    @Import(name="webUrl")
    private @Nullable Output<String> webUrl;

    /**
     * @return The url to the author&#39;s user profile.
     * 
     */
    public Optional<Output<String>> webUrl() {
        return Optional.ofNullable(this.webUrl);
    }

    private ReleaseAuthorArgs() {}

    private ReleaseAuthorArgs(ReleaseAuthorArgs $) {
        this.avatarUrl = $.avatarUrl;
        this.id = $.id;
        this.name = $.name;
        this.state = $.state;
        this.username = $.username;
        this.webUrl = $.webUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseAuthorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseAuthorArgs $;

        public Builder() {
            $ = new ReleaseAuthorArgs();
        }

        public Builder(ReleaseAuthorArgs defaults) {
            $ = new ReleaseAuthorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param avatarUrl The url of the author&#39;s&#39; user avatar.
         * 
         * @return builder
         * 
         */
        public Builder avatarUrl(@Nullable Output<String> avatarUrl) {
            $.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * @param avatarUrl The url of the author&#39;s&#39; user avatar.
         * 
         * @return builder
         * 
         */
        public Builder avatarUrl(String avatarUrl) {
            return avatarUrl(Output.of(avatarUrl));
        }

        /**
         * @param id The ID of the author&#39;s user.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the author&#39;s user.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the author.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the author.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state The state of the author&#39;s user.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the author&#39;s user.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param username The username of the author.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the author.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param webUrl The url to the author&#39;s user profile.
         * 
         * @return builder
         * 
         */
        public Builder webUrl(@Nullable Output<String> webUrl) {
            $.webUrl = webUrl;
            return this;
        }

        /**
         * @param webUrl The url to the author&#39;s user profile.
         * 
         * @return builder
         * 
         */
        public Builder webUrl(String webUrl) {
            return webUrl(Output.of(webUrl));
        }

        public ReleaseAuthorArgs build() {
            return $;
        }
    }

}
