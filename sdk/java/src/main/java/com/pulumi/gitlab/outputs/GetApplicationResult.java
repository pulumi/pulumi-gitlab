// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetApplicationResult {
    /**
     * @return Internal GitLab application id.
     * 
     */
    private String applicationId;
    /**
     * @return Indicates if the application is kept confidential.
     * 
     */
    private Boolean confidential;
    private String id;
    /**
     * @return The name of the GitLab application.
     * 
     */
    private String name;
    /**
     * @return The redirect url of the application.
     * 
     */
    private String redirectUrl;

    private GetApplicationResult() {}
    /**
     * @return Internal GitLab application id.
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return Indicates if the application is kept confidential.
     * 
     */
    public Boolean confidential() {
        return this.confidential;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the GitLab application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The redirect url of the application.
     * 
     */
    public String redirectUrl() {
        return this.redirectUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationId;
        private Boolean confidential;
        private String id;
        private String name;
        private String redirectUrl;
        public Builder() {}
        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.confidential = defaults.confidential;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.redirectUrl = defaults.redirectUrl;
        }

        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            if (applicationId == null) {
              throw new MissingRequiredPropertyException("GetApplicationResult", "applicationId");
            }
            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder confidential(Boolean confidential) {
            if (confidential == null) {
              throw new MissingRequiredPropertyException("GetApplicationResult", "confidential");
            }
            this.confidential = confidential;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUrl(String redirectUrl) {
            if (redirectUrl == null) {
              throw new MissingRequiredPropertyException("GetApplicationResult", "redirectUrl");
            }
            this.redirectUrl = redirectUrl;
            return this;
        }
        public GetApplicationResult build() {
            final var _resultValue = new GetApplicationResult();
            _resultValue.applicationId = applicationId;
            _resultValue.confidential = confidential;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.redirectUrl = redirectUrl;
            return _resultValue;
        }
    }
}
