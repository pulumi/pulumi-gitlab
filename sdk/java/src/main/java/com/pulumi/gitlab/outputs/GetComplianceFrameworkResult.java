// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gitlab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetComplianceFrameworkResult {
    /**
     * @return Color representation of the compliance framework in hex format. e.g. #FCA121.
     * 
     */
    private String color;
    /**
     * @return Is the compliance framework the default framework for the group.
     * 
     */
    private Boolean default_;
    /**
     * @return Description for the compliance framework.
     * 
     */
    private String description;
    /**
     * @return Globally unique ID of the compliance framework.
     * 
     */
    private String frameworkId;
    private String id;
    /**
     * @return Name for the compliance framework.
     * 
     */
    private String name;
    /**
     * @return Full path of the namespace to where the compliance framework is.
     * 
     */
    private String namespacePath;
    /**
     * @return Full path of the compliance pipeline configuration stored in a project repository, such as `.gitlab/.compliance-gitlab-ci.yml{@literal @}compliance/hipaa`. Format: `path/file.y[a]ml{@literal @}group-name/project-name` **Note**: Ultimate license required.
     * 
     */
    private String pipelineConfigurationFullPath;

    private GetComplianceFrameworkResult() {}
    /**
     * @return Color representation of the compliance framework in hex format. e.g. #FCA121.
     * 
     */
    public String color() {
        return this.color;
    }
    /**
     * @return Is the compliance framework the default framework for the group.
     * 
     */
    public Boolean default_() {
        return this.default_;
    }
    /**
     * @return Description for the compliance framework.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Globally unique ID of the compliance framework.
     * 
     */
    public String frameworkId() {
        return this.frameworkId;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Name for the compliance framework.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Full path of the namespace to where the compliance framework is.
     * 
     */
    public String namespacePath() {
        return this.namespacePath;
    }
    /**
     * @return Full path of the compliance pipeline configuration stored in a project repository, such as `.gitlab/.compliance-gitlab-ci.yml{@literal @}compliance/hipaa`. Format: `path/file.y[a]ml{@literal @}group-name/project-name` **Note**: Ultimate license required.
     * 
     */
    public String pipelineConfigurationFullPath() {
        return this.pipelineConfigurationFullPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComplianceFrameworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String color;
        private Boolean default_;
        private String description;
        private String frameworkId;
        private String id;
        private String name;
        private String namespacePath;
        private String pipelineConfigurationFullPath;
        public Builder() {}
        public Builder(GetComplianceFrameworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.color = defaults.color;
    	      this.default_ = defaults.default_;
    	      this.description = defaults.description;
    	      this.frameworkId = defaults.frameworkId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namespacePath = defaults.namespacePath;
    	      this.pipelineConfigurationFullPath = defaults.pipelineConfigurationFullPath;
        }

        @CustomType.Setter
        public Builder color(String color) {
            if (color == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "color");
            }
            this.color = color;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder frameworkId(String frameworkId) {
            if (frameworkId == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "frameworkId");
            }
            this.frameworkId = frameworkId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespacePath(String namespacePath) {
            if (namespacePath == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "namespacePath");
            }
            this.namespacePath = namespacePath;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineConfigurationFullPath(String pipelineConfigurationFullPath) {
            if (pipelineConfigurationFullPath == null) {
              throw new MissingRequiredPropertyException("GetComplianceFrameworkResult", "pipelineConfigurationFullPath");
            }
            this.pipelineConfigurationFullPath = pipelineConfigurationFullPath;
            return this;
        }
        public GetComplianceFrameworkResult build() {
            final var _resultValue = new GetComplianceFrameworkResult();
            _resultValue.color = color;
            _resultValue.default_ = default_;
            _resultValue.description = description;
            _resultValue.frameworkId = frameworkId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.namespacePath = namespacePath;
            _resultValue.pipelineConfigurationFullPath = pipelineConfigurationFullPath;
            return _resultValue;
        }
    }
}
