// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewProject(ctx, "example", &gitlab.ProjectArgs{
//				Description:     pulumi.String("My awesome codebase"),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProject(ctx, "example-two", &gitlab.ProjectArgs{
//				PushRules: &gitlab.ProjectPushRulesArgs{
//					AuthorEmailRegex:     pulumi.String("@example\\.com$"),
//					CommitCommitterCheck: pulumi.Bool(true),
//					MemberCheck:          pulumi.Bool(true),
//					PreventSecrets:       pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			peterParker, err := gitlab.LookupUser(ctx, &gitlab.LookupUserArgs{
//				Username: pulumi.StringRef("peter_parker"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProject(ctx, "petersRepo", &gitlab.ProjectArgs{
//				Description: pulumi.String("This is a description"),
//				NamespaceId: *pulumi.Int(peterParker.NamespaceId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import gitlab:index/project:Project You can import a project state using `<resource> <id>`. The
//
// ```
//
//	`id` can be whatever the [get single project api][get_single_project] takes for its `:id` value, so for example
//
// ```sh
//
//	$ pulumi import gitlab:index/project:Project example richardc/example
//
// ```
type Project struct {
	pulumi.CustomResourceState

	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline pulumi.BoolPtrOutput `pulumi:"allowMergeOnSkippedPipeline"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel pulumi.StringOutput `pulumi:"analyticsAccessLevel"`
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `ProjectApprovalRule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `ProjectApprovalRule` instead.
	ApprovalsBeforeMerge pulumi.IntPtrOutput `pulumi:"approvalsBeforeMerge"`
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	ArchiveOnDestroy pulumi.BoolPtrOutput `pulumi:"archiveOnDestroy"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrOutput `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines pulumi.StringOutput `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
	AutoDevopsDeployStrategy pulumi.StringOutput `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled pulumi.BoolOutput `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues pulumi.BoolOutput `pulumi:"autocloseReferencedIssues"`
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	//
	// Deprecated: build_coverage_regex is removed in GitLab 15.0.
	BuildCoverageRegex pulumi.StringPtrOutput `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy pulumi.StringOutput `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout pulumi.IntOutput `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel pulumi.StringOutput `pulumi:"buildsAccessLevel"`
	// Custom Path to CI config file.
	CiConfigPath pulumi.StringPtrOutput `pulumi:"ciConfigPath"`
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth pulumi.IntOutput `pulumi:"ciDefaultGitDepth"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled pulumi.BoolPtrOutput `pulumi:"ciForwardDeploymentEnabled"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
	ContainerExpirationPolicy ProjectContainerExpirationPolicyOutput `pulumi:"containerExpirationPolicy"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel pulumi.StringOutput `pulumi:"containerRegistryAccessLevel"`
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrOutput `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch pulumi.StringOutput `pulumi:"defaultBranch"`
	// A description of the project.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disable email notifications.
	EmailsDisabled pulumi.BoolPtrOutput `pulumi:"emailsDisabled"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel pulumi.StringPtrOutput `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel pulumi.StringOutput `pulumi:"forkingAccessLevel"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrOutput `pulumi:"groupWithProjectTemplatesId"`
	// URL that can be provided to `git clone` to clone the
	HttpUrlToRepo pulumi.StringOutput `pulumi:"httpUrlToRepo"`
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrOutput `pulumi:"importUrl"`
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrOutput `pulumi:"initializeWithReadme"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel pulumi.StringOutput `pulumi:"issuesAccessLevel"`
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrOutput `pulumi:"issuesEnabled"`
	// Sets the template for new issues in the project.
	IssuesTemplate pulumi.StringPtrOutput `pulumi:"issuesTemplate"`
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrOutput `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate pulumi.StringPtrOutput `pulumi:"mergeCommitTemplate"`
	// Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
	MergeMethod pulumi.StringPtrOutput `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled pulumi.BoolPtrOutput `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel pulumi.StringOutput `pulumi:"mergeRequestsAccessLevel"`
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrOutput `pulumi:"mergeRequestsEnabled"`
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate pulumi.StringPtrOutput `pulumi:"mergeRequestsTemplate"`
	// Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
	MergeTrainsEnabled pulumi.BoolPtrOutput `pulumi:"mergeTrainsEnabled"`
	// Enable project pull mirror.
	Mirror pulumi.BoolPtrOutput `pulumi:"mirror"`
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches pulumi.BoolPtrOutput `pulumi:"mirrorOverwritesDivergedBranches"`
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds pulumi.BoolPtrOutput `pulumi:"mirrorTriggerBuilds"`
	// The name of the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId pulumi.IntOutput `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrOutput `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrOutput `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches pulumi.BoolPtrOutput `pulumi:"onlyMirrorProtectedBranches"`
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel pulumi.StringOutput `pulumi:"operationsAccessLevel"`
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrOutput `pulumi:"packagesEnabled"`
	// Enable pages access control
	PagesAccessLevel pulumi.StringOutput `pulumi:"pagesAccessLevel"`
	// The path of the repository.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// The path of the repository with namespace.
	PathWithNamespace pulumi.StringOutput `pulumi:"pathWithNamespace"`
	// Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
	//
	// Deprecated: Deprecated in favor of `builds_access_level`
	PipelinesEnabled pulumi.BoolOutput `pulumi:"pipelinesEnabled"`
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled pulumi.BoolPtrOutput `pulumi:"printingMergeRequestLinkEnabled"`
	// If true, jobs can be viewed by non-project members.
	PublicBuilds pulumi.BoolOutput `pulumi:"publicBuilds"`
	// Push rules for the project.
	PushRules ProjectPushRulesOutput `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrOutput `pulumi:"removeSourceBranchAfterMerge"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel pulumi.StringOutput `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage pulumi.StringOutput `pulumi:"repositoryStorage"`
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrOutput `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel pulumi.StringOutput `pulumi:"requirementsAccessLevel"`
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions pulumi.BoolPtrOutput `pulumi:"resolveOutdatedDiffDiscussions"`
	// Registration token to use during runner setup.
	RunnersToken pulumi.StringOutput `pulumi:"runnersToken"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel pulumi.StringOutput `pulumi:"securityAndComplianceAccessLevel"`
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolOutput `pulumi:"sharedRunnersEnabled"`
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	SkipWaitForDefaultBranchProtection pulumi.BoolPtrOutput `pulumi:"skipWaitForDefaultBranchProtection"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel pulumi.StringOutput `pulumi:"snippetsAccessLevel"`
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrOutput `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate pulumi.StringPtrOutput `pulumi:"squashCommitTemplate"`
	// Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
	SquashOption pulumi.StringPtrOutput `pulumi:"squashOption"`
	// URL that can be provided to `git clone` to clone the
	SshUrlToRepo pulumi.StringOutput `pulumi:"sshUrlToRepo"`
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage pulumi.StringPtrOutput `pulumi:"suggestionCommitMessage"`
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
	// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	TemplateProjectId pulumi.IntPtrOutput `pulumi:"templateProjectId"`
	// The list of topics for the project.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrOutput `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	VisibilityLevel pulumi.StringPtrOutput `pulumi:"visibilityLevel"`
	// URL that can be used to find the project in a browser.
	WebUrl pulumi.StringOutput `pulumi:"webUrl"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringOutput `pulumi:"wikiAccessLevel"`
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrOutput `pulumi:"wikiEnabled"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		args = &ProjectArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"runnersToken",
	})
	opts = append(opts, secrets)
	var resource Project
	err := ctx.RegisterResource("gitlab:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("gitlab:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline *bool `pulumi:"allowMergeOnSkippedPipeline"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel *string `pulumi:"analyticsAccessLevel"`
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `ProjectApprovalRule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `ProjectApprovalRule` instead.
	ApprovalsBeforeMerge *int `pulumi:"approvalsBeforeMerge"`
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines *string `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
	AutoDevopsDeployStrategy *string `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled *bool `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues *bool `pulumi:"autocloseReferencedIssues"`
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	//
	// Deprecated: build_coverage_regex is removed in GitLab 15.0.
	BuildCoverageRegex *string `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy *string `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout *int `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel *string `pulumi:"buildsAccessLevel"`
	// Custom Path to CI config file.
	CiConfigPath *string `pulumi:"ciConfigPath"`
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth *int `pulumi:"ciDefaultGitDepth"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled *bool `pulumi:"ciForwardDeploymentEnabled"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
	ContainerExpirationPolicy *ProjectContainerExpirationPolicy `pulumi:"containerExpirationPolicy"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel *string `pulumi:"containerRegistryAccessLevel"`
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// A description of the project.
	Description *string `pulumi:"description"`
	// Disable email notifications.
	EmailsDisabled *bool `pulumi:"emailsDisabled"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel *string `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel *string `pulumi:"forkingAccessLevel"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
	GroupWithProjectTemplatesId *int `pulumi:"groupWithProjectTemplatesId"`
	// URL that can be provided to `git clone` to clone the
	HttpUrlToRepo *string `pulumi:"httpUrlToRepo"`
	// Git URL to a repository to be imported.
	ImportUrl *string `pulumi:"importUrl"`
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme *bool `pulumi:"initializeWithReadme"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel *string `pulumi:"issuesAccessLevel"`
	// Enable issue tracking for the project.
	IssuesEnabled *bool `pulumi:"issuesEnabled"`
	// Sets the template for new issues in the project.
	IssuesTemplate *string `pulumi:"issuesTemplate"`
	// Enable LFS for the project.
	LfsEnabled *bool `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate *string `pulumi:"mergeCommitTemplate"`
	// Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
	MergeMethod *string `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled *bool `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel *string `pulumi:"mergeRequestsAccessLevel"`
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `pulumi:"mergeRequestsEnabled"`
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate *string `pulumi:"mergeRequestsTemplate"`
	// Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
	MergeTrainsEnabled *bool `pulumi:"mergeTrainsEnabled"`
	// Enable project pull mirror.
	Mirror *bool `pulumi:"mirror"`
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches *bool `pulumi:"mirrorOverwritesDivergedBranches"`
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds *bool `pulumi:"mirrorTriggerBuilds"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId *int `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches *bool `pulumi:"onlyMirrorProtectedBranches"`
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel *string `pulumi:"operationsAccessLevel"`
	// Enable packages repository for the project.
	PackagesEnabled *bool `pulumi:"packagesEnabled"`
	// Enable pages access control
	PagesAccessLevel *string `pulumi:"pagesAccessLevel"`
	// The path of the repository.
	Path *string `pulumi:"path"`
	// The path of the repository with namespace.
	PathWithNamespace *string `pulumi:"pathWithNamespace"`
	// Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
	//
	// Deprecated: Deprecated in favor of `builds_access_level`
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled *bool `pulumi:"printingMergeRequestLinkEnabled"`
	// If true, jobs can be viewed by non-project members.
	PublicBuilds *bool `pulumi:"publicBuilds"`
	// Push rules for the project.
	PushRules *ProjectPushRules `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `pulumi:"removeSourceBranchAfterMerge"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel *string `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage *string `pulumi:"repositoryStorage"`
	// Allow users to request member access.
	RequestAccessEnabled *bool `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel *string `pulumi:"requirementsAccessLevel"`
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions *bool `pulumi:"resolveOutdatedDiffDiscussions"`
	// Registration token to use during runner setup.
	RunnersToken *string `pulumi:"runnersToken"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel *string `pulumi:"securityAndComplianceAccessLevel"`
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `pulumi:"sharedRunnersEnabled"`
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	SkipWaitForDefaultBranchProtection *bool `pulumi:"skipWaitForDefaultBranchProtection"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel *string `pulumi:"snippetsAccessLevel"`
	// Enable snippets for the project.
	SnippetsEnabled *bool `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate *string `pulumi:"squashCommitTemplate"`
	// Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
	SquashOption *string `pulumi:"squashOption"`
	// URL that can be provided to `git clone` to clone the
	SshUrlToRepo *string `pulumi:"sshUrlToRepo"`
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage *string `pulumi:"suggestionCommitMessage"`
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags []string `pulumi:"tags"`
	// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName *string `pulumi:"templateName"`
	// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	TemplateProjectId *int `pulumi:"templateProjectId"`
	// The list of topics for the project.
	Topics []string `pulumi:"topics"`
	// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
	UseCustomTemplate *bool `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	VisibilityLevel *string `pulumi:"visibilityLevel"`
	// URL that can be used to find the project in a browser.
	WebUrl *string `pulumi:"webUrl"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `pulumi:"wikiAccessLevel"`
	// Enable wiki for the project.
	WikiEnabled *bool `pulumi:"wikiEnabled"`
}

type ProjectState struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline pulumi.BoolPtrInput
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel pulumi.StringPtrInput
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `ProjectApprovalRule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `ProjectApprovalRule` instead.
	ApprovalsBeforeMerge pulumi.IntPtrInput
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	ArchiveOnDestroy pulumi.BoolPtrInput
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrInput
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines pulumi.StringPtrInput
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
	AutoDevopsDeployStrategy pulumi.StringPtrInput
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled pulumi.BoolPtrInput
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues pulumi.BoolPtrInput
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	//
	// Deprecated: build_coverage_regex is removed in GitLab 15.0.
	BuildCoverageRegex pulumi.StringPtrInput
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy pulumi.StringPtrInput
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout pulumi.IntPtrInput
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel pulumi.StringPtrInput
	// Custom Path to CI config file.
	CiConfigPath pulumi.StringPtrInput
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth pulumi.IntPtrInput
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled pulumi.BoolPtrInput
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
	ContainerExpirationPolicy ProjectContainerExpirationPolicyPtrInput
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel pulumi.StringPtrInput
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrInput
	// The default branch for the project.
	DefaultBranch pulumi.StringPtrInput
	// A description of the project.
	Description pulumi.StringPtrInput
	// Disable email notifications.
	EmailsDisabled pulumi.BoolPtrInput
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel pulumi.StringPtrInput
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel pulumi.StringPtrInput
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrInput
	// URL that can be provided to `git clone` to clone the
	HttpUrlToRepo pulumi.StringPtrInput
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrInput
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrInput
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel pulumi.StringPtrInput
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrInput
	// Sets the template for new issues in the project.
	IssuesTemplate pulumi.StringPtrInput
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrInput
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate pulumi.StringPtrInput
	// Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
	MergeMethod pulumi.StringPtrInput
	// Enable or disable merge pipelines.
	MergePipelinesEnabled pulumi.BoolPtrInput
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel pulumi.StringPtrInput
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrInput
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate pulumi.StringPtrInput
	// Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
	MergeTrainsEnabled pulumi.BoolPtrInput
	// Enable project pull mirror.
	Mirror pulumi.BoolPtrInput
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches pulumi.BoolPtrInput
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds pulumi.BoolPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId pulumi.IntPtrInput
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrInput
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrInput
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches pulumi.BoolPtrInput
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel pulumi.StringPtrInput
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrInput
	// Enable pages access control
	PagesAccessLevel pulumi.StringPtrInput
	// The path of the repository.
	Path pulumi.StringPtrInput
	// The path of the repository with namespace.
	PathWithNamespace pulumi.StringPtrInput
	// Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
	//
	// Deprecated: Deprecated in favor of `builds_access_level`
	PipelinesEnabled pulumi.BoolPtrInput
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled pulumi.BoolPtrInput
	// If true, jobs can be viewed by non-project members.
	PublicBuilds pulumi.BoolPtrInput
	// Push rules for the project.
	PushRules ProjectPushRulesPtrInput
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrInput
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel pulumi.StringPtrInput
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage pulumi.StringPtrInput
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrInput
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel pulumi.StringPtrInput
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions pulumi.BoolPtrInput
	// Registration token to use during runner setup.
	RunnersToken pulumi.StringPtrInput
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel pulumi.StringPtrInput
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolPtrInput
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	SkipWaitForDefaultBranchProtection pulumi.BoolPtrInput
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel pulumi.StringPtrInput
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrInput
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate pulumi.StringPtrInput
	// Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
	SquashOption pulumi.StringPtrInput
	// URL that can be provided to `git clone` to clone the
	SshUrlToRepo pulumi.StringPtrInput
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage pulumi.StringPtrInput
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags pulumi.StringArrayInput
	// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName pulumi.StringPtrInput
	// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	TemplateProjectId pulumi.IntPtrInput
	// The list of topics for the project.
	Topics pulumi.StringArrayInput
	// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrInput
	// Set to `public` to create a public project.
	VisibilityLevel pulumi.StringPtrInput
	// URL that can be used to find the project in a browser.
	WebUrl pulumi.StringPtrInput
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringPtrInput
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline *bool `pulumi:"allowMergeOnSkippedPipeline"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel *string `pulumi:"analyticsAccessLevel"`
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `ProjectApprovalRule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `ProjectApprovalRule` instead.
	ApprovalsBeforeMerge *int `pulumi:"approvalsBeforeMerge"`
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines *string `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
	AutoDevopsDeployStrategy *string `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled *bool `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues *bool `pulumi:"autocloseReferencedIssues"`
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	//
	// Deprecated: build_coverage_regex is removed in GitLab 15.0.
	BuildCoverageRegex *string `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy *string `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout *int `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel *string `pulumi:"buildsAccessLevel"`
	// Custom Path to CI config file.
	CiConfigPath *string `pulumi:"ciConfigPath"`
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth *int `pulumi:"ciDefaultGitDepth"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled *bool `pulumi:"ciForwardDeploymentEnabled"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
	ContainerExpirationPolicy *ProjectContainerExpirationPolicy `pulumi:"containerExpirationPolicy"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel *string `pulumi:"containerRegistryAccessLevel"`
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// A description of the project.
	Description *string `pulumi:"description"`
	// Disable email notifications.
	EmailsDisabled *bool `pulumi:"emailsDisabled"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel *string `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel *string `pulumi:"forkingAccessLevel"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
	GroupWithProjectTemplatesId *int `pulumi:"groupWithProjectTemplatesId"`
	// Git URL to a repository to be imported.
	ImportUrl *string `pulumi:"importUrl"`
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme *bool `pulumi:"initializeWithReadme"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel *string `pulumi:"issuesAccessLevel"`
	// Enable issue tracking for the project.
	IssuesEnabled *bool `pulumi:"issuesEnabled"`
	// Sets the template for new issues in the project.
	IssuesTemplate *string `pulumi:"issuesTemplate"`
	// Enable LFS for the project.
	LfsEnabled *bool `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate *string `pulumi:"mergeCommitTemplate"`
	// Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
	MergeMethod *string `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled *bool `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel *string `pulumi:"mergeRequestsAccessLevel"`
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `pulumi:"mergeRequestsEnabled"`
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate *string `pulumi:"mergeRequestsTemplate"`
	// Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
	MergeTrainsEnabled *bool `pulumi:"mergeTrainsEnabled"`
	// Enable project pull mirror.
	Mirror *bool `pulumi:"mirror"`
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches *bool `pulumi:"mirrorOverwritesDivergedBranches"`
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds *bool `pulumi:"mirrorTriggerBuilds"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId *int `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches *bool `pulumi:"onlyMirrorProtectedBranches"`
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel *string `pulumi:"operationsAccessLevel"`
	// Enable packages repository for the project.
	PackagesEnabled *bool `pulumi:"packagesEnabled"`
	// Enable pages access control
	PagesAccessLevel *string `pulumi:"pagesAccessLevel"`
	// The path of the repository.
	Path *string `pulumi:"path"`
	// Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
	//
	// Deprecated: Deprecated in favor of `builds_access_level`
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled *bool `pulumi:"printingMergeRequestLinkEnabled"`
	// If true, jobs can be viewed by non-project members.
	PublicBuilds *bool `pulumi:"publicBuilds"`
	// Push rules for the project.
	PushRules *ProjectPushRules `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `pulumi:"removeSourceBranchAfterMerge"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel *string `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage *string `pulumi:"repositoryStorage"`
	// Allow users to request member access.
	RequestAccessEnabled *bool `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel *string `pulumi:"requirementsAccessLevel"`
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions *bool `pulumi:"resolveOutdatedDiffDiscussions"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel *string `pulumi:"securityAndComplianceAccessLevel"`
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `pulumi:"sharedRunnersEnabled"`
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	SkipWaitForDefaultBranchProtection *bool `pulumi:"skipWaitForDefaultBranchProtection"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel *string `pulumi:"snippetsAccessLevel"`
	// Enable snippets for the project.
	SnippetsEnabled *bool `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate *string `pulumi:"squashCommitTemplate"`
	// Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
	SquashOption *string `pulumi:"squashOption"`
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage *string `pulumi:"suggestionCommitMessage"`
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags []string `pulumi:"tags"`
	// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName *string `pulumi:"templateName"`
	// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	TemplateProjectId *int `pulumi:"templateProjectId"`
	// The list of topics for the project.
	Topics []string `pulumi:"topics"`
	// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
	UseCustomTemplate *bool `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	VisibilityLevel *string `pulumi:"visibilityLevel"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `pulumi:"wikiAccessLevel"`
	// Enable wiki for the project.
	WikiEnabled *bool `pulumi:"wikiEnabled"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline pulumi.BoolPtrInput
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel pulumi.StringPtrInput
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `ProjectApprovalRule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `ProjectApprovalRule` instead.
	ApprovalsBeforeMerge pulumi.IntPtrInput
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	ArchiveOnDestroy pulumi.BoolPtrInput
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrInput
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines pulumi.StringPtrInput
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
	AutoDevopsDeployStrategy pulumi.StringPtrInput
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled pulumi.BoolPtrInput
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues pulumi.BoolPtrInput
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	//
	// Deprecated: build_coverage_regex is removed in GitLab 15.0.
	BuildCoverageRegex pulumi.StringPtrInput
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy pulumi.StringPtrInput
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout pulumi.IntPtrInput
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel pulumi.StringPtrInput
	// Custom Path to CI config file.
	CiConfigPath pulumi.StringPtrInput
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth pulumi.IntPtrInput
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled pulumi.BoolPtrInput
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
	ContainerExpirationPolicy ProjectContainerExpirationPolicyPtrInput
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel pulumi.StringPtrInput
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrInput
	// The default branch for the project.
	DefaultBranch pulumi.StringPtrInput
	// A description of the project.
	Description pulumi.StringPtrInput
	// Disable email notifications.
	EmailsDisabled pulumi.BoolPtrInput
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel pulumi.StringPtrInput
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel pulumi.StringPtrInput
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrInput
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrInput
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrInput
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel pulumi.StringPtrInput
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrInput
	// Sets the template for new issues in the project.
	IssuesTemplate pulumi.StringPtrInput
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrInput
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate pulumi.StringPtrInput
	// Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
	MergeMethod pulumi.StringPtrInput
	// Enable or disable merge pipelines.
	MergePipelinesEnabled pulumi.BoolPtrInput
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel pulumi.StringPtrInput
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrInput
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate pulumi.StringPtrInput
	// Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
	MergeTrainsEnabled pulumi.BoolPtrInput
	// Enable project pull mirror.
	Mirror pulumi.BoolPtrInput
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches pulumi.BoolPtrInput
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds pulumi.BoolPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId pulumi.IntPtrInput
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrInput
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrInput
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches pulumi.BoolPtrInput
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel pulumi.StringPtrInput
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrInput
	// Enable pages access control
	PagesAccessLevel pulumi.StringPtrInput
	// The path of the repository.
	Path pulumi.StringPtrInput
	// Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
	//
	// Deprecated: Deprecated in favor of `builds_access_level`
	PipelinesEnabled pulumi.BoolPtrInput
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled pulumi.BoolPtrInput
	// If true, jobs can be viewed by non-project members.
	PublicBuilds pulumi.BoolPtrInput
	// Push rules for the project.
	PushRules ProjectPushRulesPtrInput
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrInput
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel pulumi.StringPtrInput
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage pulumi.StringPtrInput
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrInput
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel pulumi.StringPtrInput
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions pulumi.BoolPtrInput
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel pulumi.StringPtrInput
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolPtrInput
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	SkipWaitForDefaultBranchProtection pulumi.BoolPtrInput
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel pulumi.StringPtrInput
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrInput
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate pulumi.StringPtrInput
	// Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
	SquashOption pulumi.StringPtrInput
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage pulumi.StringPtrInput
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags pulumi.StringArrayInput
	// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName pulumi.StringPtrInput
	// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	TemplateProjectId pulumi.IntPtrInput
	// The list of topics for the project.
	Topics pulumi.StringArrayInput
	// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrInput
	// Set to `public` to create a public project.
	VisibilityLevel pulumi.StringPtrInput
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringPtrInput
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Set to true if you want to treat skipped pipelines as if they finished with success.
func (o ProjectOutput) AllowMergeOnSkippedPipeline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.AllowMergeOnSkippedPipeline }).(pulumi.BoolPtrOutput)
}

// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) AnalyticsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.AnalyticsAccessLevel }).(pulumi.StringOutput)
}

// Number of merge request approvals required for merging. Default is 0.
// This field **does not** work well in combination with the `ProjectApprovalRule` resource
// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
// In the meantime we recommend against using this attribute and use `ProjectApprovalRule` instead.
func (o ProjectOutput) ApprovalsBeforeMerge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.IntPtrOutput { return v.ApprovalsBeforeMerge }).(pulumi.IntPtrOutput)
}

// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
func (o ProjectOutput) ArchiveOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.ArchiveOnDestroy }).(pulumi.BoolPtrOutput)
}

// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
func (o ProjectOutput) Archived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.Archived }).(pulumi.BoolPtrOutput)
}

// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
func (o ProjectOutput) AutoCancelPendingPipelines() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.AutoCancelPendingPipelines }).(pulumi.StringOutput)
}

// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
func (o ProjectOutput) AutoDevopsDeployStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.AutoDevopsDeployStrategy }).(pulumi.StringOutput)
}

// Enable Auto DevOps for this project.
func (o ProjectOutput) AutoDevopsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AutoDevopsEnabled }).(pulumi.BoolOutput)
}

// Set whether auto-closing referenced issues on default branch.
func (o ProjectOutput) AutocloseReferencedIssues() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AutocloseReferencedIssues }).(pulumi.BoolOutput)
}

// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
//
// Deprecated: build_coverage_regex is removed in GitLab 15.0.
func (o ProjectOutput) BuildCoverageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.BuildCoverageRegex }).(pulumi.StringPtrOutput)
}

// The Git strategy. Defaults to fetch.
func (o ProjectOutput) BuildGitStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.BuildGitStrategy }).(pulumi.StringOutput)
}

// The maximum amount of time, in seconds, that a job can run.
func (o ProjectOutput) BuildTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.BuildTimeout }).(pulumi.IntOutput)
}

// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) BuildsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.BuildsAccessLevel }).(pulumi.StringOutput)
}

// Custom Path to CI config file.
func (o ProjectOutput) CiConfigPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.CiConfigPath }).(pulumi.StringPtrOutput)
}

// Default number of revisions for shallow cloning.
func (o ProjectOutput) CiDefaultGitDepth() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.CiDefaultGitDepth }).(pulumi.IntOutput)
}

// When a new deployment job starts, skip older deployment jobs that are still pending.
func (o ProjectOutput) CiForwardDeploymentEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.CiForwardDeploymentEnabled }).(pulumi.BoolPtrOutput)
}

// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
func (o ProjectOutput) ContainerExpirationPolicy() ProjectContainerExpirationPolicyOutput {
	return o.ApplyT(func(v *Project) ProjectContainerExpirationPolicyOutput { return v.ContainerExpirationPolicy }).(ProjectContainerExpirationPolicyOutput)
}

// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) ContainerRegistryAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ContainerRegistryAccessLevel }).(pulumi.StringOutput)
}

// Enable container registry for the project.
func (o ProjectOutput) ContainerRegistryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.ContainerRegistryEnabled }).(pulumi.BoolPtrOutput)
}

// The default branch for the project.
func (o ProjectOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DefaultBranch }).(pulumi.StringOutput)
}

// A description of the project.
func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disable email notifications.
func (o ProjectOutput) EmailsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.EmailsDisabled }).(pulumi.BoolPtrOutput)
}

// The classification label for the project.
func (o ProjectOutput) ExternalAuthorizationClassificationLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.ExternalAuthorizationClassificationLabel }).(pulumi.StringPtrOutput)
}

// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) ForkingAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ForkingAccessLevel }).(pulumi.StringOutput)
}

// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
func (o ProjectOutput) GroupWithProjectTemplatesId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.IntPtrOutput { return v.GroupWithProjectTemplatesId }).(pulumi.IntPtrOutput)
}

// URL that can be provided to `git clone` to clone the
func (o ProjectOutput) HttpUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.HttpUrlToRepo }).(pulumi.StringOutput)
}

// Git URL to a repository to be imported.
func (o ProjectOutput) ImportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.ImportUrl }).(pulumi.StringPtrOutput)
}

// Create main branch with first commit containing a README.md file.
func (o ProjectOutput) InitializeWithReadme() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.InitializeWithReadme }).(pulumi.BoolPtrOutput)
}

// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) IssuesAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.IssuesAccessLevel }).(pulumi.StringOutput)
}

// Enable issue tracking for the project.
func (o ProjectOutput) IssuesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.IssuesEnabled }).(pulumi.BoolPtrOutput)
}

// Sets the template for new issues in the project.
func (o ProjectOutput) IssuesTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.IssuesTemplate }).(pulumi.StringPtrOutput)
}

// Enable LFS for the project.
func (o ProjectOutput) LfsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.LfsEnabled }).(pulumi.BoolPtrOutput)
}

// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
func (o ProjectOutput) MergeCommitTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.MergeCommitTemplate }).(pulumi.StringPtrOutput)
}

// Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
func (o ProjectOutput) MergeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.MergeMethod }).(pulumi.StringPtrOutput)
}

// Enable or disable merge pipelines.
func (o ProjectOutput) MergePipelinesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.MergePipelinesEnabled }).(pulumi.BoolPtrOutput)
}

// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) MergeRequestsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.MergeRequestsAccessLevel }).(pulumi.StringOutput)
}

// Enable merge requests for the project.
func (o ProjectOutput) MergeRequestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.MergeRequestsEnabled }).(pulumi.BoolPtrOutput)
}

// Sets the template for new merge requests in the project.
func (o ProjectOutput) MergeRequestsTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.MergeRequestsTemplate }).(pulumi.StringPtrOutput)
}

// Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
func (o ProjectOutput) MergeTrainsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.MergeTrainsEnabled }).(pulumi.BoolPtrOutput)
}

// Enable project pull mirror.
func (o ProjectOutput) Mirror() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.Mirror }).(pulumi.BoolPtrOutput)
}

// Enable overwrite diverged branches for a mirrored project.
func (o ProjectOutput) MirrorOverwritesDivergedBranches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.MirrorOverwritesDivergedBranches }).(pulumi.BoolPtrOutput)
}

// Enable trigger builds on pushes for a mirrored project.
func (o ProjectOutput) MirrorTriggerBuilds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.MirrorTriggerBuilds }).(pulumi.BoolPtrOutput)
}

// The name of the project.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace (group or user) of the project. Defaults to your user.
func (o ProjectOutput) NamespaceId() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.NamespaceId }).(pulumi.IntOutput)
}

// Set to true if you want allow merges only if all discussions are resolved.
func (o ProjectOutput) OnlyAllowMergeIfAllDiscussionsAreResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.OnlyAllowMergeIfAllDiscussionsAreResolved }).(pulumi.BoolPtrOutput)
}

// Set to true if you want allow merges only if a pipeline succeeds.
func (o ProjectOutput) OnlyAllowMergeIfPipelineSucceeds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.OnlyAllowMergeIfPipelineSucceeds }).(pulumi.BoolPtrOutput)
}

// Enable only mirror protected branches for a mirrored project.
func (o ProjectOutput) OnlyMirrorProtectedBranches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.OnlyMirrorProtectedBranches }).(pulumi.BoolPtrOutput)
}

// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) OperationsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.OperationsAccessLevel }).(pulumi.StringOutput)
}

// Enable packages repository for the project.
func (o ProjectOutput) PackagesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.PackagesEnabled }).(pulumi.BoolPtrOutput)
}

// Enable pages access control
func (o ProjectOutput) PagesAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.PagesAccessLevel }).(pulumi.StringOutput)
}

// The path of the repository.
func (o ProjectOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// The path of the repository with namespace.
func (o ProjectOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.PathWithNamespace }).(pulumi.StringOutput)
}

// Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
//
// Deprecated: Deprecated in favor of `builds_access_level`
func (o ProjectOutput) PipelinesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.PipelinesEnabled }).(pulumi.BoolOutput)
}

// Show link to create/view merge request when pushing from the command line
func (o ProjectOutput) PrintingMergeRequestLinkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.PrintingMergeRequestLinkEnabled }).(pulumi.BoolPtrOutput)
}

// If true, jobs can be viewed by non-project members.
func (o ProjectOutput) PublicBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.PublicBuilds }).(pulumi.BoolOutput)
}

// Push rules for the project.
func (o ProjectOutput) PushRules() ProjectPushRulesOutput {
	return o.ApplyT(func(v *Project) ProjectPushRulesOutput { return v.PushRules }).(ProjectPushRulesOutput)
}

// Enable `Delete source branch` option by default for all new merge requests.
func (o ProjectOutput) RemoveSourceBranchAfterMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.RemoveSourceBranchAfterMerge }).(pulumi.BoolPtrOutput)
}

// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) RepositoryAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.RepositoryAccessLevel }).(pulumi.StringOutput)
}

// Which storage shard the repository is on. (administrator only)
func (o ProjectOutput) RepositoryStorage() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.RepositoryStorage }).(pulumi.StringOutput)
}

// Allow users to request member access.
func (o ProjectOutput) RequestAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.RequestAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) RequirementsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.RequirementsAccessLevel }).(pulumi.StringOutput)
}

// Automatically resolve merge request diffs discussions on lines changed with a push.
func (o ProjectOutput) ResolveOutdatedDiffDiscussions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.ResolveOutdatedDiffDiscussions }).(pulumi.BoolPtrOutput)
}

// Registration token to use during runner setup.
func (o ProjectOutput) RunnersToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.RunnersToken }).(pulumi.StringOutput)
}

// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) SecurityAndComplianceAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.SecurityAndComplianceAccessLevel }).(pulumi.StringOutput)
}

// Enable shared runners for this project.
func (o ProjectOutput) SharedRunnersEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.SharedRunnersEnabled }).(pulumi.BoolOutput)
}

// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
func (o ProjectOutput) SkipWaitForDefaultBranchProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.SkipWaitForDefaultBranchProtection }).(pulumi.BoolPtrOutput)
}

// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) SnippetsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.SnippetsAccessLevel }).(pulumi.StringOutput)
}

// Enable snippets for the project.
func (o ProjectOutput) SnippetsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.SnippetsEnabled }).(pulumi.BoolPtrOutput)
}

// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
func (o ProjectOutput) SquashCommitTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.SquashCommitTemplate }).(pulumi.StringPtrOutput)
}

// Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
func (o ProjectOutput) SquashOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.SquashOption }).(pulumi.StringPtrOutput)
}

// URL that can be provided to `git clone` to clone the
func (o ProjectOutput) SshUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.SshUrlToRepo }).(pulumi.StringOutput)
}

// The commit message used to apply merge request suggestions.
func (o ProjectOutput) SuggestionCommitMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.SuggestionCommitMessage }).(pulumi.StringPtrOutput)
}

// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
func (o ProjectOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
func (o ProjectOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.TemplateName }).(pulumi.StringPtrOutput)
}

// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
func (o ProjectOutput) TemplateProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.IntPtrOutput { return v.TemplateProjectId }).(pulumi.IntPtrOutput)
}

// The list of topics for the project.
func (o ProjectOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
func (o ProjectOutput) UseCustomTemplate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.UseCustomTemplate }).(pulumi.BoolPtrOutput)
}

// Set to `public` to create a public project.
func (o ProjectOutput) VisibilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.VisibilityLevel }).(pulumi.StringPtrOutput)
}

// URL that can be used to find the project in a browser.
func (o ProjectOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.WebUrl }).(pulumi.StringOutput)
}

// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
func (o ProjectOutput) WikiAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.WikiAccessLevel }).(pulumi.StringOutput)
}

// Enable wiki for the project.
func (o ProjectOutput) WikiEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.WikiEnabled }).(pulumi.BoolPtrOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
