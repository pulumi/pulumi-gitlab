// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Project` resource allows to manage the lifecycle of a project.
//
// A project can either be created in a group or user namespace.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/projects.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.NewProject(ctx, "example", &gitlab.ProjectArgs{
// 			Description:     pulumi.String("My awesome codebase"),
// 			VisibilityLevel: pulumi.String("public"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = gitlab.NewProject(ctx, "example-two", &gitlab.ProjectArgs{
// 			PushRules: &ProjectPushRulesArgs{
// 				AuthorEmailRegex:     pulumi.String(fmt.Sprintf("%v%v", "@example\\.com", "$")),
// 				CommitCommitterCheck: pulumi.Bool(true),
// 				MemberCheck:          pulumi.Bool(true),
// 				PreventSecrets:       pulumi.Bool(true),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import gitlab:index/project:Project # You can import a project state using `<resource> <id>`. The
// ```
//
// # `id` can be whatever the [get single project api][get_single_project] takes for # its `:id` value, so for example
//
// ```sh
//  $ pulumi import gitlab:index/project:Project example richardc/example
// ```
type Project struct {
	pulumi.CustomResourceState

	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline pulumi.BoolPtrOutput `pulumi:"allowMergeOnSkippedPipeline"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel pulumi.StringOutput `pulumi:"analyticsAccessLevel"`
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge pulumi.IntPtrOutput `pulumi:"approvalsBeforeMerge"`
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`
	// operation.
	ArchiveOnDestroy pulumi.BoolPtrOutput `pulumi:"archiveOnDestroy"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrOutput `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines pulumi.StringOutput `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	AutoDevopsDeployStrategy pulumi.StringOutput `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled pulumi.BoolOutput `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues pulumi.BoolOutput `pulumi:"autocloseReferencedIssues"`
	// Test coverage parsing for the project.
	BuildCoverageRegex pulumi.StringPtrOutput `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy pulumi.StringOutput `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout pulumi.IntOutput `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel pulumi.StringOutput `pulumi:"buildsAccessLevel"`
	// Custom Path to CI config file.
	CiConfigPath pulumi.StringPtrOutput `pulumi:"ciConfigPath"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled pulumi.BoolPtrOutput `pulumi:"ciForwardDeploymentEnabled"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named
	// `container_expiration_policy_attributes` in the GitLab Upstream API.
	ContainerExpirationPolicy ProjectContainerExpirationPolicyOutput `pulumi:"containerExpirationPolicy"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel pulumi.StringOutput `pulumi:"containerRegistryAccessLevel"`
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrOutput `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch pulumi.StringOutput `pulumi:"defaultBranch"`
	// A description of the project.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disable email notifications.
	EmailsDisabled pulumi.BoolPtrOutput `pulumi:"emailsDisabled"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel pulumi.StringPtrOutput `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel pulumi.StringOutput `pulumi:"forkingAccessLevel"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave
	// empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrOutput `pulumi:"groupWithProjectTemplatesId"`
	// URL that can be provided to `git clone` to clone the
	HttpUrlToRepo pulumi.StringOutput `pulumi:"httpUrlToRepo"`
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrOutput `pulumi:"importUrl"`
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrOutput `pulumi:"initializeWithReadme"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel pulumi.StringOutput `pulumi:"issuesAccessLevel"`
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrOutput `pulumi:"issuesEnabled"`
	// Sets the template for new issues in the project.
	IssuesTemplate pulumi.StringPtrOutput `pulumi:"issuesTemplate"`
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrOutput `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate pulumi.StringPtrOutput `pulumi:"mergeCommitTemplate"`
	// Set to `ff` to create fast-forward merges
	MergeMethod pulumi.StringPtrOutput `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled pulumi.BoolPtrOutput `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel pulumi.StringOutput `pulumi:"mergeRequestsAccessLevel"`
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrOutput `pulumi:"mergeRequestsEnabled"`
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate pulumi.StringPtrOutput `pulumi:"mergeRequestsTemplate"`
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	MergeTrainsEnabled pulumi.BoolPtrOutput `pulumi:"mergeTrainsEnabled"`
	// Enable project pull mirror.
	Mirror pulumi.BoolPtrOutput `pulumi:"mirror"`
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches pulumi.BoolPtrOutput `pulumi:"mirrorOverwritesDivergedBranches"`
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds pulumi.BoolPtrOutput `pulumi:"mirrorTriggerBuilds"`
	// The name of the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId pulumi.IntOutput `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrOutput `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrOutput `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches pulumi.BoolPtrOutput `pulumi:"onlyMirrorProtectedBranches"`
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel pulumi.StringOutput `pulumi:"operationsAccessLevel"`
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrOutput `pulumi:"packagesEnabled"`
	// Enable pages access control
	PagesAccessLevel pulumi.StringPtrOutput `pulumi:"pagesAccessLevel"`
	// The path of the repository.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// The path of the repository with namespace.
	PathWithNamespace pulumi.StringOutput `pulumi:"pathWithNamespace"`
	// Enable pipelines for the project.
	PipelinesEnabled pulumi.BoolPtrOutput `pulumi:"pipelinesEnabled"`
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled pulumi.BoolPtrOutput `pulumi:"printingMergeRequestLinkEnabled"`
	// If true, jobs can be viewed by non-project members.
	PublicBuilds pulumi.BoolPtrOutput `pulumi:"publicBuilds"`
	// Push rules for the project.
	PushRules ProjectPushRulesOutput `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrOutput `pulumi:"removeSourceBranchAfterMerge"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel pulumi.StringOutput `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage pulumi.StringOutput `pulumi:"repositoryStorage"`
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrOutput `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel pulumi.StringOutput `pulumi:"requirementsAccessLevel"`
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions pulumi.BoolPtrOutput `pulumi:"resolveOutdatedDiffDiscussions"`
	// Registration token to use during runner setup.
	RunnersToken pulumi.StringOutput `pulumi:"runnersToken"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel pulumi.StringOutput `pulumi:"securityAndComplianceAccessLevel"`
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolOutput `pulumi:"sharedRunnersEnabled"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel pulumi.StringOutput `pulumi:"snippetsAccessLevel"`
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrOutput `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate pulumi.StringPtrOutput `pulumi:"squashCommitTemplate"`
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value
	// is `default_off`. [GitLab >= 14.1]
	SquashOption pulumi.StringPtrOutput `pulumi:"squashOption"`
	// URL that can be provided to `git clone` to clone the
	SshUrlToRepo pulumi.StringOutput `pulumi:"sshUrlToRepo"`
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of
	// a custom project template. This option is mutually exclusive with `template_project_id`.
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name
	// since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.
	TemplateProjectId pulumi.IntPtrOutput `pulumi:"templateProjectId"`
	// The list of topics for the project.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrOutput `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	VisibilityLevel pulumi.StringPtrOutput `pulumi:"visibilityLevel"`
	// URL that can be used to find the project in a browser.
	WebUrl pulumi.StringOutput `pulumi:"webUrl"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringOutput `pulumi:"wikiAccessLevel"`
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrOutput `pulumi:"wikiEnabled"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		args = &ProjectArgs{}
	}

	var resource Project
	err := ctx.RegisterResource("gitlab:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("gitlab:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline *bool `pulumi:"allowMergeOnSkippedPipeline"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel *string `pulumi:"analyticsAccessLevel"`
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge *int `pulumi:"approvalsBeforeMerge"`
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`
	// operation.
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines *string `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	AutoDevopsDeployStrategy *string `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled *bool `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues *bool `pulumi:"autocloseReferencedIssues"`
	// Test coverage parsing for the project.
	BuildCoverageRegex *string `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy *string `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout *int `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel *string `pulumi:"buildsAccessLevel"`
	// Custom Path to CI config file.
	CiConfigPath *string `pulumi:"ciConfigPath"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled *bool `pulumi:"ciForwardDeploymentEnabled"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named
	// `container_expiration_policy_attributes` in the GitLab Upstream API.
	ContainerExpirationPolicy *ProjectContainerExpirationPolicy `pulumi:"containerExpirationPolicy"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel *string `pulumi:"containerRegistryAccessLevel"`
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// A description of the project.
	Description *string `pulumi:"description"`
	// Disable email notifications.
	EmailsDisabled *bool `pulumi:"emailsDisabled"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel *string `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel *string `pulumi:"forkingAccessLevel"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave
	// empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	GroupWithProjectTemplatesId *int `pulumi:"groupWithProjectTemplatesId"`
	// URL that can be provided to `git clone` to clone the
	HttpUrlToRepo *string `pulumi:"httpUrlToRepo"`
	// Git URL to a repository to be imported.
	ImportUrl *string `pulumi:"importUrl"`
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme *bool `pulumi:"initializeWithReadme"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel *string `pulumi:"issuesAccessLevel"`
	// Enable issue tracking for the project.
	IssuesEnabled *bool `pulumi:"issuesEnabled"`
	// Sets the template for new issues in the project.
	IssuesTemplate *string `pulumi:"issuesTemplate"`
	// Enable LFS for the project.
	LfsEnabled *bool `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate *string `pulumi:"mergeCommitTemplate"`
	// Set to `ff` to create fast-forward merges
	MergeMethod *string `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled *bool `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel *string `pulumi:"mergeRequestsAccessLevel"`
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `pulumi:"mergeRequestsEnabled"`
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate *string `pulumi:"mergeRequestsTemplate"`
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	MergeTrainsEnabled *bool `pulumi:"mergeTrainsEnabled"`
	// Enable project pull mirror.
	Mirror *bool `pulumi:"mirror"`
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches *bool `pulumi:"mirrorOverwritesDivergedBranches"`
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds *bool `pulumi:"mirrorTriggerBuilds"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId *int `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches *bool `pulumi:"onlyMirrorProtectedBranches"`
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel *string `pulumi:"operationsAccessLevel"`
	// Enable packages repository for the project.
	PackagesEnabled *bool `pulumi:"packagesEnabled"`
	// Enable pages access control
	PagesAccessLevel *string `pulumi:"pagesAccessLevel"`
	// The path of the repository.
	Path *string `pulumi:"path"`
	// The path of the repository with namespace.
	PathWithNamespace *string `pulumi:"pathWithNamespace"`
	// Enable pipelines for the project.
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled *bool `pulumi:"printingMergeRequestLinkEnabled"`
	// If true, jobs can be viewed by non-project members.
	PublicBuilds *bool `pulumi:"publicBuilds"`
	// Push rules for the project.
	PushRules *ProjectPushRules `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `pulumi:"removeSourceBranchAfterMerge"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel *string `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage *string `pulumi:"repositoryStorage"`
	// Allow users to request member access.
	RequestAccessEnabled *bool `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel *string `pulumi:"requirementsAccessLevel"`
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions *bool `pulumi:"resolveOutdatedDiffDiscussions"`
	// Registration token to use during runner setup.
	RunnersToken *string `pulumi:"runnersToken"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel *string `pulumi:"securityAndComplianceAccessLevel"`
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `pulumi:"sharedRunnersEnabled"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel *string `pulumi:"snippetsAccessLevel"`
	// Enable snippets for the project.
	SnippetsEnabled *bool `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate *string `pulumi:"squashCommitTemplate"`
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value
	// is `default_off`. [GitLab >= 14.1]
	SquashOption *string `pulumi:"squashOption"`
	// URL that can be provided to `git clone` to clone the
	SshUrlToRepo *string `pulumi:"sshUrlToRepo"`
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags []string `pulumi:"tags"`
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of
	// a custom project template. This option is mutually exclusive with `template_project_id`.
	TemplateName *string `pulumi:"templateName"`
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name
	// since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.
	TemplateProjectId *int `pulumi:"templateProjectId"`
	// The list of topics for the project.
	Topics []string `pulumi:"topics"`
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate *bool `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	VisibilityLevel *string `pulumi:"visibilityLevel"`
	// URL that can be used to find the project in a browser.
	WebUrl *string `pulumi:"webUrl"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `pulumi:"wikiAccessLevel"`
	// Enable wiki for the project.
	WikiEnabled *bool `pulumi:"wikiEnabled"`
}

type ProjectState struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline pulumi.BoolPtrInput
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel pulumi.StringPtrInput
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge pulumi.IntPtrInput
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`
	// operation.
	ArchiveOnDestroy pulumi.BoolPtrInput
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrInput
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines pulumi.StringPtrInput
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	AutoDevopsDeployStrategy pulumi.StringPtrInput
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled pulumi.BoolPtrInput
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues pulumi.BoolPtrInput
	// Test coverage parsing for the project.
	BuildCoverageRegex pulumi.StringPtrInput
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy pulumi.StringPtrInput
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout pulumi.IntPtrInput
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel pulumi.StringPtrInput
	// Custom Path to CI config file.
	CiConfigPath pulumi.StringPtrInput
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled pulumi.BoolPtrInput
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named
	// `container_expiration_policy_attributes` in the GitLab Upstream API.
	ContainerExpirationPolicy ProjectContainerExpirationPolicyPtrInput
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel pulumi.StringPtrInput
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrInput
	// The default branch for the project.
	DefaultBranch pulumi.StringPtrInput
	// A description of the project.
	Description pulumi.StringPtrInput
	// Disable email notifications.
	EmailsDisabled pulumi.BoolPtrInput
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel pulumi.StringPtrInput
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel pulumi.StringPtrInput
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave
	// empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrInput
	// URL that can be provided to `git clone` to clone the
	HttpUrlToRepo pulumi.StringPtrInput
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrInput
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrInput
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel pulumi.StringPtrInput
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrInput
	// Sets the template for new issues in the project.
	IssuesTemplate pulumi.StringPtrInput
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrInput
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate pulumi.StringPtrInput
	// Set to `ff` to create fast-forward merges
	MergeMethod pulumi.StringPtrInput
	// Enable or disable merge pipelines.
	MergePipelinesEnabled pulumi.BoolPtrInput
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel pulumi.StringPtrInput
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrInput
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate pulumi.StringPtrInput
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	MergeTrainsEnabled pulumi.BoolPtrInput
	// Enable project pull mirror.
	Mirror pulumi.BoolPtrInput
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches pulumi.BoolPtrInput
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds pulumi.BoolPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId pulumi.IntPtrInput
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrInput
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrInput
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches pulumi.BoolPtrInput
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel pulumi.StringPtrInput
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrInput
	// Enable pages access control
	PagesAccessLevel pulumi.StringPtrInput
	// The path of the repository.
	Path pulumi.StringPtrInput
	// The path of the repository with namespace.
	PathWithNamespace pulumi.StringPtrInput
	// Enable pipelines for the project.
	PipelinesEnabled pulumi.BoolPtrInput
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled pulumi.BoolPtrInput
	// If true, jobs can be viewed by non-project members.
	PublicBuilds pulumi.BoolPtrInput
	// Push rules for the project.
	PushRules ProjectPushRulesPtrInput
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrInput
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel pulumi.StringPtrInput
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage pulumi.StringPtrInput
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrInput
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel pulumi.StringPtrInput
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions pulumi.BoolPtrInput
	// Registration token to use during runner setup.
	RunnersToken pulumi.StringPtrInput
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel pulumi.StringPtrInput
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolPtrInput
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel pulumi.StringPtrInput
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrInput
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate pulumi.StringPtrInput
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value
	// is `default_off`. [GitLab >= 14.1]
	SquashOption pulumi.StringPtrInput
	// URL that can be provided to `git clone` to clone the
	SshUrlToRepo pulumi.StringPtrInput
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags pulumi.StringArrayInput
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of
	// a custom project template. This option is mutually exclusive with `template_project_id`.
	TemplateName pulumi.StringPtrInput
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name
	// since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.
	TemplateProjectId pulumi.IntPtrInput
	// The list of topics for the project.
	Topics pulumi.StringArrayInput
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrInput
	// Set to `public` to create a public project.
	VisibilityLevel pulumi.StringPtrInput
	// URL that can be used to find the project in a browser.
	WebUrl pulumi.StringPtrInput
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringPtrInput
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline *bool `pulumi:"allowMergeOnSkippedPipeline"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel *string `pulumi:"analyticsAccessLevel"`
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge *int `pulumi:"approvalsBeforeMerge"`
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`
	// operation.
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines *string `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	AutoDevopsDeployStrategy *string `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled *bool `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues *bool `pulumi:"autocloseReferencedIssues"`
	// Test coverage parsing for the project.
	BuildCoverageRegex *string `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy *string `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout *int `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel *string `pulumi:"buildsAccessLevel"`
	// Custom Path to CI config file.
	CiConfigPath *string `pulumi:"ciConfigPath"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled *bool `pulumi:"ciForwardDeploymentEnabled"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named
	// `container_expiration_policy_attributes` in the GitLab Upstream API.
	ContainerExpirationPolicy *ProjectContainerExpirationPolicy `pulumi:"containerExpirationPolicy"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel *string `pulumi:"containerRegistryAccessLevel"`
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// A description of the project.
	Description *string `pulumi:"description"`
	// Disable email notifications.
	EmailsDisabled *bool `pulumi:"emailsDisabled"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel *string `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel *string `pulumi:"forkingAccessLevel"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave
	// empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	GroupWithProjectTemplatesId *int `pulumi:"groupWithProjectTemplatesId"`
	// Git URL to a repository to be imported.
	ImportUrl *string `pulumi:"importUrl"`
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme *bool `pulumi:"initializeWithReadme"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel *string `pulumi:"issuesAccessLevel"`
	// Enable issue tracking for the project.
	IssuesEnabled *bool `pulumi:"issuesEnabled"`
	// Sets the template for new issues in the project.
	IssuesTemplate *string `pulumi:"issuesTemplate"`
	// Enable LFS for the project.
	LfsEnabled *bool `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate *string `pulumi:"mergeCommitTemplate"`
	// Set to `ff` to create fast-forward merges
	MergeMethod *string `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled *bool `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel *string `pulumi:"mergeRequestsAccessLevel"`
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `pulumi:"mergeRequestsEnabled"`
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate *string `pulumi:"mergeRequestsTemplate"`
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	MergeTrainsEnabled *bool `pulumi:"mergeTrainsEnabled"`
	// Enable project pull mirror.
	Mirror *bool `pulumi:"mirror"`
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches *bool `pulumi:"mirrorOverwritesDivergedBranches"`
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds *bool `pulumi:"mirrorTriggerBuilds"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId *int `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches *bool `pulumi:"onlyMirrorProtectedBranches"`
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel *string `pulumi:"operationsAccessLevel"`
	// Enable packages repository for the project.
	PackagesEnabled *bool `pulumi:"packagesEnabled"`
	// Enable pages access control
	PagesAccessLevel *string `pulumi:"pagesAccessLevel"`
	// The path of the repository.
	Path *string `pulumi:"path"`
	// Enable pipelines for the project.
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled *bool `pulumi:"printingMergeRequestLinkEnabled"`
	// If true, jobs can be viewed by non-project members.
	PublicBuilds *bool `pulumi:"publicBuilds"`
	// Push rules for the project.
	PushRules *ProjectPushRules `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `pulumi:"removeSourceBranchAfterMerge"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel *string `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage *string `pulumi:"repositoryStorage"`
	// Allow users to request member access.
	RequestAccessEnabled *bool `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel *string `pulumi:"requirementsAccessLevel"`
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions *bool `pulumi:"resolveOutdatedDiffDiscussions"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel *string `pulumi:"securityAndComplianceAccessLevel"`
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `pulumi:"sharedRunnersEnabled"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel *string `pulumi:"snippetsAccessLevel"`
	// Enable snippets for the project.
	SnippetsEnabled *bool `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate *string `pulumi:"squashCommitTemplate"`
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value
	// is `default_off`. [GitLab >= 14.1]
	SquashOption *string `pulumi:"squashOption"`
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags []string `pulumi:"tags"`
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of
	// a custom project template. This option is mutually exclusive with `template_project_id`.
	TemplateName *string `pulumi:"templateName"`
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name
	// since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.
	TemplateProjectId *int `pulumi:"templateProjectId"`
	// The list of topics for the project.
	Topics []string `pulumi:"topics"`
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate *bool `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	VisibilityLevel *string `pulumi:"visibilityLevel"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `pulumi:"wikiAccessLevel"`
	// Enable wiki for the project.
	WikiEnabled *bool `pulumi:"wikiEnabled"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline pulumi.BoolPtrInput
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel pulumi.StringPtrInput
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge pulumi.IntPtrInput
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`
	// operation.
	ArchiveOnDestroy pulumi.BoolPtrInput
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrInput
	// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines pulumi.StringPtrInput
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	AutoDevopsDeployStrategy pulumi.StringPtrInput
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled pulumi.BoolPtrInput
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues pulumi.BoolPtrInput
	// Test coverage parsing for the project.
	BuildCoverageRegex pulumi.StringPtrInput
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy pulumi.StringPtrInput
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout pulumi.IntPtrInput
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel pulumi.StringPtrInput
	// Custom Path to CI config file.
	CiConfigPath pulumi.StringPtrInput
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled pulumi.BoolPtrInput
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named
	// `container_expiration_policy_attributes` in the GitLab Upstream API.
	ContainerExpirationPolicy ProjectContainerExpirationPolicyPtrInput
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel pulumi.StringPtrInput
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrInput
	// The default branch for the project.
	DefaultBranch pulumi.StringPtrInput
	// A description of the project.
	Description pulumi.StringPtrInput
	// Disable email notifications.
	EmailsDisabled pulumi.BoolPtrInput
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel pulumi.StringPtrInput
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel pulumi.StringPtrInput
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave
	// empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrInput
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrInput
	// Create main branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrInput
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel pulumi.StringPtrInput
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrInput
	// Sets the template for new issues in the project.
	IssuesTemplate pulumi.StringPtrInput
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrInput
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate pulumi.StringPtrInput
	// Set to `ff` to create fast-forward merges
	MergeMethod pulumi.StringPtrInput
	// Enable or disable merge pipelines.
	MergePipelinesEnabled pulumi.BoolPtrInput
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel pulumi.StringPtrInput
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrInput
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate pulumi.StringPtrInput
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	MergeTrainsEnabled pulumi.BoolPtrInput
	// Enable project pull mirror.
	Mirror pulumi.BoolPtrInput
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches pulumi.BoolPtrInput
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds pulumi.BoolPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceId pulumi.IntPtrInput
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrInput
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrInput
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches pulumi.BoolPtrInput
	// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
	OperationsAccessLevel pulumi.StringPtrInput
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrInput
	// Enable pages access control
	PagesAccessLevel pulumi.StringPtrInput
	// The path of the repository.
	Path pulumi.StringPtrInput
	// Enable pipelines for the project.
	PipelinesEnabled pulumi.BoolPtrInput
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled pulumi.BoolPtrInput
	// If true, jobs can be viewed by non-project members.
	PublicBuilds pulumi.BoolPtrInput
	// Push rules for the project.
	PushRules ProjectPushRulesPtrInput
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrInput
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel pulumi.StringPtrInput
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage pulumi.StringPtrInput
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrInput
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel pulumi.StringPtrInput
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions pulumi.BoolPtrInput
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel pulumi.StringPtrInput
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolPtrInput
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel pulumi.StringPtrInput
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrInput
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate pulumi.StringPtrInput
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value
	// is `default_off`. [GitLab >= 14.1]
	SquashOption pulumi.StringPtrInput
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags pulumi.StringArrayInput
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of
	// a custom project template. This option is mutually exclusive with `template_project_id`.
	TemplateName pulumi.StringPtrInput
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name
	// since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.
	TemplateProjectId pulumi.IntPtrInput
	// The list of topics for the project.
	Topics pulumi.StringArrayInput
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrInput
	// Set to `public` to create a public project.
	VisibilityLevel pulumi.StringPtrInput
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringPtrInput
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//          ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//          ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
