// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Project struct {
	pulumi.CustomResourceState

	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge pulumi.IntPtrOutput `pulumi:"approvalsBeforeMerge"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrOutput `pulumi:"archived"`
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrOutput `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch pulumi.StringPtrOutput `pulumi:"defaultBranch"`
	// A description of the project.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires useCustomTemplate to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrOutput `pulumi:"groupWithProjectTemplatesId"`
	// URL that can be provided to `git clone` to clone the
	// repository via HTTP.
	HttpUrlToRepo pulumi.StringOutput `pulumi:"httpUrlToRepo"`
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrOutput `pulumi:"importUrl"`
	// Create master branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrOutput `pulumi:"initializeWithReadme"`
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrOutput `pulumi:"issuesEnabled"`
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrOutput `pulumi:"lfsEnabled"`
	// Set to `ff` to create fast-forward merges
	// Valid values are `merge`, `rebaseMerge`, `ff`
	// Repositories are created with `merge` by default
	MergeMethod pulumi.StringPtrOutput `pulumi:"mergeMethod"`
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrOutput `pulumi:"mergeRequestsEnabled"`
	// The name of the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	// See `Group` for an example.
	NamespaceId pulumi.IntOutput `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrOutput `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrOutput `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrOutput `pulumi:"packagesEnabled"`
	// The path of the repository.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// The path of the repository with namespace.
	PathWithNamespace pulumi.StringOutput `pulumi:"pathWithNamespace"`
	// Enable pipelines for the project.
	PipelinesEnabled pulumi.BoolPtrOutput `pulumi:"pipelinesEnabled"`
	// Push rules for the project (documented below).
	PushRules ProjectPushRulesOutput `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrOutput `pulumi:"removeSourceBranchAfterMerge"`
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrOutput `pulumi:"requestAccessEnabled"`
	// Registration token to use during runner setup.
	RunnersToken pulumi.StringOutput `pulumi:"runnersToken"`
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolOutput `pulumi:"sharedRunnersEnabled"`
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrOutput `pulumi:"snippetsEnabled"`
	// URL that can be provided to `git clone` to clone the
	// repository via SSH.
	SshUrlToRepo pulumi.StringOutput `pulumi:"sshUrlToRepo"`
	// Tags (topics) of the project.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using templateName since templateName may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`.
	TemplateProjectId pulumi.IntPtrOutput `pulumi:"templateProjectId"`
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrOutput `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	// Valid values are `private`, `internal`, `public`.
	// Repositories are created as private by default.
	VisibilityLevel pulumi.StringPtrOutput `pulumi:"visibilityLevel"`
	// URL that can be used to find the project in a browser.
	WebUrl pulumi.StringOutput `pulumi:"webUrl"`
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrOutput `pulumi:"wikiEnabled"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		args = &ProjectArgs{}
	}
	var resource Project
	err := ctx.RegisterResource("gitlab:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("gitlab:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge *int `pulumi:"approvalsBeforeMerge"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `pulumi:"archived"`
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// A description of the project.
	Description *string `pulumi:"description"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires useCustomTemplate to be true (enterprise edition).
	GroupWithProjectTemplatesId *int `pulumi:"groupWithProjectTemplatesId"`
	// URL that can be provided to `git clone` to clone the
	// repository via HTTP.
	HttpUrlToRepo *string `pulumi:"httpUrlToRepo"`
	// Git URL to a repository to be imported.
	ImportUrl *string `pulumi:"importUrl"`
	// Create master branch with first commit containing a README.md file.
	InitializeWithReadme *bool `pulumi:"initializeWithReadme"`
	// Enable issue tracking for the project.
	IssuesEnabled *bool `pulumi:"issuesEnabled"`
	// Enable LFS for the project.
	LfsEnabled *bool `pulumi:"lfsEnabled"`
	// Set to `ff` to create fast-forward merges
	// Valid values are `merge`, `rebaseMerge`, `ff`
	// Repositories are created with `merge` by default
	MergeMethod *string `pulumi:"mergeMethod"`
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `pulumi:"mergeRequestsEnabled"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	// See `Group` for an example.
	NamespaceId *int `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable packages repository for the project.
	PackagesEnabled *bool `pulumi:"packagesEnabled"`
	// The path of the repository.
	Path *string `pulumi:"path"`
	// The path of the repository with namespace.
	PathWithNamespace *string `pulumi:"pathWithNamespace"`
	// Enable pipelines for the project.
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// Push rules for the project (documented below).
	PushRules *ProjectPushRules `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `pulumi:"removeSourceBranchAfterMerge"`
	// Allow users to request member access.
	RequestAccessEnabled *bool `pulumi:"requestAccessEnabled"`
	// Registration token to use during runner setup.
	RunnersToken *string `pulumi:"runnersToken"`
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `pulumi:"sharedRunnersEnabled"`
	// Enable snippets for the project.
	SnippetsEnabled *bool `pulumi:"snippetsEnabled"`
	// URL that can be provided to `git clone` to clone the
	// repository via SSH.
	SshUrlToRepo *string `pulumi:"sshUrlToRepo"`
	// Tags (topics) of the project.
	Tags []string `pulumi:"tags"`
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName *string `pulumi:"templateName"`
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using templateName since templateName may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`.
	TemplateProjectId *int `pulumi:"templateProjectId"`
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate *bool `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	// Valid values are `private`, `internal`, `public`.
	// Repositories are created as private by default.
	VisibilityLevel *string `pulumi:"visibilityLevel"`
	// URL that can be used to find the project in a browser.
	WebUrl *string `pulumi:"webUrl"`
	// Enable wiki for the project.
	WikiEnabled *bool `pulumi:"wikiEnabled"`
}

type ProjectState struct {
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge pulumi.IntPtrInput
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrInput
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrInput
	// The default branch for the project.
	DefaultBranch pulumi.StringPtrInput
	// A description of the project.
	Description pulumi.StringPtrInput
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires useCustomTemplate to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrInput
	// URL that can be provided to `git clone` to clone the
	// repository via HTTP.
	HttpUrlToRepo pulumi.StringPtrInput
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrInput
	// Create master branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrInput
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrInput
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrInput
	// Set to `ff` to create fast-forward merges
	// Valid values are `merge`, `rebaseMerge`, `ff`
	// Repositories are created with `merge` by default
	MergeMethod pulumi.StringPtrInput
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The namespace (group or user) of the project. Defaults to your user.
	// See `Group` for an example.
	NamespaceId pulumi.IntPtrInput
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrInput
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrInput
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrInput
	// The path of the repository.
	Path pulumi.StringPtrInput
	// The path of the repository with namespace.
	PathWithNamespace pulumi.StringPtrInput
	// Enable pipelines for the project.
	PipelinesEnabled pulumi.BoolPtrInput
	// Push rules for the project (documented below).
	PushRules ProjectPushRulesPtrInput
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrInput
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrInput
	// Registration token to use during runner setup.
	RunnersToken pulumi.StringPtrInput
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolPtrInput
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrInput
	// URL that can be provided to `git clone` to clone the
	// repository via SSH.
	SshUrlToRepo pulumi.StringPtrInput
	// Tags (topics) of the project.
	Tags pulumi.StringArrayInput
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName pulumi.StringPtrInput
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using templateName since templateName may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`.
	TemplateProjectId pulumi.IntPtrInput
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrInput
	// Set to `public` to create a public project.
	// Valid values are `private`, `internal`, `public`.
	// Repositories are created as private by default.
	VisibilityLevel pulumi.StringPtrInput
	// URL that can be used to find the project in a browser.
	WebUrl pulumi.StringPtrInput
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge *int `pulumi:"approvalsBeforeMerge"`
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `pulumi:"archived"`
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `pulumi:"containerRegistryEnabled"`
	// The default branch for the project.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// A description of the project.
	Description *string `pulumi:"description"`
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires useCustomTemplate to be true (enterprise edition).
	GroupWithProjectTemplatesId *int `pulumi:"groupWithProjectTemplatesId"`
	// Git URL to a repository to be imported.
	ImportUrl *string `pulumi:"importUrl"`
	// Create master branch with first commit containing a README.md file.
	InitializeWithReadme *bool `pulumi:"initializeWithReadme"`
	// Enable issue tracking for the project.
	IssuesEnabled *bool `pulumi:"issuesEnabled"`
	// Enable LFS for the project.
	LfsEnabled *bool `pulumi:"lfsEnabled"`
	// Set to `ff` to create fast-forward merges
	// Valid values are `merge`, `rebaseMerge`, `ff`
	// Repositories are created with `merge` by default
	MergeMethod *string `pulumi:"mergeMethod"`
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `pulumi:"mergeRequestsEnabled"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The namespace (group or user) of the project. Defaults to your user.
	// See `Group` for an example.
	NamespaceId *int `pulumi:"namespaceId"`
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Enable packages repository for the project.
	PackagesEnabled *bool `pulumi:"packagesEnabled"`
	// The path of the repository.
	Path *string `pulumi:"path"`
	// Enable pipelines for the project.
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// Push rules for the project (documented below).
	PushRules *ProjectPushRules `pulumi:"pushRules"`
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `pulumi:"removeSourceBranchAfterMerge"`
	// Allow users to request member access.
	RequestAccessEnabled *bool `pulumi:"requestAccessEnabled"`
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `pulumi:"sharedRunnersEnabled"`
	// Enable snippets for the project.
	SnippetsEnabled *bool `pulumi:"snippetsEnabled"`
	// Tags (topics) of the project.
	Tags []string `pulumi:"tags"`
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName *string `pulumi:"templateName"`
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using templateName since templateName may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`.
	TemplateProjectId *int `pulumi:"templateProjectId"`
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate *bool `pulumi:"useCustomTemplate"`
	// Set to `public` to create a public project.
	// Valid values are `private`, `internal`, `public`.
	// Repositories are created as private by default.
	VisibilityLevel *string `pulumi:"visibilityLevel"`
	// Enable wiki for the project.
	WikiEnabled *bool `pulumi:"wikiEnabled"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Number of merge request approvals required for merging. Default is 0.
	ApprovalsBeforeMerge pulumi.IntPtrInput
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived pulumi.BoolPtrInput
	// Enable container registry for the project.
	ContainerRegistryEnabled pulumi.BoolPtrInput
	// The default branch for the project.
	DefaultBranch pulumi.StringPtrInput
	// A description of the project.
	Description pulumi.StringPtrInput
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires useCustomTemplate to be true (enterprise edition).
	GroupWithProjectTemplatesId pulumi.IntPtrInput
	// Git URL to a repository to be imported.
	ImportUrl pulumi.StringPtrInput
	// Create master branch with first commit containing a README.md file.
	InitializeWithReadme pulumi.BoolPtrInput
	// Enable issue tracking for the project.
	IssuesEnabled pulumi.BoolPtrInput
	// Enable LFS for the project.
	LfsEnabled pulumi.BoolPtrInput
	// Set to `ff` to create fast-forward merges
	// Valid values are `merge`, `rebaseMerge`, `ff`
	// Repositories are created with `merge` by default
	MergeMethod pulumi.StringPtrInput
	// Enable merge requests for the project.
	MergeRequestsEnabled pulumi.BoolPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The namespace (group or user) of the project. Defaults to your user.
	// See `Group` for an example.
	NamespaceId pulumi.IntPtrInput
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolPtrInput
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolPtrInput
	// Enable packages repository for the project.
	PackagesEnabled pulumi.BoolPtrInput
	// The path of the repository.
	Path pulumi.StringPtrInput
	// Enable pipelines for the project.
	PipelinesEnabled pulumi.BoolPtrInput
	// Push rules for the project (documented below).
	PushRules ProjectPushRulesPtrInput
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge pulumi.BoolPtrInput
	// Allow users to request member access.
	RequestAccessEnabled pulumi.BoolPtrInput
	// Enable shared runners for this project.
	SharedRunnersEnabled pulumi.BoolPtrInput
	// Enable snippets for the project.
	SnippetsEnabled pulumi.BoolPtrInput
	// Tags (topics) of the project.
	Tags pulumi.StringArrayInput
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
	TemplateName pulumi.StringPtrInput
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using templateName since templateName may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`.
	TemplateProjectId pulumi.IntPtrInput
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	UseCustomTemplate pulumi.BoolPtrInput
	// Set to `public` to create a public project.
	// Valid values are `private`, `internal`, `public`.
	// Repositories are created as private by default.
	VisibilityLevel pulumi.StringPtrInput
	// Enable wiki for the project.
	WikiEnabled pulumi.BoolPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (Project) ElementType() reflect.Type {
	return reflect.TypeOf((*Project)(nil)).Elem()
}

func (i Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

type ProjectOutput struct {
	*pulumi.OutputState
}

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectOutput)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProjectOutput{})
}
