// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectDeployToken` resource allows you to manage the lifecycle of deploy tokens on a project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_tokens/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Example Usage
//			_, err := gitlab.NewProjectDeployToken(ctx, "example", &gitlab.ProjectDeployTokenArgs{
//				Project:   pulumi.String("example/deploying"),
//				Name:      pulumi.String("Example project deploy token"),
//				Username:  pulumi.String("example-username"),
//				ExpiresAt: pulumi.String("2020-03-14T00:00:00.000Z"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("read_repository"),
//					pulumi.String("read_registry"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeTimeadd, err := std.Timeadd(ctx, &std.TimeaddArgs{
//				Duration:  std.Timestamp(ctx, &std.TimestampArgs{}, nil).Result,
//				Timestamp: "24h",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectDeployToken(ctx, "example-two", &gitlab.ProjectDeployTokenArgs{
//				Project:   pulumi.String("12345678"),
//				Name:      pulumi.String("Example project deploy token expires in 24h"),
//				ExpiresAt: pulumi.String(invokeTimeadd.Result),
//				Scopes: pulumi.StringArray{
//					pulumi.String("read_repository"),
//					pulumi.String("read_registry"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_deploy_token`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_deploy_token.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// GitLab project deploy tokens can be imported using an id made up of `{project_id}:{deploy_token_id}`.
//
// ```sh
// $ pulumi import gitlab:index/projectDeployToken:ProjectDeployToken project_token 1:4
// ```
//
// Note: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
type ProjectDeployToken struct {
	pulumi.CustomResourceState

	// True if the token is expired.
	Expired pulumi.BoolOutput `pulumi:"expired"`
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// A name to describe the deploy token with.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Id or full path of the project.
	Project pulumi.StringOutput `pulumi:"project"`
	// True if the token is revoked.
	Revoked pulumi.BoolOutput `pulumi:"revoked"`
	// The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
	Token pulumi.StringOutput `pulumi:"token"`
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewProjectDeployToken registers a new resource with the given unique name, arguments, and options.
func NewProjectDeployToken(ctx *pulumi.Context,
	name string, args *ProjectDeployTokenArgs, opts ...pulumi.ResourceOption) (*ProjectDeployToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectDeployToken
	err := ctx.RegisterResource("gitlab:index/projectDeployToken:ProjectDeployToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectDeployToken gets an existing ProjectDeployToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectDeployToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectDeployTokenState, opts ...pulumi.ResourceOption) (*ProjectDeployToken, error) {
	var resource ProjectDeployToken
	err := ctx.ReadResource("gitlab:index/projectDeployToken:ProjectDeployToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectDeployToken resources.
type projectDeployTokenState struct {
	// True if the token is expired.
	Expired *bool `pulumi:"expired"`
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// A name to describe the deploy token with.
	Name *string `pulumi:"name"`
	// The Id or full path of the project.
	Project *string `pulumi:"project"`
	// True if the token is revoked.
	Revoked *bool `pulumi:"revoked"`
	// The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes []string `pulumi:"scopes"`
	// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
	Token *string `pulumi:"token"`
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username *string `pulumi:"username"`
}

type ProjectDeployTokenState struct {
	// True if the token is expired.
	Expired pulumi.BoolPtrInput
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt pulumi.StringPtrInput
	// A name to describe the deploy token with.
	Name pulumi.StringPtrInput
	// The Id or full path of the project.
	Project pulumi.StringPtrInput
	// True if the token is revoked.
	Revoked pulumi.BoolPtrInput
	// The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes pulumi.StringArrayInput
	// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
	Token pulumi.StringPtrInput
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username pulumi.StringPtrInput
}

func (ProjectDeployTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDeployTokenState)(nil)).Elem()
}

type projectDeployTokenArgs struct {
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// A name to describe the deploy token with.
	Name *string `pulumi:"name"`
	// The Id or full path of the project.
	Project string `pulumi:"project"`
	// The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes []string `pulumi:"scopes"`
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a ProjectDeployToken resource.
type ProjectDeployTokenArgs struct {
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt pulumi.StringPtrInput
	// A name to describe the deploy token with.
	Name pulumi.StringPtrInput
	// The Id or full path of the project.
	Project pulumi.StringInput
	// The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes pulumi.StringArrayInput
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username pulumi.StringPtrInput
}

func (ProjectDeployTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDeployTokenArgs)(nil)).Elem()
}

type ProjectDeployTokenInput interface {
	pulumi.Input

	ToProjectDeployTokenOutput() ProjectDeployTokenOutput
	ToProjectDeployTokenOutputWithContext(ctx context.Context) ProjectDeployTokenOutput
}

func (*ProjectDeployToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDeployToken)(nil)).Elem()
}

func (i *ProjectDeployToken) ToProjectDeployTokenOutput() ProjectDeployTokenOutput {
	return i.ToProjectDeployTokenOutputWithContext(context.Background())
}

func (i *ProjectDeployToken) ToProjectDeployTokenOutputWithContext(ctx context.Context) ProjectDeployTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDeployTokenOutput)
}

// ProjectDeployTokenArrayInput is an input type that accepts ProjectDeployTokenArray and ProjectDeployTokenArrayOutput values.
// You can construct a concrete instance of `ProjectDeployTokenArrayInput` via:
//
//	ProjectDeployTokenArray{ ProjectDeployTokenArgs{...} }
type ProjectDeployTokenArrayInput interface {
	pulumi.Input

	ToProjectDeployTokenArrayOutput() ProjectDeployTokenArrayOutput
	ToProjectDeployTokenArrayOutputWithContext(context.Context) ProjectDeployTokenArrayOutput
}

type ProjectDeployTokenArray []ProjectDeployTokenInput

func (ProjectDeployTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDeployToken)(nil)).Elem()
}

func (i ProjectDeployTokenArray) ToProjectDeployTokenArrayOutput() ProjectDeployTokenArrayOutput {
	return i.ToProjectDeployTokenArrayOutputWithContext(context.Background())
}

func (i ProjectDeployTokenArray) ToProjectDeployTokenArrayOutputWithContext(ctx context.Context) ProjectDeployTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDeployTokenArrayOutput)
}

// ProjectDeployTokenMapInput is an input type that accepts ProjectDeployTokenMap and ProjectDeployTokenMapOutput values.
// You can construct a concrete instance of `ProjectDeployTokenMapInput` via:
//
//	ProjectDeployTokenMap{ "key": ProjectDeployTokenArgs{...} }
type ProjectDeployTokenMapInput interface {
	pulumi.Input

	ToProjectDeployTokenMapOutput() ProjectDeployTokenMapOutput
	ToProjectDeployTokenMapOutputWithContext(context.Context) ProjectDeployTokenMapOutput
}

type ProjectDeployTokenMap map[string]ProjectDeployTokenInput

func (ProjectDeployTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDeployToken)(nil)).Elem()
}

func (i ProjectDeployTokenMap) ToProjectDeployTokenMapOutput() ProjectDeployTokenMapOutput {
	return i.ToProjectDeployTokenMapOutputWithContext(context.Background())
}

func (i ProjectDeployTokenMap) ToProjectDeployTokenMapOutputWithContext(ctx context.Context) ProjectDeployTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDeployTokenMapOutput)
}

type ProjectDeployTokenOutput struct{ *pulumi.OutputState }

func (ProjectDeployTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDeployToken)(nil)).Elem()
}

func (o ProjectDeployTokenOutput) ToProjectDeployTokenOutput() ProjectDeployTokenOutput {
	return o
}

func (o ProjectDeployTokenOutput) ToProjectDeployTokenOutputWithContext(ctx context.Context) ProjectDeployTokenOutput {
	return o
}

// True if the token is expired.
func (o ProjectDeployTokenOutput) Expired() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.BoolOutput { return v.Expired }).(pulumi.BoolOutput)
}

// Time the token expires in RFC3339 format. Not set by default.
func (o ProjectDeployTokenOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// A name to describe the deploy token with.
func (o ProjectDeployTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Id or full path of the project.
func (o ProjectDeployTokenOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// True if the token is revoked.
func (o ProjectDeployTokenOutput) Revoked() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.BoolOutput { return v.Revoked }).(pulumi.BoolOutput)
}

// The scopes of the project deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
func (o ProjectDeployTokenOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
func (o ProjectDeployTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
func (o ProjectDeployTokenOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDeployToken) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ProjectDeployTokenArrayOutput struct{ *pulumi.OutputState }

func (ProjectDeployTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDeployToken)(nil)).Elem()
}

func (o ProjectDeployTokenArrayOutput) ToProjectDeployTokenArrayOutput() ProjectDeployTokenArrayOutput {
	return o
}

func (o ProjectDeployTokenArrayOutput) ToProjectDeployTokenArrayOutputWithContext(ctx context.Context) ProjectDeployTokenArrayOutput {
	return o
}

func (o ProjectDeployTokenArrayOutput) Index(i pulumi.IntInput) ProjectDeployTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectDeployToken {
		return vs[0].([]*ProjectDeployToken)[vs[1].(int)]
	}).(ProjectDeployTokenOutput)
}

type ProjectDeployTokenMapOutput struct{ *pulumi.OutputState }

func (ProjectDeployTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDeployToken)(nil)).Elem()
}

func (o ProjectDeployTokenMapOutput) ToProjectDeployTokenMapOutput() ProjectDeployTokenMapOutput {
	return o
}

func (o ProjectDeployTokenMapOutput) ToProjectDeployTokenMapOutputWithContext(ctx context.Context) ProjectDeployTokenMapOutput {
	return o
}

func (o ProjectDeployTokenMapOutput) MapIndex(k pulumi.StringInput) ProjectDeployTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectDeployToken {
		return vs[0].(map[string]*ProjectDeployToken)[vs[1].(string)]
	}).(ProjectDeployTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDeployTokenInput)(nil)).Elem(), &ProjectDeployToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDeployTokenArrayInput)(nil)).Elem(), ProjectDeployTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDeployTokenMapInput)(nil)).Elem(), ProjectDeployTokenMap{})
	pulumi.RegisterOutputType(ProjectDeployTokenOutput{})
	pulumi.RegisterOutputType(ProjectDeployTokenArrayOutput{})
	pulumi.RegisterOutputType(ProjectDeployTokenMapOutput{})
}
