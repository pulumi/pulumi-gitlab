// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the gitlab package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
	// Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
	// the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
	BaseUrl pulumi.StringPtrOutput `pulumi:"baseUrl"`
	// This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
	// CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
	CacertFile pulumi.StringPtrOutput `pulumi:"cacertFile"`
	// File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
	ClientCert pulumi.StringPtrOutput `pulumi:"clientCert"`
	// File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
	// `client_cert` is set.
	ClientKey pulumi.StringPtrOutput `pulumi:"clientKey"`
	// The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
	// used in this provider for authentication (using Bearer authorization token). See
	// https://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment
	// variable.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:gitlab", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
	// Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
	// the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
	BaseUrl *string `pulumi:"baseUrl"`
	// This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
	// CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
	CacertFile *string `pulumi:"cacertFile"`
	// File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
	ClientCert *string `pulumi:"clientCert"`
	// File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
	// `client_cert` is set.
	ClientKey *string `pulumi:"clientKey"`
	// (Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider
	// configuration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the
	// GitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and
	// may change in the future. Please make sure to always keep backups of your state.
	EarlyAuthCheck *bool `pulumi:"earlyAuthCheck"`
	// When set to true this disables SSL verification of the connection to the GitLab instance.
	Insecure *bool `pulumi:"insecure"`
	// The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
	// used in this provider for authentication (using Bearer authorization token). See
	// https://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment
	// variable.
	Token string `pulumi:"token"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
	// Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
	// the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
	BaseUrl pulumi.StringPtrInput
	// This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
	// CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
	CacertFile pulumi.StringPtrInput
	// File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
	ClientCert pulumi.StringPtrInput
	// File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
	// `client_cert` is set.
	ClientKey pulumi.StringPtrInput
	// (Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider
	// configuration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the
	// GitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and
	// may change in the future. Please make sure to always keep backups of your state.
	EarlyAuthCheck pulumi.BoolPtrInput
	// When set to true this disables SSL verification of the connection to the GitLab instance.
	Insecure pulumi.BoolPtrInput
	// The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
	// used in this provider for authentication (using Bearer authorization token). See
	// https://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment
	// variable.
	Token pulumi.StringInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
// Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
// the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
func (o ProviderOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
// CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
func (o ProviderOutput) CacertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CacertFile }).(pulumi.StringPtrOutput)
}

// File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
func (o ProviderOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
// `client_cert` is set.
func (o ProviderOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
// used in this provider for authentication (using Bearer authorization token). See
// https://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment
// variable.
func (o ProviderOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
