// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v6/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectComplianceFramework` resource allows to manage the lifecycle of a compliance framework on a project.
//
// > This resource requires a GitLab Enterprise instance with a Premium license to set the compliance framework on a project.
//
// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/#mutationprojectsetcomplianceframework)
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v6/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sample, err := gitlab.NewComplianceFramework(ctx, "sample", &gitlab.ComplianceFrameworkArgs{
//				NamespacePath:                 pulumi.String("top-level-group"),
//				Name:                          pulumi.String("HIPAA"),
//				Description:                   pulumi.String("A HIPAA Compliance Framework"),
//				Color:                         pulumi.String("#87BEEF"),
//				Default:                       pulumi.Bool(false),
//				PipelineConfigurationFullPath: pulumi.String(".hipaa.yml@top-level-group/compliance-frameworks"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectComplianceFramework(ctx, "sample", &gitlab.ProjectComplianceFrameworkArgs{
//				ComplianceFrameworkId: sample.FrameworkId,
//				Project:               pulumi.String("12345678"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Gitlab project compliance frameworks can be imported with a key composed of `<project_id>`, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectComplianceFramework:ProjectComplianceFramework sample "42"
// ```
type ProjectComplianceFramework struct {
	pulumi.CustomResourceState

	// Globally unique ID of the compliance framework to assign to the project.
	ComplianceFrameworkId pulumi.StringOutput `pulumi:"complianceFrameworkId"`
	// The ID or full path of the project to change the compliance framework of.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectComplianceFramework registers a new resource with the given unique name, arguments, and options.
func NewProjectComplianceFramework(ctx *pulumi.Context,
	name string, args *ProjectComplianceFrameworkArgs, opts ...pulumi.ResourceOption) (*ProjectComplianceFramework, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComplianceFrameworkId == nil {
		return nil, errors.New("invalid value for required argument 'ComplianceFrameworkId'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectComplianceFramework
	err := ctx.RegisterResource("gitlab:index/projectComplianceFramework:ProjectComplianceFramework", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectComplianceFramework gets an existing ProjectComplianceFramework resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectComplianceFramework(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectComplianceFrameworkState, opts ...pulumi.ResourceOption) (*ProjectComplianceFramework, error) {
	var resource ProjectComplianceFramework
	err := ctx.ReadResource("gitlab:index/projectComplianceFramework:ProjectComplianceFramework", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectComplianceFramework resources.
type projectComplianceFrameworkState struct {
	// Globally unique ID of the compliance framework to assign to the project.
	ComplianceFrameworkId *string `pulumi:"complianceFrameworkId"`
	// The ID or full path of the project to change the compliance framework of.
	Project *string `pulumi:"project"`
}

type ProjectComplianceFrameworkState struct {
	// Globally unique ID of the compliance framework to assign to the project.
	ComplianceFrameworkId pulumi.StringPtrInput
	// The ID or full path of the project to change the compliance framework of.
	Project pulumi.StringPtrInput
}

func (ProjectComplianceFrameworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectComplianceFrameworkState)(nil)).Elem()
}

type projectComplianceFrameworkArgs struct {
	// Globally unique ID of the compliance framework to assign to the project.
	ComplianceFrameworkId string `pulumi:"complianceFrameworkId"`
	// The ID or full path of the project to change the compliance framework of.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectComplianceFramework resource.
type ProjectComplianceFrameworkArgs struct {
	// Globally unique ID of the compliance framework to assign to the project.
	ComplianceFrameworkId pulumi.StringInput
	// The ID or full path of the project to change the compliance framework of.
	Project pulumi.StringInput
}

func (ProjectComplianceFrameworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectComplianceFrameworkArgs)(nil)).Elem()
}

type ProjectComplianceFrameworkInput interface {
	pulumi.Input

	ToProjectComplianceFrameworkOutput() ProjectComplianceFrameworkOutput
	ToProjectComplianceFrameworkOutputWithContext(ctx context.Context) ProjectComplianceFrameworkOutput
}

func (*ProjectComplianceFramework) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectComplianceFramework)(nil)).Elem()
}

func (i *ProjectComplianceFramework) ToProjectComplianceFrameworkOutput() ProjectComplianceFrameworkOutput {
	return i.ToProjectComplianceFrameworkOutputWithContext(context.Background())
}

func (i *ProjectComplianceFramework) ToProjectComplianceFrameworkOutputWithContext(ctx context.Context) ProjectComplianceFrameworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectComplianceFrameworkOutput)
}

// ProjectComplianceFrameworkArrayInput is an input type that accepts ProjectComplianceFrameworkArray and ProjectComplianceFrameworkArrayOutput values.
// You can construct a concrete instance of `ProjectComplianceFrameworkArrayInput` via:
//
//	ProjectComplianceFrameworkArray{ ProjectComplianceFrameworkArgs{...} }
type ProjectComplianceFrameworkArrayInput interface {
	pulumi.Input

	ToProjectComplianceFrameworkArrayOutput() ProjectComplianceFrameworkArrayOutput
	ToProjectComplianceFrameworkArrayOutputWithContext(context.Context) ProjectComplianceFrameworkArrayOutput
}

type ProjectComplianceFrameworkArray []ProjectComplianceFrameworkInput

func (ProjectComplianceFrameworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectComplianceFramework)(nil)).Elem()
}

func (i ProjectComplianceFrameworkArray) ToProjectComplianceFrameworkArrayOutput() ProjectComplianceFrameworkArrayOutput {
	return i.ToProjectComplianceFrameworkArrayOutputWithContext(context.Background())
}

func (i ProjectComplianceFrameworkArray) ToProjectComplianceFrameworkArrayOutputWithContext(ctx context.Context) ProjectComplianceFrameworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectComplianceFrameworkArrayOutput)
}

// ProjectComplianceFrameworkMapInput is an input type that accepts ProjectComplianceFrameworkMap and ProjectComplianceFrameworkMapOutput values.
// You can construct a concrete instance of `ProjectComplianceFrameworkMapInput` via:
//
//	ProjectComplianceFrameworkMap{ "key": ProjectComplianceFrameworkArgs{...} }
type ProjectComplianceFrameworkMapInput interface {
	pulumi.Input

	ToProjectComplianceFrameworkMapOutput() ProjectComplianceFrameworkMapOutput
	ToProjectComplianceFrameworkMapOutputWithContext(context.Context) ProjectComplianceFrameworkMapOutput
}

type ProjectComplianceFrameworkMap map[string]ProjectComplianceFrameworkInput

func (ProjectComplianceFrameworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectComplianceFramework)(nil)).Elem()
}

func (i ProjectComplianceFrameworkMap) ToProjectComplianceFrameworkMapOutput() ProjectComplianceFrameworkMapOutput {
	return i.ToProjectComplianceFrameworkMapOutputWithContext(context.Background())
}

func (i ProjectComplianceFrameworkMap) ToProjectComplianceFrameworkMapOutputWithContext(ctx context.Context) ProjectComplianceFrameworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectComplianceFrameworkMapOutput)
}

type ProjectComplianceFrameworkOutput struct{ *pulumi.OutputState }

func (ProjectComplianceFrameworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectComplianceFramework)(nil)).Elem()
}

func (o ProjectComplianceFrameworkOutput) ToProjectComplianceFrameworkOutput() ProjectComplianceFrameworkOutput {
	return o
}

func (o ProjectComplianceFrameworkOutput) ToProjectComplianceFrameworkOutputWithContext(ctx context.Context) ProjectComplianceFrameworkOutput {
	return o
}

// Globally unique ID of the compliance framework to assign to the project.
func (o ProjectComplianceFrameworkOutput) ComplianceFrameworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectComplianceFramework) pulumi.StringOutput { return v.ComplianceFrameworkId }).(pulumi.StringOutput)
}

// The ID or full path of the project to change the compliance framework of.
func (o ProjectComplianceFrameworkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectComplianceFramework) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ProjectComplianceFrameworkArrayOutput struct{ *pulumi.OutputState }

func (ProjectComplianceFrameworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectComplianceFramework)(nil)).Elem()
}

func (o ProjectComplianceFrameworkArrayOutput) ToProjectComplianceFrameworkArrayOutput() ProjectComplianceFrameworkArrayOutput {
	return o
}

func (o ProjectComplianceFrameworkArrayOutput) ToProjectComplianceFrameworkArrayOutputWithContext(ctx context.Context) ProjectComplianceFrameworkArrayOutput {
	return o
}

func (o ProjectComplianceFrameworkArrayOutput) Index(i pulumi.IntInput) ProjectComplianceFrameworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectComplianceFramework {
		return vs[0].([]*ProjectComplianceFramework)[vs[1].(int)]
	}).(ProjectComplianceFrameworkOutput)
}

type ProjectComplianceFrameworkMapOutput struct{ *pulumi.OutputState }

func (ProjectComplianceFrameworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectComplianceFramework)(nil)).Elem()
}

func (o ProjectComplianceFrameworkMapOutput) ToProjectComplianceFrameworkMapOutput() ProjectComplianceFrameworkMapOutput {
	return o
}

func (o ProjectComplianceFrameworkMapOutput) ToProjectComplianceFrameworkMapOutputWithContext(ctx context.Context) ProjectComplianceFrameworkMapOutput {
	return o
}

func (o ProjectComplianceFrameworkMapOutput) MapIndex(k pulumi.StringInput) ProjectComplianceFrameworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectComplianceFramework {
		return vs[0].(map[string]*ProjectComplianceFramework)[vs[1].(string)]
	}).(ProjectComplianceFrameworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectComplianceFrameworkInput)(nil)).Elem(), &ProjectComplianceFramework{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectComplianceFrameworkArrayInput)(nil)).Elem(), ProjectComplianceFrameworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectComplianceFrameworkMapInput)(nil)).Elem(), ProjectComplianceFrameworkMap{})
	pulumi.RegisterOutputType(ProjectComplianceFrameworkOutput{})
	pulumi.RegisterOutputType(ProjectComplianceFrameworkArrayOutput{})
	pulumi.RegisterOutputType(ProjectComplianceFrameworkMapOutput{})
}
