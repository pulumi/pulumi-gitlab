// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationPipelinesEmail` resource manages the lifecycle of a project integration with the Pipeline Emails Service.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#pipeline-status-emails)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationPipelinesEmail(ctx, "email", &gitlab.ProjectIntegrationPipelinesEmailArgs{
//				Project: awesomeProject.ID(),
//				Recipients: pulumi.StringArray{
//					pulumi.String("gitlab@user.create"),
//				},
//				NotifyOnlyBrokenPipelines: pulumi.Bool(true),
//				BranchesToBeNotified:      pulumi.String("all"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_pipelines_email`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_pipelines_email.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// You can import a gitlab_project_integration_pipelines_email state using the project ID, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationPipelinesEmail:ProjectIntegrationPipelinesEmail email 1
// ```
type ProjectIntegrationPipelinesEmail struct {
	pulumi.CustomResourceState

	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `defaultAndProtected`. Default is `default`
	BranchesToBeNotified pulumi.StringPtrOutput `pulumi:"branchesToBeNotified"`
	// Notify only broken pipelines. Default is true.
	NotifyOnlyBrokenPipelines pulumi.BoolPtrOutput `pulumi:"notifyOnlyBrokenPipelines"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// ) email addresses where notifications are sent.
	Recipients pulumi.StringArrayOutput `pulumi:"recipients"`
}

// NewProjectIntegrationPipelinesEmail registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationPipelinesEmail(ctx *pulumi.Context,
	name string, args *ProjectIntegrationPipelinesEmailArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationPipelinesEmail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Recipients == nil {
		return nil, errors.New("invalid value for required argument 'Recipients'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationPipelinesEmail
	err := ctx.RegisterResource("gitlab:index/projectIntegrationPipelinesEmail:ProjectIntegrationPipelinesEmail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationPipelinesEmail gets an existing ProjectIntegrationPipelinesEmail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationPipelinesEmail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationPipelinesEmailState, opts ...pulumi.ResourceOption) (*ProjectIntegrationPipelinesEmail, error) {
	var resource ProjectIntegrationPipelinesEmail
	err := ctx.ReadResource("gitlab:index/projectIntegrationPipelinesEmail:ProjectIntegrationPipelinesEmail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationPipelinesEmail resources.
type projectIntegrationPipelinesEmailState struct {
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `defaultAndProtected`. Default is `default`
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// Notify only broken pipelines. Default is true.
	NotifyOnlyBrokenPipelines *bool `pulumi:"notifyOnlyBrokenPipelines"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// ) email addresses where notifications are sent.
	Recipients []string `pulumi:"recipients"`
}

type ProjectIntegrationPipelinesEmailState struct {
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `defaultAndProtected`. Default is `default`
	BranchesToBeNotified pulumi.StringPtrInput
	// Notify only broken pipelines. Default is true.
	NotifyOnlyBrokenPipelines pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// ) email addresses where notifications are sent.
	Recipients pulumi.StringArrayInput
}

func (ProjectIntegrationPipelinesEmailState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationPipelinesEmailState)(nil)).Elem()
}

type projectIntegrationPipelinesEmailArgs struct {
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `defaultAndProtected`. Default is `default`
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// Notify only broken pipelines. Default is true.
	NotifyOnlyBrokenPipelines *bool `pulumi:"notifyOnlyBrokenPipelines"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// ) email addresses where notifications are sent.
	Recipients []string `pulumi:"recipients"`
}

// The set of arguments for constructing a ProjectIntegrationPipelinesEmail resource.
type ProjectIntegrationPipelinesEmailArgs struct {
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `defaultAndProtected`. Default is `default`
	BranchesToBeNotified pulumi.StringPtrInput
	// Notify only broken pipelines. Default is true.
	NotifyOnlyBrokenPipelines pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
	// ) email addresses where notifications are sent.
	Recipients pulumi.StringArrayInput
}

func (ProjectIntegrationPipelinesEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationPipelinesEmailArgs)(nil)).Elem()
}

type ProjectIntegrationPipelinesEmailInput interface {
	pulumi.Input

	ToProjectIntegrationPipelinesEmailOutput() ProjectIntegrationPipelinesEmailOutput
	ToProjectIntegrationPipelinesEmailOutputWithContext(ctx context.Context) ProjectIntegrationPipelinesEmailOutput
}

func (*ProjectIntegrationPipelinesEmail) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationPipelinesEmail)(nil)).Elem()
}

func (i *ProjectIntegrationPipelinesEmail) ToProjectIntegrationPipelinesEmailOutput() ProjectIntegrationPipelinesEmailOutput {
	return i.ToProjectIntegrationPipelinesEmailOutputWithContext(context.Background())
}

func (i *ProjectIntegrationPipelinesEmail) ToProjectIntegrationPipelinesEmailOutputWithContext(ctx context.Context) ProjectIntegrationPipelinesEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationPipelinesEmailOutput)
}

// ProjectIntegrationPipelinesEmailArrayInput is an input type that accepts ProjectIntegrationPipelinesEmailArray and ProjectIntegrationPipelinesEmailArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationPipelinesEmailArrayInput` via:
//
//	ProjectIntegrationPipelinesEmailArray{ ProjectIntegrationPipelinesEmailArgs{...} }
type ProjectIntegrationPipelinesEmailArrayInput interface {
	pulumi.Input

	ToProjectIntegrationPipelinesEmailArrayOutput() ProjectIntegrationPipelinesEmailArrayOutput
	ToProjectIntegrationPipelinesEmailArrayOutputWithContext(context.Context) ProjectIntegrationPipelinesEmailArrayOutput
}

type ProjectIntegrationPipelinesEmailArray []ProjectIntegrationPipelinesEmailInput

func (ProjectIntegrationPipelinesEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationPipelinesEmail)(nil)).Elem()
}

func (i ProjectIntegrationPipelinesEmailArray) ToProjectIntegrationPipelinesEmailArrayOutput() ProjectIntegrationPipelinesEmailArrayOutput {
	return i.ToProjectIntegrationPipelinesEmailArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationPipelinesEmailArray) ToProjectIntegrationPipelinesEmailArrayOutputWithContext(ctx context.Context) ProjectIntegrationPipelinesEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationPipelinesEmailArrayOutput)
}

// ProjectIntegrationPipelinesEmailMapInput is an input type that accepts ProjectIntegrationPipelinesEmailMap and ProjectIntegrationPipelinesEmailMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationPipelinesEmailMapInput` via:
//
//	ProjectIntegrationPipelinesEmailMap{ "key": ProjectIntegrationPipelinesEmailArgs{...} }
type ProjectIntegrationPipelinesEmailMapInput interface {
	pulumi.Input

	ToProjectIntegrationPipelinesEmailMapOutput() ProjectIntegrationPipelinesEmailMapOutput
	ToProjectIntegrationPipelinesEmailMapOutputWithContext(context.Context) ProjectIntegrationPipelinesEmailMapOutput
}

type ProjectIntegrationPipelinesEmailMap map[string]ProjectIntegrationPipelinesEmailInput

func (ProjectIntegrationPipelinesEmailMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationPipelinesEmail)(nil)).Elem()
}

func (i ProjectIntegrationPipelinesEmailMap) ToProjectIntegrationPipelinesEmailMapOutput() ProjectIntegrationPipelinesEmailMapOutput {
	return i.ToProjectIntegrationPipelinesEmailMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationPipelinesEmailMap) ToProjectIntegrationPipelinesEmailMapOutputWithContext(ctx context.Context) ProjectIntegrationPipelinesEmailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationPipelinesEmailMapOutput)
}

type ProjectIntegrationPipelinesEmailOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationPipelinesEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationPipelinesEmail)(nil)).Elem()
}

func (o ProjectIntegrationPipelinesEmailOutput) ToProjectIntegrationPipelinesEmailOutput() ProjectIntegrationPipelinesEmailOutput {
	return o
}

func (o ProjectIntegrationPipelinesEmailOutput) ToProjectIntegrationPipelinesEmailOutputWithContext(ctx context.Context) ProjectIntegrationPipelinesEmailOutput {
	return o
}

// Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `defaultAndProtected`. Default is `default`
func (o ProjectIntegrationPipelinesEmailOutput) BranchesToBeNotified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationPipelinesEmail) pulumi.StringPtrOutput { return v.BranchesToBeNotified }).(pulumi.StringPtrOutput)
}

// Notify only broken pipelines. Default is true.
func (o ProjectIntegrationPipelinesEmailOutput) NotifyOnlyBrokenPipelines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationPipelinesEmail) pulumi.BoolPtrOutput { return v.NotifyOnlyBrokenPipelines }).(pulumi.BoolPtrOutput)
}

// ID of the project you want to activate integration on.
func (o ProjectIntegrationPipelinesEmailOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationPipelinesEmail) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// ) email addresses where notifications are sent.
func (o ProjectIntegrationPipelinesEmailOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectIntegrationPipelinesEmail) pulumi.StringArrayOutput { return v.Recipients }).(pulumi.StringArrayOutput)
}

type ProjectIntegrationPipelinesEmailArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationPipelinesEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationPipelinesEmail)(nil)).Elem()
}

func (o ProjectIntegrationPipelinesEmailArrayOutput) ToProjectIntegrationPipelinesEmailArrayOutput() ProjectIntegrationPipelinesEmailArrayOutput {
	return o
}

func (o ProjectIntegrationPipelinesEmailArrayOutput) ToProjectIntegrationPipelinesEmailArrayOutputWithContext(ctx context.Context) ProjectIntegrationPipelinesEmailArrayOutput {
	return o
}

func (o ProjectIntegrationPipelinesEmailArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationPipelinesEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationPipelinesEmail {
		return vs[0].([]*ProjectIntegrationPipelinesEmail)[vs[1].(int)]
	}).(ProjectIntegrationPipelinesEmailOutput)
}

type ProjectIntegrationPipelinesEmailMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationPipelinesEmailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationPipelinesEmail)(nil)).Elem()
}

func (o ProjectIntegrationPipelinesEmailMapOutput) ToProjectIntegrationPipelinesEmailMapOutput() ProjectIntegrationPipelinesEmailMapOutput {
	return o
}

func (o ProjectIntegrationPipelinesEmailMapOutput) ToProjectIntegrationPipelinesEmailMapOutputWithContext(ctx context.Context) ProjectIntegrationPipelinesEmailMapOutput {
	return o
}

func (o ProjectIntegrationPipelinesEmailMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationPipelinesEmailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationPipelinesEmail {
		return vs[0].(map[string]*ProjectIntegrationPipelinesEmail)[vs[1].(string)]
	}).(ProjectIntegrationPipelinesEmailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationPipelinesEmailInput)(nil)).Elem(), &ProjectIntegrationPipelinesEmail{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationPipelinesEmailArrayInput)(nil)).Elem(), ProjectIntegrationPipelinesEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationPipelinesEmailMapInput)(nil)).Elem(), ProjectIntegrationPipelinesEmailMap{})
	pulumi.RegisterOutputType(ProjectIntegrationPipelinesEmailOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationPipelinesEmailArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationPipelinesEmailMapOutput{})
}
