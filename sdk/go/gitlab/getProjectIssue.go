// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIssue` data source allows to retrieve details about an issue in a project.
//
// **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := gitlab.LookupProject(ctx, &GetProjectArgs{
// 			Id: pulumi.StringRef("foo/bar/baz"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = gitlab.LookupProjectIssue(ctx, &GetProjectIssueArgs{
// 			Project: foo.Id,
// 			Iid:     1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("welcomeIssueWebUrl", data.Gitlab_project_issue.Web_url)
// 		return nil
// 	})
// }
// ```
func LookupProjectIssue(ctx *pulumi.Context, args *LookupProjectIssueArgs, opts ...pulumi.InvokeOption) (*LookupProjectIssueResult, error) {
	var rv LookupProjectIssueResult
	err := ctx.Invoke("gitlab:index/getProjectIssue:getProjectIssue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectIssue.
type LookupProjectIssueArgs struct {
	Iid     int    `pulumi:"iid"`
	Project string `pulumi:"project"`
}

// A collection of values returned by getProjectIssue.
type LookupProjectIssueResult struct {
	AssigneeIds         []int  `pulumi:"assigneeIds"`
	AuthorId            int    `pulumi:"authorId"`
	ClosedAt            string `pulumi:"closedAt"`
	ClosedByUserId      int    `pulumi:"closedByUserId"`
	Confidential        bool   `pulumi:"confidential"`
	CreatedAt           string `pulumi:"createdAt"`
	Description         string `pulumi:"description"`
	DiscussionLocked    bool   `pulumi:"discussionLocked"`
	DiscussionToResolve string `pulumi:"discussionToResolve"`
	Downvotes           int    `pulumi:"downvotes"`
	DueDate             string `pulumi:"dueDate"`
	EpicId              int    `pulumi:"epicId"`
	EpicIssueId         int    `pulumi:"epicIssueId"`
	ExternalId          string `pulumi:"externalId"`
	HumanTimeEstimate   string `pulumi:"humanTimeEstimate"`
	HumanTotalTimeSpent string `pulumi:"humanTotalTimeSpent"`
	// The provider-assigned unique ID for this managed resource.
	Id                                 string                                `pulumi:"id"`
	Iid                                int                                   `pulumi:"iid"`
	IssueId                            int                                   `pulumi:"issueId"`
	IssueLinkId                        int                                   `pulumi:"issueLinkId"`
	IssueType                          string                                `pulumi:"issueType"`
	Labels                             []string                              `pulumi:"labels"`
	Links                              map[string]string                     `pulumi:"links"`
	MergeRequestToResolveDiscussionsOf int                                   `pulumi:"mergeRequestToResolveDiscussionsOf"`
	MergeRequestsCount                 int                                   `pulumi:"mergeRequestsCount"`
	MilestoneId                        int                                   `pulumi:"milestoneId"`
	MovedToId                          int                                   `pulumi:"movedToId"`
	Project                            string                                `pulumi:"project"`
	References                         map[string]string                     `pulumi:"references"`
	State                              string                                `pulumi:"state"`
	Subscribed                         bool                                  `pulumi:"subscribed"`
	TaskCompletionStatuses             []GetProjectIssueTaskCompletionStatus `pulumi:"taskCompletionStatuses"`
	TimeEstimate                       int                                   `pulumi:"timeEstimate"`
	Title                              string                                `pulumi:"title"`
	TotalTimeSpent                     int                                   `pulumi:"totalTimeSpent"`
	UpdatedAt                          string                                `pulumi:"updatedAt"`
	Upvotes                            int                                   `pulumi:"upvotes"`
	UserNotesCount                     int                                   `pulumi:"userNotesCount"`
	WebUrl                             string                                `pulumi:"webUrl"`
	Weight                             int                                   `pulumi:"weight"`
}

func LookupProjectIssueOutput(ctx *pulumi.Context, args LookupProjectIssueOutputArgs, opts ...pulumi.InvokeOption) LookupProjectIssueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectIssueResult, error) {
			args := v.(LookupProjectIssueArgs)
			r, err := LookupProjectIssue(ctx, &args, opts...)
			var s LookupProjectIssueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectIssueResultOutput)
}

// A collection of arguments for invoking getProjectIssue.
type LookupProjectIssueOutputArgs struct {
	Iid     pulumi.IntInput    `pulumi:"iid"`
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupProjectIssueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectIssueArgs)(nil)).Elem()
}

// A collection of values returned by getProjectIssue.
type LookupProjectIssueResultOutput struct{ *pulumi.OutputState }

func (LookupProjectIssueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectIssueResult)(nil)).Elem()
}

func (o LookupProjectIssueResultOutput) ToLookupProjectIssueResultOutput() LookupProjectIssueResultOutput {
	return o
}

func (o LookupProjectIssueResultOutput) ToLookupProjectIssueResultOutputWithContext(ctx context.Context) LookupProjectIssueResultOutput {
	return o
}

func (o LookupProjectIssueResultOutput) AssigneeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) []int { return v.AssigneeIds }).(pulumi.IntArrayOutput)
}

func (o LookupProjectIssueResultOutput) AuthorId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.AuthorId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) ClosedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.ClosedAt }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) ClosedByUserId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.ClosedByUserId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) Confidential() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) bool { return v.Confidential }).(pulumi.BoolOutput)
}

func (o LookupProjectIssueResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) DiscussionLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) bool { return v.DiscussionLocked }).(pulumi.BoolOutput)
}

func (o LookupProjectIssueResultOutput) DiscussionToResolve() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.DiscussionToResolve }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) Downvotes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.Downvotes }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) DueDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.DueDate }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) EpicId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.EpicId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) EpicIssueId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.EpicIssueId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.ExternalId }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) HumanTimeEstimate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.HumanTimeEstimate }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) HumanTotalTimeSpent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.HumanTotalTimeSpent }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectIssueResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) Iid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.Iid }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) IssueId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.IssueId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) IssueLinkId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.IssueLinkId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) IssueType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.IssueType }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o LookupProjectIssueResultOutput) Links() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) map[string]string { return v.Links }).(pulumi.StringMapOutput)
}

func (o LookupProjectIssueResultOutput) MergeRequestToResolveDiscussionsOf() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.MergeRequestToResolveDiscussionsOf }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) MergeRequestsCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.MergeRequestsCount }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) MilestoneId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.MilestoneId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) MovedToId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.MovedToId }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) References() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) map[string]string { return v.References }).(pulumi.StringMapOutput)
}

func (o LookupProjectIssueResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) Subscribed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) bool { return v.Subscribed }).(pulumi.BoolOutput)
}

func (o LookupProjectIssueResultOutput) TaskCompletionStatuses() GetProjectIssueTaskCompletionStatusArrayOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) []GetProjectIssueTaskCompletionStatus {
		return v.TaskCompletionStatuses
	}).(GetProjectIssueTaskCompletionStatusArrayOutput)
}

func (o LookupProjectIssueResultOutput) TimeEstimate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.TimeEstimate }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.Title }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) TotalTimeSpent() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.TotalTimeSpent }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) Upvotes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.Upvotes }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) UserNotesCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.UserNotesCount }).(pulumi.IntOutput)
}

func (o LookupProjectIssueResultOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) string { return v.WebUrl }).(pulumi.StringOutput)
}

func (o LookupProjectIssueResultOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectIssueResult) int { return v.Weight }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectIssueResultOutput{})
}
