// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationExternalWiki` resource manages the lifecycle of a project integration with the External Wiki Service.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#external-wiki)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationExternalWiki(ctx, "wiki", &gitlab.ProjectIntegrationExternalWikiArgs{
//				Project:         awesomeProject.ID(),
//				ExternalWikiUrl: pulumi.String("https://MyAwesomeExternalWikiURL.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_external_wiki`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_external_wiki.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// You can import a gitlab_project_integration_external_wiki state using the project ID, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationExternalWiki:ProjectIntegrationExternalWiki wiki 1
// ```
type ProjectIntegrationExternalWiki struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The URL of the external wiki.
	ExternalWikiUrl pulumi.StringOutput `pulumi:"externalWikiUrl"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Title of the integration.
	Title pulumi.StringOutput `pulumi:"title"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewProjectIntegrationExternalWiki registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationExternalWiki(ctx *pulumi.Context,
	name string, args *ProjectIntegrationExternalWikiArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationExternalWiki, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalWikiUrl == nil {
		return nil, errors.New("invalid value for required argument 'ExternalWikiUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationExternalWiki
	err := ctx.RegisterResource("gitlab:index/projectIntegrationExternalWiki:ProjectIntegrationExternalWiki", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationExternalWiki gets an existing ProjectIntegrationExternalWiki resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationExternalWiki(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationExternalWikiState, opts ...pulumi.ResourceOption) (*ProjectIntegrationExternalWiki, error) {
	var resource ProjectIntegrationExternalWiki
	err := ctx.ReadResource("gitlab:index/projectIntegrationExternalWiki:ProjectIntegrationExternalWiki", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationExternalWiki resources.
type projectIntegrationExternalWikiState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// The URL of the external wiki.
	ExternalWikiUrl *string `pulumi:"externalWikiUrl"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug *string `pulumi:"slug"`
	// Title of the integration.
	Title *string `pulumi:"title"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ProjectIntegrationExternalWikiState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringPtrInput
	// The URL of the external wiki.
	ExternalWikiUrl pulumi.StringPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringPtrInput
	// Title of the integration.
	Title pulumi.StringPtrInput
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (ProjectIntegrationExternalWikiState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationExternalWikiState)(nil)).Elem()
}

type projectIntegrationExternalWikiArgs struct {
	// The URL of the external wiki.
	ExternalWikiUrl string `pulumi:"externalWikiUrl"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectIntegrationExternalWiki resource.
type ProjectIntegrationExternalWikiArgs struct {
	// The URL of the external wiki.
	ExternalWikiUrl pulumi.StringInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
}

func (ProjectIntegrationExternalWikiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationExternalWikiArgs)(nil)).Elem()
}

type ProjectIntegrationExternalWikiInput interface {
	pulumi.Input

	ToProjectIntegrationExternalWikiOutput() ProjectIntegrationExternalWikiOutput
	ToProjectIntegrationExternalWikiOutputWithContext(ctx context.Context) ProjectIntegrationExternalWikiOutput
}

func (*ProjectIntegrationExternalWiki) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationExternalWiki)(nil)).Elem()
}

func (i *ProjectIntegrationExternalWiki) ToProjectIntegrationExternalWikiOutput() ProjectIntegrationExternalWikiOutput {
	return i.ToProjectIntegrationExternalWikiOutputWithContext(context.Background())
}

func (i *ProjectIntegrationExternalWiki) ToProjectIntegrationExternalWikiOutputWithContext(ctx context.Context) ProjectIntegrationExternalWikiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationExternalWikiOutput)
}

// ProjectIntegrationExternalWikiArrayInput is an input type that accepts ProjectIntegrationExternalWikiArray and ProjectIntegrationExternalWikiArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationExternalWikiArrayInput` via:
//
//	ProjectIntegrationExternalWikiArray{ ProjectIntegrationExternalWikiArgs{...} }
type ProjectIntegrationExternalWikiArrayInput interface {
	pulumi.Input

	ToProjectIntegrationExternalWikiArrayOutput() ProjectIntegrationExternalWikiArrayOutput
	ToProjectIntegrationExternalWikiArrayOutputWithContext(context.Context) ProjectIntegrationExternalWikiArrayOutput
}

type ProjectIntegrationExternalWikiArray []ProjectIntegrationExternalWikiInput

func (ProjectIntegrationExternalWikiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationExternalWiki)(nil)).Elem()
}

func (i ProjectIntegrationExternalWikiArray) ToProjectIntegrationExternalWikiArrayOutput() ProjectIntegrationExternalWikiArrayOutput {
	return i.ToProjectIntegrationExternalWikiArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationExternalWikiArray) ToProjectIntegrationExternalWikiArrayOutputWithContext(ctx context.Context) ProjectIntegrationExternalWikiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationExternalWikiArrayOutput)
}

// ProjectIntegrationExternalWikiMapInput is an input type that accepts ProjectIntegrationExternalWikiMap and ProjectIntegrationExternalWikiMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationExternalWikiMapInput` via:
//
//	ProjectIntegrationExternalWikiMap{ "key": ProjectIntegrationExternalWikiArgs{...} }
type ProjectIntegrationExternalWikiMapInput interface {
	pulumi.Input

	ToProjectIntegrationExternalWikiMapOutput() ProjectIntegrationExternalWikiMapOutput
	ToProjectIntegrationExternalWikiMapOutputWithContext(context.Context) ProjectIntegrationExternalWikiMapOutput
}

type ProjectIntegrationExternalWikiMap map[string]ProjectIntegrationExternalWikiInput

func (ProjectIntegrationExternalWikiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationExternalWiki)(nil)).Elem()
}

func (i ProjectIntegrationExternalWikiMap) ToProjectIntegrationExternalWikiMapOutput() ProjectIntegrationExternalWikiMapOutput {
	return i.ToProjectIntegrationExternalWikiMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationExternalWikiMap) ToProjectIntegrationExternalWikiMapOutputWithContext(ctx context.Context) ProjectIntegrationExternalWikiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationExternalWikiMapOutput)
}

type ProjectIntegrationExternalWikiOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationExternalWikiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationExternalWiki)(nil)).Elem()
}

func (o ProjectIntegrationExternalWikiOutput) ToProjectIntegrationExternalWikiOutput() ProjectIntegrationExternalWikiOutput {
	return o
}

func (o ProjectIntegrationExternalWikiOutput) ToProjectIntegrationExternalWikiOutputWithContext(ctx context.Context) ProjectIntegrationExternalWikiOutput {
	return o
}

// Whether the integration is active.
func (o ProjectIntegrationExternalWikiOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationExternalWiki) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The ISO8601 date/time that this integration was activated at in UTC.
func (o ProjectIntegrationExternalWikiOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationExternalWiki) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL of the external wiki.
func (o ProjectIntegrationExternalWikiOutput) ExternalWikiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationExternalWiki) pulumi.StringOutput { return v.ExternalWikiUrl }).(pulumi.StringOutput)
}

// ID of the project you want to activate integration on.
func (o ProjectIntegrationExternalWikiOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationExternalWiki) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
func (o ProjectIntegrationExternalWikiOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationExternalWiki) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Title of the integration.
func (o ProjectIntegrationExternalWikiOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationExternalWiki) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The ISO8601 date/time that this integration was last updated at in UTC.
func (o ProjectIntegrationExternalWikiOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationExternalWiki) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ProjectIntegrationExternalWikiArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationExternalWikiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationExternalWiki)(nil)).Elem()
}

func (o ProjectIntegrationExternalWikiArrayOutput) ToProjectIntegrationExternalWikiArrayOutput() ProjectIntegrationExternalWikiArrayOutput {
	return o
}

func (o ProjectIntegrationExternalWikiArrayOutput) ToProjectIntegrationExternalWikiArrayOutputWithContext(ctx context.Context) ProjectIntegrationExternalWikiArrayOutput {
	return o
}

func (o ProjectIntegrationExternalWikiArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationExternalWikiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationExternalWiki {
		return vs[0].([]*ProjectIntegrationExternalWiki)[vs[1].(int)]
	}).(ProjectIntegrationExternalWikiOutput)
}

type ProjectIntegrationExternalWikiMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationExternalWikiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationExternalWiki)(nil)).Elem()
}

func (o ProjectIntegrationExternalWikiMapOutput) ToProjectIntegrationExternalWikiMapOutput() ProjectIntegrationExternalWikiMapOutput {
	return o
}

func (o ProjectIntegrationExternalWikiMapOutput) ToProjectIntegrationExternalWikiMapOutputWithContext(ctx context.Context) ProjectIntegrationExternalWikiMapOutput {
	return o
}

func (o ProjectIntegrationExternalWikiMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationExternalWikiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationExternalWiki {
		return vs[0].(map[string]*ProjectIntegrationExternalWiki)[vs[1].(string)]
	}).(ProjectIntegrationExternalWikiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationExternalWikiInput)(nil)).Elem(), &ProjectIntegrationExternalWiki{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationExternalWikiArrayInput)(nil)).Elem(), ProjectIntegrationExternalWikiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationExternalWikiMapInput)(nil)).Elem(), ProjectIntegrationExternalWikiMap{})
	pulumi.RegisterOutputType(ProjectIntegrationExternalWikiOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationExternalWikiArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationExternalWikiMapOutput{})
}
