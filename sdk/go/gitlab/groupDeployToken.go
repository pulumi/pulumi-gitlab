// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `GroupDeployToken` resource allows you to manage the lifecycle of deploy tokens on a group.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_tokens/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Example Usage
//			_, err := gitlab.NewGroupDeployToken(ctx, "example", &gitlab.GroupDeployTokenArgs{
//				Group:     pulumi.String("example/deploying"),
//				Name:      pulumi.String("Example group deploy token"),
//				Username:  pulumi.String("example-username"),
//				ExpiresAt: pulumi.String("2020-03-14T00:00:00.000Z"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("read_repository"),
//					pulumi.String("read_registry"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeTimeadd, err := std.Timeadd(ctx, &std.TimeaddArgs{
//				Duration:  std.Timestamp(ctx, &std.TimestampArgs{}, nil).Result,
//				Timestamp: "24h",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewGroupDeployToken(ctx, "example-two", &gitlab.GroupDeployTokenArgs{
//				Group:     pulumi.String("12345678"),
//				Name:      pulumi.String("Example group deploy token expires in 24h"),
//				ExpiresAt: pulumi.String(invokeTimeadd.Result),
//				Scopes: pulumi.StringArray{
//					pulumi.String("read_repository"),
//					pulumi.String("read_registry"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_deploy_token`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_group_deploy_token.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// GitLab group deploy tokens can be imported using an id made up of `{group_id}:{deploy_token_id}`.
//
// ```sh
// $ pulumi import gitlab:index/groupDeployToken:GroupDeployToken group_token 1:4
// ```
//
// Note: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
type GroupDeployToken struct {
	pulumi.CustomResourceState

	// True if the token is expired.
	Expired pulumi.BoolOutput `pulumi:"expired"`
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The Id or full path of the group.
	Group pulumi.StringOutput `pulumi:"group"`
	// A name to describe the deploy token with.
	Name pulumi.StringOutput `pulumi:"name"`
	// True if the token is revoked.
	Revoked pulumi.BoolOutput `pulumi:"revoked"`
	// The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
	Token pulumi.StringOutput `pulumi:"token"`
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username pulumi.StringOutput `pulumi:"username"`
	// Wether to validate if the expiration date is in the future.
	ValidatePastExpirationDate pulumi.BoolOutput `pulumi:"validatePastExpirationDate"`
}

// NewGroupDeployToken registers a new resource with the given unique name, arguments, and options.
func NewGroupDeployToken(ctx *pulumi.Context,
	name string, args *GroupDeployTokenArgs, opts ...pulumi.ResourceOption) (*GroupDeployToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupDeployToken
	err := ctx.RegisterResource("gitlab:index/groupDeployToken:GroupDeployToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupDeployToken gets an existing GroupDeployToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupDeployToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupDeployTokenState, opts ...pulumi.ResourceOption) (*GroupDeployToken, error) {
	var resource GroupDeployToken
	err := ctx.ReadResource("gitlab:index/groupDeployToken:GroupDeployToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupDeployToken resources.
type groupDeployTokenState struct {
	// True if the token is expired.
	Expired *bool `pulumi:"expired"`
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The Id or full path of the group.
	Group *string `pulumi:"group"`
	// A name to describe the deploy token with.
	Name *string `pulumi:"name"`
	// True if the token is revoked.
	Revoked *bool `pulumi:"revoked"`
	// The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes []string `pulumi:"scopes"`
	// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
	Token *string `pulumi:"token"`
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username *string `pulumi:"username"`
	// Wether to validate if the expiration date is in the future.
	ValidatePastExpirationDate *bool `pulumi:"validatePastExpirationDate"`
}

type GroupDeployTokenState struct {
	// True if the token is expired.
	Expired pulumi.BoolPtrInput
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt pulumi.StringPtrInput
	// The Id or full path of the group.
	Group pulumi.StringPtrInput
	// A name to describe the deploy token with.
	Name pulumi.StringPtrInput
	// True if the token is revoked.
	Revoked pulumi.BoolPtrInput
	// The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes pulumi.StringArrayInput
	// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
	Token pulumi.StringPtrInput
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username pulumi.StringPtrInput
	// Wether to validate if the expiration date is in the future.
	ValidatePastExpirationDate pulumi.BoolPtrInput
}

func (GroupDeployTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupDeployTokenState)(nil)).Elem()
}

type groupDeployTokenArgs struct {
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The Id or full path of the group.
	Group string `pulumi:"group"`
	// A name to describe the deploy token with.
	Name *string `pulumi:"name"`
	// The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes []string `pulumi:"scopes"`
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username *string `pulumi:"username"`
	// Wether to validate if the expiration date is in the future.
	ValidatePastExpirationDate *bool `pulumi:"validatePastExpirationDate"`
}

// The set of arguments for constructing a GroupDeployToken resource.
type GroupDeployTokenArgs struct {
	// Time the token expires in RFC3339 format. Not set by default.
	ExpiresAt pulumi.StringPtrInput
	// The Id or full path of the group.
	Group pulumi.StringInput
	// A name to describe the deploy token with.
	Name pulumi.StringPtrInput
	// The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
	Scopes pulumi.StringArrayInput
	// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
	Username pulumi.StringPtrInput
	// Wether to validate if the expiration date is in the future.
	ValidatePastExpirationDate pulumi.BoolPtrInput
}

func (GroupDeployTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupDeployTokenArgs)(nil)).Elem()
}

type GroupDeployTokenInput interface {
	pulumi.Input

	ToGroupDeployTokenOutput() GroupDeployTokenOutput
	ToGroupDeployTokenOutputWithContext(ctx context.Context) GroupDeployTokenOutput
}

func (*GroupDeployToken) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupDeployToken)(nil)).Elem()
}

func (i *GroupDeployToken) ToGroupDeployTokenOutput() GroupDeployTokenOutput {
	return i.ToGroupDeployTokenOutputWithContext(context.Background())
}

func (i *GroupDeployToken) ToGroupDeployTokenOutputWithContext(ctx context.Context) GroupDeployTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDeployTokenOutput)
}

// GroupDeployTokenArrayInput is an input type that accepts GroupDeployTokenArray and GroupDeployTokenArrayOutput values.
// You can construct a concrete instance of `GroupDeployTokenArrayInput` via:
//
//	GroupDeployTokenArray{ GroupDeployTokenArgs{...} }
type GroupDeployTokenArrayInput interface {
	pulumi.Input

	ToGroupDeployTokenArrayOutput() GroupDeployTokenArrayOutput
	ToGroupDeployTokenArrayOutputWithContext(context.Context) GroupDeployTokenArrayOutput
}

type GroupDeployTokenArray []GroupDeployTokenInput

func (GroupDeployTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupDeployToken)(nil)).Elem()
}

func (i GroupDeployTokenArray) ToGroupDeployTokenArrayOutput() GroupDeployTokenArrayOutput {
	return i.ToGroupDeployTokenArrayOutputWithContext(context.Background())
}

func (i GroupDeployTokenArray) ToGroupDeployTokenArrayOutputWithContext(ctx context.Context) GroupDeployTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDeployTokenArrayOutput)
}

// GroupDeployTokenMapInput is an input type that accepts GroupDeployTokenMap and GroupDeployTokenMapOutput values.
// You can construct a concrete instance of `GroupDeployTokenMapInput` via:
//
//	GroupDeployTokenMap{ "key": GroupDeployTokenArgs{...} }
type GroupDeployTokenMapInput interface {
	pulumi.Input

	ToGroupDeployTokenMapOutput() GroupDeployTokenMapOutput
	ToGroupDeployTokenMapOutputWithContext(context.Context) GroupDeployTokenMapOutput
}

type GroupDeployTokenMap map[string]GroupDeployTokenInput

func (GroupDeployTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupDeployToken)(nil)).Elem()
}

func (i GroupDeployTokenMap) ToGroupDeployTokenMapOutput() GroupDeployTokenMapOutput {
	return i.ToGroupDeployTokenMapOutputWithContext(context.Background())
}

func (i GroupDeployTokenMap) ToGroupDeployTokenMapOutputWithContext(ctx context.Context) GroupDeployTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDeployTokenMapOutput)
}

type GroupDeployTokenOutput struct{ *pulumi.OutputState }

func (GroupDeployTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupDeployToken)(nil)).Elem()
}

func (o GroupDeployTokenOutput) ToGroupDeployTokenOutput() GroupDeployTokenOutput {
	return o
}

func (o GroupDeployTokenOutput) ToGroupDeployTokenOutputWithContext(ctx context.Context) GroupDeployTokenOutput {
	return o
}

// True if the token is expired.
func (o GroupDeployTokenOutput) Expired() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.BoolOutput { return v.Expired }).(pulumi.BoolOutput)
}

// Time the token expires in RFC3339 format. Not set by default.
func (o GroupDeployTokenOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The Id or full path of the group.
func (o GroupDeployTokenOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// A name to describe the deploy token with.
func (o GroupDeployTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// True if the token is revoked.
func (o GroupDeployTokenOutput) Revoked() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.BoolOutput { return v.Revoked }).(pulumi.BoolOutput)
}

// The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
func (o GroupDeployTokenOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
func (o GroupDeployTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
func (o GroupDeployTokenOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Wether to validate if the expiration date is in the future.
func (o GroupDeployTokenOutput) ValidatePastExpirationDate() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupDeployToken) pulumi.BoolOutput { return v.ValidatePastExpirationDate }).(pulumi.BoolOutput)
}

type GroupDeployTokenArrayOutput struct{ *pulumi.OutputState }

func (GroupDeployTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupDeployToken)(nil)).Elem()
}

func (o GroupDeployTokenArrayOutput) ToGroupDeployTokenArrayOutput() GroupDeployTokenArrayOutput {
	return o
}

func (o GroupDeployTokenArrayOutput) ToGroupDeployTokenArrayOutputWithContext(ctx context.Context) GroupDeployTokenArrayOutput {
	return o
}

func (o GroupDeployTokenArrayOutput) Index(i pulumi.IntInput) GroupDeployTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupDeployToken {
		return vs[0].([]*GroupDeployToken)[vs[1].(int)]
	}).(GroupDeployTokenOutput)
}

type GroupDeployTokenMapOutput struct{ *pulumi.OutputState }

func (GroupDeployTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupDeployToken)(nil)).Elem()
}

func (o GroupDeployTokenMapOutput) ToGroupDeployTokenMapOutput() GroupDeployTokenMapOutput {
	return o
}

func (o GroupDeployTokenMapOutput) ToGroupDeployTokenMapOutputWithContext(ctx context.Context) GroupDeployTokenMapOutput {
	return o
}

func (o GroupDeployTokenMapOutput) MapIndex(k pulumi.StringInput) GroupDeployTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupDeployToken {
		return vs[0].(map[string]*GroupDeployToken)[vs[1].(string)]
	}).(GroupDeployTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDeployTokenInput)(nil)).Elem(), &GroupDeployToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDeployTokenArrayInput)(nil)).Elem(), GroupDeployTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDeployTokenMapInput)(nil)).Elem(), GroupDeployTokenMap{})
	pulumi.RegisterOutputType(GroupDeployTokenOutput{})
	pulumi.RegisterOutputType(GroupDeployTokenArrayOutput{})
	pulumi.RegisterOutputType(GroupDeployTokenMapOutput{})
}
