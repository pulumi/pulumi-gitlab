// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectJobTokenScopes` resource allows to manage the CI/CD Job Token scopes in a project.
// Any project not within the defined set in this attribute will be removed, which allows this resource to be used as an explicit deny.
//
// > Conflicts with the use of `ProjectJobTokenScope` when used on the same project. Use one or the other to ensure the desired state.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_job_token_scopes.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewProjectJobTokenScopes(ctx, "allowed_single_project", &gitlab.ProjectJobTokenScopesArgs{
//				ProjectId: pulumi.Int(111),
//				TargetProjectIds: pulumi.IntArray{
//					pulumi.Int(123),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectJobTokenScopes(ctx, "allowed_multiple_project", &gitlab.ProjectJobTokenScopesArgs{
//				ProjectId: pulumi.Int(111),
//				TargetProjectIds: pulumi.IntArray{
//					pulumi.Int(123),
//					pulumi.Int(456),
//					pulumi.Int(789),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// This will remove all job token scopes, even if added outside of TF.
//			_, err = gitlab.NewProjectJobTokenScopes(ctx, "explicit_deny", &gitlab.ProjectJobTokenScopesArgs{
//				ProjectId:        pulumi.Int(111),
//				TargetProjectIds: pulumi.IntArray{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GitLab project job token scopes can be imported using an id made up of just the `project_id` as an integer
//
// ```sh
// $ pulumi import gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes bar 123
// ```
type ProjectJobTokenScopes struct {
	pulumi.CustomResourceState

	// The ID of the project.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// A set of project IDs that are in the CI/CD job token inbound allowlist.
	TargetProjectIds pulumi.IntArrayOutput `pulumi:"targetProjectIds"`
}

// NewProjectJobTokenScopes registers a new resource with the given unique name, arguments, and options.
func NewProjectJobTokenScopes(ctx *pulumi.Context,
	name string, args *ProjectJobTokenScopesArgs, opts ...pulumi.ResourceOption) (*ProjectJobTokenScopes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TargetProjectIds == nil {
		return nil, errors.New("invalid value for required argument 'TargetProjectIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectJobTokenScopes
	err := ctx.RegisterResource("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectJobTokenScopes gets an existing ProjectJobTokenScopes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectJobTokenScopes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectJobTokenScopesState, opts ...pulumi.ResourceOption) (*ProjectJobTokenScopes, error) {
	var resource ProjectJobTokenScopes
	err := ctx.ReadResource("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectJobTokenScopes resources.
type projectJobTokenScopesState struct {
	// The ID of the project.
	ProjectId *int `pulumi:"projectId"`
	// A set of project IDs that are in the CI/CD job token inbound allowlist.
	TargetProjectIds []int `pulumi:"targetProjectIds"`
}

type ProjectJobTokenScopesState struct {
	// The ID of the project.
	ProjectId pulumi.IntPtrInput
	// A set of project IDs that are in the CI/CD job token inbound allowlist.
	TargetProjectIds pulumi.IntArrayInput
}

func (ProjectJobTokenScopesState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectJobTokenScopesState)(nil)).Elem()
}

type projectJobTokenScopesArgs struct {
	// The ID of the project.
	ProjectId int `pulumi:"projectId"`
	// A set of project IDs that are in the CI/CD job token inbound allowlist.
	TargetProjectIds []int `pulumi:"targetProjectIds"`
}

// The set of arguments for constructing a ProjectJobTokenScopes resource.
type ProjectJobTokenScopesArgs struct {
	// The ID of the project.
	ProjectId pulumi.IntInput
	// A set of project IDs that are in the CI/CD job token inbound allowlist.
	TargetProjectIds pulumi.IntArrayInput
}

func (ProjectJobTokenScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectJobTokenScopesArgs)(nil)).Elem()
}

type ProjectJobTokenScopesInput interface {
	pulumi.Input

	ToProjectJobTokenScopesOutput() ProjectJobTokenScopesOutput
	ToProjectJobTokenScopesOutputWithContext(ctx context.Context) ProjectJobTokenScopesOutput
}

func (*ProjectJobTokenScopes) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectJobTokenScopes)(nil)).Elem()
}

func (i *ProjectJobTokenScopes) ToProjectJobTokenScopesOutput() ProjectJobTokenScopesOutput {
	return i.ToProjectJobTokenScopesOutputWithContext(context.Background())
}

func (i *ProjectJobTokenScopes) ToProjectJobTokenScopesOutputWithContext(ctx context.Context) ProjectJobTokenScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJobTokenScopesOutput)
}

// ProjectJobTokenScopesArrayInput is an input type that accepts ProjectJobTokenScopesArray and ProjectJobTokenScopesArrayOutput values.
// You can construct a concrete instance of `ProjectJobTokenScopesArrayInput` via:
//
//	ProjectJobTokenScopesArray{ ProjectJobTokenScopesArgs{...} }
type ProjectJobTokenScopesArrayInput interface {
	pulumi.Input

	ToProjectJobTokenScopesArrayOutput() ProjectJobTokenScopesArrayOutput
	ToProjectJobTokenScopesArrayOutputWithContext(context.Context) ProjectJobTokenScopesArrayOutput
}

type ProjectJobTokenScopesArray []ProjectJobTokenScopesInput

func (ProjectJobTokenScopesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectJobTokenScopes)(nil)).Elem()
}

func (i ProjectJobTokenScopesArray) ToProjectJobTokenScopesArrayOutput() ProjectJobTokenScopesArrayOutput {
	return i.ToProjectJobTokenScopesArrayOutputWithContext(context.Background())
}

func (i ProjectJobTokenScopesArray) ToProjectJobTokenScopesArrayOutputWithContext(ctx context.Context) ProjectJobTokenScopesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJobTokenScopesArrayOutput)
}

// ProjectJobTokenScopesMapInput is an input type that accepts ProjectJobTokenScopesMap and ProjectJobTokenScopesMapOutput values.
// You can construct a concrete instance of `ProjectJobTokenScopesMapInput` via:
//
//	ProjectJobTokenScopesMap{ "key": ProjectJobTokenScopesArgs{...} }
type ProjectJobTokenScopesMapInput interface {
	pulumi.Input

	ToProjectJobTokenScopesMapOutput() ProjectJobTokenScopesMapOutput
	ToProjectJobTokenScopesMapOutputWithContext(context.Context) ProjectJobTokenScopesMapOutput
}

type ProjectJobTokenScopesMap map[string]ProjectJobTokenScopesInput

func (ProjectJobTokenScopesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectJobTokenScopes)(nil)).Elem()
}

func (i ProjectJobTokenScopesMap) ToProjectJobTokenScopesMapOutput() ProjectJobTokenScopesMapOutput {
	return i.ToProjectJobTokenScopesMapOutputWithContext(context.Background())
}

func (i ProjectJobTokenScopesMap) ToProjectJobTokenScopesMapOutputWithContext(ctx context.Context) ProjectJobTokenScopesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJobTokenScopesMapOutput)
}

type ProjectJobTokenScopesOutput struct{ *pulumi.OutputState }

func (ProjectJobTokenScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectJobTokenScopes)(nil)).Elem()
}

func (o ProjectJobTokenScopesOutput) ToProjectJobTokenScopesOutput() ProjectJobTokenScopesOutput {
	return o
}

func (o ProjectJobTokenScopesOutput) ToProjectJobTokenScopesOutputWithContext(ctx context.Context) ProjectJobTokenScopesOutput {
	return o
}

// The ID of the project.
func (o ProjectJobTokenScopesOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectJobTokenScopes) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// A set of project IDs that are in the CI/CD job token inbound allowlist.
func (o ProjectJobTokenScopesOutput) TargetProjectIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ProjectJobTokenScopes) pulumi.IntArrayOutput { return v.TargetProjectIds }).(pulumi.IntArrayOutput)
}

type ProjectJobTokenScopesArrayOutput struct{ *pulumi.OutputState }

func (ProjectJobTokenScopesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectJobTokenScopes)(nil)).Elem()
}

func (o ProjectJobTokenScopesArrayOutput) ToProjectJobTokenScopesArrayOutput() ProjectJobTokenScopesArrayOutput {
	return o
}

func (o ProjectJobTokenScopesArrayOutput) ToProjectJobTokenScopesArrayOutputWithContext(ctx context.Context) ProjectJobTokenScopesArrayOutput {
	return o
}

func (o ProjectJobTokenScopesArrayOutput) Index(i pulumi.IntInput) ProjectJobTokenScopesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectJobTokenScopes {
		return vs[0].([]*ProjectJobTokenScopes)[vs[1].(int)]
	}).(ProjectJobTokenScopesOutput)
}

type ProjectJobTokenScopesMapOutput struct{ *pulumi.OutputState }

func (ProjectJobTokenScopesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectJobTokenScopes)(nil)).Elem()
}

func (o ProjectJobTokenScopesMapOutput) ToProjectJobTokenScopesMapOutput() ProjectJobTokenScopesMapOutput {
	return o
}

func (o ProjectJobTokenScopesMapOutput) ToProjectJobTokenScopesMapOutputWithContext(ctx context.Context) ProjectJobTokenScopesMapOutput {
	return o
}

func (o ProjectJobTokenScopesMapOutput) MapIndex(k pulumi.StringInput) ProjectJobTokenScopesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectJobTokenScopes {
		return vs[0].(map[string]*ProjectJobTokenScopes)[vs[1].(string)]
	}).(ProjectJobTokenScopesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJobTokenScopesInput)(nil)).Elem(), &ProjectJobTokenScopes{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJobTokenScopesArrayInput)(nil)).Elem(), ProjectJobTokenScopesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJobTokenScopesMapInput)(nil)).Elem(), ProjectJobTokenScopesMap{})
	pulumi.RegisterOutputType(ProjectJobTokenScopesOutput{})
	pulumi.RegisterOutputType(ProjectJobTokenScopesArrayOutput{})
	pulumi.RegisterOutputType(ProjectJobTokenScopesMapOutput{})
}
