// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides details about a list of projects in the Gitlab provider. Listing all projects and group projects with [project filtering](https://docs.gitlab.com/ee/api/projects.html#list-user-projects) or [group project filtering](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects) is supported.
//
// > NOTE: This data source supports all available filters exposed by the `xanzy/go-gitlab` package, which might not expose all available filters exposed by the Gitlab APIs.
//
// ## Example Usage
// ### List projects within a group tree
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v2/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "mygroup"
// 		mygroup, err := gitlab.LookupGroup(ctx, &gitlab.LookupGroupArgs{
// 			FullPath: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := mygroup.Id
// 		opt2 := "name"
// 		opt3 := true
// 		opt4 := false
// 		_, err = gitlab.GetProjects(ctx, &gitlab.GetProjectsArgs{
// 			GroupId:          &opt1,
// 			OrderBy:          &opt2,
// 			IncludeSubgroups: &opt3,
// 			WithShared:       &opt4,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### List projects using the search syntax
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v2/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "postgresql"
// 		opt1 := "private"
// 		_, err := gitlab.GetProjects(ctx, &gitlab.GetProjectsArgs{
// 			Search:     &opt0,
// 			Visibility: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetProjects(ctx *pulumi.Context, args *GetProjectsArgs, opts ...pulumi.InvokeOption) (*GetProjectsResult, error) {
	var rv GetProjectsResult
	err := ctx.Invoke("gitlab:index/getProjects:getProjects", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjects.
type GetProjectsArgs struct {
	// Limit by archived status.
	Archived *bool `pulumi:"archived"`
	// The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `minAccessLevel`, `withProgrammingLanguage` or `statistics`.
	GroupId *int `pulumi:"groupId"`
	// Include projects in subgroups of this group. Default is `false`. Needs `groupId`.
	IncludeSubgroups *bool `pulumi:"includeSubgroups"`
	// Prevents overloading your Gitlab instance in case of a misconfiguration. Default is `10`.
	MaxQueryablePages *int `pulumi:"maxQueryablePages"`
	// Limit by projects that the current user is a member of.
	Membership *bool `pulumi:"membership"`
	// Limit to projects where current user has at least this access level, refer to the [official documentation](https://docs.gitlab.com/ee/api/members.html) for values. Cannot be used with `groupId`.
	MinAccessLevel *int `pulumi:"minAccessLevel"`
	// Return projects ordered by `id`, `name`, `path`, `createdAt`, `updatedAt`, or `lastActivityAt` fields. Default is `createdAt`.
	OrderBy *string `pulumi:"orderBy"`
	// Limit by projects owned by the current user.
	Owned   *bool `pulumi:"owned"`
	Page    *int  `pulumi:"page"`
	PerPage *int  `pulumi:"perPage"`
	// Return list of authorized projects matching the search criteria.
	Search *string `pulumi:"search"`
	// Return only the ID, URL, name, and path of each project.
	Simple *bool `pulumi:"simple"`
	// Return projects sorted in `asc` or `desc` order. Default is `desc`.
	Sort *string `pulumi:"sort"`
	// Limit by projects starred by the current user.
	Starred *bool `pulumi:"starred"`
	// Include project statistics. Cannot be used with `groupId`.
	Statistics *bool `pulumi:"statistics"`
	// Limit by visibility `public`, `internal`, or `private`.
	Visibility *string `pulumi:"visibility"`
	// Include custom attributes in response _(admins only)_.
	WithCustomAttributes *bool `pulumi:"withCustomAttributes"`
	// Limit by projects with issues feature enabled. Default is `false`.
	WithIssuesEnabled *bool `pulumi:"withIssuesEnabled"`
	// Limit by projects with merge requests feature enabled. Default is `false`.
	WithMergeRequestsEnabled *bool `pulumi:"withMergeRequestsEnabled"`
	// Limit by projects which use the given programming language. Cannot be used with `groupId`.
	WithProgrammingLanguage *string `pulumi:"withProgrammingLanguage"`
	// Include projects shared to this group. Default is `true`. Needs `groupId`.
	WithShared *bool `pulumi:"withShared"`
}

// A collection of values returned by getProjects.
type GetProjectsResult struct {
	Archived *bool `pulumi:"archived"`
	GroupId  *int  `pulumi:"groupId"`
	// The provider-assigned unique ID for this managed resource.
	Id                string  `pulumi:"id"`
	IncludeSubgroups  *bool   `pulumi:"includeSubgroups"`
	MaxQueryablePages *int    `pulumi:"maxQueryablePages"`
	Membership        *bool   `pulumi:"membership"`
	MinAccessLevel    *int    `pulumi:"minAccessLevel"`
	OrderBy           *string `pulumi:"orderBy"`
	Owned             *bool   `pulumi:"owned"`
	Page              *int    `pulumi:"page"`
	PerPage           *int    `pulumi:"perPage"`
	// A list containing the projects matching the supplied arguments
	Projects   []GetProjectsProject `pulumi:"projects"`
	Search     *string              `pulumi:"search"`
	Simple     *bool                `pulumi:"simple"`
	Sort       *string              `pulumi:"sort"`
	Starred    *bool                `pulumi:"starred"`
	Statistics *bool                `pulumi:"statistics"`
	// The visibility of the project.
	Visibility               *string `pulumi:"visibility"`
	WithCustomAttributes     *bool   `pulumi:"withCustomAttributes"`
	WithIssuesEnabled        *bool   `pulumi:"withIssuesEnabled"`
	WithMergeRequestsEnabled *bool   `pulumi:"withMergeRequestsEnabled"`
	WithProgrammingLanguage  *string `pulumi:"withProgrammingLanguage"`
	WithShared               *bool   `pulumi:"withShared"`
}
