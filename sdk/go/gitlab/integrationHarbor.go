// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `IntegrationHarbor` resource allows to manage the lifecycle of a project integration with Harbor.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#harbor)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewIntegrationHarbor(ctx, "harbor", &gitlab.IntegrationHarborArgs{
//				Project:     awesomeProject.ID(),
//				Url:         pulumi.String("http://harbor.example.com"),
//				ProjectName: pulumi.String("my_project_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_integration_harbor`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_integration_harbor.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// ```sh
// $ pulumi import gitlab:index/integrationHarbor:IntegrationHarbor You can import a gitlab_integration_harbor state using `<resource> <project_id>`:
// ```
//
// ```sh
// $ pulumi import gitlab:index/integrationHarbor:IntegrationHarbor harbor 1
// ```
type IntegrationHarbor struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password pulumi.StringOutput `pulumi:"password"`
	// ID of the GitLab project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Harbor URL. Example: `http://harbor.example.com`
	Url pulumi.StringOutput `pulumi:"url"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolOutput `pulumi:"useInheritedSettings"`
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewIntegrationHarbor registers a new resource with the given unique name, arguments, and options.
func NewIntegrationHarbor(ctx *pulumi.Context,
	name string, args *IntegrationHarborArgs, opts ...pulumi.ResourceOption) (*IntegrationHarbor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationHarbor
	err := ctx.RegisterResource("gitlab:index/integrationHarbor:IntegrationHarbor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationHarbor gets an existing IntegrationHarbor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationHarbor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationHarborState, opts ...pulumi.ResourceOption) (*IntegrationHarbor, error) {
	var resource IntegrationHarbor
	err := ctx.ReadResource("gitlab:index/integrationHarbor:IntegrationHarbor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationHarbor resources.
type integrationHarborState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password *string `pulumi:"password"`
	// ID of the GitLab project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName *string `pulumi:"projectName"`
	// Harbor URL. Example: `http://harbor.example.com`
	Url *string `pulumi:"url"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings *bool `pulumi:"useInheritedSettings"`
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username *string `pulumi:"username"`
}

type IntegrationHarborState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password pulumi.StringPtrInput
	// ID of the GitLab project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName pulumi.StringPtrInput
	// Harbor URL. Example: `http://harbor.example.com`
	Url pulumi.StringPtrInput
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolPtrInput
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username pulumi.StringPtrInput
}

func (IntegrationHarborState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationHarborState)(nil)).Elem()
}

type integrationHarborArgs struct {
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password string `pulumi:"password"`
	// ID of the GitLab project you want to activate integration on.
	Project string `pulumi:"project"`
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName string `pulumi:"projectName"`
	// Harbor URL. Example: `http://harbor.example.com`
	Url string `pulumi:"url"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings *bool `pulumi:"useInheritedSettings"`
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a IntegrationHarbor resource.
type IntegrationHarborArgs struct {
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password pulumi.StringInput
	// ID of the GitLab project you want to activate integration on.
	Project pulumi.StringInput
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName pulumi.StringInput
	// Harbor URL. Example: `http://harbor.example.com`
	Url pulumi.StringInput
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolPtrInput
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username pulumi.StringInput
}

func (IntegrationHarborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationHarborArgs)(nil)).Elem()
}

type IntegrationHarborInput interface {
	pulumi.Input

	ToIntegrationHarborOutput() IntegrationHarborOutput
	ToIntegrationHarborOutputWithContext(ctx context.Context) IntegrationHarborOutput
}

func (*IntegrationHarbor) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationHarbor)(nil)).Elem()
}

func (i *IntegrationHarbor) ToIntegrationHarborOutput() IntegrationHarborOutput {
	return i.ToIntegrationHarborOutputWithContext(context.Background())
}

func (i *IntegrationHarbor) ToIntegrationHarborOutputWithContext(ctx context.Context) IntegrationHarborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationHarborOutput)
}

// IntegrationHarborArrayInput is an input type that accepts IntegrationHarborArray and IntegrationHarborArrayOutput values.
// You can construct a concrete instance of `IntegrationHarborArrayInput` via:
//
//	IntegrationHarborArray{ IntegrationHarborArgs{...} }
type IntegrationHarborArrayInput interface {
	pulumi.Input

	ToIntegrationHarborArrayOutput() IntegrationHarborArrayOutput
	ToIntegrationHarborArrayOutputWithContext(context.Context) IntegrationHarborArrayOutput
}

type IntegrationHarborArray []IntegrationHarborInput

func (IntegrationHarborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationHarbor)(nil)).Elem()
}

func (i IntegrationHarborArray) ToIntegrationHarborArrayOutput() IntegrationHarborArrayOutput {
	return i.ToIntegrationHarborArrayOutputWithContext(context.Background())
}

func (i IntegrationHarborArray) ToIntegrationHarborArrayOutputWithContext(ctx context.Context) IntegrationHarborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationHarborArrayOutput)
}

// IntegrationHarborMapInput is an input type that accepts IntegrationHarborMap and IntegrationHarborMapOutput values.
// You can construct a concrete instance of `IntegrationHarborMapInput` via:
//
//	IntegrationHarborMap{ "key": IntegrationHarborArgs{...} }
type IntegrationHarborMapInput interface {
	pulumi.Input

	ToIntegrationHarborMapOutput() IntegrationHarborMapOutput
	ToIntegrationHarborMapOutputWithContext(context.Context) IntegrationHarborMapOutput
}

type IntegrationHarborMap map[string]IntegrationHarborInput

func (IntegrationHarborMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationHarbor)(nil)).Elem()
}

func (i IntegrationHarborMap) ToIntegrationHarborMapOutput() IntegrationHarborMapOutput {
	return i.ToIntegrationHarborMapOutputWithContext(context.Background())
}

func (i IntegrationHarborMap) ToIntegrationHarborMapOutputWithContext(ctx context.Context) IntegrationHarborMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationHarborMapOutput)
}

type IntegrationHarborOutput struct{ *pulumi.OutputState }

func (IntegrationHarborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationHarbor)(nil)).Elem()
}

func (o IntegrationHarborOutput) ToIntegrationHarborOutput() IntegrationHarborOutput {
	return o
}

func (o IntegrationHarborOutput) ToIntegrationHarborOutputWithContext(ctx context.Context) IntegrationHarborOutput {
	return o
}

// Whether the integration is active.
func (o IntegrationHarborOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationHarbor) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Password for authentication with the Harbor server, if authentication is required by the server.
func (o IntegrationHarborOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationHarbor) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ID of the GitLab project you want to activate integration on.
func (o IntegrationHarborOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationHarbor) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
func (o IntegrationHarborOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationHarbor) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Harbor URL. Example: `http://harbor.example.com`
func (o IntegrationHarborOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationHarbor) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Indicates whether or not to inherit default settings. Defaults to false.
func (o IntegrationHarborOutput) UseInheritedSettings() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationHarbor) pulumi.BoolOutput { return v.UseInheritedSettings }).(pulumi.BoolOutput)
}

// Username for authentication with the Harbor server, if authentication is required by the server.
func (o IntegrationHarborOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationHarbor) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type IntegrationHarborArrayOutput struct{ *pulumi.OutputState }

func (IntegrationHarborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationHarbor)(nil)).Elem()
}

func (o IntegrationHarborArrayOutput) ToIntegrationHarborArrayOutput() IntegrationHarborArrayOutput {
	return o
}

func (o IntegrationHarborArrayOutput) ToIntegrationHarborArrayOutputWithContext(ctx context.Context) IntegrationHarborArrayOutput {
	return o
}

func (o IntegrationHarborArrayOutput) Index(i pulumi.IntInput) IntegrationHarborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationHarbor {
		return vs[0].([]*IntegrationHarbor)[vs[1].(int)]
	}).(IntegrationHarborOutput)
}

type IntegrationHarborMapOutput struct{ *pulumi.OutputState }

func (IntegrationHarborMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationHarbor)(nil)).Elem()
}

func (o IntegrationHarborMapOutput) ToIntegrationHarborMapOutput() IntegrationHarborMapOutput {
	return o
}

func (o IntegrationHarborMapOutput) ToIntegrationHarborMapOutputWithContext(ctx context.Context) IntegrationHarborMapOutput {
	return o
}

func (o IntegrationHarborMapOutput) MapIndex(k pulumi.StringInput) IntegrationHarborOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationHarbor {
		return vs[0].(map[string]*IntegrationHarbor)[vs[1].(string)]
	}).(IntegrationHarborOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationHarborInput)(nil)).Elem(), &IntegrationHarbor{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationHarborArrayInput)(nil)).Elem(), IntegrationHarborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationHarborMapInput)(nil)).Elem(), IntegrationHarborMap{})
	pulumi.RegisterOutputType(IntegrationHarborOutput{})
	pulumi.RegisterOutputType(IntegrationHarborArrayOutput{})
	pulumi.RegisterOutputType(IntegrationHarborMapOutput{})
}
