// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApplicationSettingsDefaultBranchProtectionDefaults struct {
	// Allow force push for all users with push access.
	AllowForcePush *bool `pulumi:"allowForcePush"`
	// An array of access levels allowed to merge. Supports Developer (30) or Maintainer (40).
	AllowedToMerges []interface{} `pulumi:"allowedToMerges"`
	// An array of access levels allowed to push. Supports Developer (30) or Maintainer (40).
	AllowedToPushes []interface{} `pulumi:"allowedToPushes"`
	// Allow developers to initial push.
	DeveloperCanInitialPush *bool `pulumi:"developerCanInitialPush"`
}

// ApplicationSettingsDefaultBranchProtectionDefaultsInput is an input type that accepts ApplicationSettingsDefaultBranchProtectionDefaultsArgs and ApplicationSettingsDefaultBranchProtectionDefaultsOutput values.
// You can construct a concrete instance of `ApplicationSettingsDefaultBranchProtectionDefaultsInput` via:
//
//	ApplicationSettingsDefaultBranchProtectionDefaultsArgs{...}
type ApplicationSettingsDefaultBranchProtectionDefaultsInput interface {
	pulumi.Input

	ToApplicationSettingsDefaultBranchProtectionDefaultsOutput() ApplicationSettingsDefaultBranchProtectionDefaultsOutput
	ToApplicationSettingsDefaultBranchProtectionDefaultsOutputWithContext(context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsOutput
}

type ApplicationSettingsDefaultBranchProtectionDefaultsArgs struct {
	// Allow force push for all users with push access.
	AllowForcePush pulumi.BoolPtrInput `pulumi:"allowForcePush"`
	// An array of access levels allowed to merge. Supports Developer (30) or Maintainer (40).
	AllowedToMerges pulumi.ArrayInput `pulumi:"allowedToMerges"`
	// An array of access levels allowed to push. Supports Developer (30) or Maintainer (40).
	AllowedToPushes pulumi.ArrayInput `pulumi:"allowedToPushes"`
	// Allow developers to initial push.
	DeveloperCanInitialPush pulumi.BoolPtrInput `pulumi:"developerCanInitialPush"`
}

func (ApplicationSettingsDefaultBranchProtectionDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSettingsDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (i ApplicationSettingsDefaultBranchProtectionDefaultsArgs) ToApplicationSettingsDefaultBranchProtectionDefaultsOutput() ApplicationSettingsDefaultBranchProtectionDefaultsOutput {
	return i.ToApplicationSettingsDefaultBranchProtectionDefaultsOutputWithContext(context.Background())
}

func (i ApplicationSettingsDefaultBranchProtectionDefaultsArgs) ToApplicationSettingsDefaultBranchProtectionDefaultsOutputWithContext(ctx context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSettingsDefaultBranchProtectionDefaultsOutput)
}

func (i ApplicationSettingsDefaultBranchProtectionDefaultsArgs) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput() ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return i.ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Background())
}

func (i ApplicationSettingsDefaultBranchProtectionDefaultsArgs) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSettingsDefaultBranchProtectionDefaultsOutput).ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx)
}

// ApplicationSettingsDefaultBranchProtectionDefaultsPtrInput is an input type that accepts ApplicationSettingsDefaultBranchProtectionDefaultsArgs, ApplicationSettingsDefaultBranchProtectionDefaultsPtr and ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput values.
// You can construct a concrete instance of `ApplicationSettingsDefaultBranchProtectionDefaultsPtrInput` via:
//
//	        ApplicationSettingsDefaultBranchProtectionDefaultsArgs{...}
//
//	or:
//
//	        nil
type ApplicationSettingsDefaultBranchProtectionDefaultsPtrInput interface {
	pulumi.Input

	ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput() ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput
	ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput
}

type applicationSettingsDefaultBranchProtectionDefaultsPtrType ApplicationSettingsDefaultBranchProtectionDefaultsArgs

func ApplicationSettingsDefaultBranchProtectionDefaultsPtr(v *ApplicationSettingsDefaultBranchProtectionDefaultsArgs) ApplicationSettingsDefaultBranchProtectionDefaultsPtrInput {
	return (*applicationSettingsDefaultBranchProtectionDefaultsPtrType)(v)
}

func (*applicationSettingsDefaultBranchProtectionDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSettingsDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (i *applicationSettingsDefaultBranchProtectionDefaultsPtrType) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput() ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return i.ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Background())
}

func (i *applicationSettingsDefaultBranchProtectionDefaultsPtrType) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput)
}

type ApplicationSettingsDefaultBranchProtectionDefaultsOutput struct{ *pulumi.OutputState }

func (ApplicationSettingsDefaultBranchProtectionDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSettingsDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) ToApplicationSettingsDefaultBranchProtectionDefaultsOutput() ApplicationSettingsDefaultBranchProtectionDefaultsOutput {
	return o
}

func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) ToApplicationSettingsDefaultBranchProtectionDefaultsOutputWithContext(ctx context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsOutput {
	return o
}

func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput() ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return o.ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Background())
}

func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSettingsDefaultBranchProtectionDefaults) *ApplicationSettingsDefaultBranchProtectionDefaults {
		return &v
	}).(ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput)
}

// Allow force push for all users with push access.
func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) AllowForcePush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSettingsDefaultBranchProtectionDefaults) *bool { return v.AllowForcePush }).(pulumi.BoolPtrOutput)
}

// An array of access levels allowed to merge. Supports Developer (30) or Maintainer (40).
func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) AllowedToMerges() pulumi.ArrayOutput {
	return o.ApplyT(func(v ApplicationSettingsDefaultBranchProtectionDefaults) []interface{} { return v.AllowedToMerges }).(pulumi.ArrayOutput)
}

// An array of access levels allowed to push. Supports Developer (30) or Maintainer (40).
func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) AllowedToPushes() pulumi.ArrayOutput {
	return o.ApplyT(func(v ApplicationSettingsDefaultBranchProtectionDefaults) []interface{} { return v.AllowedToPushes }).(pulumi.ArrayOutput)
}

// Allow developers to initial push.
func (o ApplicationSettingsDefaultBranchProtectionDefaultsOutput) DeveloperCanInitialPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSettingsDefaultBranchProtectionDefaults) *bool { return v.DeveloperCanInitialPush }).(pulumi.BoolPtrOutput)
}

type ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSettingsDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (o ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput() ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return o
}

func (o ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) ToApplicationSettingsDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput {
	return o
}

func (o ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) Elem() ApplicationSettingsDefaultBranchProtectionDefaultsOutput {
	return o.ApplyT(func(v *ApplicationSettingsDefaultBranchProtectionDefaults) ApplicationSettingsDefaultBranchProtectionDefaults {
		if v != nil {
			return *v
		}
		var ret ApplicationSettingsDefaultBranchProtectionDefaults
		return ret
	}).(ApplicationSettingsDefaultBranchProtectionDefaultsOutput)
}

// Allow force push for all users with push access.
func (o ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) AllowForcePush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSettingsDefaultBranchProtectionDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.AllowForcePush
	}).(pulumi.BoolPtrOutput)
}

// An array of access levels allowed to merge. Supports Developer (30) or Maintainer (40).
func (o ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) AllowedToMerges() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ApplicationSettingsDefaultBranchProtectionDefaults) []interface{} {
		if v == nil {
			return nil
		}
		return v.AllowedToMerges
	}).(pulumi.ArrayOutput)
}

// An array of access levels allowed to push. Supports Developer (30) or Maintainer (40).
func (o ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) AllowedToPushes() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ApplicationSettingsDefaultBranchProtectionDefaults) []interface{} {
		if v == nil {
			return nil
		}
		return v.AllowedToPushes
	}).(pulumi.ArrayOutput)
}

// Allow developers to initial push.
func (o ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput) DeveloperCanInitialPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSettingsDefaultBranchProtectionDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.DeveloperCanInitialPush
	}).(pulumi.BoolPtrOutput)
}

type BranchCommit struct {
	// The email of the author.
	AuthorEmail *string `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName *string `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate *string `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate *string `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail *string `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName *string `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id *string `pulumi:"id"`
	// The commit message
	Message *string `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds []string `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId *string `pulumi:"shortId"`
	// The title of the commit
	Title *string `pulumi:"title"`
}

// BranchCommitInput is an input type that accepts BranchCommitArgs and BranchCommitOutput values.
// You can construct a concrete instance of `BranchCommitInput` via:
//
//	BranchCommitArgs{...}
type BranchCommitInput interface {
	pulumi.Input

	ToBranchCommitOutput() BranchCommitOutput
	ToBranchCommitOutputWithContext(context.Context) BranchCommitOutput
}

type BranchCommitArgs struct {
	// The email of the author.
	AuthorEmail pulumi.StringPtrInput `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName pulumi.StringPtrInput `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate pulumi.StringPtrInput `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate pulumi.StringPtrInput `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail pulumi.StringPtrInput `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName pulumi.StringPtrInput `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The commit message
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds pulumi.StringArrayInput `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId pulumi.StringPtrInput `pulumi:"shortId"`
	// The title of the commit
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (BranchCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchCommit)(nil)).Elem()
}

func (i BranchCommitArgs) ToBranchCommitOutput() BranchCommitOutput {
	return i.ToBranchCommitOutputWithContext(context.Background())
}

func (i BranchCommitArgs) ToBranchCommitOutputWithContext(ctx context.Context) BranchCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchCommitOutput)
}

// BranchCommitArrayInput is an input type that accepts BranchCommitArray and BranchCommitArrayOutput values.
// You can construct a concrete instance of `BranchCommitArrayInput` via:
//
//	BranchCommitArray{ BranchCommitArgs{...} }
type BranchCommitArrayInput interface {
	pulumi.Input

	ToBranchCommitArrayOutput() BranchCommitArrayOutput
	ToBranchCommitArrayOutputWithContext(context.Context) BranchCommitArrayOutput
}

type BranchCommitArray []BranchCommitInput

func (BranchCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchCommit)(nil)).Elem()
}

func (i BranchCommitArray) ToBranchCommitArrayOutput() BranchCommitArrayOutput {
	return i.ToBranchCommitArrayOutputWithContext(context.Background())
}

func (i BranchCommitArray) ToBranchCommitArrayOutputWithContext(ctx context.Context) BranchCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchCommitArrayOutput)
}

type BranchCommitOutput struct{ *pulumi.OutputState }

func (BranchCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchCommit)(nil)).Elem()
}

func (o BranchCommitOutput) ToBranchCommitOutput() BranchCommitOutput {
	return o
}

func (o BranchCommitOutput) ToBranchCommitOutputWithContext(ctx context.Context) BranchCommitOutput {
	return o
}

// The email of the author.
func (o BranchCommitOutput) AuthorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.AuthorEmail }).(pulumi.StringPtrOutput)
}

// The name of the author.
func (o BranchCommitOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.AuthorName }).(pulumi.StringPtrOutput)
}

// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
func (o BranchCommitOutput) AuthoredDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.AuthoredDate }).(pulumi.StringPtrOutput)
}

// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
func (o BranchCommitOutput) CommittedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.CommittedDate }).(pulumi.StringPtrOutput)
}

// The email of the user that committed.
func (o BranchCommitOutput) CommitterEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.CommitterEmail }).(pulumi.StringPtrOutput)
}

// The name of the user that committed.
func (o BranchCommitOutput) CommitterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.CommitterName }).(pulumi.StringPtrOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o BranchCommitOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The commit message
func (o BranchCommitOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The id of the parents of the commit
func (o BranchCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

// The short id assigned to the commit by Gitlab.
func (o BranchCommitOutput) ShortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.ShortId }).(pulumi.StringPtrOutput)
}

// The title of the commit
func (o BranchCommitOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type BranchCommitArrayOutput struct{ *pulumi.OutputState }

func (BranchCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchCommit)(nil)).Elem()
}

func (o BranchCommitArrayOutput) ToBranchCommitArrayOutput() BranchCommitArrayOutput {
	return o
}

func (o BranchCommitArrayOutput) ToBranchCommitArrayOutputWithContext(ctx context.Context) BranchCommitArrayOutput {
	return o
}

func (o BranchCommitArrayOutput) Index(i pulumi.IntInput) BranchCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchCommit {
		return vs[0].([]BranchCommit)[vs[1].(int)]
	}).(BranchCommitOutput)
}

type BranchProtectionAllowedToMerge struct {
	// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToMergeInput is an input type that accepts BranchProtectionAllowedToMergeArgs and BranchProtectionAllowedToMergeOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToMergeInput` via:
//
//	BranchProtectionAllowedToMergeArgs{...}
type BranchProtectionAllowedToMergeInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput
	ToBranchProtectionAllowedToMergeOutputWithContext(context.Context) BranchProtectionAllowedToMergeOutput
}

type BranchProtectionAllowedToMergeArgs struct {
	// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToMergeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (i BranchProtectionAllowedToMergeArgs) ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput {
	return i.ToBranchProtectionAllowedToMergeOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToMergeArgs) ToBranchProtectionAllowedToMergeOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToMergeOutput)
}

// BranchProtectionAllowedToMergeArrayInput is an input type that accepts BranchProtectionAllowedToMergeArray and BranchProtectionAllowedToMergeArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToMergeArrayInput` via:
//
//	BranchProtectionAllowedToMergeArray{ BranchProtectionAllowedToMergeArgs{...} }
type BranchProtectionAllowedToMergeArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput
	ToBranchProtectionAllowedToMergeArrayOutputWithContext(context.Context) BranchProtectionAllowedToMergeArrayOutput
}

type BranchProtectionAllowedToMergeArray []BranchProtectionAllowedToMergeInput

func (BranchProtectionAllowedToMergeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (i BranchProtectionAllowedToMergeArray) ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput {
	return i.ToBranchProtectionAllowedToMergeArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToMergeArray) ToBranchProtectionAllowedToMergeArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToMergeArrayOutput)
}

type BranchProtectionAllowedToMergeOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToMergeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (o BranchProtectionAllowedToMergeOutput) ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput {
	return o
}

func (o BranchProtectionAllowedToMergeOutput) ToBranchProtectionAllowedToMergeOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeOutput {
	return o
}

// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
func (o BranchProtectionAllowedToMergeOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of access level.
func (o BranchProtectionAllowedToMergeOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o BranchProtectionAllowedToMergeOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o BranchProtectionAllowedToMergeOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToMergeArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToMergeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (o BranchProtectionAllowedToMergeArrayOutput) ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput {
	return o
}

func (o BranchProtectionAllowedToMergeArrayOutput) ToBranchProtectionAllowedToMergeArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeArrayOutput {
	return o
}

func (o BranchProtectionAllowedToMergeArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToMergeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToMerge {
		return vs[0].([]BranchProtectionAllowedToMerge)[vs[1].(int)]
	}).(BranchProtectionAllowedToMergeOutput)
}

type BranchProtectionAllowedToPush struct {
	// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
	DeployKeyId *int `pulumi:"deployKeyId"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToPushInput is an input type that accepts BranchProtectionAllowedToPushArgs and BranchProtectionAllowedToPushOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToPushInput` via:
//
//	BranchProtectionAllowedToPushArgs{...}
type BranchProtectionAllowedToPushInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput
	ToBranchProtectionAllowedToPushOutputWithContext(context.Context) BranchProtectionAllowedToPushOutput
}

type BranchProtectionAllowedToPushArgs struct {
	// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
	DeployKeyId pulumi.IntPtrInput `pulumi:"deployKeyId"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToPush)(nil)).Elem()
}

func (i BranchProtectionAllowedToPushArgs) ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput {
	return i.ToBranchProtectionAllowedToPushOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToPushArgs) ToBranchProtectionAllowedToPushOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToPushOutput)
}

// BranchProtectionAllowedToPushArrayInput is an input type that accepts BranchProtectionAllowedToPushArray and BranchProtectionAllowedToPushArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToPushArrayInput` via:
//
//	BranchProtectionAllowedToPushArray{ BranchProtectionAllowedToPushArgs{...} }
type BranchProtectionAllowedToPushArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput
	ToBranchProtectionAllowedToPushArrayOutputWithContext(context.Context) BranchProtectionAllowedToPushArrayOutput
}

type BranchProtectionAllowedToPushArray []BranchProtectionAllowedToPushInput

func (BranchProtectionAllowedToPushArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToPush)(nil)).Elem()
}

func (i BranchProtectionAllowedToPushArray) ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput {
	return i.ToBranchProtectionAllowedToPushArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToPushArray) ToBranchProtectionAllowedToPushArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToPushArrayOutput)
}

type BranchProtectionAllowedToPushOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToPush)(nil)).Elem()
}

func (o BranchProtectionAllowedToPushOutput) ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput {
	return o
}

func (o BranchProtectionAllowedToPushOutput) ToBranchProtectionAllowedToPushOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushOutput {
	return o
}

// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
func (o BranchProtectionAllowedToPushOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of access level.
func (o BranchProtectionAllowedToPushOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
func (o BranchProtectionAllowedToPushOutput) DeployKeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *int { return v.DeployKeyId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
func (o BranchProtectionAllowedToPushOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
func (o BranchProtectionAllowedToPushOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToPushArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToPushArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToPush)(nil)).Elem()
}

func (o BranchProtectionAllowedToPushArrayOutput) ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput {
	return o
}

func (o BranchProtectionAllowedToPushArrayOutput) ToBranchProtectionAllowedToPushArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushArrayOutput {
	return o
}

func (o BranchProtectionAllowedToPushArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToPushOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToPush {
		return vs[0].([]BranchProtectionAllowedToPush)[vs[1].(int)]
	}).(BranchProtectionAllowedToPushOutput)
}

type BranchProtectionAllowedToUnprotect struct {
	// Access levels allowed to unprotect push to protected branch. Valid values are: `developer`, `maintainer`, `admin`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToUnprotectInput is an input type that accepts BranchProtectionAllowedToUnprotectArgs and BranchProtectionAllowedToUnprotectOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToUnprotectInput` via:
//
//	BranchProtectionAllowedToUnprotectArgs{...}
type BranchProtectionAllowedToUnprotectInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToUnprotectOutput() BranchProtectionAllowedToUnprotectOutput
	ToBranchProtectionAllowedToUnprotectOutputWithContext(context.Context) BranchProtectionAllowedToUnprotectOutput
}

type BranchProtectionAllowedToUnprotectArgs struct {
	// Access levels allowed to unprotect push to protected branch. Valid values are: `developer`, `maintainer`, `admin`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToUnprotectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (i BranchProtectionAllowedToUnprotectArgs) ToBranchProtectionAllowedToUnprotectOutput() BranchProtectionAllowedToUnprotectOutput {
	return i.ToBranchProtectionAllowedToUnprotectOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToUnprotectArgs) ToBranchProtectionAllowedToUnprotectOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToUnprotectOutput)
}

// BranchProtectionAllowedToUnprotectArrayInput is an input type that accepts BranchProtectionAllowedToUnprotectArray and BranchProtectionAllowedToUnprotectArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToUnprotectArrayInput` via:
//
//	BranchProtectionAllowedToUnprotectArray{ BranchProtectionAllowedToUnprotectArgs{...} }
type BranchProtectionAllowedToUnprotectArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToUnprotectArrayOutput() BranchProtectionAllowedToUnprotectArrayOutput
	ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(context.Context) BranchProtectionAllowedToUnprotectArrayOutput
}

type BranchProtectionAllowedToUnprotectArray []BranchProtectionAllowedToUnprotectInput

func (BranchProtectionAllowedToUnprotectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (i BranchProtectionAllowedToUnprotectArray) ToBranchProtectionAllowedToUnprotectArrayOutput() BranchProtectionAllowedToUnprotectArrayOutput {
	return i.ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToUnprotectArray) ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToUnprotectArrayOutput)
}

type BranchProtectionAllowedToUnprotectOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToUnprotectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (o BranchProtectionAllowedToUnprotectOutput) ToBranchProtectionAllowedToUnprotectOutput() BranchProtectionAllowedToUnprotectOutput {
	return o
}

func (o BranchProtectionAllowedToUnprotectOutput) ToBranchProtectionAllowedToUnprotectOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectOutput {
	return o
}

// Access levels allowed to unprotect push to protected branch. Valid values are: `developer`, `maintainer`, `admin`.
func (o BranchProtectionAllowedToUnprotectOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of access level.
func (o BranchProtectionAllowedToUnprotectOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o BranchProtectionAllowedToUnprotectOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o BranchProtectionAllowedToUnprotectOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToUnprotectArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToUnprotectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (o BranchProtectionAllowedToUnprotectArrayOutput) ToBranchProtectionAllowedToUnprotectArrayOutput() BranchProtectionAllowedToUnprotectArrayOutput {
	return o
}

func (o BranchProtectionAllowedToUnprotectArrayOutput) ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectArrayOutput {
	return o
}

func (o BranchProtectionAllowedToUnprotectArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToUnprotectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToUnprotect {
		return vs[0].([]BranchProtectionAllowedToUnprotect)[vs[1].(int)]
	}).(BranchProtectionAllowedToUnprotectOutput)
}

type GroupAccessTokenRotationConfiguration struct {
	// The duration (in days) the new token should be valid for.
	ExpirationDays int `pulumi:"expirationDays"`
	// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
	RotateBeforeDays int `pulumi:"rotateBeforeDays"`
}

// GroupAccessTokenRotationConfigurationInput is an input type that accepts GroupAccessTokenRotationConfigurationArgs and GroupAccessTokenRotationConfigurationOutput values.
// You can construct a concrete instance of `GroupAccessTokenRotationConfigurationInput` via:
//
//	GroupAccessTokenRotationConfigurationArgs{...}
type GroupAccessTokenRotationConfigurationInput interface {
	pulumi.Input

	ToGroupAccessTokenRotationConfigurationOutput() GroupAccessTokenRotationConfigurationOutput
	ToGroupAccessTokenRotationConfigurationOutputWithContext(context.Context) GroupAccessTokenRotationConfigurationOutput
}

type GroupAccessTokenRotationConfigurationArgs struct {
	// The duration (in days) the new token should be valid for.
	ExpirationDays pulumi.IntInput `pulumi:"expirationDays"`
	// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
	RotateBeforeDays pulumi.IntInput `pulumi:"rotateBeforeDays"`
}

func (GroupAccessTokenRotationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupAccessTokenRotationConfiguration)(nil)).Elem()
}

func (i GroupAccessTokenRotationConfigurationArgs) ToGroupAccessTokenRotationConfigurationOutput() GroupAccessTokenRotationConfigurationOutput {
	return i.ToGroupAccessTokenRotationConfigurationOutputWithContext(context.Background())
}

func (i GroupAccessTokenRotationConfigurationArgs) ToGroupAccessTokenRotationConfigurationOutputWithContext(ctx context.Context) GroupAccessTokenRotationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAccessTokenRotationConfigurationOutput)
}

func (i GroupAccessTokenRotationConfigurationArgs) ToGroupAccessTokenRotationConfigurationPtrOutput() GroupAccessTokenRotationConfigurationPtrOutput {
	return i.ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (i GroupAccessTokenRotationConfigurationArgs) ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) GroupAccessTokenRotationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAccessTokenRotationConfigurationOutput).ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(ctx)
}

// GroupAccessTokenRotationConfigurationPtrInput is an input type that accepts GroupAccessTokenRotationConfigurationArgs, GroupAccessTokenRotationConfigurationPtr and GroupAccessTokenRotationConfigurationPtrOutput values.
// You can construct a concrete instance of `GroupAccessTokenRotationConfigurationPtrInput` via:
//
//	        GroupAccessTokenRotationConfigurationArgs{...}
//
//	or:
//
//	        nil
type GroupAccessTokenRotationConfigurationPtrInput interface {
	pulumi.Input

	ToGroupAccessTokenRotationConfigurationPtrOutput() GroupAccessTokenRotationConfigurationPtrOutput
	ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(context.Context) GroupAccessTokenRotationConfigurationPtrOutput
}

type groupAccessTokenRotationConfigurationPtrType GroupAccessTokenRotationConfigurationArgs

func GroupAccessTokenRotationConfigurationPtr(v *GroupAccessTokenRotationConfigurationArgs) GroupAccessTokenRotationConfigurationPtrInput {
	return (*groupAccessTokenRotationConfigurationPtrType)(v)
}

func (*groupAccessTokenRotationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupAccessTokenRotationConfiguration)(nil)).Elem()
}

func (i *groupAccessTokenRotationConfigurationPtrType) ToGroupAccessTokenRotationConfigurationPtrOutput() GroupAccessTokenRotationConfigurationPtrOutput {
	return i.ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (i *groupAccessTokenRotationConfigurationPtrType) ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) GroupAccessTokenRotationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupAccessTokenRotationConfigurationPtrOutput)
}

type GroupAccessTokenRotationConfigurationOutput struct{ *pulumi.OutputState }

func (GroupAccessTokenRotationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupAccessTokenRotationConfiguration)(nil)).Elem()
}

func (o GroupAccessTokenRotationConfigurationOutput) ToGroupAccessTokenRotationConfigurationOutput() GroupAccessTokenRotationConfigurationOutput {
	return o
}

func (o GroupAccessTokenRotationConfigurationOutput) ToGroupAccessTokenRotationConfigurationOutputWithContext(ctx context.Context) GroupAccessTokenRotationConfigurationOutput {
	return o
}

func (o GroupAccessTokenRotationConfigurationOutput) ToGroupAccessTokenRotationConfigurationPtrOutput() GroupAccessTokenRotationConfigurationPtrOutput {
	return o.ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (o GroupAccessTokenRotationConfigurationOutput) ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) GroupAccessTokenRotationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupAccessTokenRotationConfiguration) *GroupAccessTokenRotationConfiguration {
		return &v
	}).(GroupAccessTokenRotationConfigurationPtrOutput)
}

// The duration (in days) the new token should be valid for.
func (o GroupAccessTokenRotationConfigurationOutput) ExpirationDays() pulumi.IntOutput {
	return o.ApplyT(func(v GroupAccessTokenRotationConfiguration) int { return v.ExpirationDays }).(pulumi.IntOutput)
}

// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
func (o GroupAccessTokenRotationConfigurationOutput) RotateBeforeDays() pulumi.IntOutput {
	return o.ApplyT(func(v GroupAccessTokenRotationConfiguration) int { return v.RotateBeforeDays }).(pulumi.IntOutput)
}

type GroupAccessTokenRotationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (GroupAccessTokenRotationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupAccessTokenRotationConfiguration)(nil)).Elem()
}

func (o GroupAccessTokenRotationConfigurationPtrOutput) ToGroupAccessTokenRotationConfigurationPtrOutput() GroupAccessTokenRotationConfigurationPtrOutput {
	return o
}

func (o GroupAccessTokenRotationConfigurationPtrOutput) ToGroupAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) GroupAccessTokenRotationConfigurationPtrOutput {
	return o
}

func (o GroupAccessTokenRotationConfigurationPtrOutput) Elem() GroupAccessTokenRotationConfigurationOutput {
	return o.ApplyT(func(v *GroupAccessTokenRotationConfiguration) GroupAccessTokenRotationConfiguration {
		if v != nil {
			return *v
		}
		var ret GroupAccessTokenRotationConfiguration
		return ret
	}).(GroupAccessTokenRotationConfigurationOutput)
}

// The duration (in days) the new token should be valid for.
func (o GroupAccessTokenRotationConfigurationPtrOutput) ExpirationDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupAccessTokenRotationConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.ExpirationDays
	}).(pulumi.IntPtrOutput)
}

// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
func (o GroupAccessTokenRotationConfigurationPtrOutput) RotateBeforeDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupAccessTokenRotationConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.RotateBeforeDays
	}).(pulumi.IntPtrOutput)
}

type GroupDefaultBranchProtectionDefaults struct {
	// Allow force push for all users with push access.
	AllowForcePush *bool `pulumi:"allowForcePush"`
	// An array of access levels allowed to merge. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToMerges []string `pulumi:"allowedToMerges"`
	// An array of access levels allowed to push. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToPushes []string `pulumi:"allowedToPushes"`
	// Allow developers to initial push.
	DeveloperCanInitialPush *bool `pulumi:"developerCanInitialPush"`
}

// GroupDefaultBranchProtectionDefaultsInput is an input type that accepts GroupDefaultBranchProtectionDefaultsArgs and GroupDefaultBranchProtectionDefaultsOutput values.
// You can construct a concrete instance of `GroupDefaultBranchProtectionDefaultsInput` via:
//
//	GroupDefaultBranchProtectionDefaultsArgs{...}
type GroupDefaultBranchProtectionDefaultsInput interface {
	pulumi.Input

	ToGroupDefaultBranchProtectionDefaultsOutput() GroupDefaultBranchProtectionDefaultsOutput
	ToGroupDefaultBranchProtectionDefaultsOutputWithContext(context.Context) GroupDefaultBranchProtectionDefaultsOutput
}

type GroupDefaultBranchProtectionDefaultsArgs struct {
	// Allow force push for all users with push access.
	AllowForcePush pulumi.BoolPtrInput `pulumi:"allowForcePush"`
	// An array of access levels allowed to merge. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToMerges pulumi.StringArrayInput `pulumi:"allowedToMerges"`
	// An array of access levels allowed to push. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToPushes pulumi.StringArrayInput `pulumi:"allowedToPushes"`
	// Allow developers to initial push.
	DeveloperCanInitialPush pulumi.BoolPtrInput `pulumi:"developerCanInitialPush"`
}

func (GroupDefaultBranchProtectionDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (i GroupDefaultBranchProtectionDefaultsArgs) ToGroupDefaultBranchProtectionDefaultsOutput() GroupDefaultBranchProtectionDefaultsOutput {
	return i.ToGroupDefaultBranchProtectionDefaultsOutputWithContext(context.Background())
}

func (i GroupDefaultBranchProtectionDefaultsArgs) ToGroupDefaultBranchProtectionDefaultsOutputWithContext(ctx context.Context) GroupDefaultBranchProtectionDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDefaultBranchProtectionDefaultsOutput)
}

func (i GroupDefaultBranchProtectionDefaultsArgs) ToGroupDefaultBranchProtectionDefaultsPtrOutput() GroupDefaultBranchProtectionDefaultsPtrOutput {
	return i.ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Background())
}

func (i GroupDefaultBranchProtectionDefaultsArgs) ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) GroupDefaultBranchProtectionDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDefaultBranchProtectionDefaultsOutput).ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx)
}

// GroupDefaultBranchProtectionDefaultsPtrInput is an input type that accepts GroupDefaultBranchProtectionDefaultsArgs, GroupDefaultBranchProtectionDefaultsPtr and GroupDefaultBranchProtectionDefaultsPtrOutput values.
// You can construct a concrete instance of `GroupDefaultBranchProtectionDefaultsPtrInput` via:
//
//	        GroupDefaultBranchProtectionDefaultsArgs{...}
//
//	or:
//
//	        nil
type GroupDefaultBranchProtectionDefaultsPtrInput interface {
	pulumi.Input

	ToGroupDefaultBranchProtectionDefaultsPtrOutput() GroupDefaultBranchProtectionDefaultsPtrOutput
	ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Context) GroupDefaultBranchProtectionDefaultsPtrOutput
}

type groupDefaultBranchProtectionDefaultsPtrType GroupDefaultBranchProtectionDefaultsArgs

func GroupDefaultBranchProtectionDefaultsPtr(v *GroupDefaultBranchProtectionDefaultsArgs) GroupDefaultBranchProtectionDefaultsPtrInput {
	return (*groupDefaultBranchProtectionDefaultsPtrType)(v)
}

func (*groupDefaultBranchProtectionDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (i *groupDefaultBranchProtectionDefaultsPtrType) ToGroupDefaultBranchProtectionDefaultsPtrOutput() GroupDefaultBranchProtectionDefaultsPtrOutput {
	return i.ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Background())
}

func (i *groupDefaultBranchProtectionDefaultsPtrType) ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) GroupDefaultBranchProtectionDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDefaultBranchProtectionDefaultsPtrOutput)
}

type GroupDefaultBranchProtectionDefaultsOutput struct{ *pulumi.OutputState }

func (GroupDefaultBranchProtectionDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (o GroupDefaultBranchProtectionDefaultsOutput) ToGroupDefaultBranchProtectionDefaultsOutput() GroupDefaultBranchProtectionDefaultsOutput {
	return o
}

func (o GroupDefaultBranchProtectionDefaultsOutput) ToGroupDefaultBranchProtectionDefaultsOutputWithContext(ctx context.Context) GroupDefaultBranchProtectionDefaultsOutput {
	return o
}

func (o GroupDefaultBranchProtectionDefaultsOutput) ToGroupDefaultBranchProtectionDefaultsPtrOutput() GroupDefaultBranchProtectionDefaultsPtrOutput {
	return o.ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(context.Background())
}

func (o GroupDefaultBranchProtectionDefaultsOutput) ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) GroupDefaultBranchProtectionDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupDefaultBranchProtectionDefaults) *GroupDefaultBranchProtectionDefaults {
		return &v
	}).(GroupDefaultBranchProtectionDefaultsPtrOutput)
}

// Allow force push for all users with push access.
func (o GroupDefaultBranchProtectionDefaultsOutput) AllowForcePush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupDefaultBranchProtectionDefaults) *bool { return v.AllowForcePush }).(pulumi.BoolPtrOutput)
}

// An array of access levels allowed to merge. Valid values are: `developer`, `maintainer`, `no one`.
func (o GroupDefaultBranchProtectionDefaultsOutput) AllowedToMerges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupDefaultBranchProtectionDefaults) []string { return v.AllowedToMerges }).(pulumi.StringArrayOutput)
}

// An array of access levels allowed to push. Valid values are: `developer`, `maintainer`, `no one`.
func (o GroupDefaultBranchProtectionDefaultsOutput) AllowedToPushes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupDefaultBranchProtectionDefaults) []string { return v.AllowedToPushes }).(pulumi.StringArrayOutput)
}

// Allow developers to initial push.
func (o GroupDefaultBranchProtectionDefaultsOutput) DeveloperCanInitialPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupDefaultBranchProtectionDefaults) *bool { return v.DeveloperCanInitialPush }).(pulumi.BoolPtrOutput)
}

type GroupDefaultBranchProtectionDefaultsPtrOutput struct{ *pulumi.OutputState }

func (GroupDefaultBranchProtectionDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupDefaultBranchProtectionDefaults)(nil)).Elem()
}

func (o GroupDefaultBranchProtectionDefaultsPtrOutput) ToGroupDefaultBranchProtectionDefaultsPtrOutput() GroupDefaultBranchProtectionDefaultsPtrOutput {
	return o
}

func (o GroupDefaultBranchProtectionDefaultsPtrOutput) ToGroupDefaultBranchProtectionDefaultsPtrOutputWithContext(ctx context.Context) GroupDefaultBranchProtectionDefaultsPtrOutput {
	return o
}

func (o GroupDefaultBranchProtectionDefaultsPtrOutput) Elem() GroupDefaultBranchProtectionDefaultsOutput {
	return o.ApplyT(func(v *GroupDefaultBranchProtectionDefaults) GroupDefaultBranchProtectionDefaults {
		if v != nil {
			return *v
		}
		var ret GroupDefaultBranchProtectionDefaults
		return ret
	}).(GroupDefaultBranchProtectionDefaultsOutput)
}

// Allow force push for all users with push access.
func (o GroupDefaultBranchProtectionDefaultsPtrOutput) AllowForcePush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupDefaultBranchProtectionDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.AllowForcePush
	}).(pulumi.BoolPtrOutput)
}

// An array of access levels allowed to merge. Valid values are: `developer`, `maintainer`, `no one`.
func (o GroupDefaultBranchProtectionDefaultsPtrOutput) AllowedToMerges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupDefaultBranchProtectionDefaults) []string {
		if v == nil {
			return nil
		}
		return v.AllowedToMerges
	}).(pulumi.StringArrayOutput)
}

// An array of access levels allowed to push. Valid values are: `developer`, `maintainer`, `no one`.
func (o GroupDefaultBranchProtectionDefaultsPtrOutput) AllowedToPushes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupDefaultBranchProtectionDefaults) []string {
		if v == nil {
			return nil
		}
		return v.AllowedToPushes
	}).(pulumi.StringArrayOutput)
}

// Allow developers to initial push.
func (o GroupDefaultBranchProtectionDefaultsPtrOutput) DeveloperCanInitialPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupDefaultBranchProtectionDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.DeveloperCanInitialPush
	}).(pulumi.BoolPtrOutput)
}

type GroupEpicBoardList struct {
	// The ID of the list.
	Id *int `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId *int `pulumi:"labelId"`
	// The position of the list within the board. The position for the list is sed on the its position in the `lists` array.
	Position *int `pulumi:"position"`
}

// GroupEpicBoardListInput is an input type that accepts GroupEpicBoardListArgs and GroupEpicBoardListOutput values.
// You can construct a concrete instance of `GroupEpicBoardListInput` via:
//
//	GroupEpicBoardListArgs{...}
type GroupEpicBoardListInput interface {
	pulumi.Input

	ToGroupEpicBoardListOutput() GroupEpicBoardListOutput
	ToGroupEpicBoardListOutputWithContext(context.Context) GroupEpicBoardListOutput
}

type GroupEpicBoardListArgs struct {
	// The ID of the list.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId pulumi.IntPtrInput `pulumi:"labelId"`
	// The position of the list within the board. The position for the list is sed on the its position in the `lists` array.
	Position pulumi.IntPtrInput `pulumi:"position"`
}

func (GroupEpicBoardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEpicBoardList)(nil)).Elem()
}

func (i GroupEpicBoardListArgs) ToGroupEpicBoardListOutput() GroupEpicBoardListOutput {
	return i.ToGroupEpicBoardListOutputWithContext(context.Background())
}

func (i GroupEpicBoardListArgs) ToGroupEpicBoardListOutputWithContext(ctx context.Context) GroupEpicBoardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEpicBoardListOutput)
}

// GroupEpicBoardListArrayInput is an input type that accepts GroupEpicBoardListArray and GroupEpicBoardListArrayOutput values.
// You can construct a concrete instance of `GroupEpicBoardListArrayInput` via:
//
//	GroupEpicBoardListArray{ GroupEpicBoardListArgs{...} }
type GroupEpicBoardListArrayInput interface {
	pulumi.Input

	ToGroupEpicBoardListArrayOutput() GroupEpicBoardListArrayOutput
	ToGroupEpicBoardListArrayOutputWithContext(context.Context) GroupEpicBoardListArrayOutput
}

type GroupEpicBoardListArray []GroupEpicBoardListInput

func (GroupEpicBoardListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEpicBoardList)(nil)).Elem()
}

func (i GroupEpicBoardListArray) ToGroupEpicBoardListArrayOutput() GroupEpicBoardListArrayOutput {
	return i.ToGroupEpicBoardListArrayOutputWithContext(context.Background())
}

func (i GroupEpicBoardListArray) ToGroupEpicBoardListArrayOutputWithContext(ctx context.Context) GroupEpicBoardListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEpicBoardListArrayOutput)
}

type GroupEpicBoardListOutput struct{ *pulumi.OutputState }

func (GroupEpicBoardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEpicBoardList)(nil)).Elem()
}

func (o GroupEpicBoardListOutput) ToGroupEpicBoardListOutput() GroupEpicBoardListOutput {
	return o
}

func (o GroupEpicBoardListOutput) ToGroupEpicBoardListOutputWithContext(ctx context.Context) GroupEpicBoardListOutput {
	return o
}

// The ID of the list.
func (o GroupEpicBoardListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupEpicBoardList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the label the list should be scoped to.
func (o GroupEpicBoardListOutput) LabelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupEpicBoardList) *int { return v.LabelId }).(pulumi.IntPtrOutput)
}

// The position of the list within the board. The position for the list is sed on the its position in the `lists` array.
func (o GroupEpicBoardListOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupEpicBoardList) *int { return v.Position }).(pulumi.IntPtrOutput)
}

type GroupEpicBoardListArrayOutput struct{ *pulumi.OutputState }

func (GroupEpicBoardListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEpicBoardList)(nil)).Elem()
}

func (o GroupEpicBoardListArrayOutput) ToGroupEpicBoardListArrayOutput() GroupEpicBoardListArrayOutput {
	return o
}

func (o GroupEpicBoardListArrayOutput) ToGroupEpicBoardListArrayOutputWithContext(ctx context.Context) GroupEpicBoardListArrayOutput {
	return o
}

func (o GroupEpicBoardListArrayOutput) Index(i pulumi.IntInput) GroupEpicBoardListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupEpicBoardList {
		return vs[0].([]GroupEpicBoardList)[vs[1].(int)]
	}).(GroupEpicBoardListOutput)
}

type GroupHookCustomHeader struct {
	// Key of the custom header.
	Key string `pulumi:"key"`
	// Value of the custom header. This value cannot be imported.
	Value string `pulumi:"value"`
}

// GroupHookCustomHeaderInput is an input type that accepts GroupHookCustomHeaderArgs and GroupHookCustomHeaderOutput values.
// You can construct a concrete instance of `GroupHookCustomHeaderInput` via:
//
//	GroupHookCustomHeaderArgs{...}
type GroupHookCustomHeaderInput interface {
	pulumi.Input

	ToGroupHookCustomHeaderOutput() GroupHookCustomHeaderOutput
	ToGroupHookCustomHeaderOutputWithContext(context.Context) GroupHookCustomHeaderOutput
}

type GroupHookCustomHeaderArgs struct {
	// Key of the custom header.
	Key pulumi.StringInput `pulumi:"key"`
	// Value of the custom header. This value cannot be imported.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GroupHookCustomHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupHookCustomHeader)(nil)).Elem()
}

func (i GroupHookCustomHeaderArgs) ToGroupHookCustomHeaderOutput() GroupHookCustomHeaderOutput {
	return i.ToGroupHookCustomHeaderOutputWithContext(context.Background())
}

func (i GroupHookCustomHeaderArgs) ToGroupHookCustomHeaderOutputWithContext(ctx context.Context) GroupHookCustomHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupHookCustomHeaderOutput)
}

// GroupHookCustomHeaderArrayInput is an input type that accepts GroupHookCustomHeaderArray and GroupHookCustomHeaderArrayOutput values.
// You can construct a concrete instance of `GroupHookCustomHeaderArrayInput` via:
//
//	GroupHookCustomHeaderArray{ GroupHookCustomHeaderArgs{...} }
type GroupHookCustomHeaderArrayInput interface {
	pulumi.Input

	ToGroupHookCustomHeaderArrayOutput() GroupHookCustomHeaderArrayOutput
	ToGroupHookCustomHeaderArrayOutputWithContext(context.Context) GroupHookCustomHeaderArrayOutput
}

type GroupHookCustomHeaderArray []GroupHookCustomHeaderInput

func (GroupHookCustomHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupHookCustomHeader)(nil)).Elem()
}

func (i GroupHookCustomHeaderArray) ToGroupHookCustomHeaderArrayOutput() GroupHookCustomHeaderArrayOutput {
	return i.ToGroupHookCustomHeaderArrayOutputWithContext(context.Background())
}

func (i GroupHookCustomHeaderArray) ToGroupHookCustomHeaderArrayOutputWithContext(ctx context.Context) GroupHookCustomHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupHookCustomHeaderArrayOutput)
}

type GroupHookCustomHeaderOutput struct{ *pulumi.OutputState }

func (GroupHookCustomHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupHookCustomHeader)(nil)).Elem()
}

func (o GroupHookCustomHeaderOutput) ToGroupHookCustomHeaderOutput() GroupHookCustomHeaderOutput {
	return o
}

func (o GroupHookCustomHeaderOutput) ToGroupHookCustomHeaderOutputWithContext(ctx context.Context) GroupHookCustomHeaderOutput {
	return o
}

// Key of the custom header.
func (o GroupHookCustomHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GroupHookCustomHeader) string { return v.Key }).(pulumi.StringOutput)
}

// Value of the custom header. This value cannot be imported.
func (o GroupHookCustomHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GroupHookCustomHeader) string { return v.Value }).(pulumi.StringOutput)
}

type GroupHookCustomHeaderArrayOutput struct{ *pulumi.OutputState }

func (GroupHookCustomHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupHookCustomHeader)(nil)).Elem()
}

func (o GroupHookCustomHeaderArrayOutput) ToGroupHookCustomHeaderArrayOutput() GroupHookCustomHeaderArrayOutput {
	return o
}

func (o GroupHookCustomHeaderArrayOutput) ToGroupHookCustomHeaderArrayOutputWithContext(ctx context.Context) GroupHookCustomHeaderArrayOutput {
	return o
}

func (o GroupHookCustomHeaderArrayOutput) Index(i pulumi.IntInput) GroupHookCustomHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupHookCustomHeader {
		return vs[0].([]GroupHookCustomHeader)[vs[1].(int)]
	}).(GroupHookCustomHeaderOutput)
}

type GroupIssueBoardList struct {
	// The ID of the list.
	Id *int `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId *int `pulumi:"labelId"`
	// The explicit position of the list within the board, zero based.
	Position *int `pulumi:"position"`
}

// GroupIssueBoardListInput is an input type that accepts GroupIssueBoardListArgs and GroupIssueBoardListOutput values.
// You can construct a concrete instance of `GroupIssueBoardListInput` via:
//
//	GroupIssueBoardListArgs{...}
type GroupIssueBoardListInput interface {
	pulumi.Input

	ToGroupIssueBoardListOutput() GroupIssueBoardListOutput
	ToGroupIssueBoardListOutputWithContext(context.Context) GroupIssueBoardListOutput
}

type GroupIssueBoardListArgs struct {
	// The ID of the list.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId pulumi.IntPtrInput `pulumi:"labelId"`
	// The explicit position of the list within the board, zero based.
	Position pulumi.IntPtrInput `pulumi:"position"`
}

func (GroupIssueBoardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupIssueBoardList)(nil)).Elem()
}

func (i GroupIssueBoardListArgs) ToGroupIssueBoardListOutput() GroupIssueBoardListOutput {
	return i.ToGroupIssueBoardListOutputWithContext(context.Background())
}

func (i GroupIssueBoardListArgs) ToGroupIssueBoardListOutputWithContext(ctx context.Context) GroupIssueBoardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupIssueBoardListOutput)
}

// GroupIssueBoardListArrayInput is an input type that accepts GroupIssueBoardListArray and GroupIssueBoardListArrayOutput values.
// You can construct a concrete instance of `GroupIssueBoardListArrayInput` via:
//
//	GroupIssueBoardListArray{ GroupIssueBoardListArgs{...} }
type GroupIssueBoardListArrayInput interface {
	pulumi.Input

	ToGroupIssueBoardListArrayOutput() GroupIssueBoardListArrayOutput
	ToGroupIssueBoardListArrayOutputWithContext(context.Context) GroupIssueBoardListArrayOutput
}

type GroupIssueBoardListArray []GroupIssueBoardListInput

func (GroupIssueBoardListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupIssueBoardList)(nil)).Elem()
}

func (i GroupIssueBoardListArray) ToGroupIssueBoardListArrayOutput() GroupIssueBoardListArrayOutput {
	return i.ToGroupIssueBoardListArrayOutputWithContext(context.Background())
}

func (i GroupIssueBoardListArray) ToGroupIssueBoardListArrayOutputWithContext(ctx context.Context) GroupIssueBoardListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupIssueBoardListArrayOutput)
}

type GroupIssueBoardListOutput struct{ *pulumi.OutputState }

func (GroupIssueBoardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupIssueBoardList)(nil)).Elem()
}

func (o GroupIssueBoardListOutput) ToGroupIssueBoardListOutput() GroupIssueBoardListOutput {
	return o
}

func (o GroupIssueBoardListOutput) ToGroupIssueBoardListOutputWithContext(ctx context.Context) GroupIssueBoardListOutput {
	return o
}

// The ID of the list.
func (o GroupIssueBoardListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupIssueBoardList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the label the list should be scoped to.
func (o GroupIssueBoardListOutput) LabelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupIssueBoardList) *int { return v.LabelId }).(pulumi.IntPtrOutput)
}

// The explicit position of the list within the board, zero based.
func (o GroupIssueBoardListOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupIssueBoardList) *int { return v.Position }).(pulumi.IntPtrOutput)
}

type GroupIssueBoardListArrayOutput struct{ *pulumi.OutputState }

func (GroupIssueBoardListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupIssueBoardList)(nil)).Elem()
}

func (o GroupIssueBoardListArrayOutput) ToGroupIssueBoardListArrayOutput() GroupIssueBoardListArrayOutput {
	return o
}

func (o GroupIssueBoardListArrayOutput) ToGroupIssueBoardListArrayOutputWithContext(ctx context.Context) GroupIssueBoardListArrayOutput {
	return o
}

func (o GroupIssueBoardListArrayOutput) Index(i pulumi.IntInput) GroupIssueBoardListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupIssueBoardList {
		return vs[0].([]GroupIssueBoardList)[vs[1].(int)]
	}).(GroupIssueBoardListOutput)
}

type GroupProtectedEnvironmentApprovalRule struct {
	// Levels of access allowed to approve a deployment to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to approve a deployment to this protected environment. TThe group must be a sub-group under the given group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId *int `pulumi:"groupId"`
	// Group inheritance allows access rules to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType *int `pulumi:"groupInheritanceType"`
	// The unique ID of the Approval Rules object.
	Id *int `pulumi:"id"`
	// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
	RequiredApprovals *int `pulumi:"requiredApprovals"`
	// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the group with Maintainer role or higher. Mutually exclusive with `accessLevel` and `groupId`.
	UserId *int `pulumi:"userId"`
}

// GroupProtectedEnvironmentApprovalRuleInput is an input type that accepts GroupProtectedEnvironmentApprovalRuleArgs and GroupProtectedEnvironmentApprovalRuleOutput values.
// You can construct a concrete instance of `GroupProtectedEnvironmentApprovalRuleInput` via:
//
//	GroupProtectedEnvironmentApprovalRuleArgs{...}
type GroupProtectedEnvironmentApprovalRuleInput interface {
	pulumi.Input

	ToGroupProtectedEnvironmentApprovalRuleOutput() GroupProtectedEnvironmentApprovalRuleOutput
	ToGroupProtectedEnvironmentApprovalRuleOutputWithContext(context.Context) GroupProtectedEnvironmentApprovalRuleOutput
}

type GroupProtectedEnvironmentApprovalRuleArgs struct {
	// Levels of access allowed to approve a deployment to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to approve a deployment to this protected environment. TThe group must be a sub-group under the given group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// Group inheritance allows access rules to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType pulumi.IntPtrInput `pulumi:"groupInheritanceType"`
	// The unique ID of the Approval Rules object.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
	RequiredApprovals pulumi.IntPtrInput `pulumi:"requiredApprovals"`
	// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the group with Maintainer role or higher. Mutually exclusive with `accessLevel` and `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GroupProtectedEnvironmentApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (i GroupProtectedEnvironmentApprovalRuleArgs) ToGroupProtectedEnvironmentApprovalRuleOutput() GroupProtectedEnvironmentApprovalRuleOutput {
	return i.ToGroupProtectedEnvironmentApprovalRuleOutputWithContext(context.Background())
}

func (i GroupProtectedEnvironmentApprovalRuleArgs) ToGroupProtectedEnvironmentApprovalRuleOutputWithContext(ctx context.Context) GroupProtectedEnvironmentApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupProtectedEnvironmentApprovalRuleOutput)
}

// GroupProtectedEnvironmentApprovalRuleArrayInput is an input type that accepts GroupProtectedEnvironmentApprovalRuleArray and GroupProtectedEnvironmentApprovalRuleArrayOutput values.
// You can construct a concrete instance of `GroupProtectedEnvironmentApprovalRuleArrayInput` via:
//
//	GroupProtectedEnvironmentApprovalRuleArray{ GroupProtectedEnvironmentApprovalRuleArgs{...} }
type GroupProtectedEnvironmentApprovalRuleArrayInput interface {
	pulumi.Input

	ToGroupProtectedEnvironmentApprovalRuleArrayOutput() GroupProtectedEnvironmentApprovalRuleArrayOutput
	ToGroupProtectedEnvironmentApprovalRuleArrayOutputWithContext(context.Context) GroupProtectedEnvironmentApprovalRuleArrayOutput
}

type GroupProtectedEnvironmentApprovalRuleArray []GroupProtectedEnvironmentApprovalRuleInput

func (GroupProtectedEnvironmentApprovalRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (i GroupProtectedEnvironmentApprovalRuleArray) ToGroupProtectedEnvironmentApprovalRuleArrayOutput() GroupProtectedEnvironmentApprovalRuleArrayOutput {
	return i.ToGroupProtectedEnvironmentApprovalRuleArrayOutputWithContext(context.Background())
}

func (i GroupProtectedEnvironmentApprovalRuleArray) ToGroupProtectedEnvironmentApprovalRuleArrayOutputWithContext(ctx context.Context) GroupProtectedEnvironmentApprovalRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupProtectedEnvironmentApprovalRuleArrayOutput)
}

type GroupProtectedEnvironmentApprovalRuleOutput struct{ *pulumi.OutputState }

func (GroupProtectedEnvironmentApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (o GroupProtectedEnvironmentApprovalRuleOutput) ToGroupProtectedEnvironmentApprovalRuleOutput() GroupProtectedEnvironmentApprovalRuleOutput {
	return o
}

func (o GroupProtectedEnvironmentApprovalRuleOutput) ToGroupProtectedEnvironmentApprovalRuleOutputWithContext(ctx context.Context) GroupProtectedEnvironmentApprovalRuleOutput {
	return o
}

// Levels of access allowed to approve a deployment to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
func (o GroupProtectedEnvironmentApprovalRuleOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentApprovalRule) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o GroupProtectedEnvironmentApprovalRuleOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentApprovalRule) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of the group allowed to approve a deployment to this protected environment. TThe group must be a sub-group under the given group. Mutually exclusive with `accessLevel` and `userId`.
func (o GroupProtectedEnvironmentApprovalRuleOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentApprovalRule) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// Group inheritance allows access rules to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
func (o GroupProtectedEnvironmentApprovalRuleOutput) GroupInheritanceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentApprovalRule) *int { return v.GroupInheritanceType }).(pulumi.IntPtrOutput)
}

// The unique ID of the Approval Rules object.
func (o GroupProtectedEnvironmentApprovalRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentApprovalRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
func (o GroupProtectedEnvironmentApprovalRuleOutput) RequiredApprovals() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentApprovalRule) *int { return v.RequiredApprovals }).(pulumi.IntPtrOutput)
}

// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the group with Maintainer role or higher. Mutually exclusive with `accessLevel` and `groupId`.
func (o GroupProtectedEnvironmentApprovalRuleOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentApprovalRule) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GroupProtectedEnvironmentApprovalRuleArrayOutput struct{ *pulumi.OutputState }

func (GroupProtectedEnvironmentApprovalRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (o GroupProtectedEnvironmentApprovalRuleArrayOutput) ToGroupProtectedEnvironmentApprovalRuleArrayOutput() GroupProtectedEnvironmentApprovalRuleArrayOutput {
	return o
}

func (o GroupProtectedEnvironmentApprovalRuleArrayOutput) ToGroupProtectedEnvironmentApprovalRuleArrayOutputWithContext(ctx context.Context) GroupProtectedEnvironmentApprovalRuleArrayOutput {
	return o
}

func (o GroupProtectedEnvironmentApprovalRuleArrayOutput) Index(i pulumi.IntInput) GroupProtectedEnvironmentApprovalRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupProtectedEnvironmentApprovalRule {
		return vs[0].([]GroupProtectedEnvironmentApprovalRule)[vs[1].(int)]
	}).(GroupProtectedEnvironmentApprovalRuleOutput)
}

type GroupProtectedEnvironmentDeployAccessLevel struct {
	// Levels of access required to deploy to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to deploy to this protected environment. The group must be a sub-group under the given group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId *int `pulumi:"groupId"`
	// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType *int `pulumi:"groupInheritanceType"`
	// The unique ID of the Deploy Access Level object.
	Id *int `pulumi:"id"`
	// The ID of the user allowed to deploy to this protected environment. The user must be a member of the group with Maintainer role or higher. Mutually exclusive with `accessLevel` and `groupId`.
	UserId *int `pulumi:"userId"`
}

// GroupProtectedEnvironmentDeployAccessLevelInput is an input type that accepts GroupProtectedEnvironmentDeployAccessLevelArgs and GroupProtectedEnvironmentDeployAccessLevelOutput values.
// You can construct a concrete instance of `GroupProtectedEnvironmentDeployAccessLevelInput` via:
//
//	GroupProtectedEnvironmentDeployAccessLevelArgs{...}
type GroupProtectedEnvironmentDeployAccessLevelInput interface {
	pulumi.Input

	ToGroupProtectedEnvironmentDeployAccessLevelOutput() GroupProtectedEnvironmentDeployAccessLevelOutput
	ToGroupProtectedEnvironmentDeployAccessLevelOutputWithContext(context.Context) GroupProtectedEnvironmentDeployAccessLevelOutput
}

type GroupProtectedEnvironmentDeployAccessLevelArgs struct {
	// Levels of access required to deploy to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to deploy to this protected environment. The group must be a sub-group under the given group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType pulumi.IntPtrInput `pulumi:"groupInheritanceType"`
	// The unique ID of the Deploy Access Level object.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the user allowed to deploy to this protected environment. The user must be a member of the group with Maintainer role or higher. Mutually exclusive with `accessLevel` and `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GroupProtectedEnvironmentDeployAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (i GroupProtectedEnvironmentDeployAccessLevelArgs) ToGroupProtectedEnvironmentDeployAccessLevelOutput() GroupProtectedEnvironmentDeployAccessLevelOutput {
	return i.ToGroupProtectedEnvironmentDeployAccessLevelOutputWithContext(context.Background())
}

func (i GroupProtectedEnvironmentDeployAccessLevelArgs) ToGroupProtectedEnvironmentDeployAccessLevelOutputWithContext(ctx context.Context) GroupProtectedEnvironmentDeployAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupProtectedEnvironmentDeployAccessLevelOutput)
}

// GroupProtectedEnvironmentDeployAccessLevelArrayInput is an input type that accepts GroupProtectedEnvironmentDeployAccessLevelArray and GroupProtectedEnvironmentDeployAccessLevelArrayOutput values.
// You can construct a concrete instance of `GroupProtectedEnvironmentDeployAccessLevelArrayInput` via:
//
//	GroupProtectedEnvironmentDeployAccessLevelArray{ GroupProtectedEnvironmentDeployAccessLevelArgs{...} }
type GroupProtectedEnvironmentDeployAccessLevelArrayInput interface {
	pulumi.Input

	ToGroupProtectedEnvironmentDeployAccessLevelArrayOutput() GroupProtectedEnvironmentDeployAccessLevelArrayOutput
	ToGroupProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(context.Context) GroupProtectedEnvironmentDeployAccessLevelArrayOutput
}

type GroupProtectedEnvironmentDeployAccessLevelArray []GroupProtectedEnvironmentDeployAccessLevelInput

func (GroupProtectedEnvironmentDeployAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (i GroupProtectedEnvironmentDeployAccessLevelArray) ToGroupProtectedEnvironmentDeployAccessLevelArrayOutput() GroupProtectedEnvironmentDeployAccessLevelArrayOutput {
	return i.ToGroupProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(context.Background())
}

func (i GroupProtectedEnvironmentDeployAccessLevelArray) ToGroupProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(ctx context.Context) GroupProtectedEnvironmentDeployAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupProtectedEnvironmentDeployAccessLevelArrayOutput)
}

type GroupProtectedEnvironmentDeployAccessLevelOutput struct{ *pulumi.OutputState }

func (GroupProtectedEnvironmentDeployAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (o GroupProtectedEnvironmentDeployAccessLevelOutput) ToGroupProtectedEnvironmentDeployAccessLevelOutput() GroupProtectedEnvironmentDeployAccessLevelOutput {
	return o
}

func (o GroupProtectedEnvironmentDeployAccessLevelOutput) ToGroupProtectedEnvironmentDeployAccessLevelOutputWithContext(ctx context.Context) GroupProtectedEnvironmentDeployAccessLevelOutput {
	return o
}

// Levels of access required to deploy to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
func (o GroupProtectedEnvironmentDeployAccessLevelOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentDeployAccessLevel) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o GroupProtectedEnvironmentDeployAccessLevelOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentDeployAccessLevel) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of the group allowed to deploy to this protected environment. The group must be a sub-group under the given group. Mutually exclusive with `accessLevel` and `userId`.
func (o GroupProtectedEnvironmentDeployAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentDeployAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
func (o GroupProtectedEnvironmentDeployAccessLevelOutput) GroupInheritanceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentDeployAccessLevel) *int { return v.GroupInheritanceType }).(pulumi.IntPtrOutput)
}

// The unique ID of the Deploy Access Level object.
func (o GroupProtectedEnvironmentDeployAccessLevelOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentDeployAccessLevel) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the user allowed to deploy to this protected environment. The user must be a member of the group with Maintainer role or higher. Mutually exclusive with `accessLevel` and `groupId`.
func (o GroupProtectedEnvironmentDeployAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupProtectedEnvironmentDeployAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GroupProtectedEnvironmentDeployAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GroupProtectedEnvironmentDeployAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (o GroupProtectedEnvironmentDeployAccessLevelArrayOutput) ToGroupProtectedEnvironmentDeployAccessLevelArrayOutput() GroupProtectedEnvironmentDeployAccessLevelArrayOutput {
	return o
}

func (o GroupProtectedEnvironmentDeployAccessLevelArrayOutput) ToGroupProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(ctx context.Context) GroupProtectedEnvironmentDeployAccessLevelArrayOutput {
	return o
}

func (o GroupProtectedEnvironmentDeployAccessLevelArrayOutput) Index(i pulumi.IntInput) GroupProtectedEnvironmentDeployAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupProtectedEnvironmentDeployAccessLevel {
		return vs[0].([]GroupProtectedEnvironmentDeployAccessLevel)[vs[1].(int)]
	}).(GroupProtectedEnvironmentDeployAccessLevelOutput)
}

type GroupPushRules struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `pulumi:"branchNameRegex"`
	// Only commits pushed using verified emails are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
	CommitCommitterCheck *bool `pulumi:"commitCommitterCheck"`
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck *bool `pulumi:"commitCommitterNameCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag *bool `pulumi:"denyDeleteTag"`
	// Filenames matching the regular expression provided in this attribute are not allowed, for example, `(jar|exe)$`.
	FileNameRegex *string `pulumi:"fileNameRegex"`
	// Maximum file size (MB) allowed.
	MaxFileSize *int `pulumi:"maxFileSize"`
	// Allows only GitLab users to author commits.
	MemberCheck *bool `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `pulumi:"preventSecrets"`
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits *bool `pulumi:"rejectNonDcoCommits"`
	// Only commits signed through GPG are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
	RejectUnsignedCommits *bool `pulumi:"rejectUnsignedCommits"`
}

// GroupPushRulesInput is an input type that accepts GroupPushRulesArgs and GroupPushRulesOutput values.
// You can construct a concrete instance of `GroupPushRulesInput` via:
//
//	GroupPushRulesArgs{...}
type GroupPushRulesInput interface {
	pulumi.Input

	ToGroupPushRulesOutput() GroupPushRulesOutput
	ToGroupPushRulesOutputWithContext(context.Context) GroupPushRulesOutput
}

type GroupPushRulesArgs struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex pulumi.StringPtrInput `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex pulumi.StringPtrInput `pulumi:"branchNameRegex"`
	// Only commits pushed using verified emails are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
	CommitCommitterCheck pulumi.BoolPtrInput `pulumi:"commitCommitterCheck"`
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck pulumi.BoolPtrInput `pulumi:"commitCommitterNameCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex pulumi.StringPtrInput `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex pulumi.StringPtrInput `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag pulumi.BoolPtrInput `pulumi:"denyDeleteTag"`
	// Filenames matching the regular expression provided in this attribute are not allowed, for example, `(jar|exe)$`.
	FileNameRegex pulumi.StringPtrInput `pulumi:"fileNameRegex"`
	// Maximum file size (MB) allowed.
	MaxFileSize pulumi.IntPtrInput `pulumi:"maxFileSize"`
	// Allows only GitLab users to author commits.
	MemberCheck pulumi.BoolPtrInput `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets pulumi.BoolPtrInput `pulumi:"preventSecrets"`
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits pulumi.BoolPtrInput `pulumi:"rejectNonDcoCommits"`
	// Only commits signed through GPG are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
	RejectUnsignedCommits pulumi.BoolPtrInput `pulumi:"rejectUnsignedCommits"`
}

func (GroupPushRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPushRules)(nil)).Elem()
}

func (i GroupPushRulesArgs) ToGroupPushRulesOutput() GroupPushRulesOutput {
	return i.ToGroupPushRulesOutputWithContext(context.Background())
}

func (i GroupPushRulesArgs) ToGroupPushRulesOutputWithContext(ctx context.Context) GroupPushRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPushRulesOutput)
}

func (i GroupPushRulesArgs) ToGroupPushRulesPtrOutput() GroupPushRulesPtrOutput {
	return i.ToGroupPushRulesPtrOutputWithContext(context.Background())
}

func (i GroupPushRulesArgs) ToGroupPushRulesPtrOutputWithContext(ctx context.Context) GroupPushRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPushRulesOutput).ToGroupPushRulesPtrOutputWithContext(ctx)
}

// GroupPushRulesPtrInput is an input type that accepts GroupPushRulesArgs, GroupPushRulesPtr and GroupPushRulesPtrOutput values.
// You can construct a concrete instance of `GroupPushRulesPtrInput` via:
//
//	        GroupPushRulesArgs{...}
//
//	or:
//
//	        nil
type GroupPushRulesPtrInput interface {
	pulumi.Input

	ToGroupPushRulesPtrOutput() GroupPushRulesPtrOutput
	ToGroupPushRulesPtrOutputWithContext(context.Context) GroupPushRulesPtrOutput
}

type groupPushRulesPtrType GroupPushRulesArgs

func GroupPushRulesPtr(v *GroupPushRulesArgs) GroupPushRulesPtrInput {
	return (*groupPushRulesPtrType)(v)
}

func (*groupPushRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPushRules)(nil)).Elem()
}

func (i *groupPushRulesPtrType) ToGroupPushRulesPtrOutput() GroupPushRulesPtrOutput {
	return i.ToGroupPushRulesPtrOutputWithContext(context.Background())
}

func (i *groupPushRulesPtrType) ToGroupPushRulesPtrOutputWithContext(ctx context.Context) GroupPushRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPushRulesPtrOutput)
}

type GroupPushRulesOutput struct{ *pulumi.OutputState }

func (GroupPushRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPushRules)(nil)).Elem()
}

func (o GroupPushRulesOutput) ToGroupPushRulesOutput() GroupPushRulesOutput {
	return o
}

func (o GroupPushRulesOutput) ToGroupPushRulesOutputWithContext(ctx context.Context) GroupPushRulesOutput {
	return o
}

func (o GroupPushRulesOutput) ToGroupPushRulesPtrOutput() GroupPushRulesPtrOutput {
	return o.ToGroupPushRulesPtrOutputWithContext(context.Background())
}

func (o GroupPushRulesOutput) ToGroupPushRulesPtrOutputWithContext(ctx context.Context) GroupPushRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPushRules) *GroupPushRules {
		return &v
	}).(GroupPushRulesPtrOutput)
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o GroupPushRulesOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *string { return v.AuthorEmailRegex }).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o GroupPushRulesOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *string { return v.BranchNameRegex }).(pulumi.StringPtrOutput)
}

// Only commits pushed using verified emails are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
func (o GroupPushRulesOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *bool { return v.CommitCommitterCheck }).(pulumi.BoolPtrOutput)
}

// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
func (o GroupPushRulesOutput) CommitCommitterNameCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *bool { return v.CommitCommitterNameCheck }).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o GroupPushRulesOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *string { return v.CommitMessageNegativeRegex }).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o GroupPushRulesOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *string { return v.CommitMessageRegex }).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o GroupPushRulesOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *bool { return v.DenyDeleteTag }).(pulumi.BoolPtrOutput)
}

// Filenames matching the regular expression provided in this attribute are not allowed, for example, `(jar|exe)$`.
func (o GroupPushRulesOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *string { return v.FileNameRegex }).(pulumi.StringPtrOutput)
}

// Maximum file size (MB) allowed.
func (o GroupPushRulesOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *int { return v.MaxFileSize }).(pulumi.IntPtrOutput)
}

// Allows only GitLab users to author commits.
func (o GroupPushRulesOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *bool { return v.MemberCheck }).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o GroupPushRulesOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *bool { return v.PreventSecrets }).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not DCO certified.
func (o GroupPushRulesOutput) RejectNonDcoCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *bool { return v.RejectNonDcoCommits }).(pulumi.BoolPtrOutput)
}

// Only commits signed through GPG are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
func (o GroupPushRulesOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupPushRules) *bool { return v.RejectUnsignedCommits }).(pulumi.BoolPtrOutput)
}

type GroupPushRulesPtrOutput struct{ *pulumi.OutputState }

func (GroupPushRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPushRules)(nil)).Elem()
}

func (o GroupPushRulesPtrOutput) ToGroupPushRulesPtrOutput() GroupPushRulesPtrOutput {
	return o
}

func (o GroupPushRulesPtrOutput) ToGroupPushRulesPtrOutputWithContext(ctx context.Context) GroupPushRulesPtrOutput {
	return o
}

func (o GroupPushRulesPtrOutput) Elem() GroupPushRulesOutput {
	return o.ApplyT(func(v *GroupPushRules) GroupPushRules {
		if v != nil {
			return *v
		}
		var ret GroupPushRules
		return ret
	}).(GroupPushRulesOutput)
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o GroupPushRulesPtrOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *string {
		if v == nil {
			return nil
		}
		return v.AuthorEmailRegex
	}).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o GroupPushRulesPtrOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *string {
		if v == nil {
			return nil
		}
		return v.BranchNameRegex
	}).(pulumi.StringPtrOutput)
}

// Only commits pushed using verified emails are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
func (o GroupPushRulesPtrOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.CommitCommitterCheck
	}).(pulumi.BoolPtrOutput)
}

// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
func (o GroupPushRulesPtrOutput) CommitCommitterNameCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.CommitCommitterNameCheck
	}).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o GroupPushRulesPtrOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageNegativeRegex
	}).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o GroupPushRulesPtrOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageRegex
	}).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o GroupPushRulesPtrOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.DenyDeleteTag
	}).(pulumi.BoolPtrOutput)
}

// Filenames matching the regular expression provided in this attribute are not allowed, for example, `(jar|exe)$`.
func (o GroupPushRulesPtrOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *string {
		if v == nil {
			return nil
		}
		return v.FileNameRegex
	}).(pulumi.StringPtrOutput)
}

// Maximum file size (MB) allowed.
func (o GroupPushRulesPtrOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *int {
		if v == nil {
			return nil
		}
		return v.MaxFileSize
	}).(pulumi.IntPtrOutput)
}

// Allows only GitLab users to author commits.
func (o GroupPushRulesPtrOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.MemberCheck
	}).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o GroupPushRulesPtrOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.PreventSecrets
	}).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not DCO certified.
func (o GroupPushRulesPtrOutput) RejectNonDcoCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.RejectNonDcoCommits
	}).(pulumi.BoolPtrOutput)
}

// Only commits signed through GPG are allowed.  **Note** This attribute is only supported in GitLab versions >= 16.4.
func (o GroupPushRulesPtrOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.RejectUnsignedCommits
	}).(pulumi.BoolPtrOutput)
}

type PersonalAccessTokenRotationConfiguration struct {
	// The duration (in days) the new token should be valid for.
	ExpirationDays int `pulumi:"expirationDays"`
	// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
	RotateBeforeDays int `pulumi:"rotateBeforeDays"`
}

// PersonalAccessTokenRotationConfigurationInput is an input type that accepts PersonalAccessTokenRotationConfigurationArgs and PersonalAccessTokenRotationConfigurationOutput values.
// You can construct a concrete instance of `PersonalAccessTokenRotationConfigurationInput` via:
//
//	PersonalAccessTokenRotationConfigurationArgs{...}
type PersonalAccessTokenRotationConfigurationInput interface {
	pulumi.Input

	ToPersonalAccessTokenRotationConfigurationOutput() PersonalAccessTokenRotationConfigurationOutput
	ToPersonalAccessTokenRotationConfigurationOutputWithContext(context.Context) PersonalAccessTokenRotationConfigurationOutput
}

type PersonalAccessTokenRotationConfigurationArgs struct {
	// The duration (in days) the new token should be valid for.
	ExpirationDays pulumi.IntInput `pulumi:"expirationDays"`
	// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
	RotateBeforeDays pulumi.IntInput `pulumi:"rotateBeforeDays"`
}

func (PersonalAccessTokenRotationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalAccessTokenRotationConfiguration)(nil)).Elem()
}

func (i PersonalAccessTokenRotationConfigurationArgs) ToPersonalAccessTokenRotationConfigurationOutput() PersonalAccessTokenRotationConfigurationOutput {
	return i.ToPersonalAccessTokenRotationConfigurationOutputWithContext(context.Background())
}

func (i PersonalAccessTokenRotationConfigurationArgs) ToPersonalAccessTokenRotationConfigurationOutputWithContext(ctx context.Context) PersonalAccessTokenRotationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalAccessTokenRotationConfigurationOutput)
}

func (i PersonalAccessTokenRotationConfigurationArgs) ToPersonalAccessTokenRotationConfigurationPtrOutput() PersonalAccessTokenRotationConfigurationPtrOutput {
	return i.ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (i PersonalAccessTokenRotationConfigurationArgs) ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) PersonalAccessTokenRotationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalAccessTokenRotationConfigurationOutput).ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(ctx)
}

// PersonalAccessTokenRotationConfigurationPtrInput is an input type that accepts PersonalAccessTokenRotationConfigurationArgs, PersonalAccessTokenRotationConfigurationPtr and PersonalAccessTokenRotationConfigurationPtrOutput values.
// You can construct a concrete instance of `PersonalAccessTokenRotationConfigurationPtrInput` via:
//
//	        PersonalAccessTokenRotationConfigurationArgs{...}
//
//	or:
//
//	        nil
type PersonalAccessTokenRotationConfigurationPtrInput interface {
	pulumi.Input

	ToPersonalAccessTokenRotationConfigurationPtrOutput() PersonalAccessTokenRotationConfigurationPtrOutput
	ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(context.Context) PersonalAccessTokenRotationConfigurationPtrOutput
}

type personalAccessTokenRotationConfigurationPtrType PersonalAccessTokenRotationConfigurationArgs

func PersonalAccessTokenRotationConfigurationPtr(v *PersonalAccessTokenRotationConfigurationArgs) PersonalAccessTokenRotationConfigurationPtrInput {
	return (*personalAccessTokenRotationConfigurationPtrType)(v)
}

func (*personalAccessTokenRotationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalAccessTokenRotationConfiguration)(nil)).Elem()
}

func (i *personalAccessTokenRotationConfigurationPtrType) ToPersonalAccessTokenRotationConfigurationPtrOutput() PersonalAccessTokenRotationConfigurationPtrOutput {
	return i.ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (i *personalAccessTokenRotationConfigurationPtrType) ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) PersonalAccessTokenRotationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalAccessTokenRotationConfigurationPtrOutput)
}

type PersonalAccessTokenRotationConfigurationOutput struct{ *pulumi.OutputState }

func (PersonalAccessTokenRotationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalAccessTokenRotationConfiguration)(nil)).Elem()
}

func (o PersonalAccessTokenRotationConfigurationOutput) ToPersonalAccessTokenRotationConfigurationOutput() PersonalAccessTokenRotationConfigurationOutput {
	return o
}

func (o PersonalAccessTokenRotationConfigurationOutput) ToPersonalAccessTokenRotationConfigurationOutputWithContext(ctx context.Context) PersonalAccessTokenRotationConfigurationOutput {
	return o
}

func (o PersonalAccessTokenRotationConfigurationOutput) ToPersonalAccessTokenRotationConfigurationPtrOutput() PersonalAccessTokenRotationConfigurationPtrOutput {
	return o.ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (o PersonalAccessTokenRotationConfigurationOutput) ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) PersonalAccessTokenRotationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersonalAccessTokenRotationConfiguration) *PersonalAccessTokenRotationConfiguration {
		return &v
	}).(PersonalAccessTokenRotationConfigurationPtrOutput)
}

// The duration (in days) the new token should be valid for.
func (o PersonalAccessTokenRotationConfigurationOutput) ExpirationDays() pulumi.IntOutput {
	return o.ApplyT(func(v PersonalAccessTokenRotationConfiguration) int { return v.ExpirationDays }).(pulumi.IntOutput)
}

// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
func (o PersonalAccessTokenRotationConfigurationOutput) RotateBeforeDays() pulumi.IntOutput {
	return o.ApplyT(func(v PersonalAccessTokenRotationConfiguration) int { return v.RotateBeforeDays }).(pulumi.IntOutput)
}

type PersonalAccessTokenRotationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PersonalAccessTokenRotationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalAccessTokenRotationConfiguration)(nil)).Elem()
}

func (o PersonalAccessTokenRotationConfigurationPtrOutput) ToPersonalAccessTokenRotationConfigurationPtrOutput() PersonalAccessTokenRotationConfigurationPtrOutput {
	return o
}

func (o PersonalAccessTokenRotationConfigurationPtrOutput) ToPersonalAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) PersonalAccessTokenRotationConfigurationPtrOutput {
	return o
}

func (o PersonalAccessTokenRotationConfigurationPtrOutput) Elem() PersonalAccessTokenRotationConfigurationOutput {
	return o.ApplyT(func(v *PersonalAccessTokenRotationConfiguration) PersonalAccessTokenRotationConfiguration {
		if v != nil {
			return *v
		}
		var ret PersonalAccessTokenRotationConfiguration
		return ret
	}).(PersonalAccessTokenRotationConfigurationOutput)
}

// The duration (in days) the new token should be valid for.
func (o PersonalAccessTokenRotationConfigurationPtrOutput) ExpirationDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PersonalAccessTokenRotationConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.ExpirationDays
	}).(pulumi.IntPtrOutput)
}

// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
func (o PersonalAccessTokenRotationConfigurationPtrOutput) RotateBeforeDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PersonalAccessTokenRotationConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.RotateBeforeDays
	}).(pulumi.IntPtrOutput)
}

type ProjectAccessTokenRotationConfiguration struct {
	// The duration (in days) the new token should be valid for.
	ExpirationDays int `pulumi:"expirationDays"`
	// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
	RotateBeforeDays int `pulumi:"rotateBeforeDays"`
}

// ProjectAccessTokenRotationConfigurationInput is an input type that accepts ProjectAccessTokenRotationConfigurationArgs and ProjectAccessTokenRotationConfigurationOutput values.
// You can construct a concrete instance of `ProjectAccessTokenRotationConfigurationInput` via:
//
//	ProjectAccessTokenRotationConfigurationArgs{...}
type ProjectAccessTokenRotationConfigurationInput interface {
	pulumi.Input

	ToProjectAccessTokenRotationConfigurationOutput() ProjectAccessTokenRotationConfigurationOutput
	ToProjectAccessTokenRotationConfigurationOutputWithContext(context.Context) ProjectAccessTokenRotationConfigurationOutput
}

type ProjectAccessTokenRotationConfigurationArgs struct {
	// The duration (in days) the new token should be valid for.
	ExpirationDays pulumi.IntInput `pulumi:"expirationDays"`
	// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
	RotateBeforeDays pulumi.IntInput `pulumi:"rotateBeforeDays"`
}

func (ProjectAccessTokenRotationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAccessTokenRotationConfiguration)(nil)).Elem()
}

func (i ProjectAccessTokenRotationConfigurationArgs) ToProjectAccessTokenRotationConfigurationOutput() ProjectAccessTokenRotationConfigurationOutput {
	return i.ToProjectAccessTokenRotationConfigurationOutputWithContext(context.Background())
}

func (i ProjectAccessTokenRotationConfigurationArgs) ToProjectAccessTokenRotationConfigurationOutputWithContext(ctx context.Context) ProjectAccessTokenRotationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAccessTokenRotationConfigurationOutput)
}

func (i ProjectAccessTokenRotationConfigurationArgs) ToProjectAccessTokenRotationConfigurationPtrOutput() ProjectAccessTokenRotationConfigurationPtrOutput {
	return i.ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (i ProjectAccessTokenRotationConfigurationArgs) ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) ProjectAccessTokenRotationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAccessTokenRotationConfigurationOutput).ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(ctx)
}

// ProjectAccessTokenRotationConfigurationPtrInput is an input type that accepts ProjectAccessTokenRotationConfigurationArgs, ProjectAccessTokenRotationConfigurationPtr and ProjectAccessTokenRotationConfigurationPtrOutput values.
// You can construct a concrete instance of `ProjectAccessTokenRotationConfigurationPtrInput` via:
//
//	        ProjectAccessTokenRotationConfigurationArgs{...}
//
//	or:
//
//	        nil
type ProjectAccessTokenRotationConfigurationPtrInput interface {
	pulumi.Input

	ToProjectAccessTokenRotationConfigurationPtrOutput() ProjectAccessTokenRotationConfigurationPtrOutput
	ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(context.Context) ProjectAccessTokenRotationConfigurationPtrOutput
}

type projectAccessTokenRotationConfigurationPtrType ProjectAccessTokenRotationConfigurationArgs

func ProjectAccessTokenRotationConfigurationPtr(v *ProjectAccessTokenRotationConfigurationArgs) ProjectAccessTokenRotationConfigurationPtrInput {
	return (*projectAccessTokenRotationConfigurationPtrType)(v)
}

func (*projectAccessTokenRotationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAccessTokenRotationConfiguration)(nil)).Elem()
}

func (i *projectAccessTokenRotationConfigurationPtrType) ToProjectAccessTokenRotationConfigurationPtrOutput() ProjectAccessTokenRotationConfigurationPtrOutput {
	return i.ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (i *projectAccessTokenRotationConfigurationPtrType) ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) ProjectAccessTokenRotationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAccessTokenRotationConfigurationPtrOutput)
}

type ProjectAccessTokenRotationConfigurationOutput struct{ *pulumi.OutputState }

func (ProjectAccessTokenRotationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAccessTokenRotationConfiguration)(nil)).Elem()
}

func (o ProjectAccessTokenRotationConfigurationOutput) ToProjectAccessTokenRotationConfigurationOutput() ProjectAccessTokenRotationConfigurationOutput {
	return o
}

func (o ProjectAccessTokenRotationConfigurationOutput) ToProjectAccessTokenRotationConfigurationOutputWithContext(ctx context.Context) ProjectAccessTokenRotationConfigurationOutput {
	return o
}

func (o ProjectAccessTokenRotationConfigurationOutput) ToProjectAccessTokenRotationConfigurationPtrOutput() ProjectAccessTokenRotationConfigurationPtrOutput {
	return o.ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(context.Background())
}

func (o ProjectAccessTokenRotationConfigurationOutput) ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) ProjectAccessTokenRotationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAccessTokenRotationConfiguration) *ProjectAccessTokenRotationConfiguration {
		return &v
	}).(ProjectAccessTokenRotationConfigurationPtrOutput)
}

// The duration (in days) the new token should be valid for.
func (o ProjectAccessTokenRotationConfigurationOutput) ExpirationDays() pulumi.IntOutput {
	return o.ApplyT(func(v ProjectAccessTokenRotationConfiguration) int { return v.ExpirationDays }).(pulumi.IntOutput)
}

// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
func (o ProjectAccessTokenRotationConfigurationOutput) RotateBeforeDays() pulumi.IntOutput {
	return o.ApplyT(func(v ProjectAccessTokenRotationConfiguration) int { return v.RotateBeforeDays }).(pulumi.IntOutput)
}

type ProjectAccessTokenRotationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ProjectAccessTokenRotationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAccessTokenRotationConfiguration)(nil)).Elem()
}

func (o ProjectAccessTokenRotationConfigurationPtrOutput) ToProjectAccessTokenRotationConfigurationPtrOutput() ProjectAccessTokenRotationConfigurationPtrOutput {
	return o
}

func (o ProjectAccessTokenRotationConfigurationPtrOutput) ToProjectAccessTokenRotationConfigurationPtrOutputWithContext(ctx context.Context) ProjectAccessTokenRotationConfigurationPtrOutput {
	return o
}

func (o ProjectAccessTokenRotationConfigurationPtrOutput) Elem() ProjectAccessTokenRotationConfigurationOutput {
	return o.ApplyT(func(v *ProjectAccessTokenRotationConfiguration) ProjectAccessTokenRotationConfiguration {
		if v != nil {
			return *v
		}
		var ret ProjectAccessTokenRotationConfiguration
		return ret
	}).(ProjectAccessTokenRotationConfigurationOutput)
}

// The duration (in days) the new token should be valid for.
func (o ProjectAccessTokenRotationConfigurationPtrOutput) ExpirationDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectAccessTokenRotationConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.ExpirationDays
	}).(pulumi.IntPtrOutput)
}

// The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when `pulumi up` is run in that timeframe.
func (o ProjectAccessTokenRotationConfigurationPtrOutput) RotateBeforeDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectAccessTokenRotationConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.RotateBeforeDays
	}).(pulumi.IntPtrOutput)
}

type ProjectContainerExpirationPolicy struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence *string `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The number of images to keep.
	KeepN *int `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
	NameRegex *string `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete *string `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep *string `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt *string `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan *string `pulumi:"olderThan"`
}

// ProjectContainerExpirationPolicyInput is an input type that accepts ProjectContainerExpirationPolicyArgs and ProjectContainerExpirationPolicyOutput values.
// You can construct a concrete instance of `ProjectContainerExpirationPolicyInput` via:
//
//	ProjectContainerExpirationPolicyArgs{...}
type ProjectContainerExpirationPolicyInput interface {
	pulumi.Input

	ToProjectContainerExpirationPolicyOutput() ProjectContainerExpirationPolicyOutput
	ToProjectContainerExpirationPolicyOutputWithContext(context.Context) ProjectContainerExpirationPolicyOutput
}

type ProjectContainerExpirationPolicyArgs struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence pulumi.StringPtrInput `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The number of images to keep.
	KeepN pulumi.IntPtrInput `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete pulumi.StringPtrInput `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep pulumi.StringPtrInput `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt pulumi.StringPtrInput `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan pulumi.StringPtrInput `pulumi:"olderThan"`
}

func (ProjectContainerExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyOutput() ProjectContainerExpirationPolicyOutput {
	return i.ToProjectContainerExpirationPolicyOutputWithContext(context.Background())
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectContainerExpirationPolicyOutput)
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return i.ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectContainerExpirationPolicyOutput).ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx)
}

// ProjectContainerExpirationPolicyPtrInput is an input type that accepts ProjectContainerExpirationPolicyArgs, ProjectContainerExpirationPolicyPtr and ProjectContainerExpirationPolicyPtrOutput values.
// You can construct a concrete instance of `ProjectContainerExpirationPolicyPtrInput` via:
//
//	        ProjectContainerExpirationPolicyArgs{...}
//
//	or:
//
//	        nil
type ProjectContainerExpirationPolicyPtrInput interface {
	pulumi.Input

	ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput
	ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Context) ProjectContainerExpirationPolicyPtrOutput
}

type projectContainerExpirationPolicyPtrType ProjectContainerExpirationPolicyArgs

func ProjectContainerExpirationPolicyPtr(v *ProjectContainerExpirationPolicyArgs) ProjectContainerExpirationPolicyPtrInput {
	return (*projectContainerExpirationPolicyPtrType)(v)
}

func (*projectContainerExpirationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i *projectContainerExpirationPolicyPtrType) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return i.ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i *projectContainerExpirationPolicyPtrType) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectContainerExpirationPolicyPtrOutput)
}

type ProjectContainerExpirationPolicyOutput struct{ *pulumi.OutputState }

func (ProjectContainerExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyOutput() ProjectContainerExpirationPolicyOutput {
	return o
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyOutput {
	return o
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return o.ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Background())
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectContainerExpirationPolicy) *ProjectContainerExpirationPolicy {
		return &v
	}).(ProjectContainerExpirationPolicyPtrOutput)
}

// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
func (o ProjectContainerExpirationPolicyOutput) Cadence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.Cadence }).(pulumi.StringPtrOutput)
}

// If true, the policy is enabled.
func (o ProjectContainerExpirationPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The number of images to keep.
func (o ProjectContainerExpirationPolicyOutput) KeepN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *int { return v.KeepN }).(pulumi.IntPtrOutput)
}

// The regular expression to match image names to delete.
//
// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
func (o ProjectContainerExpirationPolicyOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to delete.
func (o ProjectContainerExpirationPolicyOutput) NameRegexDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NameRegexDelete }).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to keep.
func (o ProjectContainerExpirationPolicyOutput) NameRegexKeep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NameRegexKeep }).(pulumi.StringPtrOutput)
}

// The next time the policy will run.
func (o ProjectContainerExpirationPolicyOutput) NextRunAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NextRunAt }).(pulumi.StringPtrOutput)
}

// The number of days to keep images.
func (o ProjectContainerExpirationPolicyOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.OlderThan }).(pulumi.StringPtrOutput)
}

type ProjectContainerExpirationPolicyPtrOutput struct{ *pulumi.OutputState }

func (ProjectContainerExpirationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o ProjectContainerExpirationPolicyPtrOutput) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return o
}

func (o ProjectContainerExpirationPolicyPtrOutput) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return o
}

func (o ProjectContainerExpirationPolicyPtrOutput) Elem() ProjectContainerExpirationPolicyOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) ProjectContainerExpirationPolicy {
		if v != nil {
			return *v
		}
		var ret ProjectContainerExpirationPolicy
		return ret
	}).(ProjectContainerExpirationPolicyOutput)
}

// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
func (o ProjectContainerExpirationPolicyPtrOutput) Cadence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Cadence
	}).(pulumi.StringPtrOutput)
}

// If true, the policy is enabled.
func (o ProjectContainerExpirationPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The number of images to keep.
func (o ProjectContainerExpirationPolicyPtrOutput) KeepN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *int {
		if v == nil {
			return nil
		}
		return v.KeepN
	}).(pulumi.IntPtrOutput)
}

// The regular expression to match image names to delete.
//
// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
func (o ProjectContainerExpirationPolicyPtrOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NameRegex
	}).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to delete.
func (o ProjectContainerExpirationPolicyPtrOutput) NameRegexDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NameRegexDelete
	}).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to keep.
func (o ProjectContainerExpirationPolicyPtrOutput) NameRegexKeep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NameRegexKeep
	}).(pulumi.StringPtrOutput)
}

// The next time the policy will run.
func (o ProjectContainerExpirationPolicyPtrOutput) NextRunAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NextRunAt
	}).(pulumi.StringPtrOutput)
}

// The number of days to keep images.
func (o ProjectContainerExpirationPolicyPtrOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.OlderThan
	}).(pulumi.StringPtrOutput)
}

type ProjectHookCustomHeader struct {
	// Key of the custom header.
	Key string `pulumi:"key"`
	// Value of the custom header. This value cannot be imported.
	Value string `pulumi:"value"`
}

// ProjectHookCustomHeaderInput is an input type that accepts ProjectHookCustomHeaderArgs and ProjectHookCustomHeaderOutput values.
// You can construct a concrete instance of `ProjectHookCustomHeaderInput` via:
//
//	ProjectHookCustomHeaderArgs{...}
type ProjectHookCustomHeaderInput interface {
	pulumi.Input

	ToProjectHookCustomHeaderOutput() ProjectHookCustomHeaderOutput
	ToProjectHookCustomHeaderOutputWithContext(context.Context) ProjectHookCustomHeaderOutput
}

type ProjectHookCustomHeaderArgs struct {
	// Key of the custom header.
	Key pulumi.StringInput `pulumi:"key"`
	// Value of the custom header. This value cannot be imported.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectHookCustomHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectHookCustomHeader)(nil)).Elem()
}

func (i ProjectHookCustomHeaderArgs) ToProjectHookCustomHeaderOutput() ProjectHookCustomHeaderOutput {
	return i.ToProjectHookCustomHeaderOutputWithContext(context.Background())
}

func (i ProjectHookCustomHeaderArgs) ToProjectHookCustomHeaderOutputWithContext(ctx context.Context) ProjectHookCustomHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectHookCustomHeaderOutput)
}

// ProjectHookCustomHeaderArrayInput is an input type that accepts ProjectHookCustomHeaderArray and ProjectHookCustomHeaderArrayOutput values.
// You can construct a concrete instance of `ProjectHookCustomHeaderArrayInput` via:
//
//	ProjectHookCustomHeaderArray{ ProjectHookCustomHeaderArgs{...} }
type ProjectHookCustomHeaderArrayInput interface {
	pulumi.Input

	ToProjectHookCustomHeaderArrayOutput() ProjectHookCustomHeaderArrayOutput
	ToProjectHookCustomHeaderArrayOutputWithContext(context.Context) ProjectHookCustomHeaderArrayOutput
}

type ProjectHookCustomHeaderArray []ProjectHookCustomHeaderInput

func (ProjectHookCustomHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectHookCustomHeader)(nil)).Elem()
}

func (i ProjectHookCustomHeaderArray) ToProjectHookCustomHeaderArrayOutput() ProjectHookCustomHeaderArrayOutput {
	return i.ToProjectHookCustomHeaderArrayOutputWithContext(context.Background())
}

func (i ProjectHookCustomHeaderArray) ToProjectHookCustomHeaderArrayOutputWithContext(ctx context.Context) ProjectHookCustomHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectHookCustomHeaderArrayOutput)
}

type ProjectHookCustomHeaderOutput struct{ *pulumi.OutputState }

func (ProjectHookCustomHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectHookCustomHeader)(nil)).Elem()
}

func (o ProjectHookCustomHeaderOutput) ToProjectHookCustomHeaderOutput() ProjectHookCustomHeaderOutput {
	return o
}

func (o ProjectHookCustomHeaderOutput) ToProjectHookCustomHeaderOutputWithContext(ctx context.Context) ProjectHookCustomHeaderOutput {
	return o
}

// Key of the custom header.
func (o ProjectHookCustomHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectHookCustomHeader) string { return v.Key }).(pulumi.StringOutput)
}

// Value of the custom header. This value cannot be imported.
func (o ProjectHookCustomHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectHookCustomHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectHookCustomHeaderArrayOutput struct{ *pulumi.OutputState }

func (ProjectHookCustomHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectHookCustomHeader)(nil)).Elem()
}

func (o ProjectHookCustomHeaderArrayOutput) ToProjectHookCustomHeaderArrayOutput() ProjectHookCustomHeaderArrayOutput {
	return o
}

func (o ProjectHookCustomHeaderArrayOutput) ToProjectHookCustomHeaderArrayOutputWithContext(ctx context.Context) ProjectHookCustomHeaderArrayOutput {
	return o
}

func (o ProjectHookCustomHeaderArrayOutput) Index(i pulumi.IntInput) ProjectHookCustomHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectHookCustomHeader {
		return vs[0].([]ProjectHookCustomHeader)[vs[1].(int)]
	}).(ProjectHookCustomHeaderOutput)
}

type ProjectIssueBoardList struct {
	// The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
	AssigneeId *int `pulumi:"assigneeId"`
	// The ID of the list
	Id *int `pulumi:"id"`
	// The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
	IterationId *int `pulumi:"iterationId"`
	// The ID of the label the list should be scoped to. Requires a GitLab EE license.
	LabelId *int `pulumi:"labelId"`
	// The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
	MilestoneId *int `pulumi:"milestoneId"`
	// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
	Position *int `pulumi:"position"`
}

// ProjectIssueBoardListInput is an input type that accepts ProjectIssueBoardListArgs and ProjectIssueBoardListOutput values.
// You can construct a concrete instance of `ProjectIssueBoardListInput` via:
//
//	ProjectIssueBoardListArgs{...}
type ProjectIssueBoardListInput interface {
	pulumi.Input

	ToProjectIssueBoardListOutput() ProjectIssueBoardListOutput
	ToProjectIssueBoardListOutputWithContext(context.Context) ProjectIssueBoardListOutput
}

type ProjectIssueBoardListArgs struct {
	// The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
	AssigneeId pulumi.IntPtrInput `pulumi:"assigneeId"`
	// The ID of the list
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
	IterationId pulumi.IntPtrInput `pulumi:"iterationId"`
	// The ID of the label the list should be scoped to. Requires a GitLab EE license.
	LabelId pulumi.IntPtrInput `pulumi:"labelId"`
	// The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
	MilestoneId pulumi.IntPtrInput `pulumi:"milestoneId"`
	// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
	Position pulumi.IntPtrInput `pulumi:"position"`
}

func (ProjectIssueBoardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueBoardList)(nil)).Elem()
}

func (i ProjectIssueBoardListArgs) ToProjectIssueBoardListOutput() ProjectIssueBoardListOutput {
	return i.ToProjectIssueBoardListOutputWithContext(context.Background())
}

func (i ProjectIssueBoardListArgs) ToProjectIssueBoardListOutputWithContext(ctx context.Context) ProjectIssueBoardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueBoardListOutput)
}

// ProjectIssueBoardListArrayInput is an input type that accepts ProjectIssueBoardListArray and ProjectIssueBoardListArrayOutput values.
// You can construct a concrete instance of `ProjectIssueBoardListArrayInput` via:
//
//	ProjectIssueBoardListArray{ ProjectIssueBoardListArgs{...} }
type ProjectIssueBoardListArrayInput interface {
	pulumi.Input

	ToProjectIssueBoardListArrayOutput() ProjectIssueBoardListArrayOutput
	ToProjectIssueBoardListArrayOutputWithContext(context.Context) ProjectIssueBoardListArrayOutput
}

type ProjectIssueBoardListArray []ProjectIssueBoardListInput

func (ProjectIssueBoardListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueBoardList)(nil)).Elem()
}

func (i ProjectIssueBoardListArray) ToProjectIssueBoardListArrayOutput() ProjectIssueBoardListArrayOutput {
	return i.ToProjectIssueBoardListArrayOutputWithContext(context.Background())
}

func (i ProjectIssueBoardListArray) ToProjectIssueBoardListArrayOutputWithContext(ctx context.Context) ProjectIssueBoardListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueBoardListArrayOutput)
}

type ProjectIssueBoardListOutput struct{ *pulumi.OutputState }

func (ProjectIssueBoardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueBoardList)(nil)).Elem()
}

func (o ProjectIssueBoardListOutput) ToProjectIssueBoardListOutput() ProjectIssueBoardListOutput {
	return o
}

func (o ProjectIssueBoardListOutput) ToProjectIssueBoardListOutputWithContext(ctx context.Context) ProjectIssueBoardListOutput {
	return o
}

// The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) AssigneeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.AssigneeId }).(pulumi.IntPtrOutput)
}

// The ID of the list
func (o ProjectIssueBoardListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) IterationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.IterationId }).(pulumi.IntPtrOutput)
}

// The ID of the label the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) LabelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.LabelId }).(pulumi.IntPtrOutput)
}

// The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) MilestoneId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.MilestoneId }).(pulumi.IntPtrOutput)
}

// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
func (o ProjectIssueBoardListOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.Position }).(pulumi.IntPtrOutput)
}

type ProjectIssueBoardListArrayOutput struct{ *pulumi.OutputState }

func (ProjectIssueBoardListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueBoardList)(nil)).Elem()
}

func (o ProjectIssueBoardListArrayOutput) ToProjectIssueBoardListArrayOutput() ProjectIssueBoardListArrayOutput {
	return o
}

func (o ProjectIssueBoardListArrayOutput) ToProjectIssueBoardListArrayOutputWithContext(ctx context.Context) ProjectIssueBoardListArrayOutput {
	return o
}

func (o ProjectIssueBoardListArrayOutput) Index(i pulumi.IntInput) ProjectIssueBoardListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectIssueBoardList {
		return vs[0].([]ProjectIssueBoardList)[vs[1].(int)]
	}).(ProjectIssueBoardListOutput)
}

type ProjectIssueTaskCompletionStatus struct {
	// The number of tasks that are completed.
	CompletedCount *int `pulumi:"completedCount"`
	// The number of tasks.
	Count *int `pulumi:"count"`
}

// ProjectIssueTaskCompletionStatusInput is an input type that accepts ProjectIssueTaskCompletionStatusArgs and ProjectIssueTaskCompletionStatusOutput values.
// You can construct a concrete instance of `ProjectIssueTaskCompletionStatusInput` via:
//
//	ProjectIssueTaskCompletionStatusArgs{...}
type ProjectIssueTaskCompletionStatusInput interface {
	pulumi.Input

	ToProjectIssueTaskCompletionStatusOutput() ProjectIssueTaskCompletionStatusOutput
	ToProjectIssueTaskCompletionStatusOutputWithContext(context.Context) ProjectIssueTaskCompletionStatusOutput
}

type ProjectIssueTaskCompletionStatusArgs struct {
	// The number of tasks that are completed.
	CompletedCount pulumi.IntPtrInput `pulumi:"completedCount"`
	// The number of tasks.
	Count pulumi.IntPtrInput `pulumi:"count"`
}

func (ProjectIssueTaskCompletionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i ProjectIssueTaskCompletionStatusArgs) ToProjectIssueTaskCompletionStatusOutput() ProjectIssueTaskCompletionStatusOutput {
	return i.ToProjectIssueTaskCompletionStatusOutputWithContext(context.Background())
}

func (i ProjectIssueTaskCompletionStatusArgs) ToProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueTaskCompletionStatusOutput)
}

// ProjectIssueTaskCompletionStatusArrayInput is an input type that accepts ProjectIssueTaskCompletionStatusArray and ProjectIssueTaskCompletionStatusArrayOutput values.
// You can construct a concrete instance of `ProjectIssueTaskCompletionStatusArrayInput` via:
//
//	ProjectIssueTaskCompletionStatusArray{ ProjectIssueTaskCompletionStatusArgs{...} }
type ProjectIssueTaskCompletionStatusArrayInput interface {
	pulumi.Input

	ToProjectIssueTaskCompletionStatusArrayOutput() ProjectIssueTaskCompletionStatusArrayOutput
	ToProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Context) ProjectIssueTaskCompletionStatusArrayOutput
}

type ProjectIssueTaskCompletionStatusArray []ProjectIssueTaskCompletionStatusInput

func (ProjectIssueTaskCompletionStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i ProjectIssueTaskCompletionStatusArray) ToProjectIssueTaskCompletionStatusArrayOutput() ProjectIssueTaskCompletionStatusArrayOutput {
	return i.ToProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Background())
}

func (i ProjectIssueTaskCompletionStatusArray) ToProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueTaskCompletionStatusArrayOutput)
}

type ProjectIssueTaskCompletionStatusOutput struct{ *pulumi.OutputState }

func (ProjectIssueTaskCompletionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o ProjectIssueTaskCompletionStatusOutput) ToProjectIssueTaskCompletionStatusOutput() ProjectIssueTaskCompletionStatusOutput {
	return o
}

func (o ProjectIssueTaskCompletionStatusOutput) ToProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusOutput {
	return o
}

// The number of tasks that are completed.
func (o ProjectIssueTaskCompletionStatusOutput) CompletedCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueTaskCompletionStatus) *int { return v.CompletedCount }).(pulumi.IntPtrOutput)
}

// The number of tasks.
func (o ProjectIssueTaskCompletionStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueTaskCompletionStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type ProjectIssueTaskCompletionStatusArrayOutput struct{ *pulumi.OutputState }

func (ProjectIssueTaskCompletionStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o ProjectIssueTaskCompletionStatusArrayOutput) ToProjectIssueTaskCompletionStatusArrayOutput() ProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o ProjectIssueTaskCompletionStatusArrayOutput) ToProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o ProjectIssueTaskCompletionStatusArrayOutput) Index(i pulumi.IntInput) ProjectIssueTaskCompletionStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectIssueTaskCompletionStatus {
		return vs[0].([]ProjectIssueTaskCompletionStatus)[vs[1].(int)]
	}).(ProjectIssueTaskCompletionStatusOutput)
}

type ProjectProtectedEnvironmentApprovalRule struct {
	// Levels of access allowed to approve a deployment to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to approve a deployment to this protected environment. The project must be shared with the group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId *int `pulumi:"groupId"`
	// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType *int `pulumi:"groupInheritanceType"`
	// The unique ID of the Approval Rules object.
	Id *int `pulumi:"id"`
	// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
	RequiredApprovals *int `pulumi:"requiredApprovals"`
	// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the project. Mutually exclusive with `accessLevel` and `groupId`.
	UserId *int `pulumi:"userId"`
}

// ProjectProtectedEnvironmentApprovalRuleInput is an input type that accepts ProjectProtectedEnvironmentApprovalRuleArgs and ProjectProtectedEnvironmentApprovalRuleOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentApprovalRuleInput` via:
//
//	ProjectProtectedEnvironmentApprovalRuleArgs{...}
type ProjectProtectedEnvironmentApprovalRuleInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentApprovalRuleOutput() ProjectProtectedEnvironmentApprovalRuleOutput
	ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(context.Context) ProjectProtectedEnvironmentApprovalRuleOutput
}

type ProjectProtectedEnvironmentApprovalRuleArgs struct {
	// Levels of access allowed to approve a deployment to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to approve a deployment to this protected environment. The project must be shared with the group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType pulumi.IntPtrInput `pulumi:"groupInheritanceType"`
	// The unique ID of the Approval Rules object.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
	RequiredApprovals pulumi.IntPtrInput `pulumi:"requiredApprovals"`
	// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the project. Mutually exclusive with `accessLevel` and `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (ProjectProtectedEnvironmentApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentApprovalRuleArgs) ToProjectProtectedEnvironmentApprovalRuleOutput() ProjectProtectedEnvironmentApprovalRuleOutput {
	return i.ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentApprovalRuleArgs) ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentApprovalRuleOutput)
}

// ProjectProtectedEnvironmentApprovalRuleArrayInput is an input type that accepts ProjectProtectedEnvironmentApprovalRuleArray and ProjectProtectedEnvironmentApprovalRuleArrayOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentApprovalRuleArrayInput` via:
//
//	ProjectProtectedEnvironmentApprovalRuleArray{ ProjectProtectedEnvironmentApprovalRuleArgs{...} }
type ProjectProtectedEnvironmentApprovalRuleArrayInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentApprovalRuleArrayOutput() ProjectProtectedEnvironmentApprovalRuleArrayOutput
	ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(context.Context) ProjectProtectedEnvironmentApprovalRuleArrayOutput
}

type ProjectProtectedEnvironmentApprovalRuleArray []ProjectProtectedEnvironmentApprovalRuleInput

func (ProjectProtectedEnvironmentApprovalRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentApprovalRuleArray) ToProjectProtectedEnvironmentApprovalRuleArrayOutput() ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return i.ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentApprovalRuleArray) ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentApprovalRuleArrayOutput)
}

type ProjectProtectedEnvironmentApprovalRuleOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentApprovalRuleOutput) ToProjectProtectedEnvironmentApprovalRuleOutput() ProjectProtectedEnvironmentApprovalRuleOutput {
	return o
}

func (o ProjectProtectedEnvironmentApprovalRuleOutput) ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleOutput {
	return o
}

// Levels of access allowed to approve a deployment to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of the group allowed to approve a deployment to this protected environment. The project must be shared with the group. Mutually exclusive with `accessLevel` and `userId`.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
func (o ProjectProtectedEnvironmentApprovalRuleOutput) GroupInheritanceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.GroupInheritanceType }).(pulumi.IntPtrOutput)
}

// The unique ID of the Approval Rules object.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) RequiredApprovals() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.RequiredApprovals }).(pulumi.IntPtrOutput)
}

// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the project. Mutually exclusive with `accessLevel` and `groupId`.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type ProjectProtectedEnvironmentApprovalRuleArrayOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentApprovalRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentApprovalRuleArrayOutput) ToProjectProtectedEnvironmentApprovalRuleArrayOutput() ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentApprovalRuleArrayOutput) ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentApprovalRuleArrayOutput) Index(i pulumi.IntInput) ProjectProtectedEnvironmentApprovalRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectProtectedEnvironmentApprovalRule {
		return vs[0].([]ProjectProtectedEnvironmentApprovalRule)[vs[1].(int)]
	}).(ProjectProtectedEnvironmentApprovalRuleOutput)
}

type ProjectProtectedEnvironmentDeployAccessLevel struct {
	// Levels of access required to deploy to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to deploy to this protected environment. The project must be shared with the group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId *int `pulumi:"groupId"`
	// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType *int `pulumi:"groupInheritanceType"`
	// The unique ID of the Deploy Access Level object.
	Id *int `pulumi:"id"`
	// The ID of the user allowed to deploy to this protected environment. The user must be a member of the project. Mutually exclusive with `accessLevel` and `groupId`.
	UserId *int `pulumi:"userId"`
}

// ProjectProtectedEnvironmentDeployAccessLevelInput is an input type that accepts ProjectProtectedEnvironmentDeployAccessLevelArgs and ProjectProtectedEnvironmentDeployAccessLevelOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentDeployAccessLevelInput` via:
//
//	ProjectProtectedEnvironmentDeployAccessLevelArgs{...}
type ProjectProtectedEnvironmentDeployAccessLevelInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentDeployAccessLevelOutput() ProjectProtectedEnvironmentDeployAccessLevelOutput
	ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(context.Context) ProjectProtectedEnvironmentDeployAccessLevelOutput
}

type ProjectProtectedEnvironmentDeployAccessLevelArgs struct {
	// Levels of access required to deploy to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to deploy to this protected environment. The project must be shared with the group. Mutually exclusive with `accessLevel` and `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
	GroupInheritanceType pulumi.IntPtrInput `pulumi:"groupInheritanceType"`
	// The unique ID of the Deploy Access Level object.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the user allowed to deploy to this protected environment. The user must be a member of the project. Mutually exclusive with `accessLevel` and `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (ProjectProtectedEnvironmentDeployAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArgs) ToProjectProtectedEnvironmentDeployAccessLevelOutput() ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return i.ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArgs) ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentDeployAccessLevelOutput)
}

// ProjectProtectedEnvironmentDeployAccessLevelArrayInput is an input type that accepts ProjectProtectedEnvironmentDeployAccessLevelArray and ProjectProtectedEnvironmentDeployAccessLevelArrayOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentDeployAccessLevelArrayInput` via:
//
//	ProjectProtectedEnvironmentDeployAccessLevelArray{ ProjectProtectedEnvironmentDeployAccessLevelArgs{...} }
type ProjectProtectedEnvironmentDeployAccessLevelArrayInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentDeployAccessLevelArrayOutput() ProjectProtectedEnvironmentDeployAccessLevelArrayOutput
	ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(context.Context) ProjectProtectedEnvironmentDeployAccessLevelArrayOutput
}

type ProjectProtectedEnvironmentDeployAccessLevelArray []ProjectProtectedEnvironmentDeployAccessLevelInput

func (ProjectProtectedEnvironmentDeployAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArray) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutput() ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return i.ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArray) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentDeployAccessLevelArrayOutput)
}

type ProjectProtectedEnvironmentDeployAccessLevelOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentDeployAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) ToProjectProtectedEnvironmentDeployAccessLevelOutput() ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return o
}

func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return o
}

// Levels of access required to deploy to this protected environment. Mutually exclusive with `userId` and `groupId`. Valid values are `developer`, `maintainer`.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of the group allowed to deploy to this protected environment. The project must be shared with the group. Mutually exclusive with `accessLevel` and `userId`.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are `0`, `1`. `0` => Direct group membership only, `1` => All inherited groups. Default: `0`
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) GroupInheritanceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *int { return v.GroupInheritanceType }).(pulumi.IntPtrOutput)
}

// The unique ID of the Deploy Access Level object.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the user allowed to deploy to this protected environment. The user must be a member of the project. Mutually exclusive with `accessLevel` and `groupId`.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type ProjectProtectedEnvironmentDeployAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutput() ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) Index(i pulumi.IntInput) ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectProtectedEnvironmentDeployAccessLevel {
		return vs[0].([]ProjectProtectedEnvironmentDeployAccessLevel)[vs[1].(int)]
	}).(ProjectProtectedEnvironmentDeployAccessLevelOutput)
}

type ProjectPushRulesType struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck *bool `pulumi:"commitCommitterCheck"`
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck *bool `pulumi:"commitCommitterNameCheck"`
	// No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag *bool `pulumi:"denyDeleteTag"`
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex *string `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize *int `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck *bool `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `pulumi:"preventSecrets"`
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits *bool `pulumi:"rejectNonDcoCommits"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits *bool `pulumi:"rejectUnsignedCommits"`
}

// ProjectPushRulesTypeInput is an input type that accepts ProjectPushRulesTypeArgs and ProjectPushRulesTypeOutput values.
// You can construct a concrete instance of `ProjectPushRulesTypeInput` via:
//
//	ProjectPushRulesTypeArgs{...}
type ProjectPushRulesTypeInput interface {
	pulumi.Input

	ToProjectPushRulesTypeOutput() ProjectPushRulesTypeOutput
	ToProjectPushRulesTypeOutputWithContext(context.Context) ProjectPushRulesTypeOutput
}

type ProjectPushRulesTypeArgs struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex pulumi.StringPtrInput `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex pulumi.StringPtrInput `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck pulumi.BoolPtrInput `pulumi:"commitCommitterCheck"`
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck pulumi.BoolPtrInput `pulumi:"commitCommitterNameCheck"`
	// No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
	CommitMessageNegativeRegex pulumi.StringPtrInput `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex pulumi.StringPtrInput `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag pulumi.BoolPtrInput `pulumi:"denyDeleteTag"`
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex pulumi.StringPtrInput `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize pulumi.IntPtrInput `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck pulumi.BoolPtrInput `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets pulumi.BoolPtrInput `pulumi:"preventSecrets"`
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits pulumi.BoolPtrInput `pulumi:"rejectNonDcoCommits"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits pulumi.BoolPtrInput `pulumi:"rejectUnsignedCommits"`
}

func (ProjectPushRulesTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPushRulesType)(nil)).Elem()
}

func (i ProjectPushRulesTypeArgs) ToProjectPushRulesTypeOutput() ProjectPushRulesTypeOutput {
	return i.ToProjectPushRulesTypeOutputWithContext(context.Background())
}

func (i ProjectPushRulesTypeArgs) ToProjectPushRulesTypeOutputWithContext(ctx context.Context) ProjectPushRulesTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesTypeOutput)
}

func (i ProjectPushRulesTypeArgs) ToProjectPushRulesTypePtrOutput() ProjectPushRulesTypePtrOutput {
	return i.ToProjectPushRulesTypePtrOutputWithContext(context.Background())
}

func (i ProjectPushRulesTypeArgs) ToProjectPushRulesTypePtrOutputWithContext(ctx context.Context) ProjectPushRulesTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesTypeOutput).ToProjectPushRulesTypePtrOutputWithContext(ctx)
}

// ProjectPushRulesTypePtrInput is an input type that accepts ProjectPushRulesTypeArgs, ProjectPushRulesTypePtr and ProjectPushRulesTypePtrOutput values.
// You can construct a concrete instance of `ProjectPushRulesTypePtrInput` via:
//
//	        ProjectPushRulesTypeArgs{...}
//
//	or:
//
//	        nil
type ProjectPushRulesTypePtrInput interface {
	pulumi.Input

	ToProjectPushRulesTypePtrOutput() ProjectPushRulesTypePtrOutput
	ToProjectPushRulesTypePtrOutputWithContext(context.Context) ProjectPushRulesTypePtrOutput
}

type projectPushRulesTypePtrType ProjectPushRulesTypeArgs

func ProjectPushRulesTypePtr(v *ProjectPushRulesTypeArgs) ProjectPushRulesTypePtrInput {
	return (*projectPushRulesTypePtrType)(v)
}

func (*projectPushRulesTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPushRulesType)(nil)).Elem()
}

func (i *projectPushRulesTypePtrType) ToProjectPushRulesTypePtrOutput() ProjectPushRulesTypePtrOutput {
	return i.ToProjectPushRulesTypePtrOutputWithContext(context.Background())
}

func (i *projectPushRulesTypePtrType) ToProjectPushRulesTypePtrOutputWithContext(ctx context.Context) ProjectPushRulesTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesTypePtrOutput)
}

type ProjectPushRulesTypeOutput struct{ *pulumi.OutputState }

func (ProjectPushRulesTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPushRulesType)(nil)).Elem()
}

func (o ProjectPushRulesTypeOutput) ToProjectPushRulesTypeOutput() ProjectPushRulesTypeOutput {
	return o
}

func (o ProjectPushRulesTypeOutput) ToProjectPushRulesTypeOutputWithContext(ctx context.Context) ProjectPushRulesTypeOutput {
	return o
}

func (o ProjectPushRulesTypeOutput) ToProjectPushRulesTypePtrOutput() ProjectPushRulesTypePtrOutput {
	return o.ToProjectPushRulesTypePtrOutputWithContext(context.Background())
}

func (o ProjectPushRulesTypeOutput) ToProjectPushRulesTypePtrOutputWithContext(ctx context.Context) ProjectPushRulesTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectPushRulesType) *ProjectPushRulesType {
		return &v
	}).(ProjectPushRulesTypePtrOutput)
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o ProjectPushRulesTypeOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *string { return v.AuthorEmailRegex }).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o ProjectPushRulesTypeOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *string { return v.BranchNameRegex }).(pulumi.StringPtrOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o ProjectPushRulesTypeOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *bool { return v.CommitCommitterCheck }).(pulumi.BoolPtrOutput)
}

// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
func (o ProjectPushRulesTypeOutput) CommitCommitterNameCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *bool { return v.CommitCommitterNameCheck }).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
func (o ProjectPushRulesTypeOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *string { return v.CommitMessageNegativeRegex }).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o ProjectPushRulesTypeOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *string { return v.CommitMessageRegex }).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o ProjectPushRulesTypeOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *bool { return v.DenyDeleteTag }).(pulumi.BoolPtrOutput)
}

// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
func (o ProjectPushRulesTypeOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *string { return v.FileNameRegex }).(pulumi.StringPtrOutput)
}

// Maximum file size (MB).
func (o ProjectPushRulesTypeOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *int { return v.MaxFileSize }).(pulumi.IntPtrOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o ProjectPushRulesTypeOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *bool { return v.MemberCheck }).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o ProjectPushRulesTypeOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *bool { return v.PreventSecrets }).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not DCO certified.
func (o ProjectPushRulesTypeOutput) RejectNonDcoCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *bool { return v.RejectNonDcoCommits }).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not signed through GPG.
func (o ProjectPushRulesTypeOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRulesType) *bool { return v.RejectUnsignedCommits }).(pulumi.BoolPtrOutput)
}

type ProjectPushRulesTypePtrOutput struct{ *pulumi.OutputState }

func (ProjectPushRulesTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPushRulesType)(nil)).Elem()
}

func (o ProjectPushRulesTypePtrOutput) ToProjectPushRulesTypePtrOutput() ProjectPushRulesTypePtrOutput {
	return o
}

func (o ProjectPushRulesTypePtrOutput) ToProjectPushRulesTypePtrOutputWithContext(ctx context.Context) ProjectPushRulesTypePtrOutput {
	return o
}

func (o ProjectPushRulesTypePtrOutput) Elem() ProjectPushRulesTypeOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) ProjectPushRulesType {
		if v != nil {
			return *v
		}
		var ret ProjectPushRulesType
		return ret
	}).(ProjectPushRulesTypeOutput)
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o ProjectPushRulesTypePtrOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *string {
		if v == nil {
			return nil
		}
		return v.AuthorEmailRegex
	}).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o ProjectPushRulesTypePtrOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *string {
		if v == nil {
			return nil
		}
		return v.BranchNameRegex
	}).(pulumi.StringPtrOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o ProjectPushRulesTypePtrOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *bool {
		if v == nil {
			return nil
		}
		return v.CommitCommitterCheck
	}).(pulumi.BoolPtrOutput)
}

// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
func (o ProjectPushRulesTypePtrOutput) CommitCommitterNameCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *bool {
		if v == nil {
			return nil
		}
		return v.CommitCommitterNameCheck
	}).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
func (o ProjectPushRulesTypePtrOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageNegativeRegex
	}).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o ProjectPushRulesTypePtrOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageRegex
	}).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o ProjectPushRulesTypePtrOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *bool {
		if v == nil {
			return nil
		}
		return v.DenyDeleteTag
	}).(pulumi.BoolPtrOutput)
}

// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
func (o ProjectPushRulesTypePtrOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *string {
		if v == nil {
			return nil
		}
		return v.FileNameRegex
	}).(pulumi.StringPtrOutput)
}

// Maximum file size (MB).
func (o ProjectPushRulesTypePtrOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *int {
		if v == nil {
			return nil
		}
		return v.MaxFileSize
	}).(pulumi.IntPtrOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o ProjectPushRulesTypePtrOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *bool {
		if v == nil {
			return nil
		}
		return v.MemberCheck
	}).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o ProjectPushRulesTypePtrOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *bool {
		if v == nil {
			return nil
		}
		return v.PreventSecrets
	}).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not DCO certified.
func (o ProjectPushRulesTypePtrOutput) RejectNonDcoCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *bool {
		if v == nil {
			return nil
		}
		return v.RejectNonDcoCommits
	}).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not signed through GPG.
func (o ProjectPushRulesTypePtrOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRulesType) *bool {
		if v == nil {
			return nil
		}
		return v.RejectUnsignedCommits
	}).(pulumi.BoolPtrOutput)
}

type ProjectTagCommit struct {
	// The email of the author.
	AuthorEmail *string `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName *string `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate *string `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate *string `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail *string `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName *string `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id *string `pulumi:"id"`
	// The commit message
	Message *string `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds []string `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId *string `pulumi:"shortId"`
	// The title of the commit
	Title *string `pulumi:"title"`
}

// ProjectTagCommitInput is an input type that accepts ProjectTagCommitArgs and ProjectTagCommitOutput values.
// You can construct a concrete instance of `ProjectTagCommitInput` via:
//
//	ProjectTagCommitArgs{...}
type ProjectTagCommitInput interface {
	pulumi.Input

	ToProjectTagCommitOutput() ProjectTagCommitOutput
	ToProjectTagCommitOutputWithContext(context.Context) ProjectTagCommitOutput
}

type ProjectTagCommitArgs struct {
	// The email of the author.
	AuthorEmail pulumi.StringPtrInput `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName pulumi.StringPtrInput `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate pulumi.StringPtrInput `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate pulumi.StringPtrInput `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail pulumi.StringPtrInput `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName pulumi.StringPtrInput `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The commit message
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds pulumi.StringArrayInput `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId pulumi.StringPtrInput `pulumi:"shortId"`
	// The title of the commit
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ProjectTagCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagCommit)(nil)).Elem()
}

func (i ProjectTagCommitArgs) ToProjectTagCommitOutput() ProjectTagCommitOutput {
	return i.ToProjectTagCommitOutputWithContext(context.Background())
}

func (i ProjectTagCommitArgs) ToProjectTagCommitOutputWithContext(ctx context.Context) ProjectTagCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagCommitOutput)
}

// ProjectTagCommitArrayInput is an input type that accepts ProjectTagCommitArray and ProjectTagCommitArrayOutput values.
// You can construct a concrete instance of `ProjectTagCommitArrayInput` via:
//
//	ProjectTagCommitArray{ ProjectTagCommitArgs{...} }
type ProjectTagCommitArrayInput interface {
	pulumi.Input

	ToProjectTagCommitArrayOutput() ProjectTagCommitArrayOutput
	ToProjectTagCommitArrayOutputWithContext(context.Context) ProjectTagCommitArrayOutput
}

type ProjectTagCommitArray []ProjectTagCommitInput

func (ProjectTagCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagCommit)(nil)).Elem()
}

func (i ProjectTagCommitArray) ToProjectTagCommitArrayOutput() ProjectTagCommitArrayOutput {
	return i.ToProjectTagCommitArrayOutputWithContext(context.Background())
}

func (i ProjectTagCommitArray) ToProjectTagCommitArrayOutputWithContext(ctx context.Context) ProjectTagCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagCommitArrayOutput)
}

type ProjectTagCommitOutput struct{ *pulumi.OutputState }

func (ProjectTagCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagCommit)(nil)).Elem()
}

func (o ProjectTagCommitOutput) ToProjectTagCommitOutput() ProjectTagCommitOutput {
	return o
}

func (o ProjectTagCommitOutput) ToProjectTagCommitOutputWithContext(ctx context.Context) ProjectTagCommitOutput {
	return o
}

// The email of the author.
func (o ProjectTagCommitOutput) AuthorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.AuthorEmail }).(pulumi.StringPtrOutput)
}

// The name of the author.
func (o ProjectTagCommitOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.AuthorName }).(pulumi.StringPtrOutput)
}

// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
func (o ProjectTagCommitOutput) AuthoredDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.AuthoredDate }).(pulumi.StringPtrOutput)
}

// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
func (o ProjectTagCommitOutput) CommittedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.CommittedDate }).(pulumi.StringPtrOutput)
}

// The email of the user that committed.
func (o ProjectTagCommitOutput) CommitterEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.CommitterEmail }).(pulumi.StringPtrOutput)
}

// The name of the user that committed.
func (o ProjectTagCommitOutput) CommitterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.CommitterName }).(pulumi.StringPtrOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o ProjectTagCommitOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The commit message
func (o ProjectTagCommitOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The id of the parents of the commit
func (o ProjectTagCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectTagCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

// The short id assigned to the commit by Gitlab.
func (o ProjectTagCommitOutput) ShortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.ShortId }).(pulumi.StringPtrOutput)
}

// The title of the commit
func (o ProjectTagCommitOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ProjectTagCommitArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagCommit)(nil)).Elem()
}

func (o ProjectTagCommitArrayOutput) ToProjectTagCommitArrayOutput() ProjectTagCommitArrayOutput {
	return o
}

func (o ProjectTagCommitArrayOutput) ToProjectTagCommitArrayOutputWithContext(ctx context.Context) ProjectTagCommitArrayOutput {
	return o
}

func (o ProjectTagCommitArrayOutput) Index(i pulumi.IntInput) ProjectTagCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTagCommit {
		return vs[0].([]ProjectTagCommit)[vs[1].(int)]
	}).(ProjectTagCommitOutput)
}

type ProjectTagRelease struct {
	// The description of release.
	Description *string `pulumi:"description"`
	// The name of the tag.
	TagName *string `pulumi:"tagName"`
}

// ProjectTagReleaseInput is an input type that accepts ProjectTagReleaseArgs and ProjectTagReleaseOutput values.
// You can construct a concrete instance of `ProjectTagReleaseInput` via:
//
//	ProjectTagReleaseArgs{...}
type ProjectTagReleaseInput interface {
	pulumi.Input

	ToProjectTagReleaseOutput() ProjectTagReleaseOutput
	ToProjectTagReleaseOutputWithContext(context.Context) ProjectTagReleaseOutput
}

type ProjectTagReleaseArgs struct {
	// The description of release.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the tag.
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (ProjectTagReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagRelease)(nil)).Elem()
}

func (i ProjectTagReleaseArgs) ToProjectTagReleaseOutput() ProjectTagReleaseOutput {
	return i.ToProjectTagReleaseOutputWithContext(context.Background())
}

func (i ProjectTagReleaseArgs) ToProjectTagReleaseOutputWithContext(ctx context.Context) ProjectTagReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagReleaseOutput)
}

// ProjectTagReleaseArrayInput is an input type that accepts ProjectTagReleaseArray and ProjectTagReleaseArrayOutput values.
// You can construct a concrete instance of `ProjectTagReleaseArrayInput` via:
//
//	ProjectTagReleaseArray{ ProjectTagReleaseArgs{...} }
type ProjectTagReleaseArrayInput interface {
	pulumi.Input

	ToProjectTagReleaseArrayOutput() ProjectTagReleaseArrayOutput
	ToProjectTagReleaseArrayOutputWithContext(context.Context) ProjectTagReleaseArrayOutput
}

type ProjectTagReleaseArray []ProjectTagReleaseInput

func (ProjectTagReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagRelease)(nil)).Elem()
}

func (i ProjectTagReleaseArray) ToProjectTagReleaseArrayOutput() ProjectTagReleaseArrayOutput {
	return i.ToProjectTagReleaseArrayOutputWithContext(context.Background())
}

func (i ProjectTagReleaseArray) ToProjectTagReleaseArrayOutputWithContext(ctx context.Context) ProjectTagReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagReleaseArrayOutput)
}

type ProjectTagReleaseOutput struct{ *pulumi.OutputState }

func (ProjectTagReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagRelease)(nil)).Elem()
}

func (o ProjectTagReleaseOutput) ToProjectTagReleaseOutput() ProjectTagReleaseOutput {
	return o
}

func (o ProjectTagReleaseOutput) ToProjectTagReleaseOutputWithContext(ctx context.Context) ProjectTagReleaseOutput {
	return o
}

// The description of release.
func (o ProjectTagReleaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagRelease) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the tag.
func (o ProjectTagReleaseOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagRelease) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type ProjectTagReleaseArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagRelease)(nil)).Elem()
}

func (o ProjectTagReleaseArrayOutput) ToProjectTagReleaseArrayOutput() ProjectTagReleaseArrayOutput {
	return o
}

func (o ProjectTagReleaseArrayOutput) ToProjectTagReleaseArrayOutputWithContext(ctx context.Context) ProjectTagReleaseArrayOutput {
	return o
}

func (o ProjectTagReleaseArrayOutput) Index(i pulumi.IntInput) ProjectTagReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTagRelease {
		return vs[0].([]ProjectTagRelease)[vs[1].(int)]
	}).(ProjectTagReleaseOutput)
}

type TagProtectionAllowedToCreate struct {
	// Access levels allowed to create protected tags. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// TagProtectionAllowedToCreateInput is an input type that accepts TagProtectionAllowedToCreateArgs and TagProtectionAllowedToCreateOutput values.
// You can construct a concrete instance of `TagProtectionAllowedToCreateInput` via:
//
//	TagProtectionAllowedToCreateArgs{...}
type TagProtectionAllowedToCreateInput interface {
	pulumi.Input

	ToTagProtectionAllowedToCreateOutput() TagProtectionAllowedToCreateOutput
	ToTagProtectionAllowedToCreateOutputWithContext(context.Context) TagProtectionAllowedToCreateOutput
}

type TagProtectionAllowedToCreateArgs struct {
	// Access levels allowed to create protected tags. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (TagProtectionAllowedToCreateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagProtectionAllowedToCreate)(nil)).Elem()
}

func (i TagProtectionAllowedToCreateArgs) ToTagProtectionAllowedToCreateOutput() TagProtectionAllowedToCreateOutput {
	return i.ToTagProtectionAllowedToCreateOutputWithContext(context.Background())
}

func (i TagProtectionAllowedToCreateArgs) ToTagProtectionAllowedToCreateOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagProtectionAllowedToCreateOutput)
}

// TagProtectionAllowedToCreateArrayInput is an input type that accepts TagProtectionAllowedToCreateArray and TagProtectionAllowedToCreateArrayOutput values.
// You can construct a concrete instance of `TagProtectionAllowedToCreateArrayInput` via:
//
//	TagProtectionAllowedToCreateArray{ TagProtectionAllowedToCreateArgs{...} }
type TagProtectionAllowedToCreateArrayInput interface {
	pulumi.Input

	ToTagProtectionAllowedToCreateArrayOutput() TagProtectionAllowedToCreateArrayOutput
	ToTagProtectionAllowedToCreateArrayOutputWithContext(context.Context) TagProtectionAllowedToCreateArrayOutput
}

type TagProtectionAllowedToCreateArray []TagProtectionAllowedToCreateInput

func (TagProtectionAllowedToCreateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagProtectionAllowedToCreate)(nil)).Elem()
}

func (i TagProtectionAllowedToCreateArray) ToTagProtectionAllowedToCreateArrayOutput() TagProtectionAllowedToCreateArrayOutput {
	return i.ToTagProtectionAllowedToCreateArrayOutputWithContext(context.Background())
}

func (i TagProtectionAllowedToCreateArray) ToTagProtectionAllowedToCreateArrayOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagProtectionAllowedToCreateArrayOutput)
}

type TagProtectionAllowedToCreateOutput struct{ *pulumi.OutputState }

func (TagProtectionAllowedToCreateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagProtectionAllowedToCreate)(nil)).Elem()
}

func (o TagProtectionAllowedToCreateOutput) ToTagProtectionAllowedToCreateOutput() TagProtectionAllowedToCreateOutput {
	return o
}

func (o TagProtectionAllowedToCreateOutput) ToTagProtectionAllowedToCreateOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateOutput {
	return o
}

// Access levels allowed to create protected tags. Valid values are: `no one`, `developer`, `maintainer`.
func (o TagProtectionAllowedToCreateOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of access level.
func (o TagProtectionAllowedToCreateOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o TagProtectionAllowedToCreateOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o TagProtectionAllowedToCreateOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type TagProtectionAllowedToCreateArrayOutput struct{ *pulumi.OutputState }

func (TagProtectionAllowedToCreateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagProtectionAllowedToCreate)(nil)).Elem()
}

func (o TagProtectionAllowedToCreateArrayOutput) ToTagProtectionAllowedToCreateArrayOutput() TagProtectionAllowedToCreateArrayOutput {
	return o
}

func (o TagProtectionAllowedToCreateArrayOutput) ToTagProtectionAllowedToCreateArrayOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateArrayOutput {
	return o
}

func (o TagProtectionAllowedToCreateArrayOutput) Index(i pulumi.IntInput) TagProtectionAllowedToCreateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagProtectionAllowedToCreate {
		return vs[0].([]TagProtectionAllowedToCreate)[vs[1].(int)]
	}).(TagProtectionAllowedToCreateOutput)
}

type GetBranchCommit struct {
	// The email of the author.
	AuthorEmail string `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName string `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate string `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate string `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail string `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName string `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id string `pulumi:"id"`
	// The commit message
	Message string `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds []string `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId string `pulumi:"shortId"`
	// The title of the commit
	Title string `pulumi:"title"`
}

// GetBranchCommitInput is an input type that accepts GetBranchCommitArgs and GetBranchCommitOutput values.
// You can construct a concrete instance of `GetBranchCommitInput` via:
//
//	GetBranchCommitArgs{...}
type GetBranchCommitInput interface {
	pulumi.Input

	ToGetBranchCommitOutput() GetBranchCommitOutput
	ToGetBranchCommitOutputWithContext(context.Context) GetBranchCommitOutput
}

type GetBranchCommitArgs struct {
	// The email of the author.
	AuthorEmail pulumi.StringInput `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName pulumi.StringInput `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate pulumi.StringInput `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate pulumi.StringInput `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail pulumi.StringInput `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName pulumi.StringInput `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id pulumi.StringInput `pulumi:"id"`
	// The commit message
	Message pulumi.StringInput `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds pulumi.StringArrayInput `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId pulumi.StringInput `pulumi:"shortId"`
	// The title of the commit
	Title pulumi.StringInput `pulumi:"title"`
}

func (GetBranchCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchCommit)(nil)).Elem()
}

func (i GetBranchCommitArgs) ToGetBranchCommitOutput() GetBranchCommitOutput {
	return i.ToGetBranchCommitOutputWithContext(context.Background())
}

func (i GetBranchCommitArgs) ToGetBranchCommitOutputWithContext(ctx context.Context) GetBranchCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchCommitOutput)
}

// GetBranchCommitArrayInput is an input type that accepts GetBranchCommitArray and GetBranchCommitArrayOutput values.
// You can construct a concrete instance of `GetBranchCommitArrayInput` via:
//
//	GetBranchCommitArray{ GetBranchCommitArgs{...} }
type GetBranchCommitArrayInput interface {
	pulumi.Input

	ToGetBranchCommitArrayOutput() GetBranchCommitArrayOutput
	ToGetBranchCommitArrayOutputWithContext(context.Context) GetBranchCommitArrayOutput
}

type GetBranchCommitArray []GetBranchCommitInput

func (GetBranchCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchCommit)(nil)).Elem()
}

func (i GetBranchCommitArray) ToGetBranchCommitArrayOutput() GetBranchCommitArrayOutput {
	return i.ToGetBranchCommitArrayOutputWithContext(context.Background())
}

func (i GetBranchCommitArray) ToGetBranchCommitArrayOutputWithContext(ctx context.Context) GetBranchCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchCommitArrayOutput)
}

type GetBranchCommitOutput struct{ *pulumi.OutputState }

func (GetBranchCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchCommit)(nil)).Elem()
}

func (o GetBranchCommitOutput) ToGetBranchCommitOutput() GetBranchCommitOutput {
	return o
}

func (o GetBranchCommitOutput) ToGetBranchCommitOutputWithContext(ctx context.Context) GetBranchCommitOutput {
	return o
}

// The email of the author.
func (o GetBranchCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

// The name of the author.
func (o GetBranchCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetBranchCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetBranchCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

// The email of the user that committed.
func (o GetBranchCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

// The name of the user that committed.
func (o GetBranchCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o GetBranchCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.Id }).(pulumi.StringOutput)
}

// The commit message
func (o GetBranchCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.Message }).(pulumi.StringOutput)
}

// The id of the parents of the commit
func (o GetBranchCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBranchCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

// The short id assigned to the commit by Gitlab.
func (o GetBranchCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

// The title of the commit
func (o GetBranchCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetBranchCommitArrayOutput struct{ *pulumi.OutputState }

func (GetBranchCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchCommit)(nil)).Elem()
}

func (o GetBranchCommitArrayOutput) ToGetBranchCommitArrayOutput() GetBranchCommitArrayOutput {
	return o
}

func (o GetBranchCommitArrayOutput) ToGetBranchCommitArrayOutputWithContext(ctx context.Context) GetBranchCommitArrayOutput {
	return o
}

func (o GetBranchCommitArrayOutput) Index(i pulumi.IntInput) GetBranchCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBranchCommit {
		return vs[0].([]GetBranchCommit)[vs[1].(int)]
	}).(GetBranchCommitOutput)
}

type GetClusterAgentsClusterAgent struct {
	// The ID of the agent.
	AgentId int `pulumi:"agentId"`
	// The ISO8601 datetime when the agent was created.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the user who created the agent.
	CreatedByUserId int `pulumi:"createdByUserId"`
	// The Name of the agent.
	Name string `pulumi:"name"`
	// ID or full path of the project maintained by the authenticated user.
	Project string `pulumi:"project"`
}

// GetClusterAgentsClusterAgentInput is an input type that accepts GetClusterAgentsClusterAgentArgs and GetClusterAgentsClusterAgentOutput values.
// You can construct a concrete instance of `GetClusterAgentsClusterAgentInput` via:
//
//	GetClusterAgentsClusterAgentArgs{...}
type GetClusterAgentsClusterAgentInput interface {
	pulumi.Input

	ToGetClusterAgentsClusterAgentOutput() GetClusterAgentsClusterAgentOutput
	ToGetClusterAgentsClusterAgentOutputWithContext(context.Context) GetClusterAgentsClusterAgentOutput
}

type GetClusterAgentsClusterAgentArgs struct {
	// The ID of the agent.
	AgentId pulumi.IntInput `pulumi:"agentId"`
	// The ISO8601 datetime when the agent was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the user who created the agent.
	CreatedByUserId pulumi.IntInput `pulumi:"createdByUserId"`
	// The Name of the agent.
	Name pulumi.StringInput `pulumi:"name"`
	// ID or full path of the project maintained by the authenticated user.
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetClusterAgentsClusterAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (i GetClusterAgentsClusterAgentArgs) ToGetClusterAgentsClusterAgentOutput() GetClusterAgentsClusterAgentOutput {
	return i.ToGetClusterAgentsClusterAgentOutputWithContext(context.Background())
}

func (i GetClusterAgentsClusterAgentArgs) ToGetClusterAgentsClusterAgentOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterAgentsClusterAgentOutput)
}

// GetClusterAgentsClusterAgentArrayInput is an input type that accepts GetClusterAgentsClusterAgentArray and GetClusterAgentsClusterAgentArrayOutput values.
// You can construct a concrete instance of `GetClusterAgentsClusterAgentArrayInput` via:
//
//	GetClusterAgentsClusterAgentArray{ GetClusterAgentsClusterAgentArgs{...} }
type GetClusterAgentsClusterAgentArrayInput interface {
	pulumi.Input

	ToGetClusterAgentsClusterAgentArrayOutput() GetClusterAgentsClusterAgentArrayOutput
	ToGetClusterAgentsClusterAgentArrayOutputWithContext(context.Context) GetClusterAgentsClusterAgentArrayOutput
}

type GetClusterAgentsClusterAgentArray []GetClusterAgentsClusterAgentInput

func (GetClusterAgentsClusterAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (i GetClusterAgentsClusterAgentArray) ToGetClusterAgentsClusterAgentArrayOutput() GetClusterAgentsClusterAgentArrayOutput {
	return i.ToGetClusterAgentsClusterAgentArrayOutputWithContext(context.Background())
}

func (i GetClusterAgentsClusterAgentArray) ToGetClusterAgentsClusterAgentArrayOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterAgentsClusterAgentArrayOutput)
}

type GetClusterAgentsClusterAgentOutput struct{ *pulumi.OutputState }

func (GetClusterAgentsClusterAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (o GetClusterAgentsClusterAgentOutput) ToGetClusterAgentsClusterAgentOutput() GetClusterAgentsClusterAgentOutput {
	return o
}

func (o GetClusterAgentsClusterAgentOutput) ToGetClusterAgentsClusterAgentOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentOutput {
	return o
}

// The ID of the agent.
func (o GetClusterAgentsClusterAgentOutput) AgentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) int { return v.AgentId }).(pulumi.IntOutput)
}

// The ISO8601 datetime when the agent was created.
func (o GetClusterAgentsClusterAgentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the user who created the agent.
func (o GetClusterAgentsClusterAgentOutput) CreatedByUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) int { return v.CreatedByUserId }).(pulumi.IntOutput)
}

// The Name of the agent.
func (o GetClusterAgentsClusterAgentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) string { return v.Name }).(pulumi.StringOutput)
}

// ID or full path of the project maintained by the authenticated user.
func (o GetClusterAgentsClusterAgentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) string { return v.Project }).(pulumi.StringOutput)
}

type GetClusterAgentsClusterAgentArrayOutput struct{ *pulumi.OutputState }

func (GetClusterAgentsClusterAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (o GetClusterAgentsClusterAgentArrayOutput) ToGetClusterAgentsClusterAgentArrayOutput() GetClusterAgentsClusterAgentArrayOutput {
	return o
}

func (o GetClusterAgentsClusterAgentArrayOutput) ToGetClusterAgentsClusterAgentArrayOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentArrayOutput {
	return o
}

func (o GetClusterAgentsClusterAgentArrayOutput) Index(i pulumi.IntInput) GetClusterAgentsClusterAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterAgentsClusterAgent {
		return vs[0].([]GetClusterAgentsClusterAgent)[vs[1].(int)]
	}).(GetClusterAgentsClusterAgentOutput)
}

type GetGroupBillableMemberMembershipsMembership struct {
	// Access-level of the member. For details see: https://docs.gitlab.com/ee/api/access_requests.html#valid-access-levels
	AccessLevel string `pulumi:"accessLevel"`
	// Datetime when the membership was first added.
	CreatedAt string `pulumi:"createdAt"`
	// Date when the membership will end.
	ExpiresAt string `pulumi:"expiresAt"`
	// The id of the membership.
	Id int `pulumi:"id"`
	// Breadcrumb-style, full display-name of the group or project.
	SourceFullName string `pulumi:"sourceFullName"`
	// The id of the group or project, the user is a (direct) member of.
	SourceId int `pulumi:"sourceId"`
	// URL to the members-page of the group or project.
	SourceMembersUrl string `pulumi:"sourceMembersUrl"`
}

// GetGroupBillableMemberMembershipsMembershipInput is an input type that accepts GetGroupBillableMemberMembershipsMembershipArgs and GetGroupBillableMemberMembershipsMembershipOutput values.
// You can construct a concrete instance of `GetGroupBillableMemberMembershipsMembershipInput` via:
//
//	GetGroupBillableMemberMembershipsMembershipArgs{...}
type GetGroupBillableMemberMembershipsMembershipInput interface {
	pulumi.Input

	ToGetGroupBillableMemberMembershipsMembershipOutput() GetGroupBillableMemberMembershipsMembershipOutput
	ToGetGroupBillableMemberMembershipsMembershipOutputWithContext(context.Context) GetGroupBillableMemberMembershipsMembershipOutput
}

type GetGroupBillableMemberMembershipsMembershipArgs struct {
	// Access-level of the member. For details see: https://docs.gitlab.com/ee/api/access_requests.html#valid-access-levels
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// Datetime when the membership was first added.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Date when the membership will end.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The id of the membership.
	Id pulumi.IntInput `pulumi:"id"`
	// Breadcrumb-style, full display-name of the group or project.
	SourceFullName pulumi.StringInput `pulumi:"sourceFullName"`
	// The id of the group or project, the user is a (direct) member of.
	SourceId pulumi.IntInput `pulumi:"sourceId"`
	// URL to the members-page of the group or project.
	SourceMembersUrl pulumi.StringInput `pulumi:"sourceMembersUrl"`
}

func (GetGroupBillableMemberMembershipsMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupBillableMemberMembershipsMembership)(nil)).Elem()
}

func (i GetGroupBillableMemberMembershipsMembershipArgs) ToGetGroupBillableMemberMembershipsMembershipOutput() GetGroupBillableMemberMembershipsMembershipOutput {
	return i.ToGetGroupBillableMemberMembershipsMembershipOutputWithContext(context.Background())
}

func (i GetGroupBillableMemberMembershipsMembershipArgs) ToGetGroupBillableMemberMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupBillableMemberMembershipsMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupBillableMemberMembershipsMembershipOutput)
}

// GetGroupBillableMemberMembershipsMembershipArrayInput is an input type that accepts GetGroupBillableMemberMembershipsMembershipArray and GetGroupBillableMemberMembershipsMembershipArrayOutput values.
// You can construct a concrete instance of `GetGroupBillableMemberMembershipsMembershipArrayInput` via:
//
//	GetGroupBillableMemberMembershipsMembershipArray{ GetGroupBillableMemberMembershipsMembershipArgs{...} }
type GetGroupBillableMemberMembershipsMembershipArrayInput interface {
	pulumi.Input

	ToGetGroupBillableMemberMembershipsMembershipArrayOutput() GetGroupBillableMemberMembershipsMembershipArrayOutput
	ToGetGroupBillableMemberMembershipsMembershipArrayOutputWithContext(context.Context) GetGroupBillableMemberMembershipsMembershipArrayOutput
}

type GetGroupBillableMemberMembershipsMembershipArray []GetGroupBillableMemberMembershipsMembershipInput

func (GetGroupBillableMemberMembershipsMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupBillableMemberMembershipsMembership)(nil)).Elem()
}

func (i GetGroupBillableMemberMembershipsMembershipArray) ToGetGroupBillableMemberMembershipsMembershipArrayOutput() GetGroupBillableMemberMembershipsMembershipArrayOutput {
	return i.ToGetGroupBillableMemberMembershipsMembershipArrayOutputWithContext(context.Background())
}

func (i GetGroupBillableMemberMembershipsMembershipArray) ToGetGroupBillableMemberMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupBillableMemberMembershipsMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupBillableMemberMembershipsMembershipArrayOutput)
}

type GetGroupBillableMemberMembershipsMembershipOutput struct{ *pulumi.OutputState }

func (GetGroupBillableMemberMembershipsMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupBillableMemberMembershipsMembership)(nil)).Elem()
}

func (o GetGroupBillableMemberMembershipsMembershipOutput) ToGetGroupBillableMemberMembershipsMembershipOutput() GetGroupBillableMemberMembershipsMembershipOutput {
	return o
}

func (o GetGroupBillableMemberMembershipsMembershipOutput) ToGetGroupBillableMemberMembershipsMembershipOutputWithContext(ctx context.Context) GetGroupBillableMemberMembershipsMembershipOutput {
	return o
}

// Access-level of the member. For details see: https://docs.gitlab.com/ee/api/access_requests.html#valid-access-levels
func (o GetGroupBillableMemberMembershipsMembershipOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsMembership) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// Datetime when the membership was first added.
func (o GetGroupBillableMemberMembershipsMembershipOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsMembership) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Date when the membership will end.
func (o GetGroupBillableMemberMembershipsMembershipOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsMembership) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The id of the membership.
func (o GetGroupBillableMemberMembershipsMembershipOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsMembership) int { return v.Id }).(pulumi.IntOutput)
}

// Breadcrumb-style, full display-name of the group or project.
func (o GetGroupBillableMemberMembershipsMembershipOutput) SourceFullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsMembership) string { return v.SourceFullName }).(pulumi.StringOutput)
}

// The id of the group or project, the user is a (direct) member of.
func (o GetGroupBillableMemberMembershipsMembershipOutput) SourceId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsMembership) int { return v.SourceId }).(pulumi.IntOutput)
}

// URL to the members-page of the group or project.
func (o GetGroupBillableMemberMembershipsMembershipOutput) SourceMembersUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsMembership) string { return v.SourceMembersUrl }).(pulumi.StringOutput)
}

type GetGroupBillableMemberMembershipsMembershipArrayOutput struct{ *pulumi.OutputState }

func (GetGroupBillableMemberMembershipsMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupBillableMemberMembershipsMembership)(nil)).Elem()
}

func (o GetGroupBillableMemberMembershipsMembershipArrayOutput) ToGetGroupBillableMemberMembershipsMembershipArrayOutput() GetGroupBillableMemberMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupBillableMemberMembershipsMembershipArrayOutput) ToGetGroupBillableMemberMembershipsMembershipArrayOutputWithContext(ctx context.Context) GetGroupBillableMemberMembershipsMembershipArrayOutput {
	return o
}

func (o GetGroupBillableMemberMembershipsMembershipArrayOutput) Index(i pulumi.IntInput) GetGroupBillableMemberMembershipsMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupBillableMemberMembershipsMembership {
		return vs[0].([]GetGroupBillableMemberMembershipsMembership)[vs[1].(int)]
	}).(GetGroupBillableMemberMembershipsMembershipOutput)
}

type GetGroupHooksHook struct {
	// Invoke the hook for confidential issues events.
	ConfidentialIssuesEvents bool `pulumi:"confidentialIssuesEvents"`
	// Invoke the hook for confidential notes events.
	ConfidentialNoteEvents bool `pulumi:"confidentialNoteEvents"`
	// Set a custom webhook template.
	CustomWebhookTemplate string `pulumi:"customWebhookTemplate"`
	// Invoke the hook for deployment events.
	DeploymentEvents bool `pulumi:"deploymentEvents"`
	// Enable ssl verification when invoking the hook.
	EnableSslVerification bool `pulumi:"enableSslVerification"`
	// The ID or full path of the group.
	Group string `pulumi:"group"`
	// The id of the group for the hook.
	GroupId int `pulumi:"groupId"`
	// The id of the group hook.
	HookId int `pulumi:"hookId"`
	// Invoke the hook for issues events.
	IssuesEvents bool `pulumi:"issuesEvents"`
	// Invoke the hook for job events.
	JobEvents bool `pulumi:"jobEvents"`
	// Invoke the hook for merge requests.
	MergeRequestsEvents bool `pulumi:"mergeRequestsEvents"`
	// Invoke the hook for notes events.
	NoteEvents bool `pulumi:"noteEvents"`
	// Invoke the hook for pipeline events.
	PipelineEvents bool `pulumi:"pipelineEvents"`
	// Invoke the hook for push events.
	PushEvents bool `pulumi:"pushEvents"`
	// Invoke the hook for push events on matching branches only.
	PushEventsBranchFilter string `pulumi:"pushEventsBranchFilter"`
	// Invoke the hook for releases events.
	ReleasesEvents bool `pulumi:"releasesEvents"`
	// Invoke the hook for subgroup events.
	SubgroupEvents bool `pulumi:"subgroupEvents"`
	// Invoke the hook for tag push events.
	TagPushEvents bool `pulumi:"tagPushEvents"`
	// A token to present when invoking the hook. The token is not available for imported resources.
	Token string `pulumi:"token"`
	// The url of the hook to invoke.
	Url string `pulumi:"url"`
	// Invoke the hook for wiki page events.
	WikiPageEvents bool `pulumi:"wikiPageEvents"`
}

// GetGroupHooksHookInput is an input type that accepts GetGroupHooksHookArgs and GetGroupHooksHookOutput values.
// You can construct a concrete instance of `GetGroupHooksHookInput` via:
//
//	GetGroupHooksHookArgs{...}
type GetGroupHooksHookInput interface {
	pulumi.Input

	ToGetGroupHooksHookOutput() GetGroupHooksHookOutput
	ToGetGroupHooksHookOutputWithContext(context.Context) GetGroupHooksHookOutput
}

type GetGroupHooksHookArgs struct {
	// Invoke the hook for confidential issues events.
	ConfidentialIssuesEvents pulumi.BoolInput `pulumi:"confidentialIssuesEvents"`
	// Invoke the hook for confidential notes events.
	ConfidentialNoteEvents pulumi.BoolInput `pulumi:"confidentialNoteEvents"`
	// Set a custom webhook template.
	CustomWebhookTemplate pulumi.StringInput `pulumi:"customWebhookTemplate"`
	// Invoke the hook for deployment events.
	DeploymentEvents pulumi.BoolInput `pulumi:"deploymentEvents"`
	// Enable ssl verification when invoking the hook.
	EnableSslVerification pulumi.BoolInput `pulumi:"enableSslVerification"`
	// The ID or full path of the group.
	Group pulumi.StringInput `pulumi:"group"`
	// The id of the group for the hook.
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// The id of the group hook.
	HookId pulumi.IntInput `pulumi:"hookId"`
	// Invoke the hook for issues events.
	IssuesEvents pulumi.BoolInput `pulumi:"issuesEvents"`
	// Invoke the hook for job events.
	JobEvents pulumi.BoolInput `pulumi:"jobEvents"`
	// Invoke the hook for merge requests.
	MergeRequestsEvents pulumi.BoolInput `pulumi:"mergeRequestsEvents"`
	// Invoke the hook for notes events.
	NoteEvents pulumi.BoolInput `pulumi:"noteEvents"`
	// Invoke the hook for pipeline events.
	PipelineEvents pulumi.BoolInput `pulumi:"pipelineEvents"`
	// Invoke the hook for push events.
	PushEvents pulumi.BoolInput `pulumi:"pushEvents"`
	// Invoke the hook for push events on matching branches only.
	PushEventsBranchFilter pulumi.StringInput `pulumi:"pushEventsBranchFilter"`
	// Invoke the hook for releases events.
	ReleasesEvents pulumi.BoolInput `pulumi:"releasesEvents"`
	// Invoke the hook for subgroup events.
	SubgroupEvents pulumi.BoolInput `pulumi:"subgroupEvents"`
	// Invoke the hook for tag push events.
	TagPushEvents pulumi.BoolInput `pulumi:"tagPushEvents"`
	// A token to present when invoking the hook. The token is not available for imported resources.
	Token pulumi.StringInput `pulumi:"token"`
	// The url of the hook to invoke.
	Url pulumi.StringInput `pulumi:"url"`
	// Invoke the hook for wiki page events.
	WikiPageEvents pulumi.BoolInput `pulumi:"wikiPageEvents"`
}

func (GetGroupHooksHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupHooksHook)(nil)).Elem()
}

func (i GetGroupHooksHookArgs) ToGetGroupHooksHookOutput() GetGroupHooksHookOutput {
	return i.ToGetGroupHooksHookOutputWithContext(context.Background())
}

func (i GetGroupHooksHookArgs) ToGetGroupHooksHookOutputWithContext(ctx context.Context) GetGroupHooksHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupHooksHookOutput)
}

// GetGroupHooksHookArrayInput is an input type that accepts GetGroupHooksHookArray and GetGroupHooksHookArrayOutput values.
// You can construct a concrete instance of `GetGroupHooksHookArrayInput` via:
//
//	GetGroupHooksHookArray{ GetGroupHooksHookArgs{...} }
type GetGroupHooksHookArrayInput interface {
	pulumi.Input

	ToGetGroupHooksHookArrayOutput() GetGroupHooksHookArrayOutput
	ToGetGroupHooksHookArrayOutputWithContext(context.Context) GetGroupHooksHookArrayOutput
}

type GetGroupHooksHookArray []GetGroupHooksHookInput

func (GetGroupHooksHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupHooksHook)(nil)).Elem()
}

func (i GetGroupHooksHookArray) ToGetGroupHooksHookArrayOutput() GetGroupHooksHookArrayOutput {
	return i.ToGetGroupHooksHookArrayOutputWithContext(context.Background())
}

func (i GetGroupHooksHookArray) ToGetGroupHooksHookArrayOutputWithContext(ctx context.Context) GetGroupHooksHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupHooksHookArrayOutput)
}

type GetGroupHooksHookOutput struct{ *pulumi.OutputState }

func (GetGroupHooksHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupHooksHook)(nil)).Elem()
}

func (o GetGroupHooksHookOutput) ToGetGroupHooksHookOutput() GetGroupHooksHookOutput {
	return o
}

func (o GetGroupHooksHookOutput) ToGetGroupHooksHookOutputWithContext(ctx context.Context) GetGroupHooksHookOutput {
	return o
}

// Invoke the hook for confidential issues events.
func (o GetGroupHooksHookOutput) ConfidentialIssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.ConfidentialIssuesEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for confidential notes events.
func (o GetGroupHooksHookOutput) ConfidentialNoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.ConfidentialNoteEvents }).(pulumi.BoolOutput)
}

// Set a custom webhook template.
func (o GetGroupHooksHookOutput) CustomWebhookTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.CustomWebhookTemplate }).(pulumi.StringOutput)
}

// Invoke the hook for deployment events.
func (o GetGroupHooksHookOutput) DeploymentEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.DeploymentEvents }).(pulumi.BoolOutput)
}

// Enable ssl verification when invoking the hook.
func (o GetGroupHooksHookOutput) EnableSslVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.EnableSslVerification }).(pulumi.BoolOutput)
}

// The ID or full path of the group.
func (o GetGroupHooksHookOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.Group }).(pulumi.StringOutput)
}

// The id of the group for the hook.
func (o GetGroupHooksHookOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupHooksHook) int { return v.GroupId }).(pulumi.IntOutput)
}

// The id of the group hook.
func (o GetGroupHooksHookOutput) HookId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupHooksHook) int { return v.HookId }).(pulumi.IntOutput)
}

// Invoke the hook for issues events.
func (o GetGroupHooksHookOutput) IssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.IssuesEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for job events.
func (o GetGroupHooksHookOutput) JobEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.JobEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for merge requests.
func (o GetGroupHooksHookOutput) MergeRequestsEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.MergeRequestsEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for notes events.
func (o GetGroupHooksHookOutput) NoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.NoteEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for pipeline events.
func (o GetGroupHooksHookOutput) PipelineEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.PipelineEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for push events.
func (o GetGroupHooksHookOutput) PushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.PushEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for push events on matching branches only.
func (o GetGroupHooksHookOutput) PushEventsBranchFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.PushEventsBranchFilter }).(pulumi.StringOutput)
}

// Invoke the hook for releases events.
func (o GetGroupHooksHookOutput) ReleasesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.ReleasesEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for subgroup events.
func (o GetGroupHooksHookOutput) SubgroupEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.SubgroupEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for tag push events.
func (o GetGroupHooksHookOutput) TagPushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.TagPushEvents }).(pulumi.BoolOutput)
}

// A token to present when invoking the hook. The token is not available for imported resources.
func (o GetGroupHooksHookOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.Token }).(pulumi.StringOutput)
}

// The url of the hook to invoke.
func (o GetGroupHooksHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.Url }).(pulumi.StringOutput)
}

// Invoke the hook for wiki page events.
func (o GetGroupHooksHookOutput) WikiPageEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.WikiPageEvents }).(pulumi.BoolOutput)
}

type GetGroupHooksHookArrayOutput struct{ *pulumi.OutputState }

func (GetGroupHooksHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupHooksHook)(nil)).Elem()
}

func (o GetGroupHooksHookArrayOutput) ToGetGroupHooksHookArrayOutput() GetGroupHooksHookArrayOutput {
	return o
}

func (o GetGroupHooksHookArrayOutput) ToGetGroupHooksHookArrayOutputWithContext(ctx context.Context) GetGroupHooksHookArrayOutput {
	return o
}

func (o GetGroupHooksHookArrayOutput) Index(i pulumi.IntInput) GetGroupHooksHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupHooksHook {
		return vs[0].([]GetGroupHooksHook)[vs[1].(int)]
	}).(GetGroupHooksHookOutput)
}

type GetGroupMembershipMember struct {
	// The level of access to the group.
	AccessLevel string `pulumi:"accessLevel"`
	// The avatar URL of the user.
	AvatarUrl string `pulumi:"avatarUrl"`
	// Expiration date for the group membership.
	ExpiresAt string `pulumi:"expiresAt"`
	// The unique id assigned to the user by the gitlab server.
	Id int `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// Whether the user is active or blocked.
	State string `pulumi:"state"`
	// The username of the user.
	Username string `pulumi:"username"`
	// User's website URL.
	WebUrl string `pulumi:"webUrl"`
}

// GetGroupMembershipMemberInput is an input type that accepts GetGroupMembershipMemberArgs and GetGroupMembershipMemberOutput values.
// You can construct a concrete instance of `GetGroupMembershipMemberInput` via:
//
//	GetGroupMembershipMemberArgs{...}
type GetGroupMembershipMemberInput interface {
	pulumi.Input

	ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput
	ToGetGroupMembershipMemberOutputWithContext(context.Context) GetGroupMembershipMemberOutput
}

type GetGroupMembershipMemberArgs struct {
	// The level of access to the group.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// The avatar URL of the user.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// Expiration date for the group membership.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The unique id assigned to the user by the gitlab server.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the user is active or blocked.
	State pulumi.StringInput `pulumi:"state"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// User's website URL.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetGroupMembershipMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipMember)(nil)).Elem()
}

func (i GetGroupMembershipMemberArgs) ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput {
	return i.ToGetGroupMembershipMemberOutputWithContext(context.Background())
}

func (i GetGroupMembershipMemberArgs) ToGetGroupMembershipMemberOutputWithContext(ctx context.Context) GetGroupMembershipMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipMemberOutput)
}

// GetGroupMembershipMemberArrayInput is an input type that accepts GetGroupMembershipMemberArray and GetGroupMembershipMemberArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipMemberArrayInput` via:
//
//	GetGroupMembershipMemberArray{ GetGroupMembershipMemberArgs{...} }
type GetGroupMembershipMemberArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput
	ToGetGroupMembershipMemberArrayOutputWithContext(context.Context) GetGroupMembershipMemberArrayOutput
}

type GetGroupMembershipMemberArray []GetGroupMembershipMemberInput

func (GetGroupMembershipMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipMember)(nil)).Elem()
}

func (i GetGroupMembershipMemberArray) ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput {
	return i.ToGetGroupMembershipMemberArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipMemberArray) ToGetGroupMembershipMemberArrayOutputWithContext(ctx context.Context) GetGroupMembershipMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipMemberArrayOutput)
}

type GetGroupMembershipMemberOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipMember)(nil)).Elem()
}

func (o GetGroupMembershipMemberOutput) ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput {
	return o
}

func (o GetGroupMembershipMemberOutput) ToGetGroupMembershipMemberOutputWithContext(ctx context.Context) GetGroupMembershipMemberOutput {
	return o
}

// The level of access to the group.
func (o GetGroupMembershipMemberOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// The avatar URL of the user.
func (o GetGroupMembershipMemberOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// Expiration date for the group membership.
func (o GetGroupMembershipMemberOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The unique id assigned to the user by the gitlab server.
func (o GetGroupMembershipMemberOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the user.
func (o GetGroupMembershipMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the user is active or blocked.
func (o GetGroupMembershipMemberOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.State }).(pulumi.StringOutput)
}

// The username of the user.
func (o GetGroupMembershipMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.Username }).(pulumi.StringOutput)
}

// User's website URL.
func (o GetGroupMembershipMemberOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetGroupMembershipMemberArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipMember)(nil)).Elem()
}

func (o GetGroupMembershipMemberArrayOutput) ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput {
	return o
}

func (o GetGroupMembershipMemberArrayOutput) ToGetGroupMembershipMemberArrayOutputWithContext(ctx context.Context) GetGroupMembershipMemberArrayOutput {
	return o
}

func (o GetGroupMembershipMemberArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipMember {
		return vs[0].([]GetGroupMembershipMember)[vs[1].(int)]
	}).(GetGroupMembershipMemberOutput)
}

type GetGroupProvisionedUsersProvisionedUser struct {
	// The avatar URL of the provisioned user.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The bio of the provisioned user.
	Bio string `pulumi:"bio"`
	// Whether the provisioned user is a bot.
	Bot bool `pulumi:"bot"`
	// The confirmation date of the provisioned user.
	ConfirmedAt string `pulumi:"confirmedAt"`
	// The creation date of the provisioned user.
	CreatedAt string `pulumi:"createdAt"`
	// The email of the provisioned user.
	Email string `pulumi:"email"`
	// Whether the provisioned user is external.
	External bool `pulumi:"external"`
	// The ID of the provisioned user.
	Id string `pulumi:"id"`
	// The job title of the provisioned user.
	JobTitle string `pulumi:"jobTitle"`
	// The last activity date of the provisioned user.
	LastActivityOn string `pulumi:"lastActivityOn"`
	// The last sign-in date of the provisioned user.
	LastSignInAt string `pulumi:"lastSignInAt"`
	// The LinkedIn ID of the provisioned user.
	Linkedin string `pulumi:"linkedin"`
	// The location of the provisioned user.
	Location string `pulumi:"location"`
	// The name of the provisioned user.
	Name string `pulumi:"name"`
	// The organization of the provisioned user.
	Organization string `pulumi:"organization"`
	// Whether the provisioned user has a private profile.
	PrivateProfile bool `pulumi:"privateProfile"`
	// The pronouns of the provisioned user.
	Pronouns string `pulumi:"pronouns"`
	// The public email of the provisioned user.
	PublicEmail string `pulumi:"publicEmail"`
	// The Skype ID of the provisioned user.
	Skype string `pulumi:"skype"`
	// The state of the provisioned user.
	State string `pulumi:"state"`
	// The Twitter ID of the provisioned user.
	Twitter string `pulumi:"twitter"`
	// Whether two-factor authentication is enabled for the provisioned user.
	TwoFactorEnabled bool `pulumi:"twoFactorEnabled"`
	// The username of the provisioned user.
	Username string `pulumi:"username"`
	// The web URL of the provisioned user.
	WebUrl string `pulumi:"webUrl"`
	// The website URL of the provisioned user.
	WebsiteUrl string `pulumi:"websiteUrl"`
}

// GetGroupProvisionedUsersProvisionedUserInput is an input type that accepts GetGroupProvisionedUsersProvisionedUserArgs and GetGroupProvisionedUsersProvisionedUserOutput values.
// You can construct a concrete instance of `GetGroupProvisionedUsersProvisionedUserInput` via:
//
//	GetGroupProvisionedUsersProvisionedUserArgs{...}
type GetGroupProvisionedUsersProvisionedUserInput interface {
	pulumi.Input

	ToGetGroupProvisionedUsersProvisionedUserOutput() GetGroupProvisionedUsersProvisionedUserOutput
	ToGetGroupProvisionedUsersProvisionedUserOutputWithContext(context.Context) GetGroupProvisionedUsersProvisionedUserOutput
}

type GetGroupProvisionedUsersProvisionedUserArgs struct {
	// The avatar URL of the provisioned user.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The bio of the provisioned user.
	Bio pulumi.StringInput `pulumi:"bio"`
	// Whether the provisioned user is a bot.
	Bot pulumi.BoolInput `pulumi:"bot"`
	// The confirmation date of the provisioned user.
	ConfirmedAt pulumi.StringInput `pulumi:"confirmedAt"`
	// The creation date of the provisioned user.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The email of the provisioned user.
	Email pulumi.StringInput `pulumi:"email"`
	// Whether the provisioned user is external.
	External pulumi.BoolInput `pulumi:"external"`
	// The ID of the provisioned user.
	Id pulumi.StringInput `pulumi:"id"`
	// The job title of the provisioned user.
	JobTitle pulumi.StringInput `pulumi:"jobTitle"`
	// The last activity date of the provisioned user.
	LastActivityOn pulumi.StringInput `pulumi:"lastActivityOn"`
	// The last sign-in date of the provisioned user.
	LastSignInAt pulumi.StringInput `pulumi:"lastSignInAt"`
	// The LinkedIn ID of the provisioned user.
	Linkedin pulumi.StringInput `pulumi:"linkedin"`
	// The location of the provisioned user.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the provisioned user.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization of the provisioned user.
	Organization pulumi.StringInput `pulumi:"organization"`
	// Whether the provisioned user has a private profile.
	PrivateProfile pulumi.BoolInput `pulumi:"privateProfile"`
	// The pronouns of the provisioned user.
	Pronouns pulumi.StringInput `pulumi:"pronouns"`
	// The public email of the provisioned user.
	PublicEmail pulumi.StringInput `pulumi:"publicEmail"`
	// The Skype ID of the provisioned user.
	Skype pulumi.StringInput `pulumi:"skype"`
	// The state of the provisioned user.
	State pulumi.StringInput `pulumi:"state"`
	// The Twitter ID of the provisioned user.
	Twitter pulumi.StringInput `pulumi:"twitter"`
	// Whether two-factor authentication is enabled for the provisioned user.
	TwoFactorEnabled pulumi.BoolInput `pulumi:"twoFactorEnabled"`
	// The username of the provisioned user.
	Username pulumi.StringInput `pulumi:"username"`
	// The web URL of the provisioned user.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
	// The website URL of the provisioned user.
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetGroupProvisionedUsersProvisionedUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupProvisionedUsersProvisionedUser)(nil)).Elem()
}

func (i GetGroupProvisionedUsersProvisionedUserArgs) ToGetGroupProvisionedUsersProvisionedUserOutput() GetGroupProvisionedUsersProvisionedUserOutput {
	return i.ToGetGroupProvisionedUsersProvisionedUserOutputWithContext(context.Background())
}

func (i GetGroupProvisionedUsersProvisionedUserArgs) ToGetGroupProvisionedUsersProvisionedUserOutputWithContext(ctx context.Context) GetGroupProvisionedUsersProvisionedUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupProvisionedUsersProvisionedUserOutput)
}

// GetGroupProvisionedUsersProvisionedUserArrayInput is an input type that accepts GetGroupProvisionedUsersProvisionedUserArray and GetGroupProvisionedUsersProvisionedUserArrayOutput values.
// You can construct a concrete instance of `GetGroupProvisionedUsersProvisionedUserArrayInput` via:
//
//	GetGroupProvisionedUsersProvisionedUserArray{ GetGroupProvisionedUsersProvisionedUserArgs{...} }
type GetGroupProvisionedUsersProvisionedUserArrayInput interface {
	pulumi.Input

	ToGetGroupProvisionedUsersProvisionedUserArrayOutput() GetGroupProvisionedUsersProvisionedUserArrayOutput
	ToGetGroupProvisionedUsersProvisionedUserArrayOutputWithContext(context.Context) GetGroupProvisionedUsersProvisionedUserArrayOutput
}

type GetGroupProvisionedUsersProvisionedUserArray []GetGroupProvisionedUsersProvisionedUserInput

func (GetGroupProvisionedUsersProvisionedUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupProvisionedUsersProvisionedUser)(nil)).Elem()
}

func (i GetGroupProvisionedUsersProvisionedUserArray) ToGetGroupProvisionedUsersProvisionedUserArrayOutput() GetGroupProvisionedUsersProvisionedUserArrayOutput {
	return i.ToGetGroupProvisionedUsersProvisionedUserArrayOutputWithContext(context.Background())
}

func (i GetGroupProvisionedUsersProvisionedUserArray) ToGetGroupProvisionedUsersProvisionedUserArrayOutputWithContext(ctx context.Context) GetGroupProvisionedUsersProvisionedUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupProvisionedUsersProvisionedUserArrayOutput)
}

type GetGroupProvisionedUsersProvisionedUserOutput struct{ *pulumi.OutputState }

func (GetGroupProvisionedUsersProvisionedUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupProvisionedUsersProvisionedUser)(nil)).Elem()
}

func (o GetGroupProvisionedUsersProvisionedUserOutput) ToGetGroupProvisionedUsersProvisionedUserOutput() GetGroupProvisionedUsersProvisionedUserOutput {
	return o
}

func (o GetGroupProvisionedUsersProvisionedUserOutput) ToGetGroupProvisionedUsersProvisionedUserOutputWithContext(ctx context.Context) GetGroupProvisionedUsersProvisionedUserOutput {
	return o
}

// The avatar URL of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The bio of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Bio() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Bio }).(pulumi.StringOutput)
}

// Whether the provisioned user is a bot.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Bot() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) bool { return v.Bot }).(pulumi.BoolOutput)
}

// The confirmation date of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) ConfirmedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.ConfirmedAt }).(pulumi.StringOutput)
}

// The creation date of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The email of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Email }).(pulumi.StringOutput)
}

// Whether the provisioned user is external.
func (o GetGroupProvisionedUsersProvisionedUserOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) bool { return v.External }).(pulumi.BoolOutput)
}

// The ID of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Id }).(pulumi.StringOutput)
}

// The job title of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) JobTitle() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.JobTitle }).(pulumi.StringOutput)
}

// The last activity date of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) LastActivityOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.LastActivityOn }).(pulumi.StringOutput)
}

// The last sign-in date of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) LastSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.LastSignInAt }).(pulumi.StringOutput)
}

// The LinkedIn ID of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Linkedin() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Linkedin }).(pulumi.StringOutput)
}

// The location of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Name }).(pulumi.StringOutput)
}

// The organization of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Organization }).(pulumi.StringOutput)
}

// Whether the provisioned user has a private profile.
func (o GetGroupProvisionedUsersProvisionedUserOutput) PrivateProfile() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) bool { return v.PrivateProfile }).(pulumi.BoolOutput)
}

// The pronouns of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Pronouns() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Pronouns }).(pulumi.StringOutput)
}

// The public email of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) PublicEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.PublicEmail }).(pulumi.StringOutput)
}

// The Skype ID of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Skype() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Skype }).(pulumi.StringOutput)
}

// The state of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.State }).(pulumi.StringOutput)
}

// The Twitter ID of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Twitter() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Twitter }).(pulumi.StringOutput)
}

// Whether two-factor authentication is enabled for the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) TwoFactorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) bool { return v.TwoFactorEnabled }).(pulumi.BoolOutput)
}

// The username of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.Username }).(pulumi.StringOutput)
}

// The web URL of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.WebUrl }).(pulumi.StringOutput)
}

// The website URL of the provisioned user.
func (o GetGroupProvisionedUsersProvisionedUserOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersProvisionedUser) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetGroupProvisionedUsersProvisionedUserArrayOutput struct{ *pulumi.OutputState }

func (GetGroupProvisionedUsersProvisionedUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupProvisionedUsersProvisionedUser)(nil)).Elem()
}

func (o GetGroupProvisionedUsersProvisionedUserArrayOutput) ToGetGroupProvisionedUsersProvisionedUserArrayOutput() GetGroupProvisionedUsersProvisionedUserArrayOutput {
	return o
}

func (o GetGroupProvisionedUsersProvisionedUserArrayOutput) ToGetGroupProvisionedUsersProvisionedUserArrayOutputWithContext(ctx context.Context) GetGroupProvisionedUsersProvisionedUserArrayOutput {
	return o
}

func (o GetGroupProvisionedUsersProvisionedUserArrayOutput) Index(i pulumi.IntInput) GetGroupProvisionedUsersProvisionedUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupProvisionedUsersProvisionedUser {
		return vs[0].([]GetGroupProvisionedUsersProvisionedUser)[vs[1].(int)]
	}).(GetGroupProvisionedUsersProvisionedUserOutput)
}

type GetGroupSharedWithGroup struct {
	// Share with group expiration date.
	ExpiresAt string `pulumi:"expiresAt"`
	// The accessLevel permission level of the shared group.
	GroupAccessLevel int `pulumi:"groupAccessLevel"`
	// The full path of the group shared with.
	GroupFullPath string `pulumi:"groupFullPath"`
	// The ID of the group shared with.
	GroupId int `pulumi:"groupId"`
	// The name of the group shared with.
	GroupName string `pulumi:"groupName"`
}

// GetGroupSharedWithGroupInput is an input type that accepts GetGroupSharedWithGroupArgs and GetGroupSharedWithGroupOutput values.
// You can construct a concrete instance of `GetGroupSharedWithGroupInput` via:
//
//	GetGroupSharedWithGroupArgs{...}
type GetGroupSharedWithGroupInput interface {
	pulumi.Input

	ToGetGroupSharedWithGroupOutput() GetGroupSharedWithGroupOutput
	ToGetGroupSharedWithGroupOutputWithContext(context.Context) GetGroupSharedWithGroupOutput
}

type GetGroupSharedWithGroupArgs struct {
	// Share with group expiration date.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The accessLevel permission level of the shared group.
	GroupAccessLevel pulumi.IntInput `pulumi:"groupAccessLevel"`
	// The full path of the group shared with.
	GroupFullPath pulumi.StringInput `pulumi:"groupFullPath"`
	// The ID of the group shared with.
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// The name of the group shared with.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (GetGroupSharedWithGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupSharedWithGroup)(nil)).Elem()
}

func (i GetGroupSharedWithGroupArgs) ToGetGroupSharedWithGroupOutput() GetGroupSharedWithGroupOutput {
	return i.ToGetGroupSharedWithGroupOutputWithContext(context.Background())
}

func (i GetGroupSharedWithGroupArgs) ToGetGroupSharedWithGroupOutputWithContext(ctx context.Context) GetGroupSharedWithGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupSharedWithGroupOutput)
}

// GetGroupSharedWithGroupArrayInput is an input type that accepts GetGroupSharedWithGroupArray and GetGroupSharedWithGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupSharedWithGroupArrayInput` via:
//
//	GetGroupSharedWithGroupArray{ GetGroupSharedWithGroupArgs{...} }
type GetGroupSharedWithGroupArrayInput interface {
	pulumi.Input

	ToGetGroupSharedWithGroupArrayOutput() GetGroupSharedWithGroupArrayOutput
	ToGetGroupSharedWithGroupArrayOutputWithContext(context.Context) GetGroupSharedWithGroupArrayOutput
}

type GetGroupSharedWithGroupArray []GetGroupSharedWithGroupInput

func (GetGroupSharedWithGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupSharedWithGroup)(nil)).Elem()
}

func (i GetGroupSharedWithGroupArray) ToGetGroupSharedWithGroupArrayOutput() GetGroupSharedWithGroupArrayOutput {
	return i.ToGetGroupSharedWithGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupSharedWithGroupArray) ToGetGroupSharedWithGroupArrayOutputWithContext(ctx context.Context) GetGroupSharedWithGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupSharedWithGroupArrayOutput)
}

type GetGroupSharedWithGroupOutput struct{ *pulumi.OutputState }

func (GetGroupSharedWithGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupSharedWithGroup)(nil)).Elem()
}

func (o GetGroupSharedWithGroupOutput) ToGetGroupSharedWithGroupOutput() GetGroupSharedWithGroupOutput {
	return o
}

func (o GetGroupSharedWithGroupOutput) ToGetGroupSharedWithGroupOutputWithContext(ctx context.Context) GetGroupSharedWithGroupOutput {
	return o
}

// Share with group expiration date.
func (o GetGroupSharedWithGroupOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSharedWithGroup) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The accessLevel permission level of the shared group.
func (o GetGroupSharedWithGroupOutput) GroupAccessLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSharedWithGroup) int { return v.GroupAccessLevel }).(pulumi.IntOutput)
}

// The full path of the group shared with.
func (o GetGroupSharedWithGroupOutput) GroupFullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSharedWithGroup) string { return v.GroupFullPath }).(pulumi.StringOutput)
}

// The ID of the group shared with.
func (o GetGroupSharedWithGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSharedWithGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

// The name of the group shared with.
func (o GetGroupSharedWithGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSharedWithGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

type GetGroupSharedWithGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupSharedWithGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupSharedWithGroup)(nil)).Elem()
}

func (o GetGroupSharedWithGroupArrayOutput) ToGetGroupSharedWithGroupArrayOutput() GetGroupSharedWithGroupArrayOutput {
	return o
}

func (o GetGroupSharedWithGroupArrayOutput) ToGetGroupSharedWithGroupArrayOutputWithContext(ctx context.Context) GetGroupSharedWithGroupArrayOutput {
	return o
}

func (o GetGroupSharedWithGroupArrayOutput) Index(i pulumi.IntInput) GetGroupSharedWithGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupSharedWithGroup {
		return vs[0].([]GetGroupSharedWithGroup)[vs[1].(int)]
	}).(GetGroupSharedWithGroupOutput)
}

type GetGroupSubgroupsSubgroup struct {
	AllowedEmailDomainsList        string            `pulumi:"allowedEmailDomainsList"`
	AutoDevopsEnabled              bool              `pulumi:"autoDevopsEnabled"`
	AvatarUrl                      string            `pulumi:"avatarUrl"`
	CreatedAt                      string            `pulumi:"createdAt"`
	DefaultBranchProtection        int               `pulumi:"defaultBranchProtection"`
	Description                    string            `pulumi:"description"`
	EmailsEnabled                  bool              `pulumi:"emailsEnabled"`
	FileTemplateProjectId          int               `pulumi:"fileTemplateProjectId"`
	FullName                       string            `pulumi:"fullName"`
	FullPath                       string            `pulumi:"fullPath"`
	GroupId                        int               `pulumi:"groupId"`
	IpRestrictionRanges            string            `pulumi:"ipRestrictionRanges"`
	LfsEnabled                     bool              `pulumi:"lfsEnabled"`
	MentionsDisabled               bool              `pulumi:"mentionsDisabled"`
	Name                           string            `pulumi:"name"`
	ParentId                       int               `pulumi:"parentId"`
	Path                           string            `pulumi:"path"`
	ProjectCreationLevel           string            `pulumi:"projectCreationLevel"`
	RequestAccessEnabled           bool              `pulumi:"requestAccessEnabled"`
	RequireTwoFactorAuthentication bool              `pulumi:"requireTwoFactorAuthentication"`
	ShareWithGroupLock             bool              `pulumi:"shareWithGroupLock"`
	SharedRunnersSetting           string            `pulumi:"sharedRunnersSetting"`
	Statistics                     map[string]string `pulumi:"statistics"`
	SubgroupCreationLevel          string            `pulumi:"subgroupCreationLevel"`
	TwoFactorGracePeriod           int               `pulumi:"twoFactorGracePeriod"`
	Visibility                     string            `pulumi:"visibility"`
	WebUrl                         string            `pulumi:"webUrl"`
	WikiAccessLevel                string            `pulumi:"wikiAccessLevel"`
}

// GetGroupSubgroupsSubgroupInput is an input type that accepts GetGroupSubgroupsSubgroupArgs and GetGroupSubgroupsSubgroupOutput values.
// You can construct a concrete instance of `GetGroupSubgroupsSubgroupInput` via:
//
//	GetGroupSubgroupsSubgroupArgs{...}
type GetGroupSubgroupsSubgroupInput interface {
	pulumi.Input

	ToGetGroupSubgroupsSubgroupOutput() GetGroupSubgroupsSubgroupOutput
	ToGetGroupSubgroupsSubgroupOutputWithContext(context.Context) GetGroupSubgroupsSubgroupOutput
}

type GetGroupSubgroupsSubgroupArgs struct {
	AllowedEmailDomainsList        pulumi.StringInput    `pulumi:"allowedEmailDomainsList"`
	AutoDevopsEnabled              pulumi.BoolInput      `pulumi:"autoDevopsEnabled"`
	AvatarUrl                      pulumi.StringInput    `pulumi:"avatarUrl"`
	CreatedAt                      pulumi.StringInput    `pulumi:"createdAt"`
	DefaultBranchProtection        pulumi.IntInput       `pulumi:"defaultBranchProtection"`
	Description                    pulumi.StringInput    `pulumi:"description"`
	EmailsEnabled                  pulumi.BoolInput      `pulumi:"emailsEnabled"`
	FileTemplateProjectId          pulumi.IntInput       `pulumi:"fileTemplateProjectId"`
	FullName                       pulumi.StringInput    `pulumi:"fullName"`
	FullPath                       pulumi.StringInput    `pulumi:"fullPath"`
	GroupId                        pulumi.IntInput       `pulumi:"groupId"`
	IpRestrictionRanges            pulumi.StringInput    `pulumi:"ipRestrictionRanges"`
	LfsEnabled                     pulumi.BoolInput      `pulumi:"lfsEnabled"`
	MentionsDisabled               pulumi.BoolInput      `pulumi:"mentionsDisabled"`
	Name                           pulumi.StringInput    `pulumi:"name"`
	ParentId                       pulumi.IntInput       `pulumi:"parentId"`
	Path                           pulumi.StringInput    `pulumi:"path"`
	ProjectCreationLevel           pulumi.StringInput    `pulumi:"projectCreationLevel"`
	RequestAccessEnabled           pulumi.BoolInput      `pulumi:"requestAccessEnabled"`
	RequireTwoFactorAuthentication pulumi.BoolInput      `pulumi:"requireTwoFactorAuthentication"`
	ShareWithGroupLock             pulumi.BoolInput      `pulumi:"shareWithGroupLock"`
	SharedRunnersSetting           pulumi.StringInput    `pulumi:"sharedRunnersSetting"`
	Statistics                     pulumi.StringMapInput `pulumi:"statistics"`
	SubgroupCreationLevel          pulumi.StringInput    `pulumi:"subgroupCreationLevel"`
	TwoFactorGracePeriod           pulumi.IntInput       `pulumi:"twoFactorGracePeriod"`
	Visibility                     pulumi.StringInput    `pulumi:"visibility"`
	WebUrl                         pulumi.StringInput    `pulumi:"webUrl"`
	WikiAccessLevel                pulumi.StringInput    `pulumi:"wikiAccessLevel"`
}

func (GetGroupSubgroupsSubgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (i GetGroupSubgroupsSubgroupArgs) ToGetGroupSubgroupsSubgroupOutput() GetGroupSubgroupsSubgroupOutput {
	return i.ToGetGroupSubgroupsSubgroupOutputWithContext(context.Background())
}

func (i GetGroupSubgroupsSubgroupArgs) ToGetGroupSubgroupsSubgroupOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupSubgroupsSubgroupOutput)
}

// GetGroupSubgroupsSubgroupArrayInput is an input type that accepts GetGroupSubgroupsSubgroupArray and GetGroupSubgroupsSubgroupArrayOutput values.
// You can construct a concrete instance of `GetGroupSubgroupsSubgroupArrayInput` via:
//
//	GetGroupSubgroupsSubgroupArray{ GetGroupSubgroupsSubgroupArgs{...} }
type GetGroupSubgroupsSubgroupArrayInput interface {
	pulumi.Input

	ToGetGroupSubgroupsSubgroupArrayOutput() GetGroupSubgroupsSubgroupArrayOutput
	ToGetGroupSubgroupsSubgroupArrayOutputWithContext(context.Context) GetGroupSubgroupsSubgroupArrayOutput
}

type GetGroupSubgroupsSubgroupArray []GetGroupSubgroupsSubgroupInput

func (GetGroupSubgroupsSubgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (i GetGroupSubgroupsSubgroupArray) ToGetGroupSubgroupsSubgroupArrayOutput() GetGroupSubgroupsSubgroupArrayOutput {
	return i.ToGetGroupSubgroupsSubgroupArrayOutputWithContext(context.Background())
}

func (i GetGroupSubgroupsSubgroupArray) ToGetGroupSubgroupsSubgroupArrayOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupSubgroupsSubgroupArrayOutput)
}

type GetGroupSubgroupsSubgroupOutput struct{ *pulumi.OutputState }

func (GetGroupSubgroupsSubgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (o GetGroupSubgroupsSubgroupOutput) ToGetGroupSubgroupsSubgroupOutput() GetGroupSubgroupsSubgroupOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupOutput) ToGetGroupSubgroupsSubgroupOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupOutput) AllowedEmailDomainsList() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.AllowedEmailDomainsList }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) AutoDevopsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.AutoDevopsEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) DefaultBranchProtection() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.DefaultBranchProtection }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) EmailsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.EmailsEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) FileTemplateProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.FileTemplateProjectId }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.FullName }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.FullPath }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) IpRestrictionRanges() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.IpRestrictionRanges }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) LfsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.LfsEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) MentionsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.MentionsDisabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) ParentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.ParentId }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) ProjectCreationLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.ProjectCreationLevel }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) RequestAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.RequestAccessEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) RequireTwoFactorAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.RequireTwoFactorAuthentication }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) ShareWithGroupLock() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.ShareWithGroupLock }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) SharedRunnersSetting() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.SharedRunnersSetting }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Statistics() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) map[string]string { return v.Statistics }).(pulumi.StringMapOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) SubgroupCreationLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.SubgroupCreationLevel }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) TwoFactorGracePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.TwoFactorGracePeriod }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Visibility }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.WebUrl }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) WikiAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.WikiAccessLevel }).(pulumi.StringOutput)
}

type GetGroupSubgroupsSubgroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupSubgroupsSubgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (o GetGroupSubgroupsSubgroupArrayOutput) ToGetGroupSubgroupsSubgroupArrayOutput() GetGroupSubgroupsSubgroupArrayOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupArrayOutput) ToGetGroupSubgroupsSubgroupArrayOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupArrayOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupArrayOutput) Index(i pulumi.IntInput) GetGroupSubgroupsSubgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupSubgroupsSubgroup {
		return vs[0].([]GetGroupSubgroupsSubgroup)[vs[1].(int)]
	}).(GetGroupSubgroupsSubgroupOutput)
}

type GetGroupVariablesVariable struct {
	// The description of the variable.
	Description string `pulumi:"description"`
	// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
	EnvironmentScope string `pulumi:"environmentScope"`
	// The name or id of the group.
	Group string `pulumi:"group"`
	// The name of the variable.
	Key string `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
	Masked bool `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected bool `pulumi:"protected"`
	// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
	Raw bool `pulumi:"raw"`
	// The value of the variable.
	Value string `pulumi:"value"`
	// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
	VariableType string `pulumi:"variableType"`
}

// GetGroupVariablesVariableInput is an input type that accepts GetGroupVariablesVariableArgs and GetGroupVariablesVariableOutput values.
// You can construct a concrete instance of `GetGroupVariablesVariableInput` via:
//
//	GetGroupVariablesVariableArgs{...}
type GetGroupVariablesVariableInput interface {
	pulumi.Input

	ToGetGroupVariablesVariableOutput() GetGroupVariablesVariableOutput
	ToGetGroupVariablesVariableOutputWithContext(context.Context) GetGroupVariablesVariableOutput
}

type GetGroupVariablesVariableArgs struct {
	// The description of the variable.
	Description pulumi.StringInput `pulumi:"description"`
	// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
	EnvironmentScope pulumi.StringInput `pulumi:"environmentScope"`
	// The name or id of the group.
	Group pulumi.StringInput `pulumi:"group"`
	// The name of the variable.
	Key pulumi.StringInput `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
	Masked pulumi.BoolInput `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolInput `pulumi:"protected"`
	// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
	Raw pulumi.BoolInput `pulumi:"raw"`
	// The value of the variable.
	Value pulumi.StringInput `pulumi:"value"`
	// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
	VariableType pulumi.StringInput `pulumi:"variableType"`
}

func (GetGroupVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupVariablesVariable)(nil)).Elem()
}

func (i GetGroupVariablesVariableArgs) ToGetGroupVariablesVariableOutput() GetGroupVariablesVariableOutput {
	return i.ToGetGroupVariablesVariableOutputWithContext(context.Background())
}

func (i GetGroupVariablesVariableArgs) ToGetGroupVariablesVariableOutputWithContext(ctx context.Context) GetGroupVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupVariablesVariableOutput)
}

// GetGroupVariablesVariableArrayInput is an input type that accepts GetGroupVariablesVariableArray and GetGroupVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetGroupVariablesVariableArrayInput` via:
//
//	GetGroupVariablesVariableArray{ GetGroupVariablesVariableArgs{...} }
type GetGroupVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetGroupVariablesVariableArrayOutput() GetGroupVariablesVariableArrayOutput
	ToGetGroupVariablesVariableArrayOutputWithContext(context.Context) GetGroupVariablesVariableArrayOutput
}

type GetGroupVariablesVariableArray []GetGroupVariablesVariableInput

func (GetGroupVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupVariablesVariable)(nil)).Elem()
}

func (i GetGroupVariablesVariableArray) ToGetGroupVariablesVariableArrayOutput() GetGroupVariablesVariableArrayOutput {
	return i.ToGetGroupVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetGroupVariablesVariableArray) ToGetGroupVariablesVariableArrayOutputWithContext(ctx context.Context) GetGroupVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupVariablesVariableArrayOutput)
}

type GetGroupVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetGroupVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupVariablesVariable)(nil)).Elem()
}

func (o GetGroupVariablesVariableOutput) ToGetGroupVariablesVariableOutput() GetGroupVariablesVariableOutput {
	return o
}

func (o GetGroupVariablesVariableOutput) ToGetGroupVariablesVariableOutputWithContext(ctx context.Context) GetGroupVariablesVariableOutput {
	return o
}

// The description of the variable.
func (o GetGroupVariablesVariableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.Description }).(pulumi.StringOutput)
}

// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
func (o GetGroupVariablesVariableOutput) EnvironmentScope() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.EnvironmentScope }).(pulumi.StringOutput)
}

// The name or id of the group.
func (o GetGroupVariablesVariableOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.Group }).(pulumi.StringOutput)
}

// The name of the variable.
func (o GetGroupVariablesVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.Key }).(pulumi.StringOutput)
}

// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
func (o GetGroupVariablesVariableOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) bool { return v.Masked }).(pulumi.BoolOutput)
}

// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
func (o GetGroupVariablesVariableOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) bool { return v.Protected }).(pulumi.BoolOutput)
}

// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
func (o GetGroupVariablesVariableOutput) Raw() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) bool { return v.Raw }).(pulumi.BoolOutput)
}

// The value of the variable.
func (o GetGroupVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
func (o GetGroupVariablesVariableOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.VariableType }).(pulumi.StringOutput)
}

type GetGroupVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetGroupVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupVariablesVariable)(nil)).Elem()
}

func (o GetGroupVariablesVariableArrayOutput) ToGetGroupVariablesVariableArrayOutput() GetGroupVariablesVariableArrayOutput {
	return o
}

func (o GetGroupVariablesVariableArrayOutput) ToGetGroupVariablesVariableArrayOutputWithContext(ctx context.Context) GetGroupVariablesVariableArrayOutput {
	return o
}

func (o GetGroupVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetGroupVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupVariablesVariable {
		return vs[0].([]GetGroupVariablesVariable)[vs[1].(int)]
	}).(GetGroupVariablesVariableOutput)
}

type GetGroupsGroup struct {
	// Whether developers and maintainers can push to the applicable default branch.
	DefaultBranchProtection int `pulumi:"defaultBranchProtection"`
	// The description of the group.
	Description string `pulumi:"description"`
	// The full name of the group.
	FullName string `pulumi:"fullName"`
	// The full path of the group.
	FullPath string `pulumi:"fullPath"`
	// The ID of the group.
	GroupId int `pulumi:"groupId"`
	// Boolean, is LFS enabled for projects in this group.
	LfsEnabled bool `pulumi:"lfsEnabled"`
	// The name of this group.
	Name string `pulumi:"name"`
	// Integer, ID of the parent group.
	ParentId int `pulumi:"parentId"`
	// The path of the group.
	Path string `pulumi:"path"`
	// When enabled, users can not fork projects from this group to external namespaces.
	PreventForkingOutsideGroup bool `pulumi:"preventForkingOutsideGroup"`
	// Boolean, is request for access enabled to the group.
	RequestAccessEnabled bool `pulumi:"requestAccessEnabled"`
	// The group level registration token to use during runner setup.
	RunnersToken string `pulumi:"runnersToken"`
	// Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabledAndOverridable`, `disabledAndUnoverridable`, `disabledWithOverride`.
	SharedRunnersSetting string `pulumi:"sharedRunnersSetting"`
	// Visibility level of the group. Possible values are `private`, `internal`, `public`.
	VisibilityLevel string `pulumi:"visibilityLevel"`
	// Web URL of the group.
	WebUrl string `pulumi:"webUrl"`
	// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel string `pulumi:"wikiAccessLevel"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//	GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	// Whether developers and maintainers can push to the applicable default branch.
	DefaultBranchProtection pulumi.IntInput `pulumi:"defaultBranchProtection"`
	// The description of the group.
	Description pulumi.StringInput `pulumi:"description"`
	// The full name of the group.
	FullName pulumi.StringInput `pulumi:"fullName"`
	// The full path of the group.
	FullPath pulumi.StringInput `pulumi:"fullPath"`
	// The ID of the group.
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// Boolean, is LFS enabled for projects in this group.
	LfsEnabled pulumi.BoolInput `pulumi:"lfsEnabled"`
	// The name of this group.
	Name pulumi.StringInput `pulumi:"name"`
	// Integer, ID of the parent group.
	ParentId pulumi.IntInput `pulumi:"parentId"`
	// The path of the group.
	Path pulumi.StringInput `pulumi:"path"`
	// When enabled, users can not fork projects from this group to external namespaces.
	PreventForkingOutsideGroup pulumi.BoolInput `pulumi:"preventForkingOutsideGroup"`
	// Boolean, is request for access enabled to the group.
	RequestAccessEnabled pulumi.BoolInput `pulumi:"requestAccessEnabled"`
	// The group level registration token to use during runner setup.
	RunnersToken pulumi.StringInput `pulumi:"runnersToken"`
	// Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabledAndOverridable`, `disabledAndUnoverridable`, `disabledWithOverride`.
	SharedRunnersSetting pulumi.StringInput `pulumi:"sharedRunnersSetting"`
	// Visibility level of the group. Possible values are `private`, `internal`, `public`.
	VisibilityLevel pulumi.StringInput `pulumi:"visibilityLevel"`
	// Web URL of the group.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
	// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringInput `pulumi:"wikiAccessLevel"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//	GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

// Whether developers and maintainers can push to the applicable default branch.
func (o GetGroupsGroupOutput) DefaultBranchProtection() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.DefaultBranchProtection }).(pulumi.IntOutput)
}

// The description of the group.
func (o GetGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The full name of the group.
func (o GetGroupsGroupOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.FullName }).(pulumi.StringOutput)
}

// The full path of the group.
func (o GetGroupsGroupOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.FullPath }).(pulumi.StringOutput)
}

// The ID of the group.
func (o GetGroupsGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

// Boolean, is LFS enabled for projects in this group.
func (o GetGroupsGroupOutput) LfsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.LfsEnabled }).(pulumi.BoolOutput)
}

// The name of this group.
func (o GetGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Integer, ID of the parent group.
func (o GetGroupsGroupOutput) ParentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.ParentId }).(pulumi.IntOutput)
}

// The path of the group.
func (o GetGroupsGroupOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Path }).(pulumi.StringOutput)
}

// When enabled, users can not fork projects from this group to external namespaces.
func (o GetGroupsGroupOutput) PreventForkingOutsideGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.PreventForkingOutsideGroup }).(pulumi.BoolOutput)
}

// Boolean, is request for access enabled to the group.
func (o GetGroupsGroupOutput) RequestAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.RequestAccessEnabled }).(pulumi.BoolOutput)
}

// The group level registration token to use during runner setup.
func (o GetGroupsGroupOutput) RunnersToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.RunnersToken }).(pulumi.StringOutput)
}

// Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabledAndOverridable`, `disabledAndUnoverridable`, `disabledWithOverride`.
func (o GetGroupsGroupOutput) SharedRunnersSetting() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.SharedRunnersSetting }).(pulumi.StringOutput)
}

// Visibility level of the group. Possible values are `private`, `internal`, `public`.
func (o GetGroupsGroupOutput) VisibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.VisibilityLevel }).(pulumi.StringOutput)
}

// Web URL of the group.
func (o GetGroupsGroupOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.WebUrl }).(pulumi.StringOutput)
}

// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
func (o GetGroupsGroupOutput) WikiAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.WikiAccessLevel }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetInstanceDeployKeysDeployKey struct {
	// The creation date of the deploy key. In RFC3339 format.
	CreatedAt string `pulumi:"createdAt"`
	// The fingerprint of the deploy key.
	Fingerprint string `pulumi:"fingerprint"`
	// The ID of the deploy key.
	Id int `pulumi:"id"`
	// The deploy key.
	Key string `pulumi:"key"`
	// The list of projects that the deploy key has write access to.
	ProjectsWithWriteAccesses []GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess `pulumi:"projectsWithWriteAccesses"`
	// The title of the deploy key.
	Title string `pulumi:"title"`
}

// GetInstanceDeployKeysDeployKeyInput is an input type that accepts GetInstanceDeployKeysDeployKeyArgs and GetInstanceDeployKeysDeployKeyOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyInput` via:
//
//	GetInstanceDeployKeysDeployKeyArgs{...}
type GetInstanceDeployKeysDeployKeyInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyOutput() GetInstanceDeployKeysDeployKeyOutput
	ToGetInstanceDeployKeysDeployKeyOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyOutput
}

type GetInstanceDeployKeysDeployKeyArgs struct {
	// The creation date of the deploy key. In RFC3339 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The fingerprint of the deploy key.
	Fingerprint pulumi.StringInput `pulumi:"fingerprint"`
	// The ID of the deploy key.
	Id pulumi.IntInput `pulumi:"id"`
	// The deploy key.
	Key pulumi.StringInput `pulumi:"key"`
	// The list of projects that the deploy key has write access to.
	ProjectsWithWriteAccesses GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput `pulumi:"projectsWithWriteAccesses"`
	// The title of the deploy key.
	Title pulumi.StringInput `pulumi:"title"`
}

func (GetInstanceDeployKeysDeployKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyArgs) ToGetInstanceDeployKeysDeployKeyOutput() GetInstanceDeployKeysDeployKeyOutput {
	return i.ToGetInstanceDeployKeysDeployKeyOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyArgs) ToGetInstanceDeployKeysDeployKeyOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyOutput)
}

// GetInstanceDeployKeysDeployKeyArrayInput is an input type that accepts GetInstanceDeployKeysDeployKeyArray and GetInstanceDeployKeysDeployKeyArrayOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyArrayInput` via:
//
//	GetInstanceDeployKeysDeployKeyArray{ GetInstanceDeployKeysDeployKeyArgs{...} }
type GetInstanceDeployKeysDeployKeyArrayInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyArrayOutput() GetInstanceDeployKeysDeployKeyArrayOutput
	ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyArrayOutput
}

type GetInstanceDeployKeysDeployKeyArray []GetInstanceDeployKeysDeployKeyInput

func (GetInstanceDeployKeysDeployKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyArray) ToGetInstanceDeployKeysDeployKeyArrayOutput() GetInstanceDeployKeysDeployKeyArrayOutput {
	return i.ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyArray) ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyArrayOutput)
}

type GetInstanceDeployKeysDeployKeyOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyOutput) ToGetInstanceDeployKeysDeployKeyOutput() GetInstanceDeployKeysDeployKeyOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyOutput) ToGetInstanceDeployKeysDeployKeyOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyOutput {
	return o
}

// The creation date of the deploy key. In RFC3339 format.
func (o GetInstanceDeployKeysDeployKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The fingerprint of the deploy key.
func (o GetInstanceDeployKeysDeployKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// The ID of the deploy key.
func (o GetInstanceDeployKeysDeployKeyOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) int { return v.Id }).(pulumi.IntOutput)
}

// The deploy key.
func (o GetInstanceDeployKeysDeployKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.Key }).(pulumi.StringOutput)
}

// The list of projects that the deploy key has write access to.
func (o GetInstanceDeployKeysDeployKeyOutput) ProjectsWithWriteAccesses() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) []GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess {
		return v.ProjectsWithWriteAccesses
	}).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput)
}

// The title of the deploy key.
func (o GetInstanceDeployKeysDeployKeyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.Title }).(pulumi.StringOutput)
}

type GetInstanceDeployKeysDeployKeyArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyArrayOutput) ToGetInstanceDeployKeysDeployKeyArrayOutput() GetInstanceDeployKeysDeployKeyArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyArrayOutput) ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyArrayOutput) Index(i pulumi.IntInput) GetInstanceDeployKeysDeployKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceDeployKeysDeployKey {
		return vs[0].([]GetInstanceDeployKeysDeployKey)[vs[1].(int)]
	}).(GetInstanceDeployKeysDeployKeyOutput)
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess struct {
	// The creation date of the project. In RFC3339 format.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the project.
	Description string `pulumi:"description"`
	// The ID of the project.
	Id int `pulumi:"id"`
	// The name of the project.
	Name string `pulumi:"name"`
	// The name of the project with namespace.
	NameWithNamespace string `pulumi:"nameWithNamespace"`
	// The path of the project.
	Path string `pulumi:"path"`
	// The path of the project with namespace.
	PathWithNamespace string `pulumi:"pathWithNamespace"`
}

// GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput is an input type that accepts GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs and GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput` via:
//
//	GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs{...}
type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput
	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs struct {
	// The creation date of the project. In RFC3339 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the project.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the project.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the project.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the project with namespace.
	NameWithNamespace pulumi.StringInput `pulumi:"nameWithNamespace"`
	// The path of the project.
	Path pulumi.StringInput `pulumi:"path"`
	// The path of the project with namespace.
	PathWithNamespace pulumi.StringInput `pulumi:"pathWithNamespace"`
}

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return i.ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput)
}

// GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput is an input type that accepts GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray and GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput` via:
//
//	GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray{ GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs{...} }
type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput
	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray []GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return i.ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput)
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return o
}

// The creation date of the project. In RFC3339 format.
func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the project.
func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the project.
func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the project.
func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the project with namespace.
func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

// The path of the project.
func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.Path }).(pulumi.StringOutput)
}

// The path of the project with namespace.
func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) Index(i pulumi.IntInput) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess {
		return vs[0].([]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)[vs[1].(int)]
	}).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput)
}

type GetInstanceVariablesVariable struct {
	// The description of the variable. Maximum of 255 characters.
	Description string `pulumi:"description"`
	// The name of the variable.
	Key string `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
	Masked bool `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected bool `pulumi:"protected"`
	// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
	Raw bool `pulumi:"raw"`
	// The value of the variable.
	Value string `pulumi:"value"`
	// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
	VariableType string `pulumi:"variableType"`
}

// GetInstanceVariablesVariableInput is an input type that accepts GetInstanceVariablesVariableArgs and GetInstanceVariablesVariableOutput values.
// You can construct a concrete instance of `GetInstanceVariablesVariableInput` via:
//
//	GetInstanceVariablesVariableArgs{...}
type GetInstanceVariablesVariableInput interface {
	pulumi.Input

	ToGetInstanceVariablesVariableOutput() GetInstanceVariablesVariableOutput
	ToGetInstanceVariablesVariableOutputWithContext(context.Context) GetInstanceVariablesVariableOutput
}

type GetInstanceVariablesVariableArgs struct {
	// The description of the variable. Maximum of 255 characters.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the variable.
	Key pulumi.StringInput `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
	Masked pulumi.BoolInput `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolInput `pulumi:"protected"`
	// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
	Raw pulumi.BoolInput `pulumi:"raw"`
	// The value of the variable.
	Value pulumi.StringInput `pulumi:"value"`
	// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
	VariableType pulumi.StringInput `pulumi:"variableType"`
}

func (GetInstanceVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVariablesVariable)(nil)).Elem()
}

func (i GetInstanceVariablesVariableArgs) ToGetInstanceVariablesVariableOutput() GetInstanceVariablesVariableOutput {
	return i.ToGetInstanceVariablesVariableOutputWithContext(context.Background())
}

func (i GetInstanceVariablesVariableArgs) ToGetInstanceVariablesVariableOutputWithContext(ctx context.Context) GetInstanceVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVariablesVariableOutput)
}

// GetInstanceVariablesVariableArrayInput is an input type that accepts GetInstanceVariablesVariableArray and GetInstanceVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetInstanceVariablesVariableArrayInput` via:
//
//	GetInstanceVariablesVariableArray{ GetInstanceVariablesVariableArgs{...} }
type GetInstanceVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetInstanceVariablesVariableArrayOutput() GetInstanceVariablesVariableArrayOutput
	ToGetInstanceVariablesVariableArrayOutputWithContext(context.Context) GetInstanceVariablesVariableArrayOutput
}

type GetInstanceVariablesVariableArray []GetInstanceVariablesVariableInput

func (GetInstanceVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVariablesVariable)(nil)).Elem()
}

func (i GetInstanceVariablesVariableArray) ToGetInstanceVariablesVariableArrayOutput() GetInstanceVariablesVariableArrayOutput {
	return i.ToGetInstanceVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetInstanceVariablesVariableArray) ToGetInstanceVariablesVariableArrayOutputWithContext(ctx context.Context) GetInstanceVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVariablesVariableArrayOutput)
}

type GetInstanceVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetInstanceVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVariablesVariable)(nil)).Elem()
}

func (o GetInstanceVariablesVariableOutput) ToGetInstanceVariablesVariableOutput() GetInstanceVariablesVariableOutput {
	return o
}

func (o GetInstanceVariablesVariableOutput) ToGetInstanceVariablesVariableOutputWithContext(ctx context.Context) GetInstanceVariablesVariableOutput {
	return o
}

// The description of the variable. Maximum of 255 characters.
func (o GetInstanceVariablesVariableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the variable.
func (o GetInstanceVariablesVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) string { return v.Key }).(pulumi.StringOutput)
}

// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
func (o GetInstanceVariablesVariableOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) bool { return v.Masked }).(pulumi.BoolOutput)
}

// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
func (o GetInstanceVariablesVariableOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) bool { return v.Protected }).(pulumi.BoolOutput)
}

// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
func (o GetInstanceVariablesVariableOutput) Raw() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) bool { return v.Raw }).(pulumi.BoolOutput)
}

// The value of the variable.
func (o GetInstanceVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
func (o GetInstanceVariablesVariableOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) string { return v.VariableType }).(pulumi.StringOutput)
}

type GetInstanceVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVariablesVariable)(nil)).Elem()
}

func (o GetInstanceVariablesVariableArrayOutput) ToGetInstanceVariablesVariableArrayOutput() GetInstanceVariablesVariableArrayOutput {
	return o
}

func (o GetInstanceVariablesVariableArrayOutput) ToGetInstanceVariablesVariableArrayOutputWithContext(ctx context.Context) GetInstanceVariablesVariableArrayOutput {
	return o
}

func (o GetInstanceVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetInstanceVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceVariablesVariable {
		return vs[0].([]GetInstanceVariablesVariable)[vs[1].(int)]
	}).(GetInstanceVariablesVariableOutput)
}

type GetMetadataKas struct {
	// Indicates whether KAS is enabled.
	Enabled bool `pulumi:"enabled"`
	// URL used by the Kubernetes tooling to communicate with the KAS Kubernetes API proxy. It’s null if kas.enabled is false.
	ExternalK8sProxyUrl string `pulumi:"externalK8sProxyUrl"`
	// URL used by the agents to communicate with KAS. It’s null if kas.enabled is false.
	ExternalUrl string `pulumi:"externalUrl"`
	// Version of KAS. It’s null if kas.enabled is false.
	Version string `pulumi:"version"`
}

// GetMetadataKasInput is an input type that accepts GetMetadataKasArgs and GetMetadataKasOutput values.
// You can construct a concrete instance of `GetMetadataKasInput` via:
//
//	GetMetadataKasArgs{...}
type GetMetadataKasInput interface {
	pulumi.Input

	ToGetMetadataKasOutput() GetMetadataKasOutput
	ToGetMetadataKasOutputWithContext(context.Context) GetMetadataKasOutput
}

type GetMetadataKasArgs struct {
	// Indicates whether KAS is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// URL used by the Kubernetes tooling to communicate with the KAS Kubernetes API proxy. It’s null if kas.enabled is false.
	ExternalK8sProxyUrl pulumi.StringInput `pulumi:"externalK8sProxyUrl"`
	// URL used by the agents to communicate with KAS. It’s null if kas.enabled is false.
	ExternalUrl pulumi.StringInput `pulumi:"externalUrl"`
	// Version of KAS. It’s null if kas.enabled is false.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetMetadataKasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataKas)(nil)).Elem()
}

func (i GetMetadataKasArgs) ToGetMetadataKasOutput() GetMetadataKasOutput {
	return i.ToGetMetadataKasOutputWithContext(context.Background())
}

func (i GetMetadataKasArgs) ToGetMetadataKasOutputWithContext(ctx context.Context) GetMetadataKasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetadataKasOutput)
}

type GetMetadataKasOutput struct{ *pulumi.OutputState }

func (GetMetadataKasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataKas)(nil)).Elem()
}

func (o GetMetadataKasOutput) ToGetMetadataKasOutput() GetMetadataKasOutput {
	return o
}

func (o GetMetadataKasOutput) ToGetMetadataKasOutputWithContext(ctx context.Context) GetMetadataKasOutput {
	return o
}

// Indicates whether KAS is enabled.
func (o GetMetadataKasOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetadataKas) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// URL used by the Kubernetes tooling to communicate with the KAS Kubernetes API proxy. It’s null if kas.enabled is false.
func (o GetMetadataKasOutput) ExternalK8sProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataKas) string { return v.ExternalK8sProxyUrl }).(pulumi.StringOutput)
}

// URL used by the agents to communicate with KAS. It’s null if kas.enabled is false.
func (o GetMetadataKasOutput) ExternalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataKas) string { return v.ExternalUrl }).(pulumi.StringOutput)
}

// Version of KAS. It’s null if kas.enabled is false.
func (o GetMetadataKasOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataKas) string { return v.Version }).(pulumi.StringOutput)
}

type GetPipelineScheduleLastPipeline struct {
	// The pipeline ID.
	Id int `pulumi:"id"`
	// The ref of the pipeline.
	Ref string `pulumi:"ref"`
	// The SHA of the pipeline.
	Sha string `pulumi:"sha"`
	// The status of pipelines, one of: created, waiting*for*resource, preparing, pending, running, success, failed, canceled, skipped, manual, scheduled.
	Status string `pulumi:"status"`
}

// GetPipelineScheduleLastPipelineInput is an input type that accepts GetPipelineScheduleLastPipelineArgs and GetPipelineScheduleLastPipelineOutput values.
// You can construct a concrete instance of `GetPipelineScheduleLastPipelineInput` via:
//
//	GetPipelineScheduleLastPipelineArgs{...}
type GetPipelineScheduleLastPipelineInput interface {
	pulumi.Input

	ToGetPipelineScheduleLastPipelineOutput() GetPipelineScheduleLastPipelineOutput
	ToGetPipelineScheduleLastPipelineOutputWithContext(context.Context) GetPipelineScheduleLastPipelineOutput
}

type GetPipelineScheduleLastPipelineArgs struct {
	// The pipeline ID.
	Id pulumi.IntInput `pulumi:"id"`
	// The ref of the pipeline.
	Ref pulumi.StringInput `pulumi:"ref"`
	// The SHA of the pipeline.
	Sha pulumi.StringInput `pulumi:"sha"`
	// The status of pipelines, one of: created, waiting*for*resource, preparing, pending, running, success, failed, canceled, skipped, manual, scheduled.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetPipelineScheduleLastPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineScheduleLastPipeline)(nil)).Elem()
}

func (i GetPipelineScheduleLastPipelineArgs) ToGetPipelineScheduleLastPipelineOutput() GetPipelineScheduleLastPipelineOutput {
	return i.ToGetPipelineScheduleLastPipelineOutputWithContext(context.Background())
}

func (i GetPipelineScheduleLastPipelineArgs) ToGetPipelineScheduleLastPipelineOutputWithContext(ctx context.Context) GetPipelineScheduleLastPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipelineScheduleLastPipelineOutput)
}

type GetPipelineScheduleLastPipelineOutput struct{ *pulumi.OutputState }

func (GetPipelineScheduleLastPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineScheduleLastPipeline)(nil)).Elem()
}

func (o GetPipelineScheduleLastPipelineOutput) ToGetPipelineScheduleLastPipelineOutput() GetPipelineScheduleLastPipelineOutput {
	return o
}

func (o GetPipelineScheduleLastPipelineOutput) ToGetPipelineScheduleLastPipelineOutputWithContext(ctx context.Context) GetPipelineScheduleLastPipelineOutput {
	return o
}

// The pipeline ID.
func (o GetPipelineScheduleLastPipelineOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetPipelineScheduleLastPipeline) int { return v.Id }).(pulumi.IntOutput)
}

// The ref of the pipeline.
func (o GetPipelineScheduleLastPipelineOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleLastPipeline) string { return v.Ref }).(pulumi.StringOutput)
}

// The SHA of the pipeline.
func (o GetPipelineScheduleLastPipelineOutput) Sha() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleLastPipeline) string { return v.Sha }).(pulumi.StringOutput)
}

// The status of pipelines, one of: created, waiting*for*resource, preparing, pending, running, success, failed, canceled, skipped, manual, scheduled.
func (o GetPipelineScheduleLastPipelineOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleLastPipeline) string { return v.Status }).(pulumi.StringOutput)
}

type GetPipelineScheduleOwner struct {
	// Image URL for the user's avatar.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The user ID.
	Id int `pulumi:"id"`
	// Name.
	Name string `pulumi:"name"`
	// User's state, one of: active, blocked.
	State string `pulumi:"state"`
	// Username.
	Username string `pulumi:"username"`
	// URL to the user's profile.
	WebUrl string `pulumi:"webUrl"`
}

// GetPipelineScheduleOwnerInput is an input type that accepts GetPipelineScheduleOwnerArgs and GetPipelineScheduleOwnerOutput values.
// You can construct a concrete instance of `GetPipelineScheduleOwnerInput` via:
//
//	GetPipelineScheduleOwnerArgs{...}
type GetPipelineScheduleOwnerInput interface {
	pulumi.Input

	ToGetPipelineScheduleOwnerOutput() GetPipelineScheduleOwnerOutput
	ToGetPipelineScheduleOwnerOutputWithContext(context.Context) GetPipelineScheduleOwnerOutput
}

type GetPipelineScheduleOwnerArgs struct {
	// Image URL for the user's avatar.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The user ID.
	Id pulumi.IntInput `pulumi:"id"`
	// Name.
	Name pulumi.StringInput `pulumi:"name"`
	// User's state, one of: active, blocked.
	State pulumi.StringInput `pulumi:"state"`
	// Username.
	Username pulumi.StringInput `pulumi:"username"`
	// URL to the user's profile.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetPipelineScheduleOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineScheduleOwner)(nil)).Elem()
}

func (i GetPipelineScheduleOwnerArgs) ToGetPipelineScheduleOwnerOutput() GetPipelineScheduleOwnerOutput {
	return i.ToGetPipelineScheduleOwnerOutputWithContext(context.Background())
}

func (i GetPipelineScheduleOwnerArgs) ToGetPipelineScheduleOwnerOutputWithContext(ctx context.Context) GetPipelineScheduleOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipelineScheduleOwnerOutput)
}

type GetPipelineScheduleOwnerOutput struct{ *pulumi.OutputState }

func (GetPipelineScheduleOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineScheduleOwner)(nil)).Elem()
}

func (o GetPipelineScheduleOwnerOutput) ToGetPipelineScheduleOwnerOutput() GetPipelineScheduleOwnerOutput {
	return o
}

func (o GetPipelineScheduleOwnerOutput) ToGetPipelineScheduleOwnerOutputWithContext(ctx context.Context) GetPipelineScheduleOwnerOutput {
	return o
}

// Image URL for the user's avatar.
func (o GetPipelineScheduleOwnerOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleOwner) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The user ID.
func (o GetPipelineScheduleOwnerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetPipelineScheduleOwner) int { return v.Id }).(pulumi.IntOutput)
}

// Name.
func (o GetPipelineScheduleOwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleOwner) string { return v.Name }).(pulumi.StringOutput)
}

// User's state, one of: active, blocked.
func (o GetPipelineScheduleOwnerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleOwner) string { return v.State }).(pulumi.StringOutput)
}

// Username.
func (o GetPipelineScheduleOwnerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleOwner) string { return v.Username }).(pulumi.StringOutput)
}

// URL to the user's profile.
func (o GetPipelineScheduleOwnerOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleOwner) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetPipelineScheduleVariableType struct {
	// The key of a variable.
	Key string `pulumi:"key"`
	// The value of a variable.
	Value string `pulumi:"value"`
	// The type of a variable, one of: envVar and file.
	VariableType string `pulumi:"variableType"`
}

// GetPipelineScheduleVariableTypeInput is an input type that accepts GetPipelineScheduleVariableTypeArgs and GetPipelineScheduleVariableTypeOutput values.
// You can construct a concrete instance of `GetPipelineScheduleVariableTypeInput` via:
//
//	GetPipelineScheduleVariableTypeArgs{...}
type GetPipelineScheduleVariableTypeInput interface {
	pulumi.Input

	ToGetPipelineScheduleVariableTypeOutput() GetPipelineScheduleVariableTypeOutput
	ToGetPipelineScheduleVariableTypeOutputWithContext(context.Context) GetPipelineScheduleVariableTypeOutput
}

type GetPipelineScheduleVariableTypeArgs struct {
	// The key of a variable.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of a variable.
	Value pulumi.StringInput `pulumi:"value"`
	// The type of a variable, one of: envVar and file.
	VariableType pulumi.StringInput `pulumi:"variableType"`
}

func (GetPipelineScheduleVariableTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineScheduleVariableType)(nil)).Elem()
}

func (i GetPipelineScheduleVariableTypeArgs) ToGetPipelineScheduleVariableTypeOutput() GetPipelineScheduleVariableTypeOutput {
	return i.ToGetPipelineScheduleVariableTypeOutputWithContext(context.Background())
}

func (i GetPipelineScheduleVariableTypeArgs) ToGetPipelineScheduleVariableTypeOutputWithContext(ctx context.Context) GetPipelineScheduleVariableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipelineScheduleVariableTypeOutput)
}

// GetPipelineScheduleVariableTypeArrayInput is an input type that accepts GetPipelineScheduleVariableTypeArray and GetPipelineScheduleVariableTypeArrayOutput values.
// You can construct a concrete instance of `GetPipelineScheduleVariableTypeArrayInput` via:
//
//	GetPipelineScheduleVariableTypeArray{ GetPipelineScheduleVariableTypeArgs{...} }
type GetPipelineScheduleVariableTypeArrayInput interface {
	pulumi.Input

	ToGetPipelineScheduleVariableTypeArrayOutput() GetPipelineScheduleVariableTypeArrayOutput
	ToGetPipelineScheduleVariableTypeArrayOutputWithContext(context.Context) GetPipelineScheduleVariableTypeArrayOutput
}

type GetPipelineScheduleVariableTypeArray []GetPipelineScheduleVariableTypeInput

func (GetPipelineScheduleVariableTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipelineScheduleVariableType)(nil)).Elem()
}

func (i GetPipelineScheduleVariableTypeArray) ToGetPipelineScheduleVariableTypeArrayOutput() GetPipelineScheduleVariableTypeArrayOutput {
	return i.ToGetPipelineScheduleVariableTypeArrayOutputWithContext(context.Background())
}

func (i GetPipelineScheduleVariableTypeArray) ToGetPipelineScheduleVariableTypeArrayOutputWithContext(ctx context.Context) GetPipelineScheduleVariableTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipelineScheduleVariableTypeArrayOutput)
}

type GetPipelineScheduleVariableTypeOutput struct{ *pulumi.OutputState }

func (GetPipelineScheduleVariableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineScheduleVariableType)(nil)).Elem()
}

func (o GetPipelineScheduleVariableTypeOutput) ToGetPipelineScheduleVariableTypeOutput() GetPipelineScheduleVariableTypeOutput {
	return o
}

func (o GetPipelineScheduleVariableTypeOutput) ToGetPipelineScheduleVariableTypeOutputWithContext(ctx context.Context) GetPipelineScheduleVariableTypeOutput {
	return o
}

// The key of a variable.
func (o GetPipelineScheduleVariableTypeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleVariableType) string { return v.Key }).(pulumi.StringOutput)
}

// The value of a variable.
func (o GetPipelineScheduleVariableTypeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleVariableType) string { return v.Value }).(pulumi.StringOutput)
}

// The type of a variable, one of: envVar and file.
func (o GetPipelineScheduleVariableTypeOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineScheduleVariableType) string { return v.VariableType }).(pulumi.StringOutput)
}

type GetPipelineScheduleVariableTypeArrayOutput struct{ *pulumi.OutputState }

func (GetPipelineScheduleVariableTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipelineScheduleVariableType)(nil)).Elem()
}

func (o GetPipelineScheduleVariableTypeArrayOutput) ToGetPipelineScheduleVariableTypeArrayOutput() GetPipelineScheduleVariableTypeArrayOutput {
	return o
}

func (o GetPipelineScheduleVariableTypeArrayOutput) ToGetPipelineScheduleVariableTypeArrayOutputWithContext(ctx context.Context) GetPipelineScheduleVariableTypeArrayOutput {
	return o
}

func (o GetPipelineScheduleVariableTypeArrayOutput) Index(i pulumi.IntInput) GetPipelineScheduleVariableTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPipelineScheduleVariableType {
		return vs[0].([]GetPipelineScheduleVariableType)[vs[1].(int)]
	}).(GetPipelineScheduleVariableTypeOutput)
}

type GetPipelineSchedulesPipelineSchedule struct {
	// The activation status of pipeline schedule.
	Active bool `pulumi:"active"`
	// The datetime of when the schedule was created.
	CreatedAt string `pulumi:"createdAt"`
	// The cron (e.g. `0 1 * * *`).
	Cron string `pulumi:"cron"`
	// The timezone.
	CronTimezone string `pulumi:"cronTimezone"`
	// The description of the pipeline schedule.
	Description string `pulumi:"description"`
	// The pipeline schedule id.
	Id int `pulumi:"id"`
	// The datetime of when the schedule will next run.
	NextRunAt string `pulumi:"nextRunAt"`
	// The details of the pipeline schedule owner.
	Owner GetPipelineSchedulesPipelineScheduleOwner `pulumi:"owner"`
	// The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
	Ref string `pulumi:"ref"`
	// The datetime of when the schedule was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetPipelineSchedulesPipelineScheduleInput is an input type that accepts GetPipelineSchedulesPipelineScheduleArgs and GetPipelineSchedulesPipelineScheduleOutput values.
// You can construct a concrete instance of `GetPipelineSchedulesPipelineScheduleInput` via:
//
//	GetPipelineSchedulesPipelineScheduleArgs{...}
type GetPipelineSchedulesPipelineScheduleInput interface {
	pulumi.Input

	ToGetPipelineSchedulesPipelineScheduleOutput() GetPipelineSchedulesPipelineScheduleOutput
	ToGetPipelineSchedulesPipelineScheduleOutputWithContext(context.Context) GetPipelineSchedulesPipelineScheduleOutput
}

type GetPipelineSchedulesPipelineScheduleArgs struct {
	// The activation status of pipeline schedule.
	Active pulumi.BoolInput `pulumi:"active"`
	// The datetime of when the schedule was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The cron (e.g. `0 1 * * *`).
	Cron pulumi.StringInput `pulumi:"cron"`
	// The timezone.
	CronTimezone pulumi.StringInput `pulumi:"cronTimezone"`
	// The description of the pipeline schedule.
	Description pulumi.StringInput `pulumi:"description"`
	// The pipeline schedule id.
	Id pulumi.IntInput `pulumi:"id"`
	// The datetime of when the schedule will next run.
	NextRunAt pulumi.StringInput `pulumi:"nextRunAt"`
	// The details of the pipeline schedule owner.
	Owner GetPipelineSchedulesPipelineScheduleOwnerInput `pulumi:"owner"`
	// The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
	Ref pulumi.StringInput `pulumi:"ref"`
	// The datetime of when the schedule was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetPipelineSchedulesPipelineScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineSchedulesPipelineSchedule)(nil)).Elem()
}

func (i GetPipelineSchedulesPipelineScheduleArgs) ToGetPipelineSchedulesPipelineScheduleOutput() GetPipelineSchedulesPipelineScheduleOutput {
	return i.ToGetPipelineSchedulesPipelineScheduleOutputWithContext(context.Background())
}

func (i GetPipelineSchedulesPipelineScheduleArgs) ToGetPipelineSchedulesPipelineScheduleOutputWithContext(ctx context.Context) GetPipelineSchedulesPipelineScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipelineSchedulesPipelineScheduleOutput)
}

// GetPipelineSchedulesPipelineScheduleArrayInput is an input type that accepts GetPipelineSchedulesPipelineScheduleArray and GetPipelineSchedulesPipelineScheduleArrayOutput values.
// You can construct a concrete instance of `GetPipelineSchedulesPipelineScheduleArrayInput` via:
//
//	GetPipelineSchedulesPipelineScheduleArray{ GetPipelineSchedulesPipelineScheduleArgs{...} }
type GetPipelineSchedulesPipelineScheduleArrayInput interface {
	pulumi.Input

	ToGetPipelineSchedulesPipelineScheduleArrayOutput() GetPipelineSchedulesPipelineScheduleArrayOutput
	ToGetPipelineSchedulesPipelineScheduleArrayOutputWithContext(context.Context) GetPipelineSchedulesPipelineScheduleArrayOutput
}

type GetPipelineSchedulesPipelineScheduleArray []GetPipelineSchedulesPipelineScheduleInput

func (GetPipelineSchedulesPipelineScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipelineSchedulesPipelineSchedule)(nil)).Elem()
}

func (i GetPipelineSchedulesPipelineScheduleArray) ToGetPipelineSchedulesPipelineScheduleArrayOutput() GetPipelineSchedulesPipelineScheduleArrayOutput {
	return i.ToGetPipelineSchedulesPipelineScheduleArrayOutputWithContext(context.Background())
}

func (i GetPipelineSchedulesPipelineScheduleArray) ToGetPipelineSchedulesPipelineScheduleArrayOutputWithContext(ctx context.Context) GetPipelineSchedulesPipelineScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipelineSchedulesPipelineScheduleArrayOutput)
}

type GetPipelineSchedulesPipelineScheduleOutput struct{ *pulumi.OutputState }

func (GetPipelineSchedulesPipelineScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineSchedulesPipelineSchedule)(nil)).Elem()
}

func (o GetPipelineSchedulesPipelineScheduleOutput) ToGetPipelineSchedulesPipelineScheduleOutput() GetPipelineSchedulesPipelineScheduleOutput {
	return o
}

func (o GetPipelineSchedulesPipelineScheduleOutput) ToGetPipelineSchedulesPipelineScheduleOutputWithContext(ctx context.Context) GetPipelineSchedulesPipelineScheduleOutput {
	return o
}

// The activation status of pipeline schedule.
func (o GetPipelineSchedulesPipelineScheduleOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) bool { return v.Active }).(pulumi.BoolOutput)
}

// The datetime of when the schedule was created.
func (o GetPipelineSchedulesPipelineScheduleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The cron (e.g. `0 1 * * *`).
func (o GetPipelineSchedulesPipelineScheduleOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) string { return v.Cron }).(pulumi.StringOutput)
}

// The timezone.
func (o GetPipelineSchedulesPipelineScheduleOutput) CronTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) string { return v.CronTimezone }).(pulumi.StringOutput)
}

// The description of the pipeline schedule.
func (o GetPipelineSchedulesPipelineScheduleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) string { return v.Description }).(pulumi.StringOutput)
}

// The pipeline schedule id.
func (o GetPipelineSchedulesPipelineScheduleOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) int { return v.Id }).(pulumi.IntOutput)
}

// The datetime of when the schedule will next run.
func (o GetPipelineSchedulesPipelineScheduleOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) string { return v.NextRunAt }).(pulumi.StringOutput)
}

// The details of the pipeline schedule owner.
func (o GetPipelineSchedulesPipelineScheduleOutput) Owner() GetPipelineSchedulesPipelineScheduleOwnerOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) GetPipelineSchedulesPipelineScheduleOwner { return v.Owner }).(GetPipelineSchedulesPipelineScheduleOwnerOutput)
}

// The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
func (o GetPipelineSchedulesPipelineScheduleOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) string { return v.Ref }).(pulumi.StringOutput)
}

// The datetime of when the schedule was last updated.
func (o GetPipelineSchedulesPipelineScheduleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineSchedule) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetPipelineSchedulesPipelineScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetPipelineSchedulesPipelineScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipelineSchedulesPipelineSchedule)(nil)).Elem()
}

func (o GetPipelineSchedulesPipelineScheduleArrayOutput) ToGetPipelineSchedulesPipelineScheduleArrayOutput() GetPipelineSchedulesPipelineScheduleArrayOutput {
	return o
}

func (o GetPipelineSchedulesPipelineScheduleArrayOutput) ToGetPipelineSchedulesPipelineScheduleArrayOutputWithContext(ctx context.Context) GetPipelineSchedulesPipelineScheduleArrayOutput {
	return o
}

func (o GetPipelineSchedulesPipelineScheduleArrayOutput) Index(i pulumi.IntInput) GetPipelineSchedulesPipelineScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPipelineSchedulesPipelineSchedule {
		return vs[0].([]GetPipelineSchedulesPipelineSchedule)[vs[1].(int)]
	}).(GetPipelineSchedulesPipelineScheduleOutput)
}

type GetPipelineSchedulesPipelineScheduleOwner struct {
	// Image URL for the user's avatar.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The user ID.
	Id int `pulumi:"id"`
	// Name.
	Name string `pulumi:"name"`
	// User's state, one of: active, blocked.
	State string `pulumi:"state"`
	// Username.
	Username string `pulumi:"username"`
	// URL to the user's profile.
	WebUrl string `pulumi:"webUrl"`
}

// GetPipelineSchedulesPipelineScheduleOwnerInput is an input type that accepts GetPipelineSchedulesPipelineScheduleOwnerArgs and GetPipelineSchedulesPipelineScheduleOwnerOutput values.
// You can construct a concrete instance of `GetPipelineSchedulesPipelineScheduleOwnerInput` via:
//
//	GetPipelineSchedulesPipelineScheduleOwnerArgs{...}
type GetPipelineSchedulesPipelineScheduleOwnerInput interface {
	pulumi.Input

	ToGetPipelineSchedulesPipelineScheduleOwnerOutput() GetPipelineSchedulesPipelineScheduleOwnerOutput
	ToGetPipelineSchedulesPipelineScheduleOwnerOutputWithContext(context.Context) GetPipelineSchedulesPipelineScheduleOwnerOutput
}

type GetPipelineSchedulesPipelineScheduleOwnerArgs struct {
	// Image URL for the user's avatar.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The user ID.
	Id pulumi.IntInput `pulumi:"id"`
	// Name.
	Name pulumi.StringInput `pulumi:"name"`
	// User's state, one of: active, blocked.
	State pulumi.StringInput `pulumi:"state"`
	// Username.
	Username pulumi.StringInput `pulumi:"username"`
	// URL to the user's profile.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetPipelineSchedulesPipelineScheduleOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineSchedulesPipelineScheduleOwner)(nil)).Elem()
}

func (i GetPipelineSchedulesPipelineScheduleOwnerArgs) ToGetPipelineSchedulesPipelineScheduleOwnerOutput() GetPipelineSchedulesPipelineScheduleOwnerOutput {
	return i.ToGetPipelineSchedulesPipelineScheduleOwnerOutputWithContext(context.Background())
}

func (i GetPipelineSchedulesPipelineScheduleOwnerArgs) ToGetPipelineSchedulesPipelineScheduleOwnerOutputWithContext(ctx context.Context) GetPipelineSchedulesPipelineScheduleOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipelineSchedulesPipelineScheduleOwnerOutput)
}

type GetPipelineSchedulesPipelineScheduleOwnerOutput struct{ *pulumi.OutputState }

func (GetPipelineSchedulesPipelineScheduleOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineSchedulesPipelineScheduleOwner)(nil)).Elem()
}

func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) ToGetPipelineSchedulesPipelineScheduleOwnerOutput() GetPipelineSchedulesPipelineScheduleOwnerOutput {
	return o
}

func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) ToGetPipelineSchedulesPipelineScheduleOwnerOutputWithContext(ctx context.Context) GetPipelineSchedulesPipelineScheduleOwnerOutput {
	return o
}

// Image URL for the user's avatar.
func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineScheduleOwner) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The user ID.
func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineScheduleOwner) int { return v.Id }).(pulumi.IntOutput)
}

// Name.
func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineScheduleOwner) string { return v.Name }).(pulumi.StringOutput)
}

// User's state, one of: active, blocked.
func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineScheduleOwner) string { return v.State }).(pulumi.StringOutput)
}

// Username.
func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineScheduleOwner) string { return v.Username }).(pulumi.StringOutput)
}

// URL to the user's profile.
func (o GetPipelineSchedulesPipelineScheduleOwnerOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchedulesPipelineScheduleOwner) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectBranchesBranch struct {
	// Bool, true if you can push to the branch.
	CanPush bool `pulumi:"canPush"`
	// The commit associated with this branch.
	Commits []GetProjectBranchesBranchCommit `pulumi:"commits"`
	// Bool, true if branch is the default branch for the project.
	Default bool `pulumi:"default"`
	// Bool, true if developer level access allows to merge branch.
	DevelopersCanMerge bool `pulumi:"developersCanMerge"`
	// Bool, true if developer level access allows git push.
	DevelopersCanPush bool `pulumi:"developersCanPush"`
	// Bool, true if the branch has been merged into it's parent.
	Merged bool `pulumi:"merged"`
	// The name of the branch.
	Name string `pulumi:"name"`
	// Bool, true if branch has branch protection.
	Protected bool `pulumi:"protected"`
	// URL that can be used to find the branch in a browser.
	WebUrl string `pulumi:"webUrl"`
}

// GetProjectBranchesBranchInput is an input type that accepts GetProjectBranchesBranchArgs and GetProjectBranchesBranchOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchInput` via:
//
//	GetProjectBranchesBranchArgs{...}
type GetProjectBranchesBranchInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchOutput() GetProjectBranchesBranchOutput
	ToGetProjectBranchesBranchOutputWithContext(context.Context) GetProjectBranchesBranchOutput
}

type GetProjectBranchesBranchArgs struct {
	// Bool, true if you can push to the branch.
	CanPush pulumi.BoolInput `pulumi:"canPush"`
	// The commit associated with this branch.
	Commits GetProjectBranchesBranchCommitArrayInput `pulumi:"commits"`
	// Bool, true if branch is the default branch for the project.
	Default pulumi.BoolInput `pulumi:"default"`
	// Bool, true if developer level access allows to merge branch.
	DevelopersCanMerge pulumi.BoolInput `pulumi:"developersCanMerge"`
	// Bool, true if developer level access allows git push.
	DevelopersCanPush pulumi.BoolInput `pulumi:"developersCanPush"`
	// Bool, true if the branch has been merged into it's parent.
	Merged pulumi.BoolInput `pulumi:"merged"`
	// The name of the branch.
	Name pulumi.StringInput `pulumi:"name"`
	// Bool, true if branch has branch protection.
	Protected pulumi.BoolInput `pulumi:"protected"`
	// URL that can be used to find the branch in a browser.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectBranchesBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranch)(nil)).Elem()
}

func (i GetProjectBranchesBranchArgs) ToGetProjectBranchesBranchOutput() GetProjectBranchesBranchOutput {
	return i.ToGetProjectBranchesBranchOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchArgs) ToGetProjectBranchesBranchOutputWithContext(ctx context.Context) GetProjectBranchesBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchOutput)
}

// GetProjectBranchesBranchArrayInput is an input type that accepts GetProjectBranchesBranchArray and GetProjectBranchesBranchArrayOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchArrayInput` via:
//
//	GetProjectBranchesBranchArray{ GetProjectBranchesBranchArgs{...} }
type GetProjectBranchesBranchArrayInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchArrayOutput() GetProjectBranchesBranchArrayOutput
	ToGetProjectBranchesBranchArrayOutputWithContext(context.Context) GetProjectBranchesBranchArrayOutput
}

type GetProjectBranchesBranchArray []GetProjectBranchesBranchInput

func (GetProjectBranchesBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranch)(nil)).Elem()
}

func (i GetProjectBranchesBranchArray) ToGetProjectBranchesBranchArrayOutput() GetProjectBranchesBranchArrayOutput {
	return i.ToGetProjectBranchesBranchArrayOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchArray) ToGetProjectBranchesBranchArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchArrayOutput)
}

type GetProjectBranchesBranchOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranch)(nil)).Elem()
}

func (o GetProjectBranchesBranchOutput) ToGetProjectBranchesBranchOutput() GetProjectBranchesBranchOutput {
	return o
}

func (o GetProjectBranchesBranchOutput) ToGetProjectBranchesBranchOutputWithContext(ctx context.Context) GetProjectBranchesBranchOutput {
	return o
}

// Bool, true if you can push to the branch.
func (o GetProjectBranchesBranchOutput) CanPush() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.CanPush }).(pulumi.BoolOutput)
}

// The commit associated with this branch.
func (o GetProjectBranchesBranchOutput) Commits() GetProjectBranchesBranchCommitArrayOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) []GetProjectBranchesBranchCommit { return v.Commits }).(GetProjectBranchesBranchCommitArrayOutput)
}

// Bool, true if branch is the default branch for the project.
func (o GetProjectBranchesBranchOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.Default }).(pulumi.BoolOutput)
}

// Bool, true if developer level access allows to merge branch.
func (o GetProjectBranchesBranchOutput) DevelopersCanMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.DevelopersCanMerge }).(pulumi.BoolOutput)
}

// Bool, true if developer level access allows git push.
func (o GetProjectBranchesBranchOutput) DevelopersCanPush() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.DevelopersCanPush }).(pulumi.BoolOutput)
}

// Bool, true if the branch has been merged into it's parent.
func (o GetProjectBranchesBranchOutput) Merged() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.Merged }).(pulumi.BoolOutput)
}

// The name of the branch.
func (o GetProjectBranchesBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) string { return v.Name }).(pulumi.StringOutput)
}

// Bool, true if branch has branch protection.
func (o GetProjectBranchesBranchOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.Protected }).(pulumi.BoolOutput)
}

// URL that can be used to find the branch in a browser.
func (o GetProjectBranchesBranchOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectBranchesBranchArrayOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranch)(nil)).Elem()
}

func (o GetProjectBranchesBranchArrayOutput) ToGetProjectBranchesBranchArrayOutput() GetProjectBranchesBranchArrayOutput {
	return o
}

func (o GetProjectBranchesBranchArrayOutput) ToGetProjectBranchesBranchArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchArrayOutput {
	return o
}

func (o GetProjectBranchesBranchArrayOutput) Index(i pulumi.IntInput) GetProjectBranchesBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectBranchesBranch {
		return vs[0].([]GetProjectBranchesBranch)[vs[1].(int)]
	}).(GetProjectBranchesBranchOutput)
}

type GetProjectBranchesBranchCommit struct {
	// The email of the author.
	AuthorEmail string `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName string `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate string `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate string `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail string `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName string `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id string `pulumi:"id"`
	// The commit message
	Message string `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds []string `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId string `pulumi:"shortId"`
	// The title of the commit
	Title string `pulumi:"title"`
}

// GetProjectBranchesBranchCommitInput is an input type that accepts GetProjectBranchesBranchCommitArgs and GetProjectBranchesBranchCommitOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchCommitInput` via:
//
//	GetProjectBranchesBranchCommitArgs{...}
type GetProjectBranchesBranchCommitInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchCommitOutput() GetProjectBranchesBranchCommitOutput
	ToGetProjectBranchesBranchCommitOutputWithContext(context.Context) GetProjectBranchesBranchCommitOutput
}

type GetProjectBranchesBranchCommitArgs struct {
	// The email of the author.
	AuthorEmail pulumi.StringInput `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName pulumi.StringInput `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate pulumi.StringInput `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate pulumi.StringInput `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail pulumi.StringInput `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName pulumi.StringInput `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id pulumi.StringInput `pulumi:"id"`
	// The commit message
	Message pulumi.StringInput `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds pulumi.StringArrayInput `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId pulumi.StringInput `pulumi:"shortId"`
	// The title of the commit
	Title pulumi.StringInput `pulumi:"title"`
}

func (GetProjectBranchesBranchCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (i GetProjectBranchesBranchCommitArgs) ToGetProjectBranchesBranchCommitOutput() GetProjectBranchesBranchCommitOutput {
	return i.ToGetProjectBranchesBranchCommitOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchCommitArgs) ToGetProjectBranchesBranchCommitOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchCommitOutput)
}

// GetProjectBranchesBranchCommitArrayInput is an input type that accepts GetProjectBranchesBranchCommitArray and GetProjectBranchesBranchCommitArrayOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchCommitArrayInput` via:
//
//	GetProjectBranchesBranchCommitArray{ GetProjectBranchesBranchCommitArgs{...} }
type GetProjectBranchesBranchCommitArrayInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchCommitArrayOutput() GetProjectBranchesBranchCommitArrayOutput
	ToGetProjectBranchesBranchCommitArrayOutputWithContext(context.Context) GetProjectBranchesBranchCommitArrayOutput
}

type GetProjectBranchesBranchCommitArray []GetProjectBranchesBranchCommitInput

func (GetProjectBranchesBranchCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (i GetProjectBranchesBranchCommitArray) ToGetProjectBranchesBranchCommitArrayOutput() GetProjectBranchesBranchCommitArrayOutput {
	return i.ToGetProjectBranchesBranchCommitArrayOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchCommitArray) ToGetProjectBranchesBranchCommitArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchCommitArrayOutput)
}

type GetProjectBranchesBranchCommitOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (o GetProjectBranchesBranchCommitOutput) ToGetProjectBranchesBranchCommitOutput() GetProjectBranchesBranchCommitOutput {
	return o
}

func (o GetProjectBranchesBranchCommitOutput) ToGetProjectBranchesBranchCommitOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitOutput {
	return o
}

// The email of the author.
func (o GetProjectBranchesBranchCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

// The name of the author.
func (o GetProjectBranchesBranchCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetProjectBranchesBranchCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetProjectBranchesBranchCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

// The email of the user that committed.
func (o GetProjectBranchesBranchCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

// The name of the user that committed.
func (o GetProjectBranchesBranchCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o GetProjectBranchesBranchCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.Id }).(pulumi.StringOutput)
}

// The commit message
func (o GetProjectBranchesBranchCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.Message }).(pulumi.StringOutput)
}

// The id of the parents of the commit
func (o GetProjectBranchesBranchCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

// The short id assigned to the commit by Gitlab.
func (o GetProjectBranchesBranchCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

// The title of the commit
func (o GetProjectBranchesBranchCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetProjectBranchesBranchCommitArrayOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (o GetProjectBranchesBranchCommitArrayOutput) ToGetProjectBranchesBranchCommitArrayOutput() GetProjectBranchesBranchCommitArrayOutput {
	return o
}

func (o GetProjectBranchesBranchCommitArrayOutput) ToGetProjectBranchesBranchCommitArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitArrayOutput {
	return o
}

func (o GetProjectBranchesBranchCommitArrayOutput) Index(i pulumi.IntInput) GetProjectBranchesBranchCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectBranchesBranchCommit {
		return vs[0].([]GetProjectBranchesBranchCommit)[vs[1].(int)]
	}).(GetProjectBranchesBranchCommitOutput)
}

type GetProjectContainerExpirationPolicy struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence string `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled bool `pulumi:"enabled"`
	// The number of images to keep.
	KeepN int `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
	NameRegex string `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete string `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep string `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt string `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan string `pulumi:"olderThan"`
}

// GetProjectContainerExpirationPolicyInput is an input type that accepts GetProjectContainerExpirationPolicyArgs and GetProjectContainerExpirationPolicyOutput values.
// You can construct a concrete instance of `GetProjectContainerExpirationPolicyInput` via:
//
//	GetProjectContainerExpirationPolicyArgs{...}
type GetProjectContainerExpirationPolicyInput interface {
	pulumi.Input

	ToGetProjectContainerExpirationPolicyOutput() GetProjectContainerExpirationPolicyOutput
	ToGetProjectContainerExpirationPolicyOutputWithContext(context.Context) GetProjectContainerExpirationPolicyOutput
}

type GetProjectContainerExpirationPolicyArgs struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence pulumi.StringInput `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The number of images to keep.
	KeepN pulumi.IntInput `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
	NameRegex pulumi.StringInput `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete pulumi.StringInput `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep pulumi.StringInput `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt pulumi.StringInput `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan pulumi.StringInput `pulumi:"olderThan"`
}

func (GetProjectContainerExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectContainerExpirationPolicyArgs) ToGetProjectContainerExpirationPolicyOutput() GetProjectContainerExpirationPolicyOutput {
	return i.ToGetProjectContainerExpirationPolicyOutputWithContext(context.Background())
}

func (i GetProjectContainerExpirationPolicyArgs) ToGetProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectContainerExpirationPolicyOutput)
}

// GetProjectContainerExpirationPolicyArrayInput is an input type that accepts GetProjectContainerExpirationPolicyArray and GetProjectContainerExpirationPolicyArrayOutput values.
// You can construct a concrete instance of `GetProjectContainerExpirationPolicyArrayInput` via:
//
//	GetProjectContainerExpirationPolicyArray{ GetProjectContainerExpirationPolicyArgs{...} }
type GetProjectContainerExpirationPolicyArrayInput interface {
	pulumi.Input

	ToGetProjectContainerExpirationPolicyArrayOutput() GetProjectContainerExpirationPolicyArrayOutput
	ToGetProjectContainerExpirationPolicyArrayOutputWithContext(context.Context) GetProjectContainerExpirationPolicyArrayOutput
}

type GetProjectContainerExpirationPolicyArray []GetProjectContainerExpirationPolicyInput

func (GetProjectContainerExpirationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectContainerExpirationPolicyArray) ToGetProjectContainerExpirationPolicyArrayOutput() GetProjectContainerExpirationPolicyArrayOutput {
	return i.ToGetProjectContainerExpirationPolicyArrayOutputWithContext(context.Background())
}

func (i GetProjectContainerExpirationPolicyArray) ToGetProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectContainerExpirationPolicyArrayOutput)
}

type GetProjectContainerExpirationPolicyOutput struct{ *pulumi.OutputState }

func (GetProjectContainerExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectContainerExpirationPolicyOutput) ToGetProjectContainerExpirationPolicyOutput() GetProjectContainerExpirationPolicyOutput {
	return o
}

func (o GetProjectContainerExpirationPolicyOutput) ToGetProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyOutput {
	return o
}

// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
func (o GetProjectContainerExpirationPolicyOutput) Cadence() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.Cadence }).(pulumi.StringOutput)
}

// If true, the policy is enabled.
func (o GetProjectContainerExpirationPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The number of images to keep.
func (o GetProjectContainerExpirationPolicyOutput) KeepN() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) int { return v.KeepN }).(pulumi.IntOutput)
}

// The regular expression to match image names to delete.
//
// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
func (o GetProjectContainerExpirationPolicyOutput) NameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NameRegex }).(pulumi.StringOutput)
}

// The regular expression to match image names to delete.
func (o GetProjectContainerExpirationPolicyOutput) NameRegexDelete() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NameRegexDelete }).(pulumi.StringOutput)
}

// The regular expression to match image names to keep.
func (o GetProjectContainerExpirationPolicyOutput) NameRegexKeep() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NameRegexKeep }).(pulumi.StringOutput)
}

// The next time the policy will run.
func (o GetProjectContainerExpirationPolicyOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NextRunAt }).(pulumi.StringOutput)
}

// The number of days to keep images.
func (o GetProjectContainerExpirationPolicyOutput) OlderThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.OlderThan }).(pulumi.StringOutput)
}

type GetProjectContainerExpirationPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetProjectContainerExpirationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectContainerExpirationPolicyArrayOutput) ToGetProjectContainerExpirationPolicyArrayOutput() GetProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectContainerExpirationPolicyArrayOutput) ToGetProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectContainerExpirationPolicyArrayOutput) Index(i pulumi.IntInput) GetProjectContainerExpirationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectContainerExpirationPolicy {
		return vs[0].([]GetProjectContainerExpirationPolicy)[vs[1].(int)]
	}).(GetProjectContainerExpirationPolicyOutput)
}

type GetProjectEnvironmentsEnvironment struct {
	// The ID of the environments cluster agent or `null` if none is assigned.
	ClusterAgentId int `pulumi:"clusterAgentId"`
	// Timestamp of the environment creation, RFC3339 format.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the environment.
	Description string `pulumi:"description"`
	// Place to link to for this environment.
	ExternalUrl string `pulumi:"externalUrl"`
	// The Flux resource path to associate with this environment.
	FluxResourcePath string `pulumi:"fluxResourcePath"`
	// The ID of the environment.
	Id int `pulumi:"id"`
	// The Kubernetes namespace to associate with this environment.
	KubernetesNamespace string `pulumi:"kubernetesNamespace"`
	// The name of the environment.
	Name string `pulumi:"name"`
	// The simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on. The slug is truncated to 24 characters. A random suffix is automatically added to uppercase environment names.
	Slug string `pulumi:"slug"`
	// The state of the environment. Value can be one of `available`, `stopping`, `stopped`. Returns all environments if not set.
	State string `pulumi:"state"`
	// The tier of the environment. Value can be one of `production`, `staging`, `testing`, `development`, `other`. Returns all environments if not set.
	Tier string `pulumi:"tier"`
	// Timestamp of the last environment update, RFC3339 format.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetProjectEnvironmentsEnvironmentInput is an input type that accepts GetProjectEnvironmentsEnvironmentArgs and GetProjectEnvironmentsEnvironmentOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentsEnvironmentInput` via:
//
//	GetProjectEnvironmentsEnvironmentArgs{...}
type GetProjectEnvironmentsEnvironmentInput interface {
	pulumi.Input

	ToGetProjectEnvironmentsEnvironmentOutput() GetProjectEnvironmentsEnvironmentOutput
	ToGetProjectEnvironmentsEnvironmentOutputWithContext(context.Context) GetProjectEnvironmentsEnvironmentOutput
}

type GetProjectEnvironmentsEnvironmentArgs struct {
	// The ID of the environments cluster agent or `null` if none is assigned.
	ClusterAgentId pulumi.IntInput `pulumi:"clusterAgentId"`
	// Timestamp of the environment creation, RFC3339 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the environment.
	Description pulumi.StringInput `pulumi:"description"`
	// Place to link to for this environment.
	ExternalUrl pulumi.StringInput `pulumi:"externalUrl"`
	// The Flux resource path to associate with this environment.
	FluxResourcePath pulumi.StringInput `pulumi:"fluxResourcePath"`
	// The ID of the environment.
	Id pulumi.IntInput `pulumi:"id"`
	// The Kubernetes namespace to associate with this environment.
	KubernetesNamespace pulumi.StringInput `pulumi:"kubernetesNamespace"`
	// The name of the environment.
	Name pulumi.StringInput `pulumi:"name"`
	// The simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on. The slug is truncated to 24 characters. A random suffix is automatically added to uppercase environment names.
	Slug pulumi.StringInput `pulumi:"slug"`
	// The state of the environment. Value can be one of `available`, `stopping`, `stopped`. Returns all environments if not set.
	State pulumi.StringInput `pulumi:"state"`
	// The tier of the environment. Value can be one of `production`, `staging`, `testing`, `development`, `other`. Returns all environments if not set.
	Tier pulumi.StringInput `pulumi:"tier"`
	// Timestamp of the last environment update, RFC3339 format.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetProjectEnvironmentsEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetProjectEnvironmentsEnvironmentArgs) ToGetProjectEnvironmentsEnvironmentOutput() GetProjectEnvironmentsEnvironmentOutput {
	return i.ToGetProjectEnvironmentsEnvironmentOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentsEnvironmentArgs) ToGetProjectEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetProjectEnvironmentsEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentsEnvironmentOutput)
}

// GetProjectEnvironmentsEnvironmentArrayInput is an input type that accepts GetProjectEnvironmentsEnvironmentArray and GetProjectEnvironmentsEnvironmentArrayOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentsEnvironmentArrayInput` via:
//
//	GetProjectEnvironmentsEnvironmentArray{ GetProjectEnvironmentsEnvironmentArgs{...} }
type GetProjectEnvironmentsEnvironmentArrayInput interface {
	pulumi.Input

	ToGetProjectEnvironmentsEnvironmentArrayOutput() GetProjectEnvironmentsEnvironmentArrayOutput
	ToGetProjectEnvironmentsEnvironmentArrayOutputWithContext(context.Context) GetProjectEnvironmentsEnvironmentArrayOutput
}

type GetProjectEnvironmentsEnvironmentArray []GetProjectEnvironmentsEnvironmentInput

func (GetProjectEnvironmentsEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetProjectEnvironmentsEnvironmentArray) ToGetProjectEnvironmentsEnvironmentArrayOutput() GetProjectEnvironmentsEnvironmentArrayOutput {
	return i.ToGetProjectEnvironmentsEnvironmentArrayOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentsEnvironmentArray) ToGetProjectEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentsEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentsEnvironmentArrayOutput)
}

type GetProjectEnvironmentsEnvironmentOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentsEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetProjectEnvironmentsEnvironmentOutput) ToGetProjectEnvironmentsEnvironmentOutput() GetProjectEnvironmentsEnvironmentOutput {
	return o
}

func (o GetProjectEnvironmentsEnvironmentOutput) ToGetProjectEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetProjectEnvironmentsEnvironmentOutput {
	return o
}

// The ID of the environments cluster agent or `null` if none is assigned.
func (o GetProjectEnvironmentsEnvironmentOutput) ClusterAgentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) int { return v.ClusterAgentId }).(pulumi.IntOutput)
}

// Timestamp of the environment creation, RFC3339 format.
func (o GetProjectEnvironmentsEnvironmentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the environment.
func (o GetProjectEnvironmentsEnvironmentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.Description }).(pulumi.StringOutput)
}

// Place to link to for this environment.
func (o GetProjectEnvironmentsEnvironmentOutput) ExternalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.ExternalUrl }).(pulumi.StringOutput)
}

// The Flux resource path to associate with this environment.
func (o GetProjectEnvironmentsEnvironmentOutput) FluxResourcePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.FluxResourcePath }).(pulumi.StringOutput)
}

// The ID of the environment.
func (o GetProjectEnvironmentsEnvironmentOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) int { return v.Id }).(pulumi.IntOutput)
}

// The Kubernetes namespace to associate with this environment.
func (o GetProjectEnvironmentsEnvironmentOutput) KubernetesNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.KubernetesNamespace }).(pulumi.StringOutput)
}

// The name of the environment.
func (o GetProjectEnvironmentsEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

// The simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on. The slug is truncated to 24 characters. A random suffix is automatically added to uppercase environment names.
func (o GetProjectEnvironmentsEnvironmentOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.Slug }).(pulumi.StringOutput)
}

// The state of the environment. Value can be one of `available`, `stopping`, `stopped`. Returns all environments if not set.
func (o GetProjectEnvironmentsEnvironmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.State }).(pulumi.StringOutput)
}

// The tier of the environment. Value can be one of `production`, `staging`, `testing`, `development`, `other`. Returns all environments if not set.
func (o GetProjectEnvironmentsEnvironmentOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.Tier }).(pulumi.StringOutput)
}

// Timestamp of the last environment update, RFC3339 format.
func (o GetProjectEnvironmentsEnvironmentOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsEnvironment) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetProjectEnvironmentsEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentsEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetProjectEnvironmentsEnvironmentArrayOutput) ToGetProjectEnvironmentsEnvironmentArrayOutput() GetProjectEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetProjectEnvironmentsEnvironmentArrayOutput) ToGetProjectEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetProjectEnvironmentsEnvironmentArrayOutput) Index(i pulumi.IntInput) GetProjectEnvironmentsEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectEnvironmentsEnvironment {
		return vs[0].([]GetProjectEnvironmentsEnvironment)[vs[1].(int)]
	}).(GetProjectEnvironmentsEnvironmentOutput)
}

type GetProjectHooksHook struct {
	// Invoke the hook for confidential issues events.
	ConfidentialIssuesEvents bool `pulumi:"confidentialIssuesEvents"`
	// Invoke the hook for confidential notes events.
	ConfidentialNoteEvents bool `pulumi:"confidentialNoteEvents"`
	// Set a custom webhook template.
	CustomWebhookTemplate string `pulumi:"customWebhookTemplate"`
	// Invoke the hook for deployment events.
	DeploymentEvents bool `pulumi:"deploymentEvents"`
	// Enable ssl verification when invoking the hook.
	EnableSslVerification bool `pulumi:"enableSslVerification"`
	// The id of the project hook.
	HookId int `pulumi:"hookId"`
	// Invoke the hook for issues events.
	IssuesEvents bool `pulumi:"issuesEvents"`
	// Invoke the hook for job events.
	JobEvents bool `pulumi:"jobEvents"`
	// Invoke the hook for merge requests.
	MergeRequestsEvents bool `pulumi:"mergeRequestsEvents"`
	// Invoke the hook for notes events.
	NoteEvents bool `pulumi:"noteEvents"`
	// Invoke the hook for pipeline events.
	PipelineEvents bool `pulumi:"pipelineEvents"`
	// The name or id of the project to add the hook to.
	Project string `pulumi:"project"`
	// The id of the project for the hook.
	ProjectId int `pulumi:"projectId"`
	// Invoke the hook for push events.
	PushEvents bool `pulumi:"pushEvents"`
	// Invoke the hook for push events on matching branches only.
	PushEventsBranchFilter string `pulumi:"pushEventsBranchFilter"`
	// Invoke the hook for releases events.
	ReleasesEvents bool `pulumi:"releasesEvents"`
	// Invoke the hook for tag push events.
	TagPushEvents bool `pulumi:"tagPushEvents"`
	// A token to present when invoking the hook. The token is not available for imported resources.
	Token string `pulumi:"token"`
	// The url of the hook to invoke.
	Url string `pulumi:"url"`
	// Invoke the hook for wiki page events.
	WikiPageEvents bool `pulumi:"wikiPageEvents"`
}

// GetProjectHooksHookInput is an input type that accepts GetProjectHooksHookArgs and GetProjectHooksHookOutput values.
// You can construct a concrete instance of `GetProjectHooksHookInput` via:
//
//	GetProjectHooksHookArgs{...}
type GetProjectHooksHookInput interface {
	pulumi.Input

	ToGetProjectHooksHookOutput() GetProjectHooksHookOutput
	ToGetProjectHooksHookOutputWithContext(context.Context) GetProjectHooksHookOutput
}

type GetProjectHooksHookArgs struct {
	// Invoke the hook for confidential issues events.
	ConfidentialIssuesEvents pulumi.BoolInput `pulumi:"confidentialIssuesEvents"`
	// Invoke the hook for confidential notes events.
	ConfidentialNoteEvents pulumi.BoolInput `pulumi:"confidentialNoteEvents"`
	// Set a custom webhook template.
	CustomWebhookTemplate pulumi.StringInput `pulumi:"customWebhookTemplate"`
	// Invoke the hook for deployment events.
	DeploymentEvents pulumi.BoolInput `pulumi:"deploymentEvents"`
	// Enable ssl verification when invoking the hook.
	EnableSslVerification pulumi.BoolInput `pulumi:"enableSslVerification"`
	// The id of the project hook.
	HookId pulumi.IntInput `pulumi:"hookId"`
	// Invoke the hook for issues events.
	IssuesEvents pulumi.BoolInput `pulumi:"issuesEvents"`
	// Invoke the hook for job events.
	JobEvents pulumi.BoolInput `pulumi:"jobEvents"`
	// Invoke the hook for merge requests.
	MergeRequestsEvents pulumi.BoolInput `pulumi:"mergeRequestsEvents"`
	// Invoke the hook for notes events.
	NoteEvents pulumi.BoolInput `pulumi:"noteEvents"`
	// Invoke the hook for pipeline events.
	PipelineEvents pulumi.BoolInput `pulumi:"pipelineEvents"`
	// The name or id of the project to add the hook to.
	Project pulumi.StringInput `pulumi:"project"`
	// The id of the project for the hook.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// Invoke the hook for push events.
	PushEvents pulumi.BoolInput `pulumi:"pushEvents"`
	// Invoke the hook for push events on matching branches only.
	PushEventsBranchFilter pulumi.StringInput `pulumi:"pushEventsBranchFilter"`
	// Invoke the hook for releases events.
	ReleasesEvents pulumi.BoolInput `pulumi:"releasesEvents"`
	// Invoke the hook for tag push events.
	TagPushEvents pulumi.BoolInput `pulumi:"tagPushEvents"`
	// A token to present when invoking the hook. The token is not available for imported resources.
	Token pulumi.StringInput `pulumi:"token"`
	// The url of the hook to invoke.
	Url pulumi.StringInput `pulumi:"url"`
	// Invoke the hook for wiki page events.
	WikiPageEvents pulumi.BoolInput `pulumi:"wikiPageEvents"`
}

func (GetProjectHooksHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectHooksHook)(nil)).Elem()
}

func (i GetProjectHooksHookArgs) ToGetProjectHooksHookOutput() GetProjectHooksHookOutput {
	return i.ToGetProjectHooksHookOutputWithContext(context.Background())
}

func (i GetProjectHooksHookArgs) ToGetProjectHooksHookOutputWithContext(ctx context.Context) GetProjectHooksHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectHooksHookOutput)
}

// GetProjectHooksHookArrayInput is an input type that accepts GetProjectHooksHookArray and GetProjectHooksHookArrayOutput values.
// You can construct a concrete instance of `GetProjectHooksHookArrayInput` via:
//
//	GetProjectHooksHookArray{ GetProjectHooksHookArgs{...} }
type GetProjectHooksHookArrayInput interface {
	pulumi.Input

	ToGetProjectHooksHookArrayOutput() GetProjectHooksHookArrayOutput
	ToGetProjectHooksHookArrayOutputWithContext(context.Context) GetProjectHooksHookArrayOutput
}

type GetProjectHooksHookArray []GetProjectHooksHookInput

func (GetProjectHooksHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectHooksHook)(nil)).Elem()
}

func (i GetProjectHooksHookArray) ToGetProjectHooksHookArrayOutput() GetProjectHooksHookArrayOutput {
	return i.ToGetProjectHooksHookArrayOutputWithContext(context.Background())
}

func (i GetProjectHooksHookArray) ToGetProjectHooksHookArrayOutputWithContext(ctx context.Context) GetProjectHooksHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectHooksHookArrayOutput)
}

type GetProjectHooksHookOutput struct{ *pulumi.OutputState }

func (GetProjectHooksHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectHooksHook)(nil)).Elem()
}

func (o GetProjectHooksHookOutput) ToGetProjectHooksHookOutput() GetProjectHooksHookOutput {
	return o
}

func (o GetProjectHooksHookOutput) ToGetProjectHooksHookOutputWithContext(ctx context.Context) GetProjectHooksHookOutput {
	return o
}

// Invoke the hook for confidential issues events.
func (o GetProjectHooksHookOutput) ConfidentialIssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.ConfidentialIssuesEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for confidential notes events.
func (o GetProjectHooksHookOutput) ConfidentialNoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.ConfidentialNoteEvents }).(pulumi.BoolOutput)
}

// Set a custom webhook template.
func (o GetProjectHooksHookOutput) CustomWebhookTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.CustomWebhookTemplate }).(pulumi.StringOutput)
}

// Invoke the hook for deployment events.
func (o GetProjectHooksHookOutput) DeploymentEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.DeploymentEvents }).(pulumi.BoolOutput)
}

// Enable ssl verification when invoking the hook.
func (o GetProjectHooksHookOutput) EnableSslVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.EnableSslVerification }).(pulumi.BoolOutput)
}

// The id of the project hook.
func (o GetProjectHooksHookOutput) HookId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectHooksHook) int { return v.HookId }).(pulumi.IntOutput)
}

// Invoke the hook for issues events.
func (o GetProjectHooksHookOutput) IssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.IssuesEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for job events.
func (o GetProjectHooksHookOutput) JobEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.JobEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for merge requests.
func (o GetProjectHooksHookOutput) MergeRequestsEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.MergeRequestsEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for notes events.
func (o GetProjectHooksHookOutput) NoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.NoteEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for pipeline events.
func (o GetProjectHooksHookOutput) PipelineEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.PipelineEvents }).(pulumi.BoolOutput)
}

// The name or id of the project to add the hook to.
func (o GetProjectHooksHookOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.Project }).(pulumi.StringOutput)
}

// The id of the project for the hook.
func (o GetProjectHooksHookOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectHooksHook) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Invoke the hook for push events.
func (o GetProjectHooksHookOutput) PushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.PushEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for push events on matching branches only.
func (o GetProjectHooksHookOutput) PushEventsBranchFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.PushEventsBranchFilter }).(pulumi.StringOutput)
}

// Invoke the hook for releases events.
func (o GetProjectHooksHookOutput) ReleasesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.ReleasesEvents }).(pulumi.BoolOutput)
}

// Invoke the hook for tag push events.
func (o GetProjectHooksHookOutput) TagPushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.TagPushEvents }).(pulumi.BoolOutput)
}

// A token to present when invoking the hook. The token is not available for imported resources.
func (o GetProjectHooksHookOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.Token }).(pulumi.StringOutput)
}

// The url of the hook to invoke.
func (o GetProjectHooksHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.Url }).(pulumi.StringOutput)
}

// Invoke the hook for wiki page events.
func (o GetProjectHooksHookOutput) WikiPageEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.WikiPageEvents }).(pulumi.BoolOutput)
}

type GetProjectHooksHookArrayOutput struct{ *pulumi.OutputState }

func (GetProjectHooksHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectHooksHook)(nil)).Elem()
}

func (o GetProjectHooksHookArrayOutput) ToGetProjectHooksHookArrayOutput() GetProjectHooksHookArrayOutput {
	return o
}

func (o GetProjectHooksHookArrayOutput) ToGetProjectHooksHookArrayOutputWithContext(ctx context.Context) GetProjectHooksHookArrayOutput {
	return o
}

func (o GetProjectHooksHookArrayOutput) Index(i pulumi.IntInput) GetProjectHooksHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectHooksHook {
		return vs[0].([]GetProjectHooksHook)[vs[1].(int)]
	}).(GetProjectHooksHookOutput)
}

type GetProjectIssueTaskCompletionStatus struct {
	// The number of tasks that are completed.
	CompletedCount int `pulumi:"completedCount"`
	// The number of tasks.
	Count int `pulumi:"count"`
}

// GetProjectIssueTaskCompletionStatusInput is an input type that accepts GetProjectIssueTaskCompletionStatusArgs and GetProjectIssueTaskCompletionStatusOutput values.
// You can construct a concrete instance of `GetProjectIssueTaskCompletionStatusInput` via:
//
//	GetProjectIssueTaskCompletionStatusArgs{...}
type GetProjectIssueTaskCompletionStatusInput interface {
	pulumi.Input

	ToGetProjectIssueTaskCompletionStatusOutput() GetProjectIssueTaskCompletionStatusOutput
	ToGetProjectIssueTaskCompletionStatusOutputWithContext(context.Context) GetProjectIssueTaskCompletionStatusOutput
}

type GetProjectIssueTaskCompletionStatusArgs struct {
	// The number of tasks that are completed.
	CompletedCount pulumi.IntInput `pulumi:"completedCount"`
	// The number of tasks.
	Count pulumi.IntInput `pulumi:"count"`
}

func (GetProjectIssueTaskCompletionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssueTaskCompletionStatusArgs) ToGetProjectIssueTaskCompletionStatusOutput() GetProjectIssueTaskCompletionStatusOutput {
	return i.ToGetProjectIssueTaskCompletionStatusOutputWithContext(context.Background())
}

func (i GetProjectIssueTaskCompletionStatusArgs) ToGetProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssueTaskCompletionStatusOutput)
}

// GetProjectIssueTaskCompletionStatusArrayInput is an input type that accepts GetProjectIssueTaskCompletionStatusArray and GetProjectIssueTaskCompletionStatusArrayOutput values.
// You can construct a concrete instance of `GetProjectIssueTaskCompletionStatusArrayInput` via:
//
//	GetProjectIssueTaskCompletionStatusArray{ GetProjectIssueTaskCompletionStatusArgs{...} }
type GetProjectIssueTaskCompletionStatusArrayInput interface {
	pulumi.Input

	ToGetProjectIssueTaskCompletionStatusArrayOutput() GetProjectIssueTaskCompletionStatusArrayOutput
	ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Context) GetProjectIssueTaskCompletionStatusArrayOutput
}

type GetProjectIssueTaskCompletionStatusArray []GetProjectIssueTaskCompletionStatusInput

func (GetProjectIssueTaskCompletionStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssueTaskCompletionStatusArray) ToGetProjectIssueTaskCompletionStatusArrayOutput() GetProjectIssueTaskCompletionStatusArrayOutput {
	return i.ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Background())
}

func (i GetProjectIssueTaskCompletionStatusArray) ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssueTaskCompletionStatusArrayOutput)
}

type GetProjectIssueTaskCompletionStatusOutput struct{ *pulumi.OutputState }

func (GetProjectIssueTaskCompletionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssueTaskCompletionStatusOutput) ToGetProjectIssueTaskCompletionStatusOutput() GetProjectIssueTaskCompletionStatusOutput {
	return o
}

func (o GetProjectIssueTaskCompletionStatusOutput) ToGetProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusOutput {
	return o
}

// The number of tasks that are completed.
func (o GetProjectIssueTaskCompletionStatusOutput) CompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssueTaskCompletionStatus) int { return v.CompletedCount }).(pulumi.IntOutput)
}

// The number of tasks.
func (o GetProjectIssueTaskCompletionStatusOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssueTaskCompletionStatus) int { return v.Count }).(pulumi.IntOutput)
}

type GetProjectIssueTaskCompletionStatusArrayOutput struct{ *pulumi.OutputState }

func (GetProjectIssueTaskCompletionStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssueTaskCompletionStatusArrayOutput) ToGetProjectIssueTaskCompletionStatusArrayOutput() GetProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssueTaskCompletionStatusArrayOutput) ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssueTaskCompletionStatusArrayOutput) Index(i pulumi.IntInput) GetProjectIssueTaskCompletionStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectIssueTaskCompletionStatus {
		return vs[0].([]GetProjectIssueTaskCompletionStatus)[vs[1].(int)]
	}).(GetProjectIssueTaskCompletionStatusOutput)
}

type GetProjectIssuesIssue struct {
	// The IDs of the users to assign the issue to.
	AssigneeIds []int `pulumi:"assigneeIds"`
	// The ID of the author of the issue. Use `User` data source to get more information about the user.
	AuthorId int `pulumi:"authorId"`
	// When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	ClosedAt string `pulumi:"closedAt"`
	// The ID of the user that closed the issue. Use `User` data source to get more information about the user.
	ClosedByUserId int `pulumi:"closedByUserId"`
	// Set an issue to be confidential.
	Confidential bool `pulumi:"confidential"`
	// When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
	CreatedAt string `pulumi:"createdAt"`
	// The description of an issue. Limited to 1,048,576 characters.
	Description string `pulumi:"description"`
	// Whether the issue is locked for discussions or not.
	DiscussionLocked bool `pulumi:"discussionLocked"`
	// The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of.
	DiscussionToResolve string `pulumi:"discussionToResolve"`
	// The number of downvotes the issue has received.
	Downvotes int `pulumi:"downvotes"`
	// The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
	DueDate string `pulumi:"dueDate"`
	// ID of the epic to add the issue to. Valid values are greater than or equal to 0.
	EpicId int `pulumi:"epicId"`
	// The ID of the epic issue.
	EpicIssueId int `pulumi:"epicIssueId"`
	// The external ID of the issue.
	ExternalId string `pulumi:"externalId"`
	// The human-readable time estimate of the issue.
	HumanTimeEstimate string `pulumi:"humanTimeEstimate"`
	// The human-readable total time spent of the issue.
	HumanTotalTimeSpent string `pulumi:"humanTotalTimeSpent"`
	// The internal ID of the project's issue.
	Iid int `pulumi:"iid"`
	// The instance-wide ID of the issue.
	IssueId int `pulumi:"issueId"`
	// The ID of the issue link.
	IssueLinkId int `pulumi:"issueLinkId"`
	// The type of issue. Valid values are: `issue`, `incident`, `testCase`.
	IssueType string `pulumi:"issueType"`
	// The labels of an issue.
	Labels []string `pulumi:"labels"`
	// The links of the issue.
	Links map[string]string `pulumi:"links"`
	// The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
	MergeRequestToResolveDiscussionsOf int `pulumi:"mergeRequestToResolveDiscussionsOf"`
	// The number of merge requests associated with the issue.
	MergeRequestsCount int `pulumi:"mergeRequestsCount"`
	// The global ID of a milestone to assign issue. To find the milestoneId associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue's details.
	MilestoneId int `pulumi:"milestoneId"`
	// The ID of the issue that was moved to.
	MovedToId int `pulumi:"movedToId"`
	// The name or ID of the project.
	Project string `pulumi:"project"`
	// The references of the issue.
	References map[string]string `pulumi:"references"`
	// The state of the issue. Valid values are: `opened`, `closed`.
	State string `pulumi:"state"`
	// Whether the authenticated user is subscribed to the issue or not.
	Subscribed bool `pulumi:"subscribed"`
	// The task completion status. It's always a one element list.
	TaskCompletionStatuses []GetProjectIssuesIssueTaskCompletionStatus `pulumi:"taskCompletionStatuses"`
	// The time estimate of the issue.
	TimeEstimate int `pulumi:"timeEstimate"`
	// The title of the issue.
	Title string `pulumi:"title"`
	// The total time spent of the issue.
	TotalTimeSpent int `pulumi:"totalTimeSpent"`
	// When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	UpdatedAt string `pulumi:"updatedAt"`
	// The number of upvotes the issue has received.
	Upvotes int `pulumi:"upvotes"`
	// The number of user notes on the issue.
	UserNotesCount int `pulumi:"userNotesCount"`
	// The web URL of the issue.
	WebUrl string `pulumi:"webUrl"`
	// The weight of the issue. Valid values are greater than or equal to 0.
	Weight int `pulumi:"weight"`
}

// GetProjectIssuesIssueInput is an input type that accepts GetProjectIssuesIssueArgs and GetProjectIssuesIssueOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueInput` via:
//
//	GetProjectIssuesIssueArgs{...}
type GetProjectIssuesIssueInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueOutput() GetProjectIssuesIssueOutput
	ToGetProjectIssuesIssueOutputWithContext(context.Context) GetProjectIssuesIssueOutput
}

type GetProjectIssuesIssueArgs struct {
	// The IDs of the users to assign the issue to.
	AssigneeIds pulumi.IntArrayInput `pulumi:"assigneeIds"`
	// The ID of the author of the issue. Use `User` data source to get more information about the user.
	AuthorId pulumi.IntInput `pulumi:"authorId"`
	// When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	ClosedAt pulumi.StringInput `pulumi:"closedAt"`
	// The ID of the user that closed the issue. Use `User` data source to get more information about the user.
	ClosedByUserId pulumi.IntInput `pulumi:"closedByUserId"`
	// Set an issue to be confidential.
	Confidential pulumi.BoolInput `pulumi:"confidential"`
	// When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of an issue. Limited to 1,048,576 characters.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether the issue is locked for discussions or not.
	DiscussionLocked pulumi.BoolInput `pulumi:"discussionLocked"`
	// The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of.
	DiscussionToResolve pulumi.StringInput `pulumi:"discussionToResolve"`
	// The number of downvotes the issue has received.
	Downvotes pulumi.IntInput `pulumi:"downvotes"`
	// The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
	DueDate pulumi.StringInput `pulumi:"dueDate"`
	// ID of the epic to add the issue to. Valid values are greater than or equal to 0.
	EpicId pulumi.IntInput `pulumi:"epicId"`
	// The ID of the epic issue.
	EpicIssueId pulumi.IntInput `pulumi:"epicIssueId"`
	// The external ID of the issue.
	ExternalId pulumi.StringInput `pulumi:"externalId"`
	// The human-readable time estimate of the issue.
	HumanTimeEstimate pulumi.StringInput `pulumi:"humanTimeEstimate"`
	// The human-readable total time spent of the issue.
	HumanTotalTimeSpent pulumi.StringInput `pulumi:"humanTotalTimeSpent"`
	// The internal ID of the project's issue.
	Iid pulumi.IntInput `pulumi:"iid"`
	// The instance-wide ID of the issue.
	IssueId pulumi.IntInput `pulumi:"issueId"`
	// The ID of the issue link.
	IssueLinkId pulumi.IntInput `pulumi:"issueLinkId"`
	// The type of issue. Valid values are: `issue`, `incident`, `testCase`.
	IssueType pulumi.StringInput `pulumi:"issueType"`
	// The labels of an issue.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
	// The links of the issue.
	Links pulumi.StringMapInput `pulumi:"links"`
	// The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
	MergeRequestToResolveDiscussionsOf pulumi.IntInput `pulumi:"mergeRequestToResolveDiscussionsOf"`
	// The number of merge requests associated with the issue.
	MergeRequestsCount pulumi.IntInput `pulumi:"mergeRequestsCount"`
	// The global ID of a milestone to assign issue. To find the milestoneId associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue's details.
	MilestoneId pulumi.IntInput `pulumi:"milestoneId"`
	// The ID of the issue that was moved to.
	MovedToId pulumi.IntInput `pulumi:"movedToId"`
	// The name or ID of the project.
	Project pulumi.StringInput `pulumi:"project"`
	// The references of the issue.
	References pulumi.StringMapInput `pulumi:"references"`
	// The state of the issue. Valid values are: `opened`, `closed`.
	State pulumi.StringInput `pulumi:"state"`
	// Whether the authenticated user is subscribed to the issue or not.
	Subscribed pulumi.BoolInput `pulumi:"subscribed"`
	// The task completion status. It's always a one element list.
	TaskCompletionStatuses GetProjectIssuesIssueTaskCompletionStatusArrayInput `pulumi:"taskCompletionStatuses"`
	// The time estimate of the issue.
	TimeEstimate pulumi.IntInput `pulumi:"timeEstimate"`
	// The title of the issue.
	Title pulumi.StringInput `pulumi:"title"`
	// The total time spent of the issue.
	TotalTimeSpent pulumi.IntInput `pulumi:"totalTimeSpent"`
	// When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The number of upvotes the issue has received.
	Upvotes pulumi.IntInput `pulumi:"upvotes"`
	// The number of user notes on the issue.
	UserNotesCount pulumi.IntInput `pulumi:"userNotesCount"`
	// The web URL of the issue.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
	// The weight of the issue. Valid values are greater than or equal to 0.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetProjectIssuesIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssue)(nil)).Elem()
}

func (i GetProjectIssuesIssueArgs) ToGetProjectIssuesIssueOutput() GetProjectIssuesIssueOutput {
	return i.ToGetProjectIssuesIssueOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueArgs) ToGetProjectIssuesIssueOutputWithContext(ctx context.Context) GetProjectIssuesIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueOutput)
}

// GetProjectIssuesIssueArrayInput is an input type that accepts GetProjectIssuesIssueArray and GetProjectIssuesIssueArrayOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueArrayInput` via:
//
//	GetProjectIssuesIssueArray{ GetProjectIssuesIssueArgs{...} }
type GetProjectIssuesIssueArrayInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueArrayOutput() GetProjectIssuesIssueArrayOutput
	ToGetProjectIssuesIssueArrayOutputWithContext(context.Context) GetProjectIssuesIssueArrayOutput
}

type GetProjectIssuesIssueArray []GetProjectIssuesIssueInput

func (GetProjectIssuesIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssue)(nil)).Elem()
}

func (i GetProjectIssuesIssueArray) ToGetProjectIssuesIssueArrayOutput() GetProjectIssuesIssueArrayOutput {
	return i.ToGetProjectIssuesIssueArrayOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueArray) ToGetProjectIssuesIssueArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueArrayOutput)
}

type GetProjectIssuesIssueOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssue)(nil)).Elem()
}

func (o GetProjectIssuesIssueOutput) ToGetProjectIssuesIssueOutput() GetProjectIssuesIssueOutput {
	return o
}

func (o GetProjectIssuesIssueOutput) ToGetProjectIssuesIssueOutputWithContext(ctx context.Context) GetProjectIssuesIssueOutput {
	return o
}

// The IDs of the users to assign the issue to.
func (o GetProjectIssuesIssueOutput) AssigneeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) []int { return v.AssigneeIds }).(pulumi.IntArrayOutput)
}

// The ID of the author of the issue. Use `User` data source to get more information about the user.
func (o GetProjectIssuesIssueOutput) AuthorId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.AuthorId }).(pulumi.IntOutput)
}

// When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
func (o GetProjectIssuesIssueOutput) ClosedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.ClosedAt }).(pulumi.StringOutput)
}

// The ID of the user that closed the issue. Use `User` data source to get more information about the user.
func (o GetProjectIssuesIssueOutput) ClosedByUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.ClosedByUserId }).(pulumi.IntOutput)
}

// Set an issue to be confidential.
func (o GetProjectIssuesIssueOutput) Confidential() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) bool { return v.Confidential }).(pulumi.BoolOutput)
}

// When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
func (o GetProjectIssuesIssueOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of an issue. Limited to 1,048,576 characters.
func (o GetProjectIssuesIssueOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.Description }).(pulumi.StringOutput)
}

// Whether the issue is locked for discussions or not.
func (o GetProjectIssuesIssueOutput) DiscussionLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) bool { return v.DiscussionLocked }).(pulumi.BoolOutput)
}

// The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of.
func (o GetProjectIssuesIssueOutput) DiscussionToResolve() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.DiscussionToResolve }).(pulumi.StringOutput)
}

// The number of downvotes the issue has received.
func (o GetProjectIssuesIssueOutput) Downvotes() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Downvotes }).(pulumi.IntOutput)
}

// The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
func (o GetProjectIssuesIssueOutput) DueDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.DueDate }).(pulumi.StringOutput)
}

// ID of the epic to add the issue to. Valid values are greater than or equal to 0.
func (o GetProjectIssuesIssueOutput) EpicId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.EpicId }).(pulumi.IntOutput)
}

// The ID of the epic issue.
func (o GetProjectIssuesIssueOutput) EpicIssueId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.EpicIssueId }).(pulumi.IntOutput)
}

// The external ID of the issue.
func (o GetProjectIssuesIssueOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.ExternalId }).(pulumi.StringOutput)
}

// The human-readable time estimate of the issue.
func (o GetProjectIssuesIssueOutput) HumanTimeEstimate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.HumanTimeEstimate }).(pulumi.StringOutput)
}

// The human-readable total time spent of the issue.
func (o GetProjectIssuesIssueOutput) HumanTotalTimeSpent() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.HumanTotalTimeSpent }).(pulumi.StringOutput)
}

// The internal ID of the project's issue.
func (o GetProjectIssuesIssueOutput) Iid() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Iid }).(pulumi.IntOutput)
}

// The instance-wide ID of the issue.
func (o GetProjectIssuesIssueOutput) IssueId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.IssueId }).(pulumi.IntOutput)
}

// The ID of the issue link.
func (o GetProjectIssuesIssueOutput) IssueLinkId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.IssueLinkId }).(pulumi.IntOutput)
}

// The type of issue. Valid values are: `issue`, `incident`, `testCase`.
func (o GetProjectIssuesIssueOutput) IssueType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.IssueType }).(pulumi.StringOutput)
}

// The labels of an issue.
func (o GetProjectIssuesIssueOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// The links of the issue.
func (o GetProjectIssuesIssueOutput) Links() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) map[string]string { return v.Links }).(pulumi.StringMapOutput)
}

// The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
func (o GetProjectIssuesIssueOutput) MergeRequestToResolveDiscussionsOf() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MergeRequestToResolveDiscussionsOf }).(pulumi.IntOutput)
}

// The number of merge requests associated with the issue.
func (o GetProjectIssuesIssueOutput) MergeRequestsCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MergeRequestsCount }).(pulumi.IntOutput)
}

// The global ID of a milestone to assign issue. To find the milestoneId associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue's details.
func (o GetProjectIssuesIssueOutput) MilestoneId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MilestoneId }).(pulumi.IntOutput)
}

// The ID of the issue that was moved to.
func (o GetProjectIssuesIssueOutput) MovedToId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MovedToId }).(pulumi.IntOutput)
}

// The name or ID of the project.
func (o GetProjectIssuesIssueOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.Project }).(pulumi.StringOutput)
}

// The references of the issue.
func (o GetProjectIssuesIssueOutput) References() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) map[string]string { return v.References }).(pulumi.StringMapOutput)
}

// The state of the issue. Valid values are: `opened`, `closed`.
func (o GetProjectIssuesIssueOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.State }).(pulumi.StringOutput)
}

// Whether the authenticated user is subscribed to the issue or not.
func (o GetProjectIssuesIssueOutput) Subscribed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) bool { return v.Subscribed }).(pulumi.BoolOutput)
}

// The task completion status. It's always a one element list.
func (o GetProjectIssuesIssueOutput) TaskCompletionStatuses() GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) []GetProjectIssuesIssueTaskCompletionStatus {
		return v.TaskCompletionStatuses
	}).(GetProjectIssuesIssueTaskCompletionStatusArrayOutput)
}

// The time estimate of the issue.
func (o GetProjectIssuesIssueOutput) TimeEstimate() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.TimeEstimate }).(pulumi.IntOutput)
}

// The title of the issue.
func (o GetProjectIssuesIssueOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.Title }).(pulumi.StringOutput)
}

// The total time spent of the issue.
func (o GetProjectIssuesIssueOutput) TotalTimeSpent() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.TotalTimeSpent }).(pulumi.IntOutput)
}

// When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
func (o GetProjectIssuesIssueOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The number of upvotes the issue has received.
func (o GetProjectIssuesIssueOutput) Upvotes() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Upvotes }).(pulumi.IntOutput)
}

// The number of user notes on the issue.
func (o GetProjectIssuesIssueOutput) UserNotesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.UserNotesCount }).(pulumi.IntOutput)
}

// The web URL of the issue.
func (o GetProjectIssuesIssueOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.WebUrl }).(pulumi.StringOutput)
}

// The weight of the issue. Valid values are greater than or equal to 0.
func (o GetProjectIssuesIssueOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Weight }).(pulumi.IntOutput)
}

type GetProjectIssuesIssueArrayOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssue)(nil)).Elem()
}

func (o GetProjectIssuesIssueArrayOutput) ToGetProjectIssuesIssueArrayOutput() GetProjectIssuesIssueArrayOutput {
	return o
}

func (o GetProjectIssuesIssueArrayOutput) ToGetProjectIssuesIssueArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueArrayOutput {
	return o
}

func (o GetProjectIssuesIssueArrayOutput) Index(i pulumi.IntInput) GetProjectIssuesIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectIssuesIssue {
		return vs[0].([]GetProjectIssuesIssue)[vs[1].(int)]
	}).(GetProjectIssuesIssueOutput)
}

type GetProjectIssuesIssueTaskCompletionStatus struct {
	// The number of tasks that are completed.
	CompletedCount int `pulumi:"completedCount"`
	// The number of tasks.
	Count int `pulumi:"count"`
}

// GetProjectIssuesIssueTaskCompletionStatusInput is an input type that accepts GetProjectIssuesIssueTaskCompletionStatusArgs and GetProjectIssuesIssueTaskCompletionStatusOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueTaskCompletionStatusInput` via:
//
//	GetProjectIssuesIssueTaskCompletionStatusArgs{...}
type GetProjectIssuesIssueTaskCompletionStatusInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueTaskCompletionStatusOutput() GetProjectIssuesIssueTaskCompletionStatusOutput
	ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(context.Context) GetProjectIssuesIssueTaskCompletionStatusOutput
}

type GetProjectIssuesIssueTaskCompletionStatusArgs struct {
	// The number of tasks that are completed.
	CompletedCount pulumi.IntInput `pulumi:"completedCount"`
	// The number of tasks.
	Count pulumi.IntInput `pulumi:"count"`
}

func (GetProjectIssuesIssueTaskCompletionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssuesIssueTaskCompletionStatusArgs) ToGetProjectIssuesIssueTaskCompletionStatusOutput() GetProjectIssuesIssueTaskCompletionStatusOutput {
	return i.ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueTaskCompletionStatusArgs) ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueTaskCompletionStatusOutput)
}

// GetProjectIssuesIssueTaskCompletionStatusArrayInput is an input type that accepts GetProjectIssuesIssueTaskCompletionStatusArray and GetProjectIssuesIssueTaskCompletionStatusArrayOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueTaskCompletionStatusArrayInput` via:
//
//	GetProjectIssuesIssueTaskCompletionStatusArray{ GetProjectIssuesIssueTaskCompletionStatusArgs{...} }
type GetProjectIssuesIssueTaskCompletionStatusArrayInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueTaskCompletionStatusArrayOutput() GetProjectIssuesIssueTaskCompletionStatusArrayOutput
	ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(context.Context) GetProjectIssuesIssueTaskCompletionStatusArrayOutput
}

type GetProjectIssuesIssueTaskCompletionStatusArray []GetProjectIssuesIssueTaskCompletionStatusInput

func (GetProjectIssuesIssueTaskCompletionStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssuesIssueTaskCompletionStatusArray) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutput() GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return i.ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueTaskCompletionStatusArray) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueTaskCompletionStatusArrayOutput)
}

type GetProjectIssuesIssueTaskCompletionStatusOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueTaskCompletionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssuesIssueTaskCompletionStatusOutput) ToGetProjectIssuesIssueTaskCompletionStatusOutput() GetProjectIssuesIssueTaskCompletionStatusOutput {
	return o
}

func (o GetProjectIssuesIssueTaskCompletionStatusOutput) ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusOutput {
	return o
}

// The number of tasks that are completed.
func (o GetProjectIssuesIssueTaskCompletionStatusOutput) CompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssueTaskCompletionStatus) int { return v.CompletedCount }).(pulumi.IntOutput)
}

// The number of tasks.
func (o GetProjectIssuesIssueTaskCompletionStatusOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssueTaskCompletionStatus) int { return v.Count }).(pulumi.IntOutput)
}

type GetProjectIssuesIssueTaskCompletionStatusArrayOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueTaskCompletionStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssuesIssueTaskCompletionStatusArrayOutput) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutput() GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssuesIssueTaskCompletionStatusArrayOutput) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssuesIssueTaskCompletionStatusArrayOutput) Index(i pulumi.IntInput) GetProjectIssuesIssueTaskCompletionStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectIssuesIssueTaskCompletionStatus {
		return vs[0].([]GetProjectIssuesIssueTaskCompletionStatus)[vs[1].(int)]
	}).(GetProjectIssuesIssueTaskCompletionStatusOutput)
}

type GetProjectMembershipMember struct {
	// The level of access to the group.
	AccessLevel string `pulumi:"accessLevel"`
	// The avatar URL of the user.
	AvatarUrl string `pulumi:"avatarUrl"`
	// Expiration date for the group membership.
	ExpiresAt string `pulumi:"expiresAt"`
	// The unique id assigned to the user by the gitlab server.
	Id int `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// Whether the user is active or blocked.
	State string `pulumi:"state"`
	// The username of the user.
	Username string `pulumi:"username"`
	// User's website URL.
	WebUrl string `pulumi:"webUrl"`
}

// GetProjectMembershipMemberInput is an input type that accepts GetProjectMembershipMemberArgs and GetProjectMembershipMemberOutput values.
// You can construct a concrete instance of `GetProjectMembershipMemberInput` via:
//
//	GetProjectMembershipMemberArgs{...}
type GetProjectMembershipMemberInput interface {
	pulumi.Input

	ToGetProjectMembershipMemberOutput() GetProjectMembershipMemberOutput
	ToGetProjectMembershipMemberOutputWithContext(context.Context) GetProjectMembershipMemberOutput
}

type GetProjectMembershipMemberArgs struct {
	// The level of access to the group.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// The avatar URL of the user.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// Expiration date for the group membership.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The unique id assigned to the user by the gitlab server.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the user is active or blocked.
	State pulumi.StringInput `pulumi:"state"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// User's website URL.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectMembershipMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMembershipMember)(nil)).Elem()
}

func (i GetProjectMembershipMemberArgs) ToGetProjectMembershipMemberOutput() GetProjectMembershipMemberOutput {
	return i.ToGetProjectMembershipMemberOutputWithContext(context.Background())
}

func (i GetProjectMembershipMemberArgs) ToGetProjectMembershipMemberOutputWithContext(ctx context.Context) GetProjectMembershipMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMembershipMemberOutput)
}

// GetProjectMembershipMemberArrayInput is an input type that accepts GetProjectMembershipMemberArray and GetProjectMembershipMemberArrayOutput values.
// You can construct a concrete instance of `GetProjectMembershipMemberArrayInput` via:
//
//	GetProjectMembershipMemberArray{ GetProjectMembershipMemberArgs{...} }
type GetProjectMembershipMemberArrayInput interface {
	pulumi.Input

	ToGetProjectMembershipMemberArrayOutput() GetProjectMembershipMemberArrayOutput
	ToGetProjectMembershipMemberArrayOutputWithContext(context.Context) GetProjectMembershipMemberArrayOutput
}

type GetProjectMembershipMemberArray []GetProjectMembershipMemberInput

func (GetProjectMembershipMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMembershipMember)(nil)).Elem()
}

func (i GetProjectMembershipMemberArray) ToGetProjectMembershipMemberArrayOutput() GetProjectMembershipMemberArrayOutput {
	return i.ToGetProjectMembershipMemberArrayOutputWithContext(context.Background())
}

func (i GetProjectMembershipMemberArray) ToGetProjectMembershipMemberArrayOutputWithContext(ctx context.Context) GetProjectMembershipMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMembershipMemberArrayOutput)
}

type GetProjectMembershipMemberOutput struct{ *pulumi.OutputState }

func (GetProjectMembershipMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMembershipMember)(nil)).Elem()
}

func (o GetProjectMembershipMemberOutput) ToGetProjectMembershipMemberOutput() GetProjectMembershipMemberOutput {
	return o
}

func (o GetProjectMembershipMemberOutput) ToGetProjectMembershipMemberOutputWithContext(ctx context.Context) GetProjectMembershipMemberOutput {
	return o
}

// The level of access to the group.
func (o GetProjectMembershipMemberOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// The avatar URL of the user.
func (o GetProjectMembershipMemberOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// Expiration date for the group membership.
func (o GetProjectMembershipMemberOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The unique id assigned to the user by the gitlab server.
func (o GetProjectMembershipMemberOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the user.
func (o GetProjectMembershipMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the user is active or blocked.
func (o GetProjectMembershipMemberOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.State }).(pulumi.StringOutput)
}

// The username of the user.
func (o GetProjectMembershipMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.Username }).(pulumi.StringOutput)
}

// User's website URL.
func (o GetProjectMembershipMemberOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectMembershipMemberArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMembershipMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMembershipMember)(nil)).Elem()
}

func (o GetProjectMembershipMemberArrayOutput) ToGetProjectMembershipMemberArrayOutput() GetProjectMembershipMemberArrayOutput {
	return o
}

func (o GetProjectMembershipMemberArrayOutput) ToGetProjectMembershipMemberArrayOutputWithContext(ctx context.Context) GetProjectMembershipMemberArrayOutput {
	return o
}

func (o GetProjectMembershipMemberArrayOutput) Index(i pulumi.IntInput) GetProjectMembershipMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMembershipMember {
		return vs[0].([]GetProjectMembershipMember)[vs[1].(int)]
	}).(GetProjectMembershipMemberOutput)
}

type GetProjectMergeRequestAssignee struct {
	// A link to the user's avatar image.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The internal ID number of the user.
	Id float64 `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The state of the user account.
	State string `pulumi:"state"`
	// The username of the user.
	Username string `pulumi:"username"`
	// A link to the user's profile page.
	WebUrl string `pulumi:"webUrl"`
}

// GetProjectMergeRequestAssigneeInput is an input type that accepts GetProjectMergeRequestAssigneeArgs and GetProjectMergeRequestAssigneeOutput values.
// You can construct a concrete instance of `GetProjectMergeRequestAssigneeInput` via:
//
//	GetProjectMergeRequestAssigneeArgs{...}
type GetProjectMergeRequestAssigneeInput interface {
	pulumi.Input

	ToGetProjectMergeRequestAssigneeOutput() GetProjectMergeRequestAssigneeOutput
	ToGetProjectMergeRequestAssigneeOutputWithContext(context.Context) GetProjectMergeRequestAssigneeOutput
}

type GetProjectMergeRequestAssigneeArgs struct {
	// A link to the user's avatar image.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The internal ID number of the user.
	Id pulumi.Float64Input `pulumi:"id"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// The state of the user account.
	State pulumi.StringInput `pulumi:"state"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// A link to the user's profile page.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectMergeRequestAssigneeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestAssignee)(nil)).Elem()
}

func (i GetProjectMergeRequestAssigneeArgs) ToGetProjectMergeRequestAssigneeOutput() GetProjectMergeRequestAssigneeOutput {
	return i.ToGetProjectMergeRequestAssigneeOutputWithContext(context.Background())
}

func (i GetProjectMergeRequestAssigneeArgs) ToGetProjectMergeRequestAssigneeOutputWithContext(ctx context.Context) GetProjectMergeRequestAssigneeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMergeRequestAssigneeOutput)
}

// GetProjectMergeRequestAssigneeArrayInput is an input type that accepts GetProjectMergeRequestAssigneeArray and GetProjectMergeRequestAssigneeArrayOutput values.
// You can construct a concrete instance of `GetProjectMergeRequestAssigneeArrayInput` via:
//
//	GetProjectMergeRequestAssigneeArray{ GetProjectMergeRequestAssigneeArgs{...} }
type GetProjectMergeRequestAssigneeArrayInput interface {
	pulumi.Input

	ToGetProjectMergeRequestAssigneeArrayOutput() GetProjectMergeRequestAssigneeArrayOutput
	ToGetProjectMergeRequestAssigneeArrayOutputWithContext(context.Context) GetProjectMergeRequestAssigneeArrayOutput
}

type GetProjectMergeRequestAssigneeArray []GetProjectMergeRequestAssigneeInput

func (GetProjectMergeRequestAssigneeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMergeRequestAssignee)(nil)).Elem()
}

func (i GetProjectMergeRequestAssigneeArray) ToGetProjectMergeRequestAssigneeArrayOutput() GetProjectMergeRequestAssigneeArrayOutput {
	return i.ToGetProjectMergeRequestAssigneeArrayOutputWithContext(context.Background())
}

func (i GetProjectMergeRequestAssigneeArray) ToGetProjectMergeRequestAssigneeArrayOutputWithContext(ctx context.Context) GetProjectMergeRequestAssigneeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMergeRequestAssigneeArrayOutput)
}

type GetProjectMergeRequestAssigneeOutput struct{ *pulumi.OutputState }

func (GetProjectMergeRequestAssigneeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestAssignee)(nil)).Elem()
}

func (o GetProjectMergeRequestAssigneeOutput) ToGetProjectMergeRequestAssigneeOutput() GetProjectMergeRequestAssigneeOutput {
	return o
}

func (o GetProjectMergeRequestAssigneeOutput) ToGetProjectMergeRequestAssigneeOutputWithContext(ctx context.Context) GetProjectMergeRequestAssigneeOutput {
	return o
}

// A link to the user's avatar image.
func (o GetProjectMergeRequestAssigneeOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAssignee) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The internal ID number of the user.
func (o GetProjectMergeRequestAssigneeOutput) Id() pulumi.Float64Output {
	return o.ApplyT(func(v GetProjectMergeRequestAssignee) float64 { return v.Id }).(pulumi.Float64Output)
}

// The name of the user.
func (o GetProjectMergeRequestAssigneeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAssignee) string { return v.Name }).(pulumi.StringOutput)
}

// The state of the user account.
func (o GetProjectMergeRequestAssigneeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAssignee) string { return v.State }).(pulumi.StringOutput)
}

// The username of the user.
func (o GetProjectMergeRequestAssigneeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAssignee) string { return v.Username }).(pulumi.StringOutput)
}

// A link to the user's profile page.
func (o GetProjectMergeRequestAssigneeOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAssignee) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectMergeRequestAssigneeArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMergeRequestAssigneeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMergeRequestAssignee)(nil)).Elem()
}

func (o GetProjectMergeRequestAssigneeArrayOutput) ToGetProjectMergeRequestAssigneeArrayOutput() GetProjectMergeRequestAssigneeArrayOutput {
	return o
}

func (o GetProjectMergeRequestAssigneeArrayOutput) ToGetProjectMergeRequestAssigneeArrayOutputWithContext(ctx context.Context) GetProjectMergeRequestAssigneeArrayOutput {
	return o
}

func (o GetProjectMergeRequestAssigneeArrayOutput) Index(i pulumi.IntInput) GetProjectMergeRequestAssigneeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMergeRequestAssignee {
		return vs[0].([]GetProjectMergeRequestAssignee)[vs[1].(int)]
	}).(GetProjectMergeRequestAssigneeOutput)
}

type GetProjectMergeRequestAuthor struct {
	// A link to the user's avatar image.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The internal ID number of the user.
	Id float64 `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The state of the user account.
	State string `pulumi:"state"`
	// The username of the user.
	Username string `pulumi:"username"`
	// A link to the user's profile page.
	WebUrl string `pulumi:"webUrl"`
}

// GetProjectMergeRequestAuthorInput is an input type that accepts GetProjectMergeRequestAuthorArgs and GetProjectMergeRequestAuthorOutput values.
// You can construct a concrete instance of `GetProjectMergeRequestAuthorInput` via:
//
//	GetProjectMergeRequestAuthorArgs{...}
type GetProjectMergeRequestAuthorInput interface {
	pulumi.Input

	ToGetProjectMergeRequestAuthorOutput() GetProjectMergeRequestAuthorOutput
	ToGetProjectMergeRequestAuthorOutputWithContext(context.Context) GetProjectMergeRequestAuthorOutput
}

type GetProjectMergeRequestAuthorArgs struct {
	// A link to the user's avatar image.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The internal ID number of the user.
	Id pulumi.Float64Input `pulumi:"id"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// The state of the user account.
	State pulumi.StringInput `pulumi:"state"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// A link to the user's profile page.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectMergeRequestAuthorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestAuthor)(nil)).Elem()
}

func (i GetProjectMergeRequestAuthorArgs) ToGetProjectMergeRequestAuthorOutput() GetProjectMergeRequestAuthorOutput {
	return i.ToGetProjectMergeRequestAuthorOutputWithContext(context.Background())
}

func (i GetProjectMergeRequestAuthorArgs) ToGetProjectMergeRequestAuthorOutputWithContext(ctx context.Context) GetProjectMergeRequestAuthorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMergeRequestAuthorOutput)
}

type GetProjectMergeRequestAuthorOutput struct{ *pulumi.OutputState }

func (GetProjectMergeRequestAuthorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestAuthor)(nil)).Elem()
}

func (o GetProjectMergeRequestAuthorOutput) ToGetProjectMergeRequestAuthorOutput() GetProjectMergeRequestAuthorOutput {
	return o
}

func (o GetProjectMergeRequestAuthorOutput) ToGetProjectMergeRequestAuthorOutputWithContext(ctx context.Context) GetProjectMergeRequestAuthorOutput {
	return o
}

// A link to the user's avatar image.
func (o GetProjectMergeRequestAuthorOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAuthor) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The internal ID number of the user.
func (o GetProjectMergeRequestAuthorOutput) Id() pulumi.Float64Output {
	return o.ApplyT(func(v GetProjectMergeRequestAuthor) float64 { return v.Id }).(pulumi.Float64Output)
}

// The name of the user.
func (o GetProjectMergeRequestAuthorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAuthor) string { return v.Name }).(pulumi.StringOutput)
}

// The state of the user account.
func (o GetProjectMergeRequestAuthorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAuthor) string { return v.State }).(pulumi.StringOutput)
}

// The username of the user.
func (o GetProjectMergeRequestAuthorOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAuthor) string { return v.Username }).(pulumi.StringOutput)
}

// A link to the user's profile page.
func (o GetProjectMergeRequestAuthorOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestAuthor) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectMergeRequestClosedBy struct {
	// A link to the user's avatar image.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The internal ID number of the user.
	Id float64 `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The state of the user account.
	State string `pulumi:"state"`
	// The username of the user.
	Username string `pulumi:"username"`
	// A link to the user's profile page.
	WebUrl string `pulumi:"webUrl"`
}

// GetProjectMergeRequestClosedByInput is an input type that accepts GetProjectMergeRequestClosedByArgs and GetProjectMergeRequestClosedByOutput values.
// You can construct a concrete instance of `GetProjectMergeRequestClosedByInput` via:
//
//	GetProjectMergeRequestClosedByArgs{...}
type GetProjectMergeRequestClosedByInput interface {
	pulumi.Input

	ToGetProjectMergeRequestClosedByOutput() GetProjectMergeRequestClosedByOutput
	ToGetProjectMergeRequestClosedByOutputWithContext(context.Context) GetProjectMergeRequestClosedByOutput
}

type GetProjectMergeRequestClosedByArgs struct {
	// A link to the user's avatar image.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The internal ID number of the user.
	Id pulumi.Float64Input `pulumi:"id"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// The state of the user account.
	State pulumi.StringInput `pulumi:"state"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// A link to the user's profile page.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectMergeRequestClosedByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestClosedBy)(nil)).Elem()
}

func (i GetProjectMergeRequestClosedByArgs) ToGetProjectMergeRequestClosedByOutput() GetProjectMergeRequestClosedByOutput {
	return i.ToGetProjectMergeRequestClosedByOutputWithContext(context.Background())
}

func (i GetProjectMergeRequestClosedByArgs) ToGetProjectMergeRequestClosedByOutputWithContext(ctx context.Context) GetProjectMergeRequestClosedByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMergeRequestClosedByOutput)
}

type GetProjectMergeRequestClosedByOutput struct{ *pulumi.OutputState }

func (GetProjectMergeRequestClosedByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestClosedBy)(nil)).Elem()
}

func (o GetProjectMergeRequestClosedByOutput) ToGetProjectMergeRequestClosedByOutput() GetProjectMergeRequestClosedByOutput {
	return o
}

func (o GetProjectMergeRequestClosedByOutput) ToGetProjectMergeRequestClosedByOutputWithContext(ctx context.Context) GetProjectMergeRequestClosedByOutput {
	return o
}

// A link to the user's avatar image.
func (o GetProjectMergeRequestClosedByOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestClosedBy) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The internal ID number of the user.
func (o GetProjectMergeRequestClosedByOutput) Id() pulumi.Float64Output {
	return o.ApplyT(func(v GetProjectMergeRequestClosedBy) float64 { return v.Id }).(pulumi.Float64Output)
}

// The name of the user.
func (o GetProjectMergeRequestClosedByOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestClosedBy) string { return v.Name }).(pulumi.StringOutput)
}

// The state of the user account.
func (o GetProjectMergeRequestClosedByOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestClosedBy) string { return v.State }).(pulumi.StringOutput)
}

// The username of the user.
func (o GetProjectMergeRequestClosedByOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestClosedBy) string { return v.Username }).(pulumi.StringOutput)
}

// A link to the user's profile page.
func (o GetProjectMergeRequestClosedByOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestClosedBy) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectMilestonesMilestone struct {
	// The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the milestone.
	Description string `pulumi:"description"`
	// The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
	DueDate string `pulumi:"dueDate"`
	// Bool, true if milestone expired.
	Expired bool `pulumi:"expired"`
	// The ID of the project's milestone.
	Iid int `pulumi:"iid"`
	// The instance-wide ID of the project’s milestone.
	MilestoneId int `pulumi:"milestoneId"`
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project string `pulumi:"project"`
	// The project ID of milestone.
	ProjectId int `pulumi:"projectId"`
	// The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
	StartDate string `pulumi:"startDate"`
	// The state of the milestone. Valid values are: `active`, `closed`.
	State string `pulumi:"state"`
	// The title of a milestone.
	Title string `pulumi:"title"`
	// The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	UpdatedAt string `pulumi:"updatedAt"`
	// The web URL of the milestone.
	WebUrl string `pulumi:"webUrl"`
}

// GetProjectMilestonesMilestoneInput is an input type that accepts GetProjectMilestonesMilestoneArgs and GetProjectMilestonesMilestoneOutput values.
// You can construct a concrete instance of `GetProjectMilestonesMilestoneInput` via:
//
//	GetProjectMilestonesMilestoneArgs{...}
type GetProjectMilestonesMilestoneInput interface {
	pulumi.Input

	ToGetProjectMilestonesMilestoneOutput() GetProjectMilestonesMilestoneOutput
	ToGetProjectMilestonesMilestoneOutputWithContext(context.Context) GetProjectMilestonesMilestoneOutput
}

type GetProjectMilestonesMilestoneArgs struct {
	// The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the milestone.
	Description pulumi.StringInput `pulumi:"description"`
	// The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
	DueDate pulumi.StringInput `pulumi:"dueDate"`
	// Bool, true if milestone expired.
	Expired pulumi.BoolInput `pulumi:"expired"`
	// The ID of the project's milestone.
	Iid pulumi.IntInput `pulumi:"iid"`
	// The instance-wide ID of the project’s milestone.
	MilestoneId pulumi.IntInput `pulumi:"milestoneId"`
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project pulumi.StringInput `pulumi:"project"`
	// The project ID of milestone.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// The state of the milestone. Valid values are: `active`, `closed`.
	State pulumi.StringInput `pulumi:"state"`
	// The title of a milestone.
	Title pulumi.StringInput `pulumi:"title"`
	// The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The web URL of the milestone.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectMilestonesMilestoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMilestonesMilestone)(nil)).Elem()
}

func (i GetProjectMilestonesMilestoneArgs) ToGetProjectMilestonesMilestoneOutput() GetProjectMilestonesMilestoneOutput {
	return i.ToGetProjectMilestonesMilestoneOutputWithContext(context.Background())
}

func (i GetProjectMilestonesMilestoneArgs) ToGetProjectMilestonesMilestoneOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMilestonesMilestoneOutput)
}

// GetProjectMilestonesMilestoneArrayInput is an input type that accepts GetProjectMilestonesMilestoneArray and GetProjectMilestonesMilestoneArrayOutput values.
// You can construct a concrete instance of `GetProjectMilestonesMilestoneArrayInput` via:
//
//	GetProjectMilestonesMilestoneArray{ GetProjectMilestonesMilestoneArgs{...} }
type GetProjectMilestonesMilestoneArrayInput interface {
	pulumi.Input

	ToGetProjectMilestonesMilestoneArrayOutput() GetProjectMilestonesMilestoneArrayOutput
	ToGetProjectMilestonesMilestoneArrayOutputWithContext(context.Context) GetProjectMilestonesMilestoneArrayOutput
}

type GetProjectMilestonesMilestoneArray []GetProjectMilestonesMilestoneInput

func (GetProjectMilestonesMilestoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMilestonesMilestone)(nil)).Elem()
}

func (i GetProjectMilestonesMilestoneArray) ToGetProjectMilestonesMilestoneArrayOutput() GetProjectMilestonesMilestoneArrayOutput {
	return i.ToGetProjectMilestonesMilestoneArrayOutputWithContext(context.Background())
}

func (i GetProjectMilestonesMilestoneArray) ToGetProjectMilestonesMilestoneArrayOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMilestonesMilestoneArrayOutput)
}

type GetProjectMilestonesMilestoneOutput struct{ *pulumi.OutputState }

func (GetProjectMilestonesMilestoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMilestonesMilestone)(nil)).Elem()
}

func (o GetProjectMilestonesMilestoneOutput) ToGetProjectMilestonesMilestoneOutput() GetProjectMilestonesMilestoneOutput {
	return o
}

func (o GetProjectMilestonesMilestoneOutput) ToGetProjectMilestonesMilestoneOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneOutput {
	return o
}

// The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
func (o GetProjectMilestonesMilestoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the milestone.
func (o GetProjectMilestonesMilestoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.Description }).(pulumi.StringOutput)
}

// The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
func (o GetProjectMilestonesMilestoneOutput) DueDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.DueDate }).(pulumi.StringOutput)
}

// Bool, true if milestone expired.
func (o GetProjectMilestonesMilestoneOutput) Expired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) bool { return v.Expired }).(pulumi.BoolOutput)
}

// The ID of the project's milestone.
func (o GetProjectMilestonesMilestoneOutput) Iid() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) int { return v.Iid }).(pulumi.IntOutput)
}

// The instance-wide ID of the project’s milestone.
func (o GetProjectMilestonesMilestoneOutput) MilestoneId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) int { return v.MilestoneId }).(pulumi.IntOutput)
}

// The ID or URL-encoded path of the project owned by the authenticated user.
func (o GetProjectMilestonesMilestoneOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.Project }).(pulumi.StringOutput)
}

// The project ID of milestone.
func (o GetProjectMilestonesMilestoneOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) int { return v.ProjectId }).(pulumi.IntOutput)
}

// The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
func (o GetProjectMilestonesMilestoneOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.StartDate }).(pulumi.StringOutput)
}

// The state of the milestone. Valid values are: `active`, `closed`.
func (o GetProjectMilestonesMilestoneOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.State }).(pulumi.StringOutput)
}

// The title of a milestone.
func (o GetProjectMilestonesMilestoneOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.Title }).(pulumi.StringOutput)
}

// The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
func (o GetProjectMilestonesMilestoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The web URL of the milestone.
func (o GetProjectMilestonesMilestoneOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectMilestonesMilestoneArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMilestonesMilestoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMilestonesMilestone)(nil)).Elem()
}

func (o GetProjectMilestonesMilestoneArrayOutput) ToGetProjectMilestonesMilestoneArrayOutput() GetProjectMilestonesMilestoneArrayOutput {
	return o
}

func (o GetProjectMilestonesMilestoneArrayOutput) ToGetProjectMilestonesMilestoneArrayOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneArrayOutput {
	return o
}

func (o GetProjectMilestonesMilestoneArrayOutput) Index(i pulumi.IntInput) GetProjectMilestonesMilestoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMilestonesMilestone {
		return vs[0].([]GetProjectMilestonesMilestone)[vs[1].(int)]
	}).(GetProjectMilestonesMilestoneOutput)
}

type GetProjectProtectedBranchMergeAccessLevel struct {
	// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// GetProjectProtectedBranchMergeAccessLevelInput is an input type that accepts GetProjectProtectedBranchMergeAccessLevelArgs and GetProjectProtectedBranchMergeAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchMergeAccessLevelInput` via:
//
//	GetProjectProtectedBranchMergeAccessLevelArgs{...}
type GetProjectProtectedBranchMergeAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchMergeAccessLevelOutput
	ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchMergeAccessLevelOutput
}

type GetProjectProtectedBranchMergeAccessLevelArgs struct {
	// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GetProjectProtectedBranchMergeAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchMergeAccessLevelOutput {
	return i.ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchMergeAccessLevelOutput)
}

// GetProjectProtectedBranchMergeAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchMergeAccessLevelArray and GetProjectProtectedBranchMergeAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchMergeAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchMergeAccessLevelArray{ GetProjectProtectedBranchMergeAccessLevelArgs{...} }
type GetProjectProtectedBranchMergeAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchMergeAccessLevelArrayOutput
	ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchMergeAccessLevelArrayOutput
}

type GetProjectProtectedBranchMergeAccessLevelArray []GetProjectProtectedBranchMergeAccessLevelInput

func (GetProjectProtectedBranchMergeAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchMergeAccessLevelArrayOutput)
}

type GetProjectProtectedBranchMergeAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchMergeAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchMergeAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelOutput {
	return o
}

// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
func (o GetProjectProtectedBranchMergeAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// Readable description of access level.
func (o GetProjectProtectedBranchMergeAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) string { return v.AccessLevelDescription }).(pulumi.StringOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o GetProjectProtectedBranchMergeAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o GetProjectProtectedBranchMergeAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GetProjectProtectedBranchMergeAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchMergeAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchMergeAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchMergeAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchMergeAccessLevel {
		return vs[0].([]GetProjectProtectedBranchMergeAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchMergeAccessLevelOutput)
}

type GetProjectProtectedBranchPushAccessLevel struct {
	// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
	DeployKeyId *int `pulumi:"deployKeyId"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
	UserId *int `pulumi:"userId"`
}

// GetProjectProtectedBranchPushAccessLevelInput is an input type that accepts GetProjectProtectedBranchPushAccessLevelArgs and GetProjectProtectedBranchPushAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchPushAccessLevelInput` via:
//
//	GetProjectProtectedBranchPushAccessLevelArgs{...}
type GetProjectProtectedBranchPushAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchPushAccessLevelOutput
	ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchPushAccessLevelOutput
}

type GetProjectProtectedBranchPushAccessLevelArgs struct {
	// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
	DeployKeyId pulumi.IntPtrInput `pulumi:"deployKeyId"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GetProjectProtectedBranchPushAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchPushAccessLevelOutput {
	return i.ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchPushAccessLevelOutput)
}

// GetProjectProtectedBranchPushAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchPushAccessLevelArray and GetProjectProtectedBranchPushAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchPushAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchPushAccessLevelArray{ GetProjectProtectedBranchPushAccessLevelArgs{...} }
type GetProjectProtectedBranchPushAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchPushAccessLevelArrayOutput
	ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchPushAccessLevelArrayOutput
}

type GetProjectProtectedBranchPushAccessLevelArray []GetProjectProtectedBranchPushAccessLevelInput

func (GetProjectProtectedBranchPushAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchPushAccessLevelArrayOutput)
}

type GetProjectProtectedBranchPushAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchPushAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchPushAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelOutput {
	return o
}

// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
func (o GetProjectProtectedBranchPushAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// Readable description of access level.
func (o GetProjectProtectedBranchPushAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) string { return v.AccessLevelDescription }).(pulumi.StringOutput)
}

// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
func (o GetProjectProtectedBranchPushAccessLevelOutput) DeployKeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) *int { return v.DeployKeyId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
func (o GetProjectProtectedBranchPushAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
func (o GetProjectProtectedBranchPushAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GetProjectProtectedBranchPushAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchPushAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchPushAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchPushAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchPushAccessLevel {
		return vs[0].([]GetProjectProtectedBranchPushAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchPushAccessLevelOutput)
}

type GetProjectProtectedBranchesProtectedBranch struct {
	// Whether force push is allowed.
	AllowForcePush bool `pulumi:"allowForcePush"`
	// Reject code pushes that change files listed in the CODEOWNERS file.
	CodeOwnerApprovalRequired bool `pulumi:"codeOwnerApprovalRequired"`
	// The ID of this resource.
	Id int `pulumi:"id"`
	// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
	MergeAccessLevels []GetProjectProtectedBranchesProtectedBranchMergeAccessLevel `pulumi:"mergeAccessLevels"`
	// The name of the protected branch.
	Name string `pulumi:"name"`
	// Array of access levels and user(s)/group(s) allowed to push to protected branch.
	PushAccessLevels []GetProjectProtectedBranchesProtectedBranchPushAccessLevel `pulumi:"pushAccessLevels"`
}

// GetProjectProtectedBranchesProtectedBranchInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchArgs and GetProjectProtectedBranchesProtectedBranchOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchArgs{...}
type GetProjectProtectedBranchesProtectedBranchInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchOutput() GetProjectProtectedBranchesProtectedBranchOutput
	ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchOutput
}

type GetProjectProtectedBranchesProtectedBranchArgs struct {
	// Whether force push is allowed.
	AllowForcePush pulumi.BoolInput `pulumi:"allowForcePush"`
	// Reject code pushes that change files listed in the CODEOWNERS file.
	CodeOwnerApprovalRequired pulumi.BoolInput `pulumi:"codeOwnerApprovalRequired"`
	// The ID of this resource.
	Id pulumi.IntInput `pulumi:"id"`
	// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
	MergeAccessLevels GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput `pulumi:"mergeAccessLevels"`
	// The name of the protected branch.
	Name pulumi.StringInput `pulumi:"name"`
	// Array of access levels and user(s)/group(s) allowed to push to protected branch.
	PushAccessLevels GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput `pulumi:"pushAccessLevels"`
}

func (GetProjectProtectedBranchesProtectedBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchArgs) ToGetProjectProtectedBranchesProtectedBranchOutput() GetProjectProtectedBranchesProtectedBranchOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchArgs) ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchOutput)
}

// GetProjectProtectedBranchesProtectedBranchArrayInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchArray and GetProjectProtectedBranchesProtectedBranchArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchArrayInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchArray{ GetProjectProtectedBranchesProtectedBranchArgs{...} }
type GetProjectProtectedBranchesProtectedBranchArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchArrayOutput() GetProjectProtectedBranchesProtectedBranchArrayOutput
	ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchArrayOutput
}

type GetProjectProtectedBranchesProtectedBranchArray []GetProjectProtectedBranchesProtectedBranchInput

func (GetProjectProtectedBranchesProtectedBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchArray) ToGetProjectProtectedBranchesProtectedBranchArrayOutput() GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchArray) ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchArrayOutput)
}

type GetProjectProtectedBranchesProtectedBranchOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) ToGetProjectProtectedBranchesProtectedBranchOutput() GetProjectProtectedBranchesProtectedBranchOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchOutput {
	return o
}

// Whether force push is allowed.
func (o GetProjectProtectedBranchesProtectedBranchOutput) AllowForcePush() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) bool { return v.AllowForcePush }).(pulumi.BoolOutput)
}

// Reject code pushes that change files listed in the CODEOWNERS file.
func (o GetProjectProtectedBranchesProtectedBranchOutput) CodeOwnerApprovalRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) bool { return v.CodeOwnerApprovalRequired }).(pulumi.BoolOutput)
}

// The ID of this resource.
func (o GetProjectProtectedBranchesProtectedBranchOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) int { return v.Id }).(pulumi.IntOutput)
}

// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
func (o GetProjectProtectedBranchesProtectedBranchOutput) MergeAccessLevels() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) []GetProjectProtectedBranchesProtectedBranchMergeAccessLevel {
		return v.MergeAccessLevels
	}).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput)
}

// The name of the protected branch.
func (o GetProjectProtectedBranchesProtectedBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) string { return v.Name }).(pulumi.StringOutput)
}

// Array of access levels and user(s)/group(s) allowed to push to protected branch.
func (o GetProjectProtectedBranchesProtectedBranchOutput) PushAccessLevels() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) []GetProjectProtectedBranchesProtectedBranchPushAccessLevel {
		return v.PushAccessLevels
	}).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput)
}

type GetProjectProtectedBranchesProtectedBranchArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchArrayOutput) ToGetProjectProtectedBranchesProtectedBranchArrayOutput() GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchArrayOutput) ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchesProtectedBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchesProtectedBranch {
		return vs[0].([]GetProjectProtectedBranchesProtectedBranch)[vs[1].(int)]
	}).(GetProjectProtectedBranchesProtectedBranchOutput)
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevel struct {
	// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs and GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs{...}
type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput
	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs struct {
	// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput)
}

// GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray and GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray{ GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs{...} }
type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput
	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray []GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput)
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return o
}

// Access levels allowed to merge to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// Readable description of access level.
func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) string {
		return v.AccessLevelDescription
	}).(pulumi.StringOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchesProtectedBranchMergeAccessLevel {
		return vs[0].([]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput)
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevel struct {
	// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
	DeployKeyId *int `pulumi:"deployKeyId"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
	UserId *int `pulumi:"userId"`
}

// GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs and GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs{...}
type GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput
	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs struct {
	// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
	DeployKeyId pulumi.IntPtrInput `pulumi:"deployKeyId"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput)
}

// GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray and GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray{ GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs{...} }
type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput
	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray []GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput)
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return o
}

// Access levels allowed to push to protected branch. Valid values are: `no one`, `developer`, `maintainer`.
func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// Readable description of access level.
func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) string {
		return v.AccessLevelDescription
	}).(pulumi.StringOutput)
}

// The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with `groupId` and `userId`. This field is read-only until Gitlab 17.5.
func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) DeployKeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) *int { return v.DeployKeyId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `userId`.
func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `deployKeyId` and `groupId`.
func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchesProtectedBranchPushAccessLevel {
		return vs[0].([]GetProjectProtectedBranchesProtectedBranchPushAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput)
}

type GetProjectProtectedTagCreateAccessLevel struct {
	// Access level allowed to create protected tags.
	AccessLevel string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action.
	GroupId *int `pulumi:"groupId"`
	// The ID of the create access level.
	Id int `pulumi:"id"`
	// The ID of a GitLab user allowed to perform the relevant action.
	UserId *int `pulumi:"userId"`
}

// GetProjectProtectedTagCreateAccessLevelInput is an input type that accepts GetProjectProtectedTagCreateAccessLevelArgs and GetProjectProtectedTagCreateAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedTagCreateAccessLevelInput` via:
//
//	GetProjectProtectedTagCreateAccessLevelArgs{...}
type GetProjectProtectedTagCreateAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedTagCreateAccessLevelOutput() GetProjectProtectedTagCreateAccessLevelOutput
	ToGetProjectProtectedTagCreateAccessLevelOutputWithContext(context.Context) GetProjectProtectedTagCreateAccessLevelOutput
}

type GetProjectProtectedTagCreateAccessLevelArgs struct {
	// Access level allowed to create protected tags.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of the create access level.
	Id pulumi.IntInput `pulumi:"id"`
	// The ID of a GitLab user allowed to perform the relevant action.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GetProjectProtectedTagCreateAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedTagCreateAccessLevelArgs) ToGetProjectProtectedTagCreateAccessLevelOutput() GetProjectProtectedTagCreateAccessLevelOutput {
	return i.ToGetProjectProtectedTagCreateAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedTagCreateAccessLevelArgs) ToGetProjectProtectedTagCreateAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedTagCreateAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedTagCreateAccessLevelOutput)
}

// GetProjectProtectedTagCreateAccessLevelArrayInput is an input type that accepts GetProjectProtectedTagCreateAccessLevelArray and GetProjectProtectedTagCreateAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedTagCreateAccessLevelArrayInput` via:
//
//	GetProjectProtectedTagCreateAccessLevelArray{ GetProjectProtectedTagCreateAccessLevelArgs{...} }
type GetProjectProtectedTagCreateAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedTagCreateAccessLevelArrayOutput() GetProjectProtectedTagCreateAccessLevelArrayOutput
	ToGetProjectProtectedTagCreateAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedTagCreateAccessLevelArrayOutput
}

type GetProjectProtectedTagCreateAccessLevelArray []GetProjectProtectedTagCreateAccessLevelInput

func (GetProjectProtectedTagCreateAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedTagCreateAccessLevelArray) ToGetProjectProtectedTagCreateAccessLevelArrayOutput() GetProjectProtectedTagCreateAccessLevelArrayOutput {
	return i.ToGetProjectProtectedTagCreateAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedTagCreateAccessLevelArray) ToGetProjectProtectedTagCreateAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedTagCreateAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedTagCreateAccessLevelArrayOutput)
}

type GetProjectProtectedTagCreateAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedTagCreateAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedTagCreateAccessLevelOutput) ToGetProjectProtectedTagCreateAccessLevelOutput() GetProjectProtectedTagCreateAccessLevelOutput {
	return o
}

func (o GetProjectProtectedTagCreateAccessLevelOutput) ToGetProjectProtectedTagCreateAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedTagCreateAccessLevelOutput {
	return o
}

// Access level allowed to create protected tags.
func (o GetProjectProtectedTagCreateAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagCreateAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// Readable description of access level.
func (o GetProjectProtectedTagCreateAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagCreateAccessLevel) string { return v.AccessLevelDescription }).(pulumi.StringOutput)
}

// The ID of a GitLab group allowed to perform the relevant action.
func (o GetProjectProtectedTagCreateAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedTagCreateAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of the create access level.
func (o GetProjectProtectedTagCreateAccessLevelOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedTagCreateAccessLevel) int { return v.Id }).(pulumi.IntOutput)
}

// The ID of a GitLab user allowed to perform the relevant action.
func (o GetProjectProtectedTagCreateAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedTagCreateAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GetProjectProtectedTagCreateAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedTagCreateAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedTagCreateAccessLevelArrayOutput) ToGetProjectProtectedTagCreateAccessLevelArrayOutput() GetProjectProtectedTagCreateAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedTagCreateAccessLevelArrayOutput) ToGetProjectProtectedTagCreateAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedTagCreateAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedTagCreateAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedTagCreateAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedTagCreateAccessLevel {
		return vs[0].([]GetProjectProtectedTagCreateAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedTagCreateAccessLevelOutput)
}

type GetProjectProtectedTagsProtectedTag struct {
	// Array of access levels/user(s)/group(s) allowed to create protected tags.
	CreateAccessLevels []GetProjectProtectedTagsProtectedTagCreateAccessLevel `pulumi:"createAccessLevels"`
	// The name of the protected tag.
	Tag string `pulumi:"tag"`
}

// GetProjectProtectedTagsProtectedTagInput is an input type that accepts GetProjectProtectedTagsProtectedTagArgs and GetProjectProtectedTagsProtectedTagOutput values.
// You can construct a concrete instance of `GetProjectProtectedTagsProtectedTagInput` via:
//
//	GetProjectProtectedTagsProtectedTagArgs{...}
type GetProjectProtectedTagsProtectedTagInput interface {
	pulumi.Input

	ToGetProjectProtectedTagsProtectedTagOutput() GetProjectProtectedTagsProtectedTagOutput
	ToGetProjectProtectedTagsProtectedTagOutputWithContext(context.Context) GetProjectProtectedTagsProtectedTagOutput
}

type GetProjectProtectedTagsProtectedTagArgs struct {
	// Array of access levels/user(s)/group(s) allowed to create protected tags.
	CreateAccessLevels GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayInput `pulumi:"createAccessLevels"`
	// The name of the protected tag.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (GetProjectProtectedTagsProtectedTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagsProtectedTag)(nil)).Elem()
}

func (i GetProjectProtectedTagsProtectedTagArgs) ToGetProjectProtectedTagsProtectedTagOutput() GetProjectProtectedTagsProtectedTagOutput {
	return i.ToGetProjectProtectedTagsProtectedTagOutputWithContext(context.Background())
}

func (i GetProjectProtectedTagsProtectedTagArgs) ToGetProjectProtectedTagsProtectedTagOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedTagsProtectedTagOutput)
}

// GetProjectProtectedTagsProtectedTagArrayInput is an input type that accepts GetProjectProtectedTagsProtectedTagArray and GetProjectProtectedTagsProtectedTagArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedTagsProtectedTagArrayInput` via:
//
//	GetProjectProtectedTagsProtectedTagArray{ GetProjectProtectedTagsProtectedTagArgs{...} }
type GetProjectProtectedTagsProtectedTagArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedTagsProtectedTagArrayOutput() GetProjectProtectedTagsProtectedTagArrayOutput
	ToGetProjectProtectedTagsProtectedTagArrayOutputWithContext(context.Context) GetProjectProtectedTagsProtectedTagArrayOutput
}

type GetProjectProtectedTagsProtectedTagArray []GetProjectProtectedTagsProtectedTagInput

func (GetProjectProtectedTagsProtectedTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedTagsProtectedTag)(nil)).Elem()
}

func (i GetProjectProtectedTagsProtectedTagArray) ToGetProjectProtectedTagsProtectedTagArrayOutput() GetProjectProtectedTagsProtectedTagArrayOutput {
	return i.ToGetProjectProtectedTagsProtectedTagArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedTagsProtectedTagArray) ToGetProjectProtectedTagsProtectedTagArrayOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedTagsProtectedTagArrayOutput)
}

type GetProjectProtectedTagsProtectedTagOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedTagsProtectedTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagsProtectedTag)(nil)).Elem()
}

func (o GetProjectProtectedTagsProtectedTagOutput) ToGetProjectProtectedTagsProtectedTagOutput() GetProjectProtectedTagsProtectedTagOutput {
	return o
}

func (o GetProjectProtectedTagsProtectedTagOutput) ToGetProjectProtectedTagsProtectedTagOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagOutput {
	return o
}

// Array of access levels/user(s)/group(s) allowed to create protected tags.
func (o GetProjectProtectedTagsProtectedTagOutput) CreateAccessLevels() GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput {
	return o.ApplyT(func(v GetProjectProtectedTagsProtectedTag) []GetProjectProtectedTagsProtectedTagCreateAccessLevel {
		return v.CreateAccessLevels
	}).(GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput)
}

// The name of the protected tag.
func (o GetProjectProtectedTagsProtectedTagOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagsProtectedTag) string { return v.Tag }).(pulumi.StringOutput)
}

type GetProjectProtectedTagsProtectedTagArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedTagsProtectedTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedTagsProtectedTag)(nil)).Elem()
}

func (o GetProjectProtectedTagsProtectedTagArrayOutput) ToGetProjectProtectedTagsProtectedTagArrayOutput() GetProjectProtectedTagsProtectedTagArrayOutput {
	return o
}

func (o GetProjectProtectedTagsProtectedTagArrayOutput) ToGetProjectProtectedTagsProtectedTagArrayOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagArrayOutput {
	return o
}

func (o GetProjectProtectedTagsProtectedTagArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedTagsProtectedTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedTagsProtectedTag {
		return vs[0].([]GetProjectProtectedTagsProtectedTag)[vs[1].(int)]
	}).(GetProjectProtectedTagsProtectedTagOutput)
}

type GetProjectProtectedTagsProtectedTagCreateAccessLevel struct {
	// Access level allowed to create protected tags.
	AccessLevel string `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action.
	GroupId *int `pulumi:"groupId"`
	// The ID of the create access level.
	Id int `pulumi:"id"`
	// The ID of a GitLab user allowed to perform the relevant action.
	UserId *int `pulumi:"userId"`
}

// GetProjectProtectedTagsProtectedTagCreateAccessLevelInput is an input type that accepts GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs and GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedTagsProtectedTagCreateAccessLevelInput` via:
//
//	GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs{...}
type GetProjectProtectedTagsProtectedTagCreateAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedTagsProtectedTagCreateAccessLevelOutput() GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput
	ToGetProjectProtectedTagsProtectedTagCreateAccessLevelOutputWithContext(context.Context) GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput
}

type GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs struct {
	// Access level allowed to create protected tags.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// Readable description of access level.
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of the create access level.
	Id pulumi.IntInput `pulumi:"id"`
	// The ID of a GitLab user allowed to perform the relevant action.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagsProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelOutput() GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput {
	return i.ToGetProjectProtectedTagsProtectedTagCreateAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput)
}

// GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayInput is an input type that accepts GetProjectProtectedTagsProtectedTagCreateAccessLevelArray and GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayInput` via:
//
//	GetProjectProtectedTagsProtectedTagCreateAccessLevelArray{ GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs{...} }
type GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput() GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput
	ToGetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput
}

type GetProjectProtectedTagsProtectedTagCreateAccessLevelArray []GetProjectProtectedTagsProtectedTagCreateAccessLevelInput

func (GetProjectProtectedTagsProtectedTagCreateAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedTagsProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedTagsProtectedTagCreateAccessLevelArray) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput() GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput {
	return i.ToGetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedTagsProtectedTagCreateAccessLevelArray) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput)
}

type GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagsProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelOutput() GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput {
	return o
}

func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput {
	return o
}

// Access level allowed to create protected tags.
func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagsProtectedTagCreateAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// Readable description of access level.
func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagsProtectedTagCreateAccessLevel) string { return v.AccessLevelDescription }).(pulumi.StringOutput)
}

// The ID of a GitLab group allowed to perform the relevant action.
func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedTagsProtectedTagCreateAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of the create access level.
func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedTagsProtectedTagCreateAccessLevel) int { return v.Id }).(pulumi.IntOutput)
}

// The ID of a GitLab user allowed to perform the relevant action.
func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectProtectedTagsProtectedTagCreateAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedTagsProtectedTagCreateAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput() GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput) ToGetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedTagsProtectedTagCreateAccessLevel {
		return vs[0].([]GetProjectProtectedTagsProtectedTagCreateAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput)
}

type GetProjectPushRule struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex string `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex string `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck bool `pulumi:"commitCommitterCheck"`
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck bool `pulumi:"commitCommitterNameCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex string `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex string `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag bool `pulumi:"denyDeleteTag"`
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex string `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize int `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck bool `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets bool `pulumi:"preventSecrets"`
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits bool `pulumi:"rejectNonDcoCommits"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits bool `pulumi:"rejectUnsignedCommits"`
}

// GetProjectPushRuleInput is an input type that accepts GetProjectPushRuleArgs and GetProjectPushRuleOutput values.
// You can construct a concrete instance of `GetProjectPushRuleInput` via:
//
//	GetProjectPushRuleArgs{...}
type GetProjectPushRuleInput interface {
	pulumi.Input

	ToGetProjectPushRuleOutput() GetProjectPushRuleOutput
	ToGetProjectPushRuleOutputWithContext(context.Context) GetProjectPushRuleOutput
}

type GetProjectPushRuleArgs struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex pulumi.StringInput `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex pulumi.StringInput `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck pulumi.BoolInput `pulumi:"commitCommitterCheck"`
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck pulumi.BoolInput `pulumi:"commitCommitterNameCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex pulumi.StringInput `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex pulumi.StringInput `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag pulumi.BoolInput `pulumi:"denyDeleteTag"`
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex pulumi.StringInput `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize pulumi.IntInput `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck pulumi.BoolInput `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets pulumi.BoolInput `pulumi:"preventSecrets"`
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits pulumi.BoolInput `pulumi:"rejectNonDcoCommits"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits pulumi.BoolInput `pulumi:"rejectUnsignedCommits"`
}

func (GetProjectPushRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPushRule)(nil)).Elem()
}

func (i GetProjectPushRuleArgs) ToGetProjectPushRuleOutput() GetProjectPushRuleOutput {
	return i.ToGetProjectPushRuleOutputWithContext(context.Background())
}

func (i GetProjectPushRuleArgs) ToGetProjectPushRuleOutputWithContext(ctx context.Context) GetProjectPushRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectPushRuleOutput)
}

// GetProjectPushRuleArrayInput is an input type that accepts GetProjectPushRuleArray and GetProjectPushRuleArrayOutput values.
// You can construct a concrete instance of `GetProjectPushRuleArrayInput` via:
//
//	GetProjectPushRuleArray{ GetProjectPushRuleArgs{...} }
type GetProjectPushRuleArrayInput interface {
	pulumi.Input

	ToGetProjectPushRuleArrayOutput() GetProjectPushRuleArrayOutput
	ToGetProjectPushRuleArrayOutputWithContext(context.Context) GetProjectPushRuleArrayOutput
}

type GetProjectPushRuleArray []GetProjectPushRuleInput

func (GetProjectPushRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectPushRule)(nil)).Elem()
}

func (i GetProjectPushRuleArray) ToGetProjectPushRuleArrayOutput() GetProjectPushRuleArrayOutput {
	return i.ToGetProjectPushRuleArrayOutputWithContext(context.Background())
}

func (i GetProjectPushRuleArray) ToGetProjectPushRuleArrayOutputWithContext(ctx context.Context) GetProjectPushRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectPushRuleArrayOutput)
}

type GetProjectPushRuleOutput struct{ *pulumi.OutputState }

func (GetProjectPushRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPushRule)(nil)).Elem()
}

func (o GetProjectPushRuleOutput) ToGetProjectPushRuleOutput() GetProjectPushRuleOutput {
	return o
}

func (o GetProjectPushRuleOutput) ToGetProjectPushRuleOutputWithContext(ctx context.Context) GetProjectPushRuleOutput {
	return o
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o GetProjectPushRuleOutput) AuthorEmailRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.AuthorEmailRegex }).(pulumi.StringOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o GetProjectPushRuleOutput) BranchNameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.BranchNameRegex }).(pulumi.StringOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o GetProjectPushRuleOutput) CommitCommitterCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.CommitCommitterCheck }).(pulumi.BoolOutput)
}

// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
func (o GetProjectPushRuleOutput) CommitCommitterNameCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.CommitCommitterNameCheck }).(pulumi.BoolOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o GetProjectPushRuleOutput) CommitMessageNegativeRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.CommitMessageNegativeRegex }).(pulumi.StringOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o GetProjectPushRuleOutput) CommitMessageRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.CommitMessageRegex }).(pulumi.StringOutput)
}

// Deny deleting a tag.
func (o GetProjectPushRuleOutput) DenyDeleteTag() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.DenyDeleteTag }).(pulumi.BoolOutput)
}

// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
func (o GetProjectPushRuleOutput) FileNameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.FileNameRegex }).(pulumi.StringOutput)
}

// Maximum file size (MB).
func (o GetProjectPushRuleOutput) MaxFileSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectPushRule) int { return v.MaxFileSize }).(pulumi.IntOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o GetProjectPushRuleOutput) MemberCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.MemberCheck }).(pulumi.BoolOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o GetProjectPushRuleOutput) PreventSecrets() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.PreventSecrets }).(pulumi.BoolOutput)
}

// Reject commit when it’s not DCO certified.
func (o GetProjectPushRuleOutput) RejectNonDcoCommits() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.RejectNonDcoCommits }).(pulumi.BoolOutput)
}

// Reject commit when it’s not signed through GPG.
func (o GetProjectPushRuleOutput) RejectUnsignedCommits() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.RejectUnsignedCommits }).(pulumi.BoolOutput)
}

type GetProjectPushRuleArrayOutput struct{ *pulumi.OutputState }

func (GetProjectPushRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectPushRule)(nil)).Elem()
}

func (o GetProjectPushRuleArrayOutput) ToGetProjectPushRuleArrayOutput() GetProjectPushRuleArrayOutput {
	return o
}

func (o GetProjectPushRuleArrayOutput) ToGetProjectPushRuleArrayOutputWithContext(ctx context.Context) GetProjectPushRuleArrayOutput {
	return o
}

func (o GetProjectPushRuleArrayOutput) Index(i pulumi.IntInput) GetProjectPushRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectPushRule {
		return vs[0].([]GetProjectPushRule)[vs[1].(int)]
	}).(GetProjectPushRuleOutput)
}

type GetProjectSharedWithGroup struct {
	// The accessLevel permission level of the shared group.
	GroupAccessLevel int `pulumi:"groupAccessLevel"`
	// The full path of the group shared with.
	GroupFullPath string `pulumi:"groupFullPath"`
	// The ID of the group shared with.
	GroupId int `pulumi:"groupId"`
	// The name of the group shared with.
	GroupName string `pulumi:"groupName"`
}

// GetProjectSharedWithGroupInput is an input type that accepts GetProjectSharedWithGroupArgs and GetProjectSharedWithGroupOutput values.
// You can construct a concrete instance of `GetProjectSharedWithGroupInput` via:
//
//	GetProjectSharedWithGroupArgs{...}
type GetProjectSharedWithGroupInput interface {
	pulumi.Input

	ToGetProjectSharedWithGroupOutput() GetProjectSharedWithGroupOutput
	ToGetProjectSharedWithGroupOutputWithContext(context.Context) GetProjectSharedWithGroupOutput
}

type GetProjectSharedWithGroupArgs struct {
	// The accessLevel permission level of the shared group.
	GroupAccessLevel pulumi.IntInput `pulumi:"groupAccessLevel"`
	// The full path of the group shared with.
	GroupFullPath pulumi.StringInput `pulumi:"groupFullPath"`
	// The ID of the group shared with.
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// The name of the group shared with.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (GetProjectSharedWithGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectSharedWithGroupArgs) ToGetProjectSharedWithGroupOutput() GetProjectSharedWithGroupOutput {
	return i.ToGetProjectSharedWithGroupOutputWithContext(context.Background())
}

func (i GetProjectSharedWithGroupArgs) ToGetProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectSharedWithGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectSharedWithGroupOutput)
}

// GetProjectSharedWithGroupArrayInput is an input type that accepts GetProjectSharedWithGroupArray and GetProjectSharedWithGroupArrayOutput values.
// You can construct a concrete instance of `GetProjectSharedWithGroupArrayInput` via:
//
//	GetProjectSharedWithGroupArray{ GetProjectSharedWithGroupArgs{...} }
type GetProjectSharedWithGroupArrayInput interface {
	pulumi.Input

	ToGetProjectSharedWithGroupArrayOutput() GetProjectSharedWithGroupArrayOutput
	ToGetProjectSharedWithGroupArrayOutputWithContext(context.Context) GetProjectSharedWithGroupArrayOutput
}

type GetProjectSharedWithGroupArray []GetProjectSharedWithGroupInput

func (GetProjectSharedWithGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectSharedWithGroupArray) ToGetProjectSharedWithGroupArrayOutput() GetProjectSharedWithGroupArrayOutput {
	return i.ToGetProjectSharedWithGroupArrayOutputWithContext(context.Background())
}

func (i GetProjectSharedWithGroupArray) ToGetProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectSharedWithGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectSharedWithGroupArrayOutput)
}

type GetProjectSharedWithGroupOutput struct{ *pulumi.OutputState }

func (GetProjectSharedWithGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectSharedWithGroupOutput) ToGetProjectSharedWithGroupOutput() GetProjectSharedWithGroupOutput {
	return o
}

func (o GetProjectSharedWithGroupOutput) ToGetProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectSharedWithGroupOutput {
	return o
}

// The accessLevel permission level of the shared group.
func (o GetProjectSharedWithGroupOutput) GroupAccessLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectSharedWithGroup) int { return v.GroupAccessLevel }).(pulumi.IntOutput)
}

// The full path of the group shared with.
func (o GetProjectSharedWithGroupOutput) GroupFullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectSharedWithGroup) string { return v.GroupFullPath }).(pulumi.StringOutput)
}

// The ID of the group shared with.
func (o GetProjectSharedWithGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectSharedWithGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

// The name of the group shared with.
func (o GetProjectSharedWithGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectSharedWithGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

type GetProjectSharedWithGroupArrayOutput struct{ *pulumi.OutputState }

func (GetProjectSharedWithGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectSharedWithGroupArrayOutput) ToGetProjectSharedWithGroupArrayOutput() GetProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectSharedWithGroupArrayOutput) ToGetProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectSharedWithGroupArrayOutput) Index(i pulumi.IntInput) GetProjectSharedWithGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectSharedWithGroup {
		return vs[0].([]GetProjectSharedWithGroup)[vs[1].(int)]
	}).(GetProjectSharedWithGroupOutput)
}

type GetProjectTagCommit struct {
	// The email of the author.
	AuthorEmail string `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName string `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate string `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate string `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail string `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName string `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id string `pulumi:"id"`
	// The commit message
	Message string `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds []string `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId string `pulumi:"shortId"`
	// The title of the commit
	Title string `pulumi:"title"`
}

// GetProjectTagCommitInput is an input type that accepts GetProjectTagCommitArgs and GetProjectTagCommitOutput values.
// You can construct a concrete instance of `GetProjectTagCommitInput` via:
//
//	GetProjectTagCommitArgs{...}
type GetProjectTagCommitInput interface {
	pulumi.Input

	ToGetProjectTagCommitOutput() GetProjectTagCommitOutput
	ToGetProjectTagCommitOutputWithContext(context.Context) GetProjectTagCommitOutput
}

type GetProjectTagCommitArgs struct {
	// The email of the author.
	AuthorEmail pulumi.StringInput `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName pulumi.StringInput `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate pulumi.StringInput `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate pulumi.StringInput `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail pulumi.StringInput `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName pulumi.StringInput `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id pulumi.StringInput `pulumi:"id"`
	// The commit message
	Message pulumi.StringInput `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds pulumi.StringArrayInput `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId pulumi.StringInput `pulumi:"shortId"`
	// The title of the commit
	Title pulumi.StringInput `pulumi:"title"`
}

func (GetProjectTagCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagCommit)(nil)).Elem()
}

func (i GetProjectTagCommitArgs) ToGetProjectTagCommitOutput() GetProjectTagCommitOutput {
	return i.ToGetProjectTagCommitOutputWithContext(context.Background())
}

func (i GetProjectTagCommitArgs) ToGetProjectTagCommitOutputWithContext(ctx context.Context) GetProjectTagCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagCommitOutput)
}

// GetProjectTagCommitArrayInput is an input type that accepts GetProjectTagCommitArray and GetProjectTagCommitArrayOutput values.
// You can construct a concrete instance of `GetProjectTagCommitArrayInput` via:
//
//	GetProjectTagCommitArray{ GetProjectTagCommitArgs{...} }
type GetProjectTagCommitArrayInput interface {
	pulumi.Input

	ToGetProjectTagCommitArrayOutput() GetProjectTagCommitArrayOutput
	ToGetProjectTagCommitArrayOutputWithContext(context.Context) GetProjectTagCommitArrayOutput
}

type GetProjectTagCommitArray []GetProjectTagCommitInput

func (GetProjectTagCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagCommit)(nil)).Elem()
}

func (i GetProjectTagCommitArray) ToGetProjectTagCommitArrayOutput() GetProjectTagCommitArrayOutput {
	return i.ToGetProjectTagCommitArrayOutputWithContext(context.Background())
}

func (i GetProjectTagCommitArray) ToGetProjectTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagCommitArrayOutput)
}

type GetProjectTagCommitOutput struct{ *pulumi.OutputState }

func (GetProjectTagCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagCommit)(nil)).Elem()
}

func (o GetProjectTagCommitOutput) ToGetProjectTagCommitOutput() GetProjectTagCommitOutput {
	return o
}

func (o GetProjectTagCommitOutput) ToGetProjectTagCommitOutputWithContext(ctx context.Context) GetProjectTagCommitOutput {
	return o
}

// The email of the author.
func (o GetProjectTagCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

// The name of the author.
func (o GetProjectTagCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetProjectTagCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetProjectTagCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

// The email of the user that committed.
func (o GetProjectTagCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

// The name of the user that committed.
func (o GetProjectTagCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o GetProjectTagCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.Id }).(pulumi.StringOutput)
}

// The commit message
func (o GetProjectTagCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.Message }).(pulumi.StringOutput)
}

// The id of the parents of the commit
func (o GetProjectTagCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectTagCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

// The short id assigned to the commit by Gitlab.
func (o GetProjectTagCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

// The title of the commit
func (o GetProjectTagCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetProjectTagCommitArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagCommit)(nil)).Elem()
}

func (o GetProjectTagCommitArrayOutput) ToGetProjectTagCommitArrayOutput() GetProjectTagCommitArrayOutput {
	return o
}

func (o GetProjectTagCommitArrayOutput) ToGetProjectTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagCommitArrayOutput {
	return o
}

func (o GetProjectTagCommitArrayOutput) Index(i pulumi.IntInput) GetProjectTagCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagCommit {
		return vs[0].([]GetProjectTagCommit)[vs[1].(int)]
	}).(GetProjectTagCommitOutput)
}

type GetProjectTagRelease struct {
	// The description of release.
	Description string `pulumi:"description"`
	// The name of the tag.
	TagName string `pulumi:"tagName"`
}

// GetProjectTagReleaseInput is an input type that accepts GetProjectTagReleaseArgs and GetProjectTagReleaseOutput values.
// You can construct a concrete instance of `GetProjectTagReleaseInput` via:
//
//	GetProjectTagReleaseArgs{...}
type GetProjectTagReleaseInput interface {
	pulumi.Input

	ToGetProjectTagReleaseOutput() GetProjectTagReleaseOutput
	ToGetProjectTagReleaseOutputWithContext(context.Context) GetProjectTagReleaseOutput
}

type GetProjectTagReleaseArgs struct {
	// The description of release.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the tag.
	TagName pulumi.StringInput `pulumi:"tagName"`
}

func (GetProjectTagReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagRelease)(nil)).Elem()
}

func (i GetProjectTagReleaseArgs) ToGetProjectTagReleaseOutput() GetProjectTagReleaseOutput {
	return i.ToGetProjectTagReleaseOutputWithContext(context.Background())
}

func (i GetProjectTagReleaseArgs) ToGetProjectTagReleaseOutputWithContext(ctx context.Context) GetProjectTagReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagReleaseOutput)
}

// GetProjectTagReleaseArrayInput is an input type that accepts GetProjectTagReleaseArray and GetProjectTagReleaseArrayOutput values.
// You can construct a concrete instance of `GetProjectTagReleaseArrayInput` via:
//
//	GetProjectTagReleaseArray{ GetProjectTagReleaseArgs{...} }
type GetProjectTagReleaseArrayInput interface {
	pulumi.Input

	ToGetProjectTagReleaseArrayOutput() GetProjectTagReleaseArrayOutput
	ToGetProjectTagReleaseArrayOutputWithContext(context.Context) GetProjectTagReleaseArrayOutput
}

type GetProjectTagReleaseArray []GetProjectTagReleaseInput

func (GetProjectTagReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagRelease)(nil)).Elem()
}

func (i GetProjectTagReleaseArray) ToGetProjectTagReleaseArrayOutput() GetProjectTagReleaseArrayOutput {
	return i.ToGetProjectTagReleaseArrayOutputWithContext(context.Background())
}

func (i GetProjectTagReleaseArray) ToGetProjectTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagReleaseArrayOutput)
}

type GetProjectTagReleaseOutput struct{ *pulumi.OutputState }

func (GetProjectTagReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagRelease)(nil)).Elem()
}

func (o GetProjectTagReleaseOutput) ToGetProjectTagReleaseOutput() GetProjectTagReleaseOutput {
	return o
}

func (o GetProjectTagReleaseOutput) ToGetProjectTagReleaseOutputWithContext(ctx context.Context) GetProjectTagReleaseOutput {
	return o
}

// The description of release.
func (o GetProjectTagReleaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagRelease) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the tag.
func (o GetProjectTagReleaseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagRelease) string { return v.TagName }).(pulumi.StringOutput)
}

type GetProjectTagReleaseArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagRelease)(nil)).Elem()
}

func (o GetProjectTagReleaseArrayOutput) ToGetProjectTagReleaseArrayOutput() GetProjectTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagReleaseArrayOutput) ToGetProjectTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagReleaseArrayOutput) Index(i pulumi.IntInput) GetProjectTagReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagRelease {
		return vs[0].([]GetProjectTagRelease)[vs[1].(int)]
	}).(GetProjectTagReleaseOutput)
}

type GetProjectTagsTag struct {
	// The commit associated with the tag.
	Commits []GetProjectTagsTagCommit `pulumi:"commits"`
	// The message of the annotated tag.
	Message string `pulumi:"message"`
	// The name of a tag.
	Name string `pulumi:"name"`
	// Bool, true if tag has tag protection.
	Protected bool `pulumi:"protected"`
	// The release associated with the tag.
	Releases []GetProjectTagsTagRelease `pulumi:"releases"`
	// The unique id assigned to the commit by Gitlab.
	Target string `pulumi:"target"`
}

// GetProjectTagsTagInput is an input type that accepts GetProjectTagsTagArgs and GetProjectTagsTagOutput values.
// You can construct a concrete instance of `GetProjectTagsTagInput` via:
//
//	GetProjectTagsTagArgs{...}
type GetProjectTagsTagInput interface {
	pulumi.Input

	ToGetProjectTagsTagOutput() GetProjectTagsTagOutput
	ToGetProjectTagsTagOutputWithContext(context.Context) GetProjectTagsTagOutput
}

type GetProjectTagsTagArgs struct {
	// The commit associated with the tag.
	Commits GetProjectTagsTagCommitArrayInput `pulumi:"commits"`
	// The message of the annotated tag.
	Message pulumi.StringInput `pulumi:"message"`
	// The name of a tag.
	Name pulumi.StringInput `pulumi:"name"`
	// Bool, true if tag has tag protection.
	Protected pulumi.BoolInput `pulumi:"protected"`
	// The release associated with the tag.
	Releases GetProjectTagsTagReleaseArrayInput `pulumi:"releases"`
	// The unique id assigned to the commit by Gitlab.
	Target pulumi.StringInput `pulumi:"target"`
}

func (GetProjectTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTag)(nil)).Elem()
}

func (i GetProjectTagsTagArgs) ToGetProjectTagsTagOutput() GetProjectTagsTagOutput {
	return i.ToGetProjectTagsTagOutputWithContext(context.Background())
}

func (i GetProjectTagsTagArgs) ToGetProjectTagsTagOutputWithContext(ctx context.Context) GetProjectTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagOutput)
}

// GetProjectTagsTagArrayInput is an input type that accepts GetProjectTagsTagArray and GetProjectTagsTagArrayOutput values.
// You can construct a concrete instance of `GetProjectTagsTagArrayInput` via:
//
//	GetProjectTagsTagArray{ GetProjectTagsTagArgs{...} }
type GetProjectTagsTagArrayInput interface {
	pulumi.Input

	ToGetProjectTagsTagArrayOutput() GetProjectTagsTagArrayOutput
	ToGetProjectTagsTagArrayOutputWithContext(context.Context) GetProjectTagsTagArrayOutput
}

type GetProjectTagsTagArray []GetProjectTagsTagInput

func (GetProjectTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTag)(nil)).Elem()
}

func (i GetProjectTagsTagArray) ToGetProjectTagsTagArrayOutput() GetProjectTagsTagArrayOutput {
	return i.ToGetProjectTagsTagArrayOutputWithContext(context.Background())
}

func (i GetProjectTagsTagArray) ToGetProjectTagsTagArrayOutputWithContext(ctx context.Context) GetProjectTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagArrayOutput)
}

type GetProjectTagsTagOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTag)(nil)).Elem()
}

func (o GetProjectTagsTagOutput) ToGetProjectTagsTagOutput() GetProjectTagsTagOutput {
	return o
}

func (o GetProjectTagsTagOutput) ToGetProjectTagsTagOutputWithContext(ctx context.Context) GetProjectTagsTagOutput {
	return o
}

// The commit associated with the tag.
func (o GetProjectTagsTagOutput) Commits() GetProjectTagsTagCommitArrayOutput {
	return o.ApplyT(func(v GetProjectTagsTag) []GetProjectTagsTagCommit { return v.Commits }).(GetProjectTagsTagCommitArrayOutput)
}

// The message of the annotated tag.
func (o GetProjectTagsTagOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTag) string { return v.Message }).(pulumi.StringOutput)
}

// The name of a tag.
func (o GetProjectTagsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTag) string { return v.Name }).(pulumi.StringOutput)
}

// Bool, true if tag has tag protection.
func (o GetProjectTagsTagOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectTagsTag) bool { return v.Protected }).(pulumi.BoolOutput)
}

// The release associated with the tag.
func (o GetProjectTagsTagOutput) Releases() GetProjectTagsTagReleaseArrayOutput {
	return o.ApplyT(func(v GetProjectTagsTag) []GetProjectTagsTagRelease { return v.Releases }).(GetProjectTagsTagReleaseArrayOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o GetProjectTagsTagOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTag) string { return v.Target }).(pulumi.StringOutput)
}

type GetProjectTagsTagArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTag)(nil)).Elem()
}

func (o GetProjectTagsTagArrayOutput) ToGetProjectTagsTagArrayOutput() GetProjectTagsTagArrayOutput {
	return o
}

func (o GetProjectTagsTagArrayOutput) ToGetProjectTagsTagArrayOutputWithContext(ctx context.Context) GetProjectTagsTagArrayOutput {
	return o
}

func (o GetProjectTagsTagArrayOutput) Index(i pulumi.IntInput) GetProjectTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagsTag {
		return vs[0].([]GetProjectTagsTag)[vs[1].(int)]
	}).(GetProjectTagsTagOutput)
}

type GetProjectTagsTagCommit struct {
	// The email of the author.
	AuthorEmail string `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName string `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate string `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate string `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail string `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName string `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id string `pulumi:"id"`
	// The commit message
	Message string `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds []string `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId string `pulumi:"shortId"`
	// The title of the commit
	Title string `pulumi:"title"`
}

// GetProjectTagsTagCommitInput is an input type that accepts GetProjectTagsTagCommitArgs and GetProjectTagsTagCommitOutput values.
// You can construct a concrete instance of `GetProjectTagsTagCommitInput` via:
//
//	GetProjectTagsTagCommitArgs{...}
type GetProjectTagsTagCommitInput interface {
	pulumi.Input

	ToGetProjectTagsTagCommitOutput() GetProjectTagsTagCommitOutput
	ToGetProjectTagsTagCommitOutputWithContext(context.Context) GetProjectTagsTagCommitOutput
}

type GetProjectTagsTagCommitArgs struct {
	// The email of the author.
	AuthorEmail pulumi.StringInput `pulumi:"authorEmail"`
	// The name of the author.
	AuthorName pulumi.StringInput `pulumi:"authorName"`
	// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
	AuthoredDate pulumi.StringInput `pulumi:"authoredDate"`
	// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
	CommittedDate pulumi.StringInput `pulumi:"committedDate"`
	// The email of the user that committed.
	CommitterEmail pulumi.StringInput `pulumi:"committerEmail"`
	// The name of the user that committed.
	CommitterName pulumi.StringInput `pulumi:"committerName"`
	// The unique id assigned to the commit by Gitlab.
	Id pulumi.StringInput `pulumi:"id"`
	// The commit message
	Message pulumi.StringInput `pulumi:"message"`
	// The id of the parents of the commit
	ParentIds pulumi.StringArrayInput `pulumi:"parentIds"`
	// The short id assigned to the commit by Gitlab.
	ShortId pulumi.StringInput `pulumi:"shortId"`
	// The title of the commit
	Title pulumi.StringInput `pulumi:"title"`
}

func (GetProjectTagsTagCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagCommit)(nil)).Elem()
}

func (i GetProjectTagsTagCommitArgs) ToGetProjectTagsTagCommitOutput() GetProjectTagsTagCommitOutput {
	return i.ToGetProjectTagsTagCommitOutputWithContext(context.Background())
}

func (i GetProjectTagsTagCommitArgs) ToGetProjectTagsTagCommitOutputWithContext(ctx context.Context) GetProjectTagsTagCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagCommitOutput)
}

// GetProjectTagsTagCommitArrayInput is an input type that accepts GetProjectTagsTagCommitArray and GetProjectTagsTagCommitArrayOutput values.
// You can construct a concrete instance of `GetProjectTagsTagCommitArrayInput` via:
//
//	GetProjectTagsTagCommitArray{ GetProjectTagsTagCommitArgs{...} }
type GetProjectTagsTagCommitArrayInput interface {
	pulumi.Input

	ToGetProjectTagsTagCommitArrayOutput() GetProjectTagsTagCommitArrayOutput
	ToGetProjectTagsTagCommitArrayOutputWithContext(context.Context) GetProjectTagsTagCommitArrayOutput
}

type GetProjectTagsTagCommitArray []GetProjectTagsTagCommitInput

func (GetProjectTagsTagCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagCommit)(nil)).Elem()
}

func (i GetProjectTagsTagCommitArray) ToGetProjectTagsTagCommitArrayOutput() GetProjectTagsTagCommitArrayOutput {
	return i.ToGetProjectTagsTagCommitArrayOutputWithContext(context.Background())
}

func (i GetProjectTagsTagCommitArray) ToGetProjectTagsTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagsTagCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagCommitArrayOutput)
}

type GetProjectTagsTagCommitOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagCommit)(nil)).Elem()
}

func (o GetProjectTagsTagCommitOutput) ToGetProjectTagsTagCommitOutput() GetProjectTagsTagCommitOutput {
	return o
}

func (o GetProjectTagsTagCommitOutput) ToGetProjectTagsTagCommitOutputWithContext(ctx context.Context) GetProjectTagsTagCommitOutput {
	return o
}

// The email of the author.
func (o GetProjectTagsTagCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

// The name of the author.
func (o GetProjectTagsTagCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

// The date which the commit was authored (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetProjectTagsTagCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

// The date at which the commit was pushed (format: yyyy-MM-ddTHH:mm:ssZ).
func (o GetProjectTagsTagCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

// The email of the user that committed.
func (o GetProjectTagsTagCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

// The name of the user that committed.
func (o GetProjectTagsTagCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o GetProjectTagsTagCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.Id }).(pulumi.StringOutput)
}

// The commit message
func (o GetProjectTagsTagCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.Message }).(pulumi.StringOutput)
}

// The id of the parents of the commit
func (o GetProjectTagsTagCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

// The short id assigned to the commit by Gitlab.
func (o GetProjectTagsTagCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

// The title of the commit
func (o GetProjectTagsTagCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetProjectTagsTagCommitArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagCommit)(nil)).Elem()
}

func (o GetProjectTagsTagCommitArrayOutput) ToGetProjectTagsTagCommitArrayOutput() GetProjectTagsTagCommitArrayOutput {
	return o
}

func (o GetProjectTagsTagCommitArrayOutput) ToGetProjectTagsTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagsTagCommitArrayOutput {
	return o
}

func (o GetProjectTagsTagCommitArrayOutput) Index(i pulumi.IntInput) GetProjectTagsTagCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagsTagCommit {
		return vs[0].([]GetProjectTagsTagCommit)[vs[1].(int)]
	}).(GetProjectTagsTagCommitOutput)
}

type GetProjectTagsTagRelease struct {
	// The description of release.
	Description string `pulumi:"description"`
	// The name of the tag.
	TagName string `pulumi:"tagName"`
}

// GetProjectTagsTagReleaseInput is an input type that accepts GetProjectTagsTagReleaseArgs and GetProjectTagsTagReleaseOutput values.
// You can construct a concrete instance of `GetProjectTagsTagReleaseInput` via:
//
//	GetProjectTagsTagReleaseArgs{...}
type GetProjectTagsTagReleaseInput interface {
	pulumi.Input

	ToGetProjectTagsTagReleaseOutput() GetProjectTagsTagReleaseOutput
	ToGetProjectTagsTagReleaseOutputWithContext(context.Context) GetProjectTagsTagReleaseOutput
}

type GetProjectTagsTagReleaseArgs struct {
	// The description of release.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the tag.
	TagName pulumi.StringInput `pulumi:"tagName"`
}

func (GetProjectTagsTagReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagRelease)(nil)).Elem()
}

func (i GetProjectTagsTagReleaseArgs) ToGetProjectTagsTagReleaseOutput() GetProjectTagsTagReleaseOutput {
	return i.ToGetProjectTagsTagReleaseOutputWithContext(context.Background())
}

func (i GetProjectTagsTagReleaseArgs) ToGetProjectTagsTagReleaseOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagReleaseOutput)
}

// GetProjectTagsTagReleaseArrayInput is an input type that accepts GetProjectTagsTagReleaseArray and GetProjectTagsTagReleaseArrayOutput values.
// You can construct a concrete instance of `GetProjectTagsTagReleaseArrayInput` via:
//
//	GetProjectTagsTagReleaseArray{ GetProjectTagsTagReleaseArgs{...} }
type GetProjectTagsTagReleaseArrayInput interface {
	pulumi.Input

	ToGetProjectTagsTagReleaseArrayOutput() GetProjectTagsTagReleaseArrayOutput
	ToGetProjectTagsTagReleaseArrayOutputWithContext(context.Context) GetProjectTagsTagReleaseArrayOutput
}

type GetProjectTagsTagReleaseArray []GetProjectTagsTagReleaseInput

func (GetProjectTagsTagReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagRelease)(nil)).Elem()
}

func (i GetProjectTagsTagReleaseArray) ToGetProjectTagsTagReleaseArrayOutput() GetProjectTagsTagReleaseArrayOutput {
	return i.ToGetProjectTagsTagReleaseArrayOutputWithContext(context.Background())
}

func (i GetProjectTagsTagReleaseArray) ToGetProjectTagsTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagReleaseArrayOutput)
}

type GetProjectTagsTagReleaseOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagRelease)(nil)).Elem()
}

func (o GetProjectTagsTagReleaseOutput) ToGetProjectTagsTagReleaseOutput() GetProjectTagsTagReleaseOutput {
	return o
}

func (o GetProjectTagsTagReleaseOutput) ToGetProjectTagsTagReleaseOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseOutput {
	return o
}

// The description of release.
func (o GetProjectTagsTagReleaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagRelease) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the tag.
func (o GetProjectTagsTagReleaseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagRelease) string { return v.TagName }).(pulumi.StringOutput)
}

type GetProjectTagsTagReleaseArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagRelease)(nil)).Elem()
}

func (o GetProjectTagsTagReleaseArrayOutput) ToGetProjectTagsTagReleaseArrayOutput() GetProjectTagsTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagsTagReleaseArrayOutput) ToGetProjectTagsTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagsTagReleaseArrayOutput) Index(i pulumi.IntInput) GetProjectTagsTagReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagsTagRelease {
		return vs[0].([]GetProjectTagsTagRelease)[vs[1].(int)]
	}).(GetProjectTagsTagReleaseOutput)
}

type GetProjectVariablesVariable struct {
	// The description of the variable.
	Description string `pulumi:"description"`
	// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
	EnvironmentScope string `pulumi:"environmentScope"`
	// The name of the variable.
	Key string `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
	Masked bool `pulumi:"masked"`
	// The name or id of the project.
	Project string `pulumi:"project"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected bool `pulumi:"protected"`
	// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
	Raw bool `pulumi:"raw"`
	// The value of the variable.
	Value string `pulumi:"value"`
	// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
	VariableType string `pulumi:"variableType"`
}

// GetProjectVariablesVariableInput is an input type that accepts GetProjectVariablesVariableArgs and GetProjectVariablesVariableOutput values.
// You can construct a concrete instance of `GetProjectVariablesVariableInput` via:
//
//	GetProjectVariablesVariableArgs{...}
type GetProjectVariablesVariableInput interface {
	pulumi.Input

	ToGetProjectVariablesVariableOutput() GetProjectVariablesVariableOutput
	ToGetProjectVariablesVariableOutputWithContext(context.Context) GetProjectVariablesVariableOutput
}

type GetProjectVariablesVariableArgs struct {
	// The description of the variable.
	Description pulumi.StringInput `pulumi:"description"`
	// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
	EnvironmentScope pulumi.StringInput `pulumi:"environmentScope"`
	// The name of the variable.
	Key pulumi.StringInput `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
	Masked pulumi.BoolInput `pulumi:"masked"`
	// The name or id of the project.
	Project pulumi.StringInput `pulumi:"project"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolInput `pulumi:"protected"`
	// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
	Raw pulumi.BoolInput `pulumi:"raw"`
	// The value of the variable.
	Value pulumi.StringInput `pulumi:"value"`
	// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
	VariableType pulumi.StringInput `pulumi:"variableType"`
}

func (GetProjectVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectVariablesVariable)(nil)).Elem()
}

func (i GetProjectVariablesVariableArgs) ToGetProjectVariablesVariableOutput() GetProjectVariablesVariableOutput {
	return i.ToGetProjectVariablesVariableOutputWithContext(context.Background())
}

func (i GetProjectVariablesVariableArgs) ToGetProjectVariablesVariableOutputWithContext(ctx context.Context) GetProjectVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectVariablesVariableOutput)
}

// GetProjectVariablesVariableArrayInput is an input type that accepts GetProjectVariablesVariableArray and GetProjectVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetProjectVariablesVariableArrayInput` via:
//
//	GetProjectVariablesVariableArray{ GetProjectVariablesVariableArgs{...} }
type GetProjectVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetProjectVariablesVariableArrayOutput() GetProjectVariablesVariableArrayOutput
	ToGetProjectVariablesVariableArrayOutputWithContext(context.Context) GetProjectVariablesVariableArrayOutput
}

type GetProjectVariablesVariableArray []GetProjectVariablesVariableInput

func (GetProjectVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectVariablesVariable)(nil)).Elem()
}

func (i GetProjectVariablesVariableArray) ToGetProjectVariablesVariableArrayOutput() GetProjectVariablesVariableArrayOutput {
	return i.ToGetProjectVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetProjectVariablesVariableArray) ToGetProjectVariablesVariableArrayOutputWithContext(ctx context.Context) GetProjectVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectVariablesVariableArrayOutput)
}

type GetProjectVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetProjectVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectVariablesVariable)(nil)).Elem()
}

func (o GetProjectVariablesVariableOutput) ToGetProjectVariablesVariableOutput() GetProjectVariablesVariableOutput {
	return o
}

func (o GetProjectVariablesVariableOutput) ToGetProjectVariablesVariableOutputWithContext(ctx context.Context) GetProjectVariablesVariableOutput {
	return o
}

// The description of the variable.
func (o GetProjectVariablesVariableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.Description }).(pulumi.StringOutput)
}

// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
func (o GetProjectVariablesVariableOutput) EnvironmentScope() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.EnvironmentScope }).(pulumi.StringOutput)
}

// The name of the variable.
func (o GetProjectVariablesVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.Key }).(pulumi.StringOutput)
}

// If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.
func (o GetProjectVariablesVariableOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) bool { return v.Masked }).(pulumi.BoolOutput)
}

// The name or id of the project.
func (o GetProjectVariablesVariableOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.Project }).(pulumi.StringOutput)
}

// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
func (o GetProjectVariablesVariableOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) bool { return v.Protected }).(pulumi.BoolOutput)
}

// Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.
func (o GetProjectVariablesVariableOutput) Raw() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) bool { return v.Raw }).(pulumi.BoolOutput)
}

// The value of the variable.
func (o GetProjectVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

// The type of a variable. Valid values are: `envVar`, `file`. Default is `envVar`.
func (o GetProjectVariablesVariableOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.VariableType }).(pulumi.StringOutput)
}

type GetProjectVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetProjectVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectVariablesVariable)(nil)).Elem()
}

func (o GetProjectVariablesVariableArrayOutput) ToGetProjectVariablesVariableArrayOutput() GetProjectVariablesVariableArrayOutput {
	return o
}

func (o GetProjectVariablesVariableArrayOutput) ToGetProjectVariablesVariableArrayOutputWithContext(ctx context.Context) GetProjectVariablesVariableArrayOutput {
	return o
}

func (o GetProjectVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetProjectVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectVariablesVariable {
		return vs[0].([]GetProjectVariablesVariable)[vs[1].(int)]
	}).(GetProjectVariablesVariableOutput)
}

type GetProjectsProject struct {
	// Links for the project.
	_links map[string]string `pulumi:"_links"`
	// Whether allowMergeOnSkippedPipeline is enabled for the project.
	AllowMergeOnSkippedPipeline bool `pulumi:"allowMergeOnSkippedPipeline"`
	// Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
	AllowPipelineTriggerApproveDeployment bool `pulumi:"allowPipelineTriggerApproveDeployment"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel string `pulumi:"analyticsAccessLevel"`
	// The numbers of approvals needed in a merge requests.
	ApprovalsBeforeMerge int `pulumi:"approvalsBeforeMerge"`
	// Whether the project is archived.
	Archived bool `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines string `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
	AutoDevopsDeployStrategy string `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled bool `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues bool `pulumi:"autocloseReferencedIssues"`
	// The avatar url of the project.
	AvatarUrl string `pulumi:"avatarUrl"`
	// Build coverage regex for the project.
	BuildCoverageRegex string `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy string `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout int `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel string `pulumi:"buildsAccessLevel"`
	// CI config file path for the project.
	CiConfigPath string `pulumi:"ciConfigPath"`
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth int `pulumi:"ciDefaultGitDepth"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled bool `pulumi:"ciForwardDeploymentEnabled"`
	// The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `noOneAllowed`
	CiPipelineVariablesMinimumOverrideRole string `pulumi:"ciPipelineVariablesMinimumOverrideRole"`
	// The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
	CiRestrictPipelineCancellationRole string `pulumi:"ciRestrictPipelineCancellationRole"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
	ContainerExpirationPolicies []GetProjectsProjectContainerExpirationPolicy `pulumi:"containerExpirationPolicies"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel string `pulumi:"containerRegistryAccessLevel"`
	// Whether the container registry is enabled for the project.
	ContainerRegistryEnabled bool `pulumi:"containerRegistryEnabled"`
	// Creation time for the project.
	CreatedAt string `pulumi:"createdAt"`
	// Creator ID for the project.
	CreatorId int `pulumi:"creatorId"`
	// Custom attributes for the project.
	CustomAttributes []map[string]string `pulumi:"customAttributes"`
	// The default branch name of the project.
	DefaultBranch string `pulumi:"defaultBranch"`
	// The description of the project.
	Description string `pulumi:"description"`
	// Enable email notifications.
	EmailsEnabled bool `pulumi:"emailsEnabled"`
	// Whether the project is empty.
	EmptyRepo bool `pulumi:"emptyRepo"`
	// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
	EnvironmentsAccessLevel string `pulumi:"environmentsAccessLevel"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel string `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
	FeatureFlagsAccessLevel string `pulumi:"featureFlagsAccessLevel"`
	// Present if the project is a fork. Contains information about the upstream project.
	ForkedFromProjects []GetProjectsProjectForkedFromProject `pulumi:"forkedFromProjects"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel string `pulumi:"forkingAccessLevel"`
	// The number of forks of the project.
	ForksCount int `pulumi:"forksCount"`
	// Whether group runners are enabled for the project.
	GroupRunnersEnabled bool `pulumi:"groupRunnersEnabled"`
	// The HTTP clone URL of the project.
	HttpUrlToRepo string `pulumi:"httpUrlToRepo"`
	// The ID of the project.
	Id int `pulumi:"id"`
	// The import error, if it exists, for the project.
	ImportError string `pulumi:"importError"`
	// The import status of the project.
	ImportStatus string `pulumi:"importStatus"`
	// URL the project was imported from.
	ImportUrl string `pulumi:"importUrl"`
	// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
	InfrastructureAccessLevel string `pulumi:"infrastructureAccessLevel"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel string `pulumi:"issuesAccessLevel"`
	// Whether issues are enabled for the project.
	IssuesEnabled bool `pulumi:"issuesEnabled"`
	// Whether pipelines are enabled for the project.
	JobsEnabled bool `pulumi:"jobsEnabled"`
	// Disable or enable the ability to keep the latest artifact for this project.
	KeepLatestArtifact bool `pulumi:"keepLatestArtifact"`
	// Last activirty time for the project.
	LastActivityAt string `pulumi:"lastActivityAt"`
	// Whether LFS (large file storage) is enabled for the project.
	LfsEnabled bool `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate string `pulumi:"mergeCommitTemplate"`
	// Merge method for the project.
	MergeMethod string `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled bool `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel string `pulumi:"mergeRequestsAccessLevel"`
	// Whether merge requests are enabled for the project.
	MergeRequestsEnabled bool `pulumi:"mergeRequestsEnabled"`
	// Enable or disable merge trains.
	MergeTrainsEnabled bool `pulumi:"mergeTrainsEnabled"`
	// Whether the pull mirroring is enabled for the project.
	Mirror bool `pulumi:"mirror"`
	// Whether mirrorOverwritesDivergedBranches is enabled for the project.
	MirrorOverwritesDivergedBranches bool `pulumi:"mirrorOverwritesDivergedBranches"`
	// Whether pull mirroring triggers builds for the project.
	MirrorTriggerBuilds bool `pulumi:"mirrorTriggerBuilds"`
	// The mirror user ID for the project.
	MirrorUserId int `pulumi:"mirrorUserId"`
	// The visibility of machine learning model experiments.
	ModelExperimentsAccessLevel string `pulumi:"modelExperimentsAccessLevel"`
	// The visibility of machine learning model registry.
	ModelRegistryAccessLevel string `pulumi:"modelRegistryAccessLevel"`
	// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
	MonitorAccessLevel string `pulumi:"monitorAccessLevel"`
	// The name of the project.
	Name string `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace string `pulumi:"nameWithNamespace"`
	// Namespace of the project (parent group/s).
	Namespaces []GetProjectsProjectNamespace `pulumi:"namespaces"`
	// Whether onlyAllowMergeIfAllDiscussionsAreResolved is enabled for the project.
	OnlyAllowMergeIfAllDiscussionsAreResolved bool `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Whether onlyAllowMergeIfPipelineSucceeds is enabled for the project.
	OnlyAllowMergeIfPipelineSucceeds bool `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Whether onlyMirrorProtectedBranches is enabled for the project.
	OnlyMirrorProtectedBranches bool `pulumi:"onlyMirrorProtectedBranches"`
	// The number of open issies for the project.
	OpenIssuesCount int                       `pulumi:"openIssuesCount"`
	Owners          []GetProjectsProjectOwner `pulumi:"owners"`
	// Whether packages are enabled for the project.
	PackagesEnabled bool `pulumi:"packagesEnabled"`
	// The path of the project.
	Path string `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace string `pulumi:"pathWithNamespace"`
	// Permissions for the project.
	Permissions []GetProjectsProjectPermission `pulumi:"permissions"`
	// Whether public builds are enabled for the project.
	PublicBuilds bool `pulumi:"publicBuilds"`
	// The remote url of the project.
	ReadmeUrl string `pulumi:"readmeUrl"`
	// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
	ReleasesAccessLevel string `pulumi:"releasesAccessLevel"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel string `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage string `pulumi:"repositoryStorage"`
	// Whether requesting access is enabled for the project.
	RequestAccessEnabled bool `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel string `pulumi:"requirementsAccessLevel"`
	// Whether resolveOutdatedDiffDiscussions is enabled for the project
	ResolveOutdatedDiffDiscussions bool `pulumi:"resolveOutdatedDiffDiscussions"`
	// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
	RestrictUserDefinedVariables bool `pulumi:"restrictUserDefinedVariables"`
	// The runners token for the project.
	RunnersToken string `pulumi:"runnersToken"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel string `pulumi:"securityAndComplianceAccessLevel"`
	// Whether shared runners are enabled for the project.
	SharedRunnersEnabled bool `pulumi:"sharedRunnersEnabled"`
	// Groups the the project is shared with.
	SharedWithGroups []GetProjectsProjectSharedWithGroup `pulumi:"sharedWithGroups"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel string `pulumi:"snippetsAccessLevel"`
	// Whether snippets are enabled for the project.
	SnippetsEnabled bool `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate string `pulumi:"squashCommitTemplate"`
	// The SSH clone URL of the project.
	SshUrlToRepo string `pulumi:"sshUrlToRepo"`
	// The number of stars on the project.
	StarCount int `pulumi:"starCount"`
	// Statistics for the project.
	Statistics map[string]int `pulumi:"statistics"`
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage string `pulumi:"suggestionCommitMessage"`
	// A set of the project topics (formerly called "project tags").
	TagLists []string `pulumi:"tagLists"`
	// The list of topics for the project.
	Topics []string `pulumi:"topics"`
	// The visibility of the project.
	Visibility string `pulumi:"visibility"`
	// The web url of the project.
	WebUrl string `pulumi:"webUrl"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel string `pulumi:"wikiAccessLevel"`
	// Whether wiki is enabled for the project.
	WikiEnabled bool `pulumi:"wikiEnabled"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//	GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	// Links for the project.
	_links pulumi.StringMapInput `pulumi:"_links"`
	// Whether allowMergeOnSkippedPipeline is enabled for the project.
	AllowMergeOnSkippedPipeline pulumi.BoolInput `pulumi:"allowMergeOnSkippedPipeline"`
	// Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
	AllowPipelineTriggerApproveDeployment pulumi.BoolInput `pulumi:"allowPipelineTriggerApproveDeployment"`
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel pulumi.StringInput `pulumi:"analyticsAccessLevel"`
	// The numbers of approvals needed in a merge requests.
	ApprovalsBeforeMerge pulumi.IntInput `pulumi:"approvalsBeforeMerge"`
	// Whether the project is archived.
	Archived pulumi.BoolInput `pulumi:"archived"`
	// Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines pulumi.StringInput `pulumi:"autoCancelPendingPipelines"`
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
	AutoDevopsDeployStrategy pulumi.StringInput `pulumi:"autoDevopsDeployStrategy"`
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled pulumi.BoolInput `pulumi:"autoDevopsEnabled"`
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues pulumi.BoolInput `pulumi:"autocloseReferencedIssues"`
	// The avatar url of the project.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// Build coverage regex for the project.
	BuildCoverageRegex pulumi.StringInput `pulumi:"buildCoverageRegex"`
	// The Git strategy. Defaults to fetch.
	BuildGitStrategy pulumi.StringInput `pulumi:"buildGitStrategy"`
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout pulumi.IntInput `pulumi:"buildTimeout"`
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel pulumi.StringInput `pulumi:"buildsAccessLevel"`
	// CI config file path for the project.
	CiConfigPath pulumi.StringInput `pulumi:"ciConfigPath"`
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth pulumi.IntInput `pulumi:"ciDefaultGitDepth"`
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled pulumi.BoolInput `pulumi:"ciForwardDeploymentEnabled"`
	// The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `noOneAllowed`
	CiPipelineVariablesMinimumOverrideRole pulumi.StringInput `pulumi:"ciPipelineVariablesMinimumOverrideRole"`
	// The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
	CiRestrictPipelineCancellationRole pulumi.StringInput `pulumi:"ciRestrictPipelineCancellationRole"`
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
	ContainerExpirationPolicies GetProjectsProjectContainerExpirationPolicyArrayInput `pulumi:"containerExpirationPolicies"`
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel pulumi.StringInput `pulumi:"containerRegistryAccessLevel"`
	// Whether the container registry is enabled for the project.
	ContainerRegistryEnabled pulumi.BoolInput `pulumi:"containerRegistryEnabled"`
	// Creation time for the project.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Creator ID for the project.
	CreatorId pulumi.IntInput `pulumi:"creatorId"`
	// Custom attributes for the project.
	CustomAttributes pulumi.StringMapArrayInput `pulumi:"customAttributes"`
	// The default branch name of the project.
	DefaultBranch pulumi.StringInput `pulumi:"defaultBranch"`
	// The description of the project.
	Description pulumi.StringInput `pulumi:"description"`
	// Enable email notifications.
	EmailsEnabled pulumi.BoolInput `pulumi:"emailsEnabled"`
	// Whether the project is empty.
	EmptyRepo pulumi.BoolInput `pulumi:"emptyRepo"`
	// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
	EnvironmentsAccessLevel pulumi.StringInput `pulumi:"environmentsAccessLevel"`
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel pulumi.StringInput `pulumi:"externalAuthorizationClassificationLabel"`
	// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
	FeatureFlagsAccessLevel pulumi.StringInput `pulumi:"featureFlagsAccessLevel"`
	// Present if the project is a fork. Contains information about the upstream project.
	ForkedFromProjects GetProjectsProjectForkedFromProjectArrayInput `pulumi:"forkedFromProjects"`
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel pulumi.StringInput `pulumi:"forkingAccessLevel"`
	// The number of forks of the project.
	ForksCount pulumi.IntInput `pulumi:"forksCount"`
	// Whether group runners are enabled for the project.
	GroupRunnersEnabled pulumi.BoolInput `pulumi:"groupRunnersEnabled"`
	// The HTTP clone URL of the project.
	HttpUrlToRepo pulumi.StringInput `pulumi:"httpUrlToRepo"`
	// The ID of the project.
	Id pulumi.IntInput `pulumi:"id"`
	// The import error, if it exists, for the project.
	ImportError pulumi.StringInput `pulumi:"importError"`
	// The import status of the project.
	ImportStatus pulumi.StringInput `pulumi:"importStatus"`
	// URL the project was imported from.
	ImportUrl pulumi.StringInput `pulumi:"importUrl"`
	// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
	InfrastructureAccessLevel pulumi.StringInput `pulumi:"infrastructureAccessLevel"`
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel pulumi.StringInput `pulumi:"issuesAccessLevel"`
	// Whether issues are enabled for the project.
	IssuesEnabled pulumi.BoolInput `pulumi:"issuesEnabled"`
	// Whether pipelines are enabled for the project.
	JobsEnabled pulumi.BoolInput `pulumi:"jobsEnabled"`
	// Disable or enable the ability to keep the latest artifact for this project.
	KeepLatestArtifact pulumi.BoolInput `pulumi:"keepLatestArtifact"`
	// Last activirty time for the project.
	LastActivityAt pulumi.StringInput `pulumi:"lastActivityAt"`
	// Whether LFS (large file storage) is enabled for the project.
	LfsEnabled pulumi.BoolInput `pulumi:"lfsEnabled"`
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate pulumi.StringInput `pulumi:"mergeCommitTemplate"`
	// Merge method for the project.
	MergeMethod pulumi.StringInput `pulumi:"mergeMethod"`
	// Enable or disable merge pipelines.
	MergePipelinesEnabled pulumi.BoolInput `pulumi:"mergePipelinesEnabled"`
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel pulumi.StringInput `pulumi:"mergeRequestsAccessLevel"`
	// Whether merge requests are enabled for the project.
	MergeRequestsEnabled pulumi.BoolInput `pulumi:"mergeRequestsEnabled"`
	// Enable or disable merge trains.
	MergeTrainsEnabled pulumi.BoolInput `pulumi:"mergeTrainsEnabled"`
	// Whether the pull mirroring is enabled for the project.
	Mirror pulumi.BoolInput `pulumi:"mirror"`
	// Whether mirrorOverwritesDivergedBranches is enabled for the project.
	MirrorOverwritesDivergedBranches pulumi.BoolInput `pulumi:"mirrorOverwritesDivergedBranches"`
	// Whether pull mirroring triggers builds for the project.
	MirrorTriggerBuilds pulumi.BoolInput `pulumi:"mirrorTriggerBuilds"`
	// The mirror user ID for the project.
	MirrorUserId pulumi.IntInput `pulumi:"mirrorUserId"`
	// The visibility of machine learning model experiments.
	ModelExperimentsAccessLevel pulumi.StringInput `pulumi:"modelExperimentsAccessLevel"`
	// The visibility of machine learning model registry.
	ModelRegistryAccessLevel pulumi.StringInput `pulumi:"modelRegistryAccessLevel"`
	// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
	MonitorAccessLevel pulumi.StringInput `pulumi:"monitorAccessLevel"`
	// The name of the project.
	Name pulumi.StringInput `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace pulumi.StringInput `pulumi:"nameWithNamespace"`
	// Namespace of the project (parent group/s).
	Namespaces GetProjectsProjectNamespaceArrayInput `pulumi:"namespaces"`
	// Whether onlyAllowMergeIfAllDiscussionsAreResolved is enabled for the project.
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolInput `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	// Whether onlyAllowMergeIfPipelineSucceeds is enabled for the project.
	OnlyAllowMergeIfPipelineSucceeds pulumi.BoolInput `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	// Whether onlyMirrorProtectedBranches is enabled for the project.
	OnlyMirrorProtectedBranches pulumi.BoolInput `pulumi:"onlyMirrorProtectedBranches"`
	// The number of open issies for the project.
	OpenIssuesCount pulumi.IntInput                   `pulumi:"openIssuesCount"`
	Owners          GetProjectsProjectOwnerArrayInput `pulumi:"owners"`
	// Whether packages are enabled for the project.
	PackagesEnabled pulumi.BoolInput `pulumi:"packagesEnabled"`
	// The path of the project.
	Path pulumi.StringInput `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace pulumi.StringInput `pulumi:"pathWithNamespace"`
	// Permissions for the project.
	Permissions GetProjectsProjectPermissionArrayInput `pulumi:"permissions"`
	// Whether public builds are enabled for the project.
	PublicBuilds pulumi.BoolInput `pulumi:"publicBuilds"`
	// The remote url of the project.
	ReadmeUrl pulumi.StringInput `pulumi:"readmeUrl"`
	// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
	ReleasesAccessLevel pulumi.StringInput `pulumi:"releasesAccessLevel"`
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel pulumi.StringInput `pulumi:"repositoryAccessLevel"`
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage pulumi.StringInput `pulumi:"repositoryStorage"`
	// Whether requesting access is enabled for the project.
	RequestAccessEnabled pulumi.BoolInput `pulumi:"requestAccessEnabled"`
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel pulumi.StringInput `pulumi:"requirementsAccessLevel"`
	// Whether resolveOutdatedDiffDiscussions is enabled for the project
	ResolveOutdatedDiffDiscussions pulumi.BoolInput `pulumi:"resolveOutdatedDiffDiscussions"`
	// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
	RestrictUserDefinedVariables pulumi.BoolInput `pulumi:"restrictUserDefinedVariables"`
	// The runners token for the project.
	RunnersToken pulumi.StringInput `pulumi:"runnersToken"`
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel pulumi.StringInput `pulumi:"securityAndComplianceAccessLevel"`
	// Whether shared runners are enabled for the project.
	SharedRunnersEnabled pulumi.BoolInput `pulumi:"sharedRunnersEnabled"`
	// Groups the the project is shared with.
	SharedWithGroups GetProjectsProjectSharedWithGroupArrayInput `pulumi:"sharedWithGroups"`
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel pulumi.StringInput `pulumi:"snippetsAccessLevel"`
	// Whether snippets are enabled for the project.
	SnippetsEnabled pulumi.BoolInput `pulumi:"snippetsEnabled"`
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate pulumi.StringInput `pulumi:"squashCommitTemplate"`
	// The SSH clone URL of the project.
	SshUrlToRepo pulumi.StringInput `pulumi:"sshUrlToRepo"`
	// The number of stars on the project.
	StarCount pulumi.IntInput `pulumi:"starCount"`
	// Statistics for the project.
	Statistics pulumi.IntMapInput `pulumi:"statistics"`
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage pulumi.StringInput `pulumi:"suggestionCommitMessage"`
	// A set of the project topics (formerly called "project tags").
	TagLists pulumi.StringArrayInput `pulumi:"tagLists"`
	// The list of topics for the project.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
	// The visibility of the project.
	Visibility pulumi.StringInput `pulumi:"visibility"`
	// The web url of the project.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel pulumi.StringInput `pulumi:"wikiAccessLevel"`
	// Whether wiki is enabled for the project.
	WikiEnabled pulumi.BoolInput `pulumi:"wikiEnabled"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//	GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

// Links for the project.
func (o GetProjectsProjectOutput) _links() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProjectsProject) map[string]string { return v._links }).(pulumi.StringMapOutput)
}

// Whether allowMergeOnSkippedPipeline is enabled for the project.
func (o GetProjectsProjectOutput) AllowMergeOnSkippedPipeline() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AllowMergeOnSkippedPipeline }).(pulumi.BoolOutput)
}

// Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
func (o GetProjectsProjectOutput) AllowPipelineTriggerApproveDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AllowPipelineTriggerApproveDeployment }).(pulumi.BoolOutput)
}

// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) AnalyticsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AnalyticsAccessLevel }).(pulumi.StringOutput)
}

// The numbers of approvals needed in a merge requests.
func (o GetProjectsProjectOutput) ApprovalsBeforeMerge() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.ApprovalsBeforeMerge }).(pulumi.IntOutput)
}

// Whether the project is archived.
func (o GetProjectsProjectOutput) Archived() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Archived }).(pulumi.BoolOutput)
}

// Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
func (o GetProjectsProjectOutput) AutoCancelPendingPipelines() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AutoCancelPendingPipelines }).(pulumi.StringOutput)
}

// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
func (o GetProjectsProjectOutput) AutoDevopsDeployStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AutoDevopsDeployStrategy }).(pulumi.StringOutput)
}

// Enable Auto DevOps for this project.
func (o GetProjectsProjectOutput) AutoDevopsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AutoDevopsEnabled }).(pulumi.BoolOutput)
}

// Set whether auto-closing referenced issues on default branch.
func (o GetProjectsProjectOutput) AutocloseReferencedIssues() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AutocloseReferencedIssues }).(pulumi.BoolOutput)
}

// The avatar url of the project.
func (o GetProjectsProjectOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// Build coverage regex for the project.
func (o GetProjectsProjectOutput) BuildCoverageRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.BuildCoverageRegex }).(pulumi.StringOutput)
}

// The Git strategy. Defaults to fetch.
func (o GetProjectsProjectOutput) BuildGitStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.BuildGitStrategy }).(pulumi.StringOutput)
}

// The maximum amount of time, in seconds, that a job can run.
func (o GetProjectsProjectOutput) BuildTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.BuildTimeout }).(pulumi.IntOutput)
}

// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) BuildsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.BuildsAccessLevel }).(pulumi.StringOutput)
}

// CI config file path for the project.
func (o GetProjectsProjectOutput) CiConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CiConfigPath }).(pulumi.StringOutput)
}

// Default number of revisions for shallow cloning.
func (o GetProjectsProjectOutput) CiDefaultGitDepth() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.CiDefaultGitDepth }).(pulumi.IntOutput)
}

// When a new deployment job starts, skip older deployment jobs that are still pending.
func (o GetProjectsProjectOutput) CiForwardDeploymentEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.CiForwardDeploymentEnabled }).(pulumi.BoolOutput)
}

// The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `noOneAllowed`
func (o GetProjectsProjectOutput) CiPipelineVariablesMinimumOverrideRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CiPipelineVariablesMinimumOverrideRole }).(pulumi.StringOutput)
}

// The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
func (o GetProjectsProjectOutput) CiRestrictPipelineCancellationRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CiRestrictPipelineCancellationRole }).(pulumi.StringOutput)
}

// Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
func (o GetProjectsProjectOutput) ContainerExpirationPolicies() GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectContainerExpirationPolicy {
		return v.ContainerExpirationPolicies
	}).(GetProjectsProjectContainerExpirationPolicyArrayOutput)
}

// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) ContainerRegistryAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ContainerRegistryAccessLevel }).(pulumi.StringOutput)
}

// Whether the container registry is enabled for the project.
func (o GetProjectsProjectOutput) ContainerRegistryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.ContainerRegistryEnabled }).(pulumi.BoolOutput)
}

// Creation time for the project.
func (o GetProjectsProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Creator ID for the project.
func (o GetProjectsProjectOutput) CreatorId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.CreatorId }).(pulumi.IntOutput)
}

// Custom attributes for the project.
func (o GetProjectsProjectOutput) CustomAttributes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []map[string]string { return v.CustomAttributes }).(pulumi.StringMapArrayOutput)
}

// The default branch name of the project.
func (o GetProjectsProjectOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// The description of the project.
func (o GetProjectsProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Description }).(pulumi.StringOutput)
}

// Enable email notifications.
func (o GetProjectsProjectOutput) EmailsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.EmailsEnabled }).(pulumi.BoolOutput)
}

// Whether the project is empty.
func (o GetProjectsProjectOutput) EmptyRepo() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.EmptyRepo }).(pulumi.BoolOutput)
}

// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) EnvironmentsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.EnvironmentsAccessLevel }).(pulumi.StringOutput)
}

// The classification label for the project.
func (o GetProjectsProjectOutput) ExternalAuthorizationClassificationLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ExternalAuthorizationClassificationLabel }).(pulumi.StringOutput)
}

// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) FeatureFlagsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.FeatureFlagsAccessLevel }).(pulumi.StringOutput)
}

// Present if the project is a fork. Contains information about the upstream project.
func (o GetProjectsProjectOutput) ForkedFromProjects() GetProjectsProjectForkedFromProjectArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectForkedFromProject { return v.ForkedFromProjects }).(GetProjectsProjectForkedFromProjectArrayOutput)
}

// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) ForkingAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ForkingAccessLevel }).(pulumi.StringOutput)
}

// The number of forks of the project.
func (o GetProjectsProjectOutput) ForksCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.ForksCount }).(pulumi.IntOutput)
}

// Whether group runners are enabled for the project.
func (o GetProjectsProjectOutput) GroupRunnersEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.GroupRunnersEnabled }).(pulumi.BoolOutput)
}

// The HTTP clone URL of the project.
func (o GetProjectsProjectOutput) HttpUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.HttpUrlToRepo }).(pulumi.StringOutput)
}

// The ID of the project.
func (o GetProjectsProjectOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.Id }).(pulumi.IntOutput)
}

// The import error, if it exists, for the project.
func (o GetProjectsProjectOutput) ImportError() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportError }).(pulumi.StringOutput)
}

// The import status of the project.
func (o GetProjectsProjectOutput) ImportStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportStatus }).(pulumi.StringOutput)
}

// URL the project was imported from.
func (o GetProjectsProjectOutput) ImportUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportUrl }).(pulumi.StringOutput)
}

// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) InfrastructureAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.InfrastructureAccessLevel }).(pulumi.StringOutput)
}

// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) IssuesAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.IssuesAccessLevel }).(pulumi.StringOutput)
}

// Whether issues are enabled for the project.
func (o GetProjectsProjectOutput) IssuesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.IssuesEnabled }).(pulumi.BoolOutput)
}

// Whether pipelines are enabled for the project.
func (o GetProjectsProjectOutput) JobsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.JobsEnabled }).(pulumi.BoolOutput)
}

// Disable or enable the ability to keep the latest artifact for this project.
func (o GetProjectsProjectOutput) KeepLatestArtifact() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.KeepLatestArtifact }).(pulumi.BoolOutput)
}

// Last activirty time for the project.
func (o GetProjectsProjectOutput) LastActivityAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.LastActivityAt }).(pulumi.StringOutput)
}

// Whether LFS (large file storage) is enabled for the project.
func (o GetProjectsProjectOutput) LfsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.LfsEnabled }).(pulumi.BoolOutput)
}

// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
func (o GetProjectsProjectOutput) MergeCommitTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MergeCommitTemplate }).(pulumi.StringOutput)
}

// Merge method for the project.
func (o GetProjectsProjectOutput) MergeMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MergeMethod }).(pulumi.StringOutput)
}

// Enable or disable merge pipelines.
func (o GetProjectsProjectOutput) MergePipelinesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MergePipelinesEnabled }).(pulumi.BoolOutput)
}

// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) MergeRequestsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MergeRequestsAccessLevel }).(pulumi.StringOutput)
}

// Whether merge requests are enabled for the project.
func (o GetProjectsProjectOutput) MergeRequestsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MergeRequestsEnabled }).(pulumi.BoolOutput)
}

// Enable or disable merge trains.
func (o GetProjectsProjectOutput) MergeTrainsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MergeTrainsEnabled }).(pulumi.BoolOutput)
}

// Whether the pull mirroring is enabled for the project.
func (o GetProjectsProjectOutput) Mirror() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Mirror }).(pulumi.BoolOutput)
}

// Whether mirrorOverwritesDivergedBranches is enabled for the project.
func (o GetProjectsProjectOutput) MirrorOverwritesDivergedBranches() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MirrorOverwritesDivergedBranches }).(pulumi.BoolOutput)
}

// Whether pull mirroring triggers builds for the project.
func (o GetProjectsProjectOutput) MirrorTriggerBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MirrorTriggerBuilds }).(pulumi.BoolOutput)
}

// The mirror user ID for the project.
func (o GetProjectsProjectOutput) MirrorUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.MirrorUserId }).(pulumi.IntOutput)
}

// The visibility of machine learning model experiments.
func (o GetProjectsProjectOutput) ModelExperimentsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ModelExperimentsAccessLevel }).(pulumi.StringOutput)
}

// The visibility of machine learning model registry.
func (o GetProjectsProjectOutput) ModelRegistryAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ModelRegistryAccessLevel }).(pulumi.StringOutput)
}

// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) MonitorAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MonitorAccessLevel }).(pulumi.StringOutput)
}

// The name of the project.
func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

// In `group / subgroup / project` or `user / project` format.
func (o GetProjectsProjectOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

// Namespace of the project (parent group/s).
func (o GetProjectsProjectOutput) Namespaces() GetProjectsProjectNamespaceArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectNamespace { return v.Namespaces }).(GetProjectsProjectNamespaceArrayOutput)
}

// Whether onlyAllowMergeIfAllDiscussionsAreResolved is enabled for the project.
func (o GetProjectsProjectOutput) OnlyAllowMergeIfAllDiscussionsAreResolved() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyAllowMergeIfAllDiscussionsAreResolved }).(pulumi.BoolOutput)
}

// Whether onlyAllowMergeIfPipelineSucceeds is enabled for the project.
func (o GetProjectsProjectOutput) OnlyAllowMergeIfPipelineSucceeds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyAllowMergeIfPipelineSucceeds }).(pulumi.BoolOutput)
}

// Whether onlyMirrorProtectedBranches is enabled for the project.
func (o GetProjectsProjectOutput) OnlyMirrorProtectedBranches() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyMirrorProtectedBranches }).(pulumi.BoolOutput)
}

// The number of open issies for the project.
func (o GetProjectsProjectOutput) OpenIssuesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.OpenIssuesCount }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) Owners() GetProjectsProjectOwnerArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectOwner { return v.Owners }).(GetProjectsProjectOwnerArrayOutput)
}

// Whether packages are enabled for the project.
func (o GetProjectsProjectOutput) PackagesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.PackagesEnabled }).(pulumi.BoolOutput)
}

// The path of the project.
func (o GetProjectsProjectOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Path }).(pulumi.StringOutput)
}

// In `group/subgroup/project` or `user/project` format.
func (o GetProjectsProjectOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

// Permissions for the project.
func (o GetProjectsProjectOutput) Permissions() GetProjectsProjectPermissionArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectPermission { return v.Permissions }).(GetProjectsProjectPermissionArrayOutput)
}

// Whether public builds are enabled for the project.
func (o GetProjectsProjectOutput) PublicBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.PublicBuilds }).(pulumi.BoolOutput)
}

// The remote url of the project.
func (o GetProjectsProjectOutput) ReadmeUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ReadmeUrl }).(pulumi.StringOutput)
}

// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) ReleasesAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ReleasesAccessLevel }).(pulumi.StringOutput)
}

// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) RepositoryAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RepositoryAccessLevel }).(pulumi.StringOutput)
}

// Which storage shard the repository is on. (administrator only)
func (o GetProjectsProjectOutput) RepositoryStorage() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RepositoryStorage }).(pulumi.StringOutput)
}

// Whether requesting access is enabled for the project.
func (o GetProjectsProjectOutput) RequestAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.RequestAccessEnabled }).(pulumi.BoolOutput)
}

// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) RequirementsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RequirementsAccessLevel }).(pulumi.StringOutput)
}

// Whether resolveOutdatedDiffDiscussions is enabled for the project
func (o GetProjectsProjectOutput) ResolveOutdatedDiffDiscussions() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.ResolveOutdatedDiffDiscussions }).(pulumi.BoolOutput)
}

// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
func (o GetProjectsProjectOutput) RestrictUserDefinedVariables() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.RestrictUserDefinedVariables }).(pulumi.BoolOutput)
}

// The runners token for the project.
func (o GetProjectsProjectOutput) RunnersToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RunnersToken }).(pulumi.StringOutput)
}

// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) SecurityAndComplianceAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SecurityAndComplianceAccessLevel }).(pulumi.StringOutput)
}

// Whether shared runners are enabled for the project.
func (o GetProjectsProjectOutput) SharedRunnersEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.SharedRunnersEnabled }).(pulumi.BoolOutput)
}

// Groups the the project is shared with.
func (o GetProjectsProjectOutput) SharedWithGroups() GetProjectsProjectSharedWithGroupArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectSharedWithGroup { return v.SharedWithGroups }).(GetProjectsProjectSharedWithGroupArrayOutput)
}

// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) SnippetsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SnippetsAccessLevel }).(pulumi.StringOutput)
}

// Whether snippets are enabled for the project.
func (o GetProjectsProjectOutput) SnippetsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.SnippetsEnabled }).(pulumi.BoolOutput)
}

// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
func (o GetProjectsProjectOutput) SquashCommitTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SquashCommitTemplate }).(pulumi.StringOutput)
}

// The SSH clone URL of the project.
func (o GetProjectsProjectOutput) SshUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SshUrlToRepo }).(pulumi.StringOutput)
}

// The number of stars on the project.
func (o GetProjectsProjectOutput) StarCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.StarCount }).(pulumi.IntOutput)
}

// Statistics for the project.
func (o GetProjectsProjectOutput) Statistics() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProject) map[string]int { return v.Statistics }).(pulumi.IntMapOutput)
}

// The commit message used to apply merge request suggestions.
func (o GetProjectsProjectOutput) SuggestionCommitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SuggestionCommitMessage }).(pulumi.StringOutput)
}

// A set of the project topics (formerly called "project tags").
func (o GetProjectsProjectOutput) TagLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []string { return v.TagLists }).(pulumi.StringArrayOutput)
}

// The list of topics for the project.
func (o GetProjectsProjectOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

// The visibility of the project.
func (o GetProjectsProjectOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Visibility }).(pulumi.StringOutput)
}

// The web url of the project.
func (o GetProjectsProjectOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.WebUrl }).(pulumi.StringOutput)
}

// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
func (o GetProjectsProjectOutput) WikiAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.WikiAccessLevel }).(pulumi.StringOutput)
}

// Whether wiki is enabled for the project.
func (o GetProjectsProjectOutput) WikiEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.WikiEnabled }).(pulumi.BoolOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetProjectsProjectContainerExpirationPolicy struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence string `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled bool `pulumi:"enabled"`
	// The number of images to keep.
	KeepN int `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
	NameRegex string `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete string `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep string `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt string `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan string `pulumi:"olderThan"`
}

// GetProjectsProjectContainerExpirationPolicyInput is an input type that accepts GetProjectsProjectContainerExpirationPolicyArgs and GetProjectsProjectContainerExpirationPolicyOutput values.
// You can construct a concrete instance of `GetProjectsProjectContainerExpirationPolicyInput` via:
//
//	GetProjectsProjectContainerExpirationPolicyArgs{...}
type GetProjectsProjectContainerExpirationPolicyInput interface {
	pulumi.Input

	ToGetProjectsProjectContainerExpirationPolicyOutput() GetProjectsProjectContainerExpirationPolicyOutput
	ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(context.Context) GetProjectsProjectContainerExpirationPolicyOutput
}

type GetProjectsProjectContainerExpirationPolicyArgs struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence pulumi.StringInput `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The number of images to keep.
	KeepN pulumi.IntInput `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
	NameRegex pulumi.StringInput `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete pulumi.StringInput `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep pulumi.StringInput `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt pulumi.StringInput `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan pulumi.StringInput `pulumi:"olderThan"`
}

func (GetProjectsProjectContainerExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectsProjectContainerExpirationPolicyArgs) ToGetProjectsProjectContainerExpirationPolicyOutput() GetProjectsProjectContainerExpirationPolicyOutput {
	return i.ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(context.Background())
}

func (i GetProjectsProjectContainerExpirationPolicyArgs) ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectContainerExpirationPolicyOutput)
}

// GetProjectsProjectContainerExpirationPolicyArrayInput is an input type that accepts GetProjectsProjectContainerExpirationPolicyArray and GetProjectsProjectContainerExpirationPolicyArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectContainerExpirationPolicyArrayInput` via:
//
//	GetProjectsProjectContainerExpirationPolicyArray{ GetProjectsProjectContainerExpirationPolicyArgs{...} }
type GetProjectsProjectContainerExpirationPolicyArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectContainerExpirationPolicyArrayOutput() GetProjectsProjectContainerExpirationPolicyArrayOutput
	ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(context.Context) GetProjectsProjectContainerExpirationPolicyArrayOutput
}

type GetProjectsProjectContainerExpirationPolicyArray []GetProjectsProjectContainerExpirationPolicyInput

func (GetProjectsProjectContainerExpirationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectsProjectContainerExpirationPolicyArray) ToGetProjectsProjectContainerExpirationPolicyArrayOutput() GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return i.ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectContainerExpirationPolicyArray) ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectContainerExpirationPolicyArrayOutput)
}

type GetProjectsProjectContainerExpirationPolicyOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectContainerExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) ToGetProjectsProjectContainerExpirationPolicyOutput() GetProjectsProjectContainerExpirationPolicyOutput {
	return o
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyOutput {
	return o
}

// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
func (o GetProjectsProjectContainerExpirationPolicyOutput) Cadence() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.Cadence }).(pulumi.StringOutput)
}

// If true, the policy is enabled.
func (o GetProjectsProjectContainerExpirationPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The number of images to keep.
func (o GetProjectsProjectContainerExpirationPolicyOutput) KeepN() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) int { return v.KeepN }).(pulumi.IntOutput)
}

// The regular expression to match image names to delete.
//
// Deprecated: `nameRegex` has been deprecated. Use `nameRegexDelete` instead.
func (o GetProjectsProjectContainerExpirationPolicyOutput) NameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NameRegex }).(pulumi.StringOutput)
}

// The regular expression to match image names to delete.
func (o GetProjectsProjectContainerExpirationPolicyOutput) NameRegexDelete() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NameRegexDelete }).(pulumi.StringOutput)
}

// The regular expression to match image names to keep.
func (o GetProjectsProjectContainerExpirationPolicyOutput) NameRegexKeep() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NameRegexKeep }).(pulumi.StringOutput)
}

// The next time the policy will run.
func (o GetProjectsProjectContainerExpirationPolicyOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NextRunAt }).(pulumi.StringOutput)
}

// The number of days to keep images.
func (o GetProjectsProjectContainerExpirationPolicyOutput) OlderThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.OlderThan }).(pulumi.StringOutput)
}

type GetProjectsProjectContainerExpirationPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectContainerExpirationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectsProjectContainerExpirationPolicyArrayOutput) ToGetProjectsProjectContainerExpirationPolicyArrayOutput() GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectsProjectContainerExpirationPolicyArrayOutput) ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectsProjectContainerExpirationPolicyArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectContainerExpirationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectContainerExpirationPolicy {
		return vs[0].([]GetProjectsProjectContainerExpirationPolicy)[vs[1].(int)]
	}).(GetProjectsProjectContainerExpirationPolicyOutput)
}

type GetProjectsProjectForkedFromProject struct {
	// The HTTP clone URL of the upstream project.
	HttpUrlToRepo string `pulumi:"httpUrlToRepo"`
	// The ID of the upstream project.
	Id int `pulumi:"id"`
	// The name of the upstream project.
	Name string `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace string `pulumi:"nameWithNamespace"`
	// The path of the upstream project.
	Path string `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace string `pulumi:"pathWithNamespace"`
	// The web url of the upstream project.
	WebUrl string `pulumi:"webUrl"`
}

// GetProjectsProjectForkedFromProjectInput is an input type that accepts GetProjectsProjectForkedFromProjectArgs and GetProjectsProjectForkedFromProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectForkedFromProjectInput` via:
//
//	GetProjectsProjectForkedFromProjectArgs{...}
type GetProjectsProjectForkedFromProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput
	ToGetProjectsProjectForkedFromProjectOutputWithContext(context.Context) GetProjectsProjectForkedFromProjectOutput
}

type GetProjectsProjectForkedFromProjectArgs struct {
	// The HTTP clone URL of the upstream project.
	HttpUrlToRepo pulumi.StringInput `pulumi:"httpUrlToRepo"`
	// The ID of the upstream project.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the upstream project.
	Name pulumi.StringInput `pulumi:"name"`
	// In `group / subgroup / project` or `user / project` format.
	NameWithNamespace pulumi.StringInput `pulumi:"nameWithNamespace"`
	// The path of the upstream project.
	Path pulumi.StringInput `pulumi:"path"`
	// In `group/subgroup/project` or `user/project` format.
	PathWithNamespace pulumi.StringInput `pulumi:"pathWithNamespace"`
	// The web url of the upstream project.
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectsProjectForkedFromProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (i GetProjectsProjectForkedFromProjectArgs) ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput {
	return i.ToGetProjectsProjectForkedFromProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectForkedFromProjectArgs) ToGetProjectsProjectForkedFromProjectOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectForkedFromProjectOutput)
}

// GetProjectsProjectForkedFromProjectArrayInput is an input type that accepts GetProjectsProjectForkedFromProjectArray and GetProjectsProjectForkedFromProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectForkedFromProjectArrayInput` via:
//
//	GetProjectsProjectForkedFromProjectArray{ GetProjectsProjectForkedFromProjectArgs{...} }
type GetProjectsProjectForkedFromProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectForkedFromProjectArrayOutput() GetProjectsProjectForkedFromProjectArrayOutput
	ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(context.Context) GetProjectsProjectForkedFromProjectArrayOutput
}

type GetProjectsProjectForkedFromProjectArray []GetProjectsProjectForkedFromProjectInput

func (GetProjectsProjectForkedFromProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (i GetProjectsProjectForkedFromProjectArray) ToGetProjectsProjectForkedFromProjectArrayOutput() GetProjectsProjectForkedFromProjectArrayOutput {
	return i.ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectForkedFromProjectArray) ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectForkedFromProjectArrayOutput)
}

type GetProjectsProjectForkedFromProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectForkedFromProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (o GetProjectsProjectForkedFromProjectOutput) ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectOutput) ToGetProjectsProjectForkedFromProjectOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectOutput {
	return o
}

// The HTTP clone URL of the upstream project.
func (o GetProjectsProjectForkedFromProjectOutput) HttpUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.HttpUrlToRepo }).(pulumi.StringOutput)
}

// The ID of the upstream project.
func (o GetProjectsProjectForkedFromProjectOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the upstream project.
func (o GetProjectsProjectForkedFromProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.Name }).(pulumi.StringOutput)
}

// In `group / subgroup / project` or `user / project` format.
func (o GetProjectsProjectForkedFromProjectOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

// The path of the upstream project.
func (o GetProjectsProjectForkedFromProjectOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.Path }).(pulumi.StringOutput)
}

// In `group/subgroup/project` or `user/project` format.
func (o GetProjectsProjectForkedFromProjectOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

// The web url of the upstream project.
func (o GetProjectsProjectForkedFromProjectOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectsProjectForkedFromProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectForkedFromProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (o GetProjectsProjectForkedFromProjectArrayOutput) ToGetProjectsProjectForkedFromProjectArrayOutput() GetProjectsProjectForkedFromProjectArrayOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectArrayOutput) ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectArrayOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectForkedFromProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectForkedFromProject {
		return vs[0].([]GetProjectsProjectForkedFromProject)[vs[1].(int)]
	}).(GetProjectsProjectForkedFromProjectOutput)
}

type GetProjectsProjectNamespace struct {
	// The full path of the namespace.
	FullPath string `pulumi:"fullPath"`
	// The ID of the namespace.
	Id int `pulumi:"id"`
	// The kind of the namespace.
	Kind string `pulumi:"kind"`
	// The name of the namespace.
	Name string `pulumi:"name"`
	// The path of the namespace.
	Path string `pulumi:"path"`
}

// GetProjectsProjectNamespaceInput is an input type that accepts GetProjectsProjectNamespaceArgs and GetProjectsProjectNamespaceOutput values.
// You can construct a concrete instance of `GetProjectsProjectNamespaceInput` via:
//
//	GetProjectsProjectNamespaceArgs{...}
type GetProjectsProjectNamespaceInput interface {
	pulumi.Input

	ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput
	ToGetProjectsProjectNamespaceOutputWithContext(context.Context) GetProjectsProjectNamespaceOutput
}

type GetProjectsProjectNamespaceArgs struct {
	// The full path of the namespace.
	FullPath pulumi.StringInput `pulumi:"fullPath"`
	// The ID of the namespace.
	Id pulumi.IntInput `pulumi:"id"`
	// The kind of the namespace.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The name of the namespace.
	Name pulumi.StringInput `pulumi:"name"`
	// The path of the namespace.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetProjectsProjectNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectNamespace)(nil)).Elem()
}

func (i GetProjectsProjectNamespaceArgs) ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput {
	return i.ToGetProjectsProjectNamespaceOutputWithContext(context.Background())
}

func (i GetProjectsProjectNamespaceArgs) ToGetProjectsProjectNamespaceOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectNamespaceOutput)
}

// GetProjectsProjectNamespaceArrayInput is an input type that accepts GetProjectsProjectNamespaceArray and GetProjectsProjectNamespaceArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectNamespaceArrayInput` via:
//
//	GetProjectsProjectNamespaceArray{ GetProjectsProjectNamespaceArgs{...} }
type GetProjectsProjectNamespaceArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectNamespaceArrayOutput() GetProjectsProjectNamespaceArrayOutput
	ToGetProjectsProjectNamespaceArrayOutputWithContext(context.Context) GetProjectsProjectNamespaceArrayOutput
}

type GetProjectsProjectNamespaceArray []GetProjectsProjectNamespaceInput

func (GetProjectsProjectNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectNamespace)(nil)).Elem()
}

func (i GetProjectsProjectNamespaceArray) ToGetProjectsProjectNamespaceArrayOutput() GetProjectsProjectNamespaceArrayOutput {
	return i.ToGetProjectsProjectNamespaceArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectNamespaceArray) ToGetProjectsProjectNamespaceArrayOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectNamespaceArrayOutput)
}

type GetProjectsProjectNamespaceOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectNamespace)(nil)).Elem()
}

func (o GetProjectsProjectNamespaceOutput) ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput {
	return o
}

func (o GetProjectsProjectNamespaceOutput) ToGetProjectsProjectNamespaceOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceOutput {
	return o
}

// The full path of the namespace.
func (o GetProjectsProjectNamespaceOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.FullPath }).(pulumi.StringOutput)
}

// The ID of the namespace.
func (o GetProjectsProjectNamespaceOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) int { return v.Id }).(pulumi.IntOutput)
}

// The kind of the namespace.
func (o GetProjectsProjectNamespaceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Kind }).(pulumi.StringOutput)
}

// The name of the namespace.
func (o GetProjectsProjectNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Name }).(pulumi.StringOutput)
}

// The path of the namespace.
func (o GetProjectsProjectNamespaceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Path }).(pulumi.StringOutput)
}

type GetProjectsProjectNamespaceArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectNamespace)(nil)).Elem()
}

func (o GetProjectsProjectNamespaceArrayOutput) ToGetProjectsProjectNamespaceArrayOutput() GetProjectsProjectNamespaceArrayOutput {
	return o
}

func (o GetProjectsProjectNamespaceArrayOutput) ToGetProjectsProjectNamespaceArrayOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceArrayOutput {
	return o
}

func (o GetProjectsProjectNamespaceArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectNamespace {
		return vs[0].([]GetProjectsProjectNamespace)[vs[1].(int)]
	}).(GetProjectsProjectNamespaceOutput)
}

type GetProjectsProjectOwner struct {
	// The avatar url of the owner.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The ID of the owner.
	Id int `pulumi:"id"`
	// The name of the owner.
	Name string `pulumi:"name"`
	// The state of the owner.
	State string `pulumi:"state"`
	// The username of the owner.
	Username string `pulumi:"username"`
	// The website url of the owner.
	WebsiteUrl string `pulumi:"websiteUrl"`
}

// GetProjectsProjectOwnerInput is an input type that accepts GetProjectsProjectOwnerArgs and GetProjectsProjectOwnerOutput values.
// You can construct a concrete instance of `GetProjectsProjectOwnerInput` via:
//
//	GetProjectsProjectOwnerArgs{...}
type GetProjectsProjectOwnerInput interface {
	pulumi.Input

	ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput
	ToGetProjectsProjectOwnerOutputWithContext(context.Context) GetProjectsProjectOwnerOutput
}

type GetProjectsProjectOwnerArgs struct {
	// The avatar url of the owner.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The ID of the owner.
	Id pulumi.IntInput `pulumi:"id"`
	// The name of the owner.
	Name pulumi.StringInput `pulumi:"name"`
	// The state of the owner.
	State pulumi.StringInput `pulumi:"state"`
	// The username of the owner.
	Username pulumi.StringInput `pulumi:"username"`
	// The website url of the owner.
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetProjectsProjectOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectOwner)(nil)).Elem()
}

func (i GetProjectsProjectOwnerArgs) ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput {
	return i.ToGetProjectsProjectOwnerOutputWithContext(context.Background())
}

func (i GetProjectsProjectOwnerArgs) ToGetProjectsProjectOwnerOutputWithContext(ctx context.Context) GetProjectsProjectOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOwnerOutput)
}

// GetProjectsProjectOwnerArrayInput is an input type that accepts GetProjectsProjectOwnerArray and GetProjectsProjectOwnerArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectOwnerArrayInput` via:
//
//	GetProjectsProjectOwnerArray{ GetProjectsProjectOwnerArgs{...} }
type GetProjectsProjectOwnerArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectOwnerArrayOutput() GetProjectsProjectOwnerArrayOutput
	ToGetProjectsProjectOwnerArrayOutputWithContext(context.Context) GetProjectsProjectOwnerArrayOutput
}

type GetProjectsProjectOwnerArray []GetProjectsProjectOwnerInput

func (GetProjectsProjectOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectOwner)(nil)).Elem()
}

func (i GetProjectsProjectOwnerArray) ToGetProjectsProjectOwnerArrayOutput() GetProjectsProjectOwnerArrayOutput {
	return i.ToGetProjectsProjectOwnerArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectOwnerArray) ToGetProjectsProjectOwnerArrayOutputWithContext(ctx context.Context) GetProjectsProjectOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOwnerArrayOutput)
}

type GetProjectsProjectOwnerOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectOwner)(nil)).Elem()
}

func (o GetProjectsProjectOwnerOutput) ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput {
	return o
}

func (o GetProjectsProjectOwnerOutput) ToGetProjectsProjectOwnerOutputWithContext(ctx context.Context) GetProjectsProjectOwnerOutput {
	return o
}

// The avatar url of the owner.
func (o GetProjectsProjectOwnerOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The ID of the owner.
func (o GetProjectsProjectOwnerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the owner.
func (o GetProjectsProjectOwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.Name }).(pulumi.StringOutput)
}

// The state of the owner.
func (o GetProjectsProjectOwnerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.State }).(pulumi.StringOutput)
}

// The username of the owner.
func (o GetProjectsProjectOwnerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.Username }).(pulumi.StringOutput)
}

// The website url of the owner.
func (o GetProjectsProjectOwnerOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetProjectsProjectOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectOwner)(nil)).Elem()
}

func (o GetProjectsProjectOwnerArrayOutput) ToGetProjectsProjectOwnerArrayOutput() GetProjectsProjectOwnerArrayOutput {
	return o
}

func (o GetProjectsProjectOwnerArrayOutput) ToGetProjectsProjectOwnerArrayOutputWithContext(ctx context.Context) GetProjectsProjectOwnerArrayOutput {
	return o
}

func (o GetProjectsProjectOwnerArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectOwner {
		return vs[0].([]GetProjectsProjectOwner)[vs[1].(int)]
	}).(GetProjectsProjectOwnerOutput)
}

type GetProjectsProjectPermission struct {
	// Group access level.
	GroupAccess map[string]int `pulumi:"groupAccess"`
	// Project access level.
	ProjectAccess map[string]int `pulumi:"projectAccess"`
}

// GetProjectsProjectPermissionInput is an input type that accepts GetProjectsProjectPermissionArgs and GetProjectsProjectPermissionOutput values.
// You can construct a concrete instance of `GetProjectsProjectPermissionInput` via:
//
//	GetProjectsProjectPermissionArgs{...}
type GetProjectsProjectPermissionInput interface {
	pulumi.Input

	ToGetProjectsProjectPermissionOutput() GetProjectsProjectPermissionOutput
	ToGetProjectsProjectPermissionOutputWithContext(context.Context) GetProjectsProjectPermissionOutput
}

type GetProjectsProjectPermissionArgs struct {
	// Group access level.
	GroupAccess pulumi.IntMapInput `pulumi:"groupAccess"`
	// Project access level.
	ProjectAccess pulumi.IntMapInput `pulumi:"projectAccess"`
}

func (GetProjectsProjectPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectPermission)(nil)).Elem()
}

func (i GetProjectsProjectPermissionArgs) ToGetProjectsProjectPermissionOutput() GetProjectsProjectPermissionOutput {
	return i.ToGetProjectsProjectPermissionOutputWithContext(context.Background())
}

func (i GetProjectsProjectPermissionArgs) ToGetProjectsProjectPermissionOutputWithContext(ctx context.Context) GetProjectsProjectPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectPermissionOutput)
}

// GetProjectsProjectPermissionArrayInput is an input type that accepts GetProjectsProjectPermissionArray and GetProjectsProjectPermissionArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectPermissionArrayInput` via:
//
//	GetProjectsProjectPermissionArray{ GetProjectsProjectPermissionArgs{...} }
type GetProjectsProjectPermissionArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectPermissionArrayOutput() GetProjectsProjectPermissionArrayOutput
	ToGetProjectsProjectPermissionArrayOutputWithContext(context.Context) GetProjectsProjectPermissionArrayOutput
}

type GetProjectsProjectPermissionArray []GetProjectsProjectPermissionInput

func (GetProjectsProjectPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectPermission)(nil)).Elem()
}

func (i GetProjectsProjectPermissionArray) ToGetProjectsProjectPermissionArrayOutput() GetProjectsProjectPermissionArrayOutput {
	return i.ToGetProjectsProjectPermissionArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectPermissionArray) ToGetProjectsProjectPermissionArrayOutputWithContext(ctx context.Context) GetProjectsProjectPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectPermissionArrayOutput)
}

type GetProjectsProjectPermissionOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectPermission)(nil)).Elem()
}

func (o GetProjectsProjectPermissionOutput) ToGetProjectsProjectPermissionOutput() GetProjectsProjectPermissionOutput {
	return o
}

func (o GetProjectsProjectPermissionOutput) ToGetProjectsProjectPermissionOutputWithContext(ctx context.Context) GetProjectsProjectPermissionOutput {
	return o
}

// Group access level.
func (o GetProjectsProjectPermissionOutput) GroupAccess() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProjectPermission) map[string]int { return v.GroupAccess }).(pulumi.IntMapOutput)
}

// Project access level.
func (o GetProjectsProjectPermissionOutput) ProjectAccess() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProjectPermission) map[string]int { return v.ProjectAccess }).(pulumi.IntMapOutput)
}

type GetProjectsProjectPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectPermission)(nil)).Elem()
}

func (o GetProjectsProjectPermissionArrayOutput) ToGetProjectsProjectPermissionArrayOutput() GetProjectsProjectPermissionArrayOutput {
	return o
}

func (o GetProjectsProjectPermissionArrayOutput) ToGetProjectsProjectPermissionArrayOutputWithContext(ctx context.Context) GetProjectsProjectPermissionArrayOutput {
	return o
}

func (o GetProjectsProjectPermissionArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectPermission {
		return vs[0].([]GetProjectsProjectPermission)[vs[1].(int)]
	}).(GetProjectsProjectPermissionOutput)
}

type GetProjectsProjectSharedWithGroup struct {
	// The group access level.
	GroupAccessLevel string `pulumi:"groupAccessLevel"`
	// The group ID.
	GroupId int `pulumi:"groupId"`
	// The group name.
	GroupName string `pulumi:"groupName"`
}

// GetProjectsProjectSharedWithGroupInput is an input type that accepts GetProjectsProjectSharedWithGroupArgs and GetProjectsProjectSharedWithGroupOutput values.
// You can construct a concrete instance of `GetProjectsProjectSharedWithGroupInput` via:
//
//	GetProjectsProjectSharedWithGroupArgs{...}
type GetProjectsProjectSharedWithGroupInput interface {
	pulumi.Input

	ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput
	ToGetProjectsProjectSharedWithGroupOutputWithContext(context.Context) GetProjectsProjectSharedWithGroupOutput
}

type GetProjectsProjectSharedWithGroupArgs struct {
	// The group access level.
	GroupAccessLevel pulumi.StringInput `pulumi:"groupAccessLevel"`
	// The group ID.
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// The group name.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (GetProjectsProjectSharedWithGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectsProjectSharedWithGroupArgs) ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput {
	return i.ToGetProjectsProjectSharedWithGroupOutputWithContext(context.Background())
}

func (i GetProjectsProjectSharedWithGroupArgs) ToGetProjectsProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectSharedWithGroupOutput)
}

// GetProjectsProjectSharedWithGroupArrayInput is an input type that accepts GetProjectsProjectSharedWithGroupArray and GetProjectsProjectSharedWithGroupArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectSharedWithGroupArrayInput` via:
//
//	GetProjectsProjectSharedWithGroupArray{ GetProjectsProjectSharedWithGroupArgs{...} }
type GetProjectsProjectSharedWithGroupArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput
	ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(context.Context) GetProjectsProjectSharedWithGroupArrayOutput
}

type GetProjectsProjectSharedWithGroupArray []GetProjectsProjectSharedWithGroupInput

func (GetProjectsProjectSharedWithGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectsProjectSharedWithGroupArray) ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput {
	return i.ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectSharedWithGroupArray) ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectSharedWithGroupArrayOutput)
}

type GetProjectsProjectSharedWithGroupOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectSharedWithGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectsProjectSharedWithGroupOutput) ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupOutput) ToGetProjectsProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupOutput {
	return o
}

// The group access level.
func (o GetProjectsProjectSharedWithGroupOutput) GroupAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) string { return v.GroupAccessLevel }).(pulumi.StringOutput)
}

// The group ID.
func (o GetProjectsProjectSharedWithGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

// The group name.
func (o GetProjectsProjectSharedWithGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

type GetProjectsProjectSharedWithGroupArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectSharedWithGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectSharedWithGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectSharedWithGroup {
		return vs[0].([]GetProjectsProjectSharedWithGroup)[vs[1].(int)]
	}).(GetProjectsProjectSharedWithGroupOutput)
}

type GetReleaseAssets struct {
	// The number of assets for a release
	Count int `pulumi:"count"`
	// The links for a release
	Links []GetReleaseAssetsLink `pulumi:"links"`
	// The sources for a release
	Sources []GetReleaseAssetsSource `pulumi:"sources"`
}

// GetReleaseAssetsInput is an input type that accepts GetReleaseAssetsArgs and GetReleaseAssetsOutput values.
// You can construct a concrete instance of `GetReleaseAssetsInput` via:
//
//	GetReleaseAssetsArgs{...}
type GetReleaseAssetsInput interface {
	pulumi.Input

	ToGetReleaseAssetsOutput() GetReleaseAssetsOutput
	ToGetReleaseAssetsOutputWithContext(context.Context) GetReleaseAssetsOutput
}

type GetReleaseAssetsArgs struct {
	// The number of assets for a release
	Count pulumi.IntInput `pulumi:"count"`
	// The links for a release
	Links GetReleaseAssetsLinkArrayInput `pulumi:"links"`
	// The sources for a release
	Sources GetReleaseAssetsSourceArrayInput `pulumi:"sources"`
}

func (GetReleaseAssetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAssets)(nil)).Elem()
}

func (i GetReleaseAssetsArgs) ToGetReleaseAssetsOutput() GetReleaseAssetsOutput {
	return i.ToGetReleaseAssetsOutputWithContext(context.Background())
}

func (i GetReleaseAssetsArgs) ToGetReleaseAssetsOutputWithContext(ctx context.Context) GetReleaseAssetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetsOutput)
}

func (i GetReleaseAssetsArgs) ToGetReleaseAssetsPtrOutput() GetReleaseAssetsPtrOutput {
	return i.ToGetReleaseAssetsPtrOutputWithContext(context.Background())
}

func (i GetReleaseAssetsArgs) ToGetReleaseAssetsPtrOutputWithContext(ctx context.Context) GetReleaseAssetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetsOutput).ToGetReleaseAssetsPtrOutputWithContext(ctx)
}

// GetReleaseAssetsPtrInput is an input type that accepts GetReleaseAssetsArgs, GetReleaseAssetsPtr and GetReleaseAssetsPtrOutput values.
// You can construct a concrete instance of `GetReleaseAssetsPtrInput` via:
//
//	        GetReleaseAssetsArgs{...}
//
//	or:
//
//	        nil
type GetReleaseAssetsPtrInput interface {
	pulumi.Input

	ToGetReleaseAssetsPtrOutput() GetReleaseAssetsPtrOutput
	ToGetReleaseAssetsPtrOutputWithContext(context.Context) GetReleaseAssetsPtrOutput
}

type getReleaseAssetsPtrType GetReleaseAssetsArgs

func GetReleaseAssetsPtr(v *GetReleaseAssetsArgs) GetReleaseAssetsPtrInput {
	return (*getReleaseAssetsPtrType)(v)
}

func (*getReleaseAssetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetReleaseAssets)(nil)).Elem()
}

func (i *getReleaseAssetsPtrType) ToGetReleaseAssetsPtrOutput() GetReleaseAssetsPtrOutput {
	return i.ToGetReleaseAssetsPtrOutputWithContext(context.Background())
}

func (i *getReleaseAssetsPtrType) ToGetReleaseAssetsPtrOutputWithContext(ctx context.Context) GetReleaseAssetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetsPtrOutput)
}

type GetReleaseAssetsOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAssets)(nil)).Elem()
}

func (o GetReleaseAssetsOutput) ToGetReleaseAssetsOutput() GetReleaseAssetsOutput {
	return o
}

func (o GetReleaseAssetsOutput) ToGetReleaseAssetsOutputWithContext(ctx context.Context) GetReleaseAssetsOutput {
	return o
}

func (o GetReleaseAssetsOutput) ToGetReleaseAssetsPtrOutput() GetReleaseAssetsPtrOutput {
	return o.ToGetReleaseAssetsPtrOutputWithContext(context.Background())
}

func (o GetReleaseAssetsOutput) ToGetReleaseAssetsPtrOutputWithContext(ctx context.Context) GetReleaseAssetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetReleaseAssets) *GetReleaseAssets {
		return &v
	}).(GetReleaseAssetsPtrOutput)
}

// The number of assets for a release
func (o GetReleaseAssetsOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetReleaseAssets) int { return v.Count }).(pulumi.IntOutput)
}

// The links for a release
func (o GetReleaseAssetsOutput) Links() GetReleaseAssetsLinkArrayOutput {
	return o.ApplyT(func(v GetReleaseAssets) []GetReleaseAssetsLink { return v.Links }).(GetReleaseAssetsLinkArrayOutput)
}

// The sources for a release
func (o GetReleaseAssetsOutput) Sources() GetReleaseAssetsSourceArrayOutput {
	return o.ApplyT(func(v GetReleaseAssets) []GetReleaseAssetsSource { return v.Sources }).(GetReleaseAssetsSourceArrayOutput)
}

type GetReleaseAssetsPtrOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetReleaseAssets)(nil)).Elem()
}

func (o GetReleaseAssetsPtrOutput) ToGetReleaseAssetsPtrOutput() GetReleaseAssetsPtrOutput {
	return o
}

func (o GetReleaseAssetsPtrOutput) ToGetReleaseAssetsPtrOutputWithContext(ctx context.Context) GetReleaseAssetsPtrOutput {
	return o
}

func (o GetReleaseAssetsPtrOutput) Elem() GetReleaseAssetsOutput {
	return o.ApplyT(func(v *GetReleaseAssets) GetReleaseAssets {
		if v != nil {
			return *v
		}
		var ret GetReleaseAssets
		return ret
	}).(GetReleaseAssetsOutput)
}

// The number of assets for a release
func (o GetReleaseAssetsPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetReleaseAssets) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The links for a release
func (o GetReleaseAssetsPtrOutput) Links() GetReleaseAssetsLinkArrayOutput {
	return o.ApplyT(func(v *GetReleaseAssets) []GetReleaseAssetsLink {
		if v == nil {
			return nil
		}
		return v.Links
	}).(GetReleaseAssetsLinkArrayOutput)
}

// The sources for a release
func (o GetReleaseAssetsPtrOutput) Sources() GetReleaseAssetsSourceArrayOutput {
	return o.ApplyT(func(v *GetReleaseAssets) []GetReleaseAssetsSource {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(GetReleaseAssetsSourceArrayOutput)
}

type GetReleaseAssetsLink struct {
	// The ID of the link
	Id int `pulumi:"id"`
	// The type of the link
	LinkType string `pulumi:"linkType"`
	// The name of the link
	Name string `pulumi:"name"`
	// The URL of the link
	Url string `pulumi:"url"`
}

// GetReleaseAssetsLinkInput is an input type that accepts GetReleaseAssetsLinkArgs and GetReleaseAssetsLinkOutput values.
// You can construct a concrete instance of `GetReleaseAssetsLinkInput` via:
//
//	GetReleaseAssetsLinkArgs{...}
type GetReleaseAssetsLinkInput interface {
	pulumi.Input

	ToGetReleaseAssetsLinkOutput() GetReleaseAssetsLinkOutput
	ToGetReleaseAssetsLinkOutputWithContext(context.Context) GetReleaseAssetsLinkOutput
}

type GetReleaseAssetsLinkArgs struct {
	// The ID of the link
	Id pulumi.IntInput `pulumi:"id"`
	// The type of the link
	LinkType pulumi.StringInput `pulumi:"linkType"`
	// The name of the link
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the link
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetReleaseAssetsLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAssetsLink)(nil)).Elem()
}

func (i GetReleaseAssetsLinkArgs) ToGetReleaseAssetsLinkOutput() GetReleaseAssetsLinkOutput {
	return i.ToGetReleaseAssetsLinkOutputWithContext(context.Background())
}

func (i GetReleaseAssetsLinkArgs) ToGetReleaseAssetsLinkOutputWithContext(ctx context.Context) GetReleaseAssetsLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetsLinkOutput)
}

// GetReleaseAssetsLinkArrayInput is an input type that accepts GetReleaseAssetsLinkArray and GetReleaseAssetsLinkArrayOutput values.
// You can construct a concrete instance of `GetReleaseAssetsLinkArrayInput` via:
//
//	GetReleaseAssetsLinkArray{ GetReleaseAssetsLinkArgs{...} }
type GetReleaseAssetsLinkArrayInput interface {
	pulumi.Input

	ToGetReleaseAssetsLinkArrayOutput() GetReleaseAssetsLinkArrayOutput
	ToGetReleaseAssetsLinkArrayOutputWithContext(context.Context) GetReleaseAssetsLinkArrayOutput
}

type GetReleaseAssetsLinkArray []GetReleaseAssetsLinkInput

func (GetReleaseAssetsLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseAssetsLink)(nil)).Elem()
}

func (i GetReleaseAssetsLinkArray) ToGetReleaseAssetsLinkArrayOutput() GetReleaseAssetsLinkArrayOutput {
	return i.ToGetReleaseAssetsLinkArrayOutputWithContext(context.Background())
}

func (i GetReleaseAssetsLinkArray) ToGetReleaseAssetsLinkArrayOutputWithContext(ctx context.Context) GetReleaseAssetsLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetsLinkArrayOutput)
}

type GetReleaseAssetsLinkOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetsLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAssetsLink)(nil)).Elem()
}

func (o GetReleaseAssetsLinkOutput) ToGetReleaseAssetsLinkOutput() GetReleaseAssetsLinkOutput {
	return o
}

func (o GetReleaseAssetsLinkOutput) ToGetReleaseAssetsLinkOutputWithContext(ctx context.Context) GetReleaseAssetsLinkOutput {
	return o
}

// The ID of the link
func (o GetReleaseAssetsLinkOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetReleaseAssetsLink) int { return v.Id }).(pulumi.IntOutput)
}

// The type of the link
func (o GetReleaseAssetsLinkOutput) LinkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAssetsLink) string { return v.LinkType }).(pulumi.StringOutput)
}

// The name of the link
func (o GetReleaseAssetsLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAssetsLink) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the link
func (o GetReleaseAssetsLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAssetsLink) string { return v.Url }).(pulumi.StringOutput)
}

type GetReleaseAssetsLinkArrayOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetsLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseAssetsLink)(nil)).Elem()
}

func (o GetReleaseAssetsLinkArrayOutput) ToGetReleaseAssetsLinkArrayOutput() GetReleaseAssetsLinkArrayOutput {
	return o
}

func (o GetReleaseAssetsLinkArrayOutput) ToGetReleaseAssetsLinkArrayOutputWithContext(ctx context.Context) GetReleaseAssetsLinkArrayOutput {
	return o
}

func (o GetReleaseAssetsLinkArrayOutput) Index(i pulumi.IntInput) GetReleaseAssetsLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReleaseAssetsLink {
		return vs[0].([]GetReleaseAssetsLink)[vs[1].(int)]
	}).(GetReleaseAssetsLinkOutput)
}

type GetReleaseAssetsSource struct {
	// The format of the source
	Format string `pulumi:"format"`
	// The URL of the source
	Url string `pulumi:"url"`
}

// GetReleaseAssetsSourceInput is an input type that accepts GetReleaseAssetsSourceArgs and GetReleaseAssetsSourceOutput values.
// You can construct a concrete instance of `GetReleaseAssetsSourceInput` via:
//
//	GetReleaseAssetsSourceArgs{...}
type GetReleaseAssetsSourceInput interface {
	pulumi.Input

	ToGetReleaseAssetsSourceOutput() GetReleaseAssetsSourceOutput
	ToGetReleaseAssetsSourceOutputWithContext(context.Context) GetReleaseAssetsSourceOutput
}

type GetReleaseAssetsSourceArgs struct {
	// The format of the source
	Format pulumi.StringInput `pulumi:"format"`
	// The URL of the source
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetReleaseAssetsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAssetsSource)(nil)).Elem()
}

func (i GetReleaseAssetsSourceArgs) ToGetReleaseAssetsSourceOutput() GetReleaseAssetsSourceOutput {
	return i.ToGetReleaseAssetsSourceOutputWithContext(context.Background())
}

func (i GetReleaseAssetsSourceArgs) ToGetReleaseAssetsSourceOutputWithContext(ctx context.Context) GetReleaseAssetsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetsSourceOutput)
}

// GetReleaseAssetsSourceArrayInput is an input type that accepts GetReleaseAssetsSourceArray and GetReleaseAssetsSourceArrayOutput values.
// You can construct a concrete instance of `GetReleaseAssetsSourceArrayInput` via:
//
//	GetReleaseAssetsSourceArray{ GetReleaseAssetsSourceArgs{...} }
type GetReleaseAssetsSourceArrayInput interface {
	pulumi.Input

	ToGetReleaseAssetsSourceArrayOutput() GetReleaseAssetsSourceArrayOutput
	ToGetReleaseAssetsSourceArrayOutputWithContext(context.Context) GetReleaseAssetsSourceArrayOutput
}

type GetReleaseAssetsSourceArray []GetReleaseAssetsSourceInput

func (GetReleaseAssetsSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseAssetsSource)(nil)).Elem()
}

func (i GetReleaseAssetsSourceArray) ToGetReleaseAssetsSourceArrayOutput() GetReleaseAssetsSourceArrayOutput {
	return i.ToGetReleaseAssetsSourceArrayOutputWithContext(context.Background())
}

func (i GetReleaseAssetsSourceArray) ToGetReleaseAssetsSourceArrayOutputWithContext(ctx context.Context) GetReleaseAssetsSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetsSourceArrayOutput)
}

type GetReleaseAssetsSourceOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAssetsSource)(nil)).Elem()
}

func (o GetReleaseAssetsSourceOutput) ToGetReleaseAssetsSourceOutput() GetReleaseAssetsSourceOutput {
	return o
}

func (o GetReleaseAssetsSourceOutput) ToGetReleaseAssetsSourceOutputWithContext(ctx context.Context) GetReleaseAssetsSourceOutput {
	return o
}

// The format of the source
func (o GetReleaseAssetsSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAssetsSource) string { return v.Format }).(pulumi.StringOutput)
}

// The URL of the source
func (o GetReleaseAssetsSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAssetsSource) string { return v.Url }).(pulumi.StringOutput)
}

type GetReleaseAssetsSourceArrayOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetsSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseAssetsSource)(nil)).Elem()
}

func (o GetReleaseAssetsSourceArrayOutput) ToGetReleaseAssetsSourceArrayOutput() GetReleaseAssetsSourceArrayOutput {
	return o
}

func (o GetReleaseAssetsSourceArrayOutput) ToGetReleaseAssetsSourceArrayOutputWithContext(ctx context.Context) GetReleaseAssetsSourceArrayOutput {
	return o
}

func (o GetReleaseAssetsSourceArrayOutput) Index(i pulumi.IntInput) GetReleaseAssetsSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReleaseAssetsSource {
		return vs[0].([]GetReleaseAssetsSource)[vs[1].(int)]
	}).(GetReleaseAssetsSourceOutput)
}

type GetReleaseLinksReleaseLink struct {
	// Full path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
	DirectAssetUrl string `pulumi:"directAssetUrl"`
	// External or internal link.
	External bool `pulumi:"external"`
	// Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
	Filepath string `pulumi:"filepath"`
	// The ID of the link.
	LinkId int `pulumi:"linkId"`
	// The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
	LinkType string `pulumi:"linkType"`
	// The name of the link. Link names must be unique within the release.
	Name string `pulumi:"name"`
	// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
	Project string `pulumi:"project"`
	// The tag associated with the Release.
	TagName string `pulumi:"tagName"`
	// The URL of the link. Link URLs must be unique within the release.
	Url string `pulumi:"url"`
}

// GetReleaseLinksReleaseLinkInput is an input type that accepts GetReleaseLinksReleaseLinkArgs and GetReleaseLinksReleaseLinkOutput values.
// You can construct a concrete instance of `GetReleaseLinksReleaseLinkInput` via:
//
//	GetReleaseLinksReleaseLinkArgs{...}
type GetReleaseLinksReleaseLinkInput interface {
	pulumi.Input

	ToGetReleaseLinksReleaseLinkOutput() GetReleaseLinksReleaseLinkOutput
	ToGetReleaseLinksReleaseLinkOutputWithContext(context.Context) GetReleaseLinksReleaseLinkOutput
}

type GetReleaseLinksReleaseLinkArgs struct {
	// Full path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
	DirectAssetUrl pulumi.StringInput `pulumi:"directAssetUrl"`
	// External or internal link.
	External pulumi.BoolInput `pulumi:"external"`
	// Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
	Filepath pulumi.StringInput `pulumi:"filepath"`
	// The ID of the link.
	LinkId pulumi.IntInput `pulumi:"linkId"`
	// The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
	LinkType pulumi.StringInput `pulumi:"linkType"`
	// The name of the link. Link names must be unique within the release.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
	Project pulumi.StringInput `pulumi:"project"`
	// The tag associated with the Release.
	TagName pulumi.StringInput `pulumi:"tagName"`
	// The URL of the link. Link URLs must be unique within the release.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetReleaseLinksReleaseLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (i GetReleaseLinksReleaseLinkArgs) ToGetReleaseLinksReleaseLinkOutput() GetReleaseLinksReleaseLinkOutput {
	return i.ToGetReleaseLinksReleaseLinkOutputWithContext(context.Background())
}

func (i GetReleaseLinksReleaseLinkArgs) ToGetReleaseLinksReleaseLinkOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseLinksReleaseLinkOutput)
}

// GetReleaseLinksReleaseLinkArrayInput is an input type that accepts GetReleaseLinksReleaseLinkArray and GetReleaseLinksReleaseLinkArrayOutput values.
// You can construct a concrete instance of `GetReleaseLinksReleaseLinkArrayInput` via:
//
//	GetReleaseLinksReleaseLinkArray{ GetReleaseLinksReleaseLinkArgs{...} }
type GetReleaseLinksReleaseLinkArrayInput interface {
	pulumi.Input

	ToGetReleaseLinksReleaseLinkArrayOutput() GetReleaseLinksReleaseLinkArrayOutput
	ToGetReleaseLinksReleaseLinkArrayOutputWithContext(context.Context) GetReleaseLinksReleaseLinkArrayOutput
}

type GetReleaseLinksReleaseLinkArray []GetReleaseLinksReleaseLinkInput

func (GetReleaseLinksReleaseLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (i GetReleaseLinksReleaseLinkArray) ToGetReleaseLinksReleaseLinkArrayOutput() GetReleaseLinksReleaseLinkArrayOutput {
	return i.ToGetReleaseLinksReleaseLinkArrayOutputWithContext(context.Background())
}

func (i GetReleaseLinksReleaseLinkArray) ToGetReleaseLinksReleaseLinkArrayOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseLinksReleaseLinkArrayOutput)
}

type GetReleaseLinksReleaseLinkOutput struct{ *pulumi.OutputState }

func (GetReleaseLinksReleaseLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (o GetReleaseLinksReleaseLinkOutput) ToGetReleaseLinksReleaseLinkOutput() GetReleaseLinksReleaseLinkOutput {
	return o
}

func (o GetReleaseLinksReleaseLinkOutput) ToGetReleaseLinksReleaseLinkOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkOutput {
	return o
}

// Full path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
func (o GetReleaseLinksReleaseLinkOutput) DirectAssetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.DirectAssetUrl }).(pulumi.StringOutput)
}

// External or internal link.
func (o GetReleaseLinksReleaseLinkOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) bool { return v.External }).(pulumi.BoolOutput)
}

// Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
func (o GetReleaseLinksReleaseLinkOutput) Filepath() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Filepath }).(pulumi.StringOutput)
}

// The ID of the link.
func (o GetReleaseLinksReleaseLinkOutput) LinkId() pulumi.IntOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) int { return v.LinkId }).(pulumi.IntOutput)
}

// The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
func (o GetReleaseLinksReleaseLinkOutput) LinkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.LinkType }).(pulumi.StringOutput)
}

// The name of the link. Link names must be unique within the release.
func (o GetReleaseLinksReleaseLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Name }).(pulumi.StringOutput)
}

// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
func (o GetReleaseLinksReleaseLinkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Project }).(pulumi.StringOutput)
}

// The tag associated with the Release.
func (o GetReleaseLinksReleaseLinkOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.TagName }).(pulumi.StringOutput)
}

// The URL of the link. Link URLs must be unique within the release.
func (o GetReleaseLinksReleaseLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Url }).(pulumi.StringOutput)
}

type GetReleaseLinksReleaseLinkArrayOutput struct{ *pulumi.OutputState }

func (GetReleaseLinksReleaseLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (o GetReleaseLinksReleaseLinkArrayOutput) ToGetReleaseLinksReleaseLinkArrayOutput() GetReleaseLinksReleaseLinkArrayOutput {
	return o
}

func (o GetReleaseLinksReleaseLinkArrayOutput) ToGetReleaseLinksReleaseLinkArrayOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkArrayOutput {
	return o
}

func (o GetReleaseLinksReleaseLinkArrayOutput) Index(i pulumi.IntInput) GetReleaseLinksReleaseLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReleaseLinksReleaseLink {
		return vs[0].([]GetReleaseLinksReleaseLink)[vs[1].(int)]
	}).(GetReleaseLinksReleaseLinkOutput)
}

type GetRepositoryTreeTree struct {
	// The SHA-1 hash of the tree or blob in the repository.
	Id string `pulumi:"id"`
	// Unix access mode of the file in the repository.
	Mode string `pulumi:"mode"`
	// Name of the blob or tree in the repository
	Name string `pulumi:"name"`
	// Path of the object inside of the repository.
	Path string `pulumi:"path"`
	// Type of object in the repository. Can be either type tree or of type blob
	Type string `pulumi:"type"`
}

// GetRepositoryTreeTreeInput is an input type that accepts GetRepositoryTreeTreeArgs and GetRepositoryTreeTreeOutput values.
// You can construct a concrete instance of `GetRepositoryTreeTreeInput` via:
//
//	GetRepositoryTreeTreeArgs{...}
type GetRepositoryTreeTreeInput interface {
	pulumi.Input

	ToGetRepositoryTreeTreeOutput() GetRepositoryTreeTreeOutput
	ToGetRepositoryTreeTreeOutputWithContext(context.Context) GetRepositoryTreeTreeOutput
}

type GetRepositoryTreeTreeArgs struct {
	// The SHA-1 hash of the tree or blob in the repository.
	Id pulumi.StringInput `pulumi:"id"`
	// Unix access mode of the file in the repository.
	Mode pulumi.StringInput `pulumi:"mode"`
	// Name of the blob or tree in the repository
	Name pulumi.StringInput `pulumi:"name"`
	// Path of the object inside of the repository.
	Path pulumi.StringInput `pulumi:"path"`
	// Type of object in the repository. Can be either type tree or of type blob
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRepositoryTreeTreeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTreeTree)(nil)).Elem()
}

func (i GetRepositoryTreeTreeArgs) ToGetRepositoryTreeTreeOutput() GetRepositoryTreeTreeOutput {
	return i.ToGetRepositoryTreeTreeOutputWithContext(context.Background())
}

func (i GetRepositoryTreeTreeArgs) ToGetRepositoryTreeTreeOutputWithContext(ctx context.Context) GetRepositoryTreeTreeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryTreeTreeOutput)
}

// GetRepositoryTreeTreeArrayInput is an input type that accepts GetRepositoryTreeTreeArray and GetRepositoryTreeTreeArrayOutput values.
// You can construct a concrete instance of `GetRepositoryTreeTreeArrayInput` via:
//
//	GetRepositoryTreeTreeArray{ GetRepositoryTreeTreeArgs{...} }
type GetRepositoryTreeTreeArrayInput interface {
	pulumi.Input

	ToGetRepositoryTreeTreeArrayOutput() GetRepositoryTreeTreeArrayOutput
	ToGetRepositoryTreeTreeArrayOutputWithContext(context.Context) GetRepositoryTreeTreeArrayOutput
}

type GetRepositoryTreeTreeArray []GetRepositoryTreeTreeInput

func (GetRepositoryTreeTreeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryTreeTree)(nil)).Elem()
}

func (i GetRepositoryTreeTreeArray) ToGetRepositoryTreeTreeArrayOutput() GetRepositoryTreeTreeArrayOutput {
	return i.ToGetRepositoryTreeTreeArrayOutputWithContext(context.Background())
}

func (i GetRepositoryTreeTreeArray) ToGetRepositoryTreeTreeArrayOutputWithContext(ctx context.Context) GetRepositoryTreeTreeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryTreeTreeArrayOutput)
}

type GetRepositoryTreeTreeOutput struct{ *pulumi.OutputState }

func (GetRepositoryTreeTreeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTreeTree)(nil)).Elem()
}

func (o GetRepositoryTreeTreeOutput) ToGetRepositoryTreeTreeOutput() GetRepositoryTreeTreeOutput {
	return o
}

func (o GetRepositoryTreeTreeOutput) ToGetRepositoryTreeTreeOutputWithContext(ctx context.Context) GetRepositoryTreeTreeOutput {
	return o
}

// The SHA-1 hash of the tree or blob in the repository.
func (o GetRepositoryTreeTreeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Id }).(pulumi.StringOutput)
}

// Unix access mode of the file in the repository.
func (o GetRepositoryTreeTreeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Mode }).(pulumi.StringOutput)
}

// Name of the blob or tree in the repository
func (o GetRepositoryTreeTreeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Name }).(pulumi.StringOutput)
}

// Path of the object inside of the repository.
func (o GetRepositoryTreeTreeOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Path }).(pulumi.StringOutput)
}

// Type of object in the repository. Can be either type tree or of type blob
func (o GetRepositoryTreeTreeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Type }).(pulumi.StringOutput)
}

type GetRepositoryTreeTreeArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryTreeTreeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryTreeTree)(nil)).Elem()
}

func (o GetRepositoryTreeTreeArrayOutput) ToGetRepositoryTreeTreeArrayOutput() GetRepositoryTreeTreeArrayOutput {
	return o
}

func (o GetRepositoryTreeTreeArrayOutput) ToGetRepositoryTreeTreeArrayOutputWithContext(ctx context.Context) GetRepositoryTreeTreeArrayOutput {
	return o
}

func (o GetRepositoryTreeTreeArrayOutput) Index(i pulumi.IntInput) GetRepositoryTreeTreeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryTreeTree {
		return vs[0].([]GetRepositoryTreeTree)[vs[1].(int)]
	}).(GetRepositoryTreeTreeOutput)
}

type GetRunnersRunner struct {
	// The description of the runner.
	Description string `pulumi:"description"`
	// The runner id.
	Id int `pulumi:"id"`
	// Indicates if this is a shared runner
	IsShared bool `pulumi:"isShared"`
	// The connectivity status of the runner.
	Online bool `pulumi:"online"`
	// Indicates if the runner is accepting or ignoring new jobs.
	Paused bool `pulumi:"paused"`
	// The runner type. Values are `instanceType`, `groupType` and `projectType`.
	RunnerType string `pulumi:"runnerType"`
	// The status of the runner. Values can be `online`, `offline`, `stale`, and `neverContacted`.
	Status string `pulumi:"status"`
}

// GetRunnersRunnerInput is an input type that accepts GetRunnersRunnerArgs and GetRunnersRunnerOutput values.
// You can construct a concrete instance of `GetRunnersRunnerInput` via:
//
//	GetRunnersRunnerArgs{...}
type GetRunnersRunnerInput interface {
	pulumi.Input

	ToGetRunnersRunnerOutput() GetRunnersRunnerOutput
	ToGetRunnersRunnerOutputWithContext(context.Context) GetRunnersRunnerOutput
}

type GetRunnersRunnerArgs struct {
	// The description of the runner.
	Description pulumi.StringInput `pulumi:"description"`
	// The runner id.
	Id pulumi.IntInput `pulumi:"id"`
	// Indicates if this is a shared runner
	IsShared pulumi.BoolInput `pulumi:"isShared"`
	// The connectivity status of the runner.
	Online pulumi.BoolInput `pulumi:"online"`
	// Indicates if the runner is accepting or ignoring new jobs.
	Paused pulumi.BoolInput `pulumi:"paused"`
	// The runner type. Values are `instanceType`, `groupType` and `projectType`.
	RunnerType pulumi.StringInput `pulumi:"runnerType"`
	// The status of the runner. Values can be `online`, `offline`, `stale`, and `neverContacted`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetRunnersRunnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunnersRunner)(nil)).Elem()
}

func (i GetRunnersRunnerArgs) ToGetRunnersRunnerOutput() GetRunnersRunnerOutput {
	return i.ToGetRunnersRunnerOutputWithContext(context.Background())
}

func (i GetRunnersRunnerArgs) ToGetRunnersRunnerOutputWithContext(ctx context.Context) GetRunnersRunnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunnersRunnerOutput)
}

// GetRunnersRunnerArrayInput is an input type that accepts GetRunnersRunnerArray and GetRunnersRunnerArrayOutput values.
// You can construct a concrete instance of `GetRunnersRunnerArrayInput` via:
//
//	GetRunnersRunnerArray{ GetRunnersRunnerArgs{...} }
type GetRunnersRunnerArrayInput interface {
	pulumi.Input

	ToGetRunnersRunnerArrayOutput() GetRunnersRunnerArrayOutput
	ToGetRunnersRunnerArrayOutputWithContext(context.Context) GetRunnersRunnerArrayOutput
}

type GetRunnersRunnerArray []GetRunnersRunnerInput

func (GetRunnersRunnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunnersRunner)(nil)).Elem()
}

func (i GetRunnersRunnerArray) ToGetRunnersRunnerArrayOutput() GetRunnersRunnerArrayOutput {
	return i.ToGetRunnersRunnerArrayOutputWithContext(context.Background())
}

func (i GetRunnersRunnerArray) ToGetRunnersRunnerArrayOutputWithContext(ctx context.Context) GetRunnersRunnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunnersRunnerArrayOutput)
}

type GetRunnersRunnerOutput struct{ *pulumi.OutputState }

func (GetRunnersRunnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunnersRunner)(nil)).Elem()
}

func (o GetRunnersRunnerOutput) ToGetRunnersRunnerOutput() GetRunnersRunnerOutput {
	return o
}

func (o GetRunnersRunnerOutput) ToGetRunnersRunnerOutputWithContext(ctx context.Context) GetRunnersRunnerOutput {
	return o
}

// The description of the runner.
func (o GetRunnersRunnerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunnersRunner) string { return v.Description }).(pulumi.StringOutput)
}

// The runner id.
func (o GetRunnersRunnerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetRunnersRunner) int { return v.Id }).(pulumi.IntOutput)
}

// Indicates if this is a shared runner
func (o GetRunnersRunnerOutput) IsShared() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRunnersRunner) bool { return v.IsShared }).(pulumi.BoolOutput)
}

// The connectivity status of the runner.
func (o GetRunnersRunnerOutput) Online() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRunnersRunner) bool { return v.Online }).(pulumi.BoolOutput)
}

// Indicates if the runner is accepting or ignoring new jobs.
func (o GetRunnersRunnerOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRunnersRunner) bool { return v.Paused }).(pulumi.BoolOutput)
}

// The runner type. Values are `instanceType`, `groupType` and `projectType`.
func (o GetRunnersRunnerOutput) RunnerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunnersRunner) string { return v.RunnerType }).(pulumi.StringOutput)
}

// The status of the runner. Values can be `online`, `offline`, `stale`, and `neverContacted`.
func (o GetRunnersRunnerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunnersRunner) string { return v.Status }).(pulumi.StringOutput)
}

type GetRunnersRunnerArrayOutput struct{ *pulumi.OutputState }

func (GetRunnersRunnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunnersRunner)(nil)).Elem()
}

func (o GetRunnersRunnerArrayOutput) ToGetRunnersRunnerArrayOutput() GetRunnersRunnerArrayOutput {
	return o
}

func (o GetRunnersRunnerArrayOutput) ToGetRunnersRunnerArrayOutputWithContext(ctx context.Context) GetRunnersRunnerArrayOutput {
	return o
}

func (o GetRunnersRunnerArrayOutput) Index(i pulumi.IntInput) GetRunnersRunnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRunnersRunner {
		return vs[0].([]GetRunnersRunner)[vs[1].(int)]
	}).(GetRunnersRunnerOutput)
}

type GetUserSshkeysKey struct {
	// The time when this key was created in GitLab.
	CreatedAt string `pulumi:"createdAt"`
	// The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
	ExpiresAt string `pulumi:"expiresAt"`
	// The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with the username and GitLab hostname.
	Key string `pulumi:"key"`
	// The ID of the ssh key.
	KeyId int `pulumi:"keyId"`
	// The title of the ssh key.
	Title string `pulumi:"title"`
	// The ID or username of the user. If this field is omitted, this resource manages a SSH key for the current user. Otherwise, this resource manages a SSH key for the specified user, and an admin token is required.
	UserId int `pulumi:"userId"`
}

// GetUserSshkeysKeyInput is an input type that accepts GetUserSshkeysKeyArgs and GetUserSshkeysKeyOutput values.
// You can construct a concrete instance of `GetUserSshkeysKeyInput` via:
//
//	GetUserSshkeysKeyArgs{...}
type GetUserSshkeysKeyInput interface {
	pulumi.Input

	ToGetUserSshkeysKeyOutput() GetUserSshkeysKeyOutput
	ToGetUserSshkeysKeyOutputWithContext(context.Context) GetUserSshkeysKeyOutput
}

type GetUserSshkeysKeyArgs struct {
	// The time when this key was created in GitLab.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with the username and GitLab hostname.
	Key pulumi.StringInput `pulumi:"key"`
	// The ID of the ssh key.
	KeyId pulumi.IntInput `pulumi:"keyId"`
	// The title of the ssh key.
	Title pulumi.StringInput `pulumi:"title"`
	// The ID or username of the user. If this field is omitted, this resource manages a SSH key for the current user. Otherwise, this resource manages a SSH key for the specified user, and an admin token is required.
	UserId pulumi.IntInput `pulumi:"userId"`
}

func (GetUserSshkeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSshkeysKey)(nil)).Elem()
}

func (i GetUserSshkeysKeyArgs) ToGetUserSshkeysKeyOutput() GetUserSshkeysKeyOutput {
	return i.ToGetUserSshkeysKeyOutputWithContext(context.Background())
}

func (i GetUserSshkeysKeyArgs) ToGetUserSshkeysKeyOutputWithContext(ctx context.Context) GetUserSshkeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSshkeysKeyOutput)
}

// GetUserSshkeysKeyArrayInput is an input type that accepts GetUserSshkeysKeyArray and GetUserSshkeysKeyArrayOutput values.
// You can construct a concrete instance of `GetUserSshkeysKeyArrayInput` via:
//
//	GetUserSshkeysKeyArray{ GetUserSshkeysKeyArgs{...} }
type GetUserSshkeysKeyArrayInput interface {
	pulumi.Input

	ToGetUserSshkeysKeyArrayOutput() GetUserSshkeysKeyArrayOutput
	ToGetUserSshkeysKeyArrayOutputWithContext(context.Context) GetUserSshkeysKeyArrayOutput
}

type GetUserSshkeysKeyArray []GetUserSshkeysKeyInput

func (GetUserSshkeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSshkeysKey)(nil)).Elem()
}

func (i GetUserSshkeysKeyArray) ToGetUserSshkeysKeyArrayOutput() GetUserSshkeysKeyArrayOutput {
	return i.ToGetUserSshkeysKeyArrayOutputWithContext(context.Background())
}

func (i GetUserSshkeysKeyArray) ToGetUserSshkeysKeyArrayOutputWithContext(ctx context.Context) GetUserSshkeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSshkeysKeyArrayOutput)
}

type GetUserSshkeysKeyOutput struct{ *pulumi.OutputState }

func (GetUserSshkeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSshkeysKey)(nil)).Elem()
}

func (o GetUserSshkeysKeyOutput) ToGetUserSshkeysKeyOutput() GetUserSshkeysKeyOutput {
	return o
}

func (o GetUserSshkeysKeyOutput) ToGetUserSshkeysKeyOutputWithContext(ctx context.Context) GetUserSshkeysKeyOutput {
	return o
}

// The time when this key was created in GitLab.
func (o GetUserSshkeysKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
func (o GetUserSshkeysKeyOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with the username and GitLab hostname.
func (o GetUserSshkeysKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.Key }).(pulumi.StringOutput)
}

// The ID of the ssh key.
func (o GetUserSshkeysKeyOutput) KeyId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) int { return v.KeyId }).(pulumi.IntOutput)
}

// The title of the ssh key.
func (o GetUserSshkeysKeyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.Title }).(pulumi.StringOutput)
}

// The ID or username of the user. If this field is omitted, this resource manages a SSH key for the current user. Otherwise, this resource manages a SSH key for the specified user, and an admin token is required.
func (o GetUserSshkeysKeyOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) int { return v.UserId }).(pulumi.IntOutput)
}

type GetUserSshkeysKeyArrayOutput struct{ *pulumi.OutputState }

func (GetUserSshkeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSshkeysKey)(nil)).Elem()
}

func (o GetUserSshkeysKeyArrayOutput) ToGetUserSshkeysKeyArrayOutput() GetUserSshkeysKeyArrayOutput {
	return o
}

func (o GetUserSshkeysKeyArrayOutput) ToGetUserSshkeysKeyArrayOutputWithContext(ctx context.Context) GetUserSshkeysKeyArrayOutput {
	return o
}

func (o GetUserSshkeysKeyArrayOutput) Index(i pulumi.IntInput) GetUserSshkeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserSshkeysKey {
		return vs[0].([]GetUserSshkeysKey)[vs[1].(int)]
	}).(GetUserSshkeysKeyOutput)
}

type GetUsersUser struct {
	// The avatar URL of the user.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The bio of the user.
	Bio string `pulumi:"bio"`
	// Whether the user can create groups.
	CanCreateGroup bool `pulumi:"canCreateGroup"`
	// Whether the user can create projects.
	CanCreateProject bool `pulumi:"canCreateProject"`
	// User's color scheme ID.
	ColorSchemeId int `pulumi:"colorSchemeId"`
	// Date the user was created at.
	CreatedAt string `pulumi:"createdAt"`
	// Current user's sign-in date.
	CurrentSignInAt string `pulumi:"currentSignInAt"`
	// The public email address of the user. **Note**: before GitLab 14.8 the lookup was based on the users primary email address.
	Email string `pulumi:"email"`
	// The external UID of the user.
	ExternUid string `pulumi:"externUid"`
	// Whether the user is external.
	External bool `pulumi:"external"`
	// The unique id assigned to the user by the gitlab server.
	Id int `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin bool `pulumi:"isAdmin"`
	// Whether the user is a bot.
	IsBot bool `pulumi:"isBot"`
	// Last user's sign-in date.
	LastSignInAt string `pulumi:"lastSignInAt"`
	// LinkedIn profile of the user.
	Linkedin string `pulumi:"linkedin"`
	// The location of the user.
	Location string `pulumi:"location"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The ID of the user's namespace. Requires admin token to access this field. Available since GitLab 14.10.
	NamespaceId int `pulumi:"namespaceId"`
	// The organization of the user.
	Organization string `pulumi:"organization"`
	// Number of projects the user can create.
	ProjectsLimit int `pulumi:"projectsLimit"`
	// The UID provider of the user.
	Provider string `pulumi:"provider"`
	// Skype username of the user.
	Skype string `pulumi:"skype"`
	// Whether the user is active or blocked.
	State string `pulumi:"state"`
	// User's theme ID.
	ThemeId int `pulumi:"themeId"`
	// Twitter username of the user.
	Twitter string `pulumi:"twitter"`
	// Whether user's two-factor auth is enabled.
	TwoFactorEnabled bool `pulumi:"twoFactorEnabled"`
	// The username of the user.
	Username string `pulumi:"username"`
	// User's website URL.
	WebsiteUrl string `pulumi:"websiteUrl"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The avatar URL of the user.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The bio of the user.
	Bio pulumi.StringInput `pulumi:"bio"`
	// Whether the user can create groups.
	CanCreateGroup pulumi.BoolInput `pulumi:"canCreateGroup"`
	// Whether the user can create projects.
	CanCreateProject pulumi.BoolInput `pulumi:"canCreateProject"`
	// User's color scheme ID.
	ColorSchemeId pulumi.IntInput `pulumi:"colorSchemeId"`
	// Date the user was created at.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Current user's sign-in date.
	CurrentSignInAt pulumi.StringInput `pulumi:"currentSignInAt"`
	// The public email address of the user. **Note**: before GitLab 14.8 the lookup was based on the users primary email address.
	Email pulumi.StringInput `pulumi:"email"`
	// The external UID of the user.
	ExternUid pulumi.StringInput `pulumi:"externUid"`
	// Whether the user is external.
	External pulumi.BoolInput `pulumi:"external"`
	// The unique id assigned to the user by the gitlab server.
	Id pulumi.IntInput `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
	// Whether the user is a bot.
	IsBot pulumi.BoolInput `pulumi:"isBot"`
	// Last user's sign-in date.
	LastSignInAt pulumi.StringInput `pulumi:"lastSignInAt"`
	// LinkedIn profile of the user.
	Linkedin pulumi.StringInput `pulumi:"linkedin"`
	// The location of the user.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the user's namespace. Requires admin token to access this field. Available since GitLab 14.10.
	NamespaceId pulumi.IntInput `pulumi:"namespaceId"`
	// The organization of the user.
	Organization pulumi.StringInput `pulumi:"organization"`
	// Number of projects the user can create.
	ProjectsLimit pulumi.IntInput `pulumi:"projectsLimit"`
	// The UID provider of the user.
	Provider pulumi.StringInput `pulumi:"provider"`
	// Skype username of the user.
	Skype pulumi.StringInput `pulumi:"skype"`
	// Whether the user is active or blocked.
	State pulumi.StringInput `pulumi:"state"`
	// User's theme ID.
	ThemeId pulumi.IntInput `pulumi:"themeId"`
	// Twitter username of the user.
	Twitter pulumi.StringInput `pulumi:"twitter"`
	// Whether user's two-factor auth is enabled.
	TwoFactorEnabled pulumi.BoolInput `pulumi:"twoFactorEnabled"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// User's website URL.
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The avatar URL of the user.
func (o GetUsersUserOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The bio of the user.
func (o GetUsersUserOutput) Bio() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Bio }).(pulumi.StringOutput)
}

// Whether the user can create groups.
func (o GetUsersUserOutput) CanCreateGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateGroup }).(pulumi.BoolOutput)
}

// Whether the user can create projects.
func (o GetUsersUserOutput) CanCreateProject() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateProject }).(pulumi.BoolOutput)
}

// User's color scheme ID.
func (o GetUsersUserOutput) ColorSchemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ColorSchemeId }).(pulumi.IntOutput)
}

// Date the user was created at.
func (o GetUsersUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Current user's sign-in date.
func (o GetUsersUserOutput) CurrentSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CurrentSignInAt }).(pulumi.StringOutput)
}

// The public email address of the user. **Note**: before GitLab 14.8 the lookup was based on the users primary email address.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// The external UID of the user.
func (o GetUsersUserOutput) ExternUid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ExternUid }).(pulumi.StringOutput)
}

// Whether the user is external.
func (o GetUsersUserOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.External }).(pulumi.BoolOutput)
}

// The unique id assigned to the user by the gitlab server.
func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

// Whether the user is an admin.
func (o GetUsersUserOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// Whether the user is a bot.
func (o GetUsersUserOutput) IsBot() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsBot }).(pulumi.BoolOutput)
}

// Last user's sign-in date.
func (o GetUsersUserOutput) LastSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastSignInAt }).(pulumi.StringOutput)
}

// LinkedIn profile of the user.
func (o GetUsersUserOutput) Linkedin() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Linkedin }).(pulumi.StringOutput)
}

// The location of the user.
func (o GetUsersUserOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the user.
func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the user's namespace. Requires admin token to access this field. Available since GitLab 14.10.
func (o GetUsersUserOutput) NamespaceId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.NamespaceId }).(pulumi.IntOutput)
}

// The organization of the user.
func (o GetUsersUserOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Organization }).(pulumi.StringOutput)
}

// Number of projects the user can create.
func (o GetUsersUserOutput) ProjectsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ProjectsLimit }).(pulumi.IntOutput)
}

// The UID provider of the user.
func (o GetUsersUserOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Provider }).(pulumi.StringOutput)
}

// Skype username of the user.
func (o GetUsersUserOutput) Skype() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Skype }).(pulumi.StringOutput)
}

// Whether the user is active or blocked.
func (o GetUsersUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.State }).(pulumi.StringOutput)
}

// User's theme ID.
func (o GetUsersUserOutput) ThemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ThemeId }).(pulumi.IntOutput)
}

// Twitter username of the user.
func (o GetUsersUserOutput) Twitter() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Twitter }).(pulumi.StringOutput)
}

// Whether user's two-factor auth is enabled.
func (o GetUsersUserOutput) TwoFactorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.TwoFactorEnabled }).(pulumi.BoolOutput)
}

// The username of the user.
func (o GetUsersUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Username }).(pulumi.StringOutput)
}

// User's website URL.
func (o GetUsersUserOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSettingsDefaultBranchProtectionDefaultsInput)(nil)).Elem(), ApplicationSettingsDefaultBranchProtectionDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSettingsDefaultBranchProtectionDefaultsPtrInput)(nil)).Elem(), ApplicationSettingsDefaultBranchProtectionDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchCommitInput)(nil)).Elem(), BranchCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchCommitArrayInput)(nil)).Elem(), BranchCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToMergeInput)(nil)).Elem(), BranchProtectionAllowedToMergeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToMergeArrayInput)(nil)).Elem(), BranchProtectionAllowedToMergeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToPushInput)(nil)).Elem(), BranchProtectionAllowedToPushArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToPushArrayInput)(nil)).Elem(), BranchProtectionAllowedToPushArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToUnprotectInput)(nil)).Elem(), BranchProtectionAllowedToUnprotectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToUnprotectArrayInput)(nil)).Elem(), BranchProtectionAllowedToUnprotectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupAccessTokenRotationConfigurationInput)(nil)).Elem(), GroupAccessTokenRotationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupAccessTokenRotationConfigurationPtrInput)(nil)).Elem(), GroupAccessTokenRotationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDefaultBranchProtectionDefaultsInput)(nil)).Elem(), GroupDefaultBranchProtectionDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDefaultBranchProtectionDefaultsPtrInput)(nil)).Elem(), GroupDefaultBranchProtectionDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEpicBoardListInput)(nil)).Elem(), GroupEpicBoardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEpicBoardListArrayInput)(nil)).Elem(), GroupEpicBoardListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupHookCustomHeaderInput)(nil)).Elem(), GroupHookCustomHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupHookCustomHeaderArrayInput)(nil)).Elem(), GroupHookCustomHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupIssueBoardListInput)(nil)).Elem(), GroupIssueBoardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupIssueBoardListArrayInput)(nil)).Elem(), GroupIssueBoardListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupProtectedEnvironmentApprovalRuleInput)(nil)).Elem(), GroupProtectedEnvironmentApprovalRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupProtectedEnvironmentApprovalRuleArrayInput)(nil)).Elem(), GroupProtectedEnvironmentApprovalRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupProtectedEnvironmentDeployAccessLevelInput)(nil)).Elem(), GroupProtectedEnvironmentDeployAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupProtectedEnvironmentDeployAccessLevelArrayInput)(nil)).Elem(), GroupProtectedEnvironmentDeployAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPushRulesInput)(nil)).Elem(), GroupPushRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPushRulesPtrInput)(nil)).Elem(), GroupPushRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersonalAccessTokenRotationConfigurationInput)(nil)).Elem(), PersonalAccessTokenRotationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersonalAccessTokenRotationConfigurationPtrInput)(nil)).Elem(), PersonalAccessTokenRotationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAccessTokenRotationConfigurationInput)(nil)).Elem(), ProjectAccessTokenRotationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAccessTokenRotationConfigurationPtrInput)(nil)).Elem(), ProjectAccessTokenRotationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectContainerExpirationPolicyInput)(nil)).Elem(), ProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectContainerExpirationPolicyPtrInput)(nil)).Elem(), ProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectHookCustomHeaderInput)(nil)).Elem(), ProjectHookCustomHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectHookCustomHeaderArrayInput)(nil)).Elem(), ProjectHookCustomHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueBoardListInput)(nil)).Elem(), ProjectIssueBoardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueBoardListArrayInput)(nil)).Elem(), ProjectIssueBoardListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueTaskCompletionStatusInput)(nil)).Elem(), ProjectIssueTaskCompletionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueTaskCompletionStatusArrayInput)(nil)).Elem(), ProjectIssueTaskCompletionStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRuleInput)(nil)).Elem(), ProjectProtectedEnvironmentApprovalRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRuleArrayInput)(nil)).Elem(), ProjectProtectedEnvironmentApprovalRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevelInput)(nil)).Elem(), ProjectProtectedEnvironmentDeployAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevelArrayInput)(nil)).Elem(), ProjectProtectedEnvironmentDeployAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPushRulesTypeInput)(nil)).Elem(), ProjectPushRulesTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPushRulesTypePtrInput)(nil)).Elem(), ProjectPushRulesTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagCommitInput)(nil)).Elem(), ProjectTagCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagCommitArrayInput)(nil)).Elem(), ProjectTagCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagReleaseInput)(nil)).Elem(), ProjectTagReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagReleaseArrayInput)(nil)).Elem(), ProjectTagReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagProtectionAllowedToCreateInput)(nil)).Elem(), TagProtectionAllowedToCreateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagProtectionAllowedToCreateArrayInput)(nil)).Elem(), TagProtectionAllowedToCreateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchCommitInput)(nil)).Elem(), GetBranchCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchCommitArrayInput)(nil)).Elem(), GetBranchCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterAgentsClusterAgentInput)(nil)).Elem(), GetClusterAgentsClusterAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterAgentsClusterAgentArrayInput)(nil)).Elem(), GetClusterAgentsClusterAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupBillableMemberMembershipsMembershipInput)(nil)).Elem(), GetGroupBillableMemberMembershipsMembershipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupBillableMemberMembershipsMembershipArrayInput)(nil)).Elem(), GetGroupBillableMemberMembershipsMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupHooksHookInput)(nil)).Elem(), GetGroupHooksHookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupHooksHookArrayInput)(nil)).Elem(), GetGroupHooksHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipMemberInput)(nil)).Elem(), GetGroupMembershipMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipMemberArrayInput)(nil)).Elem(), GetGroupMembershipMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupProvisionedUsersProvisionedUserInput)(nil)).Elem(), GetGroupProvisionedUsersProvisionedUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupProvisionedUsersProvisionedUserArrayInput)(nil)).Elem(), GetGroupProvisionedUsersProvisionedUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupSharedWithGroupInput)(nil)).Elem(), GetGroupSharedWithGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupSharedWithGroupArrayInput)(nil)).Elem(), GetGroupSharedWithGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupSubgroupsSubgroupInput)(nil)).Elem(), GetGroupSubgroupsSubgroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupSubgroupsSubgroupArrayInput)(nil)).Elem(), GetGroupSubgroupsSubgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupVariablesVariableInput)(nil)).Elem(), GetGroupVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupVariablesVariableArrayInput)(nil)).Elem(), GetGroupVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyArrayInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVariablesVariableInput)(nil)).Elem(), GetInstanceVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVariablesVariableArrayInput)(nil)).Elem(), GetInstanceVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetadataKasInput)(nil)).Elem(), GetMetadataKasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipelineScheduleLastPipelineInput)(nil)).Elem(), GetPipelineScheduleLastPipelineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipelineScheduleOwnerInput)(nil)).Elem(), GetPipelineScheduleOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipelineScheduleVariableTypeInput)(nil)).Elem(), GetPipelineScheduleVariableTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipelineScheduleVariableTypeArrayInput)(nil)).Elem(), GetPipelineScheduleVariableTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipelineSchedulesPipelineScheduleInput)(nil)).Elem(), GetPipelineSchedulesPipelineScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipelineSchedulesPipelineScheduleArrayInput)(nil)).Elem(), GetPipelineSchedulesPipelineScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipelineSchedulesPipelineScheduleOwnerInput)(nil)).Elem(), GetPipelineSchedulesPipelineScheduleOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchInput)(nil)).Elem(), GetProjectBranchesBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchArrayInput)(nil)).Elem(), GetProjectBranchesBranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchCommitInput)(nil)).Elem(), GetProjectBranchesBranchCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchCommitArrayInput)(nil)).Elem(), GetProjectBranchesBranchCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectContainerExpirationPolicyInput)(nil)).Elem(), GetProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectContainerExpirationPolicyArrayInput)(nil)).Elem(), GetProjectContainerExpirationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentsEnvironmentInput)(nil)).Elem(), GetProjectEnvironmentsEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentsEnvironmentArrayInput)(nil)).Elem(), GetProjectEnvironmentsEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectHooksHookInput)(nil)).Elem(), GetProjectHooksHookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectHooksHookArrayInput)(nil)).Elem(), GetProjectHooksHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssueTaskCompletionStatusInput)(nil)).Elem(), GetProjectIssueTaskCompletionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssueTaskCompletionStatusArrayInput)(nil)).Elem(), GetProjectIssueTaskCompletionStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueInput)(nil)).Elem(), GetProjectIssuesIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueArrayInput)(nil)).Elem(), GetProjectIssuesIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatusInput)(nil)).Elem(), GetProjectIssuesIssueTaskCompletionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatusArrayInput)(nil)).Elem(), GetProjectIssuesIssueTaskCompletionStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMembershipMemberInput)(nil)).Elem(), GetProjectMembershipMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMembershipMemberArrayInput)(nil)).Elem(), GetProjectMembershipMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMergeRequestAssigneeInput)(nil)).Elem(), GetProjectMergeRequestAssigneeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMergeRequestAssigneeArrayInput)(nil)).Elem(), GetProjectMergeRequestAssigneeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMergeRequestAuthorInput)(nil)).Elem(), GetProjectMergeRequestAuthorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMergeRequestClosedByInput)(nil)).Elem(), GetProjectMergeRequestClosedByArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMilestonesMilestoneInput)(nil)).Elem(), GetProjectMilestonesMilestoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMilestonesMilestoneArrayInput)(nil)).Elem(), GetProjectMilestonesMilestoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchMergeAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchMergeAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchPushAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchPushAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchArrayInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedTagCreateAccessLevelInput)(nil)).Elem(), GetProjectProtectedTagCreateAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedTagCreateAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedTagCreateAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedTagsProtectedTagInput)(nil)).Elem(), GetProjectProtectedTagsProtectedTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedTagsProtectedTagArrayInput)(nil)).Elem(), GetProjectProtectedTagsProtectedTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedTagsProtectedTagCreateAccessLevelInput)(nil)).Elem(), GetProjectProtectedTagsProtectedTagCreateAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedTagsProtectedTagCreateAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectPushRuleInput)(nil)).Elem(), GetProjectPushRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectPushRuleArrayInput)(nil)).Elem(), GetProjectPushRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectSharedWithGroupInput)(nil)).Elem(), GetProjectSharedWithGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectSharedWithGroupArrayInput)(nil)).Elem(), GetProjectSharedWithGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagCommitInput)(nil)).Elem(), GetProjectTagCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagCommitArrayInput)(nil)).Elem(), GetProjectTagCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagReleaseInput)(nil)).Elem(), GetProjectTagReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagReleaseArrayInput)(nil)).Elem(), GetProjectTagReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagInput)(nil)).Elem(), GetProjectTagsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagArrayInput)(nil)).Elem(), GetProjectTagsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagCommitInput)(nil)).Elem(), GetProjectTagsTagCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagCommitArrayInput)(nil)).Elem(), GetProjectTagsTagCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagReleaseInput)(nil)).Elem(), GetProjectTagsTagReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagReleaseArrayInput)(nil)).Elem(), GetProjectTagsTagReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectVariablesVariableInput)(nil)).Elem(), GetProjectVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectVariablesVariableArrayInput)(nil)).Elem(), GetProjectVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectInput)(nil)).Elem(), GetProjectsProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectArrayInput)(nil)).Elem(), GetProjectsProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicyInput)(nil)).Elem(), GetProjectsProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicyArrayInput)(nil)).Elem(), GetProjectsProjectContainerExpirationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectForkedFromProjectInput)(nil)).Elem(), GetProjectsProjectForkedFromProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectForkedFromProjectArrayInput)(nil)).Elem(), GetProjectsProjectForkedFromProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectNamespaceInput)(nil)).Elem(), GetProjectsProjectNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectNamespaceArrayInput)(nil)).Elem(), GetProjectsProjectNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectOwnerInput)(nil)).Elem(), GetProjectsProjectOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectOwnerArrayInput)(nil)).Elem(), GetProjectsProjectOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectPermissionInput)(nil)).Elem(), GetProjectsProjectPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectPermissionArrayInput)(nil)).Elem(), GetProjectsProjectPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectSharedWithGroupInput)(nil)).Elem(), GetProjectsProjectSharedWithGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectSharedWithGroupArrayInput)(nil)).Elem(), GetProjectsProjectSharedWithGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetsInput)(nil)).Elem(), GetReleaseAssetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetsPtrInput)(nil)).Elem(), GetReleaseAssetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetsLinkInput)(nil)).Elem(), GetReleaseAssetsLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetsLinkArrayInput)(nil)).Elem(), GetReleaseAssetsLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetsSourceInput)(nil)).Elem(), GetReleaseAssetsSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetsSourceArrayInput)(nil)).Elem(), GetReleaseAssetsSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseLinksReleaseLinkInput)(nil)).Elem(), GetReleaseLinksReleaseLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseLinksReleaseLinkArrayInput)(nil)).Elem(), GetReleaseLinksReleaseLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryTreeTreeInput)(nil)).Elem(), GetRepositoryTreeTreeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryTreeTreeArrayInput)(nil)).Elem(), GetRepositoryTreeTreeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunnersRunnerInput)(nil)).Elem(), GetRunnersRunnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunnersRunnerArrayInput)(nil)).Elem(), GetRunnersRunnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSshkeysKeyInput)(nil)).Elem(), GetUserSshkeysKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSshkeysKeyArrayInput)(nil)).Elem(), GetUserSshkeysKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(ApplicationSettingsDefaultBranchProtectionDefaultsOutput{})
	pulumi.RegisterOutputType(ApplicationSettingsDefaultBranchProtectionDefaultsPtrOutput{})
	pulumi.RegisterOutputType(BranchCommitOutput{})
	pulumi.RegisterOutputType(BranchCommitArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToMergeOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToMergeArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToPushOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToPushArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToUnprotectOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToUnprotectArrayOutput{})
	pulumi.RegisterOutputType(GroupAccessTokenRotationConfigurationOutput{})
	pulumi.RegisterOutputType(GroupAccessTokenRotationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GroupDefaultBranchProtectionDefaultsOutput{})
	pulumi.RegisterOutputType(GroupDefaultBranchProtectionDefaultsPtrOutput{})
	pulumi.RegisterOutputType(GroupEpicBoardListOutput{})
	pulumi.RegisterOutputType(GroupEpicBoardListArrayOutput{})
	pulumi.RegisterOutputType(GroupHookCustomHeaderOutput{})
	pulumi.RegisterOutputType(GroupHookCustomHeaderArrayOutput{})
	pulumi.RegisterOutputType(GroupIssueBoardListOutput{})
	pulumi.RegisterOutputType(GroupIssueBoardListArrayOutput{})
	pulumi.RegisterOutputType(GroupProtectedEnvironmentApprovalRuleOutput{})
	pulumi.RegisterOutputType(GroupProtectedEnvironmentApprovalRuleArrayOutput{})
	pulumi.RegisterOutputType(GroupProtectedEnvironmentDeployAccessLevelOutput{})
	pulumi.RegisterOutputType(GroupProtectedEnvironmentDeployAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GroupPushRulesOutput{})
	pulumi.RegisterOutputType(GroupPushRulesPtrOutput{})
	pulumi.RegisterOutputType(PersonalAccessTokenRotationConfigurationOutput{})
	pulumi.RegisterOutputType(PersonalAccessTokenRotationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ProjectAccessTokenRotationConfigurationOutput{})
	pulumi.RegisterOutputType(ProjectAccessTokenRotationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ProjectContainerExpirationPolicyOutput{})
	pulumi.RegisterOutputType(ProjectContainerExpirationPolicyPtrOutput{})
	pulumi.RegisterOutputType(ProjectHookCustomHeaderOutput{})
	pulumi.RegisterOutputType(ProjectHookCustomHeaderArrayOutput{})
	pulumi.RegisterOutputType(ProjectIssueBoardListOutput{})
	pulumi.RegisterOutputType(ProjectIssueBoardListArrayOutput{})
	pulumi.RegisterOutputType(ProjectIssueTaskCompletionStatusOutput{})
	pulumi.RegisterOutputType(ProjectIssueTaskCompletionStatusArrayOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentApprovalRuleOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentApprovalRuleArrayOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentDeployAccessLevelOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentDeployAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(ProjectPushRulesTypeOutput{})
	pulumi.RegisterOutputType(ProjectPushRulesTypePtrOutput{})
	pulumi.RegisterOutputType(ProjectTagCommitOutput{})
	pulumi.RegisterOutputType(ProjectTagCommitArrayOutput{})
	pulumi.RegisterOutputType(ProjectTagReleaseOutput{})
	pulumi.RegisterOutputType(ProjectTagReleaseArrayOutput{})
	pulumi.RegisterOutputType(TagProtectionAllowedToCreateOutput{})
	pulumi.RegisterOutputType(TagProtectionAllowedToCreateArrayOutput{})
	pulumi.RegisterOutputType(GetBranchCommitOutput{})
	pulumi.RegisterOutputType(GetBranchCommitArrayOutput{})
	pulumi.RegisterOutputType(GetClusterAgentsClusterAgentOutput{})
	pulumi.RegisterOutputType(GetClusterAgentsClusterAgentArrayOutput{})
	pulumi.RegisterOutputType(GetGroupBillableMemberMembershipsMembershipOutput{})
	pulumi.RegisterOutputType(GetGroupBillableMemberMembershipsMembershipArrayOutput{})
	pulumi.RegisterOutputType(GetGroupHooksHookOutput{})
	pulumi.RegisterOutputType(GetGroupHooksHookArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipMemberOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipMemberArrayOutput{})
	pulumi.RegisterOutputType(GetGroupProvisionedUsersProvisionedUserOutput{})
	pulumi.RegisterOutputType(GetGroupProvisionedUsersProvisionedUserArrayOutput{})
	pulumi.RegisterOutputType(GetGroupSharedWithGroupOutput{})
	pulumi.RegisterOutputType(GetGroupSharedWithGroupArrayOutput{})
	pulumi.RegisterOutputType(GetGroupSubgroupsSubgroupOutput{})
	pulumi.RegisterOutputType(GetGroupSubgroupsSubgroupArrayOutput{})
	pulumi.RegisterOutputType(GetGroupVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetGroupVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetInstanceVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetMetadataKasOutput{})
	pulumi.RegisterOutputType(GetPipelineScheduleLastPipelineOutput{})
	pulumi.RegisterOutputType(GetPipelineScheduleOwnerOutput{})
	pulumi.RegisterOutputType(GetPipelineScheduleVariableTypeOutput{})
	pulumi.RegisterOutputType(GetPipelineScheduleVariableTypeArrayOutput{})
	pulumi.RegisterOutputType(GetPipelineSchedulesPipelineScheduleOutput{})
	pulumi.RegisterOutputType(GetPipelineSchedulesPipelineScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetPipelineSchedulesPipelineScheduleOwnerOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchArrayOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchCommitOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchCommitArrayOutput{})
	pulumi.RegisterOutputType(GetProjectContainerExpirationPolicyOutput{})
	pulumi.RegisterOutputType(GetProjectContainerExpirationPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentsEnvironmentOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentsEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GetProjectHooksHookOutput{})
	pulumi.RegisterOutputType(GetProjectHooksHookArrayOutput{})
	pulumi.RegisterOutputType(GetProjectIssueTaskCompletionStatusOutput{})
	pulumi.RegisterOutputType(GetProjectIssueTaskCompletionStatusArrayOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueArrayOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueTaskCompletionStatusOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueTaskCompletionStatusArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMembershipMemberOutput{})
	pulumi.RegisterOutputType(GetProjectMembershipMemberArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMergeRequestAssigneeOutput{})
	pulumi.RegisterOutputType(GetProjectMergeRequestAssigneeArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMergeRequestAuthorOutput{})
	pulumi.RegisterOutputType(GetProjectMergeRequestClosedByOutput{})
	pulumi.RegisterOutputType(GetProjectMilestonesMilestoneOutput{})
	pulumi.RegisterOutputType(GetProjectMilestonesMilestoneArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchMergeAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchMergeAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchPushAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchPushAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedTagCreateAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedTagCreateAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedTagsProtectedTagOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedTagsProtectedTagArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedTagsProtectedTagCreateAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedTagsProtectedTagCreateAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectPushRuleOutput{})
	pulumi.RegisterOutputType(GetProjectPushRuleArrayOutput{})
	pulumi.RegisterOutputType(GetProjectSharedWithGroupOutput{})
	pulumi.RegisterOutputType(GetProjectSharedWithGroupArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagCommitOutput{})
	pulumi.RegisterOutputType(GetProjectTagCommitArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagReleaseOutput{})
	pulumi.RegisterOutputType(GetProjectTagReleaseArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagCommitOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagCommitArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagReleaseOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagReleaseArrayOutput{})
	pulumi.RegisterOutputType(GetProjectVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetProjectVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectContainerExpirationPolicyOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectContainerExpirationPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectForkedFromProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectForkedFromProjectArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectNamespaceOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectNamespaceArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOwnerOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectPermissionOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectSharedWithGroupOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectSharedWithGroupArrayOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetsOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetsPtrOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetsLinkOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetsLinkArrayOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetsSourceOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetsSourceArrayOutput{})
	pulumi.RegisterOutputType(GetReleaseLinksReleaseLinkOutput{})
	pulumi.RegisterOutputType(GetReleaseLinksReleaseLinkArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryTreeTreeOutput{})
	pulumi.RegisterOutputType(GetRepositoryTreeTreeArrayOutput{})
	pulumi.RegisterOutputType(GetRunnersRunnerOutput{})
	pulumi.RegisterOutputType(GetRunnersRunnerArrayOutput{})
	pulumi.RegisterOutputType(GetUserSshkeysKeyOutput{})
	pulumi.RegisterOutputType(GetUserSshkeysKeyArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
