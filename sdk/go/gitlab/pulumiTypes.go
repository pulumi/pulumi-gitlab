// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v6/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type BranchCommit struct {
	AuthorEmail    *string  `pulumi:"authorEmail"`
	AuthorName     *string  `pulumi:"authorName"`
	AuthoredDate   *string  `pulumi:"authoredDate"`
	CommittedDate  *string  `pulumi:"committedDate"`
	CommitterEmail *string  `pulumi:"committerEmail"`
	CommitterName  *string  `pulumi:"committerName"`
	Id             *string  `pulumi:"id"`
	Message        *string  `pulumi:"message"`
	ParentIds      []string `pulumi:"parentIds"`
	ShortId        *string  `pulumi:"shortId"`
	Title          *string  `pulumi:"title"`
}

// BranchCommitInput is an input type that accepts BranchCommitArgs and BranchCommitOutput values.
// You can construct a concrete instance of `BranchCommitInput` via:
//
//	BranchCommitArgs{...}
type BranchCommitInput interface {
	pulumi.Input

	ToBranchCommitOutput() BranchCommitOutput
	ToBranchCommitOutputWithContext(context.Context) BranchCommitOutput
}

type BranchCommitArgs struct {
	AuthorEmail    pulumi.StringPtrInput   `pulumi:"authorEmail"`
	AuthorName     pulumi.StringPtrInput   `pulumi:"authorName"`
	AuthoredDate   pulumi.StringPtrInput   `pulumi:"authoredDate"`
	CommittedDate  pulumi.StringPtrInput   `pulumi:"committedDate"`
	CommitterEmail pulumi.StringPtrInput   `pulumi:"committerEmail"`
	CommitterName  pulumi.StringPtrInput   `pulumi:"committerName"`
	Id             pulumi.StringPtrInput   `pulumi:"id"`
	Message        pulumi.StringPtrInput   `pulumi:"message"`
	ParentIds      pulumi.StringArrayInput `pulumi:"parentIds"`
	ShortId        pulumi.StringPtrInput   `pulumi:"shortId"`
	Title          pulumi.StringPtrInput   `pulumi:"title"`
}

func (BranchCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchCommit)(nil)).Elem()
}

func (i BranchCommitArgs) ToBranchCommitOutput() BranchCommitOutput {
	return i.ToBranchCommitOutputWithContext(context.Background())
}

func (i BranchCommitArgs) ToBranchCommitOutputWithContext(ctx context.Context) BranchCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchCommitOutput)
}

func (i BranchCommitArgs) ToOutput(ctx context.Context) pulumix.Output[BranchCommit] {
	return pulumix.Output[BranchCommit]{
		OutputState: i.ToBranchCommitOutputWithContext(ctx).OutputState,
	}
}

// BranchCommitArrayInput is an input type that accepts BranchCommitArray and BranchCommitArrayOutput values.
// You can construct a concrete instance of `BranchCommitArrayInput` via:
//
//	BranchCommitArray{ BranchCommitArgs{...} }
type BranchCommitArrayInput interface {
	pulumi.Input

	ToBranchCommitArrayOutput() BranchCommitArrayOutput
	ToBranchCommitArrayOutputWithContext(context.Context) BranchCommitArrayOutput
}

type BranchCommitArray []BranchCommitInput

func (BranchCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchCommit)(nil)).Elem()
}

func (i BranchCommitArray) ToBranchCommitArrayOutput() BranchCommitArrayOutput {
	return i.ToBranchCommitArrayOutputWithContext(context.Background())
}

func (i BranchCommitArray) ToBranchCommitArrayOutputWithContext(ctx context.Context) BranchCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchCommitArrayOutput)
}

func (i BranchCommitArray) ToOutput(ctx context.Context) pulumix.Output[[]BranchCommit] {
	return pulumix.Output[[]BranchCommit]{
		OutputState: i.ToBranchCommitArrayOutputWithContext(ctx).OutputState,
	}
}

type BranchCommitOutput struct{ *pulumi.OutputState }

func (BranchCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchCommit)(nil)).Elem()
}

func (o BranchCommitOutput) ToBranchCommitOutput() BranchCommitOutput {
	return o
}

func (o BranchCommitOutput) ToBranchCommitOutputWithContext(ctx context.Context) BranchCommitOutput {
	return o
}

func (o BranchCommitOutput) ToOutput(ctx context.Context) pulumix.Output[BranchCommit] {
	return pulumix.Output[BranchCommit]{
		OutputState: o.OutputState,
	}
}

func (o BranchCommitOutput) AuthorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.AuthorEmail }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.AuthorName }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) AuthoredDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.AuthoredDate }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) CommittedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.CommittedDate }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) CommitterEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.CommitterEmail }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) CommitterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.CommitterName }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

func (o BranchCommitOutput) ShortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.ShortId }).(pulumi.StringPtrOutput)
}

func (o BranchCommitOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchCommit) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type BranchCommitArrayOutput struct{ *pulumi.OutputState }

func (BranchCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchCommit)(nil)).Elem()
}

func (o BranchCommitArrayOutput) ToBranchCommitArrayOutput() BranchCommitArrayOutput {
	return o
}

func (o BranchCommitArrayOutput) ToBranchCommitArrayOutputWithContext(ctx context.Context) BranchCommitArrayOutput {
	return o
}

func (o BranchCommitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BranchCommit] {
	return pulumix.Output[[]BranchCommit]{
		OutputState: o.OutputState,
	}
}

func (o BranchCommitArrayOutput) Index(i pulumi.IntInput) BranchCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchCommit {
		return vs[0].([]BranchCommit)[vs[1].(int)]
	}).(BranchCommitOutput)
}

type BranchProtectionAllowedToMerge struct {
	// Level of access.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToMergeInput is an input type that accepts BranchProtectionAllowedToMergeArgs and BranchProtectionAllowedToMergeOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToMergeInput` via:
//
//	BranchProtectionAllowedToMergeArgs{...}
type BranchProtectionAllowedToMergeInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput
	ToBranchProtectionAllowedToMergeOutputWithContext(context.Context) BranchProtectionAllowedToMergeOutput
}

type BranchProtectionAllowedToMergeArgs struct {
	// Level of access.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToMergeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (i BranchProtectionAllowedToMergeArgs) ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput {
	return i.ToBranchProtectionAllowedToMergeOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToMergeArgs) ToBranchProtectionAllowedToMergeOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToMergeOutput)
}

func (i BranchProtectionAllowedToMergeArgs) ToOutput(ctx context.Context) pulumix.Output[BranchProtectionAllowedToMerge] {
	return pulumix.Output[BranchProtectionAllowedToMerge]{
		OutputState: i.ToBranchProtectionAllowedToMergeOutputWithContext(ctx).OutputState,
	}
}

// BranchProtectionAllowedToMergeArrayInput is an input type that accepts BranchProtectionAllowedToMergeArray and BranchProtectionAllowedToMergeArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToMergeArrayInput` via:
//
//	BranchProtectionAllowedToMergeArray{ BranchProtectionAllowedToMergeArgs{...} }
type BranchProtectionAllowedToMergeArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput
	ToBranchProtectionAllowedToMergeArrayOutputWithContext(context.Context) BranchProtectionAllowedToMergeArrayOutput
}

type BranchProtectionAllowedToMergeArray []BranchProtectionAllowedToMergeInput

func (BranchProtectionAllowedToMergeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (i BranchProtectionAllowedToMergeArray) ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput {
	return i.ToBranchProtectionAllowedToMergeArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToMergeArray) ToBranchProtectionAllowedToMergeArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToMergeArrayOutput)
}

func (i BranchProtectionAllowedToMergeArray) ToOutput(ctx context.Context) pulumix.Output[[]BranchProtectionAllowedToMerge] {
	return pulumix.Output[[]BranchProtectionAllowedToMerge]{
		OutputState: i.ToBranchProtectionAllowedToMergeArrayOutputWithContext(ctx).OutputState,
	}
}

type BranchProtectionAllowedToMergeOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToMergeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (o BranchProtectionAllowedToMergeOutput) ToBranchProtectionAllowedToMergeOutput() BranchProtectionAllowedToMergeOutput {
	return o
}

func (o BranchProtectionAllowedToMergeOutput) ToBranchProtectionAllowedToMergeOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeOutput {
	return o
}

func (o BranchProtectionAllowedToMergeOutput) ToOutput(ctx context.Context) pulumix.Output[BranchProtectionAllowedToMerge] {
	return pulumix.Output[BranchProtectionAllowedToMerge]{
		OutputState: o.OutputState,
	}
}

// Level of access.
func (o BranchProtectionAllowedToMergeOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o BranchProtectionAllowedToMergeOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o BranchProtectionAllowedToMergeOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o BranchProtectionAllowedToMergeOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToMerge) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToMergeArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToMergeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToMerge)(nil)).Elem()
}

func (o BranchProtectionAllowedToMergeArrayOutput) ToBranchProtectionAllowedToMergeArrayOutput() BranchProtectionAllowedToMergeArrayOutput {
	return o
}

func (o BranchProtectionAllowedToMergeArrayOutput) ToBranchProtectionAllowedToMergeArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToMergeArrayOutput {
	return o
}

func (o BranchProtectionAllowedToMergeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BranchProtectionAllowedToMerge] {
	return pulumix.Output[[]BranchProtectionAllowedToMerge]{
		OutputState: o.OutputState,
	}
}

func (o BranchProtectionAllowedToMergeArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToMergeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToMerge {
		return vs[0].([]BranchProtectionAllowedToMerge)[vs[1].(int)]
	}).(BranchProtectionAllowedToMergeOutput)
}

type BranchProtectionAllowedToPush struct {
	// Level of access.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToPushInput is an input type that accepts BranchProtectionAllowedToPushArgs and BranchProtectionAllowedToPushOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToPushInput` via:
//
//	BranchProtectionAllowedToPushArgs{...}
type BranchProtectionAllowedToPushInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput
	ToBranchProtectionAllowedToPushOutputWithContext(context.Context) BranchProtectionAllowedToPushOutput
}

type BranchProtectionAllowedToPushArgs struct {
	// Level of access.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToPush)(nil)).Elem()
}

func (i BranchProtectionAllowedToPushArgs) ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput {
	return i.ToBranchProtectionAllowedToPushOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToPushArgs) ToBranchProtectionAllowedToPushOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToPushOutput)
}

func (i BranchProtectionAllowedToPushArgs) ToOutput(ctx context.Context) pulumix.Output[BranchProtectionAllowedToPush] {
	return pulumix.Output[BranchProtectionAllowedToPush]{
		OutputState: i.ToBranchProtectionAllowedToPushOutputWithContext(ctx).OutputState,
	}
}

// BranchProtectionAllowedToPushArrayInput is an input type that accepts BranchProtectionAllowedToPushArray and BranchProtectionAllowedToPushArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToPushArrayInput` via:
//
//	BranchProtectionAllowedToPushArray{ BranchProtectionAllowedToPushArgs{...} }
type BranchProtectionAllowedToPushArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput
	ToBranchProtectionAllowedToPushArrayOutputWithContext(context.Context) BranchProtectionAllowedToPushArrayOutput
}

type BranchProtectionAllowedToPushArray []BranchProtectionAllowedToPushInput

func (BranchProtectionAllowedToPushArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToPush)(nil)).Elem()
}

func (i BranchProtectionAllowedToPushArray) ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput {
	return i.ToBranchProtectionAllowedToPushArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToPushArray) ToBranchProtectionAllowedToPushArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToPushArrayOutput)
}

func (i BranchProtectionAllowedToPushArray) ToOutput(ctx context.Context) pulumix.Output[[]BranchProtectionAllowedToPush] {
	return pulumix.Output[[]BranchProtectionAllowedToPush]{
		OutputState: i.ToBranchProtectionAllowedToPushArrayOutputWithContext(ctx).OutputState,
	}
}

type BranchProtectionAllowedToPushOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToPush)(nil)).Elem()
}

func (o BranchProtectionAllowedToPushOutput) ToBranchProtectionAllowedToPushOutput() BranchProtectionAllowedToPushOutput {
	return o
}

func (o BranchProtectionAllowedToPushOutput) ToBranchProtectionAllowedToPushOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushOutput {
	return o
}

func (o BranchProtectionAllowedToPushOutput) ToOutput(ctx context.Context) pulumix.Output[BranchProtectionAllowedToPush] {
	return pulumix.Output[BranchProtectionAllowedToPush]{
		OutputState: o.OutputState,
	}
}

// Level of access.
func (o BranchProtectionAllowedToPushOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o BranchProtectionAllowedToPushOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o BranchProtectionAllowedToPushOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o BranchProtectionAllowedToPushOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToPush) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToPushArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToPushArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToPush)(nil)).Elem()
}

func (o BranchProtectionAllowedToPushArrayOutput) ToBranchProtectionAllowedToPushArrayOutput() BranchProtectionAllowedToPushArrayOutput {
	return o
}

func (o BranchProtectionAllowedToPushArrayOutput) ToBranchProtectionAllowedToPushArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToPushArrayOutput {
	return o
}

func (o BranchProtectionAllowedToPushArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BranchProtectionAllowedToPush] {
	return pulumix.Output[[]BranchProtectionAllowedToPush]{
		OutputState: o.OutputState,
	}
}

func (o BranchProtectionAllowedToPushArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToPushOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToPush {
		return vs[0].([]BranchProtectionAllowedToPush)[vs[1].(int)]
	}).(BranchProtectionAllowedToPushOutput)
}

type BranchProtectionAllowedToUnprotect struct {
	// Level of access.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// BranchProtectionAllowedToUnprotectInput is an input type that accepts BranchProtectionAllowedToUnprotectArgs and BranchProtectionAllowedToUnprotectOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToUnprotectInput` via:
//
//	BranchProtectionAllowedToUnprotectArgs{...}
type BranchProtectionAllowedToUnprotectInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToUnprotectOutput() BranchProtectionAllowedToUnprotectOutput
	ToBranchProtectionAllowedToUnprotectOutputWithContext(context.Context) BranchProtectionAllowedToUnprotectOutput
}

type BranchProtectionAllowedToUnprotectArgs struct {
	// Level of access.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (BranchProtectionAllowedToUnprotectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (i BranchProtectionAllowedToUnprotectArgs) ToBranchProtectionAllowedToUnprotectOutput() BranchProtectionAllowedToUnprotectOutput {
	return i.ToBranchProtectionAllowedToUnprotectOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToUnprotectArgs) ToBranchProtectionAllowedToUnprotectOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToUnprotectOutput)
}

func (i BranchProtectionAllowedToUnprotectArgs) ToOutput(ctx context.Context) pulumix.Output[BranchProtectionAllowedToUnprotect] {
	return pulumix.Output[BranchProtectionAllowedToUnprotect]{
		OutputState: i.ToBranchProtectionAllowedToUnprotectOutputWithContext(ctx).OutputState,
	}
}

// BranchProtectionAllowedToUnprotectArrayInput is an input type that accepts BranchProtectionAllowedToUnprotectArray and BranchProtectionAllowedToUnprotectArrayOutput values.
// You can construct a concrete instance of `BranchProtectionAllowedToUnprotectArrayInput` via:
//
//	BranchProtectionAllowedToUnprotectArray{ BranchProtectionAllowedToUnprotectArgs{...} }
type BranchProtectionAllowedToUnprotectArrayInput interface {
	pulumi.Input

	ToBranchProtectionAllowedToUnprotectArrayOutput() BranchProtectionAllowedToUnprotectArrayOutput
	ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(context.Context) BranchProtectionAllowedToUnprotectArrayOutput
}

type BranchProtectionAllowedToUnprotectArray []BranchProtectionAllowedToUnprotectInput

func (BranchProtectionAllowedToUnprotectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (i BranchProtectionAllowedToUnprotectArray) ToBranchProtectionAllowedToUnprotectArrayOutput() BranchProtectionAllowedToUnprotectArrayOutput {
	return i.ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(context.Background())
}

func (i BranchProtectionAllowedToUnprotectArray) ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionAllowedToUnprotectArrayOutput)
}

func (i BranchProtectionAllowedToUnprotectArray) ToOutput(ctx context.Context) pulumix.Output[[]BranchProtectionAllowedToUnprotect] {
	return pulumix.Output[[]BranchProtectionAllowedToUnprotect]{
		OutputState: i.ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(ctx).OutputState,
	}
}

type BranchProtectionAllowedToUnprotectOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToUnprotectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (o BranchProtectionAllowedToUnprotectOutput) ToBranchProtectionAllowedToUnprotectOutput() BranchProtectionAllowedToUnprotectOutput {
	return o
}

func (o BranchProtectionAllowedToUnprotectOutput) ToBranchProtectionAllowedToUnprotectOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectOutput {
	return o
}

func (o BranchProtectionAllowedToUnprotectOutput) ToOutput(ctx context.Context) pulumix.Output[BranchProtectionAllowedToUnprotect] {
	return pulumix.Output[BranchProtectionAllowedToUnprotect]{
		OutputState: o.OutputState,
	}
}

// Level of access.
func (o BranchProtectionAllowedToUnprotectOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o BranchProtectionAllowedToUnprotectOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o BranchProtectionAllowedToUnprotectOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o BranchProtectionAllowedToUnprotectOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionAllowedToUnprotect) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type BranchProtectionAllowedToUnprotectArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionAllowedToUnprotectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionAllowedToUnprotect)(nil)).Elem()
}

func (o BranchProtectionAllowedToUnprotectArrayOutput) ToBranchProtectionAllowedToUnprotectArrayOutput() BranchProtectionAllowedToUnprotectArrayOutput {
	return o
}

func (o BranchProtectionAllowedToUnprotectArrayOutput) ToBranchProtectionAllowedToUnprotectArrayOutputWithContext(ctx context.Context) BranchProtectionAllowedToUnprotectArrayOutput {
	return o
}

func (o BranchProtectionAllowedToUnprotectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BranchProtectionAllowedToUnprotect] {
	return pulumix.Output[[]BranchProtectionAllowedToUnprotect]{
		OutputState: o.OutputState,
	}
}

func (o BranchProtectionAllowedToUnprotectArrayOutput) Index(i pulumi.IntInput) BranchProtectionAllowedToUnprotectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionAllowedToUnprotect {
		return vs[0].([]BranchProtectionAllowedToUnprotect)[vs[1].(int)]
	}).(BranchProtectionAllowedToUnprotectOutput)
}

type GroupEpicBoardList struct {
	// The ID of the list.
	Id *int `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId *int `pulumi:"labelId"`
	// The position of the list within the board. The position for the list is sed on the its position in the `lists` array.
	Position *int `pulumi:"position"`
}

// GroupEpicBoardListInput is an input type that accepts GroupEpicBoardListArgs and GroupEpicBoardListOutput values.
// You can construct a concrete instance of `GroupEpicBoardListInput` via:
//
//	GroupEpicBoardListArgs{...}
type GroupEpicBoardListInput interface {
	pulumi.Input

	ToGroupEpicBoardListOutput() GroupEpicBoardListOutput
	ToGroupEpicBoardListOutputWithContext(context.Context) GroupEpicBoardListOutput
}

type GroupEpicBoardListArgs struct {
	// The ID of the list.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId pulumi.IntPtrInput `pulumi:"labelId"`
	// The position of the list within the board. The position for the list is sed on the its position in the `lists` array.
	Position pulumi.IntPtrInput `pulumi:"position"`
}

func (GroupEpicBoardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEpicBoardList)(nil)).Elem()
}

func (i GroupEpicBoardListArgs) ToGroupEpicBoardListOutput() GroupEpicBoardListOutput {
	return i.ToGroupEpicBoardListOutputWithContext(context.Background())
}

func (i GroupEpicBoardListArgs) ToGroupEpicBoardListOutputWithContext(ctx context.Context) GroupEpicBoardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEpicBoardListOutput)
}

func (i GroupEpicBoardListArgs) ToOutput(ctx context.Context) pulumix.Output[GroupEpicBoardList] {
	return pulumix.Output[GroupEpicBoardList]{
		OutputState: i.ToGroupEpicBoardListOutputWithContext(ctx).OutputState,
	}
}

// GroupEpicBoardListArrayInput is an input type that accepts GroupEpicBoardListArray and GroupEpicBoardListArrayOutput values.
// You can construct a concrete instance of `GroupEpicBoardListArrayInput` via:
//
//	GroupEpicBoardListArray{ GroupEpicBoardListArgs{...} }
type GroupEpicBoardListArrayInput interface {
	pulumi.Input

	ToGroupEpicBoardListArrayOutput() GroupEpicBoardListArrayOutput
	ToGroupEpicBoardListArrayOutputWithContext(context.Context) GroupEpicBoardListArrayOutput
}

type GroupEpicBoardListArray []GroupEpicBoardListInput

func (GroupEpicBoardListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEpicBoardList)(nil)).Elem()
}

func (i GroupEpicBoardListArray) ToGroupEpicBoardListArrayOutput() GroupEpicBoardListArrayOutput {
	return i.ToGroupEpicBoardListArrayOutputWithContext(context.Background())
}

func (i GroupEpicBoardListArray) ToGroupEpicBoardListArrayOutputWithContext(ctx context.Context) GroupEpicBoardListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEpicBoardListArrayOutput)
}

func (i GroupEpicBoardListArray) ToOutput(ctx context.Context) pulumix.Output[[]GroupEpicBoardList] {
	return pulumix.Output[[]GroupEpicBoardList]{
		OutputState: i.ToGroupEpicBoardListArrayOutputWithContext(ctx).OutputState,
	}
}

type GroupEpicBoardListOutput struct{ *pulumi.OutputState }

func (GroupEpicBoardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEpicBoardList)(nil)).Elem()
}

func (o GroupEpicBoardListOutput) ToGroupEpicBoardListOutput() GroupEpicBoardListOutput {
	return o
}

func (o GroupEpicBoardListOutput) ToGroupEpicBoardListOutputWithContext(ctx context.Context) GroupEpicBoardListOutput {
	return o
}

func (o GroupEpicBoardListOutput) ToOutput(ctx context.Context) pulumix.Output[GroupEpicBoardList] {
	return pulumix.Output[GroupEpicBoardList]{
		OutputState: o.OutputState,
	}
}

// The ID of the list.
func (o GroupEpicBoardListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupEpicBoardList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the label the list should be scoped to.
func (o GroupEpicBoardListOutput) LabelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupEpicBoardList) *int { return v.LabelId }).(pulumi.IntPtrOutput)
}

// The position of the list within the board. The position for the list is sed on the its position in the `lists` array.
func (o GroupEpicBoardListOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupEpicBoardList) *int { return v.Position }).(pulumi.IntPtrOutput)
}

type GroupEpicBoardListArrayOutput struct{ *pulumi.OutputState }

func (GroupEpicBoardListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEpicBoardList)(nil)).Elem()
}

func (o GroupEpicBoardListArrayOutput) ToGroupEpicBoardListArrayOutput() GroupEpicBoardListArrayOutput {
	return o
}

func (o GroupEpicBoardListArrayOutput) ToGroupEpicBoardListArrayOutputWithContext(ctx context.Context) GroupEpicBoardListArrayOutput {
	return o
}

func (o GroupEpicBoardListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GroupEpicBoardList] {
	return pulumix.Output[[]GroupEpicBoardList]{
		OutputState: o.OutputState,
	}
}

func (o GroupEpicBoardListArrayOutput) Index(i pulumi.IntInput) GroupEpicBoardListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupEpicBoardList {
		return vs[0].([]GroupEpicBoardList)[vs[1].(int)]
	}).(GroupEpicBoardListOutput)
}

type GroupIssueBoardList struct {
	// The ID of the list.
	Id *int `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId *int `pulumi:"labelId"`
	// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
	Position *int `pulumi:"position"`
}

// GroupIssueBoardListInput is an input type that accepts GroupIssueBoardListArgs and GroupIssueBoardListOutput values.
// You can construct a concrete instance of `GroupIssueBoardListInput` via:
//
//	GroupIssueBoardListArgs{...}
type GroupIssueBoardListInput interface {
	pulumi.Input

	ToGroupIssueBoardListOutput() GroupIssueBoardListOutput
	ToGroupIssueBoardListOutputWithContext(context.Context) GroupIssueBoardListOutput
}

type GroupIssueBoardListArgs struct {
	// The ID of the list.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the label the list should be scoped to.
	LabelId pulumi.IntPtrInput `pulumi:"labelId"`
	// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
	Position pulumi.IntPtrInput `pulumi:"position"`
}

func (GroupIssueBoardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupIssueBoardList)(nil)).Elem()
}

func (i GroupIssueBoardListArgs) ToGroupIssueBoardListOutput() GroupIssueBoardListOutput {
	return i.ToGroupIssueBoardListOutputWithContext(context.Background())
}

func (i GroupIssueBoardListArgs) ToGroupIssueBoardListOutputWithContext(ctx context.Context) GroupIssueBoardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupIssueBoardListOutput)
}

func (i GroupIssueBoardListArgs) ToOutput(ctx context.Context) pulumix.Output[GroupIssueBoardList] {
	return pulumix.Output[GroupIssueBoardList]{
		OutputState: i.ToGroupIssueBoardListOutputWithContext(ctx).OutputState,
	}
}

// GroupIssueBoardListArrayInput is an input type that accepts GroupIssueBoardListArray and GroupIssueBoardListArrayOutput values.
// You can construct a concrete instance of `GroupIssueBoardListArrayInput` via:
//
//	GroupIssueBoardListArray{ GroupIssueBoardListArgs{...} }
type GroupIssueBoardListArrayInput interface {
	pulumi.Input

	ToGroupIssueBoardListArrayOutput() GroupIssueBoardListArrayOutput
	ToGroupIssueBoardListArrayOutputWithContext(context.Context) GroupIssueBoardListArrayOutput
}

type GroupIssueBoardListArray []GroupIssueBoardListInput

func (GroupIssueBoardListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupIssueBoardList)(nil)).Elem()
}

func (i GroupIssueBoardListArray) ToGroupIssueBoardListArrayOutput() GroupIssueBoardListArrayOutput {
	return i.ToGroupIssueBoardListArrayOutputWithContext(context.Background())
}

func (i GroupIssueBoardListArray) ToGroupIssueBoardListArrayOutputWithContext(ctx context.Context) GroupIssueBoardListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupIssueBoardListArrayOutput)
}

func (i GroupIssueBoardListArray) ToOutput(ctx context.Context) pulumix.Output[[]GroupIssueBoardList] {
	return pulumix.Output[[]GroupIssueBoardList]{
		OutputState: i.ToGroupIssueBoardListArrayOutputWithContext(ctx).OutputState,
	}
}

type GroupIssueBoardListOutput struct{ *pulumi.OutputState }

func (GroupIssueBoardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupIssueBoardList)(nil)).Elem()
}

func (o GroupIssueBoardListOutput) ToGroupIssueBoardListOutput() GroupIssueBoardListOutput {
	return o
}

func (o GroupIssueBoardListOutput) ToGroupIssueBoardListOutputWithContext(ctx context.Context) GroupIssueBoardListOutput {
	return o
}

func (o GroupIssueBoardListOutput) ToOutput(ctx context.Context) pulumix.Output[GroupIssueBoardList] {
	return pulumix.Output[GroupIssueBoardList]{
		OutputState: o.OutputState,
	}
}

// The ID of the list.
func (o GroupIssueBoardListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupIssueBoardList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the label the list should be scoped to.
func (o GroupIssueBoardListOutput) LabelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupIssueBoardList) *int { return v.LabelId }).(pulumi.IntPtrOutput)
}

// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
func (o GroupIssueBoardListOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupIssueBoardList) *int { return v.Position }).(pulumi.IntPtrOutput)
}

type GroupIssueBoardListArrayOutput struct{ *pulumi.OutputState }

func (GroupIssueBoardListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupIssueBoardList)(nil)).Elem()
}

func (o GroupIssueBoardListArrayOutput) ToGroupIssueBoardListArrayOutput() GroupIssueBoardListArrayOutput {
	return o
}

func (o GroupIssueBoardListArrayOutput) ToGroupIssueBoardListArrayOutputWithContext(ctx context.Context) GroupIssueBoardListArrayOutput {
	return o
}

func (o GroupIssueBoardListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GroupIssueBoardList] {
	return pulumix.Output[[]GroupIssueBoardList]{
		OutputState: o.OutputState,
	}
}

func (o GroupIssueBoardListArrayOutput) Index(i pulumi.IntInput) GroupIssueBoardListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupIssueBoardList {
		return vs[0].([]GroupIssueBoardList)[vs[1].(int)]
	}).(GroupIssueBoardListOutput)
}

type ProjectContainerExpirationPolicy struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence *string `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The number of images to keep.
	KeepN *int `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
	NameRegex *string `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete *string `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep *string `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt *string `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan *string `pulumi:"olderThan"`
}

// ProjectContainerExpirationPolicyInput is an input type that accepts ProjectContainerExpirationPolicyArgs and ProjectContainerExpirationPolicyOutput values.
// You can construct a concrete instance of `ProjectContainerExpirationPolicyInput` via:
//
//	ProjectContainerExpirationPolicyArgs{...}
type ProjectContainerExpirationPolicyInput interface {
	pulumi.Input

	ToProjectContainerExpirationPolicyOutput() ProjectContainerExpirationPolicyOutput
	ToProjectContainerExpirationPolicyOutputWithContext(context.Context) ProjectContainerExpirationPolicyOutput
}

type ProjectContainerExpirationPolicyArgs struct {
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence pulumi.StringPtrInput `pulumi:"cadence"`
	// If true, the policy is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The number of images to keep.
	KeepN pulumi.IntPtrInput `pulumi:"keepN"`
	// The regular expression to match image names to delete.
	//
	// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The regular expression to match image names to delete.
	NameRegexDelete pulumi.StringPtrInput `pulumi:"nameRegexDelete"`
	// The regular expression to match image names to keep.
	NameRegexKeep pulumi.StringPtrInput `pulumi:"nameRegexKeep"`
	// The next time the policy will run.
	NextRunAt pulumi.StringPtrInput `pulumi:"nextRunAt"`
	// The number of days to keep images.
	OlderThan pulumi.StringPtrInput `pulumi:"olderThan"`
}

func (ProjectContainerExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyOutput() ProjectContainerExpirationPolicyOutput {
	return i.ToProjectContainerExpirationPolicyOutputWithContext(context.Background())
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectContainerExpirationPolicyOutput)
}

func (i ProjectContainerExpirationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectContainerExpirationPolicy] {
	return pulumix.Output[ProjectContainerExpirationPolicy]{
		OutputState: i.ToProjectContainerExpirationPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return i.ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i ProjectContainerExpirationPolicyArgs) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectContainerExpirationPolicyOutput).ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx)
}

// ProjectContainerExpirationPolicyPtrInput is an input type that accepts ProjectContainerExpirationPolicyArgs, ProjectContainerExpirationPolicyPtr and ProjectContainerExpirationPolicyPtrOutput values.
// You can construct a concrete instance of `ProjectContainerExpirationPolicyPtrInput` via:
//
//	        ProjectContainerExpirationPolicyArgs{...}
//
//	or:
//
//	        nil
type ProjectContainerExpirationPolicyPtrInput interface {
	pulumi.Input

	ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput
	ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Context) ProjectContainerExpirationPolicyPtrOutput
}

type projectContainerExpirationPolicyPtrType ProjectContainerExpirationPolicyArgs

func ProjectContainerExpirationPolicyPtr(v *ProjectContainerExpirationPolicyArgs) ProjectContainerExpirationPolicyPtrInput {
	return (*projectContainerExpirationPolicyPtrType)(v)
}

func (*projectContainerExpirationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i *projectContainerExpirationPolicyPtrType) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return i.ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i *projectContainerExpirationPolicyPtrType) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectContainerExpirationPolicyPtrOutput)
}

func (i *projectContainerExpirationPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*ProjectContainerExpirationPolicy] {
	return pulumix.Output[*ProjectContainerExpirationPolicy]{
		OutputState: i.ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type ProjectContainerExpirationPolicyOutput struct{ *pulumi.OutputState }

func (ProjectContainerExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyOutput() ProjectContainerExpirationPolicyOutput {
	return o
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyOutput {
	return o
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return o.ToProjectContainerExpirationPolicyPtrOutputWithContext(context.Background())
}

func (o ProjectContainerExpirationPolicyOutput) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectContainerExpirationPolicy) *ProjectContainerExpirationPolicy {
		return &v
	}).(ProjectContainerExpirationPolicyPtrOutput)
}

func (o ProjectContainerExpirationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectContainerExpirationPolicy] {
	return pulumix.Output[ProjectContainerExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
func (o ProjectContainerExpirationPolicyOutput) Cadence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.Cadence }).(pulumi.StringPtrOutput)
}

// If true, the policy is enabled.
func (o ProjectContainerExpirationPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The number of images to keep.
func (o ProjectContainerExpirationPolicyOutput) KeepN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *int { return v.KeepN }).(pulumi.IntPtrOutput)
}

// The regular expression to match image names to delete.
//
// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
func (o ProjectContainerExpirationPolicyOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to delete.
func (o ProjectContainerExpirationPolicyOutput) NameRegexDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NameRegexDelete }).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to keep.
func (o ProjectContainerExpirationPolicyOutput) NameRegexKeep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NameRegexKeep }).(pulumi.StringPtrOutput)
}

// The next time the policy will run.
func (o ProjectContainerExpirationPolicyOutput) NextRunAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.NextRunAt }).(pulumi.StringPtrOutput)
}

// The number of days to keep images.
func (o ProjectContainerExpirationPolicyOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectContainerExpirationPolicy) *string { return v.OlderThan }).(pulumi.StringPtrOutput)
}

type ProjectContainerExpirationPolicyPtrOutput struct{ *pulumi.OutputState }

func (ProjectContainerExpirationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o ProjectContainerExpirationPolicyPtrOutput) ToProjectContainerExpirationPolicyPtrOutput() ProjectContainerExpirationPolicyPtrOutput {
	return o
}

func (o ProjectContainerExpirationPolicyPtrOutput) ToProjectContainerExpirationPolicyPtrOutputWithContext(ctx context.Context) ProjectContainerExpirationPolicyPtrOutput {
	return o
}

func (o ProjectContainerExpirationPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProjectContainerExpirationPolicy] {
	return pulumix.Output[*ProjectContainerExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ProjectContainerExpirationPolicyPtrOutput) Elem() ProjectContainerExpirationPolicyOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) ProjectContainerExpirationPolicy {
		if v != nil {
			return *v
		}
		var ret ProjectContainerExpirationPolicy
		return ret
	}).(ProjectContainerExpirationPolicyOutput)
}

// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
func (o ProjectContainerExpirationPolicyPtrOutput) Cadence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Cadence
	}).(pulumi.StringPtrOutput)
}

// If true, the policy is enabled.
func (o ProjectContainerExpirationPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The number of images to keep.
func (o ProjectContainerExpirationPolicyPtrOutput) KeepN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *int {
		if v == nil {
			return nil
		}
		return v.KeepN
	}).(pulumi.IntPtrOutput)
}

// The regular expression to match image names to delete.
//
// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
func (o ProjectContainerExpirationPolicyPtrOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NameRegex
	}).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to delete.
func (o ProjectContainerExpirationPolicyPtrOutput) NameRegexDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NameRegexDelete
	}).(pulumi.StringPtrOutput)
}

// The regular expression to match image names to keep.
func (o ProjectContainerExpirationPolicyPtrOutput) NameRegexKeep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NameRegexKeep
	}).(pulumi.StringPtrOutput)
}

// The next time the policy will run.
func (o ProjectContainerExpirationPolicyPtrOutput) NextRunAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NextRunAt
	}).(pulumi.StringPtrOutput)
}

// The number of days to keep images.
func (o ProjectContainerExpirationPolicyPtrOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectContainerExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.OlderThan
	}).(pulumi.StringPtrOutput)
}

type ProjectIssueBoardList struct {
	// The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
	AssigneeId *int `pulumi:"assigneeId"`
	// The ID of the list
	Id *int `pulumi:"id"`
	// The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
	IterationId *int `pulumi:"iterationId"`
	// The ID of the label the list should be scoped to. Requires a GitLab EE license.
	LabelId *int `pulumi:"labelId"`
	// The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
	MilestoneId *int `pulumi:"milestoneId"`
	// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
	Position *int `pulumi:"position"`
}

// ProjectIssueBoardListInput is an input type that accepts ProjectIssueBoardListArgs and ProjectIssueBoardListOutput values.
// You can construct a concrete instance of `ProjectIssueBoardListInput` via:
//
//	ProjectIssueBoardListArgs{...}
type ProjectIssueBoardListInput interface {
	pulumi.Input

	ToProjectIssueBoardListOutput() ProjectIssueBoardListOutput
	ToProjectIssueBoardListOutputWithContext(context.Context) ProjectIssueBoardListOutput
}

type ProjectIssueBoardListArgs struct {
	// The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
	AssigneeId pulumi.IntPtrInput `pulumi:"assigneeId"`
	// The ID of the list
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
	IterationId pulumi.IntPtrInput `pulumi:"iterationId"`
	// The ID of the label the list should be scoped to. Requires a GitLab EE license.
	LabelId pulumi.IntPtrInput `pulumi:"labelId"`
	// The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
	MilestoneId pulumi.IntPtrInput `pulumi:"milestoneId"`
	// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
	Position pulumi.IntPtrInput `pulumi:"position"`
}

func (ProjectIssueBoardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueBoardList)(nil)).Elem()
}

func (i ProjectIssueBoardListArgs) ToProjectIssueBoardListOutput() ProjectIssueBoardListOutput {
	return i.ToProjectIssueBoardListOutputWithContext(context.Background())
}

func (i ProjectIssueBoardListArgs) ToProjectIssueBoardListOutputWithContext(ctx context.Context) ProjectIssueBoardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueBoardListOutput)
}

func (i ProjectIssueBoardListArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectIssueBoardList] {
	return pulumix.Output[ProjectIssueBoardList]{
		OutputState: i.ToProjectIssueBoardListOutputWithContext(ctx).OutputState,
	}
}

// ProjectIssueBoardListArrayInput is an input type that accepts ProjectIssueBoardListArray and ProjectIssueBoardListArrayOutput values.
// You can construct a concrete instance of `ProjectIssueBoardListArrayInput` via:
//
//	ProjectIssueBoardListArray{ ProjectIssueBoardListArgs{...} }
type ProjectIssueBoardListArrayInput interface {
	pulumi.Input

	ToProjectIssueBoardListArrayOutput() ProjectIssueBoardListArrayOutput
	ToProjectIssueBoardListArrayOutputWithContext(context.Context) ProjectIssueBoardListArrayOutput
}

type ProjectIssueBoardListArray []ProjectIssueBoardListInput

func (ProjectIssueBoardListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueBoardList)(nil)).Elem()
}

func (i ProjectIssueBoardListArray) ToProjectIssueBoardListArrayOutput() ProjectIssueBoardListArrayOutput {
	return i.ToProjectIssueBoardListArrayOutputWithContext(context.Background())
}

func (i ProjectIssueBoardListArray) ToProjectIssueBoardListArrayOutputWithContext(ctx context.Context) ProjectIssueBoardListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueBoardListArrayOutput)
}

func (i ProjectIssueBoardListArray) ToOutput(ctx context.Context) pulumix.Output[[]ProjectIssueBoardList] {
	return pulumix.Output[[]ProjectIssueBoardList]{
		OutputState: i.ToProjectIssueBoardListArrayOutputWithContext(ctx).OutputState,
	}
}

type ProjectIssueBoardListOutput struct{ *pulumi.OutputState }

func (ProjectIssueBoardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueBoardList)(nil)).Elem()
}

func (o ProjectIssueBoardListOutput) ToProjectIssueBoardListOutput() ProjectIssueBoardListOutput {
	return o
}

func (o ProjectIssueBoardListOutput) ToProjectIssueBoardListOutputWithContext(ctx context.Context) ProjectIssueBoardListOutput {
	return o
}

func (o ProjectIssueBoardListOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectIssueBoardList] {
	return pulumix.Output[ProjectIssueBoardList]{
		OutputState: o.OutputState,
	}
}

// The ID of the assignee the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) AssigneeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.AssigneeId }).(pulumi.IntPtrOutput)
}

// The ID of the list
func (o ProjectIssueBoardListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) IterationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.IterationId }).(pulumi.IntPtrOutput)
}

// The ID of the label the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) LabelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.LabelId }).(pulumi.IntPtrOutput)
}

// The ID of the milestone the list should be scoped to. Requires a GitLab EE license.
func (o ProjectIssueBoardListOutput) MilestoneId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.MilestoneId }).(pulumi.IntPtrOutput)
}

// The position of the list within the board. The position for the list is based on the its position in the `lists` array.
func (o ProjectIssueBoardListOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueBoardList) *int { return v.Position }).(pulumi.IntPtrOutput)
}

type ProjectIssueBoardListArrayOutput struct{ *pulumi.OutputState }

func (ProjectIssueBoardListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueBoardList)(nil)).Elem()
}

func (o ProjectIssueBoardListArrayOutput) ToProjectIssueBoardListArrayOutput() ProjectIssueBoardListArrayOutput {
	return o
}

func (o ProjectIssueBoardListArrayOutput) ToProjectIssueBoardListArrayOutputWithContext(ctx context.Context) ProjectIssueBoardListArrayOutput {
	return o
}

func (o ProjectIssueBoardListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProjectIssueBoardList] {
	return pulumix.Output[[]ProjectIssueBoardList]{
		OutputState: o.OutputState,
	}
}

func (o ProjectIssueBoardListArrayOutput) Index(i pulumi.IntInput) ProjectIssueBoardListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectIssueBoardList {
		return vs[0].([]ProjectIssueBoardList)[vs[1].(int)]
	}).(ProjectIssueBoardListOutput)
}

type ProjectIssueTaskCompletionStatus struct {
	CompletedCount *int `pulumi:"completedCount"`
	Count          *int `pulumi:"count"`
}

// ProjectIssueTaskCompletionStatusInput is an input type that accepts ProjectIssueTaskCompletionStatusArgs and ProjectIssueTaskCompletionStatusOutput values.
// You can construct a concrete instance of `ProjectIssueTaskCompletionStatusInput` via:
//
//	ProjectIssueTaskCompletionStatusArgs{...}
type ProjectIssueTaskCompletionStatusInput interface {
	pulumi.Input

	ToProjectIssueTaskCompletionStatusOutput() ProjectIssueTaskCompletionStatusOutput
	ToProjectIssueTaskCompletionStatusOutputWithContext(context.Context) ProjectIssueTaskCompletionStatusOutput
}

type ProjectIssueTaskCompletionStatusArgs struct {
	CompletedCount pulumi.IntPtrInput `pulumi:"completedCount"`
	Count          pulumi.IntPtrInput `pulumi:"count"`
}

func (ProjectIssueTaskCompletionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i ProjectIssueTaskCompletionStatusArgs) ToProjectIssueTaskCompletionStatusOutput() ProjectIssueTaskCompletionStatusOutput {
	return i.ToProjectIssueTaskCompletionStatusOutputWithContext(context.Background())
}

func (i ProjectIssueTaskCompletionStatusArgs) ToProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueTaskCompletionStatusOutput)
}

func (i ProjectIssueTaskCompletionStatusArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectIssueTaskCompletionStatus] {
	return pulumix.Output[ProjectIssueTaskCompletionStatus]{
		OutputState: i.ToProjectIssueTaskCompletionStatusOutputWithContext(ctx).OutputState,
	}
}

// ProjectIssueTaskCompletionStatusArrayInput is an input type that accepts ProjectIssueTaskCompletionStatusArray and ProjectIssueTaskCompletionStatusArrayOutput values.
// You can construct a concrete instance of `ProjectIssueTaskCompletionStatusArrayInput` via:
//
//	ProjectIssueTaskCompletionStatusArray{ ProjectIssueTaskCompletionStatusArgs{...} }
type ProjectIssueTaskCompletionStatusArrayInput interface {
	pulumi.Input

	ToProjectIssueTaskCompletionStatusArrayOutput() ProjectIssueTaskCompletionStatusArrayOutput
	ToProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Context) ProjectIssueTaskCompletionStatusArrayOutput
}

type ProjectIssueTaskCompletionStatusArray []ProjectIssueTaskCompletionStatusInput

func (ProjectIssueTaskCompletionStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i ProjectIssueTaskCompletionStatusArray) ToProjectIssueTaskCompletionStatusArrayOutput() ProjectIssueTaskCompletionStatusArrayOutput {
	return i.ToProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Background())
}

func (i ProjectIssueTaskCompletionStatusArray) ToProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIssueTaskCompletionStatusArrayOutput)
}

func (i ProjectIssueTaskCompletionStatusArray) ToOutput(ctx context.Context) pulumix.Output[[]ProjectIssueTaskCompletionStatus] {
	return pulumix.Output[[]ProjectIssueTaskCompletionStatus]{
		OutputState: i.ToProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx).OutputState,
	}
}

type ProjectIssueTaskCompletionStatusOutput struct{ *pulumi.OutputState }

func (ProjectIssueTaskCompletionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o ProjectIssueTaskCompletionStatusOutput) ToProjectIssueTaskCompletionStatusOutput() ProjectIssueTaskCompletionStatusOutput {
	return o
}

func (o ProjectIssueTaskCompletionStatusOutput) ToProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusOutput {
	return o
}

func (o ProjectIssueTaskCompletionStatusOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectIssueTaskCompletionStatus] {
	return pulumix.Output[ProjectIssueTaskCompletionStatus]{
		OutputState: o.OutputState,
	}
}

func (o ProjectIssueTaskCompletionStatusOutput) CompletedCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueTaskCompletionStatus) *int { return v.CompletedCount }).(pulumi.IntPtrOutput)
}

func (o ProjectIssueTaskCompletionStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectIssueTaskCompletionStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type ProjectIssueTaskCompletionStatusArrayOutput struct{ *pulumi.OutputState }

func (ProjectIssueTaskCompletionStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o ProjectIssueTaskCompletionStatusArrayOutput) ToProjectIssueTaskCompletionStatusArrayOutput() ProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o ProjectIssueTaskCompletionStatusArrayOutput) ToProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) ProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o ProjectIssueTaskCompletionStatusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProjectIssueTaskCompletionStatus] {
	return pulumix.Output[[]ProjectIssueTaskCompletionStatus]{
		OutputState: o.OutputState,
	}
}

func (o ProjectIssueTaskCompletionStatusArrayOutput) Index(i pulumi.IntInput) ProjectIssueTaskCompletionStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectIssueTaskCompletionStatus {
		return vs[0].([]ProjectIssueTaskCompletionStatus)[vs[1].(int)]
	}).(ProjectIssueTaskCompletionStatusOutput)
}

type ProjectProtectedEnvironmentApprovalRule struct {
	// Levels of access allowed to approve a deployment to this protected environment. Valid values are `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to approve a deployment to this protected environment. The project must be shared with the group. This is mutually exclusive with user_id.
	GroupId *int `pulumi:"groupId"`
	// The unique ID of the Approval Rules object.
	Id *int `pulumi:"id"`
	// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
	RequiredApprovals *int `pulumi:"requiredApprovals"`
	// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the project. This is mutually exclusive with group*id and required*approvals.
	UserId *int `pulumi:"userId"`
}

// ProjectProtectedEnvironmentApprovalRuleInput is an input type that accepts ProjectProtectedEnvironmentApprovalRuleArgs and ProjectProtectedEnvironmentApprovalRuleOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentApprovalRuleInput` via:
//
//	ProjectProtectedEnvironmentApprovalRuleArgs{...}
type ProjectProtectedEnvironmentApprovalRuleInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentApprovalRuleOutput() ProjectProtectedEnvironmentApprovalRuleOutput
	ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(context.Context) ProjectProtectedEnvironmentApprovalRuleOutput
}

type ProjectProtectedEnvironmentApprovalRuleArgs struct {
	// Levels of access allowed to approve a deployment to this protected environment. Valid values are `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to approve a deployment to this protected environment. The project must be shared with the group. This is mutually exclusive with user_id.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The unique ID of the Approval Rules object.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
	RequiredApprovals pulumi.IntPtrInput `pulumi:"requiredApprovals"`
	// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the project. This is mutually exclusive with group*id and required*approvals.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (ProjectProtectedEnvironmentApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentApprovalRuleArgs) ToProjectProtectedEnvironmentApprovalRuleOutput() ProjectProtectedEnvironmentApprovalRuleOutput {
	return i.ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentApprovalRuleArgs) ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentApprovalRuleOutput)
}

func (i ProjectProtectedEnvironmentApprovalRuleArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectProtectedEnvironmentApprovalRule] {
	return pulumix.Output[ProjectProtectedEnvironmentApprovalRule]{
		OutputState: i.ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(ctx).OutputState,
	}
}

// ProjectProtectedEnvironmentApprovalRuleArrayInput is an input type that accepts ProjectProtectedEnvironmentApprovalRuleArray and ProjectProtectedEnvironmentApprovalRuleArrayOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentApprovalRuleArrayInput` via:
//
//	ProjectProtectedEnvironmentApprovalRuleArray{ ProjectProtectedEnvironmentApprovalRuleArgs{...} }
type ProjectProtectedEnvironmentApprovalRuleArrayInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentApprovalRuleArrayOutput() ProjectProtectedEnvironmentApprovalRuleArrayOutput
	ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(context.Context) ProjectProtectedEnvironmentApprovalRuleArrayOutput
}

type ProjectProtectedEnvironmentApprovalRuleArray []ProjectProtectedEnvironmentApprovalRuleInput

func (ProjectProtectedEnvironmentApprovalRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentApprovalRuleArray) ToProjectProtectedEnvironmentApprovalRuleArrayOutput() ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return i.ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentApprovalRuleArray) ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentApprovalRuleArrayOutput)
}

func (i ProjectProtectedEnvironmentApprovalRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]ProjectProtectedEnvironmentApprovalRule] {
	return pulumix.Output[[]ProjectProtectedEnvironmentApprovalRule]{
		OutputState: i.ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type ProjectProtectedEnvironmentApprovalRuleOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentApprovalRuleOutput) ToProjectProtectedEnvironmentApprovalRuleOutput() ProjectProtectedEnvironmentApprovalRuleOutput {
	return o
}

func (o ProjectProtectedEnvironmentApprovalRuleOutput) ToProjectProtectedEnvironmentApprovalRuleOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleOutput {
	return o
}

func (o ProjectProtectedEnvironmentApprovalRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectProtectedEnvironmentApprovalRule] {
	return pulumix.Output[ProjectProtectedEnvironmentApprovalRule]{
		OutputState: o.OutputState,
	}
}

// Levels of access allowed to approve a deployment to this protected environment. Valid values are `developer`, `maintainer`.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of the group allowed to approve a deployment to this protected environment. The project must be shared with the group. This is mutually exclusive with user_id.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The unique ID of the Approval Rules object.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) RequiredApprovals() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.RequiredApprovals }).(pulumi.IntPtrOutput)
}

// The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the project. This is mutually exclusive with group*id and required*approvals.
func (o ProjectProtectedEnvironmentApprovalRuleOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentApprovalRule) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type ProjectProtectedEnvironmentApprovalRuleArrayOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentApprovalRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentApprovalRule)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentApprovalRuleArrayOutput) ToProjectProtectedEnvironmentApprovalRuleArrayOutput() ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentApprovalRuleArrayOutput) ToProjectProtectedEnvironmentApprovalRuleArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentApprovalRuleArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentApprovalRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProjectProtectedEnvironmentApprovalRule] {
	return pulumix.Output[[]ProjectProtectedEnvironmentApprovalRule]{
		OutputState: o.OutputState,
	}
}

func (o ProjectProtectedEnvironmentApprovalRuleArrayOutput) Index(i pulumi.IntInput) ProjectProtectedEnvironmentApprovalRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectProtectedEnvironmentApprovalRule {
		return vs[0].([]ProjectProtectedEnvironmentApprovalRule)[vs[1].(int)]
	}).(ProjectProtectedEnvironmentApprovalRuleOutput)
}

type ProjectProtectedEnvironmentDeployAccessLevel struct {
	// Levels of access required to deploy to this protected environment. Valid values are `developer`, `maintainer`.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to deploy to this protected environment. The project must be shared with the group.
	GroupId *int `pulumi:"groupId"`
	// The unique ID of the Deploy Access Level object.
	Id *int `pulumi:"id"`
	// The ID of the user allowed to deploy to this protected environment. The user must be a member of the project.
	UserId *int `pulumi:"userId"`
}

// ProjectProtectedEnvironmentDeployAccessLevelInput is an input type that accepts ProjectProtectedEnvironmentDeployAccessLevelArgs and ProjectProtectedEnvironmentDeployAccessLevelOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentDeployAccessLevelInput` via:
//
//	ProjectProtectedEnvironmentDeployAccessLevelArgs{...}
type ProjectProtectedEnvironmentDeployAccessLevelInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentDeployAccessLevelOutput() ProjectProtectedEnvironmentDeployAccessLevelOutput
	ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(context.Context) ProjectProtectedEnvironmentDeployAccessLevelOutput
}

type ProjectProtectedEnvironmentDeployAccessLevelArgs struct {
	// Levels of access required to deploy to this protected environment. Valid values are `developer`, `maintainer`.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of the group allowed to deploy to this protected environment. The project must be shared with the group.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The unique ID of the Deploy Access Level object.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the user allowed to deploy to this protected environment. The user must be a member of the project.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (ProjectProtectedEnvironmentDeployAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArgs) ToProjectProtectedEnvironmentDeployAccessLevelOutput() ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return i.ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArgs) ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentDeployAccessLevelOutput)
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectProtectedEnvironmentDeployAccessLevel] {
	return pulumix.Output[ProjectProtectedEnvironmentDeployAccessLevel]{
		OutputState: i.ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(ctx).OutputState,
	}
}

// ProjectProtectedEnvironmentDeployAccessLevelArrayInput is an input type that accepts ProjectProtectedEnvironmentDeployAccessLevelArray and ProjectProtectedEnvironmentDeployAccessLevelArrayOutput values.
// You can construct a concrete instance of `ProjectProtectedEnvironmentDeployAccessLevelArrayInput` via:
//
//	ProjectProtectedEnvironmentDeployAccessLevelArray{ ProjectProtectedEnvironmentDeployAccessLevelArgs{...} }
type ProjectProtectedEnvironmentDeployAccessLevelArrayInput interface {
	pulumi.Input

	ToProjectProtectedEnvironmentDeployAccessLevelArrayOutput() ProjectProtectedEnvironmentDeployAccessLevelArrayOutput
	ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(context.Context) ProjectProtectedEnvironmentDeployAccessLevelArrayOutput
}

type ProjectProtectedEnvironmentDeployAccessLevelArray []ProjectProtectedEnvironmentDeployAccessLevelInput

func (ProjectProtectedEnvironmentDeployAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArray) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutput() ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return i.ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(context.Background())
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArray) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProtectedEnvironmentDeployAccessLevelArrayOutput)
}

func (i ProjectProtectedEnvironmentDeployAccessLevelArray) ToOutput(ctx context.Context) pulumix.Output[[]ProjectProtectedEnvironmentDeployAccessLevel] {
	return pulumix.Output[[]ProjectProtectedEnvironmentDeployAccessLevel]{
		OutputState: i.ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(ctx).OutputState,
	}
}

type ProjectProtectedEnvironmentDeployAccessLevelOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentDeployAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) ToProjectProtectedEnvironmentDeployAccessLevelOutput() ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return o
}

func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) ToProjectProtectedEnvironmentDeployAccessLevelOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return o
}

func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectProtectedEnvironmentDeployAccessLevel] {
	return pulumix.Output[ProjectProtectedEnvironmentDeployAccessLevel]{
		OutputState: o.OutputState,
	}
}

// Levels of access required to deploy to this protected environment. Valid values are `developer`, `maintainer`.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of the group allowed to deploy to this protected environment. The project must be shared with the group.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The unique ID of the Deploy Access Level object.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the user allowed to deploy to this protected environment. The user must be a member of the project.
func (o ProjectProtectedEnvironmentDeployAccessLevelOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectProtectedEnvironmentDeployAccessLevel) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type ProjectProtectedEnvironmentDeployAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectProtectedEnvironmentDeployAccessLevel)(nil)).Elem()
}

func (o ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutput() ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) ToProjectProtectedEnvironmentDeployAccessLevelArrayOutputWithContext(ctx context.Context) ProjectProtectedEnvironmentDeployAccessLevelArrayOutput {
	return o
}

func (o ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProjectProtectedEnvironmentDeployAccessLevel] {
	return pulumix.Output[[]ProjectProtectedEnvironmentDeployAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o ProjectProtectedEnvironmentDeployAccessLevelArrayOutput) Index(i pulumi.IntInput) ProjectProtectedEnvironmentDeployAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectProtectedEnvironmentDeployAccessLevel {
		return vs[0].([]ProjectProtectedEnvironmentDeployAccessLevel)[vs[1].(int)]
	}).(ProjectProtectedEnvironmentDeployAccessLevelOutput)
}

type ProjectPushRules struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck *bool `pulumi:"commitCommitterCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag *bool `pulumi:"denyDeleteTag"`
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex *string `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize *int `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck *bool `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `pulumi:"preventSecrets"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits *bool `pulumi:"rejectUnsignedCommits"`
}

// ProjectPushRulesInput is an input type that accepts ProjectPushRulesArgs and ProjectPushRulesOutput values.
// You can construct a concrete instance of `ProjectPushRulesInput` via:
//
//	ProjectPushRulesArgs{...}
type ProjectPushRulesInput interface {
	pulumi.Input

	ToProjectPushRulesOutput() ProjectPushRulesOutput
	ToProjectPushRulesOutputWithContext(context.Context) ProjectPushRulesOutput
}

type ProjectPushRulesArgs struct {
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex pulumi.StringPtrInput `pulumi:"authorEmailRegex"`
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex pulumi.StringPtrInput `pulumi:"branchNameRegex"`
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck pulumi.BoolPtrInput `pulumi:"commitCommitterCheck"`
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex pulumi.StringPtrInput `pulumi:"commitMessageNegativeRegex"`
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex pulumi.StringPtrInput `pulumi:"commitMessageRegex"`
	// Deny deleting a tag.
	DenyDeleteTag pulumi.BoolPtrInput `pulumi:"denyDeleteTag"`
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex pulumi.StringPtrInput `pulumi:"fileNameRegex"`
	// Maximum file size (MB).
	MaxFileSize pulumi.IntPtrInput `pulumi:"maxFileSize"`
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck pulumi.BoolPtrInput `pulumi:"memberCheck"`
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets pulumi.BoolPtrInput `pulumi:"preventSecrets"`
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits pulumi.BoolPtrInput `pulumi:"rejectUnsignedCommits"`
}

func (ProjectPushRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPushRules)(nil)).Elem()
}

func (i ProjectPushRulesArgs) ToProjectPushRulesOutput() ProjectPushRulesOutput {
	return i.ToProjectPushRulesOutputWithContext(context.Background())
}

func (i ProjectPushRulesArgs) ToProjectPushRulesOutputWithContext(ctx context.Context) ProjectPushRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesOutput)
}

func (i ProjectPushRulesArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectPushRules] {
	return pulumix.Output[ProjectPushRules]{
		OutputState: i.ToProjectPushRulesOutputWithContext(ctx).OutputState,
	}
}

func (i ProjectPushRulesArgs) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return i.ToProjectPushRulesPtrOutputWithContext(context.Background())
}

func (i ProjectPushRulesArgs) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesOutput).ToProjectPushRulesPtrOutputWithContext(ctx)
}

// ProjectPushRulesPtrInput is an input type that accepts ProjectPushRulesArgs, ProjectPushRulesPtr and ProjectPushRulesPtrOutput values.
// You can construct a concrete instance of `ProjectPushRulesPtrInput` via:
//
//	        ProjectPushRulesArgs{...}
//
//	or:
//
//	        nil
type ProjectPushRulesPtrInput interface {
	pulumi.Input

	ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput
	ToProjectPushRulesPtrOutputWithContext(context.Context) ProjectPushRulesPtrOutput
}

type projectPushRulesPtrType ProjectPushRulesArgs

func ProjectPushRulesPtr(v *ProjectPushRulesArgs) ProjectPushRulesPtrInput {
	return (*projectPushRulesPtrType)(v)
}

func (*projectPushRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPushRules)(nil)).Elem()
}

func (i *projectPushRulesPtrType) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return i.ToProjectPushRulesPtrOutputWithContext(context.Background())
}

func (i *projectPushRulesPtrType) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPushRulesPtrOutput)
}

func (i *projectPushRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ProjectPushRules] {
	return pulumix.Output[*ProjectPushRules]{
		OutputState: i.ToProjectPushRulesPtrOutputWithContext(ctx).OutputState,
	}
}

type ProjectPushRulesOutput struct{ *pulumi.OutputState }

func (ProjectPushRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPushRules)(nil)).Elem()
}

func (o ProjectPushRulesOutput) ToProjectPushRulesOutput() ProjectPushRulesOutput {
	return o
}

func (o ProjectPushRulesOutput) ToProjectPushRulesOutputWithContext(ctx context.Context) ProjectPushRulesOutput {
	return o
}

func (o ProjectPushRulesOutput) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return o.ToProjectPushRulesPtrOutputWithContext(context.Background())
}

func (o ProjectPushRulesOutput) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectPushRules) *ProjectPushRules {
		return &v
	}).(ProjectPushRulesPtrOutput)
}

func (o ProjectPushRulesOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectPushRules] {
	return pulumix.Output[ProjectPushRules]{
		OutputState: o.OutputState,
	}
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o ProjectPushRulesOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.AuthorEmailRegex }).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o ProjectPushRulesOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.BranchNameRegex }).(pulumi.StringPtrOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o ProjectPushRulesOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.CommitCommitterCheck }).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o ProjectPushRulesOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.CommitMessageNegativeRegex }).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o ProjectPushRulesOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.CommitMessageRegex }).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o ProjectPushRulesOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.DenyDeleteTag }).(pulumi.BoolPtrOutput)
}

// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
func (o ProjectPushRulesOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *string { return v.FileNameRegex }).(pulumi.StringPtrOutput)
}

// Maximum file size (MB).
func (o ProjectPushRulesOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *int { return v.MaxFileSize }).(pulumi.IntPtrOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o ProjectPushRulesOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.MemberCheck }).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o ProjectPushRulesOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.PreventSecrets }).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not signed through GPG.
func (o ProjectPushRulesOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectPushRules) *bool { return v.RejectUnsignedCommits }).(pulumi.BoolPtrOutput)
}

type ProjectPushRulesPtrOutput struct{ *pulumi.OutputState }

func (ProjectPushRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPushRules)(nil)).Elem()
}

func (o ProjectPushRulesPtrOutput) ToProjectPushRulesPtrOutput() ProjectPushRulesPtrOutput {
	return o
}

func (o ProjectPushRulesPtrOutput) ToProjectPushRulesPtrOutputWithContext(ctx context.Context) ProjectPushRulesPtrOutput {
	return o
}

func (o ProjectPushRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProjectPushRules] {
	return pulumix.Output[*ProjectPushRules]{
		OutputState: o.OutputState,
	}
}

func (o ProjectPushRulesPtrOutput) Elem() ProjectPushRulesOutput {
	return o.ApplyT(func(v *ProjectPushRules) ProjectPushRules {
		if v != nil {
			return *v
		}
		var ret ProjectPushRules
		return ret
	}).(ProjectPushRulesOutput)
}

// All commit author emails must match this regex, e.g. `@my-company.com$`.
func (o ProjectPushRulesPtrOutput) AuthorEmailRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.AuthorEmailRegex
	}).(pulumi.StringPtrOutput)
}

// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
func (o ProjectPushRulesPtrOutput) BranchNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.BranchNameRegex
	}).(pulumi.StringPtrOutput)
}

// Users can only push commits to this repository that were committed with one of their own verified emails.
func (o ProjectPushRulesPtrOutput) CommitCommitterCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.CommitCommitterCheck
	}).(pulumi.BoolPtrOutput)
}

// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
func (o ProjectPushRulesPtrOutput) CommitMessageNegativeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageNegativeRegex
	}).(pulumi.StringPtrOutput)
}

// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
func (o ProjectPushRulesPtrOutput) CommitMessageRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.CommitMessageRegex
	}).(pulumi.StringPtrOutput)
}

// Deny deleting a tag.
func (o ProjectPushRulesPtrOutput) DenyDeleteTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.DenyDeleteTag
	}).(pulumi.BoolPtrOutput)
}

// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
func (o ProjectPushRulesPtrOutput) FileNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *string {
		if v == nil {
			return nil
		}
		return v.FileNameRegex
	}).(pulumi.StringPtrOutput)
}

// Maximum file size (MB).
func (o ProjectPushRulesPtrOutput) MaxFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *int {
		if v == nil {
			return nil
		}
		return v.MaxFileSize
	}).(pulumi.IntPtrOutput)
}

// Restrict commits by author (email) to existing GitLab users.
func (o ProjectPushRulesPtrOutput) MemberCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.MemberCheck
	}).(pulumi.BoolPtrOutput)
}

// GitLab will reject any files that are likely to contain secrets.
func (o ProjectPushRulesPtrOutput) PreventSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.PreventSecrets
	}).(pulumi.BoolPtrOutput)
}

// Reject commit when it’s not signed through GPG.
func (o ProjectPushRulesPtrOutput) RejectUnsignedCommits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectPushRules) *bool {
		if v == nil {
			return nil
		}
		return v.RejectUnsignedCommits
	}).(pulumi.BoolPtrOutput)
}

type ProjectTagCommit struct {
	AuthorEmail    *string  `pulumi:"authorEmail"`
	AuthorName     *string  `pulumi:"authorName"`
	AuthoredDate   *string  `pulumi:"authoredDate"`
	CommittedDate  *string  `pulumi:"committedDate"`
	CommitterEmail *string  `pulumi:"committerEmail"`
	CommitterName  *string  `pulumi:"committerName"`
	Id             *string  `pulumi:"id"`
	Message        *string  `pulumi:"message"`
	ParentIds      []string `pulumi:"parentIds"`
	ShortId        *string  `pulumi:"shortId"`
	Title          *string  `pulumi:"title"`
}

// ProjectTagCommitInput is an input type that accepts ProjectTagCommitArgs and ProjectTagCommitOutput values.
// You can construct a concrete instance of `ProjectTagCommitInput` via:
//
//	ProjectTagCommitArgs{...}
type ProjectTagCommitInput interface {
	pulumi.Input

	ToProjectTagCommitOutput() ProjectTagCommitOutput
	ToProjectTagCommitOutputWithContext(context.Context) ProjectTagCommitOutput
}

type ProjectTagCommitArgs struct {
	AuthorEmail    pulumi.StringPtrInput   `pulumi:"authorEmail"`
	AuthorName     pulumi.StringPtrInput   `pulumi:"authorName"`
	AuthoredDate   pulumi.StringPtrInput   `pulumi:"authoredDate"`
	CommittedDate  pulumi.StringPtrInput   `pulumi:"committedDate"`
	CommitterEmail pulumi.StringPtrInput   `pulumi:"committerEmail"`
	CommitterName  pulumi.StringPtrInput   `pulumi:"committerName"`
	Id             pulumi.StringPtrInput   `pulumi:"id"`
	Message        pulumi.StringPtrInput   `pulumi:"message"`
	ParentIds      pulumi.StringArrayInput `pulumi:"parentIds"`
	ShortId        pulumi.StringPtrInput   `pulumi:"shortId"`
	Title          pulumi.StringPtrInput   `pulumi:"title"`
}

func (ProjectTagCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagCommit)(nil)).Elem()
}

func (i ProjectTagCommitArgs) ToProjectTagCommitOutput() ProjectTagCommitOutput {
	return i.ToProjectTagCommitOutputWithContext(context.Background())
}

func (i ProjectTagCommitArgs) ToProjectTagCommitOutputWithContext(ctx context.Context) ProjectTagCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagCommitOutput)
}

func (i ProjectTagCommitArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectTagCommit] {
	return pulumix.Output[ProjectTagCommit]{
		OutputState: i.ToProjectTagCommitOutputWithContext(ctx).OutputState,
	}
}

// ProjectTagCommitArrayInput is an input type that accepts ProjectTagCommitArray and ProjectTagCommitArrayOutput values.
// You can construct a concrete instance of `ProjectTagCommitArrayInput` via:
//
//	ProjectTagCommitArray{ ProjectTagCommitArgs{...} }
type ProjectTagCommitArrayInput interface {
	pulumi.Input

	ToProjectTagCommitArrayOutput() ProjectTagCommitArrayOutput
	ToProjectTagCommitArrayOutputWithContext(context.Context) ProjectTagCommitArrayOutput
}

type ProjectTagCommitArray []ProjectTagCommitInput

func (ProjectTagCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagCommit)(nil)).Elem()
}

func (i ProjectTagCommitArray) ToProjectTagCommitArrayOutput() ProjectTagCommitArrayOutput {
	return i.ToProjectTagCommitArrayOutputWithContext(context.Background())
}

func (i ProjectTagCommitArray) ToProjectTagCommitArrayOutputWithContext(ctx context.Context) ProjectTagCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagCommitArrayOutput)
}

func (i ProjectTagCommitArray) ToOutput(ctx context.Context) pulumix.Output[[]ProjectTagCommit] {
	return pulumix.Output[[]ProjectTagCommit]{
		OutputState: i.ToProjectTagCommitArrayOutputWithContext(ctx).OutputState,
	}
}

type ProjectTagCommitOutput struct{ *pulumi.OutputState }

func (ProjectTagCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagCommit)(nil)).Elem()
}

func (o ProjectTagCommitOutput) ToProjectTagCommitOutput() ProjectTagCommitOutput {
	return o
}

func (o ProjectTagCommitOutput) ToProjectTagCommitOutputWithContext(ctx context.Context) ProjectTagCommitOutput {
	return o
}

func (o ProjectTagCommitOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectTagCommit] {
	return pulumix.Output[ProjectTagCommit]{
		OutputState: o.OutputState,
	}
}

func (o ProjectTagCommitOutput) AuthorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.AuthorEmail }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.AuthorName }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) AuthoredDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.AuthoredDate }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) CommittedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.CommittedDate }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) CommitterEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.CommitterEmail }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) CommitterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.CommitterName }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectTagCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

func (o ProjectTagCommitOutput) ShortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.ShortId }).(pulumi.StringPtrOutput)
}

func (o ProjectTagCommitOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagCommit) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ProjectTagCommitArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagCommit)(nil)).Elem()
}

func (o ProjectTagCommitArrayOutput) ToProjectTagCommitArrayOutput() ProjectTagCommitArrayOutput {
	return o
}

func (o ProjectTagCommitArrayOutput) ToProjectTagCommitArrayOutputWithContext(ctx context.Context) ProjectTagCommitArrayOutput {
	return o
}

func (o ProjectTagCommitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProjectTagCommit] {
	return pulumix.Output[[]ProjectTagCommit]{
		OutputState: o.OutputState,
	}
}

func (o ProjectTagCommitArrayOutput) Index(i pulumi.IntInput) ProjectTagCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTagCommit {
		return vs[0].([]ProjectTagCommit)[vs[1].(int)]
	}).(ProjectTagCommitOutput)
}

type ProjectTagRelease struct {
	Description *string `pulumi:"description"`
	TagName     *string `pulumi:"tagName"`
}

// ProjectTagReleaseInput is an input type that accepts ProjectTagReleaseArgs and ProjectTagReleaseOutput values.
// You can construct a concrete instance of `ProjectTagReleaseInput` via:
//
//	ProjectTagReleaseArgs{...}
type ProjectTagReleaseInput interface {
	pulumi.Input

	ToProjectTagReleaseOutput() ProjectTagReleaseOutput
	ToProjectTagReleaseOutputWithContext(context.Context) ProjectTagReleaseOutput
}

type ProjectTagReleaseArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	TagName     pulumi.StringPtrInput `pulumi:"tagName"`
}

func (ProjectTagReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagRelease)(nil)).Elem()
}

func (i ProjectTagReleaseArgs) ToProjectTagReleaseOutput() ProjectTagReleaseOutput {
	return i.ToProjectTagReleaseOutputWithContext(context.Background())
}

func (i ProjectTagReleaseArgs) ToProjectTagReleaseOutputWithContext(ctx context.Context) ProjectTagReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagReleaseOutput)
}

func (i ProjectTagReleaseArgs) ToOutput(ctx context.Context) pulumix.Output[ProjectTagRelease] {
	return pulumix.Output[ProjectTagRelease]{
		OutputState: i.ToProjectTagReleaseOutputWithContext(ctx).OutputState,
	}
}

// ProjectTagReleaseArrayInput is an input type that accepts ProjectTagReleaseArray and ProjectTagReleaseArrayOutput values.
// You can construct a concrete instance of `ProjectTagReleaseArrayInput` via:
//
//	ProjectTagReleaseArray{ ProjectTagReleaseArgs{...} }
type ProjectTagReleaseArrayInput interface {
	pulumi.Input

	ToProjectTagReleaseArrayOutput() ProjectTagReleaseArrayOutput
	ToProjectTagReleaseArrayOutputWithContext(context.Context) ProjectTagReleaseArrayOutput
}

type ProjectTagReleaseArray []ProjectTagReleaseInput

func (ProjectTagReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagRelease)(nil)).Elem()
}

func (i ProjectTagReleaseArray) ToProjectTagReleaseArrayOutput() ProjectTagReleaseArrayOutput {
	return i.ToProjectTagReleaseArrayOutputWithContext(context.Background())
}

func (i ProjectTagReleaseArray) ToProjectTagReleaseArrayOutputWithContext(ctx context.Context) ProjectTagReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagReleaseArrayOutput)
}

func (i ProjectTagReleaseArray) ToOutput(ctx context.Context) pulumix.Output[[]ProjectTagRelease] {
	return pulumix.Output[[]ProjectTagRelease]{
		OutputState: i.ToProjectTagReleaseArrayOutputWithContext(ctx).OutputState,
	}
}

type ProjectTagReleaseOutput struct{ *pulumi.OutputState }

func (ProjectTagReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTagRelease)(nil)).Elem()
}

func (o ProjectTagReleaseOutput) ToProjectTagReleaseOutput() ProjectTagReleaseOutput {
	return o
}

func (o ProjectTagReleaseOutput) ToProjectTagReleaseOutputWithContext(ctx context.Context) ProjectTagReleaseOutput {
	return o
}

func (o ProjectTagReleaseOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectTagRelease] {
	return pulumix.Output[ProjectTagRelease]{
		OutputState: o.OutputState,
	}
}

func (o ProjectTagReleaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagRelease) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectTagReleaseOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTagRelease) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type ProjectTagReleaseArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTagRelease)(nil)).Elem()
}

func (o ProjectTagReleaseArrayOutput) ToProjectTagReleaseArrayOutput() ProjectTagReleaseArrayOutput {
	return o
}

func (o ProjectTagReleaseArrayOutput) ToProjectTagReleaseArrayOutputWithContext(ctx context.Context) ProjectTagReleaseArrayOutput {
	return o
}

func (o ProjectTagReleaseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProjectTagRelease] {
	return pulumix.Output[[]ProjectTagRelease]{
		OutputState: o.OutputState,
	}
}

func (o ProjectTagReleaseArrayOutput) Index(i pulumi.IntInput) ProjectTagReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTagRelease {
		return vs[0].([]ProjectTagRelease)[vs[1].(int)]
	}).(ProjectTagReleaseOutput)
}

type TagProtectionAllowedToCreate struct {
	// Level of access.
	AccessLevel *string `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription *string `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId *int `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId *int `pulumi:"userId"`
}

// TagProtectionAllowedToCreateInput is an input type that accepts TagProtectionAllowedToCreateArgs and TagProtectionAllowedToCreateOutput values.
// You can construct a concrete instance of `TagProtectionAllowedToCreateInput` via:
//
//	TagProtectionAllowedToCreateArgs{...}
type TagProtectionAllowedToCreateInput interface {
	pulumi.Input

	ToTagProtectionAllowedToCreateOutput() TagProtectionAllowedToCreateOutput
	ToTagProtectionAllowedToCreateOutputWithContext(context.Context) TagProtectionAllowedToCreateOutput
}

type TagProtectionAllowedToCreateArgs struct {
	// Level of access.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Readable description of level of access.
	AccessLevelDescription pulumi.StringPtrInput `pulumi:"accessLevelDescription"`
	// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (TagProtectionAllowedToCreateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagProtectionAllowedToCreate)(nil)).Elem()
}

func (i TagProtectionAllowedToCreateArgs) ToTagProtectionAllowedToCreateOutput() TagProtectionAllowedToCreateOutput {
	return i.ToTagProtectionAllowedToCreateOutputWithContext(context.Background())
}

func (i TagProtectionAllowedToCreateArgs) ToTagProtectionAllowedToCreateOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagProtectionAllowedToCreateOutput)
}

func (i TagProtectionAllowedToCreateArgs) ToOutput(ctx context.Context) pulumix.Output[TagProtectionAllowedToCreate] {
	return pulumix.Output[TagProtectionAllowedToCreate]{
		OutputState: i.ToTagProtectionAllowedToCreateOutputWithContext(ctx).OutputState,
	}
}

// TagProtectionAllowedToCreateArrayInput is an input type that accepts TagProtectionAllowedToCreateArray and TagProtectionAllowedToCreateArrayOutput values.
// You can construct a concrete instance of `TagProtectionAllowedToCreateArrayInput` via:
//
//	TagProtectionAllowedToCreateArray{ TagProtectionAllowedToCreateArgs{...} }
type TagProtectionAllowedToCreateArrayInput interface {
	pulumi.Input

	ToTagProtectionAllowedToCreateArrayOutput() TagProtectionAllowedToCreateArrayOutput
	ToTagProtectionAllowedToCreateArrayOutputWithContext(context.Context) TagProtectionAllowedToCreateArrayOutput
}

type TagProtectionAllowedToCreateArray []TagProtectionAllowedToCreateInput

func (TagProtectionAllowedToCreateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagProtectionAllowedToCreate)(nil)).Elem()
}

func (i TagProtectionAllowedToCreateArray) ToTagProtectionAllowedToCreateArrayOutput() TagProtectionAllowedToCreateArrayOutput {
	return i.ToTagProtectionAllowedToCreateArrayOutputWithContext(context.Background())
}

func (i TagProtectionAllowedToCreateArray) ToTagProtectionAllowedToCreateArrayOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagProtectionAllowedToCreateArrayOutput)
}

func (i TagProtectionAllowedToCreateArray) ToOutput(ctx context.Context) pulumix.Output[[]TagProtectionAllowedToCreate] {
	return pulumix.Output[[]TagProtectionAllowedToCreate]{
		OutputState: i.ToTagProtectionAllowedToCreateArrayOutputWithContext(ctx).OutputState,
	}
}

type TagProtectionAllowedToCreateOutput struct{ *pulumi.OutputState }

func (TagProtectionAllowedToCreateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagProtectionAllowedToCreate)(nil)).Elem()
}

func (o TagProtectionAllowedToCreateOutput) ToTagProtectionAllowedToCreateOutput() TagProtectionAllowedToCreateOutput {
	return o
}

func (o TagProtectionAllowedToCreateOutput) ToTagProtectionAllowedToCreateOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateOutput {
	return o
}

func (o TagProtectionAllowedToCreateOutput) ToOutput(ctx context.Context) pulumix.Output[TagProtectionAllowedToCreate] {
	return pulumix.Output[TagProtectionAllowedToCreate]{
		OutputState: o.OutputState,
	}
}

// Level of access.
func (o TagProtectionAllowedToCreateOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Readable description of level of access.
func (o TagProtectionAllowedToCreateOutput) AccessLevelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *string { return v.AccessLevelDescription }).(pulumi.StringPtrOutput)
}

// The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `userId`.
func (o TagProtectionAllowedToCreateOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `groupId`.
func (o TagProtectionAllowedToCreateOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TagProtectionAllowedToCreate) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type TagProtectionAllowedToCreateArrayOutput struct{ *pulumi.OutputState }

func (TagProtectionAllowedToCreateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagProtectionAllowedToCreate)(nil)).Elem()
}

func (o TagProtectionAllowedToCreateArrayOutput) ToTagProtectionAllowedToCreateArrayOutput() TagProtectionAllowedToCreateArrayOutput {
	return o
}

func (o TagProtectionAllowedToCreateArrayOutput) ToTagProtectionAllowedToCreateArrayOutputWithContext(ctx context.Context) TagProtectionAllowedToCreateArrayOutput {
	return o
}

func (o TagProtectionAllowedToCreateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TagProtectionAllowedToCreate] {
	return pulumix.Output[[]TagProtectionAllowedToCreate]{
		OutputState: o.OutputState,
	}
}

func (o TagProtectionAllowedToCreateArrayOutput) Index(i pulumi.IntInput) TagProtectionAllowedToCreateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagProtectionAllowedToCreate {
		return vs[0].([]TagProtectionAllowedToCreate)[vs[1].(int)]
	}).(TagProtectionAllowedToCreateOutput)
}

type GetBranchCommit struct {
	AuthorEmail    string   `pulumi:"authorEmail"`
	AuthorName     string   `pulumi:"authorName"`
	AuthoredDate   string   `pulumi:"authoredDate"`
	CommittedDate  string   `pulumi:"committedDate"`
	CommitterEmail string   `pulumi:"committerEmail"`
	CommitterName  string   `pulumi:"committerName"`
	Id             string   `pulumi:"id"`
	Message        string   `pulumi:"message"`
	ParentIds      []string `pulumi:"parentIds"`
	ShortId        string   `pulumi:"shortId"`
	Title          string   `pulumi:"title"`
}

// GetBranchCommitInput is an input type that accepts GetBranchCommitArgs and GetBranchCommitOutput values.
// You can construct a concrete instance of `GetBranchCommitInput` via:
//
//	GetBranchCommitArgs{...}
type GetBranchCommitInput interface {
	pulumi.Input

	ToGetBranchCommitOutput() GetBranchCommitOutput
	ToGetBranchCommitOutputWithContext(context.Context) GetBranchCommitOutput
}

type GetBranchCommitArgs struct {
	AuthorEmail    pulumi.StringInput      `pulumi:"authorEmail"`
	AuthorName     pulumi.StringInput      `pulumi:"authorName"`
	AuthoredDate   pulumi.StringInput      `pulumi:"authoredDate"`
	CommittedDate  pulumi.StringInput      `pulumi:"committedDate"`
	CommitterEmail pulumi.StringInput      `pulumi:"committerEmail"`
	CommitterName  pulumi.StringInput      `pulumi:"committerName"`
	Id             pulumi.StringInput      `pulumi:"id"`
	Message        pulumi.StringInput      `pulumi:"message"`
	ParentIds      pulumi.StringArrayInput `pulumi:"parentIds"`
	ShortId        pulumi.StringInput      `pulumi:"shortId"`
	Title          pulumi.StringInput      `pulumi:"title"`
}

func (GetBranchCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchCommit)(nil)).Elem()
}

func (i GetBranchCommitArgs) ToGetBranchCommitOutput() GetBranchCommitOutput {
	return i.ToGetBranchCommitOutputWithContext(context.Background())
}

func (i GetBranchCommitArgs) ToGetBranchCommitOutputWithContext(ctx context.Context) GetBranchCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchCommitOutput)
}

func (i GetBranchCommitArgs) ToOutput(ctx context.Context) pulumix.Output[GetBranchCommit] {
	return pulumix.Output[GetBranchCommit]{
		OutputState: i.ToGetBranchCommitOutputWithContext(ctx).OutputState,
	}
}

// GetBranchCommitArrayInput is an input type that accepts GetBranchCommitArray and GetBranchCommitArrayOutput values.
// You can construct a concrete instance of `GetBranchCommitArrayInput` via:
//
//	GetBranchCommitArray{ GetBranchCommitArgs{...} }
type GetBranchCommitArrayInput interface {
	pulumi.Input

	ToGetBranchCommitArrayOutput() GetBranchCommitArrayOutput
	ToGetBranchCommitArrayOutputWithContext(context.Context) GetBranchCommitArrayOutput
}

type GetBranchCommitArray []GetBranchCommitInput

func (GetBranchCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchCommit)(nil)).Elem()
}

func (i GetBranchCommitArray) ToGetBranchCommitArrayOutput() GetBranchCommitArrayOutput {
	return i.ToGetBranchCommitArrayOutputWithContext(context.Background())
}

func (i GetBranchCommitArray) ToGetBranchCommitArrayOutputWithContext(ctx context.Context) GetBranchCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchCommitArrayOutput)
}

func (i GetBranchCommitArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBranchCommit] {
	return pulumix.Output[[]GetBranchCommit]{
		OutputState: i.ToGetBranchCommitArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBranchCommitOutput struct{ *pulumi.OutputState }

func (GetBranchCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchCommit)(nil)).Elem()
}

func (o GetBranchCommitOutput) ToGetBranchCommitOutput() GetBranchCommitOutput {
	return o
}

func (o GetBranchCommitOutput) ToGetBranchCommitOutputWithContext(ctx context.Context) GetBranchCommitOutput {
	return o
}

func (o GetBranchCommitOutput) ToOutput(ctx context.Context) pulumix.Output[GetBranchCommit] {
	return pulumix.Output[GetBranchCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetBranchCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBranchCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

func (o GetBranchCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

func (o GetBranchCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetBranchCommitArrayOutput struct{ *pulumi.OutputState }

func (GetBranchCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchCommit)(nil)).Elem()
}

func (o GetBranchCommitArrayOutput) ToGetBranchCommitArrayOutput() GetBranchCommitArrayOutput {
	return o
}

func (o GetBranchCommitArrayOutput) ToGetBranchCommitArrayOutputWithContext(ctx context.Context) GetBranchCommitArrayOutput {
	return o
}

func (o GetBranchCommitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBranchCommit] {
	return pulumix.Output[[]GetBranchCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetBranchCommitArrayOutput) Index(i pulumi.IntInput) GetBranchCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBranchCommit {
		return vs[0].([]GetBranchCommit)[vs[1].(int)]
	}).(GetBranchCommitOutput)
}

type GetClusterAgentsClusterAgent struct {
	AgentId         int    `pulumi:"agentId"`
	CreatedAt       string `pulumi:"createdAt"`
	CreatedByUserId int    `pulumi:"createdByUserId"`
	Name            string `pulumi:"name"`
	Project         string `pulumi:"project"`
}

// GetClusterAgentsClusterAgentInput is an input type that accepts GetClusterAgentsClusterAgentArgs and GetClusterAgentsClusterAgentOutput values.
// You can construct a concrete instance of `GetClusterAgentsClusterAgentInput` via:
//
//	GetClusterAgentsClusterAgentArgs{...}
type GetClusterAgentsClusterAgentInput interface {
	pulumi.Input

	ToGetClusterAgentsClusterAgentOutput() GetClusterAgentsClusterAgentOutput
	ToGetClusterAgentsClusterAgentOutputWithContext(context.Context) GetClusterAgentsClusterAgentOutput
}

type GetClusterAgentsClusterAgentArgs struct {
	AgentId         pulumi.IntInput    `pulumi:"agentId"`
	CreatedAt       pulumi.StringInput `pulumi:"createdAt"`
	CreatedByUserId pulumi.IntInput    `pulumi:"createdByUserId"`
	Name            pulumi.StringInput `pulumi:"name"`
	Project         pulumi.StringInput `pulumi:"project"`
}

func (GetClusterAgentsClusterAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (i GetClusterAgentsClusterAgentArgs) ToGetClusterAgentsClusterAgentOutput() GetClusterAgentsClusterAgentOutput {
	return i.ToGetClusterAgentsClusterAgentOutputWithContext(context.Background())
}

func (i GetClusterAgentsClusterAgentArgs) ToGetClusterAgentsClusterAgentOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterAgentsClusterAgentOutput)
}

func (i GetClusterAgentsClusterAgentArgs) ToOutput(ctx context.Context) pulumix.Output[GetClusterAgentsClusterAgent] {
	return pulumix.Output[GetClusterAgentsClusterAgent]{
		OutputState: i.ToGetClusterAgentsClusterAgentOutputWithContext(ctx).OutputState,
	}
}

// GetClusterAgentsClusterAgentArrayInput is an input type that accepts GetClusterAgentsClusterAgentArray and GetClusterAgentsClusterAgentArrayOutput values.
// You can construct a concrete instance of `GetClusterAgentsClusterAgentArrayInput` via:
//
//	GetClusterAgentsClusterAgentArray{ GetClusterAgentsClusterAgentArgs{...} }
type GetClusterAgentsClusterAgentArrayInput interface {
	pulumi.Input

	ToGetClusterAgentsClusterAgentArrayOutput() GetClusterAgentsClusterAgentArrayOutput
	ToGetClusterAgentsClusterAgentArrayOutputWithContext(context.Context) GetClusterAgentsClusterAgentArrayOutput
}

type GetClusterAgentsClusterAgentArray []GetClusterAgentsClusterAgentInput

func (GetClusterAgentsClusterAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (i GetClusterAgentsClusterAgentArray) ToGetClusterAgentsClusterAgentArrayOutput() GetClusterAgentsClusterAgentArrayOutput {
	return i.ToGetClusterAgentsClusterAgentArrayOutputWithContext(context.Background())
}

func (i GetClusterAgentsClusterAgentArray) ToGetClusterAgentsClusterAgentArrayOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterAgentsClusterAgentArrayOutput)
}

func (i GetClusterAgentsClusterAgentArray) ToOutput(ctx context.Context) pulumix.Output[[]GetClusterAgentsClusterAgent] {
	return pulumix.Output[[]GetClusterAgentsClusterAgent]{
		OutputState: i.ToGetClusterAgentsClusterAgentArrayOutputWithContext(ctx).OutputState,
	}
}

type GetClusterAgentsClusterAgentOutput struct{ *pulumi.OutputState }

func (GetClusterAgentsClusterAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (o GetClusterAgentsClusterAgentOutput) ToGetClusterAgentsClusterAgentOutput() GetClusterAgentsClusterAgentOutput {
	return o
}

func (o GetClusterAgentsClusterAgentOutput) ToGetClusterAgentsClusterAgentOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentOutput {
	return o
}

func (o GetClusterAgentsClusterAgentOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterAgentsClusterAgent] {
	return pulumix.Output[GetClusterAgentsClusterAgent]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterAgentsClusterAgentOutput) AgentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) int { return v.AgentId }).(pulumi.IntOutput)
}

func (o GetClusterAgentsClusterAgentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetClusterAgentsClusterAgentOutput) CreatedByUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) int { return v.CreatedByUserId }).(pulumi.IntOutput)
}

func (o GetClusterAgentsClusterAgentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterAgentsClusterAgentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAgentsClusterAgent) string { return v.Project }).(pulumi.StringOutput)
}

type GetClusterAgentsClusterAgentArrayOutput struct{ *pulumi.OutputState }

func (GetClusterAgentsClusterAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterAgentsClusterAgent)(nil)).Elem()
}

func (o GetClusterAgentsClusterAgentArrayOutput) ToGetClusterAgentsClusterAgentArrayOutput() GetClusterAgentsClusterAgentArrayOutput {
	return o
}

func (o GetClusterAgentsClusterAgentArrayOutput) ToGetClusterAgentsClusterAgentArrayOutputWithContext(ctx context.Context) GetClusterAgentsClusterAgentArrayOutput {
	return o
}

func (o GetClusterAgentsClusterAgentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetClusterAgentsClusterAgent] {
	return pulumix.Output[[]GetClusterAgentsClusterAgent]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterAgentsClusterAgentArrayOutput) Index(i pulumi.IntInput) GetClusterAgentsClusterAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterAgentsClusterAgent {
		return vs[0].([]GetClusterAgentsClusterAgent)[vs[1].(int)]
	}).(GetClusterAgentsClusterAgentOutput)
}

type GetGroupHooksHook struct {
	ConfidentialIssuesEvents bool   `pulumi:"confidentialIssuesEvents"`
	ConfidentialNoteEvents   bool   `pulumi:"confidentialNoteEvents"`
	DeploymentEvents         bool   `pulumi:"deploymentEvents"`
	EnableSslVerification    bool   `pulumi:"enableSslVerification"`
	Group                    string `pulumi:"group"`
	GroupId                  int    `pulumi:"groupId"`
	HookId                   int    `pulumi:"hookId"`
	IssuesEvents             bool   `pulumi:"issuesEvents"`
	JobEvents                bool   `pulumi:"jobEvents"`
	MergeRequestsEvents      bool   `pulumi:"mergeRequestsEvents"`
	NoteEvents               bool   `pulumi:"noteEvents"`
	PipelineEvents           bool   `pulumi:"pipelineEvents"`
	PushEvents               bool   `pulumi:"pushEvents"`
	PushEventsBranchFilter   string `pulumi:"pushEventsBranchFilter"`
	ReleasesEvents           bool   `pulumi:"releasesEvents"`
	SubgroupEvents           bool   `pulumi:"subgroupEvents"`
	TagPushEvents            bool   `pulumi:"tagPushEvents"`
	Token                    string `pulumi:"token"`
	Url                      string `pulumi:"url"`
	WikiPageEvents           bool   `pulumi:"wikiPageEvents"`
}

// GetGroupHooksHookInput is an input type that accepts GetGroupHooksHookArgs and GetGroupHooksHookOutput values.
// You can construct a concrete instance of `GetGroupHooksHookInput` via:
//
//	GetGroupHooksHookArgs{...}
type GetGroupHooksHookInput interface {
	pulumi.Input

	ToGetGroupHooksHookOutput() GetGroupHooksHookOutput
	ToGetGroupHooksHookOutputWithContext(context.Context) GetGroupHooksHookOutput
}

type GetGroupHooksHookArgs struct {
	ConfidentialIssuesEvents pulumi.BoolInput   `pulumi:"confidentialIssuesEvents"`
	ConfidentialNoteEvents   pulumi.BoolInput   `pulumi:"confidentialNoteEvents"`
	DeploymentEvents         pulumi.BoolInput   `pulumi:"deploymentEvents"`
	EnableSslVerification    pulumi.BoolInput   `pulumi:"enableSslVerification"`
	Group                    pulumi.StringInput `pulumi:"group"`
	GroupId                  pulumi.IntInput    `pulumi:"groupId"`
	HookId                   pulumi.IntInput    `pulumi:"hookId"`
	IssuesEvents             pulumi.BoolInput   `pulumi:"issuesEvents"`
	JobEvents                pulumi.BoolInput   `pulumi:"jobEvents"`
	MergeRequestsEvents      pulumi.BoolInput   `pulumi:"mergeRequestsEvents"`
	NoteEvents               pulumi.BoolInput   `pulumi:"noteEvents"`
	PipelineEvents           pulumi.BoolInput   `pulumi:"pipelineEvents"`
	PushEvents               pulumi.BoolInput   `pulumi:"pushEvents"`
	PushEventsBranchFilter   pulumi.StringInput `pulumi:"pushEventsBranchFilter"`
	ReleasesEvents           pulumi.BoolInput   `pulumi:"releasesEvents"`
	SubgroupEvents           pulumi.BoolInput   `pulumi:"subgroupEvents"`
	TagPushEvents            pulumi.BoolInput   `pulumi:"tagPushEvents"`
	Token                    pulumi.StringInput `pulumi:"token"`
	Url                      pulumi.StringInput `pulumi:"url"`
	WikiPageEvents           pulumi.BoolInput   `pulumi:"wikiPageEvents"`
}

func (GetGroupHooksHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupHooksHook)(nil)).Elem()
}

func (i GetGroupHooksHookArgs) ToGetGroupHooksHookOutput() GetGroupHooksHookOutput {
	return i.ToGetGroupHooksHookOutputWithContext(context.Background())
}

func (i GetGroupHooksHookArgs) ToGetGroupHooksHookOutputWithContext(ctx context.Context) GetGroupHooksHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupHooksHookOutput)
}

func (i GetGroupHooksHookArgs) ToOutput(ctx context.Context) pulumix.Output[GetGroupHooksHook] {
	return pulumix.Output[GetGroupHooksHook]{
		OutputState: i.ToGetGroupHooksHookOutputWithContext(ctx).OutputState,
	}
}

// GetGroupHooksHookArrayInput is an input type that accepts GetGroupHooksHookArray and GetGroupHooksHookArrayOutput values.
// You can construct a concrete instance of `GetGroupHooksHookArrayInput` via:
//
//	GetGroupHooksHookArray{ GetGroupHooksHookArgs{...} }
type GetGroupHooksHookArrayInput interface {
	pulumi.Input

	ToGetGroupHooksHookArrayOutput() GetGroupHooksHookArrayOutput
	ToGetGroupHooksHookArrayOutputWithContext(context.Context) GetGroupHooksHookArrayOutput
}

type GetGroupHooksHookArray []GetGroupHooksHookInput

func (GetGroupHooksHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupHooksHook)(nil)).Elem()
}

func (i GetGroupHooksHookArray) ToGetGroupHooksHookArrayOutput() GetGroupHooksHookArrayOutput {
	return i.ToGetGroupHooksHookArrayOutputWithContext(context.Background())
}

func (i GetGroupHooksHookArray) ToGetGroupHooksHookArrayOutputWithContext(ctx context.Context) GetGroupHooksHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupHooksHookArrayOutput)
}

func (i GetGroupHooksHookArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupHooksHook] {
	return pulumix.Output[[]GetGroupHooksHook]{
		OutputState: i.ToGetGroupHooksHookArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGroupHooksHookOutput struct{ *pulumi.OutputState }

func (GetGroupHooksHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupHooksHook)(nil)).Elem()
}

func (o GetGroupHooksHookOutput) ToGetGroupHooksHookOutput() GetGroupHooksHookOutput {
	return o
}

func (o GetGroupHooksHookOutput) ToGetGroupHooksHookOutputWithContext(ctx context.Context) GetGroupHooksHookOutput {
	return o
}

func (o GetGroupHooksHookOutput) ToOutput(ctx context.Context) pulumix.Output[GetGroupHooksHook] {
	return pulumix.Output[GetGroupHooksHook]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupHooksHookOutput) ConfidentialIssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.ConfidentialIssuesEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) ConfidentialNoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.ConfidentialNoteEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) DeploymentEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.DeploymentEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) EnableSslVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.EnableSslVerification }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.Group }).(pulumi.StringOutput)
}

func (o GetGroupHooksHookOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupHooksHook) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetGroupHooksHookOutput) HookId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupHooksHook) int { return v.HookId }).(pulumi.IntOutput)
}

func (o GetGroupHooksHookOutput) IssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.IssuesEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) JobEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.JobEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) MergeRequestsEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.MergeRequestsEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) NoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.NoteEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) PipelineEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.PipelineEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) PushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.PushEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) PushEventsBranchFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.PushEventsBranchFilter }).(pulumi.StringOutput)
}

func (o GetGroupHooksHookOutput) ReleasesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.ReleasesEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) SubgroupEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.SubgroupEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) TagPushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.TagPushEvents }).(pulumi.BoolOutput)
}

func (o GetGroupHooksHookOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.Token }).(pulumi.StringOutput)
}

func (o GetGroupHooksHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupHooksHook) string { return v.Url }).(pulumi.StringOutput)
}

func (o GetGroupHooksHookOutput) WikiPageEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupHooksHook) bool { return v.WikiPageEvents }).(pulumi.BoolOutput)
}

type GetGroupHooksHookArrayOutput struct{ *pulumi.OutputState }

func (GetGroupHooksHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupHooksHook)(nil)).Elem()
}

func (o GetGroupHooksHookArrayOutput) ToGetGroupHooksHookArrayOutput() GetGroupHooksHookArrayOutput {
	return o
}

func (o GetGroupHooksHookArrayOutput) ToGetGroupHooksHookArrayOutputWithContext(ctx context.Context) GetGroupHooksHookArrayOutput {
	return o
}

func (o GetGroupHooksHookArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupHooksHook] {
	return pulumix.Output[[]GetGroupHooksHook]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupHooksHookArrayOutput) Index(i pulumi.IntInput) GetGroupHooksHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupHooksHook {
		return vs[0].([]GetGroupHooksHook)[vs[1].(int)]
	}).(GetGroupHooksHookOutput)
}

type GetGroupMembershipMember struct {
	AccessLevel string `pulumi:"accessLevel"`
	AvatarUrl   string `pulumi:"avatarUrl"`
	ExpiresAt   string `pulumi:"expiresAt"`
	Id          int    `pulumi:"id"`
	Name        string `pulumi:"name"`
	State       string `pulumi:"state"`
	Username    string `pulumi:"username"`
	WebUrl      string `pulumi:"webUrl"`
}

// GetGroupMembershipMemberInput is an input type that accepts GetGroupMembershipMemberArgs and GetGroupMembershipMemberOutput values.
// You can construct a concrete instance of `GetGroupMembershipMemberInput` via:
//
//	GetGroupMembershipMemberArgs{...}
type GetGroupMembershipMemberInput interface {
	pulumi.Input

	ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput
	ToGetGroupMembershipMemberOutputWithContext(context.Context) GetGroupMembershipMemberOutput
}

type GetGroupMembershipMemberArgs struct {
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	AvatarUrl   pulumi.StringInput `pulumi:"avatarUrl"`
	ExpiresAt   pulumi.StringInput `pulumi:"expiresAt"`
	Id          pulumi.IntInput    `pulumi:"id"`
	Name        pulumi.StringInput `pulumi:"name"`
	State       pulumi.StringInput `pulumi:"state"`
	Username    pulumi.StringInput `pulumi:"username"`
	WebUrl      pulumi.StringInput `pulumi:"webUrl"`
}

func (GetGroupMembershipMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipMember)(nil)).Elem()
}

func (i GetGroupMembershipMemberArgs) ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput {
	return i.ToGetGroupMembershipMemberOutputWithContext(context.Background())
}

func (i GetGroupMembershipMemberArgs) ToGetGroupMembershipMemberOutputWithContext(ctx context.Context) GetGroupMembershipMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipMemberOutput)
}

func (i GetGroupMembershipMemberArgs) ToOutput(ctx context.Context) pulumix.Output[GetGroupMembershipMember] {
	return pulumix.Output[GetGroupMembershipMember]{
		OutputState: i.ToGetGroupMembershipMemberOutputWithContext(ctx).OutputState,
	}
}

// GetGroupMembershipMemberArrayInput is an input type that accepts GetGroupMembershipMemberArray and GetGroupMembershipMemberArrayOutput values.
// You can construct a concrete instance of `GetGroupMembershipMemberArrayInput` via:
//
//	GetGroupMembershipMemberArray{ GetGroupMembershipMemberArgs{...} }
type GetGroupMembershipMemberArrayInput interface {
	pulumi.Input

	ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput
	ToGetGroupMembershipMemberArrayOutputWithContext(context.Context) GetGroupMembershipMemberArrayOutput
}

type GetGroupMembershipMemberArray []GetGroupMembershipMemberInput

func (GetGroupMembershipMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipMember)(nil)).Elem()
}

func (i GetGroupMembershipMemberArray) ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput {
	return i.ToGetGroupMembershipMemberArrayOutputWithContext(context.Background())
}

func (i GetGroupMembershipMemberArray) ToGetGroupMembershipMemberArrayOutputWithContext(ctx context.Context) GetGroupMembershipMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembershipMemberArrayOutput)
}

func (i GetGroupMembershipMemberArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupMembershipMember] {
	return pulumix.Output[[]GetGroupMembershipMember]{
		OutputState: i.ToGetGroupMembershipMemberArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGroupMembershipMemberOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembershipMember)(nil)).Elem()
}

func (o GetGroupMembershipMemberOutput) ToGetGroupMembershipMemberOutput() GetGroupMembershipMemberOutput {
	return o
}

func (o GetGroupMembershipMemberOutput) ToGetGroupMembershipMemberOutputWithContext(ctx context.Context) GetGroupMembershipMemberOutput {
	return o
}

func (o GetGroupMembershipMemberOutput) ToOutput(ctx context.Context) pulumix.Output[GetGroupMembershipMember] {
	return pulumix.Output[GetGroupMembershipMember]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupMembershipMemberOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.AccessLevel }).(pulumi.StringOutput)
}

func (o GetGroupMembershipMemberOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetGroupMembershipMemberOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

func (o GetGroupMembershipMemberOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetGroupMembershipMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGroupMembershipMemberOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.State }).(pulumi.StringOutput)
}

func (o GetGroupMembershipMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.Username }).(pulumi.StringOutput)
}

func (o GetGroupMembershipMemberOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembershipMember) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetGroupMembershipMemberArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembershipMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembershipMember)(nil)).Elem()
}

func (o GetGroupMembershipMemberArrayOutput) ToGetGroupMembershipMemberArrayOutput() GetGroupMembershipMemberArrayOutput {
	return o
}

func (o GetGroupMembershipMemberArrayOutput) ToGetGroupMembershipMemberArrayOutputWithContext(ctx context.Context) GetGroupMembershipMemberArrayOutput {
	return o
}

func (o GetGroupMembershipMemberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupMembershipMember] {
	return pulumix.Output[[]GetGroupMembershipMember]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupMembershipMemberArrayOutput) Index(i pulumi.IntInput) GetGroupMembershipMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembershipMember {
		return vs[0].([]GetGroupMembershipMember)[vs[1].(int)]
	}).(GetGroupMembershipMemberOutput)
}

type GetGroupSubgroupsSubgroup struct {
	AutoDevopsEnabled              bool              `pulumi:"autoDevopsEnabled"`
	AvatarUrl                      string            `pulumi:"avatarUrl"`
	CreatedAt                      string            `pulumi:"createdAt"`
	DefaultBranchProtection        int               `pulumi:"defaultBranchProtection"`
	Description                    string            `pulumi:"description"`
	EmailsDisabled                 bool              `pulumi:"emailsDisabled"`
	FileTemplateProjectId          int               `pulumi:"fileTemplateProjectId"`
	FullName                       string            `pulumi:"fullName"`
	FullPath                       string            `pulumi:"fullPath"`
	GroupId                        int               `pulumi:"groupId"`
	IpRestrictionRanges            string            `pulumi:"ipRestrictionRanges"`
	LfsEnabled                     bool              `pulumi:"lfsEnabled"`
	MentionsDisabled               bool              `pulumi:"mentionsDisabled"`
	Name                           string            `pulumi:"name"`
	ParentId                       int               `pulumi:"parentId"`
	Path                           string            `pulumi:"path"`
	ProjectCreationLevel           string            `pulumi:"projectCreationLevel"`
	RequestAccessEnabled           bool              `pulumi:"requestAccessEnabled"`
	RequireTwoFactorAuthentication bool              `pulumi:"requireTwoFactorAuthentication"`
	ShareWithGroupLock             bool              `pulumi:"shareWithGroupLock"`
	Statistics                     map[string]string `pulumi:"statistics"`
	SubgroupCreationLevel          string            `pulumi:"subgroupCreationLevel"`
	TwoFactorGracePeriod           int               `pulumi:"twoFactorGracePeriod"`
	Visibility                     string            `pulumi:"visibility"`
	WebUrl                         string            `pulumi:"webUrl"`
	WikiAccessLevel                string            `pulumi:"wikiAccessLevel"`
}

// GetGroupSubgroupsSubgroupInput is an input type that accepts GetGroupSubgroupsSubgroupArgs and GetGroupSubgroupsSubgroupOutput values.
// You can construct a concrete instance of `GetGroupSubgroupsSubgroupInput` via:
//
//	GetGroupSubgroupsSubgroupArgs{...}
type GetGroupSubgroupsSubgroupInput interface {
	pulumi.Input

	ToGetGroupSubgroupsSubgroupOutput() GetGroupSubgroupsSubgroupOutput
	ToGetGroupSubgroupsSubgroupOutputWithContext(context.Context) GetGroupSubgroupsSubgroupOutput
}

type GetGroupSubgroupsSubgroupArgs struct {
	AutoDevopsEnabled              pulumi.BoolInput      `pulumi:"autoDevopsEnabled"`
	AvatarUrl                      pulumi.StringInput    `pulumi:"avatarUrl"`
	CreatedAt                      pulumi.StringInput    `pulumi:"createdAt"`
	DefaultBranchProtection        pulumi.IntInput       `pulumi:"defaultBranchProtection"`
	Description                    pulumi.StringInput    `pulumi:"description"`
	EmailsDisabled                 pulumi.BoolInput      `pulumi:"emailsDisabled"`
	FileTemplateProjectId          pulumi.IntInput       `pulumi:"fileTemplateProjectId"`
	FullName                       pulumi.StringInput    `pulumi:"fullName"`
	FullPath                       pulumi.StringInput    `pulumi:"fullPath"`
	GroupId                        pulumi.IntInput       `pulumi:"groupId"`
	IpRestrictionRanges            pulumi.StringInput    `pulumi:"ipRestrictionRanges"`
	LfsEnabled                     pulumi.BoolInput      `pulumi:"lfsEnabled"`
	MentionsDisabled               pulumi.BoolInput      `pulumi:"mentionsDisabled"`
	Name                           pulumi.StringInput    `pulumi:"name"`
	ParentId                       pulumi.IntInput       `pulumi:"parentId"`
	Path                           pulumi.StringInput    `pulumi:"path"`
	ProjectCreationLevel           pulumi.StringInput    `pulumi:"projectCreationLevel"`
	RequestAccessEnabled           pulumi.BoolInput      `pulumi:"requestAccessEnabled"`
	RequireTwoFactorAuthentication pulumi.BoolInput      `pulumi:"requireTwoFactorAuthentication"`
	ShareWithGroupLock             pulumi.BoolInput      `pulumi:"shareWithGroupLock"`
	Statistics                     pulumi.StringMapInput `pulumi:"statistics"`
	SubgroupCreationLevel          pulumi.StringInput    `pulumi:"subgroupCreationLevel"`
	TwoFactorGracePeriod           pulumi.IntInput       `pulumi:"twoFactorGracePeriod"`
	Visibility                     pulumi.StringInput    `pulumi:"visibility"`
	WebUrl                         pulumi.StringInput    `pulumi:"webUrl"`
	WikiAccessLevel                pulumi.StringInput    `pulumi:"wikiAccessLevel"`
}

func (GetGroupSubgroupsSubgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (i GetGroupSubgroupsSubgroupArgs) ToGetGroupSubgroupsSubgroupOutput() GetGroupSubgroupsSubgroupOutput {
	return i.ToGetGroupSubgroupsSubgroupOutputWithContext(context.Background())
}

func (i GetGroupSubgroupsSubgroupArgs) ToGetGroupSubgroupsSubgroupOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupSubgroupsSubgroupOutput)
}

func (i GetGroupSubgroupsSubgroupArgs) ToOutput(ctx context.Context) pulumix.Output[GetGroupSubgroupsSubgroup] {
	return pulumix.Output[GetGroupSubgroupsSubgroup]{
		OutputState: i.ToGetGroupSubgroupsSubgroupOutputWithContext(ctx).OutputState,
	}
}

// GetGroupSubgroupsSubgroupArrayInput is an input type that accepts GetGroupSubgroupsSubgroupArray and GetGroupSubgroupsSubgroupArrayOutput values.
// You can construct a concrete instance of `GetGroupSubgroupsSubgroupArrayInput` via:
//
//	GetGroupSubgroupsSubgroupArray{ GetGroupSubgroupsSubgroupArgs{...} }
type GetGroupSubgroupsSubgroupArrayInput interface {
	pulumi.Input

	ToGetGroupSubgroupsSubgroupArrayOutput() GetGroupSubgroupsSubgroupArrayOutput
	ToGetGroupSubgroupsSubgroupArrayOutputWithContext(context.Context) GetGroupSubgroupsSubgroupArrayOutput
}

type GetGroupSubgroupsSubgroupArray []GetGroupSubgroupsSubgroupInput

func (GetGroupSubgroupsSubgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (i GetGroupSubgroupsSubgroupArray) ToGetGroupSubgroupsSubgroupArrayOutput() GetGroupSubgroupsSubgroupArrayOutput {
	return i.ToGetGroupSubgroupsSubgroupArrayOutputWithContext(context.Background())
}

func (i GetGroupSubgroupsSubgroupArray) ToGetGroupSubgroupsSubgroupArrayOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupSubgroupsSubgroupArrayOutput)
}

func (i GetGroupSubgroupsSubgroupArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupSubgroupsSubgroup] {
	return pulumix.Output[[]GetGroupSubgroupsSubgroup]{
		OutputState: i.ToGetGroupSubgroupsSubgroupArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGroupSubgroupsSubgroupOutput struct{ *pulumi.OutputState }

func (GetGroupSubgroupsSubgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (o GetGroupSubgroupsSubgroupOutput) ToGetGroupSubgroupsSubgroupOutput() GetGroupSubgroupsSubgroupOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupOutput) ToGetGroupSubgroupsSubgroupOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetGroupSubgroupsSubgroup] {
	return pulumix.Output[GetGroupSubgroupsSubgroup]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupSubgroupsSubgroupOutput) AutoDevopsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.AutoDevopsEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) DefaultBranchProtection() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.DefaultBranchProtection }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) EmailsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.EmailsDisabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) FileTemplateProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.FileTemplateProjectId }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.FullName }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.FullPath }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) IpRestrictionRanges() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.IpRestrictionRanges }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) LfsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.LfsEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) MentionsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.MentionsDisabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) ParentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.ParentId }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) ProjectCreationLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.ProjectCreationLevel }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) RequestAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.RequestAccessEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) RequireTwoFactorAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.RequireTwoFactorAuthentication }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) ShareWithGroupLock() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) bool { return v.ShareWithGroupLock }).(pulumi.BoolOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Statistics() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) map[string]string { return v.Statistics }).(pulumi.StringMapOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) SubgroupCreationLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.SubgroupCreationLevel }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) TwoFactorGracePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) int { return v.TwoFactorGracePeriod }).(pulumi.IntOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.Visibility }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.WebUrl }).(pulumi.StringOutput)
}

func (o GetGroupSubgroupsSubgroupOutput) WikiAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupSubgroupsSubgroup) string { return v.WikiAccessLevel }).(pulumi.StringOutput)
}

type GetGroupSubgroupsSubgroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupSubgroupsSubgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupSubgroupsSubgroup)(nil)).Elem()
}

func (o GetGroupSubgroupsSubgroupArrayOutput) ToGetGroupSubgroupsSubgroupArrayOutput() GetGroupSubgroupsSubgroupArrayOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupArrayOutput) ToGetGroupSubgroupsSubgroupArrayOutputWithContext(ctx context.Context) GetGroupSubgroupsSubgroupArrayOutput {
	return o
}

func (o GetGroupSubgroupsSubgroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupSubgroupsSubgroup] {
	return pulumix.Output[[]GetGroupSubgroupsSubgroup]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupSubgroupsSubgroupArrayOutput) Index(i pulumi.IntInput) GetGroupSubgroupsSubgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupSubgroupsSubgroup {
		return vs[0].([]GetGroupSubgroupsSubgroup)[vs[1].(int)]
	}).(GetGroupSubgroupsSubgroupOutput)
}

type GetGroupVariablesVariable struct {
	EnvironmentScope string `pulumi:"environmentScope"`
	Group            string `pulumi:"group"`
	Key              string `pulumi:"key"`
	Masked           bool   `pulumi:"masked"`
	Protected        bool   `pulumi:"protected"`
	Raw              bool   `pulumi:"raw"`
	Value            string `pulumi:"value"`
	VariableType     string `pulumi:"variableType"`
}

// GetGroupVariablesVariableInput is an input type that accepts GetGroupVariablesVariableArgs and GetGroupVariablesVariableOutput values.
// You can construct a concrete instance of `GetGroupVariablesVariableInput` via:
//
//	GetGroupVariablesVariableArgs{...}
type GetGroupVariablesVariableInput interface {
	pulumi.Input

	ToGetGroupVariablesVariableOutput() GetGroupVariablesVariableOutput
	ToGetGroupVariablesVariableOutputWithContext(context.Context) GetGroupVariablesVariableOutput
}

type GetGroupVariablesVariableArgs struct {
	EnvironmentScope pulumi.StringInput `pulumi:"environmentScope"`
	Group            pulumi.StringInput `pulumi:"group"`
	Key              pulumi.StringInput `pulumi:"key"`
	Masked           pulumi.BoolInput   `pulumi:"masked"`
	Protected        pulumi.BoolInput   `pulumi:"protected"`
	Raw              pulumi.BoolInput   `pulumi:"raw"`
	Value            pulumi.StringInput `pulumi:"value"`
	VariableType     pulumi.StringInput `pulumi:"variableType"`
}

func (GetGroupVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupVariablesVariable)(nil)).Elem()
}

func (i GetGroupVariablesVariableArgs) ToGetGroupVariablesVariableOutput() GetGroupVariablesVariableOutput {
	return i.ToGetGroupVariablesVariableOutputWithContext(context.Background())
}

func (i GetGroupVariablesVariableArgs) ToGetGroupVariablesVariableOutputWithContext(ctx context.Context) GetGroupVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupVariablesVariableOutput)
}

func (i GetGroupVariablesVariableArgs) ToOutput(ctx context.Context) pulumix.Output[GetGroupVariablesVariable] {
	return pulumix.Output[GetGroupVariablesVariable]{
		OutputState: i.ToGetGroupVariablesVariableOutputWithContext(ctx).OutputState,
	}
}

// GetGroupVariablesVariableArrayInput is an input type that accepts GetGroupVariablesVariableArray and GetGroupVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetGroupVariablesVariableArrayInput` via:
//
//	GetGroupVariablesVariableArray{ GetGroupVariablesVariableArgs{...} }
type GetGroupVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetGroupVariablesVariableArrayOutput() GetGroupVariablesVariableArrayOutput
	ToGetGroupVariablesVariableArrayOutputWithContext(context.Context) GetGroupVariablesVariableArrayOutput
}

type GetGroupVariablesVariableArray []GetGroupVariablesVariableInput

func (GetGroupVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupVariablesVariable)(nil)).Elem()
}

func (i GetGroupVariablesVariableArray) ToGetGroupVariablesVariableArrayOutput() GetGroupVariablesVariableArrayOutput {
	return i.ToGetGroupVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetGroupVariablesVariableArray) ToGetGroupVariablesVariableArrayOutputWithContext(ctx context.Context) GetGroupVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupVariablesVariableArrayOutput)
}

func (i GetGroupVariablesVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupVariablesVariable] {
	return pulumix.Output[[]GetGroupVariablesVariable]{
		OutputState: i.ToGetGroupVariablesVariableArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGroupVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetGroupVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupVariablesVariable)(nil)).Elem()
}

func (o GetGroupVariablesVariableOutput) ToGetGroupVariablesVariableOutput() GetGroupVariablesVariableOutput {
	return o
}

func (o GetGroupVariablesVariableOutput) ToGetGroupVariablesVariableOutputWithContext(ctx context.Context) GetGroupVariablesVariableOutput {
	return o
}

func (o GetGroupVariablesVariableOutput) ToOutput(ctx context.Context) pulumix.Output[GetGroupVariablesVariable] {
	return pulumix.Output[GetGroupVariablesVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupVariablesVariableOutput) EnvironmentScope() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.EnvironmentScope }).(pulumi.StringOutput)
}

func (o GetGroupVariablesVariableOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.Group }).(pulumi.StringOutput)
}

func (o GetGroupVariablesVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetGroupVariablesVariableOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) bool { return v.Masked }).(pulumi.BoolOutput)
}

func (o GetGroupVariablesVariableOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o GetGroupVariablesVariableOutput) Raw() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) bool { return v.Raw }).(pulumi.BoolOutput)
}

func (o GetGroupVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

func (o GetGroupVariablesVariableOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupVariablesVariable) string { return v.VariableType }).(pulumi.StringOutput)
}

type GetGroupVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetGroupVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupVariablesVariable)(nil)).Elem()
}

func (o GetGroupVariablesVariableArrayOutput) ToGetGroupVariablesVariableArrayOutput() GetGroupVariablesVariableArrayOutput {
	return o
}

func (o GetGroupVariablesVariableArrayOutput) ToGetGroupVariablesVariableArrayOutputWithContext(ctx context.Context) GetGroupVariablesVariableArrayOutput {
	return o
}

func (o GetGroupVariablesVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupVariablesVariable] {
	return pulumix.Output[[]GetGroupVariablesVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetGroupVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupVariablesVariable {
		return vs[0].([]GetGroupVariablesVariable)[vs[1].(int)]
	}).(GetGroupVariablesVariableOutput)
}

type GetGroupsGroup struct {
	DefaultBranchProtection    int    `pulumi:"defaultBranchProtection"`
	Description                string `pulumi:"description"`
	FullName                   string `pulumi:"fullName"`
	FullPath                   string `pulumi:"fullPath"`
	GroupId                    int    `pulumi:"groupId"`
	LfsEnabled                 bool   `pulumi:"lfsEnabled"`
	Name                       string `pulumi:"name"`
	ParentId                   int    `pulumi:"parentId"`
	Path                       string `pulumi:"path"`
	PreventForkingOutsideGroup bool   `pulumi:"preventForkingOutsideGroup"`
	RequestAccessEnabled       bool   `pulumi:"requestAccessEnabled"`
	RunnersToken               string `pulumi:"runnersToken"`
	VisibilityLevel            string `pulumi:"visibilityLevel"`
	WebUrl                     string `pulumi:"webUrl"`
	WikiAccessLevel            string `pulumi:"wikiAccessLevel"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//	GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	DefaultBranchProtection    pulumi.IntInput    `pulumi:"defaultBranchProtection"`
	Description                pulumi.StringInput `pulumi:"description"`
	FullName                   pulumi.StringInput `pulumi:"fullName"`
	FullPath                   pulumi.StringInput `pulumi:"fullPath"`
	GroupId                    pulumi.IntInput    `pulumi:"groupId"`
	LfsEnabled                 pulumi.BoolInput   `pulumi:"lfsEnabled"`
	Name                       pulumi.StringInput `pulumi:"name"`
	ParentId                   pulumi.IntInput    `pulumi:"parentId"`
	Path                       pulumi.StringInput `pulumi:"path"`
	PreventForkingOutsideGroup pulumi.BoolInput   `pulumi:"preventForkingOutsideGroup"`
	RequestAccessEnabled       pulumi.BoolInput   `pulumi:"requestAccessEnabled"`
	RunnersToken               pulumi.StringInput `pulumi:"runnersToken"`
	VisibilityLevel            pulumi.StringInput `pulumi:"visibilityLevel"`
	WebUrl                     pulumi.StringInput `pulumi:"webUrl"`
	WikiAccessLevel            pulumi.StringInput `pulumi:"wikiAccessLevel"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

func (i GetGroupsGroupArgs) ToOutput(ctx context.Context) pulumix.Output[GetGroupsGroup] {
	return pulumix.Output[GetGroupsGroup]{
		OutputState: i.ToGetGroupsGroupOutputWithContext(ctx).OutputState,
	}
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//	GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

func (i GetGroupsGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupsGroup] {
	return pulumix.Output[[]GetGroupsGroup]{
		OutputState: i.ToGetGroupsGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetGroupsGroup] {
	return pulumix.Output[GetGroupsGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupsGroupOutput) DefaultBranchProtection() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.DefaultBranchProtection }).(pulumi.IntOutput)
}

func (o GetGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.FullName }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.FullPath }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetGroupsGroupOutput) LfsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.LfsEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) ParentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.ParentId }).(pulumi.IntOutput)
}

func (o GetGroupsGroupOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) PreventForkingOutsideGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.PreventForkingOutsideGroup }).(pulumi.BoolOutput)
}

func (o GetGroupsGroupOutput) RequestAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.RequestAccessEnabled }).(pulumi.BoolOutput)
}

func (o GetGroupsGroupOutput) RunnersToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.RunnersToken }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) VisibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.VisibilityLevel }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.WebUrl }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) WikiAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.WikiAccessLevel }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGroupsGroup] {
	return pulumix.Output[[]GetGroupsGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetInstanceDeployKeysDeployKey struct {
	CreatedAt                 string                                                  `pulumi:"createdAt"`
	Fingerprint               string                                                  `pulumi:"fingerprint"`
	Id                        int                                                     `pulumi:"id"`
	Key                       string                                                  `pulumi:"key"`
	ProjectsWithWriteAccesses []GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess `pulumi:"projectsWithWriteAccesses"`
	Title                     string                                                  `pulumi:"title"`
}

// GetInstanceDeployKeysDeployKeyInput is an input type that accepts GetInstanceDeployKeysDeployKeyArgs and GetInstanceDeployKeysDeployKeyOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyInput` via:
//
//	GetInstanceDeployKeysDeployKeyArgs{...}
type GetInstanceDeployKeysDeployKeyInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyOutput() GetInstanceDeployKeysDeployKeyOutput
	ToGetInstanceDeployKeysDeployKeyOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyOutput
}

type GetInstanceDeployKeysDeployKeyArgs struct {
	CreatedAt                 pulumi.StringInput                                              `pulumi:"createdAt"`
	Fingerprint               pulumi.StringInput                                              `pulumi:"fingerprint"`
	Id                        pulumi.IntInput                                                 `pulumi:"id"`
	Key                       pulumi.StringInput                                              `pulumi:"key"`
	ProjectsWithWriteAccesses GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput `pulumi:"projectsWithWriteAccesses"`
	Title                     pulumi.StringInput                                              `pulumi:"title"`
}

func (GetInstanceDeployKeysDeployKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyArgs) ToGetInstanceDeployKeysDeployKeyOutput() GetInstanceDeployKeysDeployKeyOutput {
	return i.ToGetInstanceDeployKeysDeployKeyOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyArgs) ToGetInstanceDeployKeysDeployKeyOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyOutput)
}

func (i GetInstanceDeployKeysDeployKeyArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceDeployKeysDeployKey] {
	return pulumix.Output[GetInstanceDeployKeysDeployKey]{
		OutputState: i.ToGetInstanceDeployKeysDeployKeyOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceDeployKeysDeployKeyArrayInput is an input type that accepts GetInstanceDeployKeysDeployKeyArray and GetInstanceDeployKeysDeployKeyArrayOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyArrayInput` via:
//
//	GetInstanceDeployKeysDeployKeyArray{ GetInstanceDeployKeysDeployKeyArgs{...} }
type GetInstanceDeployKeysDeployKeyArrayInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyArrayOutput() GetInstanceDeployKeysDeployKeyArrayOutput
	ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyArrayOutput
}

type GetInstanceDeployKeysDeployKeyArray []GetInstanceDeployKeysDeployKeyInput

func (GetInstanceDeployKeysDeployKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyArray) ToGetInstanceDeployKeysDeployKeyArrayOutput() GetInstanceDeployKeysDeployKeyArrayOutput {
	return i.ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyArray) ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyArrayOutput)
}

func (i GetInstanceDeployKeysDeployKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceDeployKeysDeployKey] {
	return pulumix.Output[[]GetInstanceDeployKeysDeployKey]{
		OutputState: i.ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceDeployKeysDeployKeyOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyOutput) ToGetInstanceDeployKeysDeployKeyOutput() GetInstanceDeployKeysDeployKeyOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyOutput) ToGetInstanceDeployKeysDeployKeyOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceDeployKeysDeployKey] {
	return pulumix.Output[GetInstanceDeployKeysDeployKey]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceDeployKeysDeployKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetInstanceDeployKeysDeployKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyOutput) ProjectsWithWriteAccesses() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) []GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess {
		return v.ProjectsWithWriteAccesses
	}).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput)
}

func (o GetInstanceDeployKeysDeployKeyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKey) string { return v.Title }).(pulumi.StringOutput)
}

type GetInstanceDeployKeysDeployKeyArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKey)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyArrayOutput) ToGetInstanceDeployKeysDeployKeyArrayOutput() GetInstanceDeployKeysDeployKeyArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyArrayOutput) ToGetInstanceDeployKeysDeployKeyArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceDeployKeysDeployKey] {
	return pulumix.Output[[]GetInstanceDeployKeysDeployKey]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceDeployKeysDeployKeyArrayOutput) Index(i pulumi.IntInput) GetInstanceDeployKeysDeployKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceDeployKeysDeployKey {
		return vs[0].([]GetInstanceDeployKeysDeployKey)[vs[1].(int)]
	}).(GetInstanceDeployKeysDeployKeyOutput)
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess struct {
	CreatedAt         string `pulumi:"createdAt"`
	Description       string `pulumi:"description"`
	Id                int    `pulumi:"id"`
	Name              string `pulumi:"name"`
	NameWithNamespace string `pulumi:"nameWithNamespace"`
	Path              string `pulumi:"path"`
	PathWithNamespace string `pulumi:"pathWithNamespace"`
}

// GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput is an input type that accepts GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs and GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput` via:
//
//	GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs{...}
type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput
	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs struct {
	CreatedAt         pulumi.StringInput `pulumi:"createdAt"`
	Description       pulumi.StringInput `pulumi:"description"`
	Id                pulumi.IntInput    `pulumi:"id"`
	Name              pulumi.StringInput `pulumi:"name"`
	NameWithNamespace pulumi.StringInput `pulumi:"nameWithNamespace"`
	Path              pulumi.StringInput `pulumi:"path"`
	PathWithNamespace pulumi.StringInput `pulumi:"pathWithNamespace"`
}

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return i.ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput)
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess] {
	return pulumix.Output[GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess]{
		OutputState: i.ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput is an input type that accepts GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray and GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput values.
// You can construct a concrete instance of `GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput` via:
//
//	GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray{ GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs{...} }
type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput interface {
	pulumi.Input

	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput
	ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray []GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return i.ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(context.Background())
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput)
}

func (i GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess] {
	return pulumix.Output[[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess]{
		OutputState: i.ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess] {
	return pulumix.Output[GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

type GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)(nil)).Elem()
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput() GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) ToGetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutputWithContext(ctx context.Context) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput {
	return o
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess] {
	return pulumix.Output[[]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput) Index(i pulumi.IntInput) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess {
		return vs[0].([]GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess)[vs[1].(int)]
	}).(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput)
}

type GetInstanceVariablesVariable struct {
	Key          string `pulumi:"key"`
	Masked       bool   `pulumi:"masked"`
	Protected    bool   `pulumi:"protected"`
	Raw          bool   `pulumi:"raw"`
	Value        string `pulumi:"value"`
	VariableType string `pulumi:"variableType"`
}

// GetInstanceVariablesVariableInput is an input type that accepts GetInstanceVariablesVariableArgs and GetInstanceVariablesVariableOutput values.
// You can construct a concrete instance of `GetInstanceVariablesVariableInput` via:
//
//	GetInstanceVariablesVariableArgs{...}
type GetInstanceVariablesVariableInput interface {
	pulumi.Input

	ToGetInstanceVariablesVariableOutput() GetInstanceVariablesVariableOutput
	ToGetInstanceVariablesVariableOutputWithContext(context.Context) GetInstanceVariablesVariableOutput
}

type GetInstanceVariablesVariableArgs struct {
	Key          pulumi.StringInput `pulumi:"key"`
	Masked       pulumi.BoolInput   `pulumi:"masked"`
	Protected    pulumi.BoolInput   `pulumi:"protected"`
	Raw          pulumi.BoolInput   `pulumi:"raw"`
	Value        pulumi.StringInput `pulumi:"value"`
	VariableType pulumi.StringInput `pulumi:"variableType"`
}

func (GetInstanceVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVariablesVariable)(nil)).Elem()
}

func (i GetInstanceVariablesVariableArgs) ToGetInstanceVariablesVariableOutput() GetInstanceVariablesVariableOutput {
	return i.ToGetInstanceVariablesVariableOutputWithContext(context.Background())
}

func (i GetInstanceVariablesVariableArgs) ToGetInstanceVariablesVariableOutputWithContext(ctx context.Context) GetInstanceVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVariablesVariableOutput)
}

func (i GetInstanceVariablesVariableArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceVariablesVariable] {
	return pulumix.Output[GetInstanceVariablesVariable]{
		OutputState: i.ToGetInstanceVariablesVariableOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceVariablesVariableArrayInput is an input type that accepts GetInstanceVariablesVariableArray and GetInstanceVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetInstanceVariablesVariableArrayInput` via:
//
//	GetInstanceVariablesVariableArray{ GetInstanceVariablesVariableArgs{...} }
type GetInstanceVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetInstanceVariablesVariableArrayOutput() GetInstanceVariablesVariableArrayOutput
	ToGetInstanceVariablesVariableArrayOutputWithContext(context.Context) GetInstanceVariablesVariableArrayOutput
}

type GetInstanceVariablesVariableArray []GetInstanceVariablesVariableInput

func (GetInstanceVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVariablesVariable)(nil)).Elem()
}

func (i GetInstanceVariablesVariableArray) ToGetInstanceVariablesVariableArrayOutput() GetInstanceVariablesVariableArrayOutput {
	return i.ToGetInstanceVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetInstanceVariablesVariableArray) ToGetInstanceVariablesVariableArrayOutputWithContext(ctx context.Context) GetInstanceVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVariablesVariableArrayOutput)
}

func (i GetInstanceVariablesVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceVariablesVariable] {
	return pulumix.Output[[]GetInstanceVariablesVariable]{
		OutputState: i.ToGetInstanceVariablesVariableArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetInstanceVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVariablesVariable)(nil)).Elem()
}

func (o GetInstanceVariablesVariableOutput) ToGetInstanceVariablesVariableOutput() GetInstanceVariablesVariableOutput {
	return o
}

func (o GetInstanceVariablesVariableOutput) ToGetInstanceVariablesVariableOutputWithContext(ctx context.Context) GetInstanceVariablesVariableOutput {
	return o
}

func (o GetInstanceVariablesVariableOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceVariablesVariable] {
	return pulumix.Output[GetInstanceVariablesVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceVariablesVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetInstanceVariablesVariableOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) bool { return v.Masked }).(pulumi.BoolOutput)
}

func (o GetInstanceVariablesVariableOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o GetInstanceVariablesVariableOutput) Raw() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) bool { return v.Raw }).(pulumi.BoolOutput)
}

func (o GetInstanceVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

func (o GetInstanceVariablesVariableOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVariablesVariable) string { return v.VariableType }).(pulumi.StringOutput)
}

type GetInstanceVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVariablesVariable)(nil)).Elem()
}

func (o GetInstanceVariablesVariableArrayOutput) ToGetInstanceVariablesVariableArrayOutput() GetInstanceVariablesVariableArrayOutput {
	return o
}

func (o GetInstanceVariablesVariableArrayOutput) ToGetInstanceVariablesVariableArrayOutputWithContext(ctx context.Context) GetInstanceVariablesVariableArrayOutput {
	return o
}

func (o GetInstanceVariablesVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceVariablesVariable] {
	return pulumix.Output[[]GetInstanceVariablesVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetInstanceVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceVariablesVariable {
		return vs[0].([]GetInstanceVariablesVariable)[vs[1].(int)]
	}).(GetInstanceVariablesVariableOutput)
}

type GetMetadataKas struct {
	// Indicates whether KAS is enabled.
	Enabled bool `pulumi:"enabled"`
	// URL used by the agents to communicate with KAS. It’s null if kas.enabled is false.
	ExternalUrl string `pulumi:"externalUrl"`
	// Version of KAS. It’s null if kas.enabled is false.
	Version string `pulumi:"version"`
}

// GetMetadataKasInput is an input type that accepts GetMetadataKasArgs and GetMetadataKasOutput values.
// You can construct a concrete instance of `GetMetadataKasInput` via:
//
//	GetMetadataKasArgs{...}
type GetMetadataKasInput interface {
	pulumi.Input

	ToGetMetadataKasOutput() GetMetadataKasOutput
	ToGetMetadataKasOutputWithContext(context.Context) GetMetadataKasOutput
}

type GetMetadataKasArgs struct {
	// Indicates whether KAS is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// URL used by the agents to communicate with KAS. It’s null if kas.enabled is false.
	ExternalUrl pulumi.StringInput `pulumi:"externalUrl"`
	// Version of KAS. It’s null if kas.enabled is false.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetMetadataKasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataKas)(nil)).Elem()
}

func (i GetMetadataKasArgs) ToGetMetadataKasOutput() GetMetadataKasOutput {
	return i.ToGetMetadataKasOutputWithContext(context.Background())
}

func (i GetMetadataKasArgs) ToGetMetadataKasOutputWithContext(ctx context.Context) GetMetadataKasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetadataKasOutput)
}

func (i GetMetadataKasArgs) ToOutput(ctx context.Context) pulumix.Output[GetMetadataKas] {
	return pulumix.Output[GetMetadataKas]{
		OutputState: i.ToGetMetadataKasOutputWithContext(ctx).OutputState,
	}
}

type GetMetadataKasOutput struct{ *pulumi.OutputState }

func (GetMetadataKasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataKas)(nil)).Elem()
}

func (o GetMetadataKasOutput) ToGetMetadataKasOutput() GetMetadataKasOutput {
	return o
}

func (o GetMetadataKasOutput) ToGetMetadataKasOutputWithContext(ctx context.Context) GetMetadataKasOutput {
	return o
}

func (o GetMetadataKasOutput) ToOutput(ctx context.Context) pulumix.Output[GetMetadataKas] {
	return pulumix.Output[GetMetadataKas]{
		OutputState: o.OutputState,
	}
}

// Indicates whether KAS is enabled.
func (o GetMetadataKasOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetadataKas) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// URL used by the agents to communicate with KAS. It’s null if kas.enabled is false.
func (o GetMetadataKasOutput) ExternalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataKas) string { return v.ExternalUrl }).(pulumi.StringOutput)
}

// Version of KAS. It’s null if kas.enabled is false.
func (o GetMetadataKasOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataKas) string { return v.Version }).(pulumi.StringOutput)
}

type GetProjectBranchesBranch struct {
	CanPush            bool                             `pulumi:"canPush"`
	Commits            []GetProjectBranchesBranchCommit `pulumi:"commits"`
	Default            bool                             `pulumi:"default"`
	DevelopersCanMerge bool                             `pulumi:"developersCanMerge"`
	DevelopersCanPush  bool                             `pulumi:"developersCanPush"`
	Merged             bool                             `pulumi:"merged"`
	Name               string                           `pulumi:"name"`
	Protected          bool                             `pulumi:"protected"`
	WebUrl             string                           `pulumi:"webUrl"`
}

// GetProjectBranchesBranchInput is an input type that accepts GetProjectBranchesBranchArgs and GetProjectBranchesBranchOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchInput` via:
//
//	GetProjectBranchesBranchArgs{...}
type GetProjectBranchesBranchInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchOutput() GetProjectBranchesBranchOutput
	ToGetProjectBranchesBranchOutputWithContext(context.Context) GetProjectBranchesBranchOutput
}

type GetProjectBranchesBranchArgs struct {
	CanPush            pulumi.BoolInput                         `pulumi:"canPush"`
	Commits            GetProjectBranchesBranchCommitArrayInput `pulumi:"commits"`
	Default            pulumi.BoolInput                         `pulumi:"default"`
	DevelopersCanMerge pulumi.BoolInput                         `pulumi:"developersCanMerge"`
	DevelopersCanPush  pulumi.BoolInput                         `pulumi:"developersCanPush"`
	Merged             pulumi.BoolInput                         `pulumi:"merged"`
	Name               pulumi.StringInput                       `pulumi:"name"`
	Protected          pulumi.BoolInput                         `pulumi:"protected"`
	WebUrl             pulumi.StringInput                       `pulumi:"webUrl"`
}

func (GetProjectBranchesBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranch)(nil)).Elem()
}

func (i GetProjectBranchesBranchArgs) ToGetProjectBranchesBranchOutput() GetProjectBranchesBranchOutput {
	return i.ToGetProjectBranchesBranchOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchArgs) ToGetProjectBranchesBranchOutputWithContext(ctx context.Context) GetProjectBranchesBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchOutput)
}

func (i GetProjectBranchesBranchArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectBranchesBranch] {
	return pulumix.Output[GetProjectBranchesBranch]{
		OutputState: i.ToGetProjectBranchesBranchOutputWithContext(ctx).OutputState,
	}
}

// GetProjectBranchesBranchArrayInput is an input type that accepts GetProjectBranchesBranchArray and GetProjectBranchesBranchArrayOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchArrayInput` via:
//
//	GetProjectBranchesBranchArray{ GetProjectBranchesBranchArgs{...} }
type GetProjectBranchesBranchArrayInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchArrayOutput() GetProjectBranchesBranchArrayOutput
	ToGetProjectBranchesBranchArrayOutputWithContext(context.Context) GetProjectBranchesBranchArrayOutput
}

type GetProjectBranchesBranchArray []GetProjectBranchesBranchInput

func (GetProjectBranchesBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranch)(nil)).Elem()
}

func (i GetProjectBranchesBranchArray) ToGetProjectBranchesBranchArrayOutput() GetProjectBranchesBranchArrayOutput {
	return i.ToGetProjectBranchesBranchArrayOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchArray) ToGetProjectBranchesBranchArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchArrayOutput)
}

func (i GetProjectBranchesBranchArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectBranchesBranch] {
	return pulumix.Output[[]GetProjectBranchesBranch]{
		OutputState: i.ToGetProjectBranchesBranchArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectBranchesBranchOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranch)(nil)).Elem()
}

func (o GetProjectBranchesBranchOutput) ToGetProjectBranchesBranchOutput() GetProjectBranchesBranchOutput {
	return o
}

func (o GetProjectBranchesBranchOutput) ToGetProjectBranchesBranchOutputWithContext(ctx context.Context) GetProjectBranchesBranchOutput {
	return o
}

func (o GetProjectBranchesBranchOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectBranchesBranch] {
	return pulumix.Output[GetProjectBranchesBranch]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectBranchesBranchOutput) CanPush() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.CanPush }).(pulumi.BoolOutput)
}

func (o GetProjectBranchesBranchOutput) Commits() GetProjectBranchesBranchCommitArrayOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) []GetProjectBranchesBranchCommit { return v.Commits }).(GetProjectBranchesBranchCommitArrayOutput)
}

func (o GetProjectBranchesBranchOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.Default }).(pulumi.BoolOutput)
}

func (o GetProjectBranchesBranchOutput) DevelopersCanMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.DevelopersCanMerge }).(pulumi.BoolOutput)
}

func (o GetProjectBranchesBranchOutput) DevelopersCanPush() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.DevelopersCanPush }).(pulumi.BoolOutput)
}

func (o GetProjectBranchesBranchOutput) Merged() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.Merged }).(pulumi.BoolOutput)
}

func (o GetProjectBranchesBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o GetProjectBranchesBranchOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranch) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectBranchesBranchArrayOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranch)(nil)).Elem()
}

func (o GetProjectBranchesBranchArrayOutput) ToGetProjectBranchesBranchArrayOutput() GetProjectBranchesBranchArrayOutput {
	return o
}

func (o GetProjectBranchesBranchArrayOutput) ToGetProjectBranchesBranchArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchArrayOutput {
	return o
}

func (o GetProjectBranchesBranchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectBranchesBranch] {
	return pulumix.Output[[]GetProjectBranchesBranch]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectBranchesBranchArrayOutput) Index(i pulumi.IntInput) GetProjectBranchesBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectBranchesBranch {
		return vs[0].([]GetProjectBranchesBranch)[vs[1].(int)]
	}).(GetProjectBranchesBranchOutput)
}

type GetProjectBranchesBranchCommit struct {
	AuthorEmail    string   `pulumi:"authorEmail"`
	AuthorName     string   `pulumi:"authorName"`
	AuthoredDate   string   `pulumi:"authoredDate"`
	CommittedDate  string   `pulumi:"committedDate"`
	CommitterEmail string   `pulumi:"committerEmail"`
	CommitterName  string   `pulumi:"committerName"`
	Id             string   `pulumi:"id"`
	Message        string   `pulumi:"message"`
	ParentIds      []string `pulumi:"parentIds"`
	ShortId        string   `pulumi:"shortId"`
	Title          string   `pulumi:"title"`
}

// GetProjectBranchesBranchCommitInput is an input type that accepts GetProjectBranchesBranchCommitArgs and GetProjectBranchesBranchCommitOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchCommitInput` via:
//
//	GetProjectBranchesBranchCommitArgs{...}
type GetProjectBranchesBranchCommitInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchCommitOutput() GetProjectBranchesBranchCommitOutput
	ToGetProjectBranchesBranchCommitOutputWithContext(context.Context) GetProjectBranchesBranchCommitOutput
}

type GetProjectBranchesBranchCommitArgs struct {
	AuthorEmail    pulumi.StringInput      `pulumi:"authorEmail"`
	AuthorName     pulumi.StringInput      `pulumi:"authorName"`
	AuthoredDate   pulumi.StringInput      `pulumi:"authoredDate"`
	CommittedDate  pulumi.StringInput      `pulumi:"committedDate"`
	CommitterEmail pulumi.StringInput      `pulumi:"committerEmail"`
	CommitterName  pulumi.StringInput      `pulumi:"committerName"`
	Id             pulumi.StringInput      `pulumi:"id"`
	Message        pulumi.StringInput      `pulumi:"message"`
	ParentIds      pulumi.StringArrayInput `pulumi:"parentIds"`
	ShortId        pulumi.StringInput      `pulumi:"shortId"`
	Title          pulumi.StringInput      `pulumi:"title"`
}

func (GetProjectBranchesBranchCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (i GetProjectBranchesBranchCommitArgs) ToGetProjectBranchesBranchCommitOutput() GetProjectBranchesBranchCommitOutput {
	return i.ToGetProjectBranchesBranchCommitOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchCommitArgs) ToGetProjectBranchesBranchCommitOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchCommitOutput)
}

func (i GetProjectBranchesBranchCommitArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectBranchesBranchCommit] {
	return pulumix.Output[GetProjectBranchesBranchCommit]{
		OutputState: i.ToGetProjectBranchesBranchCommitOutputWithContext(ctx).OutputState,
	}
}

// GetProjectBranchesBranchCommitArrayInput is an input type that accepts GetProjectBranchesBranchCommitArray and GetProjectBranchesBranchCommitArrayOutput values.
// You can construct a concrete instance of `GetProjectBranchesBranchCommitArrayInput` via:
//
//	GetProjectBranchesBranchCommitArray{ GetProjectBranchesBranchCommitArgs{...} }
type GetProjectBranchesBranchCommitArrayInput interface {
	pulumi.Input

	ToGetProjectBranchesBranchCommitArrayOutput() GetProjectBranchesBranchCommitArrayOutput
	ToGetProjectBranchesBranchCommitArrayOutputWithContext(context.Context) GetProjectBranchesBranchCommitArrayOutput
}

type GetProjectBranchesBranchCommitArray []GetProjectBranchesBranchCommitInput

func (GetProjectBranchesBranchCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (i GetProjectBranchesBranchCommitArray) ToGetProjectBranchesBranchCommitArrayOutput() GetProjectBranchesBranchCommitArrayOutput {
	return i.ToGetProjectBranchesBranchCommitArrayOutputWithContext(context.Background())
}

func (i GetProjectBranchesBranchCommitArray) ToGetProjectBranchesBranchCommitArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectBranchesBranchCommitArrayOutput)
}

func (i GetProjectBranchesBranchCommitArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectBranchesBranchCommit] {
	return pulumix.Output[[]GetProjectBranchesBranchCommit]{
		OutputState: i.ToGetProjectBranchesBranchCommitArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectBranchesBranchCommitOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (o GetProjectBranchesBranchCommitOutput) ToGetProjectBranchesBranchCommitOutput() GetProjectBranchesBranchCommitOutput {
	return o
}

func (o GetProjectBranchesBranchCommitOutput) ToGetProjectBranchesBranchCommitOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitOutput {
	return o
}

func (o GetProjectBranchesBranchCommitOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectBranchesBranchCommit] {
	return pulumix.Output[GetProjectBranchesBranchCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectBranchesBranchCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

func (o GetProjectBranchesBranchCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

func (o GetProjectBranchesBranchCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesBranchCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetProjectBranchesBranchCommitArrayOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesBranchCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectBranchesBranchCommit)(nil)).Elem()
}

func (o GetProjectBranchesBranchCommitArrayOutput) ToGetProjectBranchesBranchCommitArrayOutput() GetProjectBranchesBranchCommitArrayOutput {
	return o
}

func (o GetProjectBranchesBranchCommitArrayOutput) ToGetProjectBranchesBranchCommitArrayOutputWithContext(ctx context.Context) GetProjectBranchesBranchCommitArrayOutput {
	return o
}

func (o GetProjectBranchesBranchCommitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectBranchesBranchCommit] {
	return pulumix.Output[[]GetProjectBranchesBranchCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectBranchesBranchCommitArrayOutput) Index(i pulumi.IntInput) GetProjectBranchesBranchCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectBranchesBranchCommit {
		return vs[0].([]GetProjectBranchesBranchCommit)[vs[1].(int)]
	}).(GetProjectBranchesBranchCommitOutput)
}

type GetProjectContainerExpirationPolicy struct {
	Cadence string `pulumi:"cadence"`
	Enabled bool   `pulumi:"enabled"`
	KeepN   int    `pulumi:"keepN"`
	// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
	NameRegex       string `pulumi:"nameRegex"`
	NameRegexDelete string `pulumi:"nameRegexDelete"`
	NameRegexKeep   string `pulumi:"nameRegexKeep"`
	NextRunAt       string `pulumi:"nextRunAt"`
	OlderThan       string `pulumi:"olderThan"`
}

// GetProjectContainerExpirationPolicyInput is an input type that accepts GetProjectContainerExpirationPolicyArgs and GetProjectContainerExpirationPolicyOutput values.
// You can construct a concrete instance of `GetProjectContainerExpirationPolicyInput` via:
//
//	GetProjectContainerExpirationPolicyArgs{...}
type GetProjectContainerExpirationPolicyInput interface {
	pulumi.Input

	ToGetProjectContainerExpirationPolicyOutput() GetProjectContainerExpirationPolicyOutput
	ToGetProjectContainerExpirationPolicyOutputWithContext(context.Context) GetProjectContainerExpirationPolicyOutput
}

type GetProjectContainerExpirationPolicyArgs struct {
	Cadence pulumi.StringInput `pulumi:"cadence"`
	Enabled pulumi.BoolInput   `pulumi:"enabled"`
	KeepN   pulumi.IntInput    `pulumi:"keepN"`
	// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
	NameRegex       pulumi.StringInput `pulumi:"nameRegex"`
	NameRegexDelete pulumi.StringInput `pulumi:"nameRegexDelete"`
	NameRegexKeep   pulumi.StringInput `pulumi:"nameRegexKeep"`
	NextRunAt       pulumi.StringInput `pulumi:"nextRunAt"`
	OlderThan       pulumi.StringInput `pulumi:"olderThan"`
}

func (GetProjectContainerExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectContainerExpirationPolicyArgs) ToGetProjectContainerExpirationPolicyOutput() GetProjectContainerExpirationPolicyOutput {
	return i.ToGetProjectContainerExpirationPolicyOutputWithContext(context.Background())
}

func (i GetProjectContainerExpirationPolicyArgs) ToGetProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectContainerExpirationPolicyOutput)
}

func (i GetProjectContainerExpirationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectContainerExpirationPolicy] {
	return pulumix.Output[GetProjectContainerExpirationPolicy]{
		OutputState: i.ToGetProjectContainerExpirationPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetProjectContainerExpirationPolicyArrayInput is an input type that accepts GetProjectContainerExpirationPolicyArray and GetProjectContainerExpirationPolicyArrayOutput values.
// You can construct a concrete instance of `GetProjectContainerExpirationPolicyArrayInput` via:
//
//	GetProjectContainerExpirationPolicyArray{ GetProjectContainerExpirationPolicyArgs{...} }
type GetProjectContainerExpirationPolicyArrayInput interface {
	pulumi.Input

	ToGetProjectContainerExpirationPolicyArrayOutput() GetProjectContainerExpirationPolicyArrayOutput
	ToGetProjectContainerExpirationPolicyArrayOutputWithContext(context.Context) GetProjectContainerExpirationPolicyArrayOutput
}

type GetProjectContainerExpirationPolicyArray []GetProjectContainerExpirationPolicyInput

func (GetProjectContainerExpirationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectContainerExpirationPolicyArray) ToGetProjectContainerExpirationPolicyArrayOutput() GetProjectContainerExpirationPolicyArrayOutput {
	return i.ToGetProjectContainerExpirationPolicyArrayOutputWithContext(context.Background())
}

func (i GetProjectContainerExpirationPolicyArray) ToGetProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectContainerExpirationPolicyArrayOutput)
}

func (i GetProjectContainerExpirationPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectContainerExpirationPolicy] {
	return pulumix.Output[[]GetProjectContainerExpirationPolicy]{
		OutputState: i.ToGetProjectContainerExpirationPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectContainerExpirationPolicyOutput struct{ *pulumi.OutputState }

func (GetProjectContainerExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectContainerExpirationPolicyOutput) ToGetProjectContainerExpirationPolicyOutput() GetProjectContainerExpirationPolicyOutput {
	return o
}

func (o GetProjectContainerExpirationPolicyOutput) ToGetProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyOutput {
	return o
}

func (o GetProjectContainerExpirationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectContainerExpirationPolicy] {
	return pulumix.Output[GetProjectContainerExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectContainerExpirationPolicyOutput) Cadence() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.Cadence }).(pulumi.StringOutput)
}

func (o GetProjectContainerExpirationPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetProjectContainerExpirationPolicyOutput) KeepN() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) int { return v.KeepN }).(pulumi.IntOutput)
}

// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
func (o GetProjectContainerExpirationPolicyOutput) NameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NameRegex }).(pulumi.StringOutput)
}

func (o GetProjectContainerExpirationPolicyOutput) NameRegexDelete() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NameRegexDelete }).(pulumi.StringOutput)
}

func (o GetProjectContainerExpirationPolicyOutput) NameRegexKeep() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NameRegexKeep }).(pulumi.StringOutput)
}

func (o GetProjectContainerExpirationPolicyOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.NextRunAt }).(pulumi.StringOutput)
}

func (o GetProjectContainerExpirationPolicyOutput) OlderThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectContainerExpirationPolicy) string { return v.OlderThan }).(pulumi.StringOutput)
}

type GetProjectContainerExpirationPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetProjectContainerExpirationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectContainerExpirationPolicyArrayOutput) ToGetProjectContainerExpirationPolicyArrayOutput() GetProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectContainerExpirationPolicyArrayOutput) ToGetProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectContainerExpirationPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectContainerExpirationPolicy] {
	return pulumix.Output[[]GetProjectContainerExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectContainerExpirationPolicyArrayOutput) Index(i pulumi.IntInput) GetProjectContainerExpirationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectContainerExpirationPolicy {
		return vs[0].([]GetProjectContainerExpirationPolicy)[vs[1].(int)]
	}).(GetProjectContainerExpirationPolicyOutput)
}

type GetProjectHooksHook struct {
	ConfidentialIssuesEvents bool   `pulumi:"confidentialIssuesEvents"`
	ConfidentialNoteEvents   bool   `pulumi:"confidentialNoteEvents"`
	DeploymentEvents         bool   `pulumi:"deploymentEvents"`
	EnableSslVerification    bool   `pulumi:"enableSslVerification"`
	HookId                   int    `pulumi:"hookId"`
	IssuesEvents             bool   `pulumi:"issuesEvents"`
	JobEvents                bool   `pulumi:"jobEvents"`
	MergeRequestsEvents      bool   `pulumi:"mergeRequestsEvents"`
	NoteEvents               bool   `pulumi:"noteEvents"`
	PipelineEvents           bool   `pulumi:"pipelineEvents"`
	Project                  string `pulumi:"project"`
	ProjectId                int    `pulumi:"projectId"`
	PushEvents               bool   `pulumi:"pushEvents"`
	PushEventsBranchFilter   string `pulumi:"pushEventsBranchFilter"`
	ReleasesEvents           bool   `pulumi:"releasesEvents"`
	TagPushEvents            bool   `pulumi:"tagPushEvents"`
	Token                    string `pulumi:"token"`
	Url                      string `pulumi:"url"`
	WikiPageEvents           bool   `pulumi:"wikiPageEvents"`
}

// GetProjectHooksHookInput is an input type that accepts GetProjectHooksHookArgs and GetProjectHooksHookOutput values.
// You can construct a concrete instance of `GetProjectHooksHookInput` via:
//
//	GetProjectHooksHookArgs{...}
type GetProjectHooksHookInput interface {
	pulumi.Input

	ToGetProjectHooksHookOutput() GetProjectHooksHookOutput
	ToGetProjectHooksHookOutputWithContext(context.Context) GetProjectHooksHookOutput
}

type GetProjectHooksHookArgs struct {
	ConfidentialIssuesEvents pulumi.BoolInput   `pulumi:"confidentialIssuesEvents"`
	ConfidentialNoteEvents   pulumi.BoolInput   `pulumi:"confidentialNoteEvents"`
	DeploymentEvents         pulumi.BoolInput   `pulumi:"deploymentEvents"`
	EnableSslVerification    pulumi.BoolInput   `pulumi:"enableSslVerification"`
	HookId                   pulumi.IntInput    `pulumi:"hookId"`
	IssuesEvents             pulumi.BoolInput   `pulumi:"issuesEvents"`
	JobEvents                pulumi.BoolInput   `pulumi:"jobEvents"`
	MergeRequestsEvents      pulumi.BoolInput   `pulumi:"mergeRequestsEvents"`
	NoteEvents               pulumi.BoolInput   `pulumi:"noteEvents"`
	PipelineEvents           pulumi.BoolInput   `pulumi:"pipelineEvents"`
	Project                  pulumi.StringInput `pulumi:"project"`
	ProjectId                pulumi.IntInput    `pulumi:"projectId"`
	PushEvents               pulumi.BoolInput   `pulumi:"pushEvents"`
	PushEventsBranchFilter   pulumi.StringInput `pulumi:"pushEventsBranchFilter"`
	ReleasesEvents           pulumi.BoolInput   `pulumi:"releasesEvents"`
	TagPushEvents            pulumi.BoolInput   `pulumi:"tagPushEvents"`
	Token                    pulumi.StringInput `pulumi:"token"`
	Url                      pulumi.StringInput `pulumi:"url"`
	WikiPageEvents           pulumi.BoolInput   `pulumi:"wikiPageEvents"`
}

func (GetProjectHooksHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectHooksHook)(nil)).Elem()
}

func (i GetProjectHooksHookArgs) ToGetProjectHooksHookOutput() GetProjectHooksHookOutput {
	return i.ToGetProjectHooksHookOutputWithContext(context.Background())
}

func (i GetProjectHooksHookArgs) ToGetProjectHooksHookOutputWithContext(ctx context.Context) GetProjectHooksHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectHooksHookOutput)
}

func (i GetProjectHooksHookArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectHooksHook] {
	return pulumix.Output[GetProjectHooksHook]{
		OutputState: i.ToGetProjectHooksHookOutputWithContext(ctx).OutputState,
	}
}

// GetProjectHooksHookArrayInput is an input type that accepts GetProjectHooksHookArray and GetProjectHooksHookArrayOutput values.
// You can construct a concrete instance of `GetProjectHooksHookArrayInput` via:
//
//	GetProjectHooksHookArray{ GetProjectHooksHookArgs{...} }
type GetProjectHooksHookArrayInput interface {
	pulumi.Input

	ToGetProjectHooksHookArrayOutput() GetProjectHooksHookArrayOutput
	ToGetProjectHooksHookArrayOutputWithContext(context.Context) GetProjectHooksHookArrayOutput
}

type GetProjectHooksHookArray []GetProjectHooksHookInput

func (GetProjectHooksHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectHooksHook)(nil)).Elem()
}

func (i GetProjectHooksHookArray) ToGetProjectHooksHookArrayOutput() GetProjectHooksHookArrayOutput {
	return i.ToGetProjectHooksHookArrayOutputWithContext(context.Background())
}

func (i GetProjectHooksHookArray) ToGetProjectHooksHookArrayOutputWithContext(ctx context.Context) GetProjectHooksHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectHooksHookArrayOutput)
}

func (i GetProjectHooksHookArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectHooksHook] {
	return pulumix.Output[[]GetProjectHooksHook]{
		OutputState: i.ToGetProjectHooksHookArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectHooksHookOutput struct{ *pulumi.OutputState }

func (GetProjectHooksHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectHooksHook)(nil)).Elem()
}

func (o GetProjectHooksHookOutput) ToGetProjectHooksHookOutput() GetProjectHooksHookOutput {
	return o
}

func (o GetProjectHooksHookOutput) ToGetProjectHooksHookOutputWithContext(ctx context.Context) GetProjectHooksHookOutput {
	return o
}

func (o GetProjectHooksHookOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectHooksHook] {
	return pulumix.Output[GetProjectHooksHook]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectHooksHookOutput) ConfidentialIssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.ConfidentialIssuesEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) ConfidentialNoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.ConfidentialNoteEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) DeploymentEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.DeploymentEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) EnableSslVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.EnableSslVerification }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) HookId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectHooksHook) int { return v.HookId }).(pulumi.IntOutput)
}

func (o GetProjectHooksHookOutput) IssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.IssuesEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) JobEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.JobEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) MergeRequestsEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.MergeRequestsEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) NoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.NoteEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) PipelineEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.PipelineEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetProjectHooksHookOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectHooksHook) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o GetProjectHooksHookOutput) PushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.PushEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) PushEventsBranchFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.PushEventsBranchFilter }).(pulumi.StringOutput)
}

func (o GetProjectHooksHookOutput) ReleasesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.ReleasesEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) TagPushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.TagPushEvents }).(pulumi.BoolOutput)
}

func (o GetProjectHooksHookOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.Token }).(pulumi.StringOutput)
}

func (o GetProjectHooksHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectHooksHook) string { return v.Url }).(pulumi.StringOutput)
}

func (o GetProjectHooksHookOutput) WikiPageEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectHooksHook) bool { return v.WikiPageEvents }).(pulumi.BoolOutput)
}

type GetProjectHooksHookArrayOutput struct{ *pulumi.OutputState }

func (GetProjectHooksHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectHooksHook)(nil)).Elem()
}

func (o GetProjectHooksHookArrayOutput) ToGetProjectHooksHookArrayOutput() GetProjectHooksHookArrayOutput {
	return o
}

func (o GetProjectHooksHookArrayOutput) ToGetProjectHooksHookArrayOutputWithContext(ctx context.Context) GetProjectHooksHookArrayOutput {
	return o
}

func (o GetProjectHooksHookArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectHooksHook] {
	return pulumix.Output[[]GetProjectHooksHook]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectHooksHookArrayOutput) Index(i pulumi.IntInput) GetProjectHooksHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectHooksHook {
		return vs[0].([]GetProjectHooksHook)[vs[1].(int)]
	}).(GetProjectHooksHookOutput)
}

type GetProjectIssueTaskCompletionStatus struct {
	CompletedCount int `pulumi:"completedCount"`
	Count          int `pulumi:"count"`
}

// GetProjectIssueTaskCompletionStatusInput is an input type that accepts GetProjectIssueTaskCompletionStatusArgs and GetProjectIssueTaskCompletionStatusOutput values.
// You can construct a concrete instance of `GetProjectIssueTaskCompletionStatusInput` via:
//
//	GetProjectIssueTaskCompletionStatusArgs{...}
type GetProjectIssueTaskCompletionStatusInput interface {
	pulumi.Input

	ToGetProjectIssueTaskCompletionStatusOutput() GetProjectIssueTaskCompletionStatusOutput
	ToGetProjectIssueTaskCompletionStatusOutputWithContext(context.Context) GetProjectIssueTaskCompletionStatusOutput
}

type GetProjectIssueTaskCompletionStatusArgs struct {
	CompletedCount pulumi.IntInput `pulumi:"completedCount"`
	Count          pulumi.IntInput `pulumi:"count"`
}

func (GetProjectIssueTaskCompletionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssueTaskCompletionStatusArgs) ToGetProjectIssueTaskCompletionStatusOutput() GetProjectIssueTaskCompletionStatusOutput {
	return i.ToGetProjectIssueTaskCompletionStatusOutputWithContext(context.Background())
}

func (i GetProjectIssueTaskCompletionStatusArgs) ToGetProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssueTaskCompletionStatusOutput)
}

func (i GetProjectIssueTaskCompletionStatusArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectIssueTaskCompletionStatus] {
	return pulumix.Output[GetProjectIssueTaskCompletionStatus]{
		OutputState: i.ToGetProjectIssueTaskCompletionStatusOutputWithContext(ctx).OutputState,
	}
}

// GetProjectIssueTaskCompletionStatusArrayInput is an input type that accepts GetProjectIssueTaskCompletionStatusArray and GetProjectIssueTaskCompletionStatusArrayOutput values.
// You can construct a concrete instance of `GetProjectIssueTaskCompletionStatusArrayInput` via:
//
//	GetProjectIssueTaskCompletionStatusArray{ GetProjectIssueTaskCompletionStatusArgs{...} }
type GetProjectIssueTaskCompletionStatusArrayInput interface {
	pulumi.Input

	ToGetProjectIssueTaskCompletionStatusArrayOutput() GetProjectIssueTaskCompletionStatusArrayOutput
	ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Context) GetProjectIssueTaskCompletionStatusArrayOutput
}

type GetProjectIssueTaskCompletionStatusArray []GetProjectIssueTaskCompletionStatusInput

func (GetProjectIssueTaskCompletionStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssueTaskCompletionStatusArray) ToGetProjectIssueTaskCompletionStatusArrayOutput() GetProjectIssueTaskCompletionStatusArrayOutput {
	return i.ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(context.Background())
}

func (i GetProjectIssueTaskCompletionStatusArray) ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssueTaskCompletionStatusArrayOutput)
}

func (i GetProjectIssueTaskCompletionStatusArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectIssueTaskCompletionStatus] {
	return pulumix.Output[[]GetProjectIssueTaskCompletionStatus]{
		OutputState: i.ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectIssueTaskCompletionStatusOutput struct{ *pulumi.OutputState }

func (GetProjectIssueTaskCompletionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssueTaskCompletionStatusOutput) ToGetProjectIssueTaskCompletionStatusOutput() GetProjectIssueTaskCompletionStatusOutput {
	return o
}

func (o GetProjectIssueTaskCompletionStatusOutput) ToGetProjectIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusOutput {
	return o
}

func (o GetProjectIssueTaskCompletionStatusOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectIssueTaskCompletionStatus] {
	return pulumix.Output[GetProjectIssueTaskCompletionStatus]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectIssueTaskCompletionStatusOutput) CompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssueTaskCompletionStatus) int { return v.CompletedCount }).(pulumi.IntOutput)
}

func (o GetProjectIssueTaskCompletionStatusOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssueTaskCompletionStatus) int { return v.Count }).(pulumi.IntOutput)
}

type GetProjectIssueTaskCompletionStatusArrayOutput struct{ *pulumi.OutputState }

func (GetProjectIssueTaskCompletionStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssueTaskCompletionStatusArrayOutput) ToGetProjectIssueTaskCompletionStatusArrayOutput() GetProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssueTaskCompletionStatusArrayOutput) ToGetProjectIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssueTaskCompletionStatusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectIssueTaskCompletionStatus] {
	return pulumix.Output[[]GetProjectIssueTaskCompletionStatus]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectIssueTaskCompletionStatusArrayOutput) Index(i pulumi.IntInput) GetProjectIssueTaskCompletionStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectIssueTaskCompletionStatus {
		return vs[0].([]GetProjectIssueTaskCompletionStatus)[vs[1].(int)]
	}).(GetProjectIssueTaskCompletionStatusOutput)
}

type GetProjectIssuesIssue struct {
	AssigneeIds                        []int                                       `pulumi:"assigneeIds"`
	AuthorId                           int                                         `pulumi:"authorId"`
	ClosedAt                           string                                      `pulumi:"closedAt"`
	ClosedByUserId                     int                                         `pulumi:"closedByUserId"`
	Confidential                       bool                                        `pulumi:"confidential"`
	CreatedAt                          string                                      `pulumi:"createdAt"`
	Description                        string                                      `pulumi:"description"`
	DiscussionLocked                   bool                                        `pulumi:"discussionLocked"`
	DiscussionToResolve                string                                      `pulumi:"discussionToResolve"`
	Downvotes                          int                                         `pulumi:"downvotes"`
	DueDate                            string                                      `pulumi:"dueDate"`
	EpicId                             int                                         `pulumi:"epicId"`
	EpicIssueId                        int                                         `pulumi:"epicIssueId"`
	ExternalId                         string                                      `pulumi:"externalId"`
	HumanTimeEstimate                  string                                      `pulumi:"humanTimeEstimate"`
	HumanTotalTimeSpent                string                                      `pulumi:"humanTotalTimeSpent"`
	Iid                                int                                         `pulumi:"iid"`
	IssueId                            int                                         `pulumi:"issueId"`
	IssueLinkId                        int                                         `pulumi:"issueLinkId"`
	IssueType                          string                                      `pulumi:"issueType"`
	Labels                             []string                                    `pulumi:"labels"`
	Links                              map[string]string                           `pulumi:"links"`
	MergeRequestToResolveDiscussionsOf int                                         `pulumi:"mergeRequestToResolveDiscussionsOf"`
	MergeRequestsCount                 int                                         `pulumi:"mergeRequestsCount"`
	MilestoneId                        int                                         `pulumi:"milestoneId"`
	MovedToId                          int                                         `pulumi:"movedToId"`
	Project                            string                                      `pulumi:"project"`
	References                         map[string]string                           `pulumi:"references"`
	State                              string                                      `pulumi:"state"`
	Subscribed                         bool                                        `pulumi:"subscribed"`
	TaskCompletionStatuses             []GetProjectIssuesIssueTaskCompletionStatus `pulumi:"taskCompletionStatuses"`
	TimeEstimate                       int                                         `pulumi:"timeEstimate"`
	Title                              string                                      `pulumi:"title"`
	TotalTimeSpent                     int                                         `pulumi:"totalTimeSpent"`
	UpdatedAt                          string                                      `pulumi:"updatedAt"`
	Upvotes                            int                                         `pulumi:"upvotes"`
	UserNotesCount                     int                                         `pulumi:"userNotesCount"`
	WebUrl                             string                                      `pulumi:"webUrl"`
	Weight                             int                                         `pulumi:"weight"`
}

// GetProjectIssuesIssueInput is an input type that accepts GetProjectIssuesIssueArgs and GetProjectIssuesIssueOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueInput` via:
//
//	GetProjectIssuesIssueArgs{...}
type GetProjectIssuesIssueInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueOutput() GetProjectIssuesIssueOutput
	ToGetProjectIssuesIssueOutputWithContext(context.Context) GetProjectIssuesIssueOutput
}

type GetProjectIssuesIssueArgs struct {
	AssigneeIds                        pulumi.IntArrayInput                                `pulumi:"assigneeIds"`
	AuthorId                           pulumi.IntInput                                     `pulumi:"authorId"`
	ClosedAt                           pulumi.StringInput                                  `pulumi:"closedAt"`
	ClosedByUserId                     pulumi.IntInput                                     `pulumi:"closedByUserId"`
	Confidential                       pulumi.BoolInput                                    `pulumi:"confidential"`
	CreatedAt                          pulumi.StringInput                                  `pulumi:"createdAt"`
	Description                        pulumi.StringInput                                  `pulumi:"description"`
	DiscussionLocked                   pulumi.BoolInput                                    `pulumi:"discussionLocked"`
	DiscussionToResolve                pulumi.StringInput                                  `pulumi:"discussionToResolve"`
	Downvotes                          pulumi.IntInput                                     `pulumi:"downvotes"`
	DueDate                            pulumi.StringInput                                  `pulumi:"dueDate"`
	EpicId                             pulumi.IntInput                                     `pulumi:"epicId"`
	EpicIssueId                        pulumi.IntInput                                     `pulumi:"epicIssueId"`
	ExternalId                         pulumi.StringInput                                  `pulumi:"externalId"`
	HumanTimeEstimate                  pulumi.StringInput                                  `pulumi:"humanTimeEstimate"`
	HumanTotalTimeSpent                pulumi.StringInput                                  `pulumi:"humanTotalTimeSpent"`
	Iid                                pulumi.IntInput                                     `pulumi:"iid"`
	IssueId                            pulumi.IntInput                                     `pulumi:"issueId"`
	IssueLinkId                        pulumi.IntInput                                     `pulumi:"issueLinkId"`
	IssueType                          pulumi.StringInput                                  `pulumi:"issueType"`
	Labels                             pulumi.StringArrayInput                             `pulumi:"labels"`
	Links                              pulumi.StringMapInput                               `pulumi:"links"`
	MergeRequestToResolveDiscussionsOf pulumi.IntInput                                     `pulumi:"mergeRequestToResolveDiscussionsOf"`
	MergeRequestsCount                 pulumi.IntInput                                     `pulumi:"mergeRequestsCount"`
	MilestoneId                        pulumi.IntInput                                     `pulumi:"milestoneId"`
	MovedToId                          pulumi.IntInput                                     `pulumi:"movedToId"`
	Project                            pulumi.StringInput                                  `pulumi:"project"`
	References                         pulumi.StringMapInput                               `pulumi:"references"`
	State                              pulumi.StringInput                                  `pulumi:"state"`
	Subscribed                         pulumi.BoolInput                                    `pulumi:"subscribed"`
	TaskCompletionStatuses             GetProjectIssuesIssueTaskCompletionStatusArrayInput `pulumi:"taskCompletionStatuses"`
	TimeEstimate                       pulumi.IntInput                                     `pulumi:"timeEstimate"`
	Title                              pulumi.StringInput                                  `pulumi:"title"`
	TotalTimeSpent                     pulumi.IntInput                                     `pulumi:"totalTimeSpent"`
	UpdatedAt                          pulumi.StringInput                                  `pulumi:"updatedAt"`
	Upvotes                            pulumi.IntInput                                     `pulumi:"upvotes"`
	UserNotesCount                     pulumi.IntInput                                     `pulumi:"userNotesCount"`
	WebUrl                             pulumi.StringInput                                  `pulumi:"webUrl"`
	Weight                             pulumi.IntInput                                     `pulumi:"weight"`
}

func (GetProjectIssuesIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssue)(nil)).Elem()
}

func (i GetProjectIssuesIssueArgs) ToGetProjectIssuesIssueOutput() GetProjectIssuesIssueOutput {
	return i.ToGetProjectIssuesIssueOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueArgs) ToGetProjectIssuesIssueOutputWithContext(ctx context.Context) GetProjectIssuesIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueOutput)
}

func (i GetProjectIssuesIssueArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectIssuesIssue] {
	return pulumix.Output[GetProjectIssuesIssue]{
		OutputState: i.ToGetProjectIssuesIssueOutputWithContext(ctx).OutputState,
	}
}

// GetProjectIssuesIssueArrayInput is an input type that accepts GetProjectIssuesIssueArray and GetProjectIssuesIssueArrayOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueArrayInput` via:
//
//	GetProjectIssuesIssueArray{ GetProjectIssuesIssueArgs{...} }
type GetProjectIssuesIssueArrayInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueArrayOutput() GetProjectIssuesIssueArrayOutput
	ToGetProjectIssuesIssueArrayOutputWithContext(context.Context) GetProjectIssuesIssueArrayOutput
}

type GetProjectIssuesIssueArray []GetProjectIssuesIssueInput

func (GetProjectIssuesIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssue)(nil)).Elem()
}

func (i GetProjectIssuesIssueArray) ToGetProjectIssuesIssueArrayOutput() GetProjectIssuesIssueArrayOutput {
	return i.ToGetProjectIssuesIssueArrayOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueArray) ToGetProjectIssuesIssueArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueArrayOutput)
}

func (i GetProjectIssuesIssueArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectIssuesIssue] {
	return pulumix.Output[[]GetProjectIssuesIssue]{
		OutputState: i.ToGetProjectIssuesIssueArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectIssuesIssueOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssue)(nil)).Elem()
}

func (o GetProjectIssuesIssueOutput) ToGetProjectIssuesIssueOutput() GetProjectIssuesIssueOutput {
	return o
}

func (o GetProjectIssuesIssueOutput) ToGetProjectIssuesIssueOutputWithContext(ctx context.Context) GetProjectIssuesIssueOutput {
	return o
}

func (o GetProjectIssuesIssueOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectIssuesIssue] {
	return pulumix.Output[GetProjectIssuesIssue]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectIssuesIssueOutput) AssigneeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) []int { return v.AssigneeIds }).(pulumi.IntArrayOutput)
}

func (o GetProjectIssuesIssueOutput) AuthorId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.AuthorId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) ClosedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.ClosedAt }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) ClosedByUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.ClosedByUserId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) Confidential() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) bool { return v.Confidential }).(pulumi.BoolOutput)
}

func (o GetProjectIssuesIssueOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) DiscussionLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) bool { return v.DiscussionLocked }).(pulumi.BoolOutput)
}

func (o GetProjectIssuesIssueOutput) DiscussionToResolve() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.DiscussionToResolve }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) Downvotes() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Downvotes }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) DueDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.DueDate }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) EpicId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.EpicId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) EpicIssueId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.EpicIssueId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.ExternalId }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) HumanTimeEstimate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.HumanTimeEstimate }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) HumanTotalTimeSpent() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.HumanTotalTimeSpent }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) Iid() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Iid }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) IssueId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.IssueId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) IssueLinkId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.IssueLinkId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) IssueType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.IssueType }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o GetProjectIssuesIssueOutput) Links() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) map[string]string { return v.Links }).(pulumi.StringMapOutput)
}

func (o GetProjectIssuesIssueOutput) MergeRequestToResolveDiscussionsOf() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MergeRequestToResolveDiscussionsOf }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) MergeRequestsCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MergeRequestsCount }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) MilestoneId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MilestoneId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) MovedToId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.MovedToId }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) References() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) map[string]string { return v.References }).(pulumi.StringMapOutput)
}

func (o GetProjectIssuesIssueOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.State }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) Subscribed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) bool { return v.Subscribed }).(pulumi.BoolOutput)
}

func (o GetProjectIssuesIssueOutput) TaskCompletionStatuses() GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) []GetProjectIssuesIssueTaskCompletionStatus {
		return v.TaskCompletionStatuses
	}).(GetProjectIssuesIssueTaskCompletionStatusArrayOutput)
}

func (o GetProjectIssuesIssueOutput) TimeEstimate() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.TimeEstimate }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) TotalTimeSpent() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.TotalTimeSpent }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) Upvotes() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Upvotes }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) UserNotesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.UserNotesCount }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) string { return v.WebUrl }).(pulumi.StringOutput)
}

func (o GetProjectIssuesIssueOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssue) int { return v.Weight }).(pulumi.IntOutput)
}

type GetProjectIssuesIssueArrayOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssue)(nil)).Elem()
}

func (o GetProjectIssuesIssueArrayOutput) ToGetProjectIssuesIssueArrayOutput() GetProjectIssuesIssueArrayOutput {
	return o
}

func (o GetProjectIssuesIssueArrayOutput) ToGetProjectIssuesIssueArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueArrayOutput {
	return o
}

func (o GetProjectIssuesIssueArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectIssuesIssue] {
	return pulumix.Output[[]GetProjectIssuesIssue]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectIssuesIssueArrayOutput) Index(i pulumi.IntInput) GetProjectIssuesIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectIssuesIssue {
		return vs[0].([]GetProjectIssuesIssue)[vs[1].(int)]
	}).(GetProjectIssuesIssueOutput)
}

type GetProjectIssuesIssueTaskCompletionStatus struct {
	CompletedCount int `pulumi:"completedCount"`
	Count          int `pulumi:"count"`
}

// GetProjectIssuesIssueTaskCompletionStatusInput is an input type that accepts GetProjectIssuesIssueTaskCompletionStatusArgs and GetProjectIssuesIssueTaskCompletionStatusOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueTaskCompletionStatusInput` via:
//
//	GetProjectIssuesIssueTaskCompletionStatusArgs{...}
type GetProjectIssuesIssueTaskCompletionStatusInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueTaskCompletionStatusOutput() GetProjectIssuesIssueTaskCompletionStatusOutput
	ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(context.Context) GetProjectIssuesIssueTaskCompletionStatusOutput
}

type GetProjectIssuesIssueTaskCompletionStatusArgs struct {
	CompletedCount pulumi.IntInput `pulumi:"completedCount"`
	Count          pulumi.IntInput `pulumi:"count"`
}

func (GetProjectIssuesIssueTaskCompletionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssuesIssueTaskCompletionStatusArgs) ToGetProjectIssuesIssueTaskCompletionStatusOutput() GetProjectIssuesIssueTaskCompletionStatusOutput {
	return i.ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueTaskCompletionStatusArgs) ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueTaskCompletionStatusOutput)
}

func (i GetProjectIssuesIssueTaskCompletionStatusArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectIssuesIssueTaskCompletionStatus] {
	return pulumix.Output[GetProjectIssuesIssueTaskCompletionStatus]{
		OutputState: i.ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(ctx).OutputState,
	}
}

// GetProjectIssuesIssueTaskCompletionStatusArrayInput is an input type that accepts GetProjectIssuesIssueTaskCompletionStatusArray and GetProjectIssuesIssueTaskCompletionStatusArrayOutput values.
// You can construct a concrete instance of `GetProjectIssuesIssueTaskCompletionStatusArrayInput` via:
//
//	GetProjectIssuesIssueTaskCompletionStatusArray{ GetProjectIssuesIssueTaskCompletionStatusArgs{...} }
type GetProjectIssuesIssueTaskCompletionStatusArrayInput interface {
	pulumi.Input

	ToGetProjectIssuesIssueTaskCompletionStatusArrayOutput() GetProjectIssuesIssueTaskCompletionStatusArrayOutput
	ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(context.Context) GetProjectIssuesIssueTaskCompletionStatusArrayOutput
}

type GetProjectIssuesIssueTaskCompletionStatusArray []GetProjectIssuesIssueTaskCompletionStatusInput

func (GetProjectIssuesIssueTaskCompletionStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (i GetProjectIssuesIssueTaskCompletionStatusArray) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutput() GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return i.ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(context.Background())
}

func (i GetProjectIssuesIssueTaskCompletionStatusArray) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIssuesIssueTaskCompletionStatusArrayOutput)
}

func (i GetProjectIssuesIssueTaskCompletionStatusArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectIssuesIssueTaskCompletionStatus] {
	return pulumix.Output[[]GetProjectIssuesIssueTaskCompletionStatus]{
		OutputState: i.ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectIssuesIssueTaskCompletionStatusOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueTaskCompletionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssuesIssueTaskCompletionStatusOutput) ToGetProjectIssuesIssueTaskCompletionStatusOutput() GetProjectIssuesIssueTaskCompletionStatusOutput {
	return o
}

func (o GetProjectIssuesIssueTaskCompletionStatusOutput) ToGetProjectIssuesIssueTaskCompletionStatusOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusOutput {
	return o
}

func (o GetProjectIssuesIssueTaskCompletionStatusOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectIssuesIssueTaskCompletionStatus] {
	return pulumix.Output[GetProjectIssuesIssueTaskCompletionStatus]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectIssuesIssueTaskCompletionStatusOutput) CompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssueTaskCompletionStatus) int { return v.CompletedCount }).(pulumi.IntOutput)
}

func (o GetProjectIssuesIssueTaskCompletionStatusOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectIssuesIssueTaskCompletionStatus) int { return v.Count }).(pulumi.IntOutput)
}

type GetProjectIssuesIssueTaskCompletionStatusArrayOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesIssueTaskCompletionStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIssuesIssueTaskCompletionStatus)(nil)).Elem()
}

func (o GetProjectIssuesIssueTaskCompletionStatusArrayOutput) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutput() GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssuesIssueTaskCompletionStatusArrayOutput) ToGetProjectIssuesIssueTaskCompletionStatusArrayOutputWithContext(ctx context.Context) GetProjectIssuesIssueTaskCompletionStatusArrayOutput {
	return o
}

func (o GetProjectIssuesIssueTaskCompletionStatusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectIssuesIssueTaskCompletionStatus] {
	return pulumix.Output[[]GetProjectIssuesIssueTaskCompletionStatus]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectIssuesIssueTaskCompletionStatusArrayOutput) Index(i pulumi.IntInput) GetProjectIssuesIssueTaskCompletionStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectIssuesIssueTaskCompletionStatus {
		return vs[0].([]GetProjectIssuesIssueTaskCompletionStatus)[vs[1].(int)]
	}).(GetProjectIssuesIssueTaskCompletionStatusOutput)
}

type GetProjectMembershipMember struct {
	AccessLevel string `pulumi:"accessLevel"`
	AvatarUrl   string `pulumi:"avatarUrl"`
	ExpiresAt   string `pulumi:"expiresAt"`
	Id          int    `pulumi:"id"`
	Name        string `pulumi:"name"`
	State       string `pulumi:"state"`
	Username    string `pulumi:"username"`
	WebUrl      string `pulumi:"webUrl"`
}

// GetProjectMembershipMemberInput is an input type that accepts GetProjectMembershipMemberArgs and GetProjectMembershipMemberOutput values.
// You can construct a concrete instance of `GetProjectMembershipMemberInput` via:
//
//	GetProjectMembershipMemberArgs{...}
type GetProjectMembershipMemberInput interface {
	pulumi.Input

	ToGetProjectMembershipMemberOutput() GetProjectMembershipMemberOutput
	ToGetProjectMembershipMemberOutputWithContext(context.Context) GetProjectMembershipMemberOutput
}

type GetProjectMembershipMemberArgs struct {
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	AvatarUrl   pulumi.StringInput `pulumi:"avatarUrl"`
	ExpiresAt   pulumi.StringInput `pulumi:"expiresAt"`
	Id          pulumi.IntInput    `pulumi:"id"`
	Name        pulumi.StringInput `pulumi:"name"`
	State       pulumi.StringInput `pulumi:"state"`
	Username    pulumi.StringInput `pulumi:"username"`
	WebUrl      pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectMembershipMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMembershipMember)(nil)).Elem()
}

func (i GetProjectMembershipMemberArgs) ToGetProjectMembershipMemberOutput() GetProjectMembershipMemberOutput {
	return i.ToGetProjectMembershipMemberOutputWithContext(context.Background())
}

func (i GetProjectMembershipMemberArgs) ToGetProjectMembershipMemberOutputWithContext(ctx context.Context) GetProjectMembershipMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMembershipMemberOutput)
}

func (i GetProjectMembershipMemberArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectMembershipMember] {
	return pulumix.Output[GetProjectMembershipMember]{
		OutputState: i.ToGetProjectMembershipMemberOutputWithContext(ctx).OutputState,
	}
}

// GetProjectMembershipMemberArrayInput is an input type that accepts GetProjectMembershipMemberArray and GetProjectMembershipMemberArrayOutput values.
// You can construct a concrete instance of `GetProjectMembershipMemberArrayInput` via:
//
//	GetProjectMembershipMemberArray{ GetProjectMembershipMemberArgs{...} }
type GetProjectMembershipMemberArrayInput interface {
	pulumi.Input

	ToGetProjectMembershipMemberArrayOutput() GetProjectMembershipMemberArrayOutput
	ToGetProjectMembershipMemberArrayOutputWithContext(context.Context) GetProjectMembershipMemberArrayOutput
}

type GetProjectMembershipMemberArray []GetProjectMembershipMemberInput

func (GetProjectMembershipMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMembershipMember)(nil)).Elem()
}

func (i GetProjectMembershipMemberArray) ToGetProjectMembershipMemberArrayOutput() GetProjectMembershipMemberArrayOutput {
	return i.ToGetProjectMembershipMemberArrayOutputWithContext(context.Background())
}

func (i GetProjectMembershipMemberArray) ToGetProjectMembershipMemberArrayOutputWithContext(ctx context.Context) GetProjectMembershipMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMembershipMemberArrayOutput)
}

func (i GetProjectMembershipMemberArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectMembershipMember] {
	return pulumix.Output[[]GetProjectMembershipMember]{
		OutputState: i.ToGetProjectMembershipMemberArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectMembershipMemberOutput struct{ *pulumi.OutputState }

func (GetProjectMembershipMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMembershipMember)(nil)).Elem()
}

func (o GetProjectMembershipMemberOutput) ToGetProjectMembershipMemberOutput() GetProjectMembershipMemberOutput {
	return o
}

func (o GetProjectMembershipMemberOutput) ToGetProjectMembershipMemberOutputWithContext(ctx context.Context) GetProjectMembershipMemberOutput {
	return o
}

func (o GetProjectMembershipMemberOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectMembershipMember] {
	return pulumix.Output[GetProjectMembershipMember]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectMembershipMemberOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.AccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectMembershipMemberOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetProjectMembershipMemberOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

func (o GetProjectMembershipMemberOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectMembershipMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectMembershipMemberOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.State }).(pulumi.StringOutput)
}

func (o GetProjectMembershipMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.Username }).(pulumi.StringOutput)
}

func (o GetProjectMembershipMemberOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMembershipMember) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectMembershipMemberArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMembershipMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMembershipMember)(nil)).Elem()
}

func (o GetProjectMembershipMemberArrayOutput) ToGetProjectMembershipMemberArrayOutput() GetProjectMembershipMemberArrayOutput {
	return o
}

func (o GetProjectMembershipMemberArrayOutput) ToGetProjectMembershipMemberArrayOutputWithContext(ctx context.Context) GetProjectMembershipMemberArrayOutput {
	return o
}

func (o GetProjectMembershipMemberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectMembershipMember] {
	return pulumix.Output[[]GetProjectMembershipMember]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectMembershipMemberArrayOutput) Index(i pulumi.IntInput) GetProjectMembershipMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMembershipMember {
		return vs[0].([]GetProjectMembershipMember)[vs[1].(int)]
	}).(GetProjectMembershipMemberOutput)
}

type GetProjectMilestonesMilestone struct {
	CreatedAt   string `pulumi:"createdAt"`
	Description string `pulumi:"description"`
	DueDate     string `pulumi:"dueDate"`
	Expired     bool   `pulumi:"expired"`
	Iid         int    `pulumi:"iid"`
	MilestoneId int    `pulumi:"milestoneId"`
	Project     string `pulumi:"project"`
	ProjectId   int    `pulumi:"projectId"`
	StartDate   string `pulumi:"startDate"`
	State       string `pulumi:"state"`
	Title       string `pulumi:"title"`
	UpdatedAt   string `pulumi:"updatedAt"`
	WebUrl      string `pulumi:"webUrl"`
}

// GetProjectMilestonesMilestoneInput is an input type that accepts GetProjectMilestonesMilestoneArgs and GetProjectMilestonesMilestoneOutput values.
// You can construct a concrete instance of `GetProjectMilestonesMilestoneInput` via:
//
//	GetProjectMilestonesMilestoneArgs{...}
type GetProjectMilestonesMilestoneInput interface {
	pulumi.Input

	ToGetProjectMilestonesMilestoneOutput() GetProjectMilestonesMilestoneOutput
	ToGetProjectMilestonesMilestoneOutputWithContext(context.Context) GetProjectMilestonesMilestoneOutput
}

type GetProjectMilestonesMilestoneArgs struct {
	CreatedAt   pulumi.StringInput `pulumi:"createdAt"`
	Description pulumi.StringInput `pulumi:"description"`
	DueDate     pulumi.StringInput `pulumi:"dueDate"`
	Expired     pulumi.BoolInput   `pulumi:"expired"`
	Iid         pulumi.IntInput    `pulumi:"iid"`
	MilestoneId pulumi.IntInput    `pulumi:"milestoneId"`
	Project     pulumi.StringInput `pulumi:"project"`
	ProjectId   pulumi.IntInput    `pulumi:"projectId"`
	StartDate   pulumi.StringInput `pulumi:"startDate"`
	State       pulumi.StringInput `pulumi:"state"`
	Title       pulumi.StringInput `pulumi:"title"`
	UpdatedAt   pulumi.StringInput `pulumi:"updatedAt"`
	WebUrl      pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectMilestonesMilestoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMilestonesMilestone)(nil)).Elem()
}

func (i GetProjectMilestonesMilestoneArgs) ToGetProjectMilestonesMilestoneOutput() GetProjectMilestonesMilestoneOutput {
	return i.ToGetProjectMilestonesMilestoneOutputWithContext(context.Background())
}

func (i GetProjectMilestonesMilestoneArgs) ToGetProjectMilestonesMilestoneOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMilestonesMilestoneOutput)
}

func (i GetProjectMilestonesMilestoneArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectMilestonesMilestone] {
	return pulumix.Output[GetProjectMilestonesMilestone]{
		OutputState: i.ToGetProjectMilestonesMilestoneOutputWithContext(ctx).OutputState,
	}
}

// GetProjectMilestonesMilestoneArrayInput is an input type that accepts GetProjectMilestonesMilestoneArray and GetProjectMilestonesMilestoneArrayOutput values.
// You can construct a concrete instance of `GetProjectMilestonesMilestoneArrayInput` via:
//
//	GetProjectMilestonesMilestoneArray{ GetProjectMilestonesMilestoneArgs{...} }
type GetProjectMilestonesMilestoneArrayInput interface {
	pulumi.Input

	ToGetProjectMilestonesMilestoneArrayOutput() GetProjectMilestonesMilestoneArrayOutput
	ToGetProjectMilestonesMilestoneArrayOutputWithContext(context.Context) GetProjectMilestonesMilestoneArrayOutput
}

type GetProjectMilestonesMilestoneArray []GetProjectMilestonesMilestoneInput

func (GetProjectMilestonesMilestoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMilestonesMilestone)(nil)).Elem()
}

func (i GetProjectMilestonesMilestoneArray) ToGetProjectMilestonesMilestoneArrayOutput() GetProjectMilestonesMilestoneArrayOutput {
	return i.ToGetProjectMilestonesMilestoneArrayOutputWithContext(context.Background())
}

func (i GetProjectMilestonesMilestoneArray) ToGetProjectMilestonesMilestoneArrayOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMilestonesMilestoneArrayOutput)
}

func (i GetProjectMilestonesMilestoneArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectMilestonesMilestone] {
	return pulumix.Output[[]GetProjectMilestonesMilestone]{
		OutputState: i.ToGetProjectMilestonesMilestoneArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectMilestonesMilestoneOutput struct{ *pulumi.OutputState }

func (GetProjectMilestonesMilestoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMilestonesMilestone)(nil)).Elem()
}

func (o GetProjectMilestonesMilestoneOutput) ToGetProjectMilestonesMilestoneOutput() GetProjectMilestonesMilestoneOutput {
	return o
}

func (o GetProjectMilestonesMilestoneOutput) ToGetProjectMilestonesMilestoneOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneOutput {
	return o
}

func (o GetProjectMilestonesMilestoneOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectMilestonesMilestone] {
	return pulumix.Output[GetProjectMilestonesMilestone]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectMilestonesMilestoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) DueDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.DueDate }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) Expired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) bool { return v.Expired }).(pulumi.BoolOutput)
}

func (o GetProjectMilestonesMilestoneOutput) Iid() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) int { return v.Iid }).(pulumi.IntOutput)
}

func (o GetProjectMilestonesMilestoneOutput) MilestoneId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) int { return v.MilestoneId }).(pulumi.IntOutput)
}

func (o GetProjectMilestonesMilestoneOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o GetProjectMilestonesMilestoneOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.StartDate }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.State }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o GetProjectMilestonesMilestoneOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMilestonesMilestone) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectMilestonesMilestoneArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMilestonesMilestoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMilestonesMilestone)(nil)).Elem()
}

func (o GetProjectMilestonesMilestoneArrayOutput) ToGetProjectMilestonesMilestoneArrayOutput() GetProjectMilestonesMilestoneArrayOutput {
	return o
}

func (o GetProjectMilestonesMilestoneArrayOutput) ToGetProjectMilestonesMilestoneArrayOutputWithContext(ctx context.Context) GetProjectMilestonesMilestoneArrayOutput {
	return o
}

func (o GetProjectMilestonesMilestoneArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectMilestonesMilestone] {
	return pulumix.Output[[]GetProjectMilestonesMilestone]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectMilestonesMilestoneArrayOutput) Index(i pulumi.IntInput) GetProjectMilestonesMilestoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMilestonesMilestone {
		return vs[0].([]GetProjectMilestonesMilestone)[vs[1].(int)]
	}).(GetProjectMilestonesMilestoneOutput)
}

type GetProjectProtectedBranchMergeAccessLevel struct {
	AccessLevel            string `pulumi:"accessLevel"`
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	GroupId                int    `pulumi:"groupId"`
	UserId                 int    `pulumi:"userId"`
}

// GetProjectProtectedBranchMergeAccessLevelInput is an input type that accepts GetProjectProtectedBranchMergeAccessLevelArgs and GetProjectProtectedBranchMergeAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchMergeAccessLevelInput` via:
//
//	GetProjectProtectedBranchMergeAccessLevelArgs{...}
type GetProjectProtectedBranchMergeAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchMergeAccessLevelOutput
	ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchMergeAccessLevelOutput
}

type GetProjectProtectedBranchMergeAccessLevelArgs struct {
	AccessLevel            pulumi.StringInput `pulumi:"accessLevel"`
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	GroupId                pulumi.IntInput    `pulumi:"groupId"`
	UserId                 pulumi.IntInput    `pulumi:"userId"`
}

func (GetProjectProtectedBranchMergeAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchMergeAccessLevelOutput {
	return i.ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchMergeAccessLevelOutput)
}

func (i GetProjectProtectedBranchMergeAccessLevelArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchMergeAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchMergeAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(ctx).OutputState,
	}
}

// GetProjectProtectedBranchMergeAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchMergeAccessLevelArray and GetProjectProtectedBranchMergeAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchMergeAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchMergeAccessLevelArray{ GetProjectProtectedBranchMergeAccessLevelArgs{...} }
type GetProjectProtectedBranchMergeAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchMergeAccessLevelArrayOutput
	ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchMergeAccessLevelArrayOutput
}

type GetProjectProtectedBranchMergeAccessLevelArray []GetProjectProtectedBranchMergeAccessLevelInput

func (GetProjectProtectedBranchMergeAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchMergeAccessLevelArrayOutput)
}

func (i GetProjectProtectedBranchMergeAccessLevelArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchMergeAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchMergeAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectProtectedBranchMergeAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchMergeAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchMergeAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchMergeAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchMergeAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) string { return v.AccessLevelDescription }).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetProjectProtectedBranchMergeAccessLevelOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchMergeAccessLevel) int { return v.UserId }).(pulumi.IntOutput)
}

type GetProjectProtectedBranchMergeAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchMergeAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchMergeAccessLevelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchMergeAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchMergeAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchMergeAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchMergeAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchMergeAccessLevel {
		return vs[0].([]GetProjectProtectedBranchMergeAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchMergeAccessLevelOutput)
}

type GetProjectProtectedBranchPushAccessLevel struct {
	AccessLevel            string `pulumi:"accessLevel"`
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	GroupId                int    `pulumi:"groupId"`
	UserId                 int    `pulumi:"userId"`
}

// GetProjectProtectedBranchPushAccessLevelInput is an input type that accepts GetProjectProtectedBranchPushAccessLevelArgs and GetProjectProtectedBranchPushAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchPushAccessLevelInput` via:
//
//	GetProjectProtectedBranchPushAccessLevelArgs{...}
type GetProjectProtectedBranchPushAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchPushAccessLevelOutput
	ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchPushAccessLevelOutput
}

type GetProjectProtectedBranchPushAccessLevelArgs struct {
	AccessLevel            pulumi.StringInput `pulumi:"accessLevel"`
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	GroupId                pulumi.IntInput    `pulumi:"groupId"`
	UserId                 pulumi.IntInput    `pulumi:"userId"`
}

func (GetProjectProtectedBranchPushAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchPushAccessLevelOutput {
	return i.ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchPushAccessLevelOutput)
}

func (i GetProjectProtectedBranchPushAccessLevelArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchPushAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchPushAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(ctx).OutputState,
	}
}

// GetProjectProtectedBranchPushAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchPushAccessLevelArray and GetProjectProtectedBranchPushAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchPushAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchPushAccessLevelArray{ GetProjectProtectedBranchPushAccessLevelArgs{...} }
type GetProjectProtectedBranchPushAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchPushAccessLevelArrayOutput
	ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchPushAccessLevelArrayOutput
}

type GetProjectProtectedBranchPushAccessLevelArray []GetProjectProtectedBranchPushAccessLevelInput

func (GetProjectProtectedBranchPushAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchPushAccessLevelArrayOutput)
}

func (i GetProjectProtectedBranchPushAccessLevelArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchPushAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchPushAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectProtectedBranchPushAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchPushAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchPushAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchPushAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchPushAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) string { return v.AccessLevelDescription }).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetProjectProtectedBranchPushAccessLevelOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchPushAccessLevel) int { return v.UserId }).(pulumi.IntOutput)
}

type GetProjectProtectedBranchPushAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchPushAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchPushAccessLevelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchPushAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchPushAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchPushAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchPushAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchPushAccessLevel {
		return vs[0].([]GetProjectProtectedBranchPushAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchPushAccessLevelOutput)
}

type GetProjectProtectedBranchesProtectedBranch struct {
	AllowForcePush            bool                                                         `pulumi:"allowForcePush"`
	CodeOwnerApprovalRequired bool                                                         `pulumi:"codeOwnerApprovalRequired"`
	Id                        int                                                          `pulumi:"id"`
	MergeAccessLevels         []GetProjectProtectedBranchesProtectedBranchMergeAccessLevel `pulumi:"mergeAccessLevels"`
	Name                      string                                                       `pulumi:"name"`
	PushAccessLevels          []GetProjectProtectedBranchesProtectedBranchPushAccessLevel  `pulumi:"pushAccessLevels"`
}

// GetProjectProtectedBranchesProtectedBranchInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchArgs and GetProjectProtectedBranchesProtectedBranchOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchArgs{...}
type GetProjectProtectedBranchesProtectedBranchInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchOutput() GetProjectProtectedBranchesProtectedBranchOutput
	ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchOutput
}

type GetProjectProtectedBranchesProtectedBranchArgs struct {
	AllowForcePush            pulumi.BoolInput                                                     `pulumi:"allowForcePush"`
	CodeOwnerApprovalRequired pulumi.BoolInput                                                     `pulumi:"codeOwnerApprovalRequired"`
	Id                        pulumi.IntInput                                                      `pulumi:"id"`
	MergeAccessLevels         GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput `pulumi:"mergeAccessLevels"`
	Name                      pulumi.StringInput                                                   `pulumi:"name"`
	PushAccessLevels          GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput  `pulumi:"pushAccessLevels"`
}

func (GetProjectProtectedBranchesProtectedBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchArgs) ToGetProjectProtectedBranchesProtectedBranchOutput() GetProjectProtectedBranchesProtectedBranchOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchArgs) ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchOutput)
}

func (i GetProjectProtectedBranchesProtectedBranchArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchesProtectedBranch] {
	return pulumix.Output[GetProjectProtectedBranchesProtectedBranch]{
		OutputState: i.ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(ctx).OutputState,
	}
}

// GetProjectProtectedBranchesProtectedBranchArrayInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchArray and GetProjectProtectedBranchesProtectedBranchArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchArrayInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchArray{ GetProjectProtectedBranchesProtectedBranchArgs{...} }
type GetProjectProtectedBranchesProtectedBranchArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchArrayOutput() GetProjectProtectedBranchesProtectedBranchArrayOutput
	ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchArrayOutput
}

type GetProjectProtectedBranchesProtectedBranchArray []GetProjectProtectedBranchesProtectedBranchInput

func (GetProjectProtectedBranchesProtectedBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchArray) ToGetProjectProtectedBranchesProtectedBranchArrayOutput() GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchArray) ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchArrayOutput)
}

func (i GetProjectProtectedBranchesProtectedBranchArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchesProtectedBranch] {
	return pulumix.Output[[]GetProjectProtectedBranchesProtectedBranch]{
		OutputState: i.ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectProtectedBranchesProtectedBranchOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) ToGetProjectProtectedBranchesProtectedBranchOutput() GetProjectProtectedBranchesProtectedBranchOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) ToGetProjectProtectedBranchesProtectedBranchOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchesProtectedBranch] {
	return pulumix.Output[GetProjectProtectedBranchesProtectedBranch]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) AllowForcePush() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) bool { return v.AllowForcePush }).(pulumi.BoolOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) CodeOwnerApprovalRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) bool { return v.CodeOwnerApprovalRequired }).(pulumi.BoolOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) MergeAccessLevels() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) []GetProjectProtectedBranchesProtectedBranchMergeAccessLevel {
		return v.MergeAccessLevels
	}).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchOutput) PushAccessLevels() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranch) []GetProjectProtectedBranchesProtectedBranchPushAccessLevel {
		return v.PushAccessLevels
	}).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput)
}

type GetProjectProtectedBranchesProtectedBranchArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranch)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchArrayOutput) ToGetProjectProtectedBranchesProtectedBranchArrayOutput() GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchArrayOutput) ToGetProjectProtectedBranchesProtectedBranchArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchesProtectedBranch] {
	return pulumix.Output[[]GetProjectProtectedBranchesProtectedBranch]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchesProtectedBranchArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchesProtectedBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchesProtectedBranch {
		return vs[0].([]GetProjectProtectedBranchesProtectedBranch)[vs[1].(int)]
	}).(GetProjectProtectedBranchesProtectedBranchOutput)
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevel struct {
	AccessLevel            string `pulumi:"accessLevel"`
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	GroupId                int    `pulumi:"groupId"`
	UserId                 int    `pulumi:"userId"`
}

// GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs and GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs{...}
type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput
	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs struct {
	AccessLevel            pulumi.StringInput `pulumi:"accessLevel"`
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	GroupId                pulumi.IntInput    `pulumi:"groupId"`
	UserId                 pulumi.IntInput    `pulumi:"userId"`
}

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput)
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchesProtectedBranchMergeAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchesProtectedBranchMergeAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(ctx).OutputState,
	}
}

// GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray and GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray{ GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs{...} }
type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput
	ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray []GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput)
}

func (i GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchesProtectedBranchMergeAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchesProtectedBranchMergeAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) string {
		return v.AccessLevelDescription
	}).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchMergeAccessLevel) int { return v.UserId }).(pulumi.IntOutput)
}

type GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchesProtectedBranchMergeAccessLevel {
		return vs[0].([]GetProjectProtectedBranchesProtectedBranchMergeAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput)
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevel struct {
	AccessLevel            string `pulumi:"accessLevel"`
	AccessLevelDescription string `pulumi:"accessLevelDescription"`
	GroupId                int    `pulumi:"groupId"`
	UserId                 int    `pulumi:"userId"`
}

// GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs and GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs{...}
type GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput
	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs struct {
	AccessLevel            pulumi.StringInput `pulumi:"accessLevel"`
	AccessLevelDescription pulumi.StringInput `pulumi:"accessLevelDescription"`
	GroupId                pulumi.IntInput    `pulumi:"groupId"`
	UserId                 pulumi.IntInput    `pulumi:"userId"`
}

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput)
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchesProtectedBranchPushAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchesProtectedBranchPushAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(ctx).OutputState,
	}
}

// GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput is an input type that accepts GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray and GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput values.
// You can construct a concrete instance of `GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput` via:
//
//	GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray{ GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs{...} }
type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput interface {
	pulumi.Input

	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput
	ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray []GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return i.ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(context.Background())
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput)
}

func (i GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel]{
		OutputState: i.ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectProtectedBranchesProtectedBranchPushAccessLevel] {
	return pulumix.Output[GetProjectProtectedBranchesProtectedBranchPushAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) string { return v.AccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) AccessLevelDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) string {
		return v.AccessLevelDescription
	}).(pulumi.StringOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectProtectedBranchesProtectedBranchPushAccessLevel) int { return v.UserId }).(pulumi.IntOutput)
}

type GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel)(nil)).Elem()
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput() GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) ToGetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutputWithContext(ctx context.Context) GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput {
	return o
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel] {
	return pulumix.Output[[]GetProjectProtectedBranchesProtectedBranchPushAccessLevel]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput) Index(i pulumi.IntInput) GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectProtectedBranchesProtectedBranchPushAccessLevel {
		return vs[0].([]GetProjectProtectedBranchesProtectedBranchPushAccessLevel)[vs[1].(int)]
	}).(GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput)
}

type GetProjectPushRule struct {
	AuthorEmailRegex           string `pulumi:"authorEmailRegex"`
	BranchNameRegex            string `pulumi:"branchNameRegex"`
	CommitCommitterCheck       bool   `pulumi:"commitCommitterCheck"`
	CommitMessageNegativeRegex string `pulumi:"commitMessageNegativeRegex"`
	CommitMessageRegex         string `pulumi:"commitMessageRegex"`
	DenyDeleteTag              bool   `pulumi:"denyDeleteTag"`
	FileNameRegex              string `pulumi:"fileNameRegex"`
	MaxFileSize                int    `pulumi:"maxFileSize"`
	MemberCheck                bool   `pulumi:"memberCheck"`
	PreventSecrets             bool   `pulumi:"preventSecrets"`
	RejectUnsignedCommits      bool   `pulumi:"rejectUnsignedCommits"`
}

// GetProjectPushRuleInput is an input type that accepts GetProjectPushRuleArgs and GetProjectPushRuleOutput values.
// You can construct a concrete instance of `GetProjectPushRuleInput` via:
//
//	GetProjectPushRuleArgs{...}
type GetProjectPushRuleInput interface {
	pulumi.Input

	ToGetProjectPushRuleOutput() GetProjectPushRuleOutput
	ToGetProjectPushRuleOutputWithContext(context.Context) GetProjectPushRuleOutput
}

type GetProjectPushRuleArgs struct {
	AuthorEmailRegex           pulumi.StringInput `pulumi:"authorEmailRegex"`
	BranchNameRegex            pulumi.StringInput `pulumi:"branchNameRegex"`
	CommitCommitterCheck       pulumi.BoolInput   `pulumi:"commitCommitterCheck"`
	CommitMessageNegativeRegex pulumi.StringInput `pulumi:"commitMessageNegativeRegex"`
	CommitMessageRegex         pulumi.StringInput `pulumi:"commitMessageRegex"`
	DenyDeleteTag              pulumi.BoolInput   `pulumi:"denyDeleteTag"`
	FileNameRegex              pulumi.StringInput `pulumi:"fileNameRegex"`
	MaxFileSize                pulumi.IntInput    `pulumi:"maxFileSize"`
	MemberCheck                pulumi.BoolInput   `pulumi:"memberCheck"`
	PreventSecrets             pulumi.BoolInput   `pulumi:"preventSecrets"`
	RejectUnsignedCommits      pulumi.BoolInput   `pulumi:"rejectUnsignedCommits"`
}

func (GetProjectPushRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPushRule)(nil)).Elem()
}

func (i GetProjectPushRuleArgs) ToGetProjectPushRuleOutput() GetProjectPushRuleOutput {
	return i.ToGetProjectPushRuleOutputWithContext(context.Background())
}

func (i GetProjectPushRuleArgs) ToGetProjectPushRuleOutputWithContext(ctx context.Context) GetProjectPushRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectPushRuleOutput)
}

func (i GetProjectPushRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectPushRule] {
	return pulumix.Output[GetProjectPushRule]{
		OutputState: i.ToGetProjectPushRuleOutputWithContext(ctx).OutputState,
	}
}

// GetProjectPushRuleArrayInput is an input type that accepts GetProjectPushRuleArray and GetProjectPushRuleArrayOutput values.
// You can construct a concrete instance of `GetProjectPushRuleArrayInput` via:
//
//	GetProjectPushRuleArray{ GetProjectPushRuleArgs{...} }
type GetProjectPushRuleArrayInput interface {
	pulumi.Input

	ToGetProjectPushRuleArrayOutput() GetProjectPushRuleArrayOutput
	ToGetProjectPushRuleArrayOutputWithContext(context.Context) GetProjectPushRuleArrayOutput
}

type GetProjectPushRuleArray []GetProjectPushRuleInput

func (GetProjectPushRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectPushRule)(nil)).Elem()
}

func (i GetProjectPushRuleArray) ToGetProjectPushRuleArrayOutput() GetProjectPushRuleArrayOutput {
	return i.ToGetProjectPushRuleArrayOutputWithContext(context.Background())
}

func (i GetProjectPushRuleArray) ToGetProjectPushRuleArrayOutputWithContext(ctx context.Context) GetProjectPushRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectPushRuleArrayOutput)
}

func (i GetProjectPushRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectPushRule] {
	return pulumix.Output[[]GetProjectPushRule]{
		OutputState: i.ToGetProjectPushRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectPushRuleOutput struct{ *pulumi.OutputState }

func (GetProjectPushRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectPushRule)(nil)).Elem()
}

func (o GetProjectPushRuleOutput) ToGetProjectPushRuleOutput() GetProjectPushRuleOutput {
	return o
}

func (o GetProjectPushRuleOutput) ToGetProjectPushRuleOutputWithContext(ctx context.Context) GetProjectPushRuleOutput {
	return o
}

func (o GetProjectPushRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectPushRule] {
	return pulumix.Output[GetProjectPushRule]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectPushRuleOutput) AuthorEmailRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.AuthorEmailRegex }).(pulumi.StringOutput)
}

func (o GetProjectPushRuleOutput) BranchNameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.BranchNameRegex }).(pulumi.StringOutput)
}

func (o GetProjectPushRuleOutput) CommitCommitterCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.CommitCommitterCheck }).(pulumi.BoolOutput)
}

func (o GetProjectPushRuleOutput) CommitMessageNegativeRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.CommitMessageNegativeRegex }).(pulumi.StringOutput)
}

func (o GetProjectPushRuleOutput) CommitMessageRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.CommitMessageRegex }).(pulumi.StringOutput)
}

func (o GetProjectPushRuleOutput) DenyDeleteTag() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.DenyDeleteTag }).(pulumi.BoolOutput)
}

func (o GetProjectPushRuleOutput) FileNameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectPushRule) string { return v.FileNameRegex }).(pulumi.StringOutput)
}

func (o GetProjectPushRuleOutput) MaxFileSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectPushRule) int { return v.MaxFileSize }).(pulumi.IntOutput)
}

func (o GetProjectPushRuleOutput) MemberCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.MemberCheck }).(pulumi.BoolOutput)
}

func (o GetProjectPushRuleOutput) PreventSecrets() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.PreventSecrets }).(pulumi.BoolOutput)
}

func (o GetProjectPushRuleOutput) RejectUnsignedCommits() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectPushRule) bool { return v.RejectUnsignedCommits }).(pulumi.BoolOutput)
}

type GetProjectPushRuleArrayOutput struct{ *pulumi.OutputState }

func (GetProjectPushRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectPushRule)(nil)).Elem()
}

func (o GetProjectPushRuleArrayOutput) ToGetProjectPushRuleArrayOutput() GetProjectPushRuleArrayOutput {
	return o
}

func (o GetProjectPushRuleArrayOutput) ToGetProjectPushRuleArrayOutputWithContext(ctx context.Context) GetProjectPushRuleArrayOutput {
	return o
}

func (o GetProjectPushRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectPushRule] {
	return pulumix.Output[[]GetProjectPushRule]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectPushRuleArrayOutput) Index(i pulumi.IntInput) GetProjectPushRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectPushRule {
		return vs[0].([]GetProjectPushRule)[vs[1].(int)]
	}).(GetProjectPushRuleOutput)
}

type GetProjectTagCommit struct {
	AuthorEmail    string   `pulumi:"authorEmail"`
	AuthorName     string   `pulumi:"authorName"`
	AuthoredDate   string   `pulumi:"authoredDate"`
	CommittedDate  string   `pulumi:"committedDate"`
	CommitterEmail string   `pulumi:"committerEmail"`
	CommitterName  string   `pulumi:"committerName"`
	Id             string   `pulumi:"id"`
	Message        string   `pulumi:"message"`
	ParentIds      []string `pulumi:"parentIds"`
	ShortId        string   `pulumi:"shortId"`
	Title          string   `pulumi:"title"`
}

// GetProjectTagCommitInput is an input type that accepts GetProjectTagCommitArgs and GetProjectTagCommitOutput values.
// You can construct a concrete instance of `GetProjectTagCommitInput` via:
//
//	GetProjectTagCommitArgs{...}
type GetProjectTagCommitInput interface {
	pulumi.Input

	ToGetProjectTagCommitOutput() GetProjectTagCommitOutput
	ToGetProjectTagCommitOutputWithContext(context.Context) GetProjectTagCommitOutput
}

type GetProjectTagCommitArgs struct {
	AuthorEmail    pulumi.StringInput      `pulumi:"authorEmail"`
	AuthorName     pulumi.StringInput      `pulumi:"authorName"`
	AuthoredDate   pulumi.StringInput      `pulumi:"authoredDate"`
	CommittedDate  pulumi.StringInput      `pulumi:"committedDate"`
	CommitterEmail pulumi.StringInput      `pulumi:"committerEmail"`
	CommitterName  pulumi.StringInput      `pulumi:"committerName"`
	Id             pulumi.StringInput      `pulumi:"id"`
	Message        pulumi.StringInput      `pulumi:"message"`
	ParentIds      pulumi.StringArrayInput `pulumi:"parentIds"`
	ShortId        pulumi.StringInput      `pulumi:"shortId"`
	Title          pulumi.StringInput      `pulumi:"title"`
}

func (GetProjectTagCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagCommit)(nil)).Elem()
}

func (i GetProjectTagCommitArgs) ToGetProjectTagCommitOutput() GetProjectTagCommitOutput {
	return i.ToGetProjectTagCommitOutputWithContext(context.Background())
}

func (i GetProjectTagCommitArgs) ToGetProjectTagCommitOutputWithContext(ctx context.Context) GetProjectTagCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagCommitOutput)
}

func (i GetProjectTagCommitArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagCommit] {
	return pulumix.Output[GetProjectTagCommit]{
		OutputState: i.ToGetProjectTagCommitOutputWithContext(ctx).OutputState,
	}
}

// GetProjectTagCommitArrayInput is an input type that accepts GetProjectTagCommitArray and GetProjectTagCommitArrayOutput values.
// You can construct a concrete instance of `GetProjectTagCommitArrayInput` via:
//
//	GetProjectTagCommitArray{ GetProjectTagCommitArgs{...} }
type GetProjectTagCommitArrayInput interface {
	pulumi.Input

	ToGetProjectTagCommitArrayOutput() GetProjectTagCommitArrayOutput
	ToGetProjectTagCommitArrayOutputWithContext(context.Context) GetProjectTagCommitArrayOutput
}

type GetProjectTagCommitArray []GetProjectTagCommitInput

func (GetProjectTagCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagCommit)(nil)).Elem()
}

func (i GetProjectTagCommitArray) ToGetProjectTagCommitArrayOutput() GetProjectTagCommitArrayOutput {
	return i.ToGetProjectTagCommitArrayOutputWithContext(context.Background())
}

func (i GetProjectTagCommitArray) ToGetProjectTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagCommitArrayOutput)
}

func (i GetProjectTagCommitArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagCommit] {
	return pulumix.Output[[]GetProjectTagCommit]{
		OutputState: i.ToGetProjectTagCommitArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectTagCommitOutput struct{ *pulumi.OutputState }

func (GetProjectTagCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagCommit)(nil)).Elem()
}

func (o GetProjectTagCommitOutput) ToGetProjectTagCommitOutput() GetProjectTagCommitOutput {
	return o
}

func (o GetProjectTagCommitOutput) ToGetProjectTagCommitOutputWithContext(ctx context.Context) GetProjectTagCommitOutput {
	return o
}

func (o GetProjectTagCommitOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagCommit] {
	return pulumix.Output[GetProjectTagCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectTagCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

func (o GetProjectTagCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

func (o GetProjectTagCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetProjectTagCommitArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagCommit)(nil)).Elem()
}

func (o GetProjectTagCommitArrayOutput) ToGetProjectTagCommitArrayOutput() GetProjectTagCommitArrayOutput {
	return o
}

func (o GetProjectTagCommitArrayOutput) ToGetProjectTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagCommitArrayOutput {
	return o
}

func (o GetProjectTagCommitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagCommit] {
	return pulumix.Output[[]GetProjectTagCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagCommitArrayOutput) Index(i pulumi.IntInput) GetProjectTagCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagCommit {
		return vs[0].([]GetProjectTagCommit)[vs[1].(int)]
	}).(GetProjectTagCommitOutput)
}

type GetProjectTagRelease struct {
	Description string `pulumi:"description"`
	TagName     string `pulumi:"tagName"`
}

// GetProjectTagReleaseInput is an input type that accepts GetProjectTagReleaseArgs and GetProjectTagReleaseOutput values.
// You can construct a concrete instance of `GetProjectTagReleaseInput` via:
//
//	GetProjectTagReleaseArgs{...}
type GetProjectTagReleaseInput interface {
	pulumi.Input

	ToGetProjectTagReleaseOutput() GetProjectTagReleaseOutput
	ToGetProjectTagReleaseOutputWithContext(context.Context) GetProjectTagReleaseOutput
}

type GetProjectTagReleaseArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	TagName     pulumi.StringInput `pulumi:"tagName"`
}

func (GetProjectTagReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagRelease)(nil)).Elem()
}

func (i GetProjectTagReleaseArgs) ToGetProjectTagReleaseOutput() GetProjectTagReleaseOutput {
	return i.ToGetProjectTagReleaseOutputWithContext(context.Background())
}

func (i GetProjectTagReleaseArgs) ToGetProjectTagReleaseOutputWithContext(ctx context.Context) GetProjectTagReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagReleaseOutput)
}

func (i GetProjectTagReleaseArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagRelease] {
	return pulumix.Output[GetProjectTagRelease]{
		OutputState: i.ToGetProjectTagReleaseOutputWithContext(ctx).OutputState,
	}
}

// GetProjectTagReleaseArrayInput is an input type that accepts GetProjectTagReleaseArray and GetProjectTagReleaseArrayOutput values.
// You can construct a concrete instance of `GetProjectTagReleaseArrayInput` via:
//
//	GetProjectTagReleaseArray{ GetProjectTagReleaseArgs{...} }
type GetProjectTagReleaseArrayInput interface {
	pulumi.Input

	ToGetProjectTagReleaseArrayOutput() GetProjectTagReleaseArrayOutput
	ToGetProjectTagReleaseArrayOutputWithContext(context.Context) GetProjectTagReleaseArrayOutput
}

type GetProjectTagReleaseArray []GetProjectTagReleaseInput

func (GetProjectTagReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagRelease)(nil)).Elem()
}

func (i GetProjectTagReleaseArray) ToGetProjectTagReleaseArrayOutput() GetProjectTagReleaseArrayOutput {
	return i.ToGetProjectTagReleaseArrayOutputWithContext(context.Background())
}

func (i GetProjectTagReleaseArray) ToGetProjectTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagReleaseArrayOutput)
}

func (i GetProjectTagReleaseArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagRelease] {
	return pulumix.Output[[]GetProjectTagRelease]{
		OutputState: i.ToGetProjectTagReleaseArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectTagReleaseOutput struct{ *pulumi.OutputState }

func (GetProjectTagReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagRelease)(nil)).Elem()
}

func (o GetProjectTagReleaseOutput) ToGetProjectTagReleaseOutput() GetProjectTagReleaseOutput {
	return o
}

func (o GetProjectTagReleaseOutput) ToGetProjectTagReleaseOutputWithContext(ctx context.Context) GetProjectTagReleaseOutput {
	return o
}

func (o GetProjectTagReleaseOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagRelease] {
	return pulumix.Output[GetProjectTagRelease]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagReleaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagRelease) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProjectTagReleaseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagRelease) string { return v.TagName }).(pulumi.StringOutput)
}

type GetProjectTagReleaseArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagRelease)(nil)).Elem()
}

func (o GetProjectTagReleaseArrayOutput) ToGetProjectTagReleaseArrayOutput() GetProjectTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagReleaseArrayOutput) ToGetProjectTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagReleaseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagRelease] {
	return pulumix.Output[[]GetProjectTagRelease]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagReleaseArrayOutput) Index(i pulumi.IntInput) GetProjectTagReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagRelease {
		return vs[0].([]GetProjectTagRelease)[vs[1].(int)]
	}).(GetProjectTagReleaseOutput)
}

type GetProjectTagsTag struct {
	Commits   []GetProjectTagsTagCommit  `pulumi:"commits"`
	Message   string                     `pulumi:"message"`
	Name      string                     `pulumi:"name"`
	Protected bool                       `pulumi:"protected"`
	Releases  []GetProjectTagsTagRelease `pulumi:"releases"`
	Target    string                     `pulumi:"target"`
}

// GetProjectTagsTagInput is an input type that accepts GetProjectTagsTagArgs and GetProjectTagsTagOutput values.
// You can construct a concrete instance of `GetProjectTagsTagInput` via:
//
//	GetProjectTagsTagArgs{...}
type GetProjectTagsTagInput interface {
	pulumi.Input

	ToGetProjectTagsTagOutput() GetProjectTagsTagOutput
	ToGetProjectTagsTagOutputWithContext(context.Context) GetProjectTagsTagOutput
}

type GetProjectTagsTagArgs struct {
	Commits   GetProjectTagsTagCommitArrayInput  `pulumi:"commits"`
	Message   pulumi.StringInput                 `pulumi:"message"`
	Name      pulumi.StringInput                 `pulumi:"name"`
	Protected pulumi.BoolInput                   `pulumi:"protected"`
	Releases  GetProjectTagsTagReleaseArrayInput `pulumi:"releases"`
	Target    pulumi.StringInput                 `pulumi:"target"`
}

func (GetProjectTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTag)(nil)).Elem()
}

func (i GetProjectTagsTagArgs) ToGetProjectTagsTagOutput() GetProjectTagsTagOutput {
	return i.ToGetProjectTagsTagOutputWithContext(context.Background())
}

func (i GetProjectTagsTagArgs) ToGetProjectTagsTagOutputWithContext(ctx context.Context) GetProjectTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagOutput)
}

func (i GetProjectTagsTagArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagsTag] {
	return pulumix.Output[GetProjectTagsTag]{
		OutputState: i.ToGetProjectTagsTagOutputWithContext(ctx).OutputState,
	}
}

// GetProjectTagsTagArrayInput is an input type that accepts GetProjectTagsTagArray and GetProjectTagsTagArrayOutput values.
// You can construct a concrete instance of `GetProjectTagsTagArrayInput` via:
//
//	GetProjectTagsTagArray{ GetProjectTagsTagArgs{...} }
type GetProjectTagsTagArrayInput interface {
	pulumi.Input

	ToGetProjectTagsTagArrayOutput() GetProjectTagsTagArrayOutput
	ToGetProjectTagsTagArrayOutputWithContext(context.Context) GetProjectTagsTagArrayOutput
}

type GetProjectTagsTagArray []GetProjectTagsTagInput

func (GetProjectTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTag)(nil)).Elem()
}

func (i GetProjectTagsTagArray) ToGetProjectTagsTagArrayOutput() GetProjectTagsTagArrayOutput {
	return i.ToGetProjectTagsTagArrayOutputWithContext(context.Background())
}

func (i GetProjectTagsTagArray) ToGetProjectTagsTagArrayOutputWithContext(ctx context.Context) GetProjectTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagArrayOutput)
}

func (i GetProjectTagsTagArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagsTag] {
	return pulumix.Output[[]GetProjectTagsTag]{
		OutputState: i.ToGetProjectTagsTagArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectTagsTagOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTag)(nil)).Elem()
}

func (o GetProjectTagsTagOutput) ToGetProjectTagsTagOutput() GetProjectTagsTagOutput {
	return o
}

func (o GetProjectTagsTagOutput) ToGetProjectTagsTagOutputWithContext(ctx context.Context) GetProjectTagsTagOutput {
	return o
}

func (o GetProjectTagsTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagsTag] {
	return pulumix.Output[GetProjectTagsTag]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagsTagOutput) Commits() GetProjectTagsTagCommitArrayOutput {
	return o.ApplyT(func(v GetProjectTagsTag) []GetProjectTagsTagCommit { return v.Commits }).(GetProjectTagsTagCommitArrayOutput)
}

func (o GetProjectTagsTagOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTag) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTag) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectTagsTag) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o GetProjectTagsTagOutput) Releases() GetProjectTagsTagReleaseArrayOutput {
	return o.ApplyT(func(v GetProjectTagsTag) []GetProjectTagsTagRelease { return v.Releases }).(GetProjectTagsTagReleaseArrayOutput)
}

func (o GetProjectTagsTagOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTag) string { return v.Target }).(pulumi.StringOutput)
}

type GetProjectTagsTagArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTag)(nil)).Elem()
}

func (o GetProjectTagsTagArrayOutput) ToGetProjectTagsTagArrayOutput() GetProjectTagsTagArrayOutput {
	return o
}

func (o GetProjectTagsTagArrayOutput) ToGetProjectTagsTagArrayOutputWithContext(ctx context.Context) GetProjectTagsTagArrayOutput {
	return o
}

func (o GetProjectTagsTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagsTag] {
	return pulumix.Output[[]GetProjectTagsTag]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagsTagArrayOutput) Index(i pulumi.IntInput) GetProjectTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagsTag {
		return vs[0].([]GetProjectTagsTag)[vs[1].(int)]
	}).(GetProjectTagsTagOutput)
}

type GetProjectTagsTagCommit struct {
	AuthorEmail    string   `pulumi:"authorEmail"`
	AuthorName     string   `pulumi:"authorName"`
	AuthoredDate   string   `pulumi:"authoredDate"`
	CommittedDate  string   `pulumi:"committedDate"`
	CommitterEmail string   `pulumi:"committerEmail"`
	CommitterName  string   `pulumi:"committerName"`
	Id             string   `pulumi:"id"`
	Message        string   `pulumi:"message"`
	ParentIds      []string `pulumi:"parentIds"`
	ShortId        string   `pulumi:"shortId"`
	Title          string   `pulumi:"title"`
}

// GetProjectTagsTagCommitInput is an input type that accepts GetProjectTagsTagCommitArgs and GetProjectTagsTagCommitOutput values.
// You can construct a concrete instance of `GetProjectTagsTagCommitInput` via:
//
//	GetProjectTagsTagCommitArgs{...}
type GetProjectTagsTagCommitInput interface {
	pulumi.Input

	ToGetProjectTagsTagCommitOutput() GetProjectTagsTagCommitOutput
	ToGetProjectTagsTagCommitOutputWithContext(context.Context) GetProjectTagsTagCommitOutput
}

type GetProjectTagsTagCommitArgs struct {
	AuthorEmail    pulumi.StringInput      `pulumi:"authorEmail"`
	AuthorName     pulumi.StringInput      `pulumi:"authorName"`
	AuthoredDate   pulumi.StringInput      `pulumi:"authoredDate"`
	CommittedDate  pulumi.StringInput      `pulumi:"committedDate"`
	CommitterEmail pulumi.StringInput      `pulumi:"committerEmail"`
	CommitterName  pulumi.StringInput      `pulumi:"committerName"`
	Id             pulumi.StringInput      `pulumi:"id"`
	Message        pulumi.StringInput      `pulumi:"message"`
	ParentIds      pulumi.StringArrayInput `pulumi:"parentIds"`
	ShortId        pulumi.StringInput      `pulumi:"shortId"`
	Title          pulumi.StringInput      `pulumi:"title"`
}

func (GetProjectTagsTagCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagCommit)(nil)).Elem()
}

func (i GetProjectTagsTagCommitArgs) ToGetProjectTagsTagCommitOutput() GetProjectTagsTagCommitOutput {
	return i.ToGetProjectTagsTagCommitOutputWithContext(context.Background())
}

func (i GetProjectTagsTagCommitArgs) ToGetProjectTagsTagCommitOutputWithContext(ctx context.Context) GetProjectTagsTagCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagCommitOutput)
}

func (i GetProjectTagsTagCommitArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagsTagCommit] {
	return pulumix.Output[GetProjectTagsTagCommit]{
		OutputState: i.ToGetProjectTagsTagCommitOutputWithContext(ctx).OutputState,
	}
}

// GetProjectTagsTagCommitArrayInput is an input type that accepts GetProjectTagsTagCommitArray and GetProjectTagsTagCommitArrayOutput values.
// You can construct a concrete instance of `GetProjectTagsTagCommitArrayInput` via:
//
//	GetProjectTagsTagCommitArray{ GetProjectTagsTagCommitArgs{...} }
type GetProjectTagsTagCommitArrayInput interface {
	pulumi.Input

	ToGetProjectTagsTagCommitArrayOutput() GetProjectTagsTagCommitArrayOutput
	ToGetProjectTagsTagCommitArrayOutputWithContext(context.Context) GetProjectTagsTagCommitArrayOutput
}

type GetProjectTagsTagCommitArray []GetProjectTagsTagCommitInput

func (GetProjectTagsTagCommitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagCommit)(nil)).Elem()
}

func (i GetProjectTagsTagCommitArray) ToGetProjectTagsTagCommitArrayOutput() GetProjectTagsTagCommitArrayOutput {
	return i.ToGetProjectTagsTagCommitArrayOutputWithContext(context.Background())
}

func (i GetProjectTagsTagCommitArray) ToGetProjectTagsTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagsTagCommitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagCommitArrayOutput)
}

func (i GetProjectTagsTagCommitArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagsTagCommit] {
	return pulumix.Output[[]GetProjectTagsTagCommit]{
		OutputState: i.ToGetProjectTagsTagCommitArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectTagsTagCommitOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagCommit)(nil)).Elem()
}

func (o GetProjectTagsTagCommitOutput) ToGetProjectTagsTagCommitOutput() GetProjectTagsTagCommitOutput {
	return o
}

func (o GetProjectTagsTagCommitOutput) ToGetProjectTagsTagCommitOutputWithContext(ctx context.Context) GetProjectTagsTagCommitOutput {
	return o
}

func (o GetProjectTagsTagCommitOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagsTagCommit] {
	return pulumix.Output[GetProjectTagsTagCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagsTagCommitOutput) AuthorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.AuthorEmail }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) AuthorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.AuthorName }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) AuthoredDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.AuthoredDate }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) CommittedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.CommittedDate }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) CommitterEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.CommitterEmail }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) CommitterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.CommitterName }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) ParentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) []string { return v.ParentIds }).(pulumi.StringArrayOutput)
}

func (o GetProjectTagsTagCommitOutput) ShortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.ShortId }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagCommitOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagCommit) string { return v.Title }).(pulumi.StringOutput)
}

type GetProjectTagsTagCommitArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagCommitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagCommit)(nil)).Elem()
}

func (o GetProjectTagsTagCommitArrayOutput) ToGetProjectTagsTagCommitArrayOutput() GetProjectTagsTagCommitArrayOutput {
	return o
}

func (o GetProjectTagsTagCommitArrayOutput) ToGetProjectTagsTagCommitArrayOutputWithContext(ctx context.Context) GetProjectTagsTagCommitArrayOutput {
	return o
}

func (o GetProjectTagsTagCommitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagsTagCommit] {
	return pulumix.Output[[]GetProjectTagsTagCommit]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagsTagCommitArrayOutput) Index(i pulumi.IntInput) GetProjectTagsTagCommitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagsTagCommit {
		return vs[0].([]GetProjectTagsTagCommit)[vs[1].(int)]
	}).(GetProjectTagsTagCommitOutput)
}

type GetProjectTagsTagRelease struct {
	Description string `pulumi:"description"`
	TagName     string `pulumi:"tagName"`
}

// GetProjectTagsTagReleaseInput is an input type that accepts GetProjectTagsTagReleaseArgs and GetProjectTagsTagReleaseOutput values.
// You can construct a concrete instance of `GetProjectTagsTagReleaseInput` via:
//
//	GetProjectTagsTagReleaseArgs{...}
type GetProjectTagsTagReleaseInput interface {
	pulumi.Input

	ToGetProjectTagsTagReleaseOutput() GetProjectTagsTagReleaseOutput
	ToGetProjectTagsTagReleaseOutputWithContext(context.Context) GetProjectTagsTagReleaseOutput
}

type GetProjectTagsTagReleaseArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	TagName     pulumi.StringInput `pulumi:"tagName"`
}

func (GetProjectTagsTagReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagRelease)(nil)).Elem()
}

func (i GetProjectTagsTagReleaseArgs) ToGetProjectTagsTagReleaseOutput() GetProjectTagsTagReleaseOutput {
	return i.ToGetProjectTagsTagReleaseOutputWithContext(context.Background())
}

func (i GetProjectTagsTagReleaseArgs) ToGetProjectTagsTagReleaseOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagReleaseOutput)
}

func (i GetProjectTagsTagReleaseArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagsTagRelease] {
	return pulumix.Output[GetProjectTagsTagRelease]{
		OutputState: i.ToGetProjectTagsTagReleaseOutputWithContext(ctx).OutputState,
	}
}

// GetProjectTagsTagReleaseArrayInput is an input type that accepts GetProjectTagsTagReleaseArray and GetProjectTagsTagReleaseArrayOutput values.
// You can construct a concrete instance of `GetProjectTagsTagReleaseArrayInput` via:
//
//	GetProjectTagsTagReleaseArray{ GetProjectTagsTagReleaseArgs{...} }
type GetProjectTagsTagReleaseArrayInput interface {
	pulumi.Input

	ToGetProjectTagsTagReleaseArrayOutput() GetProjectTagsTagReleaseArrayOutput
	ToGetProjectTagsTagReleaseArrayOutputWithContext(context.Context) GetProjectTagsTagReleaseArrayOutput
}

type GetProjectTagsTagReleaseArray []GetProjectTagsTagReleaseInput

func (GetProjectTagsTagReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagRelease)(nil)).Elem()
}

func (i GetProjectTagsTagReleaseArray) ToGetProjectTagsTagReleaseArrayOutput() GetProjectTagsTagReleaseArrayOutput {
	return i.ToGetProjectTagsTagReleaseArrayOutputWithContext(context.Background())
}

func (i GetProjectTagsTagReleaseArray) ToGetProjectTagsTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectTagsTagReleaseArrayOutput)
}

func (i GetProjectTagsTagReleaseArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagsTagRelease] {
	return pulumix.Output[[]GetProjectTagsTagRelease]{
		OutputState: i.ToGetProjectTagsTagReleaseArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectTagsTagReleaseOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectTagsTagRelease)(nil)).Elem()
}

func (o GetProjectTagsTagReleaseOutput) ToGetProjectTagsTagReleaseOutput() GetProjectTagsTagReleaseOutput {
	return o
}

func (o GetProjectTagsTagReleaseOutput) ToGetProjectTagsTagReleaseOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseOutput {
	return o
}

func (o GetProjectTagsTagReleaseOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectTagsTagRelease] {
	return pulumix.Output[GetProjectTagsTagRelease]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagsTagReleaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagRelease) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProjectTagsTagReleaseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectTagsTagRelease) string { return v.TagName }).(pulumi.StringOutput)
}

type GetProjectTagsTagReleaseArrayOutput struct{ *pulumi.OutputState }

func (GetProjectTagsTagReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectTagsTagRelease)(nil)).Elem()
}

func (o GetProjectTagsTagReleaseArrayOutput) ToGetProjectTagsTagReleaseArrayOutput() GetProjectTagsTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagsTagReleaseArrayOutput) ToGetProjectTagsTagReleaseArrayOutputWithContext(ctx context.Context) GetProjectTagsTagReleaseArrayOutput {
	return o
}

func (o GetProjectTagsTagReleaseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectTagsTagRelease] {
	return pulumix.Output[[]GetProjectTagsTagRelease]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectTagsTagReleaseArrayOutput) Index(i pulumi.IntInput) GetProjectTagsTagReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectTagsTagRelease {
		return vs[0].([]GetProjectTagsTagRelease)[vs[1].(int)]
	}).(GetProjectTagsTagReleaseOutput)
}

type GetProjectVariablesVariable struct {
	EnvironmentScope string `pulumi:"environmentScope"`
	Key              string `pulumi:"key"`
	Masked           bool   `pulumi:"masked"`
	Project          string `pulumi:"project"`
	Protected        bool   `pulumi:"protected"`
	Raw              bool   `pulumi:"raw"`
	Value            string `pulumi:"value"`
	VariableType     string `pulumi:"variableType"`
}

// GetProjectVariablesVariableInput is an input type that accepts GetProjectVariablesVariableArgs and GetProjectVariablesVariableOutput values.
// You can construct a concrete instance of `GetProjectVariablesVariableInput` via:
//
//	GetProjectVariablesVariableArgs{...}
type GetProjectVariablesVariableInput interface {
	pulumi.Input

	ToGetProjectVariablesVariableOutput() GetProjectVariablesVariableOutput
	ToGetProjectVariablesVariableOutputWithContext(context.Context) GetProjectVariablesVariableOutput
}

type GetProjectVariablesVariableArgs struct {
	EnvironmentScope pulumi.StringInput `pulumi:"environmentScope"`
	Key              pulumi.StringInput `pulumi:"key"`
	Masked           pulumi.BoolInput   `pulumi:"masked"`
	Project          pulumi.StringInput `pulumi:"project"`
	Protected        pulumi.BoolInput   `pulumi:"protected"`
	Raw              pulumi.BoolInput   `pulumi:"raw"`
	Value            pulumi.StringInput `pulumi:"value"`
	VariableType     pulumi.StringInput `pulumi:"variableType"`
}

func (GetProjectVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectVariablesVariable)(nil)).Elem()
}

func (i GetProjectVariablesVariableArgs) ToGetProjectVariablesVariableOutput() GetProjectVariablesVariableOutput {
	return i.ToGetProjectVariablesVariableOutputWithContext(context.Background())
}

func (i GetProjectVariablesVariableArgs) ToGetProjectVariablesVariableOutputWithContext(ctx context.Context) GetProjectVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectVariablesVariableOutput)
}

func (i GetProjectVariablesVariableArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectVariablesVariable] {
	return pulumix.Output[GetProjectVariablesVariable]{
		OutputState: i.ToGetProjectVariablesVariableOutputWithContext(ctx).OutputState,
	}
}

// GetProjectVariablesVariableArrayInput is an input type that accepts GetProjectVariablesVariableArray and GetProjectVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetProjectVariablesVariableArrayInput` via:
//
//	GetProjectVariablesVariableArray{ GetProjectVariablesVariableArgs{...} }
type GetProjectVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetProjectVariablesVariableArrayOutput() GetProjectVariablesVariableArrayOutput
	ToGetProjectVariablesVariableArrayOutputWithContext(context.Context) GetProjectVariablesVariableArrayOutput
}

type GetProjectVariablesVariableArray []GetProjectVariablesVariableInput

func (GetProjectVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectVariablesVariable)(nil)).Elem()
}

func (i GetProjectVariablesVariableArray) ToGetProjectVariablesVariableArrayOutput() GetProjectVariablesVariableArrayOutput {
	return i.ToGetProjectVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetProjectVariablesVariableArray) ToGetProjectVariablesVariableArrayOutputWithContext(ctx context.Context) GetProjectVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectVariablesVariableArrayOutput)
}

func (i GetProjectVariablesVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectVariablesVariable] {
	return pulumix.Output[[]GetProjectVariablesVariable]{
		OutputState: i.ToGetProjectVariablesVariableArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetProjectVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectVariablesVariable)(nil)).Elem()
}

func (o GetProjectVariablesVariableOutput) ToGetProjectVariablesVariableOutput() GetProjectVariablesVariableOutput {
	return o
}

func (o GetProjectVariablesVariableOutput) ToGetProjectVariablesVariableOutputWithContext(ctx context.Context) GetProjectVariablesVariableOutput {
	return o
}

func (o GetProjectVariablesVariableOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectVariablesVariable] {
	return pulumix.Output[GetProjectVariablesVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectVariablesVariableOutput) EnvironmentScope() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.EnvironmentScope }).(pulumi.StringOutput)
}

func (o GetProjectVariablesVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetProjectVariablesVariableOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) bool { return v.Masked }).(pulumi.BoolOutput)
}

func (o GetProjectVariablesVariableOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetProjectVariablesVariableOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o GetProjectVariablesVariableOutput) Raw() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) bool { return v.Raw }).(pulumi.BoolOutput)
}

func (o GetProjectVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

func (o GetProjectVariablesVariableOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectVariablesVariable) string { return v.VariableType }).(pulumi.StringOutput)
}

type GetProjectVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetProjectVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectVariablesVariable)(nil)).Elem()
}

func (o GetProjectVariablesVariableArrayOutput) ToGetProjectVariablesVariableArrayOutput() GetProjectVariablesVariableArrayOutput {
	return o
}

func (o GetProjectVariablesVariableArrayOutput) ToGetProjectVariablesVariableArrayOutputWithContext(ctx context.Context) GetProjectVariablesVariableArrayOutput {
	return o
}

func (o GetProjectVariablesVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectVariablesVariable] {
	return pulumix.Output[[]GetProjectVariablesVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetProjectVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectVariablesVariable {
		return vs[0].([]GetProjectVariablesVariable)[vs[1].(int)]
	}).(GetProjectVariablesVariableOutput)
}

type GetProjectsProject struct {
	_links                                    map[string]string                             `pulumi:"_links"`
	AllowMergeOnSkippedPipeline               bool                                          `pulumi:"allowMergeOnSkippedPipeline"`
	AnalyticsAccessLevel                      string                                        `pulumi:"analyticsAccessLevel"`
	ApprovalsBeforeMerge                      int                                           `pulumi:"approvalsBeforeMerge"`
	Archived                                  bool                                          `pulumi:"archived"`
	AutoCancelPendingPipelines                string                                        `pulumi:"autoCancelPendingPipelines"`
	AutoDevopsDeployStrategy                  string                                        `pulumi:"autoDevopsDeployStrategy"`
	AutoDevopsEnabled                         bool                                          `pulumi:"autoDevopsEnabled"`
	AutocloseReferencedIssues                 bool                                          `pulumi:"autocloseReferencedIssues"`
	AvatarUrl                                 string                                        `pulumi:"avatarUrl"`
	BuildCoverageRegex                        string                                        `pulumi:"buildCoverageRegex"`
	BuildGitStrategy                          string                                        `pulumi:"buildGitStrategy"`
	BuildTimeout                              int                                           `pulumi:"buildTimeout"`
	BuildsAccessLevel                         string                                        `pulumi:"buildsAccessLevel"`
	CiConfigPath                              string                                        `pulumi:"ciConfigPath"`
	CiDefaultGitDepth                         int                                           `pulumi:"ciDefaultGitDepth"`
	CiForwardDeploymentEnabled                bool                                          `pulumi:"ciForwardDeploymentEnabled"`
	ContainerExpirationPolicies               []GetProjectsProjectContainerExpirationPolicy `pulumi:"containerExpirationPolicies"`
	ContainerRegistryAccessLevel              string                                        `pulumi:"containerRegistryAccessLevel"`
	ContainerRegistryEnabled                  bool                                          `pulumi:"containerRegistryEnabled"`
	CreatedAt                                 string                                        `pulumi:"createdAt"`
	CreatorId                                 int                                           `pulumi:"creatorId"`
	CustomAttributes                          []map[string]string                           `pulumi:"customAttributes"`
	DefaultBranch                             string                                        `pulumi:"defaultBranch"`
	Description                               string                                        `pulumi:"description"`
	EmailsDisabled                            bool                                          `pulumi:"emailsDisabled"`
	EnvironmentsAccessLevel                   string                                        `pulumi:"environmentsAccessLevel"`
	ExternalAuthorizationClassificationLabel  string                                        `pulumi:"externalAuthorizationClassificationLabel"`
	FeatureFlagsAccessLevel                   string                                        `pulumi:"featureFlagsAccessLevel"`
	ForkedFromProjects                        []GetProjectsProjectForkedFromProject         `pulumi:"forkedFromProjects"`
	ForkingAccessLevel                        string                                        `pulumi:"forkingAccessLevel"`
	ForksCount                                int                                           `pulumi:"forksCount"`
	HttpUrlToRepo                             string                                        `pulumi:"httpUrlToRepo"`
	Id                                        int                                           `pulumi:"id"`
	ImportError                               string                                        `pulumi:"importError"`
	ImportStatus                              string                                        `pulumi:"importStatus"`
	ImportUrl                                 string                                        `pulumi:"importUrl"`
	InfrastructureAccessLevel                 string                                        `pulumi:"infrastructureAccessLevel"`
	IssuesAccessLevel                         string                                        `pulumi:"issuesAccessLevel"`
	IssuesEnabled                             bool                                          `pulumi:"issuesEnabled"`
	JobsEnabled                               bool                                          `pulumi:"jobsEnabled"`
	KeepLatestArtifact                        bool                                          `pulumi:"keepLatestArtifact"`
	LastActivityAt                            string                                        `pulumi:"lastActivityAt"`
	LfsEnabled                                bool                                          `pulumi:"lfsEnabled"`
	MergeCommitTemplate                       string                                        `pulumi:"mergeCommitTemplate"`
	MergeMethod                               string                                        `pulumi:"mergeMethod"`
	MergePipelinesEnabled                     bool                                          `pulumi:"mergePipelinesEnabled"`
	MergeRequestsAccessLevel                  string                                        `pulumi:"mergeRequestsAccessLevel"`
	MergeRequestsEnabled                      bool                                          `pulumi:"mergeRequestsEnabled"`
	MergeTrainsEnabled                        bool                                          `pulumi:"mergeTrainsEnabled"`
	Mirror                                    bool                                          `pulumi:"mirror"`
	MirrorOverwritesDivergedBranches          bool                                          `pulumi:"mirrorOverwritesDivergedBranches"`
	MirrorTriggerBuilds                       bool                                          `pulumi:"mirrorTriggerBuilds"`
	MirrorUserId                              int                                           `pulumi:"mirrorUserId"`
	MonitorAccessLevel                        string                                        `pulumi:"monitorAccessLevel"`
	Name                                      string                                        `pulumi:"name"`
	NameWithNamespace                         string                                        `pulumi:"nameWithNamespace"`
	Namespaces                                []GetProjectsProjectNamespace                 `pulumi:"namespaces"`
	OnlyAllowMergeIfAllDiscussionsAreResolved bool                                          `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	OnlyAllowMergeIfPipelineSucceeds          bool                                          `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	OnlyMirrorProtectedBranches               bool                                          `pulumi:"onlyMirrorProtectedBranches"`
	OpenIssuesCount                           int                                           `pulumi:"openIssuesCount"`
	Owners                                    []GetProjectsProjectOwner                     `pulumi:"owners"`
	PackagesEnabled                           bool                                          `pulumi:"packagesEnabled"`
	Path                                      string                                        `pulumi:"path"`
	PathWithNamespace                         string                                        `pulumi:"pathWithNamespace"`
	Permissions                               []GetProjectsProjectPermission                `pulumi:"permissions"`
	Public                                    bool                                          `pulumi:"public"`
	PublicBuilds                              bool                                          `pulumi:"publicBuilds"`
	ReadmeUrl                                 string                                        `pulumi:"readmeUrl"`
	ReleasesAccessLevel                       string                                        `pulumi:"releasesAccessLevel"`
	RepositoryAccessLevel                     string                                        `pulumi:"repositoryAccessLevel"`
	RepositoryStorage                         string                                        `pulumi:"repositoryStorage"`
	RequestAccessEnabled                      bool                                          `pulumi:"requestAccessEnabled"`
	RequirementsAccessLevel                   string                                        `pulumi:"requirementsAccessLevel"`
	ResolveOutdatedDiffDiscussions            bool                                          `pulumi:"resolveOutdatedDiffDiscussions"`
	RestrictUserDefinedVariables              bool                                          `pulumi:"restrictUserDefinedVariables"`
	RunnersToken                              string                                        `pulumi:"runnersToken"`
	SecurityAndComplianceAccessLevel          string                                        `pulumi:"securityAndComplianceAccessLevel"`
	SharedRunnersEnabled                      bool                                          `pulumi:"sharedRunnersEnabled"`
	SharedWithGroups                          []GetProjectsProjectSharedWithGroup           `pulumi:"sharedWithGroups"`
	SnippetsAccessLevel                       string                                        `pulumi:"snippetsAccessLevel"`
	SnippetsEnabled                           bool                                          `pulumi:"snippetsEnabled"`
	SquashCommitTemplate                      string                                        `pulumi:"squashCommitTemplate"`
	SshUrlToRepo                              string                                        `pulumi:"sshUrlToRepo"`
	StarCount                                 int                                           `pulumi:"starCount"`
	Statistics                                map[string]int                                `pulumi:"statistics"`
	SuggestionCommitMessage                   string                                        `pulumi:"suggestionCommitMessage"`
	TagLists                                  []string                                      `pulumi:"tagLists"`
	Topics                                    []string                                      `pulumi:"topics"`
	Visibility                                string                                        `pulumi:"visibility"`
	WebUrl                                    string                                        `pulumi:"webUrl"`
	WikiAccessLevel                           string                                        `pulumi:"wikiAccessLevel"`
	WikiEnabled                               bool                                          `pulumi:"wikiEnabled"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//	GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	_links                                    pulumi.StringMapInput                                 `pulumi:"_links"`
	AllowMergeOnSkippedPipeline               pulumi.BoolInput                                      `pulumi:"allowMergeOnSkippedPipeline"`
	AnalyticsAccessLevel                      pulumi.StringInput                                    `pulumi:"analyticsAccessLevel"`
	ApprovalsBeforeMerge                      pulumi.IntInput                                       `pulumi:"approvalsBeforeMerge"`
	Archived                                  pulumi.BoolInput                                      `pulumi:"archived"`
	AutoCancelPendingPipelines                pulumi.StringInput                                    `pulumi:"autoCancelPendingPipelines"`
	AutoDevopsDeployStrategy                  pulumi.StringInput                                    `pulumi:"autoDevopsDeployStrategy"`
	AutoDevopsEnabled                         pulumi.BoolInput                                      `pulumi:"autoDevopsEnabled"`
	AutocloseReferencedIssues                 pulumi.BoolInput                                      `pulumi:"autocloseReferencedIssues"`
	AvatarUrl                                 pulumi.StringInput                                    `pulumi:"avatarUrl"`
	BuildCoverageRegex                        pulumi.StringInput                                    `pulumi:"buildCoverageRegex"`
	BuildGitStrategy                          pulumi.StringInput                                    `pulumi:"buildGitStrategy"`
	BuildTimeout                              pulumi.IntInput                                       `pulumi:"buildTimeout"`
	BuildsAccessLevel                         pulumi.StringInput                                    `pulumi:"buildsAccessLevel"`
	CiConfigPath                              pulumi.StringInput                                    `pulumi:"ciConfigPath"`
	CiDefaultGitDepth                         pulumi.IntInput                                       `pulumi:"ciDefaultGitDepth"`
	CiForwardDeploymentEnabled                pulumi.BoolInput                                      `pulumi:"ciForwardDeploymentEnabled"`
	ContainerExpirationPolicies               GetProjectsProjectContainerExpirationPolicyArrayInput `pulumi:"containerExpirationPolicies"`
	ContainerRegistryAccessLevel              pulumi.StringInput                                    `pulumi:"containerRegistryAccessLevel"`
	ContainerRegistryEnabled                  pulumi.BoolInput                                      `pulumi:"containerRegistryEnabled"`
	CreatedAt                                 pulumi.StringInput                                    `pulumi:"createdAt"`
	CreatorId                                 pulumi.IntInput                                       `pulumi:"creatorId"`
	CustomAttributes                          pulumi.StringMapArrayInput                            `pulumi:"customAttributes"`
	DefaultBranch                             pulumi.StringInput                                    `pulumi:"defaultBranch"`
	Description                               pulumi.StringInput                                    `pulumi:"description"`
	EmailsDisabled                            pulumi.BoolInput                                      `pulumi:"emailsDisabled"`
	EnvironmentsAccessLevel                   pulumi.StringInput                                    `pulumi:"environmentsAccessLevel"`
	ExternalAuthorizationClassificationLabel  pulumi.StringInput                                    `pulumi:"externalAuthorizationClassificationLabel"`
	FeatureFlagsAccessLevel                   pulumi.StringInput                                    `pulumi:"featureFlagsAccessLevel"`
	ForkedFromProjects                        GetProjectsProjectForkedFromProjectArrayInput         `pulumi:"forkedFromProjects"`
	ForkingAccessLevel                        pulumi.StringInput                                    `pulumi:"forkingAccessLevel"`
	ForksCount                                pulumi.IntInput                                       `pulumi:"forksCount"`
	HttpUrlToRepo                             pulumi.StringInput                                    `pulumi:"httpUrlToRepo"`
	Id                                        pulumi.IntInput                                       `pulumi:"id"`
	ImportError                               pulumi.StringInput                                    `pulumi:"importError"`
	ImportStatus                              pulumi.StringInput                                    `pulumi:"importStatus"`
	ImportUrl                                 pulumi.StringInput                                    `pulumi:"importUrl"`
	InfrastructureAccessLevel                 pulumi.StringInput                                    `pulumi:"infrastructureAccessLevel"`
	IssuesAccessLevel                         pulumi.StringInput                                    `pulumi:"issuesAccessLevel"`
	IssuesEnabled                             pulumi.BoolInput                                      `pulumi:"issuesEnabled"`
	JobsEnabled                               pulumi.BoolInput                                      `pulumi:"jobsEnabled"`
	KeepLatestArtifact                        pulumi.BoolInput                                      `pulumi:"keepLatestArtifact"`
	LastActivityAt                            pulumi.StringInput                                    `pulumi:"lastActivityAt"`
	LfsEnabled                                pulumi.BoolInput                                      `pulumi:"lfsEnabled"`
	MergeCommitTemplate                       pulumi.StringInput                                    `pulumi:"mergeCommitTemplate"`
	MergeMethod                               pulumi.StringInput                                    `pulumi:"mergeMethod"`
	MergePipelinesEnabled                     pulumi.BoolInput                                      `pulumi:"mergePipelinesEnabled"`
	MergeRequestsAccessLevel                  pulumi.StringInput                                    `pulumi:"mergeRequestsAccessLevel"`
	MergeRequestsEnabled                      pulumi.BoolInput                                      `pulumi:"mergeRequestsEnabled"`
	MergeTrainsEnabled                        pulumi.BoolInput                                      `pulumi:"mergeTrainsEnabled"`
	Mirror                                    pulumi.BoolInput                                      `pulumi:"mirror"`
	MirrorOverwritesDivergedBranches          pulumi.BoolInput                                      `pulumi:"mirrorOverwritesDivergedBranches"`
	MirrorTriggerBuilds                       pulumi.BoolInput                                      `pulumi:"mirrorTriggerBuilds"`
	MirrorUserId                              pulumi.IntInput                                       `pulumi:"mirrorUserId"`
	MonitorAccessLevel                        pulumi.StringInput                                    `pulumi:"monitorAccessLevel"`
	Name                                      pulumi.StringInput                                    `pulumi:"name"`
	NameWithNamespace                         pulumi.StringInput                                    `pulumi:"nameWithNamespace"`
	Namespaces                                GetProjectsProjectNamespaceArrayInput                 `pulumi:"namespaces"`
	OnlyAllowMergeIfAllDiscussionsAreResolved pulumi.BoolInput                                      `pulumi:"onlyAllowMergeIfAllDiscussionsAreResolved"`
	OnlyAllowMergeIfPipelineSucceeds          pulumi.BoolInput                                      `pulumi:"onlyAllowMergeIfPipelineSucceeds"`
	OnlyMirrorProtectedBranches               pulumi.BoolInput                                      `pulumi:"onlyMirrorProtectedBranches"`
	OpenIssuesCount                           pulumi.IntInput                                       `pulumi:"openIssuesCount"`
	Owners                                    GetProjectsProjectOwnerArrayInput                     `pulumi:"owners"`
	PackagesEnabled                           pulumi.BoolInput                                      `pulumi:"packagesEnabled"`
	Path                                      pulumi.StringInput                                    `pulumi:"path"`
	PathWithNamespace                         pulumi.StringInput                                    `pulumi:"pathWithNamespace"`
	Permissions                               GetProjectsProjectPermissionArrayInput                `pulumi:"permissions"`
	Public                                    pulumi.BoolInput                                      `pulumi:"public"`
	PublicBuilds                              pulumi.BoolInput                                      `pulumi:"publicBuilds"`
	ReadmeUrl                                 pulumi.StringInput                                    `pulumi:"readmeUrl"`
	ReleasesAccessLevel                       pulumi.StringInput                                    `pulumi:"releasesAccessLevel"`
	RepositoryAccessLevel                     pulumi.StringInput                                    `pulumi:"repositoryAccessLevel"`
	RepositoryStorage                         pulumi.StringInput                                    `pulumi:"repositoryStorage"`
	RequestAccessEnabled                      pulumi.BoolInput                                      `pulumi:"requestAccessEnabled"`
	RequirementsAccessLevel                   pulumi.StringInput                                    `pulumi:"requirementsAccessLevel"`
	ResolveOutdatedDiffDiscussions            pulumi.BoolInput                                      `pulumi:"resolveOutdatedDiffDiscussions"`
	RestrictUserDefinedVariables              pulumi.BoolInput                                      `pulumi:"restrictUserDefinedVariables"`
	RunnersToken                              pulumi.StringInput                                    `pulumi:"runnersToken"`
	SecurityAndComplianceAccessLevel          pulumi.StringInput                                    `pulumi:"securityAndComplianceAccessLevel"`
	SharedRunnersEnabled                      pulumi.BoolInput                                      `pulumi:"sharedRunnersEnabled"`
	SharedWithGroups                          GetProjectsProjectSharedWithGroupArrayInput           `pulumi:"sharedWithGroups"`
	SnippetsAccessLevel                       pulumi.StringInput                                    `pulumi:"snippetsAccessLevel"`
	SnippetsEnabled                           pulumi.BoolInput                                      `pulumi:"snippetsEnabled"`
	SquashCommitTemplate                      pulumi.StringInput                                    `pulumi:"squashCommitTemplate"`
	SshUrlToRepo                              pulumi.StringInput                                    `pulumi:"sshUrlToRepo"`
	StarCount                                 pulumi.IntInput                                       `pulumi:"starCount"`
	Statistics                                pulumi.IntMapInput                                    `pulumi:"statistics"`
	SuggestionCommitMessage                   pulumi.StringInput                                    `pulumi:"suggestionCommitMessage"`
	TagLists                                  pulumi.StringArrayInput                               `pulumi:"tagLists"`
	Topics                                    pulumi.StringArrayInput                               `pulumi:"topics"`
	Visibility                                pulumi.StringInput                                    `pulumi:"visibility"`
	WebUrl                                    pulumi.StringInput                                    `pulumi:"webUrl"`
	WikiAccessLevel                           pulumi.StringInput                                    `pulumi:"wikiAccessLevel"`
	WikiEnabled                               pulumi.BoolInput                                      `pulumi:"wikiEnabled"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

func (i GetProjectsProjectArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProject] {
	return pulumix.Output[GetProjectsProject]{
		OutputState: i.ToGetProjectsProjectOutputWithContext(ctx).OutputState,
	}
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//	GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

func (i GetProjectsProjectArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProject] {
	return pulumix.Output[[]GetProjectsProject]{
		OutputState: i.ToGetProjectsProjectArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProject] {
	return pulumix.Output[GetProjectsProject]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectOutput) _links() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProjectsProject) map[string]string { return v._links }).(pulumi.StringMapOutput)
}

func (o GetProjectsProjectOutput) AllowMergeOnSkippedPipeline() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AllowMergeOnSkippedPipeline }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) AnalyticsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AnalyticsAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ApprovalsBeforeMerge() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.ApprovalsBeforeMerge }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) Archived() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Archived }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) AutoCancelPendingPipelines() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AutoCancelPendingPipelines }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) AutoDevopsDeployStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AutoDevopsDeployStrategy }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) AutoDevopsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AutoDevopsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) AutocloseReferencedIssues() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.AutocloseReferencedIssues }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) BuildCoverageRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.BuildCoverageRegex }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) BuildGitStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.BuildGitStrategy }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) BuildTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.BuildTimeout }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) BuildsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.BuildsAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) CiConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CiConfigPath }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) CiDefaultGitDepth() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.CiDefaultGitDepth }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) CiForwardDeploymentEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.CiForwardDeploymentEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) ContainerExpirationPolicies() GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectContainerExpirationPolicy {
		return v.ContainerExpirationPolicies
	}).(GetProjectsProjectContainerExpirationPolicyArrayOutput)
}

func (o GetProjectsProjectOutput) ContainerRegistryAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ContainerRegistryAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ContainerRegistryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.ContainerRegistryEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) CreatorId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.CreatorId }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) CustomAttributes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []map[string]string { return v.CustomAttributes }).(pulumi.StringMapArrayOutput)
}

func (o GetProjectsProjectOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) EmailsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.EmailsDisabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) EnvironmentsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.EnvironmentsAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ExternalAuthorizationClassificationLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ExternalAuthorizationClassificationLabel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) FeatureFlagsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.FeatureFlagsAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ForkedFromProjects() GetProjectsProjectForkedFromProjectArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectForkedFromProject { return v.ForkedFromProjects }).(GetProjectsProjectForkedFromProjectArrayOutput)
}

func (o GetProjectsProjectOutput) ForkingAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ForkingAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ForksCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.ForksCount }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) HttpUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.HttpUrlToRepo }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) ImportError() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportError }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ImportStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportStatus }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ImportUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ImportUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) InfrastructureAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.InfrastructureAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) IssuesAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.IssuesAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) IssuesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.IssuesEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) JobsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.JobsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) KeepLatestArtifact() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.KeepLatestArtifact }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) LastActivityAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.LastActivityAt }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) LfsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.LfsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MergeCommitTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MergeCommitTemplate }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) MergeMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MergeMethod }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) MergePipelinesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MergePipelinesEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MergeRequestsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MergeRequestsAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) MergeRequestsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MergeRequestsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MergeTrainsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MergeTrainsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) Mirror() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Mirror }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MirrorOverwritesDivergedBranches() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MirrorOverwritesDivergedBranches }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MirrorTriggerBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.MirrorTriggerBuilds }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) MirrorUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.MirrorUserId }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) MonitorAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.MonitorAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Namespaces() GetProjectsProjectNamespaceArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectNamespace { return v.Namespaces }).(GetProjectsProjectNamespaceArrayOutput)
}

func (o GetProjectsProjectOutput) OnlyAllowMergeIfAllDiscussionsAreResolved() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyAllowMergeIfAllDiscussionsAreResolved }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) OnlyAllowMergeIfPipelineSucceeds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyAllowMergeIfPipelineSucceeds }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) OnlyMirrorProtectedBranches() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.OnlyMirrorProtectedBranches }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) OpenIssuesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.OpenIssuesCount }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) Owners() GetProjectsProjectOwnerArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectOwner { return v.Owners }).(GetProjectsProjectOwnerArrayOutput)
}

func (o GetProjectsProjectOutput) PackagesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.PackagesEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) Permissions() GetProjectsProjectPermissionArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectPermission { return v.Permissions }).(GetProjectsProjectPermissionArrayOutput)
}

func (o GetProjectsProjectOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Public }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) PublicBuilds() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.PublicBuilds }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) ReadmeUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ReadmeUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ReleasesAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ReleasesAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) RepositoryAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RepositoryAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) RepositoryStorage() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RepositoryStorage }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) RequestAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.RequestAccessEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) RequirementsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RequirementsAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ResolveOutdatedDiffDiscussions() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.ResolveOutdatedDiffDiscussions }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) RestrictUserDefinedVariables() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.RestrictUserDefinedVariables }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) RunnersToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.RunnersToken }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) SecurityAndComplianceAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SecurityAndComplianceAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) SharedRunnersEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.SharedRunnersEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) SharedWithGroups() GetProjectsProjectSharedWithGroupArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []GetProjectsProjectSharedWithGroup { return v.SharedWithGroups }).(GetProjectsProjectSharedWithGroupArrayOutput)
}

func (o GetProjectsProjectOutput) SnippetsAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SnippetsAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) SnippetsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.SnippetsEnabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) SquashCommitTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SquashCommitTemplate }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) SshUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SshUrlToRepo }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) StarCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.StarCount }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) Statistics() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProject) map[string]int { return v.Statistics }).(pulumi.IntMapOutput)
}

func (o GetProjectsProjectOutput) SuggestionCommitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.SuggestionCommitMessage }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) TagLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []string { return v.TagLists }).(pulumi.StringArrayOutput)
}

func (o GetProjectsProjectOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

func (o GetProjectsProjectOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Visibility }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.WebUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) WikiAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.WikiAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) WikiEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.WikiEnabled }).(pulumi.BoolOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProject] {
	return pulumix.Output[[]GetProjectsProject]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetProjectsProjectContainerExpirationPolicy struct {
	Cadence string `pulumi:"cadence"`
	Enabled bool   `pulumi:"enabled"`
	KeepN   int    `pulumi:"keepN"`
	// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
	NameRegex       string `pulumi:"nameRegex"`
	NameRegexDelete string `pulumi:"nameRegexDelete"`
	NameRegexKeep   string `pulumi:"nameRegexKeep"`
	NextRunAt       string `pulumi:"nextRunAt"`
	OlderThan       string `pulumi:"olderThan"`
}

// GetProjectsProjectContainerExpirationPolicyInput is an input type that accepts GetProjectsProjectContainerExpirationPolicyArgs and GetProjectsProjectContainerExpirationPolicyOutput values.
// You can construct a concrete instance of `GetProjectsProjectContainerExpirationPolicyInput` via:
//
//	GetProjectsProjectContainerExpirationPolicyArgs{...}
type GetProjectsProjectContainerExpirationPolicyInput interface {
	pulumi.Input

	ToGetProjectsProjectContainerExpirationPolicyOutput() GetProjectsProjectContainerExpirationPolicyOutput
	ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(context.Context) GetProjectsProjectContainerExpirationPolicyOutput
}

type GetProjectsProjectContainerExpirationPolicyArgs struct {
	Cadence pulumi.StringInput `pulumi:"cadence"`
	Enabled pulumi.BoolInput   `pulumi:"enabled"`
	KeepN   pulumi.IntInput    `pulumi:"keepN"`
	// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
	NameRegex       pulumi.StringInput `pulumi:"nameRegex"`
	NameRegexDelete pulumi.StringInput `pulumi:"nameRegexDelete"`
	NameRegexKeep   pulumi.StringInput `pulumi:"nameRegexKeep"`
	NextRunAt       pulumi.StringInput `pulumi:"nextRunAt"`
	OlderThan       pulumi.StringInput `pulumi:"olderThan"`
}

func (GetProjectsProjectContainerExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectsProjectContainerExpirationPolicyArgs) ToGetProjectsProjectContainerExpirationPolicyOutput() GetProjectsProjectContainerExpirationPolicyOutput {
	return i.ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(context.Background())
}

func (i GetProjectsProjectContainerExpirationPolicyArgs) ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectContainerExpirationPolicyOutput)
}

func (i GetProjectsProjectContainerExpirationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectContainerExpirationPolicy] {
	return pulumix.Output[GetProjectsProjectContainerExpirationPolicy]{
		OutputState: i.ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetProjectsProjectContainerExpirationPolicyArrayInput is an input type that accepts GetProjectsProjectContainerExpirationPolicyArray and GetProjectsProjectContainerExpirationPolicyArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectContainerExpirationPolicyArrayInput` via:
//
//	GetProjectsProjectContainerExpirationPolicyArray{ GetProjectsProjectContainerExpirationPolicyArgs{...} }
type GetProjectsProjectContainerExpirationPolicyArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectContainerExpirationPolicyArrayOutput() GetProjectsProjectContainerExpirationPolicyArrayOutput
	ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(context.Context) GetProjectsProjectContainerExpirationPolicyArrayOutput
}

type GetProjectsProjectContainerExpirationPolicyArray []GetProjectsProjectContainerExpirationPolicyInput

func (GetProjectsProjectContainerExpirationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (i GetProjectsProjectContainerExpirationPolicyArray) ToGetProjectsProjectContainerExpirationPolicyArrayOutput() GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return i.ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectContainerExpirationPolicyArray) ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectContainerExpirationPolicyArrayOutput)
}

func (i GetProjectsProjectContainerExpirationPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectContainerExpirationPolicy] {
	return pulumix.Output[[]GetProjectsProjectContainerExpirationPolicy]{
		OutputState: i.ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectsProjectContainerExpirationPolicyOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectContainerExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) ToGetProjectsProjectContainerExpirationPolicyOutput() GetProjectsProjectContainerExpirationPolicyOutput {
	return o
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) ToGetProjectsProjectContainerExpirationPolicyOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyOutput {
	return o
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectContainerExpirationPolicy] {
	return pulumix.Output[GetProjectsProjectContainerExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) Cadence() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.Cadence }).(pulumi.StringOutput)
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) KeepN() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) int { return v.KeepN }).(pulumi.IntOutput)
}

// Deprecated: `name_regex` has been deprecated. Use `name_regex_delete` instead.
func (o GetProjectsProjectContainerExpirationPolicyOutput) NameRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NameRegex }).(pulumi.StringOutput)
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) NameRegexDelete() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NameRegexDelete }).(pulumi.StringOutput)
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) NameRegexKeep() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NameRegexKeep }).(pulumi.StringOutput)
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.NextRunAt }).(pulumi.StringOutput)
}

func (o GetProjectsProjectContainerExpirationPolicyOutput) OlderThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectContainerExpirationPolicy) string { return v.OlderThan }).(pulumi.StringOutput)
}

type GetProjectsProjectContainerExpirationPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectContainerExpirationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectContainerExpirationPolicy)(nil)).Elem()
}

func (o GetProjectsProjectContainerExpirationPolicyArrayOutput) ToGetProjectsProjectContainerExpirationPolicyArrayOutput() GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectsProjectContainerExpirationPolicyArrayOutput) ToGetProjectsProjectContainerExpirationPolicyArrayOutputWithContext(ctx context.Context) GetProjectsProjectContainerExpirationPolicyArrayOutput {
	return o
}

func (o GetProjectsProjectContainerExpirationPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectContainerExpirationPolicy] {
	return pulumix.Output[[]GetProjectsProjectContainerExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectContainerExpirationPolicyArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectContainerExpirationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectContainerExpirationPolicy {
		return vs[0].([]GetProjectsProjectContainerExpirationPolicy)[vs[1].(int)]
	}).(GetProjectsProjectContainerExpirationPolicyOutput)
}

type GetProjectsProjectForkedFromProject struct {
	HttpUrlToRepo     string `pulumi:"httpUrlToRepo"`
	Id                int    `pulumi:"id"`
	Name              string `pulumi:"name"`
	NameWithNamespace string `pulumi:"nameWithNamespace"`
	Path              string `pulumi:"path"`
	PathWithNamespace string `pulumi:"pathWithNamespace"`
	WebUrl            string `pulumi:"webUrl"`
}

// GetProjectsProjectForkedFromProjectInput is an input type that accepts GetProjectsProjectForkedFromProjectArgs and GetProjectsProjectForkedFromProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectForkedFromProjectInput` via:
//
//	GetProjectsProjectForkedFromProjectArgs{...}
type GetProjectsProjectForkedFromProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput
	ToGetProjectsProjectForkedFromProjectOutputWithContext(context.Context) GetProjectsProjectForkedFromProjectOutput
}

type GetProjectsProjectForkedFromProjectArgs struct {
	HttpUrlToRepo     pulumi.StringInput `pulumi:"httpUrlToRepo"`
	Id                pulumi.IntInput    `pulumi:"id"`
	Name              pulumi.StringInput `pulumi:"name"`
	NameWithNamespace pulumi.StringInput `pulumi:"nameWithNamespace"`
	Path              pulumi.StringInput `pulumi:"path"`
	PathWithNamespace pulumi.StringInput `pulumi:"pathWithNamespace"`
	WebUrl            pulumi.StringInput `pulumi:"webUrl"`
}

func (GetProjectsProjectForkedFromProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (i GetProjectsProjectForkedFromProjectArgs) ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput {
	return i.ToGetProjectsProjectForkedFromProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectForkedFromProjectArgs) ToGetProjectsProjectForkedFromProjectOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectForkedFromProjectOutput)
}

func (i GetProjectsProjectForkedFromProjectArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectForkedFromProject] {
	return pulumix.Output[GetProjectsProjectForkedFromProject]{
		OutputState: i.ToGetProjectsProjectForkedFromProjectOutputWithContext(ctx).OutputState,
	}
}

// GetProjectsProjectForkedFromProjectArrayInput is an input type that accepts GetProjectsProjectForkedFromProjectArray and GetProjectsProjectForkedFromProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectForkedFromProjectArrayInput` via:
//
//	GetProjectsProjectForkedFromProjectArray{ GetProjectsProjectForkedFromProjectArgs{...} }
type GetProjectsProjectForkedFromProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectForkedFromProjectArrayOutput() GetProjectsProjectForkedFromProjectArrayOutput
	ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(context.Context) GetProjectsProjectForkedFromProjectArrayOutput
}

type GetProjectsProjectForkedFromProjectArray []GetProjectsProjectForkedFromProjectInput

func (GetProjectsProjectForkedFromProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (i GetProjectsProjectForkedFromProjectArray) ToGetProjectsProjectForkedFromProjectArrayOutput() GetProjectsProjectForkedFromProjectArrayOutput {
	return i.ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectForkedFromProjectArray) ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectForkedFromProjectArrayOutput)
}

func (i GetProjectsProjectForkedFromProjectArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectForkedFromProject] {
	return pulumix.Output[[]GetProjectsProjectForkedFromProject]{
		OutputState: i.ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectsProjectForkedFromProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectForkedFromProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (o GetProjectsProjectForkedFromProjectOutput) ToGetProjectsProjectForkedFromProjectOutput() GetProjectsProjectForkedFromProjectOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectOutput) ToGetProjectsProjectForkedFromProjectOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectForkedFromProject] {
	return pulumix.Output[GetProjectsProjectForkedFromProject]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectForkedFromProjectOutput) HttpUrlToRepo() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.HttpUrlToRepo }).(pulumi.StringOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) NameWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.NameWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) PathWithNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.PathWithNamespace }).(pulumi.StringOutput)
}

func (o GetProjectsProjectForkedFromProjectOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectForkedFromProject) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetProjectsProjectForkedFromProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectForkedFromProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectForkedFromProject)(nil)).Elem()
}

func (o GetProjectsProjectForkedFromProjectArrayOutput) ToGetProjectsProjectForkedFromProjectArrayOutput() GetProjectsProjectForkedFromProjectArrayOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectArrayOutput) ToGetProjectsProjectForkedFromProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectForkedFromProjectArrayOutput {
	return o
}

func (o GetProjectsProjectForkedFromProjectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectForkedFromProject] {
	return pulumix.Output[[]GetProjectsProjectForkedFromProject]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectForkedFromProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectForkedFromProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectForkedFromProject {
		return vs[0].([]GetProjectsProjectForkedFromProject)[vs[1].(int)]
	}).(GetProjectsProjectForkedFromProjectOutput)
}

type GetProjectsProjectNamespace struct {
	FullPath string `pulumi:"fullPath"`
	Id       int    `pulumi:"id"`
	Kind     string `pulumi:"kind"`
	Name     string `pulumi:"name"`
	Path     string `pulumi:"path"`
}

// GetProjectsProjectNamespaceInput is an input type that accepts GetProjectsProjectNamespaceArgs and GetProjectsProjectNamespaceOutput values.
// You can construct a concrete instance of `GetProjectsProjectNamespaceInput` via:
//
//	GetProjectsProjectNamespaceArgs{...}
type GetProjectsProjectNamespaceInput interface {
	pulumi.Input

	ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput
	ToGetProjectsProjectNamespaceOutputWithContext(context.Context) GetProjectsProjectNamespaceOutput
}

type GetProjectsProjectNamespaceArgs struct {
	FullPath pulumi.StringInput `pulumi:"fullPath"`
	Id       pulumi.IntInput    `pulumi:"id"`
	Kind     pulumi.StringInput `pulumi:"kind"`
	Name     pulumi.StringInput `pulumi:"name"`
	Path     pulumi.StringInput `pulumi:"path"`
}

func (GetProjectsProjectNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectNamespace)(nil)).Elem()
}

func (i GetProjectsProjectNamespaceArgs) ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput {
	return i.ToGetProjectsProjectNamespaceOutputWithContext(context.Background())
}

func (i GetProjectsProjectNamespaceArgs) ToGetProjectsProjectNamespaceOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectNamespaceOutput)
}

func (i GetProjectsProjectNamespaceArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectNamespace] {
	return pulumix.Output[GetProjectsProjectNamespace]{
		OutputState: i.ToGetProjectsProjectNamespaceOutputWithContext(ctx).OutputState,
	}
}

// GetProjectsProjectNamespaceArrayInput is an input type that accepts GetProjectsProjectNamespaceArray and GetProjectsProjectNamespaceArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectNamespaceArrayInput` via:
//
//	GetProjectsProjectNamespaceArray{ GetProjectsProjectNamespaceArgs{...} }
type GetProjectsProjectNamespaceArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectNamespaceArrayOutput() GetProjectsProjectNamespaceArrayOutput
	ToGetProjectsProjectNamespaceArrayOutputWithContext(context.Context) GetProjectsProjectNamespaceArrayOutput
}

type GetProjectsProjectNamespaceArray []GetProjectsProjectNamespaceInput

func (GetProjectsProjectNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectNamespace)(nil)).Elem()
}

func (i GetProjectsProjectNamespaceArray) ToGetProjectsProjectNamespaceArrayOutput() GetProjectsProjectNamespaceArrayOutput {
	return i.ToGetProjectsProjectNamespaceArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectNamespaceArray) ToGetProjectsProjectNamespaceArrayOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectNamespaceArrayOutput)
}

func (i GetProjectsProjectNamespaceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectNamespace] {
	return pulumix.Output[[]GetProjectsProjectNamespace]{
		OutputState: i.ToGetProjectsProjectNamespaceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectsProjectNamespaceOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectNamespace)(nil)).Elem()
}

func (o GetProjectsProjectNamespaceOutput) ToGetProjectsProjectNamespaceOutput() GetProjectsProjectNamespaceOutput {
	return o
}

func (o GetProjectsProjectNamespaceOutput) ToGetProjectsProjectNamespaceOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceOutput {
	return o
}

func (o GetProjectsProjectNamespaceOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectNamespace] {
	return pulumix.Output[GetProjectsProjectNamespace]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectNamespaceOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.FullPath }).(pulumi.StringOutput)
}

func (o GetProjectsProjectNamespaceOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectsProjectNamespaceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetProjectsProjectNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectsProjectNamespaceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectNamespace) string { return v.Path }).(pulumi.StringOutput)
}

type GetProjectsProjectNamespaceArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectNamespace)(nil)).Elem()
}

func (o GetProjectsProjectNamespaceArrayOutput) ToGetProjectsProjectNamespaceArrayOutput() GetProjectsProjectNamespaceArrayOutput {
	return o
}

func (o GetProjectsProjectNamespaceArrayOutput) ToGetProjectsProjectNamespaceArrayOutputWithContext(ctx context.Context) GetProjectsProjectNamespaceArrayOutput {
	return o
}

func (o GetProjectsProjectNamespaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectNamespace] {
	return pulumix.Output[[]GetProjectsProjectNamespace]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectNamespaceArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectNamespace {
		return vs[0].([]GetProjectsProjectNamespace)[vs[1].(int)]
	}).(GetProjectsProjectNamespaceOutput)
}

type GetProjectsProjectOwner struct {
	AvatarUrl  string `pulumi:"avatarUrl"`
	Id         int    `pulumi:"id"`
	Name       string `pulumi:"name"`
	State      string `pulumi:"state"`
	Username   string `pulumi:"username"`
	WebsiteUrl string `pulumi:"websiteUrl"`
}

// GetProjectsProjectOwnerInput is an input type that accepts GetProjectsProjectOwnerArgs and GetProjectsProjectOwnerOutput values.
// You can construct a concrete instance of `GetProjectsProjectOwnerInput` via:
//
//	GetProjectsProjectOwnerArgs{...}
type GetProjectsProjectOwnerInput interface {
	pulumi.Input

	ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput
	ToGetProjectsProjectOwnerOutputWithContext(context.Context) GetProjectsProjectOwnerOutput
}

type GetProjectsProjectOwnerArgs struct {
	AvatarUrl  pulumi.StringInput `pulumi:"avatarUrl"`
	Id         pulumi.IntInput    `pulumi:"id"`
	Name       pulumi.StringInput `pulumi:"name"`
	State      pulumi.StringInput `pulumi:"state"`
	Username   pulumi.StringInput `pulumi:"username"`
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetProjectsProjectOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectOwner)(nil)).Elem()
}

func (i GetProjectsProjectOwnerArgs) ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput {
	return i.ToGetProjectsProjectOwnerOutputWithContext(context.Background())
}

func (i GetProjectsProjectOwnerArgs) ToGetProjectsProjectOwnerOutputWithContext(ctx context.Context) GetProjectsProjectOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOwnerOutput)
}

func (i GetProjectsProjectOwnerArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectOwner] {
	return pulumix.Output[GetProjectsProjectOwner]{
		OutputState: i.ToGetProjectsProjectOwnerOutputWithContext(ctx).OutputState,
	}
}

// GetProjectsProjectOwnerArrayInput is an input type that accepts GetProjectsProjectOwnerArray and GetProjectsProjectOwnerArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectOwnerArrayInput` via:
//
//	GetProjectsProjectOwnerArray{ GetProjectsProjectOwnerArgs{...} }
type GetProjectsProjectOwnerArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectOwnerArrayOutput() GetProjectsProjectOwnerArrayOutput
	ToGetProjectsProjectOwnerArrayOutputWithContext(context.Context) GetProjectsProjectOwnerArrayOutput
}

type GetProjectsProjectOwnerArray []GetProjectsProjectOwnerInput

func (GetProjectsProjectOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectOwner)(nil)).Elem()
}

func (i GetProjectsProjectOwnerArray) ToGetProjectsProjectOwnerArrayOutput() GetProjectsProjectOwnerArrayOutput {
	return i.ToGetProjectsProjectOwnerArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectOwnerArray) ToGetProjectsProjectOwnerArrayOutputWithContext(ctx context.Context) GetProjectsProjectOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOwnerArrayOutput)
}

func (i GetProjectsProjectOwnerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectOwner] {
	return pulumix.Output[[]GetProjectsProjectOwner]{
		OutputState: i.ToGetProjectsProjectOwnerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectsProjectOwnerOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectOwner)(nil)).Elem()
}

func (o GetProjectsProjectOwnerOutput) ToGetProjectsProjectOwnerOutput() GetProjectsProjectOwnerOutput {
	return o
}

func (o GetProjectsProjectOwnerOutput) ToGetProjectsProjectOwnerOutputWithContext(ctx context.Context) GetProjectsProjectOwnerOutput {
	return o
}

func (o GetProjectsProjectOwnerOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectOwner] {
	return pulumix.Output[GetProjectsProjectOwner]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectOwnerOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOwnerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOwnerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.State }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOwnerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.Username }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOwnerOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectOwner) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetProjectsProjectOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectOwner)(nil)).Elem()
}

func (o GetProjectsProjectOwnerArrayOutput) ToGetProjectsProjectOwnerArrayOutput() GetProjectsProjectOwnerArrayOutput {
	return o
}

func (o GetProjectsProjectOwnerArrayOutput) ToGetProjectsProjectOwnerArrayOutputWithContext(ctx context.Context) GetProjectsProjectOwnerArrayOutput {
	return o
}

func (o GetProjectsProjectOwnerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectOwner] {
	return pulumix.Output[[]GetProjectsProjectOwner]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectOwnerArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectOwner {
		return vs[0].([]GetProjectsProjectOwner)[vs[1].(int)]
	}).(GetProjectsProjectOwnerOutput)
}

type GetProjectsProjectPermission struct {
	GroupAccess   map[string]int `pulumi:"groupAccess"`
	ProjectAccess map[string]int `pulumi:"projectAccess"`
}

// GetProjectsProjectPermissionInput is an input type that accepts GetProjectsProjectPermissionArgs and GetProjectsProjectPermissionOutput values.
// You can construct a concrete instance of `GetProjectsProjectPermissionInput` via:
//
//	GetProjectsProjectPermissionArgs{...}
type GetProjectsProjectPermissionInput interface {
	pulumi.Input

	ToGetProjectsProjectPermissionOutput() GetProjectsProjectPermissionOutput
	ToGetProjectsProjectPermissionOutputWithContext(context.Context) GetProjectsProjectPermissionOutput
}

type GetProjectsProjectPermissionArgs struct {
	GroupAccess   pulumi.IntMapInput `pulumi:"groupAccess"`
	ProjectAccess pulumi.IntMapInput `pulumi:"projectAccess"`
}

func (GetProjectsProjectPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectPermission)(nil)).Elem()
}

func (i GetProjectsProjectPermissionArgs) ToGetProjectsProjectPermissionOutput() GetProjectsProjectPermissionOutput {
	return i.ToGetProjectsProjectPermissionOutputWithContext(context.Background())
}

func (i GetProjectsProjectPermissionArgs) ToGetProjectsProjectPermissionOutputWithContext(ctx context.Context) GetProjectsProjectPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectPermissionOutput)
}

func (i GetProjectsProjectPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectPermission] {
	return pulumix.Output[GetProjectsProjectPermission]{
		OutputState: i.ToGetProjectsProjectPermissionOutputWithContext(ctx).OutputState,
	}
}

// GetProjectsProjectPermissionArrayInput is an input type that accepts GetProjectsProjectPermissionArray and GetProjectsProjectPermissionArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectPermissionArrayInput` via:
//
//	GetProjectsProjectPermissionArray{ GetProjectsProjectPermissionArgs{...} }
type GetProjectsProjectPermissionArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectPermissionArrayOutput() GetProjectsProjectPermissionArrayOutput
	ToGetProjectsProjectPermissionArrayOutputWithContext(context.Context) GetProjectsProjectPermissionArrayOutput
}

type GetProjectsProjectPermissionArray []GetProjectsProjectPermissionInput

func (GetProjectsProjectPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectPermission)(nil)).Elem()
}

func (i GetProjectsProjectPermissionArray) ToGetProjectsProjectPermissionArrayOutput() GetProjectsProjectPermissionArrayOutput {
	return i.ToGetProjectsProjectPermissionArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectPermissionArray) ToGetProjectsProjectPermissionArrayOutputWithContext(ctx context.Context) GetProjectsProjectPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectPermissionArrayOutput)
}

func (i GetProjectsProjectPermissionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectPermission] {
	return pulumix.Output[[]GetProjectsProjectPermission]{
		OutputState: i.ToGetProjectsProjectPermissionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectsProjectPermissionOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectPermission)(nil)).Elem()
}

func (o GetProjectsProjectPermissionOutput) ToGetProjectsProjectPermissionOutput() GetProjectsProjectPermissionOutput {
	return o
}

func (o GetProjectsProjectPermissionOutput) ToGetProjectsProjectPermissionOutputWithContext(ctx context.Context) GetProjectsProjectPermissionOutput {
	return o
}

func (o GetProjectsProjectPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectPermission] {
	return pulumix.Output[GetProjectsProjectPermission]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectPermissionOutput) GroupAccess() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProjectPermission) map[string]int { return v.GroupAccess }).(pulumi.IntMapOutput)
}

func (o GetProjectsProjectPermissionOutput) ProjectAccess() pulumi.IntMapOutput {
	return o.ApplyT(func(v GetProjectsProjectPermission) map[string]int { return v.ProjectAccess }).(pulumi.IntMapOutput)
}

type GetProjectsProjectPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectPermission)(nil)).Elem()
}

func (o GetProjectsProjectPermissionArrayOutput) ToGetProjectsProjectPermissionArrayOutput() GetProjectsProjectPermissionArrayOutput {
	return o
}

func (o GetProjectsProjectPermissionArrayOutput) ToGetProjectsProjectPermissionArrayOutputWithContext(ctx context.Context) GetProjectsProjectPermissionArrayOutput {
	return o
}

func (o GetProjectsProjectPermissionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectPermission] {
	return pulumix.Output[[]GetProjectsProjectPermission]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectPermissionArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectPermission {
		return vs[0].([]GetProjectsProjectPermission)[vs[1].(int)]
	}).(GetProjectsProjectPermissionOutput)
}

type GetProjectsProjectSharedWithGroup struct {
	GroupAccessLevel string `pulumi:"groupAccessLevel"`
	GroupId          int    `pulumi:"groupId"`
	GroupName        string `pulumi:"groupName"`
}

// GetProjectsProjectSharedWithGroupInput is an input type that accepts GetProjectsProjectSharedWithGroupArgs and GetProjectsProjectSharedWithGroupOutput values.
// You can construct a concrete instance of `GetProjectsProjectSharedWithGroupInput` via:
//
//	GetProjectsProjectSharedWithGroupArgs{...}
type GetProjectsProjectSharedWithGroupInput interface {
	pulumi.Input

	ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput
	ToGetProjectsProjectSharedWithGroupOutputWithContext(context.Context) GetProjectsProjectSharedWithGroupOutput
}

type GetProjectsProjectSharedWithGroupArgs struct {
	GroupAccessLevel pulumi.StringInput `pulumi:"groupAccessLevel"`
	GroupId          pulumi.IntInput    `pulumi:"groupId"`
	GroupName        pulumi.StringInput `pulumi:"groupName"`
}

func (GetProjectsProjectSharedWithGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectsProjectSharedWithGroupArgs) ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput {
	return i.ToGetProjectsProjectSharedWithGroupOutputWithContext(context.Background())
}

func (i GetProjectsProjectSharedWithGroupArgs) ToGetProjectsProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectSharedWithGroupOutput)
}

func (i GetProjectsProjectSharedWithGroupArgs) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectSharedWithGroup] {
	return pulumix.Output[GetProjectsProjectSharedWithGroup]{
		OutputState: i.ToGetProjectsProjectSharedWithGroupOutputWithContext(ctx).OutputState,
	}
}

// GetProjectsProjectSharedWithGroupArrayInput is an input type that accepts GetProjectsProjectSharedWithGroupArray and GetProjectsProjectSharedWithGroupArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectSharedWithGroupArrayInput` via:
//
//	GetProjectsProjectSharedWithGroupArray{ GetProjectsProjectSharedWithGroupArgs{...} }
type GetProjectsProjectSharedWithGroupArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput
	ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(context.Context) GetProjectsProjectSharedWithGroupArrayOutput
}

type GetProjectsProjectSharedWithGroupArray []GetProjectsProjectSharedWithGroupInput

func (GetProjectsProjectSharedWithGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (i GetProjectsProjectSharedWithGroupArray) ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput {
	return i.ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectSharedWithGroupArray) ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectSharedWithGroupArrayOutput)
}

func (i GetProjectsProjectSharedWithGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectSharedWithGroup] {
	return pulumix.Output[[]GetProjectsProjectSharedWithGroup]{
		OutputState: i.ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type GetProjectsProjectSharedWithGroupOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectSharedWithGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectsProjectSharedWithGroupOutput) ToGetProjectsProjectSharedWithGroupOutput() GetProjectsProjectSharedWithGroupOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupOutput) ToGetProjectsProjectSharedWithGroupOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetProjectsProjectSharedWithGroup] {
	return pulumix.Output[GetProjectsProjectSharedWithGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectSharedWithGroupOutput) GroupAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) string { return v.GroupAccessLevel }).(pulumi.StringOutput)
}

func (o GetProjectsProjectSharedWithGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

func (o GetProjectsProjectSharedWithGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProjectSharedWithGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

type GetProjectsProjectSharedWithGroupArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectSharedWithGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProjectSharedWithGroup)(nil)).Elem()
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) ToGetProjectsProjectSharedWithGroupArrayOutput() GetProjectsProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) ToGetProjectsProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) GetProjectsProjectSharedWithGroupArrayOutput {
	return o
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetProjectsProjectSharedWithGroup] {
	return pulumix.Output[[]GetProjectsProjectSharedWithGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetProjectsProjectSharedWithGroupArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectSharedWithGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProjectSharedWithGroup {
		return vs[0].([]GetProjectsProjectSharedWithGroup)[vs[1].(int)]
	}).(GetProjectsProjectSharedWithGroupOutput)
}

type GetReleaseLinksReleaseLink struct {
	DirectAssetUrl string `pulumi:"directAssetUrl"`
	External       bool   `pulumi:"external"`
	Filepath       string `pulumi:"filepath"`
	LinkId         int    `pulumi:"linkId"`
	LinkType       string `pulumi:"linkType"`
	Name           string `pulumi:"name"`
	Project        string `pulumi:"project"`
	TagName        string `pulumi:"tagName"`
	Url            string `pulumi:"url"`
}

// GetReleaseLinksReleaseLinkInput is an input type that accepts GetReleaseLinksReleaseLinkArgs and GetReleaseLinksReleaseLinkOutput values.
// You can construct a concrete instance of `GetReleaseLinksReleaseLinkInput` via:
//
//	GetReleaseLinksReleaseLinkArgs{...}
type GetReleaseLinksReleaseLinkInput interface {
	pulumi.Input

	ToGetReleaseLinksReleaseLinkOutput() GetReleaseLinksReleaseLinkOutput
	ToGetReleaseLinksReleaseLinkOutputWithContext(context.Context) GetReleaseLinksReleaseLinkOutput
}

type GetReleaseLinksReleaseLinkArgs struct {
	DirectAssetUrl pulumi.StringInput `pulumi:"directAssetUrl"`
	External       pulumi.BoolInput   `pulumi:"external"`
	Filepath       pulumi.StringInput `pulumi:"filepath"`
	LinkId         pulumi.IntInput    `pulumi:"linkId"`
	LinkType       pulumi.StringInput `pulumi:"linkType"`
	Name           pulumi.StringInput `pulumi:"name"`
	Project        pulumi.StringInput `pulumi:"project"`
	TagName        pulumi.StringInput `pulumi:"tagName"`
	Url            pulumi.StringInput `pulumi:"url"`
}

func (GetReleaseLinksReleaseLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (i GetReleaseLinksReleaseLinkArgs) ToGetReleaseLinksReleaseLinkOutput() GetReleaseLinksReleaseLinkOutput {
	return i.ToGetReleaseLinksReleaseLinkOutputWithContext(context.Background())
}

func (i GetReleaseLinksReleaseLinkArgs) ToGetReleaseLinksReleaseLinkOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseLinksReleaseLinkOutput)
}

func (i GetReleaseLinksReleaseLinkArgs) ToOutput(ctx context.Context) pulumix.Output[GetReleaseLinksReleaseLink] {
	return pulumix.Output[GetReleaseLinksReleaseLink]{
		OutputState: i.ToGetReleaseLinksReleaseLinkOutputWithContext(ctx).OutputState,
	}
}

// GetReleaseLinksReleaseLinkArrayInput is an input type that accepts GetReleaseLinksReleaseLinkArray and GetReleaseLinksReleaseLinkArrayOutput values.
// You can construct a concrete instance of `GetReleaseLinksReleaseLinkArrayInput` via:
//
//	GetReleaseLinksReleaseLinkArray{ GetReleaseLinksReleaseLinkArgs{...} }
type GetReleaseLinksReleaseLinkArrayInput interface {
	pulumi.Input

	ToGetReleaseLinksReleaseLinkArrayOutput() GetReleaseLinksReleaseLinkArrayOutput
	ToGetReleaseLinksReleaseLinkArrayOutputWithContext(context.Context) GetReleaseLinksReleaseLinkArrayOutput
}

type GetReleaseLinksReleaseLinkArray []GetReleaseLinksReleaseLinkInput

func (GetReleaseLinksReleaseLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (i GetReleaseLinksReleaseLinkArray) ToGetReleaseLinksReleaseLinkArrayOutput() GetReleaseLinksReleaseLinkArrayOutput {
	return i.ToGetReleaseLinksReleaseLinkArrayOutputWithContext(context.Background())
}

func (i GetReleaseLinksReleaseLinkArray) ToGetReleaseLinksReleaseLinkArrayOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseLinksReleaseLinkArrayOutput)
}

func (i GetReleaseLinksReleaseLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReleaseLinksReleaseLink] {
	return pulumix.Output[[]GetReleaseLinksReleaseLink]{
		OutputState: i.ToGetReleaseLinksReleaseLinkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReleaseLinksReleaseLinkOutput struct{ *pulumi.OutputState }

func (GetReleaseLinksReleaseLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (o GetReleaseLinksReleaseLinkOutput) ToGetReleaseLinksReleaseLinkOutput() GetReleaseLinksReleaseLinkOutput {
	return o
}

func (o GetReleaseLinksReleaseLinkOutput) ToGetReleaseLinksReleaseLinkOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkOutput {
	return o
}

func (o GetReleaseLinksReleaseLinkOutput) ToOutput(ctx context.Context) pulumix.Output[GetReleaseLinksReleaseLink] {
	return pulumix.Output[GetReleaseLinksReleaseLink]{
		OutputState: o.OutputState,
	}
}

func (o GetReleaseLinksReleaseLinkOutput) DirectAssetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.DirectAssetUrl }).(pulumi.StringOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) bool { return v.External }).(pulumi.BoolOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) Filepath() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Filepath }).(pulumi.StringOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) LinkId() pulumi.IntOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) int { return v.LinkId }).(pulumi.IntOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) LinkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.LinkType }).(pulumi.StringOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.TagName }).(pulumi.StringOutput)
}

func (o GetReleaseLinksReleaseLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLinksReleaseLink) string { return v.Url }).(pulumi.StringOutput)
}

type GetReleaseLinksReleaseLinkArrayOutput struct{ *pulumi.OutputState }

func (GetReleaseLinksReleaseLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseLinksReleaseLink)(nil)).Elem()
}

func (o GetReleaseLinksReleaseLinkArrayOutput) ToGetReleaseLinksReleaseLinkArrayOutput() GetReleaseLinksReleaseLinkArrayOutput {
	return o
}

func (o GetReleaseLinksReleaseLinkArrayOutput) ToGetReleaseLinksReleaseLinkArrayOutputWithContext(ctx context.Context) GetReleaseLinksReleaseLinkArrayOutput {
	return o
}

func (o GetReleaseLinksReleaseLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReleaseLinksReleaseLink] {
	return pulumix.Output[[]GetReleaseLinksReleaseLink]{
		OutputState: o.OutputState,
	}
}

func (o GetReleaseLinksReleaseLinkArrayOutput) Index(i pulumi.IntInput) GetReleaseLinksReleaseLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReleaseLinksReleaseLink {
		return vs[0].([]GetReleaseLinksReleaseLink)[vs[1].(int)]
	}).(GetReleaseLinksReleaseLinkOutput)
}

type GetRepositoryTreeTree struct {
	Id   string `pulumi:"id"`
	Mode string `pulumi:"mode"`
	Name string `pulumi:"name"`
	Path string `pulumi:"path"`
	Type string `pulumi:"type"`
}

// GetRepositoryTreeTreeInput is an input type that accepts GetRepositoryTreeTreeArgs and GetRepositoryTreeTreeOutput values.
// You can construct a concrete instance of `GetRepositoryTreeTreeInput` via:
//
//	GetRepositoryTreeTreeArgs{...}
type GetRepositoryTreeTreeInput interface {
	pulumi.Input

	ToGetRepositoryTreeTreeOutput() GetRepositoryTreeTreeOutput
	ToGetRepositoryTreeTreeOutputWithContext(context.Context) GetRepositoryTreeTreeOutput
}

type GetRepositoryTreeTreeArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Mode pulumi.StringInput `pulumi:"mode"`
	Name pulumi.StringInput `pulumi:"name"`
	Path pulumi.StringInput `pulumi:"path"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRepositoryTreeTreeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTreeTree)(nil)).Elem()
}

func (i GetRepositoryTreeTreeArgs) ToGetRepositoryTreeTreeOutput() GetRepositoryTreeTreeOutput {
	return i.ToGetRepositoryTreeTreeOutputWithContext(context.Background())
}

func (i GetRepositoryTreeTreeArgs) ToGetRepositoryTreeTreeOutputWithContext(ctx context.Context) GetRepositoryTreeTreeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryTreeTreeOutput)
}

func (i GetRepositoryTreeTreeArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryTreeTree] {
	return pulumix.Output[GetRepositoryTreeTree]{
		OutputState: i.ToGetRepositoryTreeTreeOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryTreeTreeArrayInput is an input type that accepts GetRepositoryTreeTreeArray and GetRepositoryTreeTreeArrayOutput values.
// You can construct a concrete instance of `GetRepositoryTreeTreeArrayInput` via:
//
//	GetRepositoryTreeTreeArray{ GetRepositoryTreeTreeArgs{...} }
type GetRepositoryTreeTreeArrayInput interface {
	pulumi.Input

	ToGetRepositoryTreeTreeArrayOutput() GetRepositoryTreeTreeArrayOutput
	ToGetRepositoryTreeTreeArrayOutputWithContext(context.Context) GetRepositoryTreeTreeArrayOutput
}

type GetRepositoryTreeTreeArray []GetRepositoryTreeTreeInput

func (GetRepositoryTreeTreeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryTreeTree)(nil)).Elem()
}

func (i GetRepositoryTreeTreeArray) ToGetRepositoryTreeTreeArrayOutput() GetRepositoryTreeTreeArrayOutput {
	return i.ToGetRepositoryTreeTreeArrayOutputWithContext(context.Background())
}

func (i GetRepositoryTreeTreeArray) ToGetRepositoryTreeTreeArrayOutputWithContext(ctx context.Context) GetRepositoryTreeTreeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryTreeTreeArrayOutput)
}

func (i GetRepositoryTreeTreeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryTreeTree] {
	return pulumix.Output[[]GetRepositoryTreeTree]{
		OutputState: i.ToGetRepositoryTreeTreeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryTreeTreeOutput struct{ *pulumi.OutputState }

func (GetRepositoryTreeTreeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTreeTree)(nil)).Elem()
}

func (o GetRepositoryTreeTreeOutput) ToGetRepositoryTreeTreeOutput() GetRepositoryTreeTreeOutput {
	return o
}

func (o GetRepositoryTreeTreeOutput) ToGetRepositoryTreeTreeOutputWithContext(ctx context.Context) GetRepositoryTreeTreeOutput {
	return o
}

func (o GetRepositoryTreeTreeOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryTreeTree] {
	return pulumix.Output[GetRepositoryTreeTree]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryTreeTreeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoryTreeTreeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Mode }).(pulumi.StringOutput)
}

func (o GetRepositoryTreeTreeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRepositoryTreeTreeOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetRepositoryTreeTreeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTreeTree) string { return v.Type }).(pulumi.StringOutput)
}

type GetRepositoryTreeTreeArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryTreeTreeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryTreeTree)(nil)).Elem()
}

func (o GetRepositoryTreeTreeArrayOutput) ToGetRepositoryTreeTreeArrayOutput() GetRepositoryTreeTreeArrayOutput {
	return o
}

func (o GetRepositoryTreeTreeArrayOutput) ToGetRepositoryTreeTreeArrayOutputWithContext(ctx context.Context) GetRepositoryTreeTreeArrayOutput {
	return o
}

func (o GetRepositoryTreeTreeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryTreeTree] {
	return pulumix.Output[[]GetRepositoryTreeTree]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryTreeTreeArrayOutput) Index(i pulumi.IntInput) GetRepositoryTreeTreeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryTreeTree {
		return vs[0].([]GetRepositoryTreeTree)[vs[1].(int)]
	}).(GetRepositoryTreeTreeOutput)
}

type GetUserSshkeysKey struct {
	CreatedAt string `pulumi:"createdAt"`
	ExpiresAt string `pulumi:"expiresAt"`
	Key       string `pulumi:"key"`
	KeyId     int    `pulumi:"keyId"`
	Title     string `pulumi:"title"`
	UserId    int    `pulumi:"userId"`
}

// GetUserSshkeysKeyInput is an input type that accepts GetUserSshkeysKeyArgs and GetUserSshkeysKeyOutput values.
// You can construct a concrete instance of `GetUserSshkeysKeyInput` via:
//
//	GetUserSshkeysKeyArgs{...}
type GetUserSshkeysKeyInput interface {
	pulumi.Input

	ToGetUserSshkeysKeyOutput() GetUserSshkeysKeyOutput
	ToGetUserSshkeysKeyOutputWithContext(context.Context) GetUserSshkeysKeyOutput
}

type GetUserSshkeysKeyArgs struct {
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	Key       pulumi.StringInput `pulumi:"key"`
	KeyId     pulumi.IntInput    `pulumi:"keyId"`
	Title     pulumi.StringInput `pulumi:"title"`
	UserId    pulumi.IntInput    `pulumi:"userId"`
}

func (GetUserSshkeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSshkeysKey)(nil)).Elem()
}

func (i GetUserSshkeysKeyArgs) ToGetUserSshkeysKeyOutput() GetUserSshkeysKeyOutput {
	return i.ToGetUserSshkeysKeyOutputWithContext(context.Background())
}

func (i GetUserSshkeysKeyArgs) ToGetUserSshkeysKeyOutputWithContext(ctx context.Context) GetUserSshkeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSshkeysKeyOutput)
}

func (i GetUserSshkeysKeyArgs) ToOutput(ctx context.Context) pulumix.Output[GetUserSshkeysKey] {
	return pulumix.Output[GetUserSshkeysKey]{
		OutputState: i.ToGetUserSshkeysKeyOutputWithContext(ctx).OutputState,
	}
}

// GetUserSshkeysKeyArrayInput is an input type that accepts GetUserSshkeysKeyArray and GetUserSshkeysKeyArrayOutput values.
// You can construct a concrete instance of `GetUserSshkeysKeyArrayInput` via:
//
//	GetUserSshkeysKeyArray{ GetUserSshkeysKeyArgs{...} }
type GetUserSshkeysKeyArrayInput interface {
	pulumi.Input

	ToGetUserSshkeysKeyArrayOutput() GetUserSshkeysKeyArrayOutput
	ToGetUserSshkeysKeyArrayOutputWithContext(context.Context) GetUserSshkeysKeyArrayOutput
}

type GetUserSshkeysKeyArray []GetUserSshkeysKeyInput

func (GetUserSshkeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSshkeysKey)(nil)).Elem()
}

func (i GetUserSshkeysKeyArray) ToGetUserSshkeysKeyArrayOutput() GetUserSshkeysKeyArrayOutput {
	return i.ToGetUserSshkeysKeyArrayOutputWithContext(context.Background())
}

func (i GetUserSshkeysKeyArray) ToGetUserSshkeysKeyArrayOutputWithContext(ctx context.Context) GetUserSshkeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSshkeysKeyArrayOutput)
}

func (i GetUserSshkeysKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetUserSshkeysKey] {
	return pulumix.Output[[]GetUserSshkeysKey]{
		OutputState: i.ToGetUserSshkeysKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetUserSshkeysKeyOutput struct{ *pulumi.OutputState }

func (GetUserSshkeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSshkeysKey)(nil)).Elem()
}

func (o GetUserSshkeysKeyOutput) ToGetUserSshkeysKeyOutput() GetUserSshkeysKeyOutput {
	return o
}

func (o GetUserSshkeysKeyOutput) ToGetUserSshkeysKeyOutputWithContext(ctx context.Context) GetUserSshkeysKeyOutput {
	return o
}

func (o GetUserSshkeysKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserSshkeysKey] {
	return pulumix.Output[GetUserSshkeysKey]{
		OutputState: o.OutputState,
	}
}

func (o GetUserSshkeysKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetUserSshkeysKeyOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

func (o GetUserSshkeysKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetUserSshkeysKeyOutput) KeyId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) int { return v.KeyId }).(pulumi.IntOutput)
}

func (o GetUserSshkeysKeyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetUserSshkeysKeyOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserSshkeysKey) int { return v.UserId }).(pulumi.IntOutput)
}

type GetUserSshkeysKeyArrayOutput struct{ *pulumi.OutputState }

func (GetUserSshkeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSshkeysKey)(nil)).Elem()
}

func (o GetUserSshkeysKeyArrayOutput) ToGetUserSshkeysKeyArrayOutput() GetUserSshkeysKeyArrayOutput {
	return o
}

func (o GetUserSshkeysKeyArrayOutput) ToGetUserSshkeysKeyArrayOutputWithContext(ctx context.Context) GetUserSshkeysKeyArrayOutput {
	return o
}

func (o GetUserSshkeysKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetUserSshkeysKey] {
	return pulumix.Output[[]GetUserSshkeysKey]{
		OutputState: o.OutputState,
	}
}

func (o GetUserSshkeysKeyArrayOutput) Index(i pulumi.IntInput) GetUserSshkeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserSshkeysKey {
		return vs[0].([]GetUserSshkeysKey)[vs[1].(int)]
	}).(GetUserSshkeysKeyOutput)
}

type GetUsersUser struct {
	AvatarUrl        string `pulumi:"avatarUrl"`
	Bio              string `pulumi:"bio"`
	CanCreateGroup   bool   `pulumi:"canCreateGroup"`
	CanCreateProject bool   `pulumi:"canCreateProject"`
	ColorSchemeId    int    `pulumi:"colorSchemeId"`
	CreatedAt        string `pulumi:"createdAt"`
	CurrentSignInAt  string `pulumi:"currentSignInAt"`
	Email            string `pulumi:"email"`
	ExternUid        string `pulumi:"externUid"`
	External         bool   `pulumi:"external"`
	Id               int    `pulumi:"id"`
	IsAdmin          bool   `pulumi:"isAdmin"`
	LastSignInAt     string `pulumi:"lastSignInAt"`
	Linkedin         string `pulumi:"linkedin"`
	Location         string `pulumi:"location"`
	Name             string `pulumi:"name"`
	NamespaceId      int    `pulumi:"namespaceId"`
	Organization     string `pulumi:"organization"`
	ProjectsLimit    int    `pulumi:"projectsLimit"`
	Provider         string `pulumi:"provider"`
	Skype            string `pulumi:"skype"`
	State            string `pulumi:"state"`
	ThemeId          int    `pulumi:"themeId"`
	Twitter          string `pulumi:"twitter"`
	TwoFactorEnabled bool   `pulumi:"twoFactorEnabled"`
	Username         string `pulumi:"username"`
	WebsiteUrl       string `pulumi:"websiteUrl"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	AvatarUrl        pulumi.StringInput `pulumi:"avatarUrl"`
	Bio              pulumi.StringInput `pulumi:"bio"`
	CanCreateGroup   pulumi.BoolInput   `pulumi:"canCreateGroup"`
	CanCreateProject pulumi.BoolInput   `pulumi:"canCreateProject"`
	ColorSchemeId    pulumi.IntInput    `pulumi:"colorSchemeId"`
	CreatedAt        pulumi.StringInput `pulumi:"createdAt"`
	CurrentSignInAt  pulumi.StringInput `pulumi:"currentSignInAt"`
	Email            pulumi.StringInput `pulumi:"email"`
	ExternUid        pulumi.StringInput `pulumi:"externUid"`
	External         pulumi.BoolInput   `pulumi:"external"`
	Id               pulumi.IntInput    `pulumi:"id"`
	IsAdmin          pulumi.BoolInput   `pulumi:"isAdmin"`
	LastSignInAt     pulumi.StringInput `pulumi:"lastSignInAt"`
	Linkedin         pulumi.StringInput `pulumi:"linkedin"`
	Location         pulumi.StringInput `pulumi:"location"`
	Name             pulumi.StringInput `pulumi:"name"`
	NamespaceId      pulumi.IntInput    `pulumi:"namespaceId"`
	Organization     pulumi.StringInput `pulumi:"organization"`
	ProjectsLimit    pulumi.IntInput    `pulumi:"projectsLimit"`
	Provider         pulumi.StringInput `pulumi:"provider"`
	Skype            pulumi.StringInput `pulumi:"skype"`
	State            pulumi.StringInput `pulumi:"state"`
	ThemeId          pulumi.IntInput    `pulumi:"themeId"`
	Twitter          pulumi.StringInput `pulumi:"twitter"`
	TwoFactorEnabled pulumi.BoolInput   `pulumi:"twoFactorEnabled"`
	Username         pulumi.StringInput `pulumi:"username"`
	WebsiteUrl       pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

func (i GetUsersUserArgs) ToOutput(ctx context.Context) pulumix.Output[GetUsersUser] {
	return pulumix.Output[GetUsersUser]{
		OutputState: i.ToGetUsersUserOutputWithContext(ctx).OutputState,
	}
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

func (i GetUsersUserArray) ToOutput(ctx context.Context) pulumix.Output[[]GetUsersUser] {
	return pulumix.Output[[]GetUsersUser]{
		OutputState: i.ToGetUsersUserArrayOutputWithContext(ctx).OutputState,
	}
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToOutput(ctx context.Context) pulumix.Output[GetUsersUser] {
	return pulumix.Output[GetUsersUser]{
		OutputState: o.OutputState,
	}
}

func (o GetUsersUserOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Bio() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Bio }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) CanCreateGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateGroup }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) CanCreateProject() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateProject }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) ColorSchemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ColorSchemeId }).(pulumi.IntOutput)
}

func (o GetUsersUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) CurrentSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CurrentSignInAt }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) ExternUid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ExternUid }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.External }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetUsersUserOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) LastSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastSignInAt }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Linkedin() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Linkedin }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) NamespaceId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.NamespaceId }).(pulumi.IntOutput)
}

func (o GetUsersUserOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Organization }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) ProjectsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ProjectsLimit }).(pulumi.IntOutput)
}

func (o GetUsersUserOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Provider }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Skype() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Skype }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.State }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) ThemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ThemeId }).(pulumi.IntOutput)
}

func (o GetUsersUserOutput) Twitter() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Twitter }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) TwoFactorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.TwoFactorEnabled }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Username }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetUsersUser] {
	return pulumix.Output[[]GetUsersUser]{
		OutputState: o.OutputState,
	}
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchCommitInput)(nil)).Elem(), BranchCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchCommitArrayInput)(nil)).Elem(), BranchCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToMergeInput)(nil)).Elem(), BranchProtectionAllowedToMergeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToMergeArrayInput)(nil)).Elem(), BranchProtectionAllowedToMergeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToPushInput)(nil)).Elem(), BranchProtectionAllowedToPushArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToPushArrayInput)(nil)).Elem(), BranchProtectionAllowedToPushArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToUnprotectInput)(nil)).Elem(), BranchProtectionAllowedToUnprotectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionAllowedToUnprotectArrayInput)(nil)).Elem(), BranchProtectionAllowedToUnprotectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEpicBoardListInput)(nil)).Elem(), GroupEpicBoardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEpicBoardListArrayInput)(nil)).Elem(), GroupEpicBoardListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupIssueBoardListInput)(nil)).Elem(), GroupIssueBoardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupIssueBoardListArrayInput)(nil)).Elem(), GroupIssueBoardListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectContainerExpirationPolicyInput)(nil)).Elem(), ProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectContainerExpirationPolicyPtrInput)(nil)).Elem(), ProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueBoardListInput)(nil)).Elem(), ProjectIssueBoardListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueBoardListArrayInput)(nil)).Elem(), ProjectIssueBoardListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueTaskCompletionStatusInput)(nil)).Elem(), ProjectIssueTaskCompletionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIssueTaskCompletionStatusArrayInput)(nil)).Elem(), ProjectIssueTaskCompletionStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRuleInput)(nil)).Elem(), ProjectProtectedEnvironmentApprovalRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentApprovalRuleArrayInput)(nil)).Elem(), ProjectProtectedEnvironmentApprovalRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevelInput)(nil)).Elem(), ProjectProtectedEnvironmentDeployAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProtectedEnvironmentDeployAccessLevelArrayInput)(nil)).Elem(), ProjectProtectedEnvironmentDeployAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPushRulesInput)(nil)).Elem(), ProjectPushRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPushRulesPtrInput)(nil)).Elem(), ProjectPushRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagCommitInput)(nil)).Elem(), ProjectTagCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagCommitArrayInput)(nil)).Elem(), ProjectTagCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagReleaseInput)(nil)).Elem(), ProjectTagReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagReleaseArrayInput)(nil)).Elem(), ProjectTagReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagProtectionAllowedToCreateInput)(nil)).Elem(), TagProtectionAllowedToCreateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagProtectionAllowedToCreateArrayInput)(nil)).Elem(), TagProtectionAllowedToCreateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchCommitInput)(nil)).Elem(), GetBranchCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchCommitArrayInput)(nil)).Elem(), GetBranchCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterAgentsClusterAgentInput)(nil)).Elem(), GetClusterAgentsClusterAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterAgentsClusterAgentArrayInput)(nil)).Elem(), GetClusterAgentsClusterAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupHooksHookInput)(nil)).Elem(), GetGroupHooksHookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupHooksHookArrayInput)(nil)).Elem(), GetGroupHooksHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipMemberInput)(nil)).Elem(), GetGroupMembershipMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembershipMemberArrayInput)(nil)).Elem(), GetGroupMembershipMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupSubgroupsSubgroupInput)(nil)).Elem(), GetGroupSubgroupsSubgroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupSubgroupsSubgroupArrayInput)(nil)).Elem(), GetGroupSubgroupsSubgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupVariablesVariableInput)(nil)).Elem(), GetGroupVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupVariablesVariableArrayInput)(nil)).Elem(), GetGroupVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyArrayInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayInput)(nil)).Elem(), GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVariablesVariableInput)(nil)).Elem(), GetInstanceVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVariablesVariableArrayInput)(nil)).Elem(), GetInstanceVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetadataKasInput)(nil)).Elem(), GetMetadataKasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchInput)(nil)).Elem(), GetProjectBranchesBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchArrayInput)(nil)).Elem(), GetProjectBranchesBranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchCommitInput)(nil)).Elem(), GetProjectBranchesBranchCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectBranchesBranchCommitArrayInput)(nil)).Elem(), GetProjectBranchesBranchCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectContainerExpirationPolicyInput)(nil)).Elem(), GetProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectContainerExpirationPolicyArrayInput)(nil)).Elem(), GetProjectContainerExpirationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectHooksHookInput)(nil)).Elem(), GetProjectHooksHookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectHooksHookArrayInput)(nil)).Elem(), GetProjectHooksHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssueTaskCompletionStatusInput)(nil)).Elem(), GetProjectIssueTaskCompletionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssueTaskCompletionStatusArrayInput)(nil)).Elem(), GetProjectIssueTaskCompletionStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueInput)(nil)).Elem(), GetProjectIssuesIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueArrayInput)(nil)).Elem(), GetProjectIssuesIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatusInput)(nil)).Elem(), GetProjectIssuesIssueTaskCompletionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIssuesIssueTaskCompletionStatusArrayInput)(nil)).Elem(), GetProjectIssuesIssueTaskCompletionStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMembershipMemberInput)(nil)).Elem(), GetProjectMembershipMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMembershipMemberArrayInput)(nil)).Elem(), GetProjectMembershipMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMilestonesMilestoneInput)(nil)).Elem(), GetProjectMilestonesMilestoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMilestonesMilestoneArrayInput)(nil)).Elem(), GetProjectMilestonesMilestoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchMergeAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchMergeAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchMergeAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchPushAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchPushAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchPushAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchArrayInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevelInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayInput)(nil)).Elem(), GetProjectProtectedBranchesProtectedBranchPushAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectPushRuleInput)(nil)).Elem(), GetProjectPushRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectPushRuleArrayInput)(nil)).Elem(), GetProjectPushRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagCommitInput)(nil)).Elem(), GetProjectTagCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagCommitArrayInput)(nil)).Elem(), GetProjectTagCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagReleaseInput)(nil)).Elem(), GetProjectTagReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagReleaseArrayInput)(nil)).Elem(), GetProjectTagReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagInput)(nil)).Elem(), GetProjectTagsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagArrayInput)(nil)).Elem(), GetProjectTagsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagCommitInput)(nil)).Elem(), GetProjectTagsTagCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagCommitArrayInput)(nil)).Elem(), GetProjectTagsTagCommitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagReleaseInput)(nil)).Elem(), GetProjectTagsTagReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectTagsTagReleaseArrayInput)(nil)).Elem(), GetProjectTagsTagReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectVariablesVariableInput)(nil)).Elem(), GetProjectVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectVariablesVariableArrayInput)(nil)).Elem(), GetProjectVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectInput)(nil)).Elem(), GetProjectsProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectArrayInput)(nil)).Elem(), GetProjectsProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicyInput)(nil)).Elem(), GetProjectsProjectContainerExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectContainerExpirationPolicyArrayInput)(nil)).Elem(), GetProjectsProjectContainerExpirationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectForkedFromProjectInput)(nil)).Elem(), GetProjectsProjectForkedFromProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectForkedFromProjectArrayInput)(nil)).Elem(), GetProjectsProjectForkedFromProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectNamespaceInput)(nil)).Elem(), GetProjectsProjectNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectNamespaceArrayInput)(nil)).Elem(), GetProjectsProjectNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectOwnerInput)(nil)).Elem(), GetProjectsProjectOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectOwnerArrayInput)(nil)).Elem(), GetProjectsProjectOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectPermissionInput)(nil)).Elem(), GetProjectsProjectPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectPermissionArrayInput)(nil)).Elem(), GetProjectsProjectPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectSharedWithGroupInput)(nil)).Elem(), GetProjectsProjectSharedWithGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectSharedWithGroupArrayInput)(nil)).Elem(), GetProjectsProjectSharedWithGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseLinksReleaseLinkInput)(nil)).Elem(), GetReleaseLinksReleaseLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseLinksReleaseLinkArrayInput)(nil)).Elem(), GetReleaseLinksReleaseLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryTreeTreeInput)(nil)).Elem(), GetRepositoryTreeTreeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryTreeTreeArrayInput)(nil)).Elem(), GetRepositoryTreeTreeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSshkeysKeyInput)(nil)).Elem(), GetUserSshkeysKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSshkeysKeyArrayInput)(nil)).Elem(), GetUserSshkeysKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(BranchCommitOutput{})
	pulumi.RegisterOutputType(BranchCommitArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToMergeOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToMergeArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToPushOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToPushArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToUnprotectOutput{})
	pulumi.RegisterOutputType(BranchProtectionAllowedToUnprotectArrayOutput{})
	pulumi.RegisterOutputType(GroupEpicBoardListOutput{})
	pulumi.RegisterOutputType(GroupEpicBoardListArrayOutput{})
	pulumi.RegisterOutputType(GroupIssueBoardListOutput{})
	pulumi.RegisterOutputType(GroupIssueBoardListArrayOutput{})
	pulumi.RegisterOutputType(ProjectContainerExpirationPolicyOutput{})
	pulumi.RegisterOutputType(ProjectContainerExpirationPolicyPtrOutput{})
	pulumi.RegisterOutputType(ProjectIssueBoardListOutput{})
	pulumi.RegisterOutputType(ProjectIssueBoardListArrayOutput{})
	pulumi.RegisterOutputType(ProjectIssueTaskCompletionStatusOutput{})
	pulumi.RegisterOutputType(ProjectIssueTaskCompletionStatusArrayOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentApprovalRuleOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentApprovalRuleArrayOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentDeployAccessLevelOutput{})
	pulumi.RegisterOutputType(ProjectProtectedEnvironmentDeployAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(ProjectPushRulesOutput{})
	pulumi.RegisterOutputType(ProjectPushRulesPtrOutput{})
	pulumi.RegisterOutputType(ProjectTagCommitOutput{})
	pulumi.RegisterOutputType(ProjectTagCommitArrayOutput{})
	pulumi.RegisterOutputType(ProjectTagReleaseOutput{})
	pulumi.RegisterOutputType(ProjectTagReleaseArrayOutput{})
	pulumi.RegisterOutputType(TagProtectionAllowedToCreateOutput{})
	pulumi.RegisterOutputType(TagProtectionAllowedToCreateArrayOutput{})
	pulumi.RegisterOutputType(GetBranchCommitOutput{})
	pulumi.RegisterOutputType(GetBranchCommitArrayOutput{})
	pulumi.RegisterOutputType(GetClusterAgentsClusterAgentOutput{})
	pulumi.RegisterOutputType(GetClusterAgentsClusterAgentArrayOutput{})
	pulumi.RegisterOutputType(GetGroupHooksHookOutput{})
	pulumi.RegisterOutputType(GetGroupHooksHookArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipMemberOutput{})
	pulumi.RegisterOutputType(GetGroupMembershipMemberArrayOutput{})
	pulumi.RegisterOutputType(GetGroupSubgroupsSubgroupOutput{})
	pulumi.RegisterOutputType(GetGroupSubgroupsSubgroupArrayOutput{})
	pulumi.RegisterOutputType(GetGroupVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetGroupVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessOutput{})
	pulumi.RegisterOutputType(GetInstanceDeployKeysDeployKeyProjectsWithWriteAccessArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetInstanceVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetMetadataKasOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchArrayOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchCommitOutput{})
	pulumi.RegisterOutputType(GetProjectBranchesBranchCommitArrayOutput{})
	pulumi.RegisterOutputType(GetProjectContainerExpirationPolicyOutput{})
	pulumi.RegisterOutputType(GetProjectContainerExpirationPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetProjectHooksHookOutput{})
	pulumi.RegisterOutputType(GetProjectHooksHookArrayOutput{})
	pulumi.RegisterOutputType(GetProjectIssueTaskCompletionStatusOutput{})
	pulumi.RegisterOutputType(GetProjectIssueTaskCompletionStatusArrayOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueArrayOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueTaskCompletionStatusOutput{})
	pulumi.RegisterOutputType(GetProjectIssuesIssueTaskCompletionStatusArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMembershipMemberOutput{})
	pulumi.RegisterOutputType(GetProjectMembershipMemberArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMilestonesMilestoneOutput{})
	pulumi.RegisterOutputType(GetProjectMilestonesMilestoneArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchMergeAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchMergeAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchPushAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchPushAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchPushAccessLevelOutput{})
	pulumi.RegisterOutputType(GetProjectProtectedBranchesProtectedBranchPushAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(GetProjectPushRuleOutput{})
	pulumi.RegisterOutputType(GetProjectPushRuleArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagCommitOutput{})
	pulumi.RegisterOutputType(GetProjectTagCommitArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagReleaseOutput{})
	pulumi.RegisterOutputType(GetProjectTagReleaseArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagCommitOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagCommitArrayOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagReleaseOutput{})
	pulumi.RegisterOutputType(GetProjectTagsTagReleaseArrayOutput{})
	pulumi.RegisterOutputType(GetProjectVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetProjectVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectContainerExpirationPolicyOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectContainerExpirationPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectForkedFromProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectForkedFromProjectArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectNamespaceOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectNamespaceArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOwnerOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectPermissionOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectSharedWithGroupOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectSharedWithGroupArrayOutput{})
	pulumi.RegisterOutputType(GetReleaseLinksReleaseLinkOutput{})
	pulumi.RegisterOutputType(GetReleaseLinksReleaseLinkArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryTreeTreeOutput{})
	pulumi.RegisterOutputType(GetRepositoryTreeTreeArrayOutput{})
	pulumi.RegisterOutputType(GetUserSshkeysKeyOutput{})
	pulumi.RegisterOutputType(GetUserSshkeysKeyArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
