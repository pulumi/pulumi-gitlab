// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProjectSharedWithGroup struct {
	// Group's sharing permissions. See [group members permission][groupMembersPermissions] for more info.
	// Valid values are `guest`, `reporter`, `developer`, `master`.
	GroupAccessLevel string `pulumi:"groupAccessLevel"`
	// Group id of the group you want to share the project with.
	GroupId int `pulumi:"groupId"`
	// Group's name.
	GroupName *string `pulumi:"groupName"`
}

type ProjectSharedWithGroupInput interface {
	pulumi.Input

	ToProjectSharedWithGroupOutput() ProjectSharedWithGroupOutput
	ToProjectSharedWithGroupOutputWithContext(context.Context) ProjectSharedWithGroupOutput
}

type ProjectSharedWithGroupArgs struct {
	// Group's sharing permissions. See [group members permission][groupMembersPermissions] for more info.
	// Valid values are `guest`, `reporter`, `developer`, `master`.
	GroupAccessLevel pulumi.StringInput `pulumi:"groupAccessLevel"`
	// Group id of the group you want to share the project with.
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// Group's name.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
}

func (ProjectSharedWithGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSharedWithGroup)(nil)).Elem()
}

func (i ProjectSharedWithGroupArgs) ToProjectSharedWithGroupOutput() ProjectSharedWithGroupOutput {
	return i.ToProjectSharedWithGroupOutputWithContext(context.Background())
}

func (i ProjectSharedWithGroupArgs) ToProjectSharedWithGroupOutputWithContext(ctx context.Context) ProjectSharedWithGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSharedWithGroupOutput)
}

type ProjectSharedWithGroupArrayInput interface {
	pulumi.Input

	ToProjectSharedWithGroupArrayOutput() ProjectSharedWithGroupArrayOutput
	ToProjectSharedWithGroupArrayOutputWithContext(context.Context) ProjectSharedWithGroupArrayOutput
}

type ProjectSharedWithGroupArray []ProjectSharedWithGroupInput

func (ProjectSharedWithGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSharedWithGroup)(nil)).Elem()
}

func (i ProjectSharedWithGroupArray) ToProjectSharedWithGroupArrayOutput() ProjectSharedWithGroupArrayOutput {
	return i.ToProjectSharedWithGroupArrayOutputWithContext(context.Background())
}

func (i ProjectSharedWithGroupArray) ToProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) ProjectSharedWithGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSharedWithGroupArrayOutput)
}

type ProjectSharedWithGroupOutput struct{ *pulumi.OutputState }

func (ProjectSharedWithGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSharedWithGroup)(nil)).Elem()
}

func (o ProjectSharedWithGroupOutput) ToProjectSharedWithGroupOutput() ProjectSharedWithGroupOutput {
	return o
}

func (o ProjectSharedWithGroupOutput) ToProjectSharedWithGroupOutputWithContext(ctx context.Context) ProjectSharedWithGroupOutput {
	return o
}

// Group's sharing permissions. See [group members permission][groupMembersPermissions] for more info.
// Valid values are `guest`, `reporter`, `developer`, `master`.
func (o ProjectSharedWithGroupOutput) GroupAccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSharedWithGroup) string { return v.GroupAccessLevel }).(pulumi.StringOutput)
}

// Group id of the group you want to share the project with.
func (o ProjectSharedWithGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v ProjectSharedWithGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

// Group's name.
func (o ProjectSharedWithGroupOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSharedWithGroup) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

type ProjectSharedWithGroupArrayOutput struct{ *pulumi.OutputState }

func (ProjectSharedWithGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSharedWithGroup)(nil)).Elem()
}

func (o ProjectSharedWithGroupArrayOutput) ToProjectSharedWithGroupArrayOutput() ProjectSharedWithGroupArrayOutput {
	return o
}

func (o ProjectSharedWithGroupArrayOutput) ToProjectSharedWithGroupArrayOutputWithContext(ctx context.Context) ProjectSharedWithGroupArrayOutput {
	return o
}

func (o ProjectSharedWithGroupArrayOutput) Index(i pulumi.IntInput) ProjectSharedWithGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSharedWithGroup {
		return vs[0].([]ProjectSharedWithGroup)[vs[1].(int)]
	}).(ProjectSharedWithGroupOutput)
}

type GetUsersUser struct {
	// The avatar URL of the user.
	AvatarUrl string `pulumi:"avatarUrl"`
	// The bio of the user.
	Bio string `pulumi:"bio"`
	// Whether the user can create groups.
	CanCreateGroup bool `pulumi:"canCreateGroup"`
	// Whether the user can create projects.
	CanCreateProject bool `pulumi:"canCreateProject"`
	// User's color scheme ID.
	ColorSchemeId int `pulumi:"colorSchemeId"`
	// Date the user was created at.
	CreatedAt string `pulumi:"createdAt"`
	// Current user's sign-in date.
	CurrentSignInAt string `pulumi:"currentSignInAt"`
	// The e-mail address of the user.
	Email string `pulumi:"email"`
	// Lookup users by external UID. (Requires administrator privileges)
	ExternUid string `pulumi:"externUid"`
	// Whether the user is external.
	External bool `pulumi:"external"`
	// The unique id assigned to the user by the gitlab server.
	Id int `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin bool `pulumi:"isAdmin"`
	// Last user's sign-in date.
	LastSignInAt string `pulumi:"lastSignInAt"`
	// Linkedin profile of the user.
	Linkedin string `pulumi:"linkedin"`
	// The location of the user.
	Location string `pulumi:"location"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The organization of the user.
	Organization string `pulumi:"organization"`
	// Number of projects the user can create.
	ProjectsLimit int `pulumi:"projectsLimit"`
	// The UID provider of the user.
	Provider string `pulumi:"provider"`
	// Skype username of the user.
	Skype string `pulumi:"skype"`
	// Whether the user is active or blocked.
	State string `pulumi:"state"`
	// User's theme ID.
	ThemeId int `pulumi:"themeId"`
	// Twitter username of the user.
	Twitter string `pulumi:"twitter"`
	// Whether user's two factor auth is enabled.
	TwoFactorEnabled bool `pulumi:"twoFactorEnabled"`
	// The username of the user.
	Username string `pulumi:"username"`
	// User's website URL.
	WebsiteUrl string `pulumi:"websiteUrl"`
}

type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The avatar URL of the user.
	AvatarUrl pulumi.StringInput `pulumi:"avatarUrl"`
	// The bio of the user.
	Bio pulumi.StringInput `pulumi:"bio"`
	// Whether the user can create groups.
	CanCreateGroup pulumi.BoolInput `pulumi:"canCreateGroup"`
	// Whether the user can create projects.
	CanCreateProject pulumi.BoolInput `pulumi:"canCreateProject"`
	// User's color scheme ID.
	ColorSchemeId pulumi.IntInput `pulumi:"colorSchemeId"`
	// Date the user was created at.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Current user's sign-in date.
	CurrentSignInAt pulumi.StringInput `pulumi:"currentSignInAt"`
	// The e-mail address of the user.
	Email pulumi.StringInput `pulumi:"email"`
	// Lookup users by external UID. (Requires administrator privileges)
	ExternUid pulumi.StringInput `pulumi:"externUid"`
	// Whether the user is external.
	External pulumi.BoolInput `pulumi:"external"`
	// The unique id assigned to the user by the gitlab server.
	Id pulumi.IntInput `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
	// Last user's sign-in date.
	LastSignInAt pulumi.StringInput `pulumi:"lastSignInAt"`
	// Linkedin profile of the user.
	Linkedin pulumi.StringInput `pulumi:"linkedin"`
	// The location of the user.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the user.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization of the user.
	Organization pulumi.StringInput `pulumi:"organization"`
	// Number of projects the user can create.
	ProjectsLimit pulumi.IntInput `pulumi:"projectsLimit"`
	// The UID provider of the user.
	Provider pulumi.StringInput `pulumi:"provider"`
	// Skype username of the user.
	Skype pulumi.StringInput `pulumi:"skype"`
	// Whether the user is active or blocked.
	State pulumi.StringInput `pulumi:"state"`
	// User's theme ID.
	ThemeId pulumi.IntInput `pulumi:"themeId"`
	// Twitter username of the user.
	Twitter pulumi.StringInput `pulumi:"twitter"`
	// Whether user's two factor auth is enabled.
	TwoFactorEnabled pulumi.BoolInput `pulumi:"twoFactorEnabled"`
	// The username of the user.
	Username pulumi.StringInput `pulumi:"username"`
	// User's website URL.
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The avatar URL of the user.
func (o GetUsersUserOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// The bio of the user.
func (o GetUsersUserOutput) Bio() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Bio }).(pulumi.StringOutput)
}

// Whether the user can create groups.
func (o GetUsersUserOutput) CanCreateGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateGroup }).(pulumi.BoolOutput)
}

// Whether the user can create projects.
func (o GetUsersUserOutput) CanCreateProject() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CanCreateProject }).(pulumi.BoolOutput)
}

// User's color scheme ID.
func (o GetUsersUserOutput) ColorSchemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ColorSchemeId }).(pulumi.IntOutput)
}

// Date the user was created at.
func (o GetUsersUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Current user's sign-in date.
func (o GetUsersUserOutput) CurrentSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CurrentSignInAt }).(pulumi.StringOutput)
}

// The e-mail address of the user.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// Lookup users by external UID. (Requires administrator privileges)
func (o GetUsersUserOutput) ExternUid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ExternUid }).(pulumi.StringOutput)
}

// Whether the user is external.
func (o GetUsersUserOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.External }).(pulumi.BoolOutput)
}

// The unique id assigned to the user by the gitlab server.
func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

// Whether the user is an admin.
func (o GetUsersUserOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// Last user's sign-in date.
func (o GetUsersUserOutput) LastSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastSignInAt }).(pulumi.StringOutput)
}

// Linkedin profile of the user.
func (o GetUsersUserOutput) Linkedin() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Linkedin }).(pulumi.StringOutput)
}

// The location of the user.
func (o GetUsersUserOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the user.
func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

// The organization of the user.
func (o GetUsersUserOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Organization }).(pulumi.StringOutput)
}

// Number of projects the user can create.
func (o GetUsersUserOutput) ProjectsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ProjectsLimit }).(pulumi.IntOutput)
}

// The UID provider of the user.
func (o GetUsersUserOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Provider }).(pulumi.StringOutput)
}

// Skype username of the user.
func (o GetUsersUserOutput) Skype() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Skype }).(pulumi.StringOutput)
}

// Whether the user is active or blocked.
func (o GetUsersUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.State }).(pulumi.StringOutput)
}

// User's theme ID.
func (o GetUsersUserOutput) ThemeId() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.ThemeId }).(pulumi.IntOutput)
}

// Twitter username of the user.
func (o GetUsersUserOutput) Twitter() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Twitter }).(pulumi.StringOutput)
}

// Whether user's two factor auth is enabled.
func (o GetUsersUserOutput) TwoFactorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.TwoFactorEnabled }).(pulumi.BoolOutput)
}

// The username of the user.
func (o GetUsersUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Username }).(pulumi.StringOutput)
}

// User's website URL.
func (o GetUsersUserOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectSharedWithGroupOutput{})
	pulumi.RegisterOutputType(ProjectSharedWithGroupArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
