// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// This resource can be used to attach a security policy to a pre-existing group
//			_, err := gitlab.NewGroupSecurityPolicyAttachment(ctx, "foo", &gitlab.GroupSecurityPolicyAttachmentArgs{
//				Group:         pulumi.String("1234"),
//				PolicyProject: pulumi.String("4567"),
//			})
//			if err != nil {
//				return err
//			}
//			// Or Terraform can create a new project, add a policy to that project,
//			// then attach that policy project to other groups.
//			_, err = gitlab.NewProject(ctx, "my-policy-project", &gitlab.ProjectArgs{
//				Name: pulumi.String("security-policy-project"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewRepositoryFile(ctx, "policy-yml", &gitlab.RepositoryFileArgs{
//				Project:  my_policy_project.ID(),
//				FilePath: pulumi.String(".gitlab/security-policies/my-policy.yml"),
//				Branch:   pulumi.String("master"),
//				Encoding: pulumi.String("text"),
//				Content: pulumi.String(`---
//
// approval_policy:
// - name: test
// description: test
// enabled: true
// rules:
//   - type: any_merge_request
//     branch_type: protected
//     commits: any
//
// approval_settings:
//
//	block_branch_modification: true
//	prevent_pushing_and_force_pushing: true
//	prevent_approval_by_author: true
//	prevent_approval_by_commit_author: true
//	remove_approvals_with_new_commit: true
//	require_password_to_approve: false
//
// fallback_behavior:
//
//	fail: closed
//
// policy_scope:
//
//	compliance_frameworks:
//	- id: 1010101
//	- id: 0101010
//
// actions:
//   - type: send_bot_message
//     enabled: true
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			// Multiple policies can be attached to a single project by repeating this resource or using a `for_each`
//			_, err = gitlab.NewGroupSecurityPolicyAttachment(ctx, "my-policy", &gitlab.GroupSecurityPolicyAttachmentArgs{
//				Group:         pulumi.String("1234"),
//				PolicyProject: my_policy_project.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_group_security_policy_attachment`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_group_security_policy_attachment.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// GitLab group security policy attachments can be imported using an id made up of `group:policy_project_id` where the policy project ID is the project ID of the policy project, e.g.
//
// ```sh
// $ pulumi import gitlab:index/groupSecurityPolicyAttachment:GroupSecurityPolicyAttachment foo 1:2
// ```
type GroupSecurityPolicyAttachment struct {
	pulumi.CustomResourceState

	// The ID or Full Path of the group which will have the security policy project assigned to it.
	Group pulumi.StringOutput `pulumi:"group"`
	// The GraphQL ID of the group to which the security policty project will be attached.
	GroupGraphqlId pulumi.StringOutput `pulumi:"groupGraphqlId"`
	// The ID or Full Path of the security policy project.
	PolicyProject pulumi.StringOutput `pulumi:"policyProject"`
	// The GraphQL ID of the security policy project.
	PolicyProjectGraphqlId pulumi.StringOutput `pulumi:"policyProjectGraphqlId"`
}

// NewGroupSecurityPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewGroupSecurityPolicyAttachment(ctx *pulumi.Context,
	name string, args *GroupSecurityPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*GroupSecurityPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.PolicyProject == nil {
		return nil, errors.New("invalid value for required argument 'PolicyProject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupSecurityPolicyAttachment
	err := ctx.RegisterResource("gitlab:index/groupSecurityPolicyAttachment:GroupSecurityPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupSecurityPolicyAttachment gets an existing GroupSecurityPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupSecurityPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupSecurityPolicyAttachmentState, opts ...pulumi.ResourceOption) (*GroupSecurityPolicyAttachment, error) {
	var resource GroupSecurityPolicyAttachment
	err := ctx.ReadResource("gitlab:index/groupSecurityPolicyAttachment:GroupSecurityPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupSecurityPolicyAttachment resources.
type groupSecurityPolicyAttachmentState struct {
	// The ID or Full Path of the group which will have the security policy project assigned to it.
	Group *string `pulumi:"group"`
	// The GraphQL ID of the group to which the security policty project will be attached.
	GroupGraphqlId *string `pulumi:"groupGraphqlId"`
	// The ID or Full Path of the security policy project.
	PolicyProject *string `pulumi:"policyProject"`
	// The GraphQL ID of the security policy project.
	PolicyProjectGraphqlId *string `pulumi:"policyProjectGraphqlId"`
}

type GroupSecurityPolicyAttachmentState struct {
	// The ID or Full Path of the group which will have the security policy project assigned to it.
	Group pulumi.StringPtrInput
	// The GraphQL ID of the group to which the security policty project will be attached.
	GroupGraphqlId pulumi.StringPtrInput
	// The ID or Full Path of the security policy project.
	PolicyProject pulumi.StringPtrInput
	// The GraphQL ID of the security policy project.
	PolicyProjectGraphqlId pulumi.StringPtrInput
}

func (GroupSecurityPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupSecurityPolicyAttachmentState)(nil)).Elem()
}

type groupSecurityPolicyAttachmentArgs struct {
	// The ID or Full Path of the group which will have the security policy project assigned to it.
	Group string `pulumi:"group"`
	// The ID or Full Path of the security policy project.
	PolicyProject string `pulumi:"policyProject"`
}

// The set of arguments for constructing a GroupSecurityPolicyAttachment resource.
type GroupSecurityPolicyAttachmentArgs struct {
	// The ID or Full Path of the group which will have the security policy project assigned to it.
	Group pulumi.StringInput
	// The ID or Full Path of the security policy project.
	PolicyProject pulumi.StringInput
}

func (GroupSecurityPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupSecurityPolicyAttachmentArgs)(nil)).Elem()
}

type GroupSecurityPolicyAttachmentInput interface {
	pulumi.Input

	ToGroupSecurityPolicyAttachmentOutput() GroupSecurityPolicyAttachmentOutput
	ToGroupSecurityPolicyAttachmentOutputWithContext(ctx context.Context) GroupSecurityPolicyAttachmentOutput
}

func (*GroupSecurityPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSecurityPolicyAttachment)(nil)).Elem()
}

func (i *GroupSecurityPolicyAttachment) ToGroupSecurityPolicyAttachmentOutput() GroupSecurityPolicyAttachmentOutput {
	return i.ToGroupSecurityPolicyAttachmentOutputWithContext(context.Background())
}

func (i *GroupSecurityPolicyAttachment) ToGroupSecurityPolicyAttachmentOutputWithContext(ctx context.Context) GroupSecurityPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSecurityPolicyAttachmentOutput)
}

// GroupSecurityPolicyAttachmentArrayInput is an input type that accepts GroupSecurityPolicyAttachmentArray and GroupSecurityPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `GroupSecurityPolicyAttachmentArrayInput` via:
//
//	GroupSecurityPolicyAttachmentArray{ GroupSecurityPolicyAttachmentArgs{...} }
type GroupSecurityPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToGroupSecurityPolicyAttachmentArrayOutput() GroupSecurityPolicyAttachmentArrayOutput
	ToGroupSecurityPolicyAttachmentArrayOutputWithContext(context.Context) GroupSecurityPolicyAttachmentArrayOutput
}

type GroupSecurityPolicyAttachmentArray []GroupSecurityPolicyAttachmentInput

func (GroupSecurityPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupSecurityPolicyAttachment)(nil)).Elem()
}

func (i GroupSecurityPolicyAttachmentArray) ToGroupSecurityPolicyAttachmentArrayOutput() GroupSecurityPolicyAttachmentArrayOutput {
	return i.ToGroupSecurityPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i GroupSecurityPolicyAttachmentArray) ToGroupSecurityPolicyAttachmentArrayOutputWithContext(ctx context.Context) GroupSecurityPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSecurityPolicyAttachmentArrayOutput)
}

// GroupSecurityPolicyAttachmentMapInput is an input type that accepts GroupSecurityPolicyAttachmentMap and GroupSecurityPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `GroupSecurityPolicyAttachmentMapInput` via:
//
//	GroupSecurityPolicyAttachmentMap{ "key": GroupSecurityPolicyAttachmentArgs{...} }
type GroupSecurityPolicyAttachmentMapInput interface {
	pulumi.Input

	ToGroupSecurityPolicyAttachmentMapOutput() GroupSecurityPolicyAttachmentMapOutput
	ToGroupSecurityPolicyAttachmentMapOutputWithContext(context.Context) GroupSecurityPolicyAttachmentMapOutput
}

type GroupSecurityPolicyAttachmentMap map[string]GroupSecurityPolicyAttachmentInput

func (GroupSecurityPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupSecurityPolicyAttachment)(nil)).Elem()
}

func (i GroupSecurityPolicyAttachmentMap) ToGroupSecurityPolicyAttachmentMapOutput() GroupSecurityPolicyAttachmentMapOutput {
	return i.ToGroupSecurityPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i GroupSecurityPolicyAttachmentMap) ToGroupSecurityPolicyAttachmentMapOutputWithContext(ctx context.Context) GroupSecurityPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSecurityPolicyAttachmentMapOutput)
}

type GroupSecurityPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (GroupSecurityPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSecurityPolicyAttachment)(nil)).Elem()
}

func (o GroupSecurityPolicyAttachmentOutput) ToGroupSecurityPolicyAttachmentOutput() GroupSecurityPolicyAttachmentOutput {
	return o
}

func (o GroupSecurityPolicyAttachmentOutput) ToGroupSecurityPolicyAttachmentOutputWithContext(ctx context.Context) GroupSecurityPolicyAttachmentOutput {
	return o
}

// The ID or Full Path of the group which will have the security policy project assigned to it.
func (o GroupSecurityPolicyAttachmentOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupSecurityPolicyAttachment) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The GraphQL ID of the group to which the security policty project will be attached.
func (o GroupSecurityPolicyAttachmentOutput) GroupGraphqlId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupSecurityPolicyAttachment) pulumi.StringOutput { return v.GroupGraphqlId }).(pulumi.StringOutput)
}

// The ID or Full Path of the security policy project.
func (o GroupSecurityPolicyAttachmentOutput) PolicyProject() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupSecurityPolicyAttachment) pulumi.StringOutput { return v.PolicyProject }).(pulumi.StringOutput)
}

// The GraphQL ID of the security policy project.
func (o GroupSecurityPolicyAttachmentOutput) PolicyProjectGraphqlId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupSecurityPolicyAttachment) pulumi.StringOutput { return v.PolicyProjectGraphqlId }).(pulumi.StringOutput)
}

type GroupSecurityPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GroupSecurityPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupSecurityPolicyAttachment)(nil)).Elem()
}

func (o GroupSecurityPolicyAttachmentArrayOutput) ToGroupSecurityPolicyAttachmentArrayOutput() GroupSecurityPolicyAttachmentArrayOutput {
	return o
}

func (o GroupSecurityPolicyAttachmentArrayOutput) ToGroupSecurityPolicyAttachmentArrayOutputWithContext(ctx context.Context) GroupSecurityPolicyAttachmentArrayOutput {
	return o
}

func (o GroupSecurityPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) GroupSecurityPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupSecurityPolicyAttachment {
		return vs[0].([]*GroupSecurityPolicyAttachment)[vs[1].(int)]
	}).(GroupSecurityPolicyAttachmentOutput)
}

type GroupSecurityPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (GroupSecurityPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupSecurityPolicyAttachment)(nil)).Elem()
}

func (o GroupSecurityPolicyAttachmentMapOutput) ToGroupSecurityPolicyAttachmentMapOutput() GroupSecurityPolicyAttachmentMapOutput {
	return o
}

func (o GroupSecurityPolicyAttachmentMapOutput) ToGroupSecurityPolicyAttachmentMapOutputWithContext(ctx context.Context) GroupSecurityPolicyAttachmentMapOutput {
	return o
}

func (o GroupSecurityPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) GroupSecurityPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupSecurityPolicyAttachment {
		return vs[0].(map[string]*GroupSecurityPolicyAttachment)[vs[1].(string)]
	}).(GroupSecurityPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupSecurityPolicyAttachmentInput)(nil)).Elem(), &GroupSecurityPolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupSecurityPolicyAttachmentArrayInput)(nil)).Elem(), GroupSecurityPolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupSecurityPolicyAttachmentMapInput)(nil)).Elem(), GroupSecurityPolicyAttachmentMap{})
	pulumi.RegisterOutputType(GroupSecurityPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(GroupSecurityPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GroupSecurityPolicyAttachmentMapOutput{})
}
