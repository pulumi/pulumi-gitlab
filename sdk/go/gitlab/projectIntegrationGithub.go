// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationGithub` resource manages the lifecycle of a project integration with GitHub.
//
// > This resource requires a GitLab Enterprise instance.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#github)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationGithub(ctx, "github", &gitlab.ProjectIntegrationGithubArgs{
//				Project:       awesomeProject.ID(),
//				Token:         pulumi.String("REDACTED"),
//				RepositoryUrl: pulumi.String("https://github.com/gitlabhq/terraform-provider-gitlab"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_github`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_github.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub You can import a gitlab_project_integration_github state using `<resource> <project_id>`:
// ```
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub github 1
// ```
type ProjectIntegrationGithub struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// ID of the project you want to activate the integration on.
	Project       pulumi.StringOutput `pulumi:"project"`
	RepositoryUrl pulumi.StringOutput `pulumi:"repositoryUrl"`
	// Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
	StaticContext pulumi.BoolPtrOutput `pulumi:"staticContext"`
	// The title of this resource.
	Title pulumi.StringOutput `pulumi:"title"`
	// A GitHub personal access token with at least the `repo:status` scope.
	Token pulumi.StringOutput `pulumi:"token"`
	// Update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewProjectIntegrationGithub registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationGithub(ctx *pulumi.Context,
	name string, args *ProjectIntegrationGithubArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationGithub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.RepositoryUrl == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryUrl'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationGithub
	err := ctx.RegisterResource("gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationGithub gets an existing ProjectIntegrationGithub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationGithub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationGithubState, opts ...pulumi.ResourceOption) (*ProjectIntegrationGithub, error) {
	var resource ProjectIntegrationGithub
	err := ctx.ReadResource("gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationGithub resources.
type projectIntegrationGithubState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// Creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// ID of the project you want to activate the integration on.
	Project       *string `pulumi:"project"`
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
	StaticContext *bool `pulumi:"staticContext"`
	// The title of this resource.
	Title *string `pulumi:"title"`
	// A GitHub personal access token with at least the `repo:status` scope.
	Token *string `pulumi:"token"`
	// Update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ProjectIntegrationGithubState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// Creation time.
	CreatedAt pulumi.StringPtrInput
	// ID of the project you want to activate the integration on.
	Project       pulumi.StringPtrInput
	RepositoryUrl pulumi.StringPtrInput
	// Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
	StaticContext pulumi.BoolPtrInput
	// The title of this resource.
	Title pulumi.StringPtrInput
	// A GitHub personal access token with at least the `repo:status` scope.
	Token pulumi.StringPtrInput
	// Update time.
	UpdatedAt pulumi.StringPtrInput
}

func (ProjectIntegrationGithubState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationGithubState)(nil)).Elem()
}

type projectIntegrationGithubArgs struct {
	// ID of the project you want to activate the integration on.
	Project       string `pulumi:"project"`
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
	StaticContext *bool `pulumi:"staticContext"`
	// A GitHub personal access token with at least the `repo:status` scope.
	Token string `pulumi:"token"`
}

// The set of arguments for constructing a ProjectIntegrationGithub resource.
type ProjectIntegrationGithubArgs struct {
	// ID of the project you want to activate the integration on.
	Project       pulumi.StringInput
	RepositoryUrl pulumi.StringInput
	// Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
	StaticContext pulumi.BoolPtrInput
	// A GitHub personal access token with at least the `repo:status` scope.
	Token pulumi.StringInput
}

func (ProjectIntegrationGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationGithubArgs)(nil)).Elem()
}

type ProjectIntegrationGithubInput interface {
	pulumi.Input

	ToProjectIntegrationGithubOutput() ProjectIntegrationGithubOutput
	ToProjectIntegrationGithubOutputWithContext(ctx context.Context) ProjectIntegrationGithubOutput
}

func (*ProjectIntegrationGithub) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationGithub)(nil)).Elem()
}

func (i *ProjectIntegrationGithub) ToProjectIntegrationGithubOutput() ProjectIntegrationGithubOutput {
	return i.ToProjectIntegrationGithubOutputWithContext(context.Background())
}

func (i *ProjectIntegrationGithub) ToProjectIntegrationGithubOutputWithContext(ctx context.Context) ProjectIntegrationGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationGithubOutput)
}

// ProjectIntegrationGithubArrayInput is an input type that accepts ProjectIntegrationGithubArray and ProjectIntegrationGithubArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationGithubArrayInput` via:
//
//	ProjectIntegrationGithubArray{ ProjectIntegrationGithubArgs{...} }
type ProjectIntegrationGithubArrayInput interface {
	pulumi.Input

	ToProjectIntegrationGithubArrayOutput() ProjectIntegrationGithubArrayOutput
	ToProjectIntegrationGithubArrayOutputWithContext(context.Context) ProjectIntegrationGithubArrayOutput
}

type ProjectIntegrationGithubArray []ProjectIntegrationGithubInput

func (ProjectIntegrationGithubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationGithub)(nil)).Elem()
}

func (i ProjectIntegrationGithubArray) ToProjectIntegrationGithubArrayOutput() ProjectIntegrationGithubArrayOutput {
	return i.ToProjectIntegrationGithubArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationGithubArray) ToProjectIntegrationGithubArrayOutputWithContext(ctx context.Context) ProjectIntegrationGithubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationGithubArrayOutput)
}

// ProjectIntegrationGithubMapInput is an input type that accepts ProjectIntegrationGithubMap and ProjectIntegrationGithubMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationGithubMapInput` via:
//
//	ProjectIntegrationGithubMap{ "key": ProjectIntegrationGithubArgs{...} }
type ProjectIntegrationGithubMapInput interface {
	pulumi.Input

	ToProjectIntegrationGithubMapOutput() ProjectIntegrationGithubMapOutput
	ToProjectIntegrationGithubMapOutputWithContext(context.Context) ProjectIntegrationGithubMapOutput
}

type ProjectIntegrationGithubMap map[string]ProjectIntegrationGithubInput

func (ProjectIntegrationGithubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationGithub)(nil)).Elem()
}

func (i ProjectIntegrationGithubMap) ToProjectIntegrationGithubMapOutput() ProjectIntegrationGithubMapOutput {
	return i.ToProjectIntegrationGithubMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationGithubMap) ToProjectIntegrationGithubMapOutputWithContext(ctx context.Context) ProjectIntegrationGithubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationGithubMapOutput)
}

type ProjectIntegrationGithubOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationGithub)(nil)).Elem()
}

func (o ProjectIntegrationGithubOutput) ToProjectIntegrationGithubOutput() ProjectIntegrationGithubOutput {
	return o
}

func (o ProjectIntegrationGithubOutput) ToProjectIntegrationGithubOutputWithContext(ctx context.Context) ProjectIntegrationGithubOutput {
	return o
}

// Whether the integration is active.
func (o ProjectIntegrationGithubOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Creation time.
func (o ProjectIntegrationGithubOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// ID of the project you want to activate the integration on.
func (o ProjectIntegrationGithubOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectIntegrationGithubOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.StringOutput { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
func (o ProjectIntegrationGithubOutput) StaticContext() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.BoolPtrOutput { return v.StaticContext }).(pulumi.BoolPtrOutput)
}

// The title of this resource.
func (o ProjectIntegrationGithubOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// A GitHub personal access token with at least the `repo:status` scope.
func (o ProjectIntegrationGithubOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Update time.
func (o ProjectIntegrationGithubOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationGithub) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ProjectIntegrationGithubArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationGithubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationGithub)(nil)).Elem()
}

func (o ProjectIntegrationGithubArrayOutput) ToProjectIntegrationGithubArrayOutput() ProjectIntegrationGithubArrayOutput {
	return o
}

func (o ProjectIntegrationGithubArrayOutput) ToProjectIntegrationGithubArrayOutputWithContext(ctx context.Context) ProjectIntegrationGithubArrayOutput {
	return o
}

func (o ProjectIntegrationGithubArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationGithubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationGithub {
		return vs[0].([]*ProjectIntegrationGithub)[vs[1].(int)]
	}).(ProjectIntegrationGithubOutput)
}

type ProjectIntegrationGithubMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationGithubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationGithub)(nil)).Elem()
}

func (o ProjectIntegrationGithubMapOutput) ToProjectIntegrationGithubMapOutput() ProjectIntegrationGithubMapOutput {
	return o
}

func (o ProjectIntegrationGithubMapOutput) ToProjectIntegrationGithubMapOutputWithContext(ctx context.Context) ProjectIntegrationGithubMapOutput {
	return o
}

func (o ProjectIntegrationGithubMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationGithubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationGithub {
		return vs[0].(map[string]*ProjectIntegrationGithub)[vs[1].(string)]
	}).(ProjectIntegrationGithubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationGithubInput)(nil)).Elem(), &ProjectIntegrationGithub{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationGithubArrayInput)(nil)).Elem(), ProjectIntegrationGithubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationGithubMapInput)(nil)).Elem(), ProjectIntegrationGithubMap{})
	pulumi.RegisterOutputType(ProjectIntegrationGithubOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationGithubArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationGithubMapOutput{})
}
