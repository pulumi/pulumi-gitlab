// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
//
// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewGroup(ctx, "new_group", nil)
//			if err != nil {
//				return err
//			}
//			// use group IDs to get additional information, such as the GraphQL ID
//			// for other resources
//			foo, err := gitlab.GetGroupIds(ctx, &gitlab.GetGroupIdsArgs{
//				Group: "gitlab_group.new_group.id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("graphQLId", foo.GroupGraphqlId)
//			return nil
//		})
//	}
//
// ```
func GetGroupIds(ctx *pulumi.Context, args *GetGroupIdsArgs, opts ...pulumi.InvokeOption) (*GetGroupIdsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupIdsResult
	err := ctx.Invoke("gitlab:index/getGroupIds:getGroupIds", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupIds.
type GetGroupIdsArgs struct {
	// The ID or URL-encoded path of the group.
	Group string `pulumi:"group"`
}

// A collection of values returned by getGroupIds.
type GetGroupIdsResult struct {
	// The ID or URL-encoded path of the group.
	Group string `pulumi:"group"`
	// The full path of the group.
	GroupFullPath string `pulumi:"groupFullPath"`
	// The GraphQL ID of the group.
	GroupGraphqlId string `pulumi:"groupGraphqlId"`
	// The ID of the group.
	GroupId string `pulumi:"groupId"`
	Id      string `pulumi:"id"`
}

func GetGroupIdsOutput(ctx *pulumi.Context, args GetGroupIdsOutputArgs, opts ...pulumi.InvokeOption) GetGroupIdsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGroupIdsResultOutput, error) {
			args := v.(GetGroupIdsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getGroupIds:getGroupIds", args, GetGroupIdsResultOutput{}, options).(GetGroupIdsResultOutput), nil
		}).(GetGroupIdsResultOutput)
}

// A collection of arguments for invoking getGroupIds.
type GetGroupIdsOutputArgs struct {
	// The ID or URL-encoded path of the group.
	Group pulumi.StringInput `pulumi:"group"`
}

func (GetGroupIdsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupIdsArgs)(nil)).Elem()
}

// A collection of values returned by getGroupIds.
type GetGroupIdsResultOutput struct{ *pulumi.OutputState }

func (GetGroupIdsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupIdsResult)(nil)).Elem()
}

func (o GetGroupIdsResultOutput) ToGetGroupIdsResultOutput() GetGroupIdsResultOutput {
	return o
}

func (o GetGroupIdsResultOutput) ToGetGroupIdsResultOutputWithContext(ctx context.Context) GetGroupIdsResultOutput {
	return o
}

// The ID or URL-encoded path of the group.
func (o GetGroupIdsResultOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupIdsResult) string { return v.Group }).(pulumi.StringOutput)
}

// The full path of the group.
func (o GetGroupIdsResultOutput) GroupFullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupIdsResult) string { return v.GroupFullPath }).(pulumi.StringOutput)
}

// The GraphQL ID of the group.
func (o GetGroupIdsResultOutput) GroupGraphqlId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupIdsResult) string { return v.GroupGraphqlId }).(pulumi.StringOutput)
}

// The ID of the group.
func (o GetGroupIdsResultOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupIdsResult) string { return v.GroupId }).(pulumi.StringOutput)
}

func (o GetGroupIdsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupIdsResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupIdsResultOutput{})
}
