// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// This resource can be used to attach a security policy to a pre-existing project
//			_, err := gitlab.NewProjectSecurityPolicyAttachment(ctx, "foo", &gitlab.ProjectSecurityPolicyAttachmentArgs{
//				Project:       pulumi.String("1234"),
//				PolicyProject: pulumi.String("4567"),
//			})
//			if err != nil {
//				return err
//			}
//			// Or Terraform can create a new project, add a policy to that project,
//			// then attach that policy project to other projects.
//			my_policy_project, err := gitlab.NewProject(ctx, "my-policy-project", &gitlab.ProjectArgs{
//				Name: pulumi.String("security-policy-project"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewRepositoryFile(ctx, "policy-yml", &gitlab.RepositoryFileArgs{
//				Project:  my_policy_project.ID(),
//				FilePath: pulumi.String(".gitlab/security-policies/my-policy.yml"),
//				Branch:   pulumi.String("master"),
//				Encoding: pulumi.String("text"),
//				Content: pulumi.String(`---
//
// approval_policy:
// - name: test
// description: test
// enabled: true
// rules:
//   - type: any_merge_request
//     branch_type: protected
//     commits: any
//
// approval_settings:
//
//	block_branch_modification: true
//	prevent_pushing_and_force_pushing: true
//	prevent_approval_by_author: true
//	prevent_approval_by_commit_author: true
//	remove_approvals_with_new_commit: true
//	require_password_to_approve: false
//
// fallback_behavior:
//
//	fail: closed
//
// actions:
//   - type: send_bot_message
//     enabled: true
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			// Multiple policies can be attached to a single project by repeating this resource or using a `for_each`
//			_, err = gitlab.NewProjectSecurityPolicyAttachment(ctx, "my-policy", &gitlab.ProjectSecurityPolicyAttachmentArgs{
//				Project:       pulumi.String("1234"),
//				PolicyProject: my_policy_project.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_security_policy_attachment`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_security_policy_attachment.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// GitLab project security policy attachments can be imported using an id made up of `project:policy_project_id` where the policy project ID is the project ID of the policy project, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectSecurityPolicyAttachment:ProjectSecurityPolicyAttachment foo 1:2
// ```
type ProjectSecurityPolicyAttachment struct {
	pulumi.CustomResourceState

	// The ID or Full Path of the security policy project.
	PolicyProject pulumi.StringOutput `pulumi:"policyProject"`
	// The GraphQL ID of the security policy project.
	PolicyProjectGraphqlId pulumi.StringOutput `pulumi:"policyProjectGraphqlId"`
	// The ID or Full Path of the project which will have the security policy project assigned to it.
	Project pulumi.StringOutput `pulumi:"project"`
	// The GraphQL ID of the project to which the security policty project will be attached.
	ProjectGraphqlId pulumi.StringOutput `pulumi:"projectGraphqlId"`
}

// NewProjectSecurityPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewProjectSecurityPolicyAttachment(ctx *pulumi.Context,
	name string, args *ProjectSecurityPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*ProjectSecurityPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyProject == nil {
		return nil, errors.New("invalid value for required argument 'PolicyProject'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectSecurityPolicyAttachment
	err := ctx.RegisterResource("gitlab:index/projectSecurityPolicyAttachment:ProjectSecurityPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectSecurityPolicyAttachment gets an existing ProjectSecurityPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectSecurityPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectSecurityPolicyAttachmentState, opts ...pulumi.ResourceOption) (*ProjectSecurityPolicyAttachment, error) {
	var resource ProjectSecurityPolicyAttachment
	err := ctx.ReadResource("gitlab:index/projectSecurityPolicyAttachment:ProjectSecurityPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectSecurityPolicyAttachment resources.
type projectSecurityPolicyAttachmentState struct {
	// The ID or Full Path of the security policy project.
	PolicyProject *string `pulumi:"policyProject"`
	// The GraphQL ID of the security policy project.
	PolicyProjectGraphqlId *string `pulumi:"policyProjectGraphqlId"`
	// The ID or Full Path of the project which will have the security policy project assigned to it.
	Project *string `pulumi:"project"`
	// The GraphQL ID of the project to which the security policty project will be attached.
	ProjectGraphqlId *string `pulumi:"projectGraphqlId"`
}

type ProjectSecurityPolicyAttachmentState struct {
	// The ID or Full Path of the security policy project.
	PolicyProject pulumi.StringPtrInput
	// The GraphQL ID of the security policy project.
	PolicyProjectGraphqlId pulumi.StringPtrInput
	// The ID or Full Path of the project which will have the security policy project assigned to it.
	Project pulumi.StringPtrInput
	// The GraphQL ID of the project to which the security policty project will be attached.
	ProjectGraphqlId pulumi.StringPtrInput
}

func (ProjectSecurityPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectSecurityPolicyAttachmentState)(nil)).Elem()
}

type projectSecurityPolicyAttachmentArgs struct {
	// The ID or Full Path of the security policy project.
	PolicyProject string `pulumi:"policyProject"`
	// The ID or Full Path of the project which will have the security policy project assigned to it.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectSecurityPolicyAttachment resource.
type ProjectSecurityPolicyAttachmentArgs struct {
	// The ID or Full Path of the security policy project.
	PolicyProject pulumi.StringInput
	// The ID or Full Path of the project which will have the security policy project assigned to it.
	Project pulumi.StringInput
}

func (ProjectSecurityPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectSecurityPolicyAttachmentArgs)(nil)).Elem()
}

type ProjectSecurityPolicyAttachmentInput interface {
	pulumi.Input

	ToProjectSecurityPolicyAttachmentOutput() ProjectSecurityPolicyAttachmentOutput
	ToProjectSecurityPolicyAttachmentOutputWithContext(ctx context.Context) ProjectSecurityPolicyAttachmentOutput
}

func (*ProjectSecurityPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSecurityPolicyAttachment)(nil)).Elem()
}

func (i *ProjectSecurityPolicyAttachment) ToProjectSecurityPolicyAttachmentOutput() ProjectSecurityPolicyAttachmentOutput {
	return i.ToProjectSecurityPolicyAttachmentOutputWithContext(context.Background())
}

func (i *ProjectSecurityPolicyAttachment) ToProjectSecurityPolicyAttachmentOutputWithContext(ctx context.Context) ProjectSecurityPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecurityPolicyAttachmentOutput)
}

// ProjectSecurityPolicyAttachmentArrayInput is an input type that accepts ProjectSecurityPolicyAttachmentArray and ProjectSecurityPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `ProjectSecurityPolicyAttachmentArrayInput` via:
//
//	ProjectSecurityPolicyAttachmentArray{ ProjectSecurityPolicyAttachmentArgs{...} }
type ProjectSecurityPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToProjectSecurityPolicyAttachmentArrayOutput() ProjectSecurityPolicyAttachmentArrayOutput
	ToProjectSecurityPolicyAttachmentArrayOutputWithContext(context.Context) ProjectSecurityPolicyAttachmentArrayOutput
}

type ProjectSecurityPolicyAttachmentArray []ProjectSecurityPolicyAttachmentInput

func (ProjectSecurityPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectSecurityPolicyAttachment)(nil)).Elem()
}

func (i ProjectSecurityPolicyAttachmentArray) ToProjectSecurityPolicyAttachmentArrayOutput() ProjectSecurityPolicyAttachmentArrayOutput {
	return i.ToProjectSecurityPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i ProjectSecurityPolicyAttachmentArray) ToProjectSecurityPolicyAttachmentArrayOutputWithContext(ctx context.Context) ProjectSecurityPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecurityPolicyAttachmentArrayOutput)
}

// ProjectSecurityPolicyAttachmentMapInput is an input type that accepts ProjectSecurityPolicyAttachmentMap and ProjectSecurityPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `ProjectSecurityPolicyAttachmentMapInput` via:
//
//	ProjectSecurityPolicyAttachmentMap{ "key": ProjectSecurityPolicyAttachmentArgs{...} }
type ProjectSecurityPolicyAttachmentMapInput interface {
	pulumi.Input

	ToProjectSecurityPolicyAttachmentMapOutput() ProjectSecurityPolicyAttachmentMapOutput
	ToProjectSecurityPolicyAttachmentMapOutputWithContext(context.Context) ProjectSecurityPolicyAttachmentMapOutput
}

type ProjectSecurityPolicyAttachmentMap map[string]ProjectSecurityPolicyAttachmentInput

func (ProjectSecurityPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectSecurityPolicyAttachment)(nil)).Elem()
}

func (i ProjectSecurityPolicyAttachmentMap) ToProjectSecurityPolicyAttachmentMapOutput() ProjectSecurityPolicyAttachmentMapOutput {
	return i.ToProjectSecurityPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i ProjectSecurityPolicyAttachmentMap) ToProjectSecurityPolicyAttachmentMapOutputWithContext(ctx context.Context) ProjectSecurityPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecurityPolicyAttachmentMapOutput)
}

type ProjectSecurityPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (ProjectSecurityPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSecurityPolicyAttachment)(nil)).Elem()
}

func (o ProjectSecurityPolicyAttachmentOutput) ToProjectSecurityPolicyAttachmentOutput() ProjectSecurityPolicyAttachmentOutput {
	return o
}

func (o ProjectSecurityPolicyAttachmentOutput) ToProjectSecurityPolicyAttachmentOutputWithContext(ctx context.Context) ProjectSecurityPolicyAttachmentOutput {
	return o
}

// The ID or Full Path of the security policy project.
func (o ProjectSecurityPolicyAttachmentOutput) PolicyProject() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectSecurityPolicyAttachment) pulumi.StringOutput { return v.PolicyProject }).(pulumi.StringOutput)
}

// The GraphQL ID of the security policy project.
func (o ProjectSecurityPolicyAttachmentOutput) PolicyProjectGraphqlId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectSecurityPolicyAttachment) pulumi.StringOutput { return v.PolicyProjectGraphqlId }).(pulumi.StringOutput)
}

// The ID or Full Path of the project which will have the security policy project assigned to it.
func (o ProjectSecurityPolicyAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectSecurityPolicyAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The GraphQL ID of the project to which the security policty project will be attached.
func (o ProjectSecurityPolicyAttachmentOutput) ProjectGraphqlId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectSecurityPolicyAttachment) pulumi.StringOutput { return v.ProjectGraphqlId }).(pulumi.StringOutput)
}

type ProjectSecurityPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectSecurityPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectSecurityPolicyAttachment)(nil)).Elem()
}

func (o ProjectSecurityPolicyAttachmentArrayOutput) ToProjectSecurityPolicyAttachmentArrayOutput() ProjectSecurityPolicyAttachmentArrayOutput {
	return o
}

func (o ProjectSecurityPolicyAttachmentArrayOutput) ToProjectSecurityPolicyAttachmentArrayOutputWithContext(ctx context.Context) ProjectSecurityPolicyAttachmentArrayOutput {
	return o
}

func (o ProjectSecurityPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) ProjectSecurityPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectSecurityPolicyAttachment {
		return vs[0].([]*ProjectSecurityPolicyAttachment)[vs[1].(int)]
	}).(ProjectSecurityPolicyAttachmentOutput)
}

type ProjectSecurityPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (ProjectSecurityPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectSecurityPolicyAttachment)(nil)).Elem()
}

func (o ProjectSecurityPolicyAttachmentMapOutput) ToProjectSecurityPolicyAttachmentMapOutput() ProjectSecurityPolicyAttachmentMapOutput {
	return o
}

func (o ProjectSecurityPolicyAttachmentMapOutput) ToProjectSecurityPolicyAttachmentMapOutputWithContext(ctx context.Context) ProjectSecurityPolicyAttachmentMapOutput {
	return o
}

func (o ProjectSecurityPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) ProjectSecurityPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectSecurityPolicyAttachment {
		return vs[0].(map[string]*ProjectSecurityPolicyAttachment)[vs[1].(string)]
	}).(ProjectSecurityPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSecurityPolicyAttachmentInput)(nil)).Elem(), &ProjectSecurityPolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSecurityPolicyAttachmentArrayInput)(nil)).Elem(), ProjectSecurityPolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSecurityPolicyAttachmentMapInput)(nil)).Elem(), ProjectSecurityPolicyAttachmentMap{})
	pulumi.RegisterOutputType(ProjectSecurityPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(ProjectSecurityPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ProjectSecurityPolicyAttachmentMapOutput{})
}
