// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
func GetProjectAccessTokens(ctx *pulumi.Context, args *GetProjectAccessTokensArgs, opts ...pulumi.InvokeOption) (*GetProjectAccessTokensResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectAccessTokensResult
	err := ctx.Invoke("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectAccessTokens.
type GetProjectAccessTokensArgs struct {
	// The name or id of the project.
	Project string `pulumi:"project"`
	// List all project access token that match the specified state. Valid values are `active`, `inactive`. Returns all project access token if not set.
	State *string `pulumi:"state"`
}

// A collection of values returned by getProjectAccessTokens.
type GetProjectAccessTokensResult struct {
	// The list of access tokens returned by the search
	AccessTokens []GetProjectAccessTokensAccessToken `pulumi:"accessTokens"`
	Id           string                              `pulumi:"id"`
	// The name or id of the project.
	Project string `pulumi:"project"`
	// List all project access token that match the specified state. Valid values are `active`, `inactive`. Returns all project access token if not set.
	State *string `pulumi:"state"`
}

func GetProjectAccessTokensOutput(ctx *pulumi.Context, args GetProjectAccessTokensOutputArgs, opts ...pulumi.InvokeOption) GetProjectAccessTokensResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectAccessTokensResultOutput, error) {
			args := v.(GetProjectAccessTokensArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", args, GetProjectAccessTokensResultOutput{}, options).(GetProjectAccessTokensResultOutput), nil
		}).(GetProjectAccessTokensResultOutput)
}

// A collection of arguments for invoking getProjectAccessTokens.
type GetProjectAccessTokensOutputArgs struct {
	// The name or id of the project.
	Project pulumi.StringInput `pulumi:"project"`
	// List all project access token that match the specified state. Valid values are `active`, `inactive`. Returns all project access token if not set.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetProjectAccessTokensOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectAccessTokensArgs)(nil)).Elem()
}

// A collection of values returned by getProjectAccessTokens.
type GetProjectAccessTokensResultOutput struct{ *pulumi.OutputState }

func (GetProjectAccessTokensResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectAccessTokensResult)(nil)).Elem()
}

func (o GetProjectAccessTokensResultOutput) ToGetProjectAccessTokensResultOutput() GetProjectAccessTokensResultOutput {
	return o
}

func (o GetProjectAccessTokensResultOutput) ToGetProjectAccessTokensResultOutputWithContext(ctx context.Context) GetProjectAccessTokensResultOutput {
	return o
}

// The list of access tokens returned by the search
func (o GetProjectAccessTokensResultOutput) AccessTokens() GetProjectAccessTokensAccessTokenArrayOutput {
	return o.ApplyT(func(v GetProjectAccessTokensResult) []GetProjectAccessTokensAccessToken { return v.AccessTokens }).(GetProjectAccessTokensAccessTokenArrayOutput)
}

func (o GetProjectAccessTokensResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectAccessTokensResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name or id of the project.
func (o GetProjectAccessTokensResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectAccessTokensResult) string { return v.Project }).(pulumi.StringOutput)
}

// List all project access token that match the specified state. Valid values are `active`, `inactive`. Returns all project access token if not set.
func (o GetProjectAccessTokensResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectAccessTokensResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectAccessTokensResultOutput{})
}
