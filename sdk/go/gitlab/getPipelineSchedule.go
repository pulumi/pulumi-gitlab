// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_schedules.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.LookupPipelineSchedule(ctx, &gitlab.LookupPipelineScheduleArgs{
//				Project:            "12345",
//				PipelineScheduleId: 1,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPipelineSchedule(ctx *pulumi.Context, args *LookupPipelineScheduleArgs, opts ...pulumi.InvokeOption) (*LookupPipelineScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPipelineScheduleResult
	err := ctx.Invoke("gitlab:index/getPipelineSchedule:getPipelineSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPipelineSchedule.
type LookupPipelineScheduleArgs struct {
	// The timezone.
	CronTimezone *string `pulumi:"cronTimezone"`
	// The pipeline schedule id.
	PipelineScheduleId int `pulumi:"pipelineScheduleId"`
	// The name or id of the project to add the schedule to.
	Project string `pulumi:"project"`
}

// A collection of values returned by getPipelineSchedule.
type LookupPipelineScheduleResult struct {
	// The activation status of pipeline schedule.
	Active bool `pulumi:"active"`
	// The datetime of when the schedule was created.
	CreatedAt string `pulumi:"createdAt"`
	// The cron (e.g. `0 1 * * *`).
	Cron string `pulumi:"cron"`
	// The timezone.
	CronTimezone string `pulumi:"cronTimezone"`
	// The description of the pipeline schedule.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// The details of the last pipeline run by the schedule.
	LastPipeline GetPipelineScheduleLastPipeline `pulumi:"lastPipeline"`
	// The datetime of when the schedule will next run.
	NextRunAt string `pulumi:"nextRunAt"`
	// The details of the pipeline schedule owner.
	Owner GetPipelineScheduleOwner `pulumi:"owner"`
	// The pipeline schedule id.
	PipelineScheduleId int `pulumi:"pipelineScheduleId"`
	// The name or id of the project to add the schedule to.
	Project string `pulumi:"project"`
	// The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
	Ref string `pulumi:"ref"`
	// The datetime of when the schedule was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The list of the pipeline schedule variables.
	Variables []GetPipelineScheduleVariableType `pulumi:"variables"`
}

func LookupPipelineScheduleOutput(ctx *pulumi.Context, args LookupPipelineScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupPipelineScheduleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPipelineScheduleResultOutput, error) {
			args := v.(LookupPipelineScheduleArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPipelineScheduleResult
			secret, err := ctx.InvokePackageRaw("gitlab:index/getPipelineSchedule:getPipelineSchedule", args, &rv, "", opts...)
			if err != nil {
				return LookupPipelineScheduleResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPipelineScheduleResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPipelineScheduleResultOutput), nil
			}
			return output, nil
		}).(LookupPipelineScheduleResultOutput)
}

// A collection of arguments for invoking getPipelineSchedule.
type LookupPipelineScheduleOutputArgs struct {
	// The timezone.
	CronTimezone pulumi.StringPtrInput `pulumi:"cronTimezone"`
	// The pipeline schedule id.
	PipelineScheduleId pulumi.IntInput `pulumi:"pipelineScheduleId"`
	// The name or id of the project to add the schedule to.
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupPipelineScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineScheduleArgs)(nil)).Elem()
}

// A collection of values returned by getPipelineSchedule.
type LookupPipelineScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupPipelineScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineScheduleResult)(nil)).Elem()
}

func (o LookupPipelineScheduleResultOutput) ToLookupPipelineScheduleResultOutput() LookupPipelineScheduleResultOutput {
	return o
}

func (o LookupPipelineScheduleResultOutput) ToLookupPipelineScheduleResultOutputWithContext(ctx context.Context) LookupPipelineScheduleResultOutput {
	return o
}

// The activation status of pipeline schedule.
func (o LookupPipelineScheduleResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) bool { return v.Active }).(pulumi.BoolOutput)
}

// The datetime of when the schedule was created.
func (o LookupPipelineScheduleResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The cron (e.g. `0 1 * * *`).
func (o LookupPipelineScheduleResultOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.Cron }).(pulumi.StringOutput)
}

// The timezone.
func (o LookupPipelineScheduleResultOutput) CronTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.CronTimezone }).(pulumi.StringOutput)
}

// The description of the pipeline schedule.
func (o LookupPipelineScheduleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupPipelineScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The details of the last pipeline run by the schedule.
func (o LookupPipelineScheduleResultOutput) LastPipeline() GetPipelineScheduleLastPipelineOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) GetPipelineScheduleLastPipeline { return v.LastPipeline }).(GetPipelineScheduleLastPipelineOutput)
}

// The datetime of when the schedule will next run.
func (o LookupPipelineScheduleResultOutput) NextRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.NextRunAt }).(pulumi.StringOutput)
}

// The details of the pipeline schedule owner.
func (o LookupPipelineScheduleResultOutput) Owner() GetPipelineScheduleOwnerOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) GetPipelineScheduleOwner { return v.Owner }).(GetPipelineScheduleOwnerOutput)
}

// The pipeline schedule id.
func (o LookupPipelineScheduleResultOutput) PipelineScheduleId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) int { return v.PipelineScheduleId }).(pulumi.IntOutput)
}

// The name or id of the project to add the schedule to.
func (o LookupPipelineScheduleResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.Project }).(pulumi.StringOutput)
}

// The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
func (o LookupPipelineScheduleResultOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.Ref }).(pulumi.StringOutput)
}

// The datetime of when the schedule was last updated.
func (o LookupPipelineScheduleResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The list of the pipeline schedule variables.
func (o LookupPipelineScheduleResultOutput) Variables() GetPipelineScheduleVariableTypeArrayOutput {
	return o.ApplyT(func(v LookupPipelineScheduleResult) []GetPipelineScheduleVariableType { return v.Variables }).(GetPipelineScheduleVariableTypeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPipelineScheduleResultOutput{})
}
