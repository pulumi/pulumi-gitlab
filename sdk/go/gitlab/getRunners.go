// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getRunners` data source retrieves information about all gitlab runners.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewUserRunner(ctx, "this", &gitlab.UserRunnerArgs{
//				RunnerType: pulumi.String("instance_type"),
//				TagLists: pulumi.StringArray{
//					pulumi.String("tag1"),
//					pulumi.String("tag2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.GetRunners(ctx, &gitlab.GetRunnersArgs{
//				Paused: pulumi.BoolRef(false),
//				Status: pulumi.StringRef("online"),
//				TagLists: []string{
//					"tag1",
//					"tag2",
//				},
//				Type: pulumi.StringRef("instance_type"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRunners(ctx *pulumi.Context, args *GetRunnersArgs, opts ...pulumi.InvokeOption) (*GetRunnersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRunnersResult
	err := ctx.Invoke("gitlab:index/getRunners:getRunners", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRunners.
type GetRunnersArgs struct {
	// Filters for runners with the given paused value
	Paused *bool `pulumi:"paused"`
	// Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
	Status *string `pulumi:"status"`
	// Filters for runners with all of the given tags
	TagLists []string `pulumi:"tagLists"`
	// The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
	Type *string `pulumi:"type"`
}

// A collection of values returned by getRunners.
type GetRunnersResult struct {
	Id string `pulumi:"id"`
	// Filters for runners with the given paused value
	Paused *bool `pulumi:"paused"`
	// The list of runners.
	Runners []GetRunnersRunner `pulumi:"runners"`
	// Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
	Status *string `pulumi:"status"`
	// Filters for runners with all of the given tags
	TagLists []string `pulumi:"tagLists"`
	// The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
	Type *string `pulumi:"type"`
}

func GetRunnersOutput(ctx *pulumi.Context, args GetRunnersOutputArgs, opts ...pulumi.InvokeOption) GetRunnersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRunnersResultOutput, error) {
			args := v.(GetRunnersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getRunners:getRunners", args, GetRunnersResultOutput{}, options).(GetRunnersResultOutput), nil
		}).(GetRunnersResultOutput)
}

// A collection of arguments for invoking getRunners.
type GetRunnersOutputArgs struct {
	// Filters for runners with the given paused value
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Filters for runners with all of the given tags
	TagLists pulumi.StringArrayInput `pulumi:"tagLists"`
	// The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetRunnersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunnersArgs)(nil)).Elem()
}

// A collection of values returned by getRunners.
type GetRunnersResultOutput struct{ *pulumi.OutputState }

func (GetRunnersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunnersResult)(nil)).Elem()
}

func (o GetRunnersResultOutput) ToGetRunnersResultOutput() GetRunnersResultOutput {
	return o
}

func (o GetRunnersResultOutput) ToGetRunnersResultOutputWithContext(ctx context.Context) GetRunnersResultOutput {
	return o
}

func (o GetRunnersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunnersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Filters for runners with the given paused value
func (o GetRunnersResultOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRunnersResult) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The list of runners.
func (o GetRunnersResultOutput) Runners() GetRunnersRunnerArrayOutput {
	return o.ApplyT(func(v GetRunnersResult) []GetRunnersRunner { return v.Runners }).(GetRunnersRunnerArrayOutput)
}

// Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
func (o GetRunnersResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRunnersResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Filters for runners with all of the given tags
func (o GetRunnersResultOutput) TagLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRunnersResult) []string { return v.TagLists }).(pulumi.StringArrayOutput)
}

// The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
func (o GetRunnersResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRunnersResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRunnersResultOutput{})
}
