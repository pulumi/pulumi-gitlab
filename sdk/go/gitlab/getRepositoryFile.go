// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `RepositoryFile` data source allows details of a file in a repository to be retrieved.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.LookupRepositoryFile(ctx, &GetRepositoryFileArgs{
// 			FilePath: "README.md",
// 			Project:  "example",
// 			Ref:      "main",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupRepositoryFile(ctx *pulumi.Context, args *LookupRepositoryFileArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryFileResult, error) {
	var rv LookupRepositoryFileResult
	err := ctx.Invoke("gitlab:index/getRepositoryFile:getRepositoryFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryFile.
type LookupRepositoryFileArgs struct {
	FilePath string `pulumi:"filePath"`
	Project  string `pulumi:"project"`
	Ref      string `pulumi:"ref"`
}

// A collection of values returned by getRepositoryFile.
type LookupRepositoryFileResult struct {
	BlobId        string `pulumi:"blobId"`
	CommitId      string `pulumi:"commitId"`
	Content       string `pulumi:"content"`
	ContentSha256 string `pulumi:"contentSha256"`
	Encoding      string `pulumi:"encoding"`
	FileName      string `pulumi:"fileName"`
	FilePath      string `pulumi:"filePath"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	LastCommitId string `pulumi:"lastCommitId"`
	Project      string `pulumi:"project"`
	Ref          string `pulumi:"ref"`
	Size         int    `pulumi:"size"`
}

func LookupRepositoryFileOutput(ctx *pulumi.Context, args LookupRepositoryFileOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryFileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryFileResult, error) {
			args := v.(LookupRepositoryFileArgs)
			r, err := LookupRepositoryFile(ctx, &args, opts...)
			return *r, err
		}).(LookupRepositoryFileResultOutput)
}

// A collection of arguments for invoking getRepositoryFile.
type LookupRepositoryFileOutputArgs struct {
	FilePath pulumi.StringInput `pulumi:"filePath"`
	Project  pulumi.StringInput `pulumi:"project"`
	Ref      pulumi.StringInput `pulumi:"ref"`
}

func (LookupRepositoryFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryFileArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryFile.
type LookupRepositoryFileResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryFileResult)(nil)).Elem()
}

func (o LookupRepositoryFileResultOutput) ToLookupRepositoryFileResultOutput() LookupRepositoryFileResultOutput {
	return o
}

func (o LookupRepositoryFileResultOutput) ToLookupRepositoryFileResultOutputWithContext(ctx context.Context) LookupRepositoryFileResultOutput {
	return o
}

func (o LookupRepositoryFileResultOutput) BlobId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.BlobId }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) CommitId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.CommitId }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Content }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) ContentSha256() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.ContentSha256 }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Encoding }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.FileName }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.FilePath }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryFileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) LastCommitId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.LastCommitId }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Ref }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) int { return v.Size }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryFileResultOutput{})
}
