// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectExternalStatusCheck` resource allows you to manage the lifecycle of an external status check service on a project.
//
// > This resource requires a GitLab Enterprise instance with an Ultimate license.
//
// **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/status_checks/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewProjectExternalStatusCheck(ctx, "foo", &gitlab.ProjectExternalStatusCheckArgs{
//				ProjectId:   pulumi.Int(123),
//				Name:        pulumi.String("foo"),
//				ExternalUrl: pulumi.String("https://example.gitlab.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectExternalStatusCheck(ctx, "bar", &gitlab.ProjectExternalStatusCheckArgs{
//				ProjectId:    pulumi.Int(456),
//				Name:         pulumi.String("bar"),
//				ExternalUrl:  pulumi.String("https://example.gitlab.com"),
//				SharedSecret: pulumi.String("secret"),
//				ProtectedBranchIds: pulumi.IntArray{
//					pulumi.Int(6),
//					pulumi.Int(28),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_external_status_check`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_external_status_check.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// GitLab project external status checks can be imported using an id made up of `<project-id>:<external-check-id>`, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck foo "123:42"
// ```
//
// NOTE: the `shared_secret` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
type ProjectExternalStatusCheck struct {
	pulumi.CustomResourceState

	// The URL of the external status check service.
	ExternalUrl pulumi.StringOutput `pulumi:"externalUrl"`
	// True if the external status check uses an HMAC secret.
	Hmac pulumi.BoolOutput `pulumi:"hmac"`
	// The display name of the external status check service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The list of IDs of protected branches to scope the rule by.
	ProtectedBranchIds pulumi.IntArrayOutput `pulumi:"protectedBranchIds"`
	// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
	SharedSecret pulumi.StringPtrOutput `pulumi:"sharedSecret"`
}

// NewProjectExternalStatusCheck registers a new resource with the given unique name, arguments, and options.
func NewProjectExternalStatusCheck(ctx *pulumi.Context,
	name string, args *ProjectExternalStatusCheckArgs, opts ...pulumi.ResourceOption) (*ProjectExternalStatusCheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalUrl == nil {
		return nil, errors.New("invalid value for required argument 'ExternalUrl'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SharedSecret != nil {
		args.SharedSecret = pulumi.ToSecret(args.SharedSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectExternalStatusCheck
	err := ctx.RegisterResource("gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectExternalStatusCheck gets an existing ProjectExternalStatusCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectExternalStatusCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectExternalStatusCheckState, opts ...pulumi.ResourceOption) (*ProjectExternalStatusCheck, error) {
	var resource ProjectExternalStatusCheck
	err := ctx.ReadResource("gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectExternalStatusCheck resources.
type projectExternalStatusCheckState struct {
	// The URL of the external status check service.
	ExternalUrl *string `pulumi:"externalUrl"`
	// True if the external status check uses an HMAC secret.
	Hmac *bool `pulumi:"hmac"`
	// The display name of the external status check service.
	Name *string `pulumi:"name"`
	// The ID of the project.
	ProjectId *int `pulumi:"projectId"`
	// The list of IDs of protected branches to scope the rule by.
	ProtectedBranchIds []int `pulumi:"protectedBranchIds"`
	// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
	SharedSecret *string `pulumi:"sharedSecret"`
}

type ProjectExternalStatusCheckState struct {
	// The URL of the external status check service.
	ExternalUrl pulumi.StringPtrInput
	// True if the external status check uses an HMAC secret.
	Hmac pulumi.BoolPtrInput
	// The display name of the external status check service.
	Name pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.IntPtrInput
	// The list of IDs of protected branches to scope the rule by.
	ProtectedBranchIds pulumi.IntArrayInput
	// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
	SharedSecret pulumi.StringPtrInput
}

func (ProjectExternalStatusCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectExternalStatusCheckState)(nil)).Elem()
}

type projectExternalStatusCheckArgs struct {
	// The URL of the external status check service.
	ExternalUrl string `pulumi:"externalUrl"`
	// The display name of the external status check service.
	Name *string `pulumi:"name"`
	// The ID of the project.
	ProjectId int `pulumi:"projectId"`
	// The list of IDs of protected branches to scope the rule by.
	ProtectedBranchIds []int `pulumi:"protectedBranchIds"`
	// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
	SharedSecret *string `pulumi:"sharedSecret"`
}

// The set of arguments for constructing a ProjectExternalStatusCheck resource.
type ProjectExternalStatusCheckArgs struct {
	// The URL of the external status check service.
	ExternalUrl pulumi.StringInput
	// The display name of the external status check service.
	Name pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.IntInput
	// The list of IDs of protected branches to scope the rule by.
	ProtectedBranchIds pulumi.IntArrayInput
	// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
	SharedSecret pulumi.StringPtrInput
}

func (ProjectExternalStatusCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectExternalStatusCheckArgs)(nil)).Elem()
}

type ProjectExternalStatusCheckInput interface {
	pulumi.Input

	ToProjectExternalStatusCheckOutput() ProjectExternalStatusCheckOutput
	ToProjectExternalStatusCheckOutputWithContext(ctx context.Context) ProjectExternalStatusCheckOutput
}

func (*ProjectExternalStatusCheck) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectExternalStatusCheck)(nil)).Elem()
}

func (i *ProjectExternalStatusCheck) ToProjectExternalStatusCheckOutput() ProjectExternalStatusCheckOutput {
	return i.ToProjectExternalStatusCheckOutputWithContext(context.Background())
}

func (i *ProjectExternalStatusCheck) ToProjectExternalStatusCheckOutputWithContext(ctx context.Context) ProjectExternalStatusCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectExternalStatusCheckOutput)
}

// ProjectExternalStatusCheckArrayInput is an input type that accepts ProjectExternalStatusCheckArray and ProjectExternalStatusCheckArrayOutput values.
// You can construct a concrete instance of `ProjectExternalStatusCheckArrayInput` via:
//
//	ProjectExternalStatusCheckArray{ ProjectExternalStatusCheckArgs{...} }
type ProjectExternalStatusCheckArrayInput interface {
	pulumi.Input

	ToProjectExternalStatusCheckArrayOutput() ProjectExternalStatusCheckArrayOutput
	ToProjectExternalStatusCheckArrayOutputWithContext(context.Context) ProjectExternalStatusCheckArrayOutput
}

type ProjectExternalStatusCheckArray []ProjectExternalStatusCheckInput

func (ProjectExternalStatusCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectExternalStatusCheck)(nil)).Elem()
}

func (i ProjectExternalStatusCheckArray) ToProjectExternalStatusCheckArrayOutput() ProjectExternalStatusCheckArrayOutput {
	return i.ToProjectExternalStatusCheckArrayOutputWithContext(context.Background())
}

func (i ProjectExternalStatusCheckArray) ToProjectExternalStatusCheckArrayOutputWithContext(ctx context.Context) ProjectExternalStatusCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectExternalStatusCheckArrayOutput)
}

// ProjectExternalStatusCheckMapInput is an input type that accepts ProjectExternalStatusCheckMap and ProjectExternalStatusCheckMapOutput values.
// You can construct a concrete instance of `ProjectExternalStatusCheckMapInput` via:
//
//	ProjectExternalStatusCheckMap{ "key": ProjectExternalStatusCheckArgs{...} }
type ProjectExternalStatusCheckMapInput interface {
	pulumi.Input

	ToProjectExternalStatusCheckMapOutput() ProjectExternalStatusCheckMapOutput
	ToProjectExternalStatusCheckMapOutputWithContext(context.Context) ProjectExternalStatusCheckMapOutput
}

type ProjectExternalStatusCheckMap map[string]ProjectExternalStatusCheckInput

func (ProjectExternalStatusCheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectExternalStatusCheck)(nil)).Elem()
}

func (i ProjectExternalStatusCheckMap) ToProjectExternalStatusCheckMapOutput() ProjectExternalStatusCheckMapOutput {
	return i.ToProjectExternalStatusCheckMapOutputWithContext(context.Background())
}

func (i ProjectExternalStatusCheckMap) ToProjectExternalStatusCheckMapOutputWithContext(ctx context.Context) ProjectExternalStatusCheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectExternalStatusCheckMapOutput)
}

type ProjectExternalStatusCheckOutput struct{ *pulumi.OutputState }

func (ProjectExternalStatusCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectExternalStatusCheck)(nil)).Elem()
}

func (o ProjectExternalStatusCheckOutput) ToProjectExternalStatusCheckOutput() ProjectExternalStatusCheckOutput {
	return o
}

func (o ProjectExternalStatusCheckOutput) ToProjectExternalStatusCheckOutputWithContext(ctx context.Context) ProjectExternalStatusCheckOutput {
	return o
}

// The URL of the external status check service.
func (o ProjectExternalStatusCheckOutput) ExternalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectExternalStatusCheck) pulumi.StringOutput { return v.ExternalUrl }).(pulumi.StringOutput)
}

// True if the external status check uses an HMAC secret.
func (o ProjectExternalStatusCheckOutput) Hmac() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectExternalStatusCheck) pulumi.BoolOutput { return v.Hmac }).(pulumi.BoolOutput)
}

// The display name of the external status check service.
func (o ProjectExternalStatusCheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectExternalStatusCheck) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project.
func (o ProjectExternalStatusCheckOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectExternalStatusCheck) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The list of IDs of protected branches to scope the rule by.
func (o ProjectExternalStatusCheckOutput) ProtectedBranchIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ProjectExternalStatusCheck) pulumi.IntArrayOutput { return v.ProtectedBranchIds }).(pulumi.IntArrayOutput)
}

// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
func (o ProjectExternalStatusCheckOutput) SharedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectExternalStatusCheck) pulumi.StringPtrOutput { return v.SharedSecret }).(pulumi.StringPtrOutput)
}

type ProjectExternalStatusCheckArrayOutput struct{ *pulumi.OutputState }

func (ProjectExternalStatusCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectExternalStatusCheck)(nil)).Elem()
}

func (o ProjectExternalStatusCheckArrayOutput) ToProjectExternalStatusCheckArrayOutput() ProjectExternalStatusCheckArrayOutput {
	return o
}

func (o ProjectExternalStatusCheckArrayOutput) ToProjectExternalStatusCheckArrayOutputWithContext(ctx context.Context) ProjectExternalStatusCheckArrayOutput {
	return o
}

func (o ProjectExternalStatusCheckArrayOutput) Index(i pulumi.IntInput) ProjectExternalStatusCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectExternalStatusCheck {
		return vs[0].([]*ProjectExternalStatusCheck)[vs[1].(int)]
	}).(ProjectExternalStatusCheckOutput)
}

type ProjectExternalStatusCheckMapOutput struct{ *pulumi.OutputState }

func (ProjectExternalStatusCheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectExternalStatusCheck)(nil)).Elem()
}

func (o ProjectExternalStatusCheckMapOutput) ToProjectExternalStatusCheckMapOutput() ProjectExternalStatusCheckMapOutput {
	return o
}

func (o ProjectExternalStatusCheckMapOutput) ToProjectExternalStatusCheckMapOutputWithContext(ctx context.Context) ProjectExternalStatusCheckMapOutput {
	return o
}

func (o ProjectExternalStatusCheckMapOutput) MapIndex(k pulumi.StringInput) ProjectExternalStatusCheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectExternalStatusCheck {
		return vs[0].(map[string]*ProjectExternalStatusCheck)[vs[1].(string)]
	}).(ProjectExternalStatusCheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectExternalStatusCheckInput)(nil)).Elem(), &ProjectExternalStatusCheck{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectExternalStatusCheckArrayInput)(nil)).Elem(), ProjectExternalStatusCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectExternalStatusCheckMapInput)(nil)).Elem(), ProjectExternalStatusCheckMap{})
	pulumi.RegisterOutputType(ProjectExternalStatusCheckOutput{})
	pulumi.RegisterOutputType(ProjectExternalStatusCheckArrayOutput{})
	pulumi.RegisterOutputType(ProjectExternalStatusCheckMapOutput{})
}
