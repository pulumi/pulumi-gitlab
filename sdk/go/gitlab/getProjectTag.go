// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectTag` data source allows details of a project tag to be retrieved by its name.
//
// **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v5/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.LookupProjectTag(ctx, &gitlab.LookupProjectTagArgs{
//				Name:    "example",
//				Project: "foo/bar",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProjectTag(ctx *pulumi.Context, args *LookupProjectTagArgs, opts ...pulumi.InvokeOption) (*LookupProjectTagResult, error) {
	var rv LookupProjectTagResult
	err := ctx.Invoke("gitlab:index/getProjectTag:getProjectTag", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectTag.
type LookupProjectTagArgs struct {
	// The name of a tag.
	Name string `pulumi:"name"`
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project string `pulumi:"project"`
}

// A collection of values returned by getProjectTag.
type LookupProjectTagResult struct {
	// The commit associated with the tag.
	Commits []GetProjectTagCommit `pulumi:"commits"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The message of the annotated tag.
	Message string `pulumi:"message"`
	// The name of a tag.
	Name string `pulumi:"name"`
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project string `pulumi:"project"`
	// Bool, true if tag has tag protection.
	Protected bool `pulumi:"protected"`
	// The release associated with the tag.
	Releases []GetProjectTagRelease `pulumi:"releases"`
	// The unique id assigned to the commit by Gitlab.
	Target string `pulumi:"target"`
}

func LookupProjectTagOutput(ctx *pulumi.Context, args LookupProjectTagOutputArgs, opts ...pulumi.InvokeOption) LookupProjectTagResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectTagResult, error) {
			args := v.(LookupProjectTagArgs)
			r, err := LookupProjectTag(ctx, &args, opts...)
			var s LookupProjectTagResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectTagResultOutput)
}

// A collection of arguments for invoking getProjectTag.
type LookupProjectTagOutputArgs struct {
	// The name of a tag.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupProjectTagOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectTagArgs)(nil)).Elem()
}

// A collection of values returned by getProjectTag.
type LookupProjectTagResultOutput struct{ *pulumi.OutputState }

func (LookupProjectTagResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectTagResult)(nil)).Elem()
}

func (o LookupProjectTagResultOutput) ToLookupProjectTagResultOutput() LookupProjectTagResultOutput {
	return o
}

func (o LookupProjectTagResultOutput) ToLookupProjectTagResultOutputWithContext(ctx context.Context) LookupProjectTagResultOutput {
	return o
}

// The commit associated with the tag.
func (o LookupProjectTagResultOutput) Commits() GetProjectTagCommitArrayOutput {
	return o.ApplyT(func(v LookupProjectTagResult) []GetProjectTagCommit { return v.Commits }).(GetProjectTagCommitArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectTagResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectTagResult) string { return v.Id }).(pulumi.StringOutput)
}

// The message of the annotated tag.
func (o LookupProjectTagResultOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectTagResult) string { return v.Message }).(pulumi.StringOutput)
}

// The name of a tag.
func (o LookupProjectTagResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectTagResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID or URL-encoded path of the project owned by the authenticated user.
func (o LookupProjectTagResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectTagResult) string { return v.Project }).(pulumi.StringOutput)
}

// Bool, true if tag has tag protection.
func (o LookupProjectTagResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectTagResult) bool { return v.Protected }).(pulumi.BoolOutput)
}

// The release associated with the tag.
func (o LookupProjectTagResultOutput) Releases() GetProjectTagReleaseArrayOutput {
	return o.ApplyT(func(v LookupProjectTagResult) []GetProjectTagRelease { return v.Releases }).(GetProjectTagReleaseArrayOutput)
}

// The unique id assigned to the commit by Gitlab.
func (o LookupProjectTagResultOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectTagResult) string { return v.Target }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectTagResultOutput{})
}
