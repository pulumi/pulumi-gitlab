// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ServiceExternalWiki` resource allows to manage the lifecycle of a project integration with External Wiki Service.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#external-wiki)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesomeProject", &gitlab.ProjectArgs{
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewServiceExternalWiki(ctx, "wiki", &gitlab.ServiceExternalWikiArgs{
//				Project:         awesomeProject.ID(),
//				ExternalWikiUrl: pulumi.String("https://MyAwesomeExternalWikiURL.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a gitlab_service_external_wiki state using the project ID, e.g.
//
// ```sh
//
//	$ pulumi import gitlab:index/serviceExternalWiki:ServiceExternalWiki wiki 1
//
// ```
type ServiceExternalWiki struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The URL of the external wiki.
	ExternalWikiUrl pulumi.StringOutput `pulumi:"externalWikiUrl"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Title of the integration.
	Title pulumi.StringOutput `pulumi:"title"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewServiceExternalWiki registers a new resource with the given unique name, arguments, and options.
func NewServiceExternalWiki(ctx *pulumi.Context,
	name string, args *ServiceExternalWikiArgs, opts ...pulumi.ResourceOption) (*ServiceExternalWiki, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalWikiUrl == nil {
		return nil, errors.New("invalid value for required argument 'ExternalWikiUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource ServiceExternalWiki
	err := ctx.RegisterResource("gitlab:index/serviceExternalWiki:ServiceExternalWiki", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceExternalWiki gets an existing ServiceExternalWiki resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceExternalWiki(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceExternalWikiState, opts ...pulumi.ResourceOption) (*ServiceExternalWiki, error) {
	var resource ServiceExternalWiki
	err := ctx.ReadResource("gitlab:index/serviceExternalWiki:ServiceExternalWiki", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceExternalWiki resources.
type serviceExternalWikiState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// The URL of the external wiki.
	ExternalWikiUrl *string `pulumi:"externalWikiUrl"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug *string `pulumi:"slug"`
	// Title of the integration.
	Title *string `pulumi:"title"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ServiceExternalWikiState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringPtrInput
	// The URL of the external wiki.
	ExternalWikiUrl pulumi.StringPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringPtrInput
	// Title of the integration.
	Title pulumi.StringPtrInput
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (ServiceExternalWikiState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceExternalWikiState)(nil)).Elem()
}

type serviceExternalWikiArgs struct {
	// The URL of the external wiki.
	ExternalWikiUrl string `pulumi:"externalWikiUrl"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ServiceExternalWiki resource.
type ServiceExternalWikiArgs struct {
	// The URL of the external wiki.
	ExternalWikiUrl pulumi.StringInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
}

func (ServiceExternalWikiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceExternalWikiArgs)(nil)).Elem()
}

type ServiceExternalWikiInput interface {
	pulumi.Input

	ToServiceExternalWikiOutput() ServiceExternalWikiOutput
	ToServiceExternalWikiOutputWithContext(ctx context.Context) ServiceExternalWikiOutput
}

func (*ServiceExternalWiki) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceExternalWiki)(nil)).Elem()
}

func (i *ServiceExternalWiki) ToServiceExternalWikiOutput() ServiceExternalWikiOutput {
	return i.ToServiceExternalWikiOutputWithContext(context.Background())
}

func (i *ServiceExternalWiki) ToServiceExternalWikiOutputWithContext(ctx context.Context) ServiceExternalWikiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceExternalWikiOutput)
}

// ServiceExternalWikiArrayInput is an input type that accepts ServiceExternalWikiArray and ServiceExternalWikiArrayOutput values.
// You can construct a concrete instance of `ServiceExternalWikiArrayInput` via:
//
//	ServiceExternalWikiArray{ ServiceExternalWikiArgs{...} }
type ServiceExternalWikiArrayInput interface {
	pulumi.Input

	ToServiceExternalWikiArrayOutput() ServiceExternalWikiArrayOutput
	ToServiceExternalWikiArrayOutputWithContext(context.Context) ServiceExternalWikiArrayOutput
}

type ServiceExternalWikiArray []ServiceExternalWikiInput

func (ServiceExternalWikiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceExternalWiki)(nil)).Elem()
}

func (i ServiceExternalWikiArray) ToServiceExternalWikiArrayOutput() ServiceExternalWikiArrayOutput {
	return i.ToServiceExternalWikiArrayOutputWithContext(context.Background())
}

func (i ServiceExternalWikiArray) ToServiceExternalWikiArrayOutputWithContext(ctx context.Context) ServiceExternalWikiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceExternalWikiArrayOutput)
}

// ServiceExternalWikiMapInput is an input type that accepts ServiceExternalWikiMap and ServiceExternalWikiMapOutput values.
// You can construct a concrete instance of `ServiceExternalWikiMapInput` via:
//
//	ServiceExternalWikiMap{ "key": ServiceExternalWikiArgs{...} }
type ServiceExternalWikiMapInput interface {
	pulumi.Input

	ToServiceExternalWikiMapOutput() ServiceExternalWikiMapOutput
	ToServiceExternalWikiMapOutputWithContext(context.Context) ServiceExternalWikiMapOutput
}

type ServiceExternalWikiMap map[string]ServiceExternalWikiInput

func (ServiceExternalWikiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceExternalWiki)(nil)).Elem()
}

func (i ServiceExternalWikiMap) ToServiceExternalWikiMapOutput() ServiceExternalWikiMapOutput {
	return i.ToServiceExternalWikiMapOutputWithContext(context.Background())
}

func (i ServiceExternalWikiMap) ToServiceExternalWikiMapOutputWithContext(ctx context.Context) ServiceExternalWikiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceExternalWikiMapOutput)
}

type ServiceExternalWikiOutput struct{ *pulumi.OutputState }

func (ServiceExternalWikiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceExternalWiki)(nil)).Elem()
}

func (o ServiceExternalWikiOutput) ToServiceExternalWikiOutput() ServiceExternalWikiOutput {
	return o
}

func (o ServiceExternalWikiOutput) ToServiceExternalWikiOutputWithContext(ctx context.Context) ServiceExternalWikiOutput {
	return o
}

// Whether the integration is active.
func (o ServiceExternalWikiOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceExternalWiki) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The ISO8601 date/time that this integration was activated at in UTC.
func (o ServiceExternalWikiOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceExternalWiki) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL of the external wiki.
func (o ServiceExternalWikiOutput) ExternalWikiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceExternalWiki) pulumi.StringOutput { return v.ExternalWikiUrl }).(pulumi.StringOutput)
}

// ID of the project you want to activate integration on.
func (o ServiceExternalWikiOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceExternalWiki) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
func (o ServiceExternalWikiOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceExternalWiki) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Title of the integration.
func (o ServiceExternalWikiOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceExternalWiki) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The ISO8601 date/time that this integration was last updated at in UTC.
func (o ServiceExternalWikiOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceExternalWiki) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ServiceExternalWikiArrayOutput struct{ *pulumi.OutputState }

func (ServiceExternalWikiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceExternalWiki)(nil)).Elem()
}

func (o ServiceExternalWikiArrayOutput) ToServiceExternalWikiArrayOutput() ServiceExternalWikiArrayOutput {
	return o
}

func (o ServiceExternalWikiArrayOutput) ToServiceExternalWikiArrayOutputWithContext(ctx context.Context) ServiceExternalWikiArrayOutput {
	return o
}

func (o ServiceExternalWikiArrayOutput) Index(i pulumi.IntInput) ServiceExternalWikiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceExternalWiki {
		return vs[0].([]*ServiceExternalWiki)[vs[1].(int)]
	}).(ServiceExternalWikiOutput)
}

type ServiceExternalWikiMapOutput struct{ *pulumi.OutputState }

func (ServiceExternalWikiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceExternalWiki)(nil)).Elem()
}

func (o ServiceExternalWikiMapOutput) ToServiceExternalWikiMapOutput() ServiceExternalWikiMapOutput {
	return o
}

func (o ServiceExternalWikiMapOutput) ToServiceExternalWikiMapOutputWithContext(ctx context.Context) ServiceExternalWikiMapOutput {
	return o
}

func (o ServiceExternalWikiMapOutput) MapIndex(k pulumi.StringInput) ServiceExternalWikiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceExternalWiki {
		return vs[0].(map[string]*ServiceExternalWiki)[vs[1].(string)]
	}).(ServiceExternalWikiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceExternalWikiInput)(nil)).Elem(), &ServiceExternalWiki{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceExternalWikiArrayInput)(nil)).Elem(), ServiceExternalWikiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceExternalWikiMapInput)(nil)).Elem(), ServiceExternalWikiMap{})
	pulumi.RegisterOutputType(ServiceExternalWikiOutput{})
	pulumi.RegisterOutputType(ServiceExternalWikiArrayOutput{})
	pulumi.RegisterOutputType(ServiceExternalWikiMapOutput{})
}
