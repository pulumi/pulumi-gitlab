// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
//
// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewProject(ctx, "new_project", nil)
//			if err != nil {
//				return err
//			}
//			// use project IDs to get additional information, such as the GraphQL ID
//			// for other resources
//			foo, err := gitlab.GetProjectIds(ctx, &gitlab.GetProjectIdsArgs{
//				Project: "gitlab_project.new_project.id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("graphQLId", foo.ProjectGraphqlId)
//			return nil
//		})
//	}
//
// ```
func GetProjectIds(ctx *pulumi.Context, args *GetProjectIdsArgs, opts ...pulumi.InvokeOption) (*GetProjectIdsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectIdsResult
	err := ctx.Invoke("gitlab:index/getProjectIds:getProjectIds", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectIds.
type GetProjectIdsArgs struct {
	// The ID or URL-encoded path of the project.
	Project string `pulumi:"project"`
}

// A collection of values returned by getProjectIds.
type GetProjectIdsResult struct {
	Id string `pulumi:"id"`
	// The ID or URL-encoded path of the project.
	Project string `pulumi:"project"`
	// The full path of the project.
	ProjectFullPath string `pulumi:"projectFullPath"`
	// The GraphQL ID of the project.
	ProjectGraphqlId string `pulumi:"projectGraphqlId"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
}

func GetProjectIdsOutput(ctx *pulumi.Context, args GetProjectIdsOutputArgs, opts ...pulumi.InvokeOption) GetProjectIdsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectIdsResultOutput, error) {
			args := v.(GetProjectIdsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getProjectIds:getProjectIds", args, GetProjectIdsResultOutput{}, options).(GetProjectIdsResultOutput), nil
		}).(GetProjectIdsResultOutput)
}

// A collection of arguments for invoking getProjectIds.
type GetProjectIdsOutputArgs struct {
	// The ID or URL-encoded path of the project.
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetProjectIdsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIdsArgs)(nil)).Elem()
}

// A collection of values returned by getProjectIds.
type GetProjectIdsResultOutput struct{ *pulumi.OutputState }

func (GetProjectIdsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIdsResult)(nil)).Elem()
}

func (o GetProjectIdsResultOutput) ToGetProjectIdsResultOutput() GetProjectIdsResultOutput {
	return o
}

func (o GetProjectIdsResultOutput) ToGetProjectIdsResultOutputWithContext(ctx context.Context) GetProjectIdsResultOutput {
	return o
}

func (o GetProjectIdsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID or URL-encoded path of the project.
func (o GetProjectIdsResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsResult) string { return v.Project }).(pulumi.StringOutput)
}

// The full path of the project.
func (o GetProjectIdsResultOutput) ProjectFullPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsResult) string { return v.ProjectFullPath }).(pulumi.StringOutput)
}

// The GraphQL ID of the project.
func (o GetProjectIdsResultOutput) ProjectGraphqlId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsResult) string { return v.ProjectGraphqlId }).(pulumi.StringOutput)
}

// The ID of the project.
func (o GetProjectIdsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectIdsResultOutput{})
}
