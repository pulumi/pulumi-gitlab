// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectMirrorPublicKey` data source allows the public key of a project mirror to be retrieved by its mirror id and the project it belongs to.
//
// **Note**: Supported on GitLab 17.9 or higher.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/remote_mirrors/#get-a-single-projects-remote-mirror-public-key)
func GetProjectMirrorPublicKey(ctx *pulumi.Context, args *GetProjectMirrorPublicKeyArgs, opts ...pulumi.InvokeOption) (*GetProjectMirrorPublicKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectMirrorPublicKeyResult
	err := ctx.Invoke("gitlab:index/getProjectMirrorPublicKey:getProjectMirrorPublicKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectMirrorPublicKey.
type GetProjectMirrorPublicKeyArgs struct {
	// The id of the remote mirror.
	MirrorId int `pulumi:"mirrorId"`
	// The integer or path with namespace that uniquely identifies the project.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getProjectMirrorPublicKey.
type GetProjectMirrorPublicKeyResult struct {
	Id string `pulumi:"id"`
	// The id of the remote mirror.
	MirrorId int `pulumi:"mirrorId"`
	// The integer or path with namespace that uniquely identifies the project.
	ProjectId string `pulumi:"projectId"`
	// Public key of the remote mirror.
	PublicKey string `pulumi:"publicKey"`
}

func GetProjectMirrorPublicKeyOutput(ctx *pulumi.Context, args GetProjectMirrorPublicKeyOutputArgs, opts ...pulumi.InvokeOption) GetProjectMirrorPublicKeyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectMirrorPublicKeyResultOutput, error) {
			args := v.(GetProjectMirrorPublicKeyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getProjectMirrorPublicKey:getProjectMirrorPublicKey", args, GetProjectMirrorPublicKeyResultOutput{}, options).(GetProjectMirrorPublicKeyResultOutput), nil
		}).(GetProjectMirrorPublicKeyResultOutput)
}

// A collection of arguments for invoking getProjectMirrorPublicKey.
type GetProjectMirrorPublicKeyOutputArgs struct {
	// The id of the remote mirror.
	MirrorId pulumi.IntInput `pulumi:"mirrorId"`
	// The integer or path with namespace that uniquely identifies the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (GetProjectMirrorPublicKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMirrorPublicKeyArgs)(nil)).Elem()
}

// A collection of values returned by getProjectMirrorPublicKey.
type GetProjectMirrorPublicKeyResultOutput struct{ *pulumi.OutputState }

func (GetProjectMirrorPublicKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMirrorPublicKeyResult)(nil)).Elem()
}

func (o GetProjectMirrorPublicKeyResultOutput) ToGetProjectMirrorPublicKeyResultOutput() GetProjectMirrorPublicKeyResultOutput {
	return o
}

func (o GetProjectMirrorPublicKeyResultOutput) ToGetProjectMirrorPublicKeyResultOutputWithContext(ctx context.Context) GetProjectMirrorPublicKeyResultOutput {
	return o
}

func (o GetProjectMirrorPublicKeyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMirrorPublicKeyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the remote mirror.
func (o GetProjectMirrorPublicKeyResultOutput) MirrorId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMirrorPublicKeyResult) int { return v.MirrorId }).(pulumi.IntOutput)
}

// The integer or path with namespace that uniquely identifies the project.
func (o GetProjectMirrorPublicKeyResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMirrorPublicKeyResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Public key of the remote mirror.
func (o GetProjectMirrorPublicKeyResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMirrorPublicKeyResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectMirrorPublicKeyResultOutput{})
}
