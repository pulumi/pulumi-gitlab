// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getGroupProvisionedUsers` data source allows details of the provisioned users of a given group.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
func GetGroupProvisionedUsers(ctx *pulumi.Context, args *GetGroupProvisionedUsersArgs, opts ...pulumi.InvokeOption) (*GetGroupProvisionedUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupProvisionedUsersResult
	err := ctx.Invoke("gitlab:index/getGroupProvisionedUsers:getGroupProvisionedUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupProvisionedUsers.
type GetGroupProvisionedUsersArgs struct {
	// Return only active provisioned users.
	Active *bool `pulumi:"active"`
	// Return only blocked provisioned users.
	Blocked *bool `pulumi:"blocked"`
	// Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
	CreatedAfter *string `pulumi:"createdAfter"`
	// Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
	CreatedBefore *string `pulumi:"createdBefore"`
	// The ID or URL-encoded path of the group.
	Id string `pulumi:"id"`
	// The list of provisioned users.
	ProvisionedUsers []GetGroupProvisionedUsersProvisionedUser `pulumi:"provisionedUsers"`
	// The search query to filter the provisioned users.
	Search *string `pulumi:"search"`
	// The username of the provisioned user.
	Username *string `pulumi:"username"`
}

// A collection of values returned by getGroupProvisionedUsers.
type GetGroupProvisionedUsersResult struct {
	// Return only active provisioned users.
	Active *bool `pulumi:"active"`
	// Return only blocked provisioned users.
	Blocked *bool `pulumi:"blocked"`
	// Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
	CreatedAfter *string `pulumi:"createdAfter"`
	// Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
	CreatedBefore *string `pulumi:"createdBefore"`
	// The ID or URL-encoded path of the group.
	Id string `pulumi:"id"`
	// The list of provisioned users.
	ProvisionedUsers []GetGroupProvisionedUsersProvisionedUser `pulumi:"provisionedUsers"`
	// The search query to filter the provisioned users.
	Search *string `pulumi:"search"`
	// The username of the provisioned user.
	Username *string `pulumi:"username"`
}

func GetGroupProvisionedUsersOutput(ctx *pulumi.Context, args GetGroupProvisionedUsersOutputArgs, opts ...pulumi.InvokeOption) GetGroupProvisionedUsersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGroupProvisionedUsersResultOutput, error) {
			args := v.(GetGroupProvisionedUsersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getGroupProvisionedUsers:getGroupProvisionedUsers", args, GetGroupProvisionedUsersResultOutput{}, options).(GetGroupProvisionedUsersResultOutput), nil
		}).(GetGroupProvisionedUsersResultOutput)
}

// A collection of arguments for invoking getGroupProvisionedUsers.
type GetGroupProvisionedUsersOutputArgs struct {
	// Return only active provisioned users.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// Return only blocked provisioned users.
	Blocked pulumi.BoolPtrInput `pulumi:"blocked"`
	// Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
	CreatedAfter pulumi.StringPtrInput `pulumi:"createdAfter"`
	// Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
	CreatedBefore pulumi.StringPtrInput `pulumi:"createdBefore"`
	// The ID or URL-encoded path of the group.
	Id pulumi.StringInput `pulumi:"id"`
	// The list of provisioned users.
	ProvisionedUsers GetGroupProvisionedUsersProvisionedUserArrayInput `pulumi:"provisionedUsers"`
	// The search query to filter the provisioned users.
	Search pulumi.StringPtrInput `pulumi:"search"`
	// The username of the provisioned user.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetGroupProvisionedUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupProvisionedUsersArgs)(nil)).Elem()
}

// A collection of values returned by getGroupProvisionedUsers.
type GetGroupProvisionedUsersResultOutput struct{ *pulumi.OutputState }

func (GetGroupProvisionedUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupProvisionedUsersResult)(nil)).Elem()
}

func (o GetGroupProvisionedUsersResultOutput) ToGetGroupProvisionedUsersResultOutput() GetGroupProvisionedUsersResultOutput {
	return o
}

func (o GetGroupProvisionedUsersResultOutput) ToGetGroupProvisionedUsersResultOutputWithContext(ctx context.Context) GetGroupProvisionedUsersResultOutput {
	return o
}

// Return only active provisioned users.
func (o GetGroupProvisionedUsersResultOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// Return only blocked provisioned users.
func (o GetGroupProvisionedUsersResultOutput) Blocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) *bool { return v.Blocked }).(pulumi.BoolPtrOutput)
}

// Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
func (o GetGroupProvisionedUsersResultOutput) CreatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) *string { return v.CreatedAfter }).(pulumi.StringPtrOutput)
}

// Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
func (o GetGroupProvisionedUsersResultOutput) CreatedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) *string { return v.CreatedBefore }).(pulumi.StringPtrOutput)
}

// The ID or URL-encoded path of the group.
func (o GetGroupProvisionedUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of provisioned users.
func (o GetGroupProvisionedUsersResultOutput) ProvisionedUsers() GetGroupProvisionedUsersProvisionedUserArrayOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) []GetGroupProvisionedUsersProvisionedUser {
		return v.ProvisionedUsers
	}).(GetGroupProvisionedUsersProvisionedUserArrayOutput)
}

// The search query to filter the provisioned users.
func (o GetGroupProvisionedUsersResultOutput) Search() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) *string { return v.Search }).(pulumi.StringPtrOutput)
}

// The username of the provisioned user.
func (o GetGroupProvisionedUsersResultOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupProvisionedUsersResult) *string { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupProvisionedUsersResultOutput{})
}
