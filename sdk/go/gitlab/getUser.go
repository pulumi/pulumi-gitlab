// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `User` data source allows details of a user to be retrieved by either the user ID, username or email address.
//
// > Some attributes might not be returned depending on if you're an admin or not.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	var rv LookupUserResult
	err := ctx.Invoke("gitlab:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	Email    *string `pulumi:"email"`
	UserId   *int    `pulumi:"userId"`
	Username *string `pulumi:"username"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	AvatarUrl        string `pulumi:"avatarUrl"`
	Bio              string `pulumi:"bio"`
	CanCreateGroup   bool   `pulumi:"canCreateGroup"`
	CanCreateProject bool   `pulumi:"canCreateProject"`
	ColorSchemeId    int    `pulumi:"colorSchemeId"`
	CreatedAt        string `pulumi:"createdAt"`
	CurrentSignInAt  string `pulumi:"currentSignInAt"`
	Email            string `pulumi:"email"`
	ExternUid        string `pulumi:"externUid"`
	External         bool   `pulumi:"external"`
	// The provider-assigned unique ID for this managed resource.
	Id               string `pulumi:"id"`
	IsAdmin          bool   `pulumi:"isAdmin"`
	LastSignInAt     string `pulumi:"lastSignInAt"`
	Linkedin         string `pulumi:"linkedin"`
	Location         string `pulumi:"location"`
	Name             string `pulumi:"name"`
	Note             string `pulumi:"note"`
	Organization     string `pulumi:"organization"`
	ProjectsLimit    int    `pulumi:"projectsLimit"`
	Skype            string `pulumi:"skype"`
	State            string `pulumi:"state"`
	ThemeId          int    `pulumi:"themeId"`
	Twitter          string `pulumi:"twitter"`
	TwoFactorEnabled bool   `pulumi:"twoFactorEnabled"`
	UserId           int    `pulumi:"userId"`
	UserProvider     string `pulumi:"userProvider"`
	Username         string `pulumi:"username"`
	WebsiteUrl       string `pulumi:"websiteUrl"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			return *r, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	Email    pulumi.StringPtrInput `pulumi:"email"`
	UserId   pulumi.IntPtrInput    `pulumi:"userId"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Bio() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Bio }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) CanCreateGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.CanCreateGroup }).(pulumi.BoolOutput)
}

func (o LookupUserResultOutput) CanCreateProject() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.CanCreateProject }).(pulumi.BoolOutput)
}

func (o LookupUserResultOutput) ColorSchemeId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.ColorSchemeId }).(pulumi.IntOutput)
}

func (o LookupUserResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) CurrentSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.CurrentSignInAt }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ExternUid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ExternUid }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.External }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

func (o LookupUserResultOutput) LastSignInAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastSignInAt }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Linkedin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Linkedin }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Note }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Organization }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ProjectsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.ProjectsLimit }).(pulumi.IntOutput)
}

func (o LookupUserResultOutput) Skype() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Skype }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ThemeId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.ThemeId }).(pulumi.IntOutput)
}

func (o LookupUserResultOutput) Twitter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Twitter }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) TwoFactorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.TwoFactorEnabled }).(pulumi.BoolOutput)
}

func (o LookupUserResultOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserResult) int { return v.UserId }).(pulumi.IntOutput)
}

func (o LookupUserResultOutput) UserProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserProvider }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
