// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectEnvironments` data source retrieves information about all environments of the given project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisProject, err := gitlab.NewProject(ctx, "this", &gitlab.ProjectArgs{
//				Name:                 pulumi.String("example"),
//				InitializeWithReadme: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_ = gitlab.GetProjectEnvironmentsOutput(ctx, gitlab.GetProjectEnvironmentsOutputArgs{
//				Project: thisProject.PathWithNamespace,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetProjectEnvironments(ctx *pulumi.Context, args *GetProjectEnvironmentsArgs, opts ...pulumi.InvokeOption) (*GetProjectEnvironmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectEnvironmentsResult
	err := ctx.Invoke("gitlab:index/getProjectEnvironments:getProjectEnvironments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectEnvironments.
type GetProjectEnvironmentsArgs struct {
	// Return the environment with this name. Mutually exclusive with search.
	Name *string `pulumi:"name"`
	// The ID or full path of the project.
	Project string `pulumi:"project"`
	// Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
	Search *string `pulumi:"search"`
	// List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
	States *string `pulumi:"states"`
}

// A collection of values returned by getProjectEnvironments.
type GetProjectEnvironmentsResult struct {
	// The list of environments.
	Environments []GetProjectEnvironmentsEnvironment `pulumi:"environments"`
	Id           string                              `pulumi:"id"`
	// Return the environment with this name. Mutually exclusive with search.
	Name *string `pulumi:"name"`
	// The ID or full path of the project.
	Project string `pulumi:"project"`
	// Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
	Search *string `pulumi:"search"`
	// List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
	States *string `pulumi:"states"`
}

func GetProjectEnvironmentsOutput(ctx *pulumi.Context, args GetProjectEnvironmentsOutputArgs, opts ...pulumi.InvokeOption) GetProjectEnvironmentsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectEnvironmentsResultOutput, error) {
			args := v.(GetProjectEnvironmentsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getProjectEnvironments:getProjectEnvironments", args, GetProjectEnvironmentsResultOutput{}, options).(GetProjectEnvironmentsResultOutput), nil
		}).(GetProjectEnvironmentsResultOutput)
}

// A collection of arguments for invoking getProjectEnvironments.
type GetProjectEnvironmentsOutputArgs struct {
	// Return the environment with this name. Mutually exclusive with search.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID or full path of the project.
	Project pulumi.StringInput `pulumi:"project"`
	// Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
	Search pulumi.StringPtrInput `pulumi:"search"`
	// List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
	States pulumi.StringPtrInput `pulumi:"states"`
}

func (GetProjectEnvironmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentsArgs)(nil)).Elem()
}

// A collection of values returned by getProjectEnvironments.
type GetProjectEnvironmentsResultOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentsResult)(nil)).Elem()
}

func (o GetProjectEnvironmentsResultOutput) ToGetProjectEnvironmentsResultOutput() GetProjectEnvironmentsResultOutput {
	return o
}

func (o GetProjectEnvironmentsResultOutput) ToGetProjectEnvironmentsResultOutputWithContext(ctx context.Context) GetProjectEnvironmentsResultOutput {
	return o
}

// The list of environments.
func (o GetProjectEnvironmentsResultOutput) Environments() GetProjectEnvironmentsEnvironmentArrayOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsResult) []GetProjectEnvironmentsEnvironment { return v.Environments }).(GetProjectEnvironmentsEnvironmentArrayOutput)
}

func (o GetProjectEnvironmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Return the environment with this name. Mutually exclusive with search.
func (o GetProjectEnvironmentsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID or full path of the project.
func (o GetProjectEnvironmentsResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsResult) string { return v.Project }).(pulumi.StringOutput)
}

// Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
func (o GetProjectEnvironmentsResultOutput) Search() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsResult) *string { return v.Search }).(pulumi.StringPtrOutput)
}

// List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
func (o GetProjectEnvironmentsResultOutput) States() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectEnvironmentsResult) *string { return v.States }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectEnvironmentsResultOutput{})
}
