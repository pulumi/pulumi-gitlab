// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `IntegrationJira` resource allows to manage the lifecycle of a project integration with Jira.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/services.html#jira)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v6/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesomeProject", &gitlab.ProjectArgs{
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewIntegrationJira(ctx, "jira", &gitlab.IntegrationJiraArgs{
//				Project:  awesomeProject.ID(),
//				Url:      pulumi.String("https://jira.example.com"),
//				Username: pulumi.String("user"),
//				Password: pulumi.String("mypass"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a gitlab_integration_jira state using the project ID, e.g.
//
// ```sh
//
//	$ pulumi import gitlab:index/integrationJira:IntegrationJira jira 1
//
// ```
type IntegrationJira struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
	ApiUrl pulumi.StringOutput `pulumi:"apiUrl"`
	// Enable comments inside Jira issues on each GitLab event (commit / merge request)
	CommentOnEventEnabled pulumi.BoolOutput `pulumi:"commentOnEventEnabled"`
	// Enable notifications for commit events
	CommitEvents pulumi.BoolOutput `pulumi:"commitEvents"`
	// Create time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Enable notifications for issues events.
	IssuesEvents pulumi.BoolOutput `pulumi:"issuesEvents"`
	// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2. *Note**: importing this field is only supported since GitLab 15.2.
	JiraIssueTransitionId pulumi.StringPtrOutput `pulumi:"jiraIssueTransitionId"`
	// Enable notifications for job events.
	JobEvents pulumi.BoolOutput `pulumi:"jobEvents"`
	// Enable notifications for merge request events
	MergeRequestsEvents pulumi.BoolOutput `pulumi:"mergeRequestsEvents"`
	// Enable notifications for note events.
	NoteEvents pulumi.BoolOutput `pulumi:"noteEvents"`
	// The password of the user created to be used with GitLab/JIRA.
	Password pulumi.StringOutput `pulumi:"password"`
	// Enable notifications for pipeline events.
	PipelineEvents pulumi.BoolOutput `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// Enable notifications for push events.
	PushEvents pulumi.BoolOutput `pulumi:"pushEvents"`
	// Enable notifications for tagPush events.
	TagPushEvents pulumi.BoolOutput `pulumi:"tagPushEvents"`
	// Title.
	Title pulumi.StringOutput `pulumi:"title"`
	// Update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
	Url pulumi.StringOutput `pulumi:"url"`
	// The username of the user created to be used with GitLab/JIRA.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewIntegrationJira registers a new resource with the given unique name, arguments, and options.
func NewIntegrationJira(ctx *pulumi.Context,
	name string, args *IntegrationJiraArgs, opts ...pulumi.ResourceOption) (*IntegrationJira, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource IntegrationJira
	err := ctx.RegisterResource("gitlab:index/integrationJira:IntegrationJira", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationJira gets an existing IntegrationJira resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationJira(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationJiraState, opts ...pulumi.ResourceOption) (*IntegrationJira, error) {
	var resource IntegrationJira
	err := ctx.ReadResource("gitlab:index/integrationJira:IntegrationJira", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationJira resources.
type integrationJiraState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
	ApiUrl *string `pulumi:"apiUrl"`
	// Enable comments inside Jira issues on each GitLab event (commit / merge request)
	CommentOnEventEnabled *bool `pulumi:"commentOnEventEnabled"`
	// Enable notifications for commit events
	CommitEvents *bool `pulumi:"commitEvents"`
	// Create time.
	CreatedAt *string `pulumi:"createdAt"`
	// Enable notifications for issues events.
	IssuesEvents *bool `pulumi:"issuesEvents"`
	// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2. *Note**: importing this field is only supported since GitLab 15.2.
	JiraIssueTransitionId *string `pulumi:"jiraIssueTransitionId"`
	// Enable notifications for job events.
	JobEvents *bool `pulumi:"jobEvents"`
	// Enable notifications for merge request events
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// Enable notifications for note events.
	NoteEvents *bool `pulumi:"noteEvents"`
	// The password of the user created to be used with GitLab/JIRA.
	Password *string `pulumi:"password"`
	// Enable notifications for pipeline events.
	PipelineEvents *bool `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
	ProjectKey *string `pulumi:"projectKey"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Enable notifications for tagPush events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Title.
	Title *string `pulumi:"title"`
	// Update time.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
	Url *string `pulumi:"url"`
	// The username of the user created to be used with GitLab/JIRA.
	Username *string `pulumi:"username"`
}

type IntegrationJiraState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
	ApiUrl pulumi.StringPtrInput
	// Enable comments inside Jira issues on each GitLab event (commit / merge request)
	CommentOnEventEnabled pulumi.BoolPtrInput
	// Enable notifications for commit events
	CommitEvents pulumi.BoolPtrInput
	// Create time.
	CreatedAt pulumi.StringPtrInput
	// Enable notifications for issues events.
	IssuesEvents pulumi.BoolPtrInput
	// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2. *Note**: importing this field is only supported since GitLab 15.2.
	JiraIssueTransitionId pulumi.StringPtrInput
	// Enable notifications for job events.
	JobEvents pulumi.BoolPtrInput
	// Enable notifications for merge request events
	MergeRequestsEvents pulumi.BoolPtrInput
	// Enable notifications for note events.
	NoteEvents pulumi.BoolPtrInput
	// The password of the user created to be used with GitLab/JIRA.
	Password pulumi.StringPtrInput
	// Enable notifications for pipeline events.
	PipelineEvents pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
	ProjectKey pulumi.StringPtrInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// Enable notifications for tagPush events.
	TagPushEvents pulumi.BoolPtrInput
	// Title.
	Title pulumi.StringPtrInput
	// Update time.
	UpdatedAt pulumi.StringPtrInput
	// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
	Url pulumi.StringPtrInput
	// The username of the user created to be used with GitLab/JIRA.
	Username pulumi.StringPtrInput
}

func (IntegrationJiraState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationJiraState)(nil)).Elem()
}

type integrationJiraArgs struct {
	// The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
	ApiUrl *string `pulumi:"apiUrl"`
	// Enable comments inside Jira issues on each GitLab event (commit / merge request)
	CommentOnEventEnabled *bool `pulumi:"commentOnEventEnabled"`
	// Enable notifications for commit events
	CommitEvents *bool `pulumi:"commitEvents"`
	// Enable notifications for issues events.
	IssuesEvents *bool `pulumi:"issuesEvents"`
	// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2. *Note**: importing this field is only supported since GitLab 15.2.
	JiraIssueTransitionId *string `pulumi:"jiraIssueTransitionId"`
	// Enable notifications for job events.
	JobEvents *bool `pulumi:"jobEvents"`
	// Enable notifications for merge request events
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// Enable notifications for note events.
	NoteEvents *bool `pulumi:"noteEvents"`
	// The password of the user created to be used with GitLab/JIRA.
	Password string `pulumi:"password"`
	// Enable notifications for pipeline events.
	PipelineEvents *bool `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
	ProjectKey *string `pulumi:"projectKey"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Enable notifications for tagPush events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
	Url string `pulumi:"url"`
	// The username of the user created to be used with GitLab/JIRA.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a IntegrationJira resource.
type IntegrationJiraArgs struct {
	// The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
	ApiUrl pulumi.StringPtrInput
	// Enable comments inside Jira issues on each GitLab event (commit / merge request)
	CommentOnEventEnabled pulumi.BoolPtrInput
	// Enable notifications for commit events
	CommitEvents pulumi.BoolPtrInput
	// Enable notifications for issues events.
	IssuesEvents pulumi.BoolPtrInput
	// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2. *Note**: importing this field is only supported since GitLab 15.2.
	JiraIssueTransitionId pulumi.StringPtrInput
	// Enable notifications for job events.
	JobEvents pulumi.BoolPtrInput
	// Enable notifications for merge request events
	MergeRequestsEvents pulumi.BoolPtrInput
	// Enable notifications for note events.
	NoteEvents pulumi.BoolPtrInput
	// The password of the user created to be used with GitLab/JIRA.
	Password pulumi.StringInput
	// Enable notifications for pipeline events.
	PipelineEvents pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
	// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
	ProjectKey pulumi.StringPtrInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// Enable notifications for tagPush events.
	TagPushEvents pulumi.BoolPtrInput
	// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
	Url pulumi.StringInput
	// The username of the user created to be used with GitLab/JIRA.
	Username pulumi.StringInput
}

func (IntegrationJiraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationJiraArgs)(nil)).Elem()
}

type IntegrationJiraInput interface {
	pulumi.Input

	ToIntegrationJiraOutput() IntegrationJiraOutput
	ToIntegrationJiraOutputWithContext(ctx context.Context) IntegrationJiraOutput
}

func (*IntegrationJira) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationJira)(nil)).Elem()
}

func (i *IntegrationJira) ToIntegrationJiraOutput() IntegrationJiraOutput {
	return i.ToIntegrationJiraOutputWithContext(context.Background())
}

func (i *IntegrationJira) ToIntegrationJiraOutputWithContext(ctx context.Context) IntegrationJiraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationJiraOutput)
}

// IntegrationJiraArrayInput is an input type that accepts IntegrationJiraArray and IntegrationJiraArrayOutput values.
// You can construct a concrete instance of `IntegrationJiraArrayInput` via:
//
//	IntegrationJiraArray{ IntegrationJiraArgs{...} }
type IntegrationJiraArrayInput interface {
	pulumi.Input

	ToIntegrationJiraArrayOutput() IntegrationJiraArrayOutput
	ToIntegrationJiraArrayOutputWithContext(context.Context) IntegrationJiraArrayOutput
}

type IntegrationJiraArray []IntegrationJiraInput

func (IntegrationJiraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationJira)(nil)).Elem()
}

func (i IntegrationJiraArray) ToIntegrationJiraArrayOutput() IntegrationJiraArrayOutput {
	return i.ToIntegrationJiraArrayOutputWithContext(context.Background())
}

func (i IntegrationJiraArray) ToIntegrationJiraArrayOutputWithContext(ctx context.Context) IntegrationJiraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationJiraArrayOutput)
}

// IntegrationJiraMapInput is an input type that accepts IntegrationJiraMap and IntegrationJiraMapOutput values.
// You can construct a concrete instance of `IntegrationJiraMapInput` via:
//
//	IntegrationJiraMap{ "key": IntegrationJiraArgs{...} }
type IntegrationJiraMapInput interface {
	pulumi.Input

	ToIntegrationJiraMapOutput() IntegrationJiraMapOutput
	ToIntegrationJiraMapOutputWithContext(context.Context) IntegrationJiraMapOutput
}

type IntegrationJiraMap map[string]IntegrationJiraInput

func (IntegrationJiraMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationJira)(nil)).Elem()
}

func (i IntegrationJiraMap) ToIntegrationJiraMapOutput() IntegrationJiraMapOutput {
	return i.ToIntegrationJiraMapOutputWithContext(context.Background())
}

func (i IntegrationJiraMap) ToIntegrationJiraMapOutputWithContext(ctx context.Context) IntegrationJiraMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationJiraMapOutput)
}

type IntegrationJiraOutput struct{ *pulumi.OutputState }

func (IntegrationJiraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationJira)(nil)).Elem()
}

func (o IntegrationJiraOutput) ToIntegrationJiraOutput() IntegrationJiraOutput {
	return o
}

func (o IntegrationJiraOutput) ToIntegrationJiraOutputWithContext(ctx context.Context) IntegrationJiraOutput {
	return o
}

// Whether the integration is active.
func (o IntegrationJiraOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
func (o IntegrationJiraOutput) ApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.ApiUrl }).(pulumi.StringOutput)
}

// Enable comments inside Jira issues on each GitLab event (commit / merge request)
func (o IntegrationJiraOutput) CommentOnEventEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.CommentOnEventEnabled }).(pulumi.BoolOutput)
}

// Enable notifications for commit events
func (o IntegrationJiraOutput) CommitEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.CommitEvents }).(pulumi.BoolOutput)
}

// Create time.
func (o IntegrationJiraOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Enable notifications for issues events.
func (o IntegrationJiraOutput) IssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.IssuesEvents }).(pulumi.BoolOutput)
}

// The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2. *Note**: importing this field is only supported since GitLab 15.2.
func (o IntegrationJiraOutput) JiraIssueTransitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringPtrOutput { return v.JiraIssueTransitionId }).(pulumi.StringPtrOutput)
}

// Enable notifications for job events.
func (o IntegrationJiraOutput) JobEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.JobEvents }).(pulumi.BoolOutput)
}

// Enable notifications for merge request events
func (o IntegrationJiraOutput) MergeRequestsEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.MergeRequestsEvents }).(pulumi.BoolOutput)
}

// Enable notifications for note events.
func (o IntegrationJiraOutput) NoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.NoteEvents }).(pulumi.BoolOutput)
}

// The password of the user created to be used with GitLab/JIRA.
func (o IntegrationJiraOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Enable notifications for pipeline events.
func (o IntegrationJiraOutput) PipelineEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.PipelineEvents }).(pulumi.BoolOutput)
}

// ID of the project you want to activate integration on.
func (o IntegrationJiraOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The short identifier for your JIRA project, all uppercase, e.g., PROJ.
func (o IntegrationJiraOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringPtrOutput { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

// Enable notifications for push events.
func (o IntegrationJiraOutput) PushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.PushEvents }).(pulumi.BoolOutput)
}

// Enable notifications for tagPush events.
func (o IntegrationJiraOutput) TagPushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.BoolOutput { return v.TagPushEvents }).(pulumi.BoolOutput)
}

// Title.
func (o IntegrationJiraOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Update time.
func (o IntegrationJiraOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
func (o IntegrationJiraOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The username of the user created to be used with GitLab/JIRA.
func (o IntegrationJiraOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJira) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type IntegrationJiraArrayOutput struct{ *pulumi.OutputState }

func (IntegrationJiraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationJira)(nil)).Elem()
}

func (o IntegrationJiraArrayOutput) ToIntegrationJiraArrayOutput() IntegrationJiraArrayOutput {
	return o
}

func (o IntegrationJiraArrayOutput) ToIntegrationJiraArrayOutputWithContext(ctx context.Context) IntegrationJiraArrayOutput {
	return o
}

func (o IntegrationJiraArrayOutput) Index(i pulumi.IntInput) IntegrationJiraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationJira {
		return vs[0].([]*IntegrationJira)[vs[1].(int)]
	}).(IntegrationJiraOutput)
}

type IntegrationJiraMapOutput struct{ *pulumi.OutputState }

func (IntegrationJiraMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationJira)(nil)).Elem()
}

func (o IntegrationJiraMapOutput) ToIntegrationJiraMapOutput() IntegrationJiraMapOutput {
	return o
}

func (o IntegrationJiraMapOutput) ToIntegrationJiraMapOutputWithContext(ctx context.Context) IntegrationJiraMapOutput {
	return o
}

func (o IntegrationJiraMapOutput) MapIndex(k pulumi.StringInput) IntegrationJiraOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationJira {
		return vs[0].(map[string]*IntegrationJira)[vs[1].(string)]
	}).(IntegrationJiraOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationJiraInput)(nil)).Elem(), &IntegrationJira{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationJiraArrayInput)(nil)).Elem(), IntegrationJiraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationJiraMapInput)(nil)).Elem(), IntegrationJiraMap{})
	pulumi.RegisterOutputType(IntegrationJiraOutput{})
	pulumi.RegisterOutputType(IntegrationJiraArrayOutput{})
	pulumi.RegisterOutputType(IntegrationJiraMapOutput{})
}
