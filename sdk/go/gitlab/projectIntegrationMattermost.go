// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationMattermost` resource manages the lifecycle of a project integration with Mattermost.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#mattermost-notifications)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationMattermost(ctx, "mattermost", &gitlab.ProjectIntegrationMattermostArgs{
//				Project:     awesomeProject.ID(),
//				Webhook:     pulumi.String("https://webhook.com"),
//				Username:    pulumi.String("myuser"),
//				PushEvents:  pulumi.Bool(true),
//				PushChannel: pulumi.String("push_chan"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_mattermost`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_mattermost.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// You can import a gitlab_project_integration_mattermost.mattermost state using the project ID, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationMattermost:ProjectIntegrationMattermost mattermost 1
// ```
type ProjectIntegrationMattermost struct {
	pulumi.CustomResourceState

	// Branches to send notifications for. Valid options are "all", "default", "protected", and "default*and*protected".
	BranchesToBeNotified pulumi.StringOutput `pulumi:"branchesToBeNotified"`
	// The name of the channel to receive confidential issue events notifications.
	ConfidentialIssueChannel pulumi.StringPtrOutput `pulumi:"confidentialIssueChannel"`
	// Enable notifications for confidential issues events.
	ConfidentialIssuesEvents pulumi.BoolOutput `pulumi:"confidentialIssuesEvents"`
	// The name of the channel to receive confidential note events notifications.
	ConfidentialNoteChannel pulumi.StringPtrOutput `pulumi:"confidentialNoteChannel"`
	// Enable notifications for confidential note events.
	ConfidentialNoteEvents pulumi.BoolOutput `pulumi:"confidentialNoteEvents"`
	// The name of the channel to receive issue events notifications.
	IssueChannel pulumi.StringPtrOutput `pulumi:"issueChannel"`
	// Enable notifications for issues events.
	IssuesEvents pulumi.BoolOutput `pulumi:"issuesEvents"`
	// The name of the channel to receive merge request events notifications.
	MergeRequestChannel pulumi.StringPtrOutput `pulumi:"mergeRequestChannel"`
	// Enable notifications for merge requests events.
	MergeRequestsEvents pulumi.BoolOutput `pulumi:"mergeRequestsEvents"`
	// The name of the channel to receive note events notifications.
	NoteChannel pulumi.StringPtrOutput `pulumi:"noteChannel"`
	// Enable notifications for note events.
	NoteEvents pulumi.BoolOutput `pulumi:"noteEvents"`
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines pulumi.BoolOutput `pulumi:"notifyOnlyBrokenPipelines"`
	// The name of the channel to receive pipeline events notifications.
	PipelineChannel pulumi.StringPtrOutput `pulumi:"pipelineChannel"`
	// Enable notifications for pipeline events.
	PipelineEvents pulumi.BoolOutput `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the channel to receive push events notifications.
	PushChannel pulumi.StringPtrOutput `pulumi:"pushChannel"`
	// Enable notifications for push events.
	PushEvents pulumi.BoolOutput `pulumi:"pushEvents"`
	// The name of the channel to receive tag push events notifications.
	TagPushChannel pulumi.StringPtrOutput `pulumi:"tagPushChannel"`
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolOutput `pulumi:"tagPushEvents"`
	// Username to use.
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// Webhook URL (Example, https://mattermost.yourdomain.com/hooks/...). This value cannot be imported.
	Webhook pulumi.StringOutput `pulumi:"webhook"`
	// The name of the channel to receive wiki page events notifications.
	WikiPageChannel pulumi.StringPtrOutput `pulumi:"wikiPageChannel"`
	// Enable notifications for wiki page events.
	WikiPageEvents pulumi.BoolOutput `pulumi:"wikiPageEvents"`
}

// NewProjectIntegrationMattermost registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationMattermost(ctx *pulumi.Context,
	name string, args *ProjectIntegrationMattermostArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationMattermost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Webhook == nil {
		return nil, errors.New("invalid value for required argument 'Webhook'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationMattermost
	err := ctx.RegisterResource("gitlab:index/projectIntegrationMattermost:ProjectIntegrationMattermost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationMattermost gets an existing ProjectIntegrationMattermost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationMattermost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationMattermostState, opts ...pulumi.ResourceOption) (*ProjectIntegrationMattermost, error) {
	var resource ProjectIntegrationMattermost
	err := ctx.ReadResource("gitlab:index/projectIntegrationMattermost:ProjectIntegrationMattermost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationMattermost resources.
type projectIntegrationMattermostState struct {
	// Branches to send notifications for. Valid options are "all", "default", "protected", and "default*and*protected".
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// The name of the channel to receive confidential issue events notifications.
	ConfidentialIssueChannel *string `pulumi:"confidentialIssueChannel"`
	// Enable notifications for confidential issues events.
	ConfidentialIssuesEvents *bool `pulumi:"confidentialIssuesEvents"`
	// The name of the channel to receive confidential note events notifications.
	ConfidentialNoteChannel *string `pulumi:"confidentialNoteChannel"`
	// Enable notifications for confidential note events.
	ConfidentialNoteEvents *bool `pulumi:"confidentialNoteEvents"`
	// The name of the channel to receive issue events notifications.
	IssueChannel *string `pulumi:"issueChannel"`
	// Enable notifications for issues events.
	IssuesEvents *bool `pulumi:"issuesEvents"`
	// The name of the channel to receive merge request events notifications.
	MergeRequestChannel *string `pulumi:"mergeRequestChannel"`
	// Enable notifications for merge requests events.
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// The name of the channel to receive note events notifications.
	NoteChannel *string `pulumi:"noteChannel"`
	// Enable notifications for note events.
	NoteEvents *bool `pulumi:"noteEvents"`
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `pulumi:"notifyOnlyBrokenPipelines"`
	// The name of the channel to receive pipeline events notifications.
	PipelineChannel *string `pulumi:"pipelineChannel"`
	// Enable notifications for pipeline events.
	PipelineEvents *bool `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The name of the channel to receive push events notifications.
	PushChannel *string `pulumi:"pushChannel"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// The name of the channel to receive tag push events notifications.
	TagPushChannel *string `pulumi:"tagPushChannel"`
	// Enable notifications for tag push events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Username to use.
	Username *string `pulumi:"username"`
	// Webhook URL (Example, https://mattermost.yourdomain.com/hooks/...). This value cannot be imported.
	Webhook *string `pulumi:"webhook"`
	// The name of the channel to receive wiki page events notifications.
	WikiPageChannel *string `pulumi:"wikiPageChannel"`
	// Enable notifications for wiki page events.
	WikiPageEvents *bool `pulumi:"wikiPageEvents"`
}

type ProjectIntegrationMattermostState struct {
	// Branches to send notifications for. Valid options are "all", "default", "protected", and "default*and*protected".
	BranchesToBeNotified pulumi.StringPtrInput
	// The name of the channel to receive confidential issue events notifications.
	ConfidentialIssueChannel pulumi.StringPtrInput
	// Enable notifications for confidential issues events.
	ConfidentialIssuesEvents pulumi.BoolPtrInput
	// The name of the channel to receive confidential note events notifications.
	ConfidentialNoteChannel pulumi.StringPtrInput
	// Enable notifications for confidential note events.
	ConfidentialNoteEvents pulumi.BoolPtrInput
	// The name of the channel to receive issue events notifications.
	IssueChannel pulumi.StringPtrInput
	// Enable notifications for issues events.
	IssuesEvents pulumi.BoolPtrInput
	// The name of the channel to receive merge request events notifications.
	MergeRequestChannel pulumi.StringPtrInput
	// Enable notifications for merge requests events.
	MergeRequestsEvents pulumi.BoolPtrInput
	// The name of the channel to receive note events notifications.
	NoteChannel pulumi.StringPtrInput
	// Enable notifications for note events.
	NoteEvents pulumi.BoolPtrInput
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines pulumi.BoolPtrInput
	// The name of the channel to receive pipeline events notifications.
	PipelineChannel pulumi.StringPtrInput
	// Enable notifications for pipeline events.
	PipelineEvents pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The name of the channel to receive push events notifications.
	PushChannel pulumi.StringPtrInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// The name of the channel to receive tag push events notifications.
	TagPushChannel pulumi.StringPtrInput
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolPtrInput
	// Username to use.
	Username pulumi.StringPtrInput
	// Webhook URL (Example, https://mattermost.yourdomain.com/hooks/...). This value cannot be imported.
	Webhook pulumi.StringPtrInput
	// The name of the channel to receive wiki page events notifications.
	WikiPageChannel pulumi.StringPtrInput
	// Enable notifications for wiki page events.
	WikiPageEvents pulumi.BoolPtrInput
}

func (ProjectIntegrationMattermostState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationMattermostState)(nil)).Elem()
}

type projectIntegrationMattermostArgs struct {
	// Branches to send notifications for. Valid options are "all", "default", "protected", and "default*and*protected".
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// The name of the channel to receive confidential issue events notifications.
	ConfidentialIssueChannel *string `pulumi:"confidentialIssueChannel"`
	// Enable notifications for confidential issues events.
	ConfidentialIssuesEvents *bool `pulumi:"confidentialIssuesEvents"`
	// The name of the channel to receive confidential note events notifications.
	ConfidentialNoteChannel *string `pulumi:"confidentialNoteChannel"`
	// Enable notifications for confidential note events.
	ConfidentialNoteEvents *bool `pulumi:"confidentialNoteEvents"`
	// The name of the channel to receive issue events notifications.
	IssueChannel *string `pulumi:"issueChannel"`
	// Enable notifications for issues events.
	IssuesEvents *bool `pulumi:"issuesEvents"`
	// The name of the channel to receive merge request events notifications.
	MergeRequestChannel *string `pulumi:"mergeRequestChannel"`
	// Enable notifications for merge requests events.
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// The name of the channel to receive note events notifications.
	NoteChannel *string `pulumi:"noteChannel"`
	// Enable notifications for note events.
	NoteEvents *bool `pulumi:"noteEvents"`
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `pulumi:"notifyOnlyBrokenPipelines"`
	// The name of the channel to receive pipeline events notifications.
	PipelineChannel *string `pulumi:"pipelineChannel"`
	// Enable notifications for pipeline events.
	PipelineEvents *bool `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// The name of the channel to receive push events notifications.
	PushChannel *string `pulumi:"pushChannel"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// The name of the channel to receive tag push events notifications.
	TagPushChannel *string `pulumi:"tagPushChannel"`
	// Enable notifications for tag push events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Username to use.
	Username *string `pulumi:"username"`
	// Webhook URL (Example, https://mattermost.yourdomain.com/hooks/...). This value cannot be imported.
	Webhook string `pulumi:"webhook"`
	// The name of the channel to receive wiki page events notifications.
	WikiPageChannel *string `pulumi:"wikiPageChannel"`
	// Enable notifications for wiki page events.
	WikiPageEvents *bool `pulumi:"wikiPageEvents"`
}

// The set of arguments for constructing a ProjectIntegrationMattermost resource.
type ProjectIntegrationMattermostArgs struct {
	// Branches to send notifications for. Valid options are "all", "default", "protected", and "default*and*protected".
	BranchesToBeNotified pulumi.StringPtrInput
	// The name of the channel to receive confidential issue events notifications.
	ConfidentialIssueChannel pulumi.StringPtrInput
	// Enable notifications for confidential issues events.
	ConfidentialIssuesEvents pulumi.BoolPtrInput
	// The name of the channel to receive confidential note events notifications.
	ConfidentialNoteChannel pulumi.StringPtrInput
	// Enable notifications for confidential note events.
	ConfidentialNoteEvents pulumi.BoolPtrInput
	// The name of the channel to receive issue events notifications.
	IssueChannel pulumi.StringPtrInput
	// Enable notifications for issues events.
	IssuesEvents pulumi.BoolPtrInput
	// The name of the channel to receive merge request events notifications.
	MergeRequestChannel pulumi.StringPtrInput
	// Enable notifications for merge requests events.
	MergeRequestsEvents pulumi.BoolPtrInput
	// The name of the channel to receive note events notifications.
	NoteChannel pulumi.StringPtrInput
	// Enable notifications for note events.
	NoteEvents pulumi.BoolPtrInput
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines pulumi.BoolPtrInput
	// The name of the channel to receive pipeline events notifications.
	PipelineChannel pulumi.StringPtrInput
	// Enable notifications for pipeline events.
	PipelineEvents pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
	// The name of the channel to receive push events notifications.
	PushChannel pulumi.StringPtrInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// The name of the channel to receive tag push events notifications.
	TagPushChannel pulumi.StringPtrInput
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolPtrInput
	// Username to use.
	Username pulumi.StringPtrInput
	// Webhook URL (Example, https://mattermost.yourdomain.com/hooks/...). This value cannot be imported.
	Webhook pulumi.StringInput
	// The name of the channel to receive wiki page events notifications.
	WikiPageChannel pulumi.StringPtrInput
	// Enable notifications for wiki page events.
	WikiPageEvents pulumi.BoolPtrInput
}

func (ProjectIntegrationMattermostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationMattermostArgs)(nil)).Elem()
}

type ProjectIntegrationMattermostInput interface {
	pulumi.Input

	ToProjectIntegrationMattermostOutput() ProjectIntegrationMattermostOutput
	ToProjectIntegrationMattermostOutputWithContext(ctx context.Context) ProjectIntegrationMattermostOutput
}

func (*ProjectIntegrationMattermost) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationMattermost)(nil)).Elem()
}

func (i *ProjectIntegrationMattermost) ToProjectIntegrationMattermostOutput() ProjectIntegrationMattermostOutput {
	return i.ToProjectIntegrationMattermostOutputWithContext(context.Background())
}

func (i *ProjectIntegrationMattermost) ToProjectIntegrationMattermostOutputWithContext(ctx context.Context) ProjectIntegrationMattermostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationMattermostOutput)
}

// ProjectIntegrationMattermostArrayInput is an input type that accepts ProjectIntegrationMattermostArray and ProjectIntegrationMattermostArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationMattermostArrayInput` via:
//
//	ProjectIntegrationMattermostArray{ ProjectIntegrationMattermostArgs{...} }
type ProjectIntegrationMattermostArrayInput interface {
	pulumi.Input

	ToProjectIntegrationMattermostArrayOutput() ProjectIntegrationMattermostArrayOutput
	ToProjectIntegrationMattermostArrayOutputWithContext(context.Context) ProjectIntegrationMattermostArrayOutput
}

type ProjectIntegrationMattermostArray []ProjectIntegrationMattermostInput

func (ProjectIntegrationMattermostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationMattermost)(nil)).Elem()
}

func (i ProjectIntegrationMattermostArray) ToProjectIntegrationMattermostArrayOutput() ProjectIntegrationMattermostArrayOutput {
	return i.ToProjectIntegrationMattermostArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationMattermostArray) ToProjectIntegrationMattermostArrayOutputWithContext(ctx context.Context) ProjectIntegrationMattermostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationMattermostArrayOutput)
}

// ProjectIntegrationMattermostMapInput is an input type that accepts ProjectIntegrationMattermostMap and ProjectIntegrationMattermostMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationMattermostMapInput` via:
//
//	ProjectIntegrationMattermostMap{ "key": ProjectIntegrationMattermostArgs{...} }
type ProjectIntegrationMattermostMapInput interface {
	pulumi.Input

	ToProjectIntegrationMattermostMapOutput() ProjectIntegrationMattermostMapOutput
	ToProjectIntegrationMattermostMapOutputWithContext(context.Context) ProjectIntegrationMattermostMapOutput
}

type ProjectIntegrationMattermostMap map[string]ProjectIntegrationMattermostInput

func (ProjectIntegrationMattermostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationMattermost)(nil)).Elem()
}

func (i ProjectIntegrationMattermostMap) ToProjectIntegrationMattermostMapOutput() ProjectIntegrationMattermostMapOutput {
	return i.ToProjectIntegrationMattermostMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationMattermostMap) ToProjectIntegrationMattermostMapOutputWithContext(ctx context.Context) ProjectIntegrationMattermostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationMattermostMapOutput)
}

type ProjectIntegrationMattermostOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationMattermostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationMattermost)(nil)).Elem()
}

func (o ProjectIntegrationMattermostOutput) ToProjectIntegrationMattermostOutput() ProjectIntegrationMattermostOutput {
	return o
}

func (o ProjectIntegrationMattermostOutput) ToProjectIntegrationMattermostOutputWithContext(ctx context.Context) ProjectIntegrationMattermostOutput {
	return o
}

// Branches to send notifications for. Valid options are "all", "default", "protected", and "default*and*protected".
func (o ProjectIntegrationMattermostOutput) BranchesToBeNotified() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringOutput { return v.BranchesToBeNotified }).(pulumi.StringOutput)
}

// The name of the channel to receive confidential issue events notifications.
func (o ProjectIntegrationMattermostOutput) ConfidentialIssueChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.ConfidentialIssueChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for confidential issues events.
func (o ProjectIntegrationMattermostOutput) ConfidentialIssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.ConfidentialIssuesEvents }).(pulumi.BoolOutput)
}

// The name of the channel to receive confidential note events notifications.
func (o ProjectIntegrationMattermostOutput) ConfidentialNoteChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.ConfidentialNoteChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for confidential note events.
func (o ProjectIntegrationMattermostOutput) ConfidentialNoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.ConfidentialNoteEvents }).(pulumi.BoolOutput)
}

// The name of the channel to receive issue events notifications.
func (o ProjectIntegrationMattermostOutput) IssueChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.IssueChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for issues events.
func (o ProjectIntegrationMattermostOutput) IssuesEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.IssuesEvents }).(pulumi.BoolOutput)
}

// The name of the channel to receive merge request events notifications.
func (o ProjectIntegrationMattermostOutput) MergeRequestChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.MergeRequestChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for merge requests events.
func (o ProjectIntegrationMattermostOutput) MergeRequestsEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.MergeRequestsEvents }).(pulumi.BoolOutput)
}

// The name of the channel to receive note events notifications.
func (o ProjectIntegrationMattermostOutput) NoteChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.NoteChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for note events.
func (o ProjectIntegrationMattermostOutput) NoteEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.NoteEvents }).(pulumi.BoolOutput)
}

// Send notifications for broken pipelines.
func (o ProjectIntegrationMattermostOutput) NotifyOnlyBrokenPipelines() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.NotifyOnlyBrokenPipelines }).(pulumi.BoolOutput)
}

// The name of the channel to receive pipeline events notifications.
func (o ProjectIntegrationMattermostOutput) PipelineChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.PipelineChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for pipeline events.
func (o ProjectIntegrationMattermostOutput) PipelineEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.PipelineEvents }).(pulumi.BoolOutput)
}

// ID of the project you want to activate integration on.
func (o ProjectIntegrationMattermostOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the channel to receive push events notifications.
func (o ProjectIntegrationMattermostOutput) PushChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.PushChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for push events.
func (o ProjectIntegrationMattermostOutput) PushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.PushEvents }).(pulumi.BoolOutput)
}

// The name of the channel to receive tag push events notifications.
func (o ProjectIntegrationMattermostOutput) TagPushChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.TagPushChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for tag push events.
func (o ProjectIntegrationMattermostOutput) TagPushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.TagPushEvents }).(pulumi.BoolOutput)
}

// Username to use.
func (o ProjectIntegrationMattermostOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// Webhook URL (Example, https://mattermost.yourdomain.com/hooks/...). This value cannot be imported.
func (o ProjectIntegrationMattermostOutput) Webhook() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringOutput { return v.Webhook }).(pulumi.StringOutput)
}

// The name of the channel to receive wiki page events notifications.
func (o ProjectIntegrationMattermostOutput) WikiPageChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.StringPtrOutput { return v.WikiPageChannel }).(pulumi.StringPtrOutput)
}

// Enable notifications for wiki page events.
func (o ProjectIntegrationMattermostOutput) WikiPageEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMattermost) pulumi.BoolOutput { return v.WikiPageEvents }).(pulumi.BoolOutput)
}

type ProjectIntegrationMattermostArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationMattermostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationMattermost)(nil)).Elem()
}

func (o ProjectIntegrationMattermostArrayOutput) ToProjectIntegrationMattermostArrayOutput() ProjectIntegrationMattermostArrayOutput {
	return o
}

func (o ProjectIntegrationMattermostArrayOutput) ToProjectIntegrationMattermostArrayOutputWithContext(ctx context.Context) ProjectIntegrationMattermostArrayOutput {
	return o
}

func (o ProjectIntegrationMattermostArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationMattermostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationMattermost {
		return vs[0].([]*ProjectIntegrationMattermost)[vs[1].(int)]
	}).(ProjectIntegrationMattermostOutput)
}

type ProjectIntegrationMattermostMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationMattermostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationMattermost)(nil)).Elem()
}

func (o ProjectIntegrationMattermostMapOutput) ToProjectIntegrationMattermostMapOutput() ProjectIntegrationMattermostMapOutput {
	return o
}

func (o ProjectIntegrationMattermostMapOutput) ToProjectIntegrationMattermostMapOutputWithContext(ctx context.Context) ProjectIntegrationMattermostMapOutput {
	return o
}

func (o ProjectIntegrationMattermostMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationMattermostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationMattermost {
		return vs[0].(map[string]*ProjectIntegrationMattermost)[vs[1].(string)]
	}).(ProjectIntegrationMattermostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationMattermostInput)(nil)).Elem(), &ProjectIntegrationMattermost{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationMattermostArrayInput)(nil)).Elem(), ProjectIntegrationMattermostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationMattermostMapInput)(nil)).Elem(), ProjectIntegrationMattermostMap{})
	pulumi.RegisterOutputType(ProjectIntegrationMattermostOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationMattermostArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationMattermostMapOutput{})
}
