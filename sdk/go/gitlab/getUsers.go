// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.
//
// > Some attributes might not be returned depending on if you're an admin or not.
//
// > Some available options require administrator privileges.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.GetUsers(ctx, &GetUsersArgs{
// 			CreatedBefore: pulumi.StringRef("2019-01-01"),
// 			OrderBy:       pulumi.StringRef("name"),
// 			Sort:          pulumi.StringRef("desc"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = gitlab.GetUsers(ctx, &GetUsersArgs{
// 			Search: pulumi.StringRef("username"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetUsers(ctx *pulumi.Context, args *GetUsersArgs, opts ...pulumi.InvokeOption) (*GetUsersResult, error) {
	var rv GetUsersResult
	err := ctx.Invoke("gitlab:index/getUsers:getUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsers.
type GetUsersArgs struct {
	Active         *bool   `pulumi:"active"`
	Blocked        *bool   `pulumi:"blocked"`
	CreatedAfter   *string `pulumi:"createdAfter"`
	CreatedBefore  *string `pulumi:"createdBefore"`
	ExternProvider *string `pulumi:"externProvider"`
	ExternUid      *string `pulumi:"externUid"`
	OrderBy        *string `pulumi:"orderBy"`
	Search         *string `pulumi:"search"`
	Sort           *string `pulumi:"sort"`
}

// A collection of values returned by getUsers.
type GetUsersResult struct {
	Active         *bool   `pulumi:"active"`
	Blocked        *bool   `pulumi:"blocked"`
	CreatedAfter   *string `pulumi:"createdAfter"`
	CreatedBefore  *string `pulumi:"createdBefore"`
	ExternProvider *string `pulumi:"externProvider"`
	ExternUid      *string `pulumi:"externUid"`
	// The provider-assigned unique ID for this managed resource.
	Id      string         `pulumi:"id"`
	OrderBy *string        `pulumi:"orderBy"`
	Search  *string        `pulumi:"search"`
	Sort    *string        `pulumi:"sort"`
	Users   []GetUsersUser `pulumi:"users"`
}

func GetUsersOutput(ctx *pulumi.Context, args GetUsersOutputArgs, opts ...pulumi.InvokeOption) GetUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUsersResult, error) {
			args := v.(GetUsersArgs)
			r, err := GetUsers(ctx, &args, opts...)
			var s GetUsersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUsersResultOutput)
}

// A collection of arguments for invoking getUsers.
type GetUsersOutputArgs struct {
	Active         pulumi.BoolPtrInput   `pulumi:"active"`
	Blocked        pulumi.BoolPtrInput   `pulumi:"blocked"`
	CreatedAfter   pulumi.StringPtrInput `pulumi:"createdAfter"`
	CreatedBefore  pulumi.StringPtrInput `pulumi:"createdBefore"`
	ExternProvider pulumi.StringPtrInput `pulumi:"externProvider"`
	ExternUid      pulumi.StringPtrInput `pulumi:"externUid"`
	OrderBy        pulumi.StringPtrInput `pulumi:"orderBy"`
	Search         pulumi.StringPtrInput `pulumi:"search"`
	Sort           pulumi.StringPtrInput `pulumi:"sort"`
}

func (GetUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersArgs)(nil)).Elem()
}

// A collection of values returned by getUsers.
type GetUsersResultOutput struct{ *pulumi.OutputState }

func (GetUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersResult)(nil)).Elem()
}

func (o GetUsersResultOutput) ToGetUsersResultOutput() GetUsersResultOutput {
	return o
}

func (o GetUsersResultOutput) ToGetUsersResultOutputWithContext(ctx context.Context) GetUsersResultOutput {
	return o
}

func (o GetUsersResultOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o GetUsersResultOutput) Blocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *bool { return v.Blocked }).(pulumi.BoolPtrOutput)
}

func (o GetUsersResultOutput) CreatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.CreatedAfter }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) CreatedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.CreatedBefore }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) ExternProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.ExternProvider }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) ExternUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.ExternUid }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUsersResultOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) Search() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.Search }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) Sort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersResult) *string { return v.Sort }).(pulumi.StringPtrOutput)
}

func (o GetUsersResultOutput) Users() GetUsersUserArrayOutput {
	return o.ApplyT(func(v GetUsersResult) []GetUsersUser { return v.Users }).(GetUsersUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsersResultOutput{})
}
