// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectMergeRequestNote` resource manages the lifecycle of a project merge request note.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/notes/#merge-requests)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := gitlab.NewProject(ctx, "example", &gitlab.ProjectArgs{
//				Name:            pulumi.String("example project"),
//				Description:     pulumi.String("Lorem Ipsum"),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectMergeRequestNote(ctx, "example", &gitlab.ProjectMergeRequestNoteArgs{
//				Project:         example.ID(),
//				MergeRequestIid: pulumi.Int(456),
//				Body:            pulumi.String("Example note"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_merge_request_note`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_merge_request_note.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// A GitLab Project Merge Request Note can be imported using a key composed of `<project-id>:<merge-request-iid>:<note-id>`, for example:
//
// ```sh
// $ pulumi import gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote example "12345:1:3"
// ```
type ProjectMergeRequestNote struct {
	pulumi.CustomResourceState

	// The body of the merge request note.
	Body pulumi.StringOutput `pulumi:"body"`
	// The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicates if the merge request note is internal.
	Internal pulumi.BoolOutput `pulumi:"internal"`
	// The diff head SHA of the merge request when the note was created.
	MergeRequestDiffHeadSha pulumi.StringPtrOutput `pulumi:"mergeRequestDiffHeadSha"`
	// The IID of the merge request to add the note to.
	MergeRequestIid pulumi.IntOutput `pulumi:"mergeRequestIid"`
	// The ID of the merge request note.
	NoteId pulumi.IntOutput `pulumi:"noteId"`
	// The ID or path of the project to add the note to.
	Project pulumi.StringOutput `pulumi:"project"`
	// Indicates if the merge request note is resolvable.
	Resolvable pulumi.BoolOutput `pulumi:"resolvable"`
	// Indicates if the merge request note is a system note.
	System pulumi.BoolOutput `pulumi:"system"`
	// The last updated date of the merge request note.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewProjectMergeRequestNote registers a new resource with the given unique name, arguments, and options.
func NewProjectMergeRequestNote(ctx *pulumi.Context,
	name string, args *ProjectMergeRequestNoteArgs, opts ...pulumi.ResourceOption) (*ProjectMergeRequestNote, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.MergeRequestIid == nil {
		return nil, errors.New("invalid value for required argument 'MergeRequestIid'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMergeRequestNote
	err := ctx.RegisterResource("gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMergeRequestNote gets an existing ProjectMergeRequestNote resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMergeRequestNote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMergeRequestNoteState, opts ...pulumi.ResourceOption) (*ProjectMergeRequestNote, error) {
	var resource ProjectMergeRequestNote
	err := ctx.ReadResource("gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMergeRequestNote resources.
type projectMergeRequestNoteState struct {
	// The body of the merge request note.
	Body *string `pulumi:"body"`
	// The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates if the merge request note is internal.
	Internal *bool `pulumi:"internal"`
	// The diff head SHA of the merge request when the note was created.
	MergeRequestDiffHeadSha *string `pulumi:"mergeRequestDiffHeadSha"`
	// The IID of the merge request to add the note to.
	MergeRequestIid *int `pulumi:"mergeRequestIid"`
	// The ID of the merge request note.
	NoteId *int `pulumi:"noteId"`
	// The ID or path of the project to add the note to.
	Project *string `pulumi:"project"`
	// Indicates if the merge request note is resolvable.
	Resolvable *bool `pulumi:"resolvable"`
	// Indicates if the merge request note is a system note.
	System *bool `pulumi:"system"`
	// The last updated date of the merge request note.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ProjectMergeRequestNoteState struct {
	// The body of the merge request note.
	Body pulumi.StringPtrInput
	// The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
	CreatedAt pulumi.StringPtrInput
	// Indicates if the merge request note is internal.
	Internal pulumi.BoolPtrInput
	// The diff head SHA of the merge request when the note was created.
	MergeRequestDiffHeadSha pulumi.StringPtrInput
	// The IID of the merge request to add the note to.
	MergeRequestIid pulumi.IntPtrInput
	// The ID of the merge request note.
	NoteId pulumi.IntPtrInput
	// The ID or path of the project to add the note to.
	Project pulumi.StringPtrInput
	// Indicates if the merge request note is resolvable.
	Resolvable pulumi.BoolPtrInput
	// Indicates if the merge request note is a system note.
	System pulumi.BoolPtrInput
	// The last updated date of the merge request note.
	UpdatedAt pulumi.StringPtrInput
}

func (ProjectMergeRequestNoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMergeRequestNoteState)(nil)).Elem()
}

type projectMergeRequestNoteArgs struct {
	// The body of the merge request note.
	Body string `pulumi:"body"`
	// The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates if the merge request note is internal.
	Internal *bool `pulumi:"internal"`
	// The diff head SHA of the merge request when the note was created.
	MergeRequestDiffHeadSha *string `pulumi:"mergeRequestDiffHeadSha"`
	// The IID of the merge request to add the note to.
	MergeRequestIid int `pulumi:"mergeRequestIid"`
	// The ID or path of the project to add the note to.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectMergeRequestNote resource.
type ProjectMergeRequestNoteArgs struct {
	// The body of the merge request note.
	Body pulumi.StringInput
	// The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
	CreatedAt pulumi.StringPtrInput
	// Indicates if the merge request note is internal.
	Internal pulumi.BoolPtrInput
	// The diff head SHA of the merge request when the note was created.
	MergeRequestDiffHeadSha pulumi.StringPtrInput
	// The IID of the merge request to add the note to.
	MergeRequestIid pulumi.IntInput
	// The ID or path of the project to add the note to.
	Project pulumi.StringInput
}

func (ProjectMergeRequestNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMergeRequestNoteArgs)(nil)).Elem()
}

type ProjectMergeRequestNoteInput interface {
	pulumi.Input

	ToProjectMergeRequestNoteOutput() ProjectMergeRequestNoteOutput
	ToProjectMergeRequestNoteOutputWithContext(ctx context.Context) ProjectMergeRequestNoteOutput
}

func (*ProjectMergeRequestNote) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMergeRequestNote)(nil)).Elem()
}

func (i *ProjectMergeRequestNote) ToProjectMergeRequestNoteOutput() ProjectMergeRequestNoteOutput {
	return i.ToProjectMergeRequestNoteOutputWithContext(context.Background())
}

func (i *ProjectMergeRequestNote) ToProjectMergeRequestNoteOutputWithContext(ctx context.Context) ProjectMergeRequestNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMergeRequestNoteOutput)
}

// ProjectMergeRequestNoteArrayInput is an input type that accepts ProjectMergeRequestNoteArray and ProjectMergeRequestNoteArrayOutput values.
// You can construct a concrete instance of `ProjectMergeRequestNoteArrayInput` via:
//
//	ProjectMergeRequestNoteArray{ ProjectMergeRequestNoteArgs{...} }
type ProjectMergeRequestNoteArrayInput interface {
	pulumi.Input

	ToProjectMergeRequestNoteArrayOutput() ProjectMergeRequestNoteArrayOutput
	ToProjectMergeRequestNoteArrayOutputWithContext(context.Context) ProjectMergeRequestNoteArrayOutput
}

type ProjectMergeRequestNoteArray []ProjectMergeRequestNoteInput

func (ProjectMergeRequestNoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMergeRequestNote)(nil)).Elem()
}

func (i ProjectMergeRequestNoteArray) ToProjectMergeRequestNoteArrayOutput() ProjectMergeRequestNoteArrayOutput {
	return i.ToProjectMergeRequestNoteArrayOutputWithContext(context.Background())
}

func (i ProjectMergeRequestNoteArray) ToProjectMergeRequestNoteArrayOutputWithContext(ctx context.Context) ProjectMergeRequestNoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMergeRequestNoteArrayOutput)
}

// ProjectMergeRequestNoteMapInput is an input type that accepts ProjectMergeRequestNoteMap and ProjectMergeRequestNoteMapOutput values.
// You can construct a concrete instance of `ProjectMergeRequestNoteMapInput` via:
//
//	ProjectMergeRequestNoteMap{ "key": ProjectMergeRequestNoteArgs{...} }
type ProjectMergeRequestNoteMapInput interface {
	pulumi.Input

	ToProjectMergeRequestNoteMapOutput() ProjectMergeRequestNoteMapOutput
	ToProjectMergeRequestNoteMapOutputWithContext(context.Context) ProjectMergeRequestNoteMapOutput
}

type ProjectMergeRequestNoteMap map[string]ProjectMergeRequestNoteInput

func (ProjectMergeRequestNoteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMergeRequestNote)(nil)).Elem()
}

func (i ProjectMergeRequestNoteMap) ToProjectMergeRequestNoteMapOutput() ProjectMergeRequestNoteMapOutput {
	return i.ToProjectMergeRequestNoteMapOutputWithContext(context.Background())
}

func (i ProjectMergeRequestNoteMap) ToProjectMergeRequestNoteMapOutputWithContext(ctx context.Context) ProjectMergeRequestNoteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMergeRequestNoteMapOutput)
}

type ProjectMergeRequestNoteOutput struct{ *pulumi.OutputState }

func (ProjectMergeRequestNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMergeRequestNote)(nil)).Elem()
}

func (o ProjectMergeRequestNoteOutput) ToProjectMergeRequestNoteOutput() ProjectMergeRequestNoteOutput {
	return o
}

func (o ProjectMergeRequestNoteOutput) ToProjectMergeRequestNoteOutputWithContext(ctx context.Context) ProjectMergeRequestNoteOutput {
	return o
}

// The body of the merge request note.
func (o ProjectMergeRequestNoteOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
func (o ProjectMergeRequestNoteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates if the merge request note is internal.
func (o ProjectMergeRequestNoteOutput) Internal() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.BoolOutput { return v.Internal }).(pulumi.BoolOutput)
}

// The diff head SHA of the merge request when the note was created.
func (o ProjectMergeRequestNoteOutput) MergeRequestDiffHeadSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.StringPtrOutput { return v.MergeRequestDiffHeadSha }).(pulumi.StringPtrOutput)
}

// The IID of the merge request to add the note to.
func (o ProjectMergeRequestNoteOutput) MergeRequestIid() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.IntOutput { return v.MergeRequestIid }).(pulumi.IntOutput)
}

// The ID of the merge request note.
func (o ProjectMergeRequestNoteOutput) NoteId() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.IntOutput { return v.NoteId }).(pulumi.IntOutput)
}

// The ID or path of the project to add the note to.
func (o ProjectMergeRequestNoteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Indicates if the merge request note is resolvable.
func (o ProjectMergeRequestNoteOutput) Resolvable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.BoolOutput { return v.Resolvable }).(pulumi.BoolOutput)
}

// Indicates if the merge request note is a system note.
func (o ProjectMergeRequestNoteOutput) System() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.BoolOutput { return v.System }).(pulumi.BoolOutput)
}

// The last updated date of the merge request note.
func (o ProjectMergeRequestNoteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMergeRequestNote) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ProjectMergeRequestNoteArrayOutput struct{ *pulumi.OutputState }

func (ProjectMergeRequestNoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMergeRequestNote)(nil)).Elem()
}

func (o ProjectMergeRequestNoteArrayOutput) ToProjectMergeRequestNoteArrayOutput() ProjectMergeRequestNoteArrayOutput {
	return o
}

func (o ProjectMergeRequestNoteArrayOutput) ToProjectMergeRequestNoteArrayOutputWithContext(ctx context.Context) ProjectMergeRequestNoteArrayOutput {
	return o
}

func (o ProjectMergeRequestNoteArrayOutput) Index(i pulumi.IntInput) ProjectMergeRequestNoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectMergeRequestNote {
		return vs[0].([]*ProjectMergeRequestNote)[vs[1].(int)]
	}).(ProjectMergeRequestNoteOutput)
}

type ProjectMergeRequestNoteMapOutput struct{ *pulumi.OutputState }

func (ProjectMergeRequestNoteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMergeRequestNote)(nil)).Elem()
}

func (o ProjectMergeRequestNoteMapOutput) ToProjectMergeRequestNoteMapOutput() ProjectMergeRequestNoteMapOutput {
	return o
}

func (o ProjectMergeRequestNoteMapOutput) ToProjectMergeRequestNoteMapOutputWithContext(ctx context.Context) ProjectMergeRequestNoteMapOutput {
	return o
}

func (o ProjectMergeRequestNoteMapOutput) MapIndex(k pulumi.StringInput) ProjectMergeRequestNoteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectMergeRequestNote {
		return vs[0].(map[string]*ProjectMergeRequestNote)[vs[1].(string)]
	}).(ProjectMergeRequestNoteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMergeRequestNoteInput)(nil)).Elem(), &ProjectMergeRequestNote{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMergeRequestNoteArrayInput)(nil)).Elem(), ProjectMergeRequestNoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMergeRequestNoteMapInput)(nil)).Elem(), ProjectMergeRequestNoteMap{})
	pulumi.RegisterOutputType(ProjectMergeRequestNoteOutput{})
	pulumi.RegisterOutputType(ProjectMergeRequestNoteArrayOutput{})
	pulumi.RegisterOutputType(ProjectMergeRequestNoteMapOutput{})
}
