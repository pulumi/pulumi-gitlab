// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `gitlabAccessTokens` data source allows to retrieve all group-level access tokens.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.GetGroupAccessTokens(ctx, &gitlab.GetGroupAccessTokensArgs{
//				Group: "my/example/group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGroupAccessTokens(ctx *pulumi.Context, args *GetGroupAccessTokensArgs, opts ...pulumi.InvokeOption) (*GetGroupAccessTokensResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupAccessTokensResult
	err := ctx.Invoke("gitlab:index/getGroupAccessTokens:getGroupAccessTokens", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupAccessTokens.
type GetGroupAccessTokensArgs struct {
	// The name or id of the group.
	Group string `pulumi:"group"`
}

// A collection of values returned by getGroupAccessTokens.
type GetGroupAccessTokensResult struct {
	// The list of access tokens returned by the search
	AccessTokens []GetGroupAccessTokensAccessToken `pulumi:"accessTokens"`
	// The name or id of the group.
	Group string `pulumi:"group"`
	Id    string `pulumi:"id"`
}

func GetGroupAccessTokensOutput(ctx *pulumi.Context, args GetGroupAccessTokensOutputArgs, opts ...pulumi.InvokeOption) GetGroupAccessTokensResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGroupAccessTokensResultOutput, error) {
			args := v.(GetGroupAccessTokensArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getGroupAccessTokens:getGroupAccessTokens", args, GetGroupAccessTokensResultOutput{}, options).(GetGroupAccessTokensResultOutput), nil
		}).(GetGroupAccessTokensResultOutput)
}

// A collection of arguments for invoking getGroupAccessTokens.
type GetGroupAccessTokensOutputArgs struct {
	// The name or id of the group.
	Group pulumi.StringInput `pulumi:"group"`
}

func (GetGroupAccessTokensOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupAccessTokensArgs)(nil)).Elem()
}

// A collection of values returned by getGroupAccessTokens.
type GetGroupAccessTokensResultOutput struct{ *pulumi.OutputState }

func (GetGroupAccessTokensResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupAccessTokensResult)(nil)).Elem()
}

func (o GetGroupAccessTokensResultOutput) ToGetGroupAccessTokensResultOutput() GetGroupAccessTokensResultOutput {
	return o
}

func (o GetGroupAccessTokensResultOutput) ToGetGroupAccessTokensResultOutputWithContext(ctx context.Context) GetGroupAccessTokensResultOutput {
	return o
}

// The list of access tokens returned by the search
func (o GetGroupAccessTokensResultOutput) AccessTokens() GetGroupAccessTokensAccessTokenArrayOutput {
	return o.ApplyT(func(v GetGroupAccessTokensResult) []GetGroupAccessTokensAccessToken { return v.AccessTokens }).(GetGroupAccessTokensAccessTokenArrayOutput)
}

// The name or id of the group.
func (o GetGroupAccessTokensResultOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupAccessTokensResult) string { return v.Group }).(pulumi.StringOutput)
}

func (o GetGroupAccessTokensResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupAccessTokensResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupAccessTokensResultOutput{})
}
