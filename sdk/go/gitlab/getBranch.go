// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Branch` data source allows details of a repository branch to be retrieved by its name and project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.LookupBranch(ctx, &GetBranchArgs{
// 			Name:    "example",
// 			Project: "foo/bar",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupBranch(ctx *pulumi.Context, args *LookupBranchArgs, opts ...pulumi.InvokeOption) (*LookupBranchResult, error) {
	var rv LookupBranchResult
	err := ctx.Invoke("gitlab:index/getBranch:getBranch", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBranch.
type LookupBranchArgs struct {
	Name    string `pulumi:"name"`
	Project string `pulumi:"project"`
}

// A collection of values returned by getBranch.
type LookupBranchResult struct {
	CanPush           bool              `pulumi:"canPush"`
	Commits           []GetBranchCommit `pulumi:"commits"`
	Default           bool              `pulumi:"default"`
	DeveloperCanMerge bool              `pulumi:"developerCanMerge"`
	DeveloperCanPush  bool              `pulumi:"developerCanPush"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	Merged    bool   `pulumi:"merged"`
	Name      string `pulumi:"name"`
	Project   string `pulumi:"project"`
	Protected bool   `pulumi:"protected"`
	WebUrl    string `pulumi:"webUrl"`
}

func LookupBranchOutput(ctx *pulumi.Context, args LookupBranchOutputArgs, opts ...pulumi.InvokeOption) LookupBranchResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBranchResult, error) {
			args := v.(LookupBranchArgs)
			r, err := LookupBranch(ctx, &args, opts...)
			var s LookupBranchResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBranchResultOutput)
}

// A collection of arguments for invoking getBranch.
type LookupBranchOutputArgs struct {
	Name    pulumi.StringInput `pulumi:"name"`
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupBranchOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBranchArgs)(nil)).Elem()
}

// A collection of values returned by getBranch.
type LookupBranchResultOutput struct{ *pulumi.OutputState }

func (LookupBranchResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBranchResult)(nil)).Elem()
}

func (o LookupBranchResultOutput) ToLookupBranchResultOutput() LookupBranchResultOutput {
	return o
}

func (o LookupBranchResultOutput) ToLookupBranchResultOutputWithContext(ctx context.Context) LookupBranchResultOutput {
	return o
}

func (o LookupBranchResultOutput) CanPush() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBranchResult) bool { return v.CanPush }).(pulumi.BoolOutput)
}

func (o LookupBranchResultOutput) Commits() GetBranchCommitArrayOutput {
	return o.ApplyT(func(v LookupBranchResult) []GetBranchCommit { return v.Commits }).(GetBranchCommitArrayOutput)
}

func (o LookupBranchResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBranchResult) bool { return v.Default }).(pulumi.BoolOutput)
}

func (o LookupBranchResultOutput) DeveloperCanMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBranchResult) bool { return v.DeveloperCanMerge }).(pulumi.BoolOutput)
}

func (o LookupBranchResultOutput) DeveloperCanPush() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBranchResult) bool { return v.DeveloperCanPush }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBranchResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBranchResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupBranchResultOutput) Merged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBranchResult) bool { return v.Merged }).(pulumi.BoolOutput)
}

func (o LookupBranchResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBranchResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupBranchResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBranchResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupBranchResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBranchResult) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o LookupBranchResultOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBranchResult) string { return v.WebUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBranchResultOutput{})
}
