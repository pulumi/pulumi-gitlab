// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationMicrosoftTeams` resource manages the lifecycle of a project integration with Microsoft Teams.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#microsoft-teams-notifications)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationMicrosoftTeams(ctx, "teams", &gitlab.ProjectIntegrationMicrosoftTeamsArgs{
//				Project:    awesomeProject.ID(),
//				Webhook:    pulumi.String("https://testurl.com/?token=XYZ"),
//				PushEvents: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_microsoft_teams`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_microsoft_teams.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// You can import a gitlab_project_integration_microsoft_teams state using the project ID, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationMicrosoftTeams:ProjectIntegrationMicrosoftTeams teams 1
// ```
type ProjectIntegrationMicrosoftTeams struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”
	BranchesToBeNotified pulumi.StringPtrOutput `pulumi:"branchesToBeNotified"`
	// Enable notifications for confidential issue events
	ConfidentialIssuesEvents pulumi.BoolPtrOutput `pulumi:"confidentialIssuesEvents"`
	// Enable notifications for confidential note events
	ConfidentialNoteEvents pulumi.BoolPtrOutput `pulumi:"confidentialNoteEvents"`
	// Create time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Enable notifications for issue events
	IssuesEvents pulumi.BoolPtrOutput `pulumi:"issuesEvents"`
	// Enable notifications for merge request events
	MergeRequestsEvents pulumi.BoolPtrOutput `pulumi:"mergeRequestsEvents"`
	// Enable notifications for note events
	NoteEvents pulumi.BoolPtrOutput `pulumi:"noteEvents"`
	// Send notifications for broken pipelines
	NotifyOnlyBrokenPipelines pulumi.BoolPtrOutput `pulumi:"notifyOnlyBrokenPipelines"`
	// Enable notifications for pipeline events
	PipelineEvents pulumi.BoolPtrOutput `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// Enable notifications for push events
	PushEvents pulumi.BoolPtrOutput `pulumi:"pushEvents"`
	// Enable notifications for tag push events
	TagPushEvents pulumi.BoolPtrOutput `pulumi:"tagPushEvents"`
	// Update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
	Webhook pulumi.StringOutput `pulumi:"webhook"`
	// Enable notifications for wiki page events
	WikiPageEvents pulumi.BoolPtrOutput `pulumi:"wikiPageEvents"`
}

// NewProjectIntegrationMicrosoftTeams registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationMicrosoftTeams(ctx *pulumi.Context,
	name string, args *ProjectIntegrationMicrosoftTeamsArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationMicrosoftTeams, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Webhook == nil {
		return nil, errors.New("invalid value for required argument 'Webhook'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationMicrosoftTeams
	err := ctx.RegisterResource("gitlab:index/projectIntegrationMicrosoftTeams:ProjectIntegrationMicrosoftTeams", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationMicrosoftTeams gets an existing ProjectIntegrationMicrosoftTeams resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationMicrosoftTeams(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationMicrosoftTeamsState, opts ...pulumi.ResourceOption) (*ProjectIntegrationMicrosoftTeams, error) {
	var resource ProjectIntegrationMicrosoftTeams
	err := ctx.ReadResource("gitlab:index/projectIntegrationMicrosoftTeams:ProjectIntegrationMicrosoftTeams", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationMicrosoftTeams resources.
type projectIntegrationMicrosoftTeamsState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// Enable notifications for confidential issue events
	ConfidentialIssuesEvents *bool `pulumi:"confidentialIssuesEvents"`
	// Enable notifications for confidential note events
	ConfidentialNoteEvents *bool `pulumi:"confidentialNoteEvents"`
	// Create time.
	CreatedAt *string `pulumi:"createdAt"`
	// Enable notifications for issue events
	IssuesEvents *bool `pulumi:"issuesEvents"`
	// Enable notifications for merge request events
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// Enable notifications for note events
	NoteEvents *bool `pulumi:"noteEvents"`
	// Send notifications for broken pipelines
	NotifyOnlyBrokenPipelines *bool `pulumi:"notifyOnlyBrokenPipelines"`
	// Enable notifications for pipeline events
	PipelineEvents *bool `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// Enable notifications for push events
	PushEvents *bool `pulumi:"pushEvents"`
	// Enable notifications for tag push events
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Update time.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
	Webhook *string `pulumi:"webhook"`
	// Enable notifications for wiki page events
	WikiPageEvents *bool `pulumi:"wikiPageEvents"`
}

type ProjectIntegrationMicrosoftTeamsState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”
	BranchesToBeNotified pulumi.StringPtrInput
	// Enable notifications for confidential issue events
	ConfidentialIssuesEvents pulumi.BoolPtrInput
	// Enable notifications for confidential note events
	ConfidentialNoteEvents pulumi.BoolPtrInput
	// Create time.
	CreatedAt pulumi.StringPtrInput
	// Enable notifications for issue events
	IssuesEvents pulumi.BoolPtrInput
	// Enable notifications for merge request events
	MergeRequestsEvents pulumi.BoolPtrInput
	// Enable notifications for note events
	NoteEvents pulumi.BoolPtrInput
	// Send notifications for broken pipelines
	NotifyOnlyBrokenPipelines pulumi.BoolPtrInput
	// Enable notifications for pipeline events
	PipelineEvents pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// Enable notifications for push events
	PushEvents pulumi.BoolPtrInput
	// Enable notifications for tag push events
	TagPushEvents pulumi.BoolPtrInput
	// Update time.
	UpdatedAt pulumi.StringPtrInput
	// The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
	Webhook pulumi.StringPtrInput
	// Enable notifications for wiki page events
	WikiPageEvents pulumi.BoolPtrInput
}

func (ProjectIntegrationMicrosoftTeamsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationMicrosoftTeamsState)(nil)).Elem()
}

type projectIntegrationMicrosoftTeamsArgs struct {
	// Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// Enable notifications for confidential issue events
	ConfidentialIssuesEvents *bool `pulumi:"confidentialIssuesEvents"`
	// Enable notifications for confidential note events
	ConfidentialNoteEvents *bool `pulumi:"confidentialNoteEvents"`
	// Enable notifications for issue events
	IssuesEvents *bool `pulumi:"issuesEvents"`
	// Enable notifications for merge request events
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// Enable notifications for note events
	NoteEvents *bool `pulumi:"noteEvents"`
	// Send notifications for broken pipelines
	NotifyOnlyBrokenPipelines *bool `pulumi:"notifyOnlyBrokenPipelines"`
	// Enable notifications for pipeline events
	PipelineEvents *bool `pulumi:"pipelineEvents"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// Enable notifications for push events
	PushEvents *bool `pulumi:"pushEvents"`
	// Enable notifications for tag push events
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
	Webhook string `pulumi:"webhook"`
	// Enable notifications for wiki page events
	WikiPageEvents *bool `pulumi:"wikiPageEvents"`
}

// The set of arguments for constructing a ProjectIntegrationMicrosoftTeams resource.
type ProjectIntegrationMicrosoftTeamsArgs struct {
	// Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”
	BranchesToBeNotified pulumi.StringPtrInput
	// Enable notifications for confidential issue events
	ConfidentialIssuesEvents pulumi.BoolPtrInput
	// Enable notifications for confidential note events
	ConfidentialNoteEvents pulumi.BoolPtrInput
	// Enable notifications for issue events
	IssuesEvents pulumi.BoolPtrInput
	// Enable notifications for merge request events
	MergeRequestsEvents pulumi.BoolPtrInput
	// Enable notifications for note events
	NoteEvents pulumi.BoolPtrInput
	// Send notifications for broken pipelines
	NotifyOnlyBrokenPipelines pulumi.BoolPtrInput
	// Enable notifications for pipeline events
	PipelineEvents pulumi.BoolPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
	// Enable notifications for push events
	PushEvents pulumi.BoolPtrInput
	// Enable notifications for tag push events
	TagPushEvents pulumi.BoolPtrInput
	// The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
	Webhook pulumi.StringInput
	// Enable notifications for wiki page events
	WikiPageEvents pulumi.BoolPtrInput
}

func (ProjectIntegrationMicrosoftTeamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationMicrosoftTeamsArgs)(nil)).Elem()
}

type ProjectIntegrationMicrosoftTeamsInput interface {
	pulumi.Input

	ToProjectIntegrationMicrosoftTeamsOutput() ProjectIntegrationMicrosoftTeamsOutput
	ToProjectIntegrationMicrosoftTeamsOutputWithContext(ctx context.Context) ProjectIntegrationMicrosoftTeamsOutput
}

func (*ProjectIntegrationMicrosoftTeams) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationMicrosoftTeams)(nil)).Elem()
}

func (i *ProjectIntegrationMicrosoftTeams) ToProjectIntegrationMicrosoftTeamsOutput() ProjectIntegrationMicrosoftTeamsOutput {
	return i.ToProjectIntegrationMicrosoftTeamsOutputWithContext(context.Background())
}

func (i *ProjectIntegrationMicrosoftTeams) ToProjectIntegrationMicrosoftTeamsOutputWithContext(ctx context.Context) ProjectIntegrationMicrosoftTeamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationMicrosoftTeamsOutput)
}

// ProjectIntegrationMicrosoftTeamsArrayInput is an input type that accepts ProjectIntegrationMicrosoftTeamsArray and ProjectIntegrationMicrosoftTeamsArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationMicrosoftTeamsArrayInput` via:
//
//	ProjectIntegrationMicrosoftTeamsArray{ ProjectIntegrationMicrosoftTeamsArgs{...} }
type ProjectIntegrationMicrosoftTeamsArrayInput interface {
	pulumi.Input

	ToProjectIntegrationMicrosoftTeamsArrayOutput() ProjectIntegrationMicrosoftTeamsArrayOutput
	ToProjectIntegrationMicrosoftTeamsArrayOutputWithContext(context.Context) ProjectIntegrationMicrosoftTeamsArrayOutput
}

type ProjectIntegrationMicrosoftTeamsArray []ProjectIntegrationMicrosoftTeamsInput

func (ProjectIntegrationMicrosoftTeamsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationMicrosoftTeams)(nil)).Elem()
}

func (i ProjectIntegrationMicrosoftTeamsArray) ToProjectIntegrationMicrosoftTeamsArrayOutput() ProjectIntegrationMicrosoftTeamsArrayOutput {
	return i.ToProjectIntegrationMicrosoftTeamsArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationMicrosoftTeamsArray) ToProjectIntegrationMicrosoftTeamsArrayOutputWithContext(ctx context.Context) ProjectIntegrationMicrosoftTeamsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationMicrosoftTeamsArrayOutput)
}

// ProjectIntegrationMicrosoftTeamsMapInput is an input type that accepts ProjectIntegrationMicrosoftTeamsMap and ProjectIntegrationMicrosoftTeamsMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationMicrosoftTeamsMapInput` via:
//
//	ProjectIntegrationMicrosoftTeamsMap{ "key": ProjectIntegrationMicrosoftTeamsArgs{...} }
type ProjectIntegrationMicrosoftTeamsMapInput interface {
	pulumi.Input

	ToProjectIntegrationMicrosoftTeamsMapOutput() ProjectIntegrationMicrosoftTeamsMapOutput
	ToProjectIntegrationMicrosoftTeamsMapOutputWithContext(context.Context) ProjectIntegrationMicrosoftTeamsMapOutput
}

type ProjectIntegrationMicrosoftTeamsMap map[string]ProjectIntegrationMicrosoftTeamsInput

func (ProjectIntegrationMicrosoftTeamsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationMicrosoftTeams)(nil)).Elem()
}

func (i ProjectIntegrationMicrosoftTeamsMap) ToProjectIntegrationMicrosoftTeamsMapOutput() ProjectIntegrationMicrosoftTeamsMapOutput {
	return i.ToProjectIntegrationMicrosoftTeamsMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationMicrosoftTeamsMap) ToProjectIntegrationMicrosoftTeamsMapOutputWithContext(ctx context.Context) ProjectIntegrationMicrosoftTeamsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationMicrosoftTeamsMapOutput)
}

type ProjectIntegrationMicrosoftTeamsOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationMicrosoftTeamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationMicrosoftTeams)(nil)).Elem()
}

func (o ProjectIntegrationMicrosoftTeamsOutput) ToProjectIntegrationMicrosoftTeamsOutput() ProjectIntegrationMicrosoftTeamsOutput {
	return o
}

func (o ProjectIntegrationMicrosoftTeamsOutput) ToProjectIntegrationMicrosoftTeamsOutputWithContext(ctx context.Context) ProjectIntegrationMicrosoftTeamsOutput {
	return o
}

// Whether the integration is active.
func (o ProjectIntegrationMicrosoftTeamsOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”
func (o ProjectIntegrationMicrosoftTeamsOutput) BranchesToBeNotified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.StringPtrOutput { return v.BranchesToBeNotified }).(pulumi.StringPtrOutput)
}

// Enable notifications for confidential issue events
func (o ProjectIntegrationMicrosoftTeamsOutput) ConfidentialIssuesEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.ConfidentialIssuesEvents }).(pulumi.BoolPtrOutput)
}

// Enable notifications for confidential note events
func (o ProjectIntegrationMicrosoftTeamsOutput) ConfidentialNoteEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.ConfidentialNoteEvents }).(pulumi.BoolPtrOutput)
}

// Create time.
func (o ProjectIntegrationMicrosoftTeamsOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Enable notifications for issue events
func (o ProjectIntegrationMicrosoftTeamsOutput) IssuesEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.IssuesEvents }).(pulumi.BoolPtrOutput)
}

// Enable notifications for merge request events
func (o ProjectIntegrationMicrosoftTeamsOutput) MergeRequestsEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.MergeRequestsEvents }).(pulumi.BoolPtrOutput)
}

// Enable notifications for note events
func (o ProjectIntegrationMicrosoftTeamsOutput) NoteEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.NoteEvents }).(pulumi.BoolPtrOutput)
}

// Send notifications for broken pipelines
func (o ProjectIntegrationMicrosoftTeamsOutput) NotifyOnlyBrokenPipelines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.NotifyOnlyBrokenPipelines }).(pulumi.BoolPtrOutput)
}

// Enable notifications for pipeline events
func (o ProjectIntegrationMicrosoftTeamsOutput) PipelineEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.PipelineEvents }).(pulumi.BoolPtrOutput)
}

// ID of the project you want to activate integration on.
func (o ProjectIntegrationMicrosoftTeamsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Enable notifications for push events
func (o ProjectIntegrationMicrosoftTeamsOutput) PushEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.PushEvents }).(pulumi.BoolPtrOutput)
}

// Enable notifications for tag push events
func (o ProjectIntegrationMicrosoftTeamsOutput) TagPushEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.TagPushEvents }).(pulumi.BoolPtrOutput)
}

// Update time.
func (o ProjectIntegrationMicrosoftTeamsOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
func (o ProjectIntegrationMicrosoftTeamsOutput) Webhook() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.StringOutput { return v.Webhook }).(pulumi.StringOutput)
}

// Enable notifications for wiki page events
func (o ProjectIntegrationMicrosoftTeamsOutput) WikiPageEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationMicrosoftTeams) pulumi.BoolPtrOutput { return v.WikiPageEvents }).(pulumi.BoolPtrOutput)
}

type ProjectIntegrationMicrosoftTeamsArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationMicrosoftTeamsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationMicrosoftTeams)(nil)).Elem()
}

func (o ProjectIntegrationMicrosoftTeamsArrayOutput) ToProjectIntegrationMicrosoftTeamsArrayOutput() ProjectIntegrationMicrosoftTeamsArrayOutput {
	return o
}

func (o ProjectIntegrationMicrosoftTeamsArrayOutput) ToProjectIntegrationMicrosoftTeamsArrayOutputWithContext(ctx context.Context) ProjectIntegrationMicrosoftTeamsArrayOutput {
	return o
}

func (o ProjectIntegrationMicrosoftTeamsArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationMicrosoftTeamsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationMicrosoftTeams {
		return vs[0].([]*ProjectIntegrationMicrosoftTeams)[vs[1].(int)]
	}).(ProjectIntegrationMicrosoftTeamsOutput)
}

type ProjectIntegrationMicrosoftTeamsMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationMicrosoftTeamsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationMicrosoftTeams)(nil)).Elem()
}

func (o ProjectIntegrationMicrosoftTeamsMapOutput) ToProjectIntegrationMicrosoftTeamsMapOutput() ProjectIntegrationMicrosoftTeamsMapOutput {
	return o
}

func (o ProjectIntegrationMicrosoftTeamsMapOutput) ToProjectIntegrationMicrosoftTeamsMapOutputWithContext(ctx context.Context) ProjectIntegrationMicrosoftTeamsMapOutput {
	return o
}

func (o ProjectIntegrationMicrosoftTeamsMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationMicrosoftTeamsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationMicrosoftTeams {
		return vs[0].(map[string]*ProjectIntegrationMicrosoftTeams)[vs[1].(string)]
	}).(ProjectIntegrationMicrosoftTeamsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationMicrosoftTeamsInput)(nil)).Elem(), &ProjectIntegrationMicrosoftTeams{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationMicrosoftTeamsArrayInput)(nil)).Elem(), ProjectIntegrationMicrosoftTeamsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationMicrosoftTeamsMapInput)(nil)).Elem(), ProjectIntegrationMicrosoftTeamsMap{})
	pulumi.RegisterOutputType(ProjectIntegrationMicrosoftTeamsOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationMicrosoftTeamsArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationMicrosoftTeamsMapOutput{})
}
