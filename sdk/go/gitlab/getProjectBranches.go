// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectBranches` data source allows details of the branches of a given project to be retrieved.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v5/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.GetProjectBranches(ctx, &gitlab.GetProjectBranchesArgs{
//				Project: "foo/bar/baz",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProjectBranches(ctx *pulumi.Context, args *GetProjectBranchesArgs, opts ...pulumi.InvokeOption) (*GetProjectBranchesResult, error) {
	var rv GetProjectBranchesResult
	err := ctx.Invoke("gitlab:index/getProjectBranches:getProjectBranches", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectBranches.
type GetProjectBranchesArgs struct {
	// ID or URL-encoded path of the project owned by the authenticated user.
	Project string `pulumi:"project"`
}

// A collection of values returned by getProjectBranches.
type GetProjectBranchesResult struct {
	// The list of branches of the project, as defined below.
	Branches []GetProjectBranchesBranch `pulumi:"branches"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID or URL-encoded path of the project owned by the authenticated user.
	Project string `pulumi:"project"`
}

func GetProjectBranchesOutput(ctx *pulumi.Context, args GetProjectBranchesOutputArgs, opts ...pulumi.InvokeOption) GetProjectBranchesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProjectBranchesResult, error) {
			args := v.(GetProjectBranchesArgs)
			r, err := GetProjectBranches(ctx, &args, opts...)
			var s GetProjectBranchesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetProjectBranchesResultOutput)
}

// A collection of arguments for invoking getProjectBranches.
type GetProjectBranchesOutputArgs struct {
	// ID or URL-encoded path of the project owned by the authenticated user.
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetProjectBranchesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesArgs)(nil)).Elem()
}

// A collection of values returned by getProjectBranches.
type GetProjectBranchesResultOutput struct{ *pulumi.OutputState }

func (GetProjectBranchesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectBranchesResult)(nil)).Elem()
}

func (o GetProjectBranchesResultOutput) ToGetProjectBranchesResultOutput() GetProjectBranchesResultOutput {
	return o
}

func (o GetProjectBranchesResultOutput) ToGetProjectBranchesResultOutputWithContext(ctx context.Context) GetProjectBranchesResultOutput {
	return o
}

// The list of branches of the project, as defined below.
func (o GetProjectBranchesResultOutput) Branches() GetProjectBranchesBranchArrayOutput {
	return o.ApplyT(func(v GetProjectBranchesResult) []GetProjectBranchesBranch { return v.Branches }).(GetProjectBranchesBranchArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProjectBranchesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID or URL-encoded path of the project owned by the authenticated user.
func (o GetProjectBranchesResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectBranchesResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectBranchesResultOutput{})
}
