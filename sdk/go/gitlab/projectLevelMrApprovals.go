// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ProjectLevelMrApprovals struct {
	pulumi.CustomResourceState

	// By default, users are able to edit the approval rules in merge requests. If set to true,
	// the approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.
	DisableOverridingApproversPerMergeRequest pulumi.BoolPtrOutput `pulumi:"disableOverridingApproversPerMergeRequest"`
	// Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors
	// also need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.
	MergeRequestsAuthorApproval pulumi.BoolPtrOutput `pulumi:"mergeRequestsAuthorApproval"`
	// Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.
	MergeRequestsDisableCommittersApproval pulumi.BoolPtrOutput `pulumi:"mergeRequestsDisableCommittersApproval"`
	// The ID of the project to change MR approval configuration.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
	ResetApprovalsOnPush pulumi.BoolPtrOutput `pulumi:"resetApprovalsOnPush"`
}

// NewProjectLevelMrApprovals registers a new resource with the given unique name, arguments, and options.
func NewProjectLevelMrApprovals(ctx *pulumi.Context,
	name string, args *ProjectLevelMrApprovalsArgs, opts ...pulumi.ResourceOption) (*ProjectLevelMrApprovals, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil {
		args = &ProjectLevelMrApprovalsArgs{}
	}
	var resource ProjectLevelMrApprovals
	err := ctx.RegisterResource("gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectLevelMrApprovals gets an existing ProjectLevelMrApprovals resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectLevelMrApprovals(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectLevelMrApprovalsState, opts ...pulumi.ResourceOption) (*ProjectLevelMrApprovals, error) {
	var resource ProjectLevelMrApprovals
	err := ctx.ReadResource("gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectLevelMrApprovals resources.
type projectLevelMrApprovalsState struct {
	// By default, users are able to edit the approval rules in merge requests. If set to true,
	// the approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.
	DisableOverridingApproversPerMergeRequest *bool `pulumi:"disableOverridingApproversPerMergeRequest"`
	// Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors
	// also need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.
	MergeRequestsAuthorApproval *bool `pulumi:"mergeRequestsAuthorApproval"`
	// Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.
	MergeRequestsDisableCommittersApproval *bool `pulumi:"mergeRequestsDisableCommittersApproval"`
	// The ID of the project to change MR approval configuration.
	ProjectId *int `pulumi:"projectId"`
	// Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
	ResetApprovalsOnPush *bool `pulumi:"resetApprovalsOnPush"`
}

type ProjectLevelMrApprovalsState struct {
	// By default, users are able to edit the approval rules in merge requests. If set to true,
	// the approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.
	DisableOverridingApproversPerMergeRequest pulumi.BoolPtrInput
	// Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors
	// also need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.
	MergeRequestsAuthorApproval pulumi.BoolPtrInput
	// Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.
	MergeRequestsDisableCommittersApproval pulumi.BoolPtrInput
	// The ID of the project to change MR approval configuration.
	ProjectId pulumi.IntPtrInput
	// Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
	ResetApprovalsOnPush pulumi.BoolPtrInput
}

func (ProjectLevelMrApprovalsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectLevelMrApprovalsState)(nil)).Elem()
}

type projectLevelMrApprovalsArgs struct {
	// By default, users are able to edit the approval rules in merge requests. If set to true,
	// the approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.
	DisableOverridingApproversPerMergeRequest *bool `pulumi:"disableOverridingApproversPerMergeRequest"`
	// Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors
	// also need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.
	MergeRequestsAuthorApproval *bool `pulumi:"mergeRequestsAuthorApproval"`
	// Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.
	MergeRequestsDisableCommittersApproval *bool `pulumi:"mergeRequestsDisableCommittersApproval"`
	// The ID of the project to change MR approval configuration.
	ProjectId int `pulumi:"projectId"`
	// Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
	ResetApprovalsOnPush *bool `pulumi:"resetApprovalsOnPush"`
}

// The set of arguments for constructing a ProjectLevelMrApprovals resource.
type ProjectLevelMrApprovalsArgs struct {
	// By default, users are able to edit the approval rules in merge requests. If set to true,
	// the approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.
	DisableOverridingApproversPerMergeRequest pulumi.BoolPtrInput
	// Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors
	// also need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.
	MergeRequestsAuthorApproval pulumi.BoolPtrInput
	// Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.
	MergeRequestsDisableCommittersApproval pulumi.BoolPtrInput
	// The ID of the project to change MR approval configuration.
	ProjectId pulumi.IntInput
	// Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.
	ResetApprovalsOnPush pulumi.BoolPtrInput
}

func (ProjectLevelMrApprovalsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectLevelMrApprovalsArgs)(nil)).Elem()
}

type ProjectLevelMrApprovalsInput interface {
	pulumi.Input

	ToProjectLevelMrApprovalsOutput() ProjectLevelMrApprovalsOutput
	ToProjectLevelMrApprovalsOutputWithContext(ctx context.Context) ProjectLevelMrApprovalsOutput
}

func (ProjectLevelMrApprovals) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLevelMrApprovals)(nil)).Elem()
}

func (i ProjectLevelMrApprovals) ToProjectLevelMrApprovalsOutput() ProjectLevelMrApprovalsOutput {
	return i.ToProjectLevelMrApprovalsOutputWithContext(context.Background())
}

func (i ProjectLevelMrApprovals) ToProjectLevelMrApprovalsOutputWithContext(ctx context.Context) ProjectLevelMrApprovalsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLevelMrApprovalsOutput)
}

type ProjectLevelMrApprovalsOutput struct {
	*pulumi.OutputState
}

func (ProjectLevelMrApprovalsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLevelMrApprovalsOutput)(nil)).Elem()
}

func (o ProjectLevelMrApprovalsOutput) ToProjectLevelMrApprovalsOutput() ProjectLevelMrApprovalsOutput {
	return o
}

func (o ProjectLevelMrApprovalsOutput) ToProjectLevelMrApprovalsOutputWithContext(ctx context.Context) ProjectLevelMrApprovalsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProjectLevelMrApprovalsOutput{})
}
