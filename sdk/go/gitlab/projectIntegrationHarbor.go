// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationHarbor` resource manages the lifecycle of a project integration with Harbor.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#harbor)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationHarbor(ctx, "harbor", &gitlab.ProjectIntegrationHarborArgs{
//				Project:     awesomeProject.ID(),
//				Url:         pulumi.String("http://harbor.example.com"),
//				ProjectName: pulumi.String("my_project_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_harbor`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_harbor.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationHarbor:ProjectIntegrationHarbor You can import a gitlab_project_integration_harbor state using `<resource> <project_id>`:
// ```
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationHarbor:ProjectIntegrationHarbor harbor 1
// ```
type ProjectIntegrationHarbor struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password pulumi.StringOutput `pulumi:"password"`
	// ID of the GitLab project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Harbor URL. Example: `http://harbor.example.com`
	Url pulumi.StringOutput `pulumi:"url"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolOutput `pulumi:"useInheritedSettings"`
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewProjectIntegrationHarbor registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationHarbor(ctx *pulumi.Context,
	name string, args *ProjectIntegrationHarborArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationHarbor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationHarbor
	err := ctx.RegisterResource("gitlab:index/projectIntegrationHarbor:ProjectIntegrationHarbor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationHarbor gets an existing ProjectIntegrationHarbor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationHarbor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationHarborState, opts ...pulumi.ResourceOption) (*ProjectIntegrationHarbor, error) {
	var resource ProjectIntegrationHarbor
	err := ctx.ReadResource("gitlab:index/projectIntegrationHarbor:ProjectIntegrationHarbor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationHarbor resources.
type projectIntegrationHarborState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password *string `pulumi:"password"`
	// ID of the GitLab project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName *string `pulumi:"projectName"`
	// Harbor URL. Example: `http://harbor.example.com`
	Url *string `pulumi:"url"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings *bool `pulumi:"useInheritedSettings"`
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username *string `pulumi:"username"`
}

type ProjectIntegrationHarborState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password pulumi.StringPtrInput
	// ID of the GitLab project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName pulumi.StringPtrInput
	// Harbor URL. Example: `http://harbor.example.com`
	Url pulumi.StringPtrInput
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolPtrInput
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username pulumi.StringPtrInput
}

func (ProjectIntegrationHarborState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationHarborState)(nil)).Elem()
}

type projectIntegrationHarborArgs struct {
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password string `pulumi:"password"`
	// ID of the GitLab project you want to activate integration on.
	Project string `pulumi:"project"`
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName string `pulumi:"projectName"`
	// Harbor URL. Example: `http://harbor.example.com`
	Url string `pulumi:"url"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings *bool `pulumi:"useInheritedSettings"`
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ProjectIntegrationHarbor resource.
type ProjectIntegrationHarborArgs struct {
	// Password for authentication with the Harbor server, if authentication is required by the server.
	Password pulumi.StringInput
	// ID of the GitLab project you want to activate integration on.
	Project pulumi.StringInput
	// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
	ProjectName pulumi.StringInput
	// Harbor URL. Example: `http://harbor.example.com`
	Url pulumi.StringInput
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolPtrInput
	// Username for authentication with the Harbor server, if authentication is required by the server.
	Username pulumi.StringInput
}

func (ProjectIntegrationHarborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationHarborArgs)(nil)).Elem()
}

type ProjectIntegrationHarborInput interface {
	pulumi.Input

	ToProjectIntegrationHarborOutput() ProjectIntegrationHarborOutput
	ToProjectIntegrationHarborOutputWithContext(ctx context.Context) ProjectIntegrationHarborOutput
}

func (*ProjectIntegrationHarbor) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationHarbor)(nil)).Elem()
}

func (i *ProjectIntegrationHarbor) ToProjectIntegrationHarborOutput() ProjectIntegrationHarborOutput {
	return i.ToProjectIntegrationHarborOutputWithContext(context.Background())
}

func (i *ProjectIntegrationHarbor) ToProjectIntegrationHarborOutputWithContext(ctx context.Context) ProjectIntegrationHarborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationHarborOutput)
}

// ProjectIntegrationHarborArrayInput is an input type that accepts ProjectIntegrationHarborArray and ProjectIntegrationHarborArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationHarborArrayInput` via:
//
//	ProjectIntegrationHarborArray{ ProjectIntegrationHarborArgs{...} }
type ProjectIntegrationHarborArrayInput interface {
	pulumi.Input

	ToProjectIntegrationHarborArrayOutput() ProjectIntegrationHarborArrayOutput
	ToProjectIntegrationHarborArrayOutputWithContext(context.Context) ProjectIntegrationHarborArrayOutput
}

type ProjectIntegrationHarborArray []ProjectIntegrationHarborInput

func (ProjectIntegrationHarborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationHarbor)(nil)).Elem()
}

func (i ProjectIntegrationHarborArray) ToProjectIntegrationHarborArrayOutput() ProjectIntegrationHarborArrayOutput {
	return i.ToProjectIntegrationHarborArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationHarborArray) ToProjectIntegrationHarborArrayOutputWithContext(ctx context.Context) ProjectIntegrationHarborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationHarborArrayOutput)
}

// ProjectIntegrationHarborMapInput is an input type that accepts ProjectIntegrationHarborMap and ProjectIntegrationHarborMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationHarborMapInput` via:
//
//	ProjectIntegrationHarborMap{ "key": ProjectIntegrationHarborArgs{...} }
type ProjectIntegrationHarborMapInput interface {
	pulumi.Input

	ToProjectIntegrationHarborMapOutput() ProjectIntegrationHarborMapOutput
	ToProjectIntegrationHarborMapOutputWithContext(context.Context) ProjectIntegrationHarborMapOutput
}

type ProjectIntegrationHarborMap map[string]ProjectIntegrationHarborInput

func (ProjectIntegrationHarborMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationHarbor)(nil)).Elem()
}

func (i ProjectIntegrationHarborMap) ToProjectIntegrationHarborMapOutput() ProjectIntegrationHarborMapOutput {
	return i.ToProjectIntegrationHarborMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationHarborMap) ToProjectIntegrationHarborMapOutputWithContext(ctx context.Context) ProjectIntegrationHarborMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationHarborMapOutput)
}

type ProjectIntegrationHarborOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationHarborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationHarbor)(nil)).Elem()
}

func (o ProjectIntegrationHarborOutput) ToProjectIntegrationHarborOutput() ProjectIntegrationHarborOutput {
	return o
}

func (o ProjectIntegrationHarborOutput) ToProjectIntegrationHarborOutputWithContext(ctx context.Context) ProjectIntegrationHarborOutput {
	return o
}

// Whether the integration is active.
func (o ProjectIntegrationHarborOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationHarbor) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Password for authentication with the Harbor server, if authentication is required by the server.
func (o ProjectIntegrationHarborOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationHarbor) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ID of the GitLab project you want to activate integration on.
func (o ProjectIntegrationHarborOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationHarbor) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
func (o ProjectIntegrationHarborOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationHarbor) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Harbor URL. Example: `http://harbor.example.com`
func (o ProjectIntegrationHarborOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationHarbor) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Indicates whether or not to inherit default settings. Defaults to false.
func (o ProjectIntegrationHarborOutput) UseInheritedSettings() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationHarbor) pulumi.BoolOutput { return v.UseInheritedSettings }).(pulumi.BoolOutput)
}

// Username for authentication with the Harbor server, if authentication is required by the server.
func (o ProjectIntegrationHarborOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationHarbor) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ProjectIntegrationHarborArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationHarborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationHarbor)(nil)).Elem()
}

func (o ProjectIntegrationHarborArrayOutput) ToProjectIntegrationHarborArrayOutput() ProjectIntegrationHarborArrayOutput {
	return o
}

func (o ProjectIntegrationHarborArrayOutput) ToProjectIntegrationHarborArrayOutputWithContext(ctx context.Context) ProjectIntegrationHarborArrayOutput {
	return o
}

func (o ProjectIntegrationHarborArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationHarborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationHarbor {
		return vs[0].([]*ProjectIntegrationHarbor)[vs[1].(int)]
	}).(ProjectIntegrationHarborOutput)
}

type ProjectIntegrationHarborMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationHarborMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationHarbor)(nil)).Elem()
}

func (o ProjectIntegrationHarborMapOutput) ToProjectIntegrationHarborMapOutput() ProjectIntegrationHarborMapOutput {
	return o
}

func (o ProjectIntegrationHarborMapOutput) ToProjectIntegrationHarborMapOutputWithContext(ctx context.Context) ProjectIntegrationHarborMapOutput {
	return o
}

func (o ProjectIntegrationHarborMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationHarborOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationHarbor {
		return vs[0].(map[string]*ProjectIntegrationHarbor)[vs[1].(string)]
	}).(ProjectIntegrationHarborOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationHarborInput)(nil)).Elem(), &ProjectIntegrationHarbor{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationHarborArrayInput)(nil)).Elem(), ProjectIntegrationHarborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationHarborMapInput)(nil)).Elem(), ProjectIntegrationHarborMap{})
	pulumi.RegisterOutputType(ProjectIntegrationHarborOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationHarborArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationHarborMapOutput{})
}
