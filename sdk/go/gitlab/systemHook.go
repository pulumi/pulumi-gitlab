// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `SystemHook` resource allows to manage the lifecycle of a system hook.
//
// > This resource requires GitLab 14.9
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/system_hooks.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v5/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewSystemHook(ctx, "example", &gitlab.SystemHookArgs{
//				EnableSslVerification:  pulumi.Bool(true),
//				MergeRequestsEvents:    pulumi.Bool(true),
//				PushEvents:             pulumi.Bool(true),
//				RepositoryUpdateEvents: pulumi.Bool(true),
//				TagPushEvents:          pulumi.Bool(true),
//				Token:                  pulumi.String("secret-token"),
//				Url:                    pulumi.String("https://example.com/hook-%d"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a system hook using the hook id `{hook-id}`, e.g.
//
// ```sh
//
//	$ pulumi import gitlab:index/systemHook:SystemHook example 42
//
// ```
//
//	NOTEthe `token` attribute won't be available for imported resources.
type SystemHook struct {
	pulumi.CustomResourceState

	// The date and time the hook was created in ISO8601 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Do SSL verification when triggering the hook.
	EnableSslVerification pulumi.BoolPtrOutput `pulumi:"enableSslVerification"`
	// Trigger hook on merge requests events.
	MergeRequestsEvents pulumi.BoolPtrOutput `pulumi:"mergeRequestsEvents"`
	// When true, the hook fires on push events.
	PushEvents pulumi.BoolPtrOutput `pulumi:"pushEvents"`
	// Trigger hook on repository update events.
	RepositoryUpdateEvents pulumi.BoolPtrOutput `pulumi:"repositoryUpdateEvents"`
	// When true, the hook fires on new tags being pushed.
	TagPushEvents pulumi.BoolPtrOutput `pulumi:"tagPushEvents"`
	// Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// The hook URL.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSystemHook registers a new resource with the given unique name, arguments, and options.
func NewSystemHook(ctx *pulumi.Context,
	name string, args *SystemHookArgs, opts ...pulumi.ResourceOption) (*SystemHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	var resource SystemHook
	err := ctx.RegisterResource("gitlab:index/systemHook:SystemHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemHook gets an existing SystemHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemHookState, opts ...pulumi.ResourceOption) (*SystemHook, error) {
	var resource SystemHook
	err := ctx.ReadResource("gitlab:index/systemHook:SystemHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemHook resources.
type systemHookState struct {
	// The date and time the hook was created in ISO8601 format.
	CreatedAt *string `pulumi:"createdAt"`
	// Do SSL verification when triggering the hook.
	EnableSslVerification *bool `pulumi:"enableSslVerification"`
	// Trigger hook on merge requests events.
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// When true, the hook fires on push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Trigger hook on repository update events.
	RepositoryUpdateEvents *bool `pulumi:"repositoryUpdateEvents"`
	// When true, the hook fires on new tags being pushed.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.
	Token *string `pulumi:"token"`
	// The hook URL.
	Url *string `pulumi:"url"`
}

type SystemHookState struct {
	// The date and time the hook was created in ISO8601 format.
	CreatedAt pulumi.StringPtrInput
	// Do SSL verification when triggering the hook.
	EnableSslVerification pulumi.BoolPtrInput
	// Trigger hook on merge requests events.
	MergeRequestsEvents pulumi.BoolPtrInput
	// When true, the hook fires on push events.
	PushEvents pulumi.BoolPtrInput
	// Trigger hook on repository update events.
	RepositoryUpdateEvents pulumi.BoolPtrInput
	// When true, the hook fires on new tags being pushed.
	TagPushEvents pulumi.BoolPtrInput
	// Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.
	Token pulumi.StringPtrInput
	// The hook URL.
	Url pulumi.StringPtrInput
}

func (SystemHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemHookState)(nil)).Elem()
}

type systemHookArgs struct {
	// Do SSL verification when triggering the hook.
	EnableSslVerification *bool `pulumi:"enableSslVerification"`
	// Trigger hook on merge requests events.
	MergeRequestsEvents *bool `pulumi:"mergeRequestsEvents"`
	// When true, the hook fires on push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Trigger hook on repository update events.
	RepositoryUpdateEvents *bool `pulumi:"repositoryUpdateEvents"`
	// When true, the hook fires on new tags being pushed.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.
	Token *string `pulumi:"token"`
	// The hook URL.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a SystemHook resource.
type SystemHookArgs struct {
	// Do SSL verification when triggering the hook.
	EnableSslVerification pulumi.BoolPtrInput
	// Trigger hook on merge requests events.
	MergeRequestsEvents pulumi.BoolPtrInput
	// When true, the hook fires on push events.
	PushEvents pulumi.BoolPtrInput
	// Trigger hook on repository update events.
	RepositoryUpdateEvents pulumi.BoolPtrInput
	// When true, the hook fires on new tags being pushed.
	TagPushEvents pulumi.BoolPtrInput
	// Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.
	Token pulumi.StringPtrInput
	// The hook URL.
	Url pulumi.StringInput
}

func (SystemHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemHookArgs)(nil)).Elem()
}

type SystemHookInput interface {
	pulumi.Input

	ToSystemHookOutput() SystemHookOutput
	ToSystemHookOutputWithContext(ctx context.Context) SystemHookOutput
}

func (*SystemHook) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemHook)(nil)).Elem()
}

func (i *SystemHook) ToSystemHookOutput() SystemHookOutput {
	return i.ToSystemHookOutputWithContext(context.Background())
}

func (i *SystemHook) ToSystemHookOutputWithContext(ctx context.Context) SystemHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemHookOutput)
}

// SystemHookArrayInput is an input type that accepts SystemHookArray and SystemHookArrayOutput values.
// You can construct a concrete instance of `SystemHookArrayInput` via:
//
//	SystemHookArray{ SystemHookArgs{...} }
type SystemHookArrayInput interface {
	pulumi.Input

	ToSystemHookArrayOutput() SystemHookArrayOutput
	ToSystemHookArrayOutputWithContext(context.Context) SystemHookArrayOutput
}

type SystemHookArray []SystemHookInput

func (SystemHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemHook)(nil)).Elem()
}

func (i SystemHookArray) ToSystemHookArrayOutput() SystemHookArrayOutput {
	return i.ToSystemHookArrayOutputWithContext(context.Background())
}

func (i SystemHookArray) ToSystemHookArrayOutputWithContext(ctx context.Context) SystemHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemHookArrayOutput)
}

// SystemHookMapInput is an input type that accepts SystemHookMap and SystemHookMapOutput values.
// You can construct a concrete instance of `SystemHookMapInput` via:
//
//	SystemHookMap{ "key": SystemHookArgs{...} }
type SystemHookMapInput interface {
	pulumi.Input

	ToSystemHookMapOutput() SystemHookMapOutput
	ToSystemHookMapOutputWithContext(context.Context) SystemHookMapOutput
}

type SystemHookMap map[string]SystemHookInput

func (SystemHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemHook)(nil)).Elem()
}

func (i SystemHookMap) ToSystemHookMapOutput() SystemHookMapOutput {
	return i.ToSystemHookMapOutputWithContext(context.Background())
}

func (i SystemHookMap) ToSystemHookMapOutputWithContext(ctx context.Context) SystemHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemHookMapOutput)
}

type SystemHookOutput struct{ *pulumi.OutputState }

func (SystemHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemHook)(nil)).Elem()
}

func (o SystemHookOutput) ToSystemHookOutput() SystemHookOutput {
	return o
}

func (o SystemHookOutput) ToSystemHookOutputWithContext(ctx context.Context) SystemHookOutput {
	return o
}

// The date and time the hook was created in ISO8601 format.
func (o SystemHookOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Do SSL verification when triggering the hook.
func (o SystemHookOutput) EnableSslVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.BoolPtrOutput { return v.EnableSslVerification }).(pulumi.BoolPtrOutput)
}

// Trigger hook on merge requests events.
func (o SystemHookOutput) MergeRequestsEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.BoolPtrOutput { return v.MergeRequestsEvents }).(pulumi.BoolPtrOutput)
}

// When true, the hook fires on push events.
func (o SystemHookOutput) PushEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.BoolPtrOutput { return v.PushEvents }).(pulumi.BoolPtrOutput)
}

// Trigger hook on repository update events.
func (o SystemHookOutput) RepositoryUpdateEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.BoolPtrOutput { return v.RepositoryUpdateEvents }).(pulumi.BoolPtrOutput)
}

// When true, the hook fires on new tags being pushed.
func (o SystemHookOutput) TagPushEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.BoolPtrOutput { return v.TagPushEvents }).(pulumi.BoolPtrOutput)
}

// Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.
func (o SystemHookOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// The hook URL.
func (o SystemHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemHook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type SystemHookArrayOutput struct{ *pulumi.OutputState }

func (SystemHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemHook)(nil)).Elem()
}

func (o SystemHookArrayOutput) ToSystemHookArrayOutput() SystemHookArrayOutput {
	return o
}

func (o SystemHookArrayOutput) ToSystemHookArrayOutputWithContext(ctx context.Context) SystemHookArrayOutput {
	return o
}

func (o SystemHookArrayOutput) Index(i pulumi.IntInput) SystemHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemHook {
		return vs[0].([]*SystemHook)[vs[1].(int)]
	}).(SystemHookOutput)
}

type SystemHookMapOutput struct{ *pulumi.OutputState }

func (SystemHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemHook)(nil)).Elem()
}

func (o SystemHookMapOutput) ToSystemHookMapOutput() SystemHookMapOutput {
	return o
}

func (o SystemHookMapOutput) ToSystemHookMapOutputWithContext(ctx context.Context) SystemHookMapOutput {
	return o
}

func (o SystemHookMapOutput) MapIndex(k pulumi.StringInput) SystemHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemHook {
		return vs[0].(map[string]*SystemHook)[vs[1].(string)]
	}).(SystemHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemHookInput)(nil)).Elem(), &SystemHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemHookArrayInput)(nil)).Elem(), SystemHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemHookMapInput)(nil)).Elem(), SystemHookMap{})
	pulumi.RegisterOutputType(SystemHookOutput{})
	pulumi.RegisterOutputType(SystemHookArrayOutput{})
	pulumi.RegisterOutputType(SystemHookMapOutput{})
}
