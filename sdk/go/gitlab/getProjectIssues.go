// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectIssues` data source allows to retrieve details about issues in a project.
//
// **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := gitlab.LookupProject(ctx, &GetProjectArgs{
// 			Id: pulumi.StringRef("foo/bar/baz"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = gitlab.GetProjectIssues(ctx, &GetProjectIssuesArgs{
// 			Project: foo.Id,
// 			Search:  pulumi.StringRef("foo"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetProjectIssues(ctx *pulumi.Context, args *GetProjectIssuesArgs, opts ...pulumi.InvokeOption) (*GetProjectIssuesResult, error) {
	var rv GetProjectIssuesResult
	err := ctx.Invoke("gitlab:index/getProjectIssues:getProjectIssues", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectIssues.
type GetProjectIssuesArgs struct {
	AssigneeId          *int     `pulumi:"assigneeId"`
	AssigneeUsername    *string  `pulumi:"assigneeUsername"`
	AuthorId            *int     `pulumi:"authorId"`
	Confidential        *bool    `pulumi:"confidential"`
	CreatedAfter        *string  `pulumi:"createdAfter"`
	CreatedBefore       *string  `pulumi:"createdBefore"`
	DueDate             *string  `pulumi:"dueDate"`
	Iids                []int    `pulumi:"iids"`
	IssueType           *string  `pulumi:"issueType"`
	Labels              []string `pulumi:"labels"`
	Milestone           *string  `pulumi:"milestone"`
	MyReactionEmoji     *string  `pulumi:"myReactionEmoji"`
	NotAssigneeIds      []int    `pulumi:"notAssigneeIds"`
	NotAuthorIds        []int    `pulumi:"notAuthorIds"`
	NotLabels           []string `pulumi:"notLabels"`
	NotMilestones       []string `pulumi:"notMilestones"`
	NotMyReactionEmojis []string `pulumi:"notMyReactionEmojis"`
	OrderBy             *string  `pulumi:"orderBy"`
	Project             string   `pulumi:"project"`
	Scope               *string  `pulumi:"scope"`
	Search              *string  `pulumi:"search"`
	Sort                *string  `pulumi:"sort"`
	UpdatedAfter        *string  `pulumi:"updatedAfter"`
	UpdatedBefore       *string  `pulumi:"updatedBefore"`
	Weight              *int     `pulumi:"weight"`
	WithLabelsDetails   *bool    `pulumi:"withLabelsDetails"`
}

// A collection of values returned by getProjectIssues.
type GetProjectIssuesResult struct {
	AssigneeId       *int    `pulumi:"assigneeId"`
	AssigneeUsername *string `pulumi:"assigneeUsername"`
	AuthorId         *int    `pulumi:"authorId"`
	Confidential     *bool   `pulumi:"confidential"`
	CreatedAfter     *string `pulumi:"createdAfter"`
	CreatedBefore    *string `pulumi:"createdBefore"`
	DueDate          *string `pulumi:"dueDate"`
	// The provider-assigned unique ID for this managed resource.
	Id                  string                  `pulumi:"id"`
	Iids                []int                   `pulumi:"iids"`
	IssueType           *string                 `pulumi:"issueType"`
	Issues              []GetProjectIssuesIssue `pulumi:"issues"`
	Labels              []string                `pulumi:"labels"`
	Milestone           *string                 `pulumi:"milestone"`
	MyReactionEmoji     *string                 `pulumi:"myReactionEmoji"`
	NotAssigneeIds      []int                   `pulumi:"notAssigneeIds"`
	NotAuthorIds        []int                   `pulumi:"notAuthorIds"`
	NotLabels           []string                `pulumi:"notLabels"`
	NotMilestones       []string                `pulumi:"notMilestones"`
	NotMyReactionEmojis []string                `pulumi:"notMyReactionEmojis"`
	OrderBy             *string                 `pulumi:"orderBy"`
	Project             string                  `pulumi:"project"`
	Scope               *string                 `pulumi:"scope"`
	Search              *string                 `pulumi:"search"`
	Sort                *string                 `pulumi:"sort"`
	UpdatedAfter        *string                 `pulumi:"updatedAfter"`
	UpdatedBefore       *string                 `pulumi:"updatedBefore"`
	Weight              *int                    `pulumi:"weight"`
	WithLabelsDetails   *bool                   `pulumi:"withLabelsDetails"`
}

func GetProjectIssuesOutput(ctx *pulumi.Context, args GetProjectIssuesOutputArgs, opts ...pulumi.InvokeOption) GetProjectIssuesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProjectIssuesResult, error) {
			args := v.(GetProjectIssuesArgs)
			r, err := GetProjectIssues(ctx, &args, opts...)
			var s GetProjectIssuesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetProjectIssuesResultOutput)
}

// A collection of arguments for invoking getProjectIssues.
type GetProjectIssuesOutputArgs struct {
	AssigneeId          pulumi.IntPtrInput      `pulumi:"assigneeId"`
	AssigneeUsername    pulumi.StringPtrInput   `pulumi:"assigneeUsername"`
	AuthorId            pulumi.IntPtrInput      `pulumi:"authorId"`
	Confidential        pulumi.BoolPtrInput     `pulumi:"confidential"`
	CreatedAfter        pulumi.StringPtrInput   `pulumi:"createdAfter"`
	CreatedBefore       pulumi.StringPtrInput   `pulumi:"createdBefore"`
	DueDate             pulumi.StringPtrInput   `pulumi:"dueDate"`
	Iids                pulumi.IntArrayInput    `pulumi:"iids"`
	IssueType           pulumi.StringPtrInput   `pulumi:"issueType"`
	Labels              pulumi.StringArrayInput `pulumi:"labels"`
	Milestone           pulumi.StringPtrInput   `pulumi:"milestone"`
	MyReactionEmoji     pulumi.StringPtrInput   `pulumi:"myReactionEmoji"`
	NotAssigneeIds      pulumi.IntArrayInput    `pulumi:"notAssigneeIds"`
	NotAuthorIds        pulumi.IntArrayInput    `pulumi:"notAuthorIds"`
	NotLabels           pulumi.StringArrayInput `pulumi:"notLabels"`
	NotMilestones       pulumi.StringArrayInput `pulumi:"notMilestones"`
	NotMyReactionEmojis pulumi.StringArrayInput `pulumi:"notMyReactionEmojis"`
	OrderBy             pulumi.StringPtrInput   `pulumi:"orderBy"`
	Project             pulumi.StringInput      `pulumi:"project"`
	Scope               pulumi.StringPtrInput   `pulumi:"scope"`
	Search              pulumi.StringPtrInput   `pulumi:"search"`
	Sort                pulumi.StringPtrInput   `pulumi:"sort"`
	UpdatedAfter        pulumi.StringPtrInput   `pulumi:"updatedAfter"`
	UpdatedBefore       pulumi.StringPtrInput   `pulumi:"updatedBefore"`
	Weight              pulumi.IntPtrInput      `pulumi:"weight"`
	WithLabelsDetails   pulumi.BoolPtrInput     `pulumi:"withLabelsDetails"`
}

func (GetProjectIssuesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesArgs)(nil)).Elem()
}

// A collection of values returned by getProjectIssues.
type GetProjectIssuesResultOutput struct{ *pulumi.OutputState }

func (GetProjectIssuesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIssuesResult)(nil)).Elem()
}

func (o GetProjectIssuesResultOutput) ToGetProjectIssuesResultOutput() GetProjectIssuesResultOutput {
	return o
}

func (o GetProjectIssuesResultOutput) ToGetProjectIssuesResultOutputWithContext(ctx context.Context) GetProjectIssuesResultOutput {
	return o
}

func (o GetProjectIssuesResultOutput) AssigneeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *int { return v.AssigneeId }).(pulumi.IntPtrOutput)
}

func (o GetProjectIssuesResultOutput) AssigneeUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.AssigneeUsername }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) AuthorId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *int { return v.AuthorId }).(pulumi.IntPtrOutput)
}

func (o GetProjectIssuesResultOutput) Confidential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *bool { return v.Confidential }).(pulumi.BoolPtrOutput)
}

func (o GetProjectIssuesResultOutput) CreatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.CreatedAfter }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) CreatedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.CreatedBefore }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) DueDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.DueDate }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProjectIssuesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProjectIssuesResultOutput) Iids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []int { return v.Iids }).(pulumi.IntArrayOutput)
}

func (o GetProjectIssuesResultOutput) IssueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.IssueType }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) Issues() GetProjectIssuesIssueArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []GetProjectIssuesIssue { return v.Issues }).(GetProjectIssuesIssueArrayOutput)
}

func (o GetProjectIssuesResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o GetProjectIssuesResultOutput) Milestone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.Milestone }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) MyReactionEmoji() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.MyReactionEmoji }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) NotAssigneeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []int { return v.NotAssigneeIds }).(pulumi.IntArrayOutput)
}

func (o GetProjectIssuesResultOutput) NotAuthorIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []int { return v.NotAuthorIds }).(pulumi.IntArrayOutput)
}

func (o GetProjectIssuesResultOutput) NotLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []string { return v.NotLabels }).(pulumi.StringArrayOutput)
}

func (o GetProjectIssuesResultOutput) NotMilestones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []string { return v.NotMilestones }).(pulumi.StringArrayOutput)
}

func (o GetProjectIssuesResultOutput) NotMyReactionEmojis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) []string { return v.NotMyReactionEmojis }).(pulumi.StringArrayOutput)
}

func (o GetProjectIssuesResultOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetProjectIssuesResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) Search() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.Search }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) Sort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.Sort }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) UpdatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.UpdatedAfter }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) UpdatedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *string { return v.UpdatedBefore }).(pulumi.StringPtrOutput)
}

func (o GetProjectIssuesResultOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

func (o GetProjectIssuesResultOutput) WithLabelsDetails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProjectIssuesResult) *bool { return v.WithLabelsDetails }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectIssuesResultOutput{})
}
