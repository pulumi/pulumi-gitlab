// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectWikiPage` resource allows managing the lifecycle of a project wiki page.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/wikis/)
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_wiki_page`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_wiki_page.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// You can import gitlab_project_wiki_page state using the project ID, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectWikiPage:ProjectWikiPage test 12345:my-wiki-page
// ```
type ProjectWikiPage struct {
	pulumi.CustomResourceState

	// Content of the wiki page. Must be at least 1 character long.
	Content pulumi.StringOutput `pulumi:"content"`
	// The encoding used for the wiki page content.
	Encoding pulumi.StringOutput `pulumi:"encoding"`
	// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
	Format pulumi.StringOutput `pulumi:"format"`
	// The ID or URL-encoded path of the project.
	Project pulumi.StringOutput `pulumi:"project"`
	// Slug of the wiki page.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Title of the wiki page.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewProjectWikiPage registers a new resource with the given unique name, arguments, and options.
func NewProjectWikiPage(ctx *pulumi.Context,
	name string, args *ProjectWikiPageArgs, opts ...pulumi.ResourceOption) (*ProjectWikiPage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectWikiPage
	err := ctx.RegisterResource("gitlab:index/projectWikiPage:ProjectWikiPage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectWikiPage gets an existing ProjectWikiPage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectWikiPage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectWikiPageState, opts ...pulumi.ResourceOption) (*ProjectWikiPage, error) {
	var resource ProjectWikiPage
	err := ctx.ReadResource("gitlab:index/projectWikiPage:ProjectWikiPage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectWikiPage resources.
type projectWikiPageState struct {
	// Content of the wiki page. Must be at least 1 character long.
	Content *string `pulumi:"content"`
	// The encoding used for the wiki page content.
	Encoding *string `pulumi:"encoding"`
	// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
	Format *string `pulumi:"format"`
	// The ID or URL-encoded path of the project.
	Project *string `pulumi:"project"`
	// Slug of the wiki page.
	Slug *string `pulumi:"slug"`
	// Title of the wiki page.
	Title *string `pulumi:"title"`
}

type ProjectWikiPageState struct {
	// Content of the wiki page. Must be at least 1 character long.
	Content pulumi.StringPtrInput
	// The encoding used for the wiki page content.
	Encoding pulumi.StringPtrInput
	// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
	Format pulumi.StringPtrInput
	// The ID or URL-encoded path of the project.
	Project pulumi.StringPtrInput
	// Slug of the wiki page.
	Slug pulumi.StringPtrInput
	// Title of the wiki page.
	Title pulumi.StringPtrInput
}

func (ProjectWikiPageState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectWikiPageState)(nil)).Elem()
}

type projectWikiPageArgs struct {
	// Content of the wiki page. Must be at least 1 character long.
	Content string `pulumi:"content"`
	// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
	Format *string `pulumi:"format"`
	// The ID or URL-encoded path of the project.
	Project string `pulumi:"project"`
	// Title of the wiki page.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a ProjectWikiPage resource.
type ProjectWikiPageArgs struct {
	// Content of the wiki page. Must be at least 1 character long.
	Content pulumi.StringInput
	// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
	Format pulumi.StringPtrInput
	// The ID or URL-encoded path of the project.
	Project pulumi.StringInput
	// Title of the wiki page.
	Title pulumi.StringInput
}

func (ProjectWikiPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectWikiPageArgs)(nil)).Elem()
}

type ProjectWikiPageInput interface {
	pulumi.Input

	ToProjectWikiPageOutput() ProjectWikiPageOutput
	ToProjectWikiPageOutputWithContext(ctx context.Context) ProjectWikiPageOutput
}

func (*ProjectWikiPage) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectWikiPage)(nil)).Elem()
}

func (i *ProjectWikiPage) ToProjectWikiPageOutput() ProjectWikiPageOutput {
	return i.ToProjectWikiPageOutputWithContext(context.Background())
}

func (i *ProjectWikiPage) ToProjectWikiPageOutputWithContext(ctx context.Context) ProjectWikiPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectWikiPageOutput)
}

// ProjectWikiPageArrayInput is an input type that accepts ProjectWikiPageArray and ProjectWikiPageArrayOutput values.
// You can construct a concrete instance of `ProjectWikiPageArrayInput` via:
//
//	ProjectWikiPageArray{ ProjectWikiPageArgs{...} }
type ProjectWikiPageArrayInput interface {
	pulumi.Input

	ToProjectWikiPageArrayOutput() ProjectWikiPageArrayOutput
	ToProjectWikiPageArrayOutputWithContext(context.Context) ProjectWikiPageArrayOutput
}

type ProjectWikiPageArray []ProjectWikiPageInput

func (ProjectWikiPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectWikiPage)(nil)).Elem()
}

func (i ProjectWikiPageArray) ToProjectWikiPageArrayOutput() ProjectWikiPageArrayOutput {
	return i.ToProjectWikiPageArrayOutputWithContext(context.Background())
}

func (i ProjectWikiPageArray) ToProjectWikiPageArrayOutputWithContext(ctx context.Context) ProjectWikiPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectWikiPageArrayOutput)
}

// ProjectWikiPageMapInput is an input type that accepts ProjectWikiPageMap and ProjectWikiPageMapOutput values.
// You can construct a concrete instance of `ProjectWikiPageMapInput` via:
//
//	ProjectWikiPageMap{ "key": ProjectWikiPageArgs{...} }
type ProjectWikiPageMapInput interface {
	pulumi.Input

	ToProjectWikiPageMapOutput() ProjectWikiPageMapOutput
	ToProjectWikiPageMapOutputWithContext(context.Context) ProjectWikiPageMapOutput
}

type ProjectWikiPageMap map[string]ProjectWikiPageInput

func (ProjectWikiPageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectWikiPage)(nil)).Elem()
}

func (i ProjectWikiPageMap) ToProjectWikiPageMapOutput() ProjectWikiPageMapOutput {
	return i.ToProjectWikiPageMapOutputWithContext(context.Background())
}

func (i ProjectWikiPageMap) ToProjectWikiPageMapOutputWithContext(ctx context.Context) ProjectWikiPageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectWikiPageMapOutput)
}

type ProjectWikiPageOutput struct{ *pulumi.OutputState }

func (ProjectWikiPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectWikiPage)(nil)).Elem()
}

func (o ProjectWikiPageOutput) ToProjectWikiPageOutput() ProjectWikiPageOutput {
	return o
}

func (o ProjectWikiPageOutput) ToProjectWikiPageOutputWithContext(ctx context.Context) ProjectWikiPageOutput {
	return o
}

// Content of the wiki page. Must be at least 1 character long.
func (o ProjectWikiPageOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectWikiPage) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The encoding used for the wiki page content.
func (o ProjectWikiPageOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectWikiPage) pulumi.StringOutput { return v.Encoding }).(pulumi.StringOutput)
}

// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
func (o ProjectWikiPageOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectWikiPage) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// The ID or URL-encoded path of the project.
func (o ProjectWikiPageOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectWikiPage) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Slug of the wiki page.
func (o ProjectWikiPageOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectWikiPage) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Title of the wiki page.
func (o ProjectWikiPageOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectWikiPage) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type ProjectWikiPageArrayOutput struct{ *pulumi.OutputState }

func (ProjectWikiPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectWikiPage)(nil)).Elem()
}

func (o ProjectWikiPageArrayOutput) ToProjectWikiPageArrayOutput() ProjectWikiPageArrayOutput {
	return o
}

func (o ProjectWikiPageArrayOutput) ToProjectWikiPageArrayOutputWithContext(ctx context.Context) ProjectWikiPageArrayOutput {
	return o
}

func (o ProjectWikiPageArrayOutput) Index(i pulumi.IntInput) ProjectWikiPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectWikiPage {
		return vs[0].([]*ProjectWikiPage)[vs[1].(int)]
	}).(ProjectWikiPageOutput)
}

type ProjectWikiPageMapOutput struct{ *pulumi.OutputState }

func (ProjectWikiPageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectWikiPage)(nil)).Elem()
}

func (o ProjectWikiPageMapOutput) ToProjectWikiPageMapOutput() ProjectWikiPageMapOutput {
	return o
}

func (o ProjectWikiPageMapOutput) ToProjectWikiPageMapOutputWithContext(ctx context.Context) ProjectWikiPageMapOutput {
	return o
}

func (o ProjectWikiPageMapOutput) MapIndex(k pulumi.StringInput) ProjectWikiPageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectWikiPage {
		return vs[0].(map[string]*ProjectWikiPage)[vs[1].(string)]
	}).(ProjectWikiPageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectWikiPageInput)(nil)).Elem(), &ProjectWikiPage{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectWikiPageArrayInput)(nil)).Elem(), ProjectWikiPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectWikiPageMapInput)(nil)).Elem(), ProjectWikiPageMap{})
	pulumi.RegisterOutputType(ProjectWikiPageOutput{})
	pulumi.RegisterOutputType(ProjectWikiPageArrayOutput{})
	pulumi.RegisterOutputType(ProjectWikiPageMapOutput{})
}
