// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := gitlab.NewGroup(ctx, "foo", &gitlab.GroupArgs{
//				Name:        pulumi.String("test_group"),
//				Path:        pulumi.String("test_group"),
//				Description: pulumi.String("An example group"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewGroupLevelMrApprovals(ctx, "foo", &gitlab.GroupLevelMrApprovalsArgs{
//				Group:                  foo.ID(),
//				AllowAuthorApproval:    pulumi.Bool(true),
//				AllowCommitterApproval: pulumi.Bool(true),
//				AllowOverridesToApproverListPerMergeRequest: pulumi.Bool(true),
//				RetainApprovalsOnPush:                       pulumi.Bool(true),
//				SelectiveCodeOwnerRemovals:                  false,
//				RequireReauthenticationToApprove:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_level_mr_approvals`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_group_level_mr_approvals.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// ```sh
// $ pulumi import gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals You can import an approval configuration state using `<resource> <group_id>`.
// ```
//
// For example:
//
// ```sh
// $ pulumi import gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals foo 1234
// ```
type GroupLevelMrApprovals struct {
	pulumi.CustomResourceState

	// Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
	AllowAuthorApproval pulumi.BoolOutput `pulumi:"allowAuthorApproval"`
	// Allow or prevent committers from self approving merge requests.
	AllowCommitterApproval pulumi.BoolOutput `pulumi:"allowCommitterApproval"`
	// Allow or prevent overriding approvers per merge request.
	AllowOverridesToApproverListPerMergeRequest pulumi.BoolOutput `pulumi:"allowOverridesToApproverListPerMergeRequest"`
	// The ID or URL-encoded path of the group.
	Group                 pulumi.StringOutput `pulumi:"group"`
	KeepSettingsOnDestroy pulumi.BoolOutput   `pulumi:"keepSettingsOnDestroy"`
	// Require approver to authenticate before adding the approval.
	RequireReauthenticationToApprove pulumi.BoolOutput `pulumi:"requireReauthenticationToApprove"`
	// Retain approval count on a new push.
	RetainApprovalsOnPush pulumi.BoolOutput `pulumi:"retainApprovalsOnPush"`
}

// NewGroupLevelMrApprovals registers a new resource with the given unique name, arguments, and options.
func NewGroupLevelMrApprovals(ctx *pulumi.Context,
	name string, args *GroupLevelMrApprovalsArgs, opts ...pulumi.ResourceOption) (*GroupLevelMrApprovals, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupLevelMrApprovals
	err := ctx.RegisterResource("gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupLevelMrApprovals gets an existing GroupLevelMrApprovals resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupLevelMrApprovals(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupLevelMrApprovalsState, opts ...pulumi.ResourceOption) (*GroupLevelMrApprovals, error) {
	var resource GroupLevelMrApprovals
	err := ctx.ReadResource("gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupLevelMrApprovals resources.
type groupLevelMrApprovalsState struct {
	// Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
	AllowAuthorApproval *bool `pulumi:"allowAuthorApproval"`
	// Allow or prevent committers from self approving merge requests.
	AllowCommitterApproval *bool `pulumi:"allowCommitterApproval"`
	// Allow or prevent overriding approvers per merge request.
	AllowOverridesToApproverListPerMergeRequest *bool `pulumi:"allowOverridesToApproverListPerMergeRequest"`
	// The ID or URL-encoded path of the group.
	Group                 *string `pulumi:"group"`
	KeepSettingsOnDestroy *bool   `pulumi:"keepSettingsOnDestroy"`
	// Require approver to authenticate before adding the approval.
	RequireReauthenticationToApprove *bool `pulumi:"requireReauthenticationToApprove"`
	// Retain approval count on a new push.
	RetainApprovalsOnPush *bool `pulumi:"retainApprovalsOnPush"`
}

type GroupLevelMrApprovalsState struct {
	// Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
	AllowAuthorApproval pulumi.BoolPtrInput
	// Allow or prevent committers from self approving merge requests.
	AllowCommitterApproval pulumi.BoolPtrInput
	// Allow or prevent overriding approvers per merge request.
	AllowOverridesToApproverListPerMergeRequest pulumi.BoolPtrInput
	// The ID or URL-encoded path of the group.
	Group                 pulumi.StringPtrInput
	KeepSettingsOnDestroy pulumi.BoolPtrInput
	// Require approver to authenticate before adding the approval.
	RequireReauthenticationToApprove pulumi.BoolPtrInput
	// Retain approval count on a new push.
	RetainApprovalsOnPush pulumi.BoolPtrInput
}

func (GroupLevelMrApprovalsState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupLevelMrApprovalsState)(nil)).Elem()
}

type groupLevelMrApprovalsArgs struct {
	// Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
	AllowAuthorApproval *bool `pulumi:"allowAuthorApproval"`
	// Allow or prevent committers from self approving merge requests.
	AllowCommitterApproval *bool `pulumi:"allowCommitterApproval"`
	// Allow or prevent overriding approvers per merge request.
	AllowOverridesToApproverListPerMergeRequest *bool `pulumi:"allowOverridesToApproverListPerMergeRequest"`
	// The ID or URL-encoded path of the group.
	Group                 string `pulumi:"group"`
	KeepSettingsOnDestroy *bool  `pulumi:"keepSettingsOnDestroy"`
	// Require approver to authenticate before adding the approval.
	RequireReauthenticationToApprove *bool `pulumi:"requireReauthenticationToApprove"`
	// Retain approval count on a new push.
	RetainApprovalsOnPush *bool `pulumi:"retainApprovalsOnPush"`
}

// The set of arguments for constructing a GroupLevelMrApprovals resource.
type GroupLevelMrApprovalsArgs struct {
	// Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
	AllowAuthorApproval pulumi.BoolPtrInput
	// Allow or prevent committers from self approving merge requests.
	AllowCommitterApproval pulumi.BoolPtrInput
	// Allow or prevent overriding approvers per merge request.
	AllowOverridesToApproverListPerMergeRequest pulumi.BoolPtrInput
	// The ID or URL-encoded path of the group.
	Group                 pulumi.StringInput
	KeepSettingsOnDestroy pulumi.BoolPtrInput
	// Require approver to authenticate before adding the approval.
	RequireReauthenticationToApprove pulumi.BoolPtrInput
	// Retain approval count on a new push.
	RetainApprovalsOnPush pulumi.BoolPtrInput
}

func (GroupLevelMrApprovalsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupLevelMrApprovalsArgs)(nil)).Elem()
}

type GroupLevelMrApprovalsInput interface {
	pulumi.Input

	ToGroupLevelMrApprovalsOutput() GroupLevelMrApprovalsOutput
	ToGroupLevelMrApprovalsOutputWithContext(ctx context.Context) GroupLevelMrApprovalsOutput
}

func (*GroupLevelMrApprovals) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupLevelMrApprovals)(nil)).Elem()
}

func (i *GroupLevelMrApprovals) ToGroupLevelMrApprovalsOutput() GroupLevelMrApprovalsOutput {
	return i.ToGroupLevelMrApprovalsOutputWithContext(context.Background())
}

func (i *GroupLevelMrApprovals) ToGroupLevelMrApprovalsOutputWithContext(ctx context.Context) GroupLevelMrApprovalsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupLevelMrApprovalsOutput)
}

// GroupLevelMrApprovalsArrayInput is an input type that accepts GroupLevelMrApprovalsArray and GroupLevelMrApprovalsArrayOutput values.
// You can construct a concrete instance of `GroupLevelMrApprovalsArrayInput` via:
//
//	GroupLevelMrApprovalsArray{ GroupLevelMrApprovalsArgs{...} }
type GroupLevelMrApprovalsArrayInput interface {
	pulumi.Input

	ToGroupLevelMrApprovalsArrayOutput() GroupLevelMrApprovalsArrayOutput
	ToGroupLevelMrApprovalsArrayOutputWithContext(context.Context) GroupLevelMrApprovalsArrayOutput
}

type GroupLevelMrApprovalsArray []GroupLevelMrApprovalsInput

func (GroupLevelMrApprovalsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupLevelMrApprovals)(nil)).Elem()
}

func (i GroupLevelMrApprovalsArray) ToGroupLevelMrApprovalsArrayOutput() GroupLevelMrApprovalsArrayOutput {
	return i.ToGroupLevelMrApprovalsArrayOutputWithContext(context.Background())
}

func (i GroupLevelMrApprovalsArray) ToGroupLevelMrApprovalsArrayOutputWithContext(ctx context.Context) GroupLevelMrApprovalsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupLevelMrApprovalsArrayOutput)
}

// GroupLevelMrApprovalsMapInput is an input type that accepts GroupLevelMrApprovalsMap and GroupLevelMrApprovalsMapOutput values.
// You can construct a concrete instance of `GroupLevelMrApprovalsMapInput` via:
//
//	GroupLevelMrApprovalsMap{ "key": GroupLevelMrApprovalsArgs{...} }
type GroupLevelMrApprovalsMapInput interface {
	pulumi.Input

	ToGroupLevelMrApprovalsMapOutput() GroupLevelMrApprovalsMapOutput
	ToGroupLevelMrApprovalsMapOutputWithContext(context.Context) GroupLevelMrApprovalsMapOutput
}

type GroupLevelMrApprovalsMap map[string]GroupLevelMrApprovalsInput

func (GroupLevelMrApprovalsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupLevelMrApprovals)(nil)).Elem()
}

func (i GroupLevelMrApprovalsMap) ToGroupLevelMrApprovalsMapOutput() GroupLevelMrApprovalsMapOutput {
	return i.ToGroupLevelMrApprovalsMapOutputWithContext(context.Background())
}

func (i GroupLevelMrApprovalsMap) ToGroupLevelMrApprovalsMapOutputWithContext(ctx context.Context) GroupLevelMrApprovalsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupLevelMrApprovalsMapOutput)
}

type GroupLevelMrApprovalsOutput struct{ *pulumi.OutputState }

func (GroupLevelMrApprovalsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupLevelMrApprovals)(nil)).Elem()
}

func (o GroupLevelMrApprovalsOutput) ToGroupLevelMrApprovalsOutput() GroupLevelMrApprovalsOutput {
	return o
}

func (o GroupLevelMrApprovalsOutput) ToGroupLevelMrApprovalsOutputWithContext(ctx context.Context) GroupLevelMrApprovalsOutput {
	return o
}

// Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
func (o GroupLevelMrApprovalsOutput) AllowAuthorApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupLevelMrApprovals) pulumi.BoolOutput { return v.AllowAuthorApproval }).(pulumi.BoolOutput)
}

// Allow or prevent committers from self approving merge requests.
func (o GroupLevelMrApprovalsOutput) AllowCommitterApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupLevelMrApprovals) pulumi.BoolOutput { return v.AllowCommitterApproval }).(pulumi.BoolOutput)
}

// Allow or prevent overriding approvers per merge request.
func (o GroupLevelMrApprovalsOutput) AllowOverridesToApproverListPerMergeRequest() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupLevelMrApprovals) pulumi.BoolOutput { return v.AllowOverridesToApproverListPerMergeRequest }).(pulumi.BoolOutput)
}

// The ID or URL-encoded path of the group.
func (o GroupLevelMrApprovalsOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupLevelMrApprovals) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

func (o GroupLevelMrApprovalsOutput) KeepSettingsOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupLevelMrApprovals) pulumi.BoolOutput { return v.KeepSettingsOnDestroy }).(pulumi.BoolOutput)
}

// Require approver to authenticate before adding the approval.
func (o GroupLevelMrApprovalsOutput) RequireReauthenticationToApprove() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupLevelMrApprovals) pulumi.BoolOutput { return v.RequireReauthenticationToApprove }).(pulumi.BoolOutput)
}

// Retain approval count on a new push.
func (o GroupLevelMrApprovalsOutput) RetainApprovalsOnPush() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupLevelMrApprovals) pulumi.BoolOutput { return v.RetainApprovalsOnPush }).(pulumi.BoolOutput)
}

type GroupLevelMrApprovalsArrayOutput struct{ *pulumi.OutputState }

func (GroupLevelMrApprovalsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupLevelMrApprovals)(nil)).Elem()
}

func (o GroupLevelMrApprovalsArrayOutput) ToGroupLevelMrApprovalsArrayOutput() GroupLevelMrApprovalsArrayOutput {
	return o
}

func (o GroupLevelMrApprovalsArrayOutput) ToGroupLevelMrApprovalsArrayOutputWithContext(ctx context.Context) GroupLevelMrApprovalsArrayOutput {
	return o
}

func (o GroupLevelMrApprovalsArrayOutput) Index(i pulumi.IntInput) GroupLevelMrApprovalsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupLevelMrApprovals {
		return vs[0].([]*GroupLevelMrApprovals)[vs[1].(int)]
	}).(GroupLevelMrApprovalsOutput)
}

type GroupLevelMrApprovalsMapOutput struct{ *pulumi.OutputState }

func (GroupLevelMrApprovalsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupLevelMrApprovals)(nil)).Elem()
}

func (o GroupLevelMrApprovalsMapOutput) ToGroupLevelMrApprovalsMapOutput() GroupLevelMrApprovalsMapOutput {
	return o
}

func (o GroupLevelMrApprovalsMapOutput) ToGroupLevelMrApprovalsMapOutputWithContext(ctx context.Context) GroupLevelMrApprovalsMapOutput {
	return o
}

func (o GroupLevelMrApprovalsMapOutput) MapIndex(k pulumi.StringInput) GroupLevelMrApprovalsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupLevelMrApprovals {
		return vs[0].(map[string]*GroupLevelMrApprovals)[vs[1].(string)]
	}).(GroupLevelMrApprovalsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupLevelMrApprovalsInput)(nil)).Elem(), &GroupLevelMrApprovals{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupLevelMrApprovalsArrayInput)(nil)).Elem(), GroupLevelMrApprovalsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupLevelMrApprovalsMapInput)(nil)).Elem(), GroupLevelMrApprovalsMap{})
	pulumi.RegisterOutputType(GroupLevelMrApprovalsOutput{})
	pulumi.RegisterOutputType(GroupLevelMrApprovalsArrayOutput{})
	pulumi.RegisterOutputType(GroupLevelMrApprovalsMapOutput{})
}
