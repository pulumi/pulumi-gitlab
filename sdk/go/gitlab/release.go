// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Release` resource allows to manage the lifecycle of releases in gitlab.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a project
//			example, err := gitlab.NewProject(ctx, "example", &gitlab.ProjectArgs{
//				Name:        pulumi.String("example"),
//				Description: pulumi.String("An example project"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a release
//			_, err = gitlab.NewRelease(ctx, "example", &gitlab.ReleaseArgs{
//				Project:     example.ID(),
//				Name:        pulumi.String("test-release"),
//				TagName:     pulumi.String("v1.0.0"),
//				Description: pulumi.String("Test release description"),
//				Ref:         pulumi.String("main"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_release`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_release.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// Gitlab release link can be imported with a key composed of `<project>:<tag_name>`, e.g.
//
// ```sh
// $ pulumi import gitlab:index/release:Release example "12345:test"
// ```
type Release struct {
	pulumi.CustomResourceState

	// The release assets.
	Assets ReleaseAssetsOutput `pulumi:"assets"`
	// The author of the release.
	Author ReleaseAuthorOutput `pulumi:"author"`
	// The release commit.
	Commit ReleaseCommitOutput `pulumi:"commit"`
	// The path to the commit
	CommitPath pulumi.StringOutput `pulumi:"commitPath"`
	// Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the release. You can use Markdown.
	Description pulumi.StringOutput `pulumi:"description"`
	// HTML rendered Markdown of the release description.
	DescriptionHtml pulumi.StringOutput `pulumi:"descriptionHtml"`
	// Links of the release
	Links ReleaseLinksOutput `pulumi:"links"`
	// The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
	Milestones pulumi.StringArrayOutput `pulumi:"milestones"`
	// The name of the release.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID or full path of the project.
	Project pulumi.StringOutput `pulumi:"project"`
	// If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
	Ref pulumi.StringOutput `pulumi:"ref"`
	// Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
	ReleasedAt pulumi.StringOutput `pulumi:"releasedAt"`
	// Message to use if creating a new annotated tag.
	TagMessage pulumi.StringPtrOutput `pulumi:"tagMessage"`
	// The tag where the release is created from.
	TagName pulumi.StringOutput `pulumi:"tagName"`
	// The path to the tag.
	TagPath pulumi.StringOutput `pulumi:"tagPath"`
	// Whether the releaseAt attribute is set to a future date.
	UpcomingRelease pulumi.BoolOutput `pulumi:"upcomingRelease"`
}

// NewRelease registers a new resource with the given unique name, arguments, and options.
func NewRelease(ctx *pulumi.Context,
	name string, args *ReleaseArgs, opts ...pulumi.ResourceOption) (*Release, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.TagName == nil {
		return nil, errors.New("invalid value for required argument 'TagName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Release
	err := ctx.RegisterResource("gitlab:index/release:Release", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRelease gets an existing Release resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseState, opts ...pulumi.ResourceOption) (*Release, error) {
	var resource Release
	err := ctx.ReadResource("gitlab:index/release:Release", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Release resources.
type releaseState struct {
	// The release assets.
	Assets *ReleaseAssets `pulumi:"assets"`
	// The author of the release.
	Author *ReleaseAuthor `pulumi:"author"`
	// The release commit.
	Commit *ReleaseCommit `pulumi:"commit"`
	// The path to the commit
	CommitPath *string `pulumi:"commitPath"`
	// Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the release. You can use Markdown.
	Description *string `pulumi:"description"`
	// HTML rendered Markdown of the release description.
	DescriptionHtml *string `pulumi:"descriptionHtml"`
	// Links of the release
	Links *ReleaseLinks `pulumi:"links"`
	// The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
	Milestones []string `pulumi:"milestones"`
	// The name of the release.
	Name *string `pulumi:"name"`
	// The ID or full path of the project.
	Project *string `pulumi:"project"`
	// If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
	Ref *string `pulumi:"ref"`
	// Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
	ReleasedAt *string `pulumi:"releasedAt"`
	// Message to use if creating a new annotated tag.
	TagMessage *string `pulumi:"tagMessage"`
	// The tag where the release is created from.
	TagName *string `pulumi:"tagName"`
	// The path to the tag.
	TagPath *string `pulumi:"tagPath"`
	// Whether the releaseAt attribute is set to a future date.
	UpcomingRelease *bool `pulumi:"upcomingRelease"`
}

type ReleaseState struct {
	// The release assets.
	Assets ReleaseAssetsPtrInput
	// The author of the release.
	Author ReleaseAuthorPtrInput
	// The release commit.
	Commit ReleaseCommitPtrInput
	// The path to the commit
	CommitPath pulumi.StringPtrInput
	// Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
	CreatedAt pulumi.StringPtrInput
	// The description of the release. You can use Markdown.
	Description pulumi.StringPtrInput
	// HTML rendered Markdown of the release description.
	DescriptionHtml pulumi.StringPtrInput
	// Links of the release
	Links ReleaseLinksPtrInput
	// The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
	Milestones pulumi.StringArrayInput
	// The name of the release.
	Name pulumi.StringPtrInput
	// The ID or full path of the project.
	Project pulumi.StringPtrInput
	// If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
	Ref pulumi.StringPtrInput
	// Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
	ReleasedAt pulumi.StringPtrInput
	// Message to use if creating a new annotated tag.
	TagMessage pulumi.StringPtrInput
	// The tag where the release is created from.
	TagName pulumi.StringPtrInput
	// The path to the tag.
	TagPath pulumi.StringPtrInput
	// Whether the releaseAt attribute is set to a future date.
	UpcomingRelease pulumi.BoolPtrInput
}

func (ReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseState)(nil)).Elem()
}

type releaseArgs struct {
	// The release assets.
	Assets *ReleaseAssets `pulumi:"assets"`
	// The description of the release. You can use Markdown.
	Description *string `pulumi:"description"`
	// The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
	Milestones []string `pulumi:"milestones"`
	// The name of the release.
	Name *string `pulumi:"name"`
	// The ID or full path of the project.
	Project string `pulumi:"project"`
	// If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
	Ref *string `pulumi:"ref"`
	// Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
	ReleasedAt *string `pulumi:"releasedAt"`
	// Message to use if creating a new annotated tag.
	TagMessage *string `pulumi:"tagMessage"`
	// The tag where the release is created from.
	TagName string `pulumi:"tagName"`
}

// The set of arguments for constructing a Release resource.
type ReleaseArgs struct {
	// The release assets.
	Assets ReleaseAssetsPtrInput
	// The description of the release. You can use Markdown.
	Description pulumi.StringPtrInput
	// The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
	Milestones pulumi.StringArrayInput
	// The name of the release.
	Name pulumi.StringPtrInput
	// The ID or full path of the project.
	Project pulumi.StringInput
	// If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
	Ref pulumi.StringPtrInput
	// Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
	ReleasedAt pulumi.StringPtrInput
	// Message to use if creating a new annotated tag.
	TagMessage pulumi.StringPtrInput
	// The tag where the release is created from.
	TagName pulumi.StringInput
}

func (ReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseArgs)(nil)).Elem()
}

type ReleaseInput interface {
	pulumi.Input

	ToReleaseOutput() ReleaseOutput
	ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput
}

func (*Release) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (i *Release) ToReleaseOutput() ReleaseOutput {
	return i.ToReleaseOutputWithContext(context.Background())
}

func (i *Release) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput)
}

// ReleaseArrayInput is an input type that accepts ReleaseArray and ReleaseArrayOutput values.
// You can construct a concrete instance of `ReleaseArrayInput` via:
//
//	ReleaseArray{ ReleaseArgs{...} }
type ReleaseArrayInput interface {
	pulumi.Input

	ToReleaseArrayOutput() ReleaseArrayOutput
	ToReleaseArrayOutputWithContext(context.Context) ReleaseArrayOutput
}

type ReleaseArray []ReleaseInput

func (ReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Release)(nil)).Elem()
}

func (i ReleaseArray) ToReleaseArrayOutput() ReleaseArrayOutput {
	return i.ToReleaseArrayOutputWithContext(context.Background())
}

func (i ReleaseArray) ToReleaseArrayOutputWithContext(ctx context.Context) ReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseArrayOutput)
}

// ReleaseMapInput is an input type that accepts ReleaseMap and ReleaseMapOutput values.
// You can construct a concrete instance of `ReleaseMapInput` via:
//
//	ReleaseMap{ "key": ReleaseArgs{...} }
type ReleaseMapInput interface {
	pulumi.Input

	ToReleaseMapOutput() ReleaseMapOutput
	ToReleaseMapOutputWithContext(context.Context) ReleaseMapOutput
}

type ReleaseMap map[string]ReleaseInput

func (ReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Release)(nil)).Elem()
}

func (i ReleaseMap) ToReleaseMapOutput() ReleaseMapOutput {
	return i.ToReleaseMapOutputWithContext(context.Background())
}

func (i ReleaseMap) ToReleaseMapOutputWithContext(ctx context.Context) ReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseMapOutput)
}

type ReleaseOutput struct{ *pulumi.OutputState }

func (ReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (o ReleaseOutput) ToReleaseOutput() ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return o
}

// The release assets.
func (o ReleaseOutput) Assets() ReleaseAssetsOutput {
	return o.ApplyT(func(v *Release) ReleaseAssetsOutput { return v.Assets }).(ReleaseAssetsOutput)
}

// The author of the release.
func (o ReleaseOutput) Author() ReleaseAuthorOutput {
	return o.ApplyT(func(v *Release) ReleaseAuthorOutput { return v.Author }).(ReleaseAuthorOutput)
}

// The release commit.
func (o ReleaseOutput) Commit() ReleaseCommitOutput {
	return o.ApplyT(func(v *Release) ReleaseCommitOutput { return v.Commit }).(ReleaseCommitOutput)
}

// The path to the commit
func (o ReleaseOutput) CommitPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.CommitPath }).(pulumi.StringOutput)
}

// Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
func (o ReleaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the release. You can use Markdown.
func (o ReleaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// HTML rendered Markdown of the release description.
func (o ReleaseOutput) DescriptionHtml() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.DescriptionHtml }).(pulumi.StringOutput)
}

// Links of the release
func (o ReleaseOutput) Links() ReleaseLinksOutput {
	return o.ApplyT(func(v *Release) ReleaseLinksOutput { return v.Links }).(ReleaseLinksOutput)
}

// The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
func (o ReleaseOutput) Milestones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Release) pulumi.StringArrayOutput { return v.Milestones }).(pulumi.StringArrayOutput)
}

// The name of the release.
func (o ReleaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID or full path of the project.
func (o ReleaseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
func (o ReleaseOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Ref }).(pulumi.StringOutput)
}

// Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
func (o ReleaseOutput) ReleasedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.ReleasedAt }).(pulumi.StringOutput)
}

// Message to use if creating a new annotated tag.
func (o ReleaseOutput) TagMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.TagMessage }).(pulumi.StringPtrOutput)
}

// The tag where the release is created from.
func (o ReleaseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.TagName }).(pulumi.StringOutput)
}

// The path to the tag.
func (o ReleaseOutput) TagPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.TagPath }).(pulumi.StringOutput)
}

// Whether the releaseAt attribute is set to a future date.
func (o ReleaseOutput) UpcomingRelease() pulumi.BoolOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolOutput { return v.UpcomingRelease }).(pulumi.BoolOutput)
}

type ReleaseArrayOutput struct{ *pulumi.OutputState }

func (ReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Release)(nil)).Elem()
}

func (o ReleaseArrayOutput) ToReleaseArrayOutput() ReleaseArrayOutput {
	return o
}

func (o ReleaseArrayOutput) ToReleaseArrayOutputWithContext(ctx context.Context) ReleaseArrayOutput {
	return o
}

func (o ReleaseArrayOutput) Index(i pulumi.IntInput) ReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Release {
		return vs[0].([]*Release)[vs[1].(int)]
	}).(ReleaseOutput)
}

type ReleaseMapOutput struct{ *pulumi.OutputState }

func (ReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Release)(nil)).Elem()
}

func (o ReleaseMapOutput) ToReleaseMapOutput() ReleaseMapOutput {
	return o
}

func (o ReleaseMapOutput) ToReleaseMapOutputWithContext(ctx context.Context) ReleaseMapOutput {
	return o
}

func (o ReleaseMapOutput) MapIndex(k pulumi.StringInput) ReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Release {
		return vs[0].(map[string]*Release)[vs[1].(string)]
	}).(ReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseInput)(nil)).Elem(), &Release{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseArrayInput)(nil)).Elem(), ReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseMapInput)(nil)).Elem(), ReleaseMap{})
	pulumi.RegisterOutputType(ReleaseOutput{})
	pulumi.RegisterOutputType(ReleaseArrayOutput{})
	pulumi.RegisterOutputType(ReleaseMapOutput{})
}
