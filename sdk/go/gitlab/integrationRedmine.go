// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `IntegrationRedmine` resource allows to manage the lifecycle of a project integration with Redmine.
//
// > Using Redmine requires that GitLab internal issue tracking is disabled for the project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#redmine)
type IntegrationRedmine struct {
	pulumi.CustomResourceState

	// The URL to the Redmine project issue to link to this GitLab project.
	IssuesUrl pulumi.StringOutput `pulumi:"issuesUrl"`
	// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
	NewIssueUrl pulumi.StringOutput `pulumi:"newIssueUrl"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URL to the Redmine project to link to this GitLab project.
	ProjectUrl pulumi.StringOutput `pulumi:"projectUrl"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolOutput `pulumi:"useInheritedSettings"`
}

// NewIntegrationRedmine registers a new resource with the given unique name, arguments, and options.
func NewIntegrationRedmine(ctx *pulumi.Context,
	name string, args *IntegrationRedmineArgs, opts ...pulumi.ResourceOption) (*IntegrationRedmine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IssuesUrl == nil {
		return nil, errors.New("invalid value for required argument 'IssuesUrl'")
	}
	if args.NewIssueUrl == nil {
		return nil, errors.New("invalid value for required argument 'NewIssueUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProjectUrl == nil {
		return nil, errors.New("invalid value for required argument 'ProjectUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationRedmine
	err := ctx.RegisterResource("gitlab:index/integrationRedmine:IntegrationRedmine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationRedmine gets an existing IntegrationRedmine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationRedmine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationRedmineState, opts ...pulumi.ResourceOption) (*IntegrationRedmine, error) {
	var resource IntegrationRedmine
	err := ctx.ReadResource("gitlab:index/integrationRedmine:IntegrationRedmine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationRedmine resources.
type integrationRedmineState struct {
	// The URL to the Redmine project issue to link to this GitLab project.
	IssuesUrl *string `pulumi:"issuesUrl"`
	// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
	NewIssueUrl *string `pulumi:"newIssueUrl"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The URL to the Redmine project to link to this GitLab project.
	ProjectUrl *string `pulumi:"projectUrl"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings *bool `pulumi:"useInheritedSettings"`
}

type IntegrationRedmineState struct {
	// The URL to the Redmine project issue to link to this GitLab project.
	IssuesUrl pulumi.StringPtrInput
	// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
	NewIssueUrl pulumi.StringPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The URL to the Redmine project to link to this GitLab project.
	ProjectUrl pulumi.StringPtrInput
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolPtrInput
}

func (IntegrationRedmineState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationRedmineState)(nil)).Elem()
}

type integrationRedmineArgs struct {
	// The URL to the Redmine project issue to link to this GitLab project.
	IssuesUrl string `pulumi:"issuesUrl"`
	// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
	NewIssueUrl string `pulumi:"newIssueUrl"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// The URL to the Redmine project to link to this GitLab project.
	ProjectUrl string `pulumi:"projectUrl"`
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings *bool `pulumi:"useInheritedSettings"`
}

// The set of arguments for constructing a IntegrationRedmine resource.
type IntegrationRedmineArgs struct {
	// The URL to the Redmine project issue to link to this GitLab project.
	IssuesUrl pulumi.StringInput
	// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
	NewIssueUrl pulumi.StringInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
	// The URL to the Redmine project to link to this GitLab project.
	ProjectUrl pulumi.StringInput
	// Indicates whether or not to inherit default settings. Defaults to false.
	UseInheritedSettings pulumi.BoolPtrInput
}

func (IntegrationRedmineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationRedmineArgs)(nil)).Elem()
}

type IntegrationRedmineInput interface {
	pulumi.Input

	ToIntegrationRedmineOutput() IntegrationRedmineOutput
	ToIntegrationRedmineOutputWithContext(ctx context.Context) IntegrationRedmineOutput
}

func (*IntegrationRedmine) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRedmine)(nil)).Elem()
}

func (i *IntegrationRedmine) ToIntegrationRedmineOutput() IntegrationRedmineOutput {
	return i.ToIntegrationRedmineOutputWithContext(context.Background())
}

func (i *IntegrationRedmine) ToIntegrationRedmineOutputWithContext(ctx context.Context) IntegrationRedmineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRedmineOutput)
}

// IntegrationRedmineArrayInput is an input type that accepts IntegrationRedmineArray and IntegrationRedmineArrayOutput values.
// You can construct a concrete instance of `IntegrationRedmineArrayInput` via:
//
//	IntegrationRedmineArray{ IntegrationRedmineArgs{...} }
type IntegrationRedmineArrayInput interface {
	pulumi.Input

	ToIntegrationRedmineArrayOutput() IntegrationRedmineArrayOutput
	ToIntegrationRedmineArrayOutputWithContext(context.Context) IntegrationRedmineArrayOutput
}

type IntegrationRedmineArray []IntegrationRedmineInput

func (IntegrationRedmineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationRedmine)(nil)).Elem()
}

func (i IntegrationRedmineArray) ToIntegrationRedmineArrayOutput() IntegrationRedmineArrayOutput {
	return i.ToIntegrationRedmineArrayOutputWithContext(context.Background())
}

func (i IntegrationRedmineArray) ToIntegrationRedmineArrayOutputWithContext(ctx context.Context) IntegrationRedmineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRedmineArrayOutput)
}

// IntegrationRedmineMapInput is an input type that accepts IntegrationRedmineMap and IntegrationRedmineMapOutput values.
// You can construct a concrete instance of `IntegrationRedmineMapInput` via:
//
//	IntegrationRedmineMap{ "key": IntegrationRedmineArgs{...} }
type IntegrationRedmineMapInput interface {
	pulumi.Input

	ToIntegrationRedmineMapOutput() IntegrationRedmineMapOutput
	ToIntegrationRedmineMapOutputWithContext(context.Context) IntegrationRedmineMapOutput
}

type IntegrationRedmineMap map[string]IntegrationRedmineInput

func (IntegrationRedmineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationRedmine)(nil)).Elem()
}

func (i IntegrationRedmineMap) ToIntegrationRedmineMapOutput() IntegrationRedmineMapOutput {
	return i.ToIntegrationRedmineMapOutputWithContext(context.Background())
}

func (i IntegrationRedmineMap) ToIntegrationRedmineMapOutputWithContext(ctx context.Context) IntegrationRedmineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRedmineMapOutput)
}

type IntegrationRedmineOutput struct{ *pulumi.OutputState }

func (IntegrationRedmineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRedmine)(nil)).Elem()
}

func (o IntegrationRedmineOutput) ToIntegrationRedmineOutput() IntegrationRedmineOutput {
	return o
}

func (o IntegrationRedmineOutput) ToIntegrationRedmineOutputWithContext(ctx context.Context) IntegrationRedmineOutput {
	return o
}

// The URL to the Redmine project issue to link to this GitLab project.
func (o IntegrationRedmineOutput) IssuesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationRedmine) pulumi.StringOutput { return v.IssuesUrl }).(pulumi.StringOutput)
}

// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
func (o IntegrationRedmineOutput) NewIssueUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationRedmine) pulumi.StringOutput { return v.NewIssueUrl }).(pulumi.StringOutput)
}

// ID of the project you want to activate integration on.
func (o IntegrationRedmineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationRedmine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URL to the Redmine project to link to this GitLab project.
func (o IntegrationRedmineOutput) ProjectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationRedmine) pulumi.StringOutput { return v.ProjectUrl }).(pulumi.StringOutput)
}

// Indicates whether or not to inherit default settings. Defaults to false.
func (o IntegrationRedmineOutput) UseInheritedSettings() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationRedmine) pulumi.BoolOutput { return v.UseInheritedSettings }).(pulumi.BoolOutput)
}

type IntegrationRedmineArrayOutput struct{ *pulumi.OutputState }

func (IntegrationRedmineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationRedmine)(nil)).Elem()
}

func (o IntegrationRedmineArrayOutput) ToIntegrationRedmineArrayOutput() IntegrationRedmineArrayOutput {
	return o
}

func (o IntegrationRedmineArrayOutput) ToIntegrationRedmineArrayOutputWithContext(ctx context.Context) IntegrationRedmineArrayOutput {
	return o
}

func (o IntegrationRedmineArrayOutput) Index(i pulumi.IntInput) IntegrationRedmineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationRedmine {
		return vs[0].([]*IntegrationRedmine)[vs[1].(int)]
	}).(IntegrationRedmineOutput)
}

type IntegrationRedmineMapOutput struct{ *pulumi.OutputState }

func (IntegrationRedmineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationRedmine)(nil)).Elem()
}

func (o IntegrationRedmineMapOutput) ToIntegrationRedmineMapOutput() IntegrationRedmineMapOutput {
	return o
}

func (o IntegrationRedmineMapOutput) ToIntegrationRedmineMapOutputWithContext(ctx context.Context) IntegrationRedmineMapOutput {
	return o
}

func (o IntegrationRedmineMapOutput) MapIndex(k pulumi.StringInput) IntegrationRedmineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationRedmine {
		return vs[0].(map[string]*IntegrationRedmine)[vs[1].(string)]
	}).(IntegrationRedmineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationRedmineInput)(nil)).Elem(), &IntegrationRedmine{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationRedmineArrayInput)(nil)).Elem(), IntegrationRedmineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationRedmineMapInput)(nil)).Elem(), IntegrationRedmineMap{})
	pulumi.RegisterOutputType(IntegrationRedmineOutput{})
	pulumi.RegisterOutputType(IntegrationRedmineArrayOutput{})
	pulumi.RegisterOutputType(IntegrationRedmineMapOutput{})
}
