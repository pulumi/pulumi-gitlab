// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationEmailsOnPush` resource manages the lifecycle of a project integration with the Emails on Push Service.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#emails-on-push)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationEmailsOnPush(ctx, "emails", &gitlab.ProjectIntegrationEmailsOnPushArgs{
//				Project:    awesomeProject.ID(),
//				Recipients: pulumi.String("myrecipient@example.com myotherrecipient@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_emails_on_push`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_emails_on_push.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// You can import a gitlab_project_integration_emails_on_push state using the project ID, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush emails 1
// ```
type ProjectIntegrationEmailsOnPush struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, `defaultAndProtected`. Notifications are always fired for tag pushes.
	BranchesToBeNotified pulumi.StringPtrOutput `pulumi:"branchesToBeNotified"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Disable code diffs.
	DisableDiffs pulumi.BoolPtrOutput `pulumi:"disableDiffs"`
	// ID or full-path of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrOutput `pulumi:"pushEvents"`
	// Emails separated by whitespace.
	Recipients pulumi.StringOutput `pulumi:"recipients"`
	// Send from committer.
	SendFromCommitterEmail pulumi.BoolPtrOutput `pulumi:"sendFromCommitterEmail"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolPtrOutput `pulumi:"tagPushEvents"`
	// Title of the integration.
	Title pulumi.StringOutput `pulumi:"title"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewProjectIntegrationEmailsOnPush registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationEmailsOnPush(ctx *pulumi.Context,
	name string, args *ProjectIntegrationEmailsOnPushArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationEmailsOnPush, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Recipients == nil {
		return nil, errors.New("invalid value for required argument 'Recipients'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationEmailsOnPush
	err := ctx.RegisterResource("gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationEmailsOnPush gets an existing ProjectIntegrationEmailsOnPush resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationEmailsOnPush(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationEmailsOnPushState, opts ...pulumi.ResourceOption) (*ProjectIntegrationEmailsOnPush, error) {
	var resource ProjectIntegrationEmailsOnPush
	err := ctx.ReadResource("gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationEmailsOnPush resources.
type projectIntegrationEmailsOnPushState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, `defaultAndProtected`. Notifications are always fired for tag pushes.
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// Disable code diffs.
	DisableDiffs *bool `pulumi:"disableDiffs"`
	// ID or full-path of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Emails separated by whitespace.
	Recipients *string `pulumi:"recipients"`
	// Send from committer.
	SendFromCommitterEmail *bool `pulumi:"sendFromCommitterEmail"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug *string `pulumi:"slug"`
	// Enable notifications for tag push events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Title of the integration.
	Title *string `pulumi:"title"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ProjectIntegrationEmailsOnPushState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, `defaultAndProtected`. Notifications are always fired for tag pushes.
	BranchesToBeNotified pulumi.StringPtrInput
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringPtrInput
	// Disable code diffs.
	DisableDiffs pulumi.BoolPtrInput
	// ID or full-path of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// Emails separated by whitespace.
	Recipients pulumi.StringPtrInput
	// Send from committer.
	SendFromCommitterEmail pulumi.BoolPtrInput
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringPtrInput
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolPtrInput
	// Title of the integration.
	Title pulumi.StringPtrInput
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (ProjectIntegrationEmailsOnPushState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationEmailsOnPushState)(nil)).Elem()
}

type projectIntegrationEmailsOnPushArgs struct {
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, `defaultAndProtected`. Notifications are always fired for tag pushes.
	BranchesToBeNotified *string `pulumi:"branchesToBeNotified"`
	// Disable code diffs.
	DisableDiffs *bool `pulumi:"disableDiffs"`
	// ID or full-path of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Emails separated by whitespace.
	Recipients string `pulumi:"recipients"`
	// Send from committer.
	SendFromCommitterEmail *bool `pulumi:"sendFromCommitterEmail"`
	// Enable notifications for tag push events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
}

// The set of arguments for constructing a ProjectIntegrationEmailsOnPush resource.
type ProjectIntegrationEmailsOnPushArgs struct {
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, `defaultAndProtected`. Notifications are always fired for tag pushes.
	BranchesToBeNotified pulumi.StringPtrInput
	// Disable code diffs.
	DisableDiffs pulumi.BoolPtrInput
	// ID or full-path of the project you want to activate integration on.
	Project pulumi.StringInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// Emails separated by whitespace.
	Recipients pulumi.StringInput
	// Send from committer.
	SendFromCommitterEmail pulumi.BoolPtrInput
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolPtrInput
}

func (ProjectIntegrationEmailsOnPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationEmailsOnPushArgs)(nil)).Elem()
}

type ProjectIntegrationEmailsOnPushInput interface {
	pulumi.Input

	ToProjectIntegrationEmailsOnPushOutput() ProjectIntegrationEmailsOnPushOutput
	ToProjectIntegrationEmailsOnPushOutputWithContext(ctx context.Context) ProjectIntegrationEmailsOnPushOutput
}

func (*ProjectIntegrationEmailsOnPush) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationEmailsOnPush)(nil)).Elem()
}

func (i *ProjectIntegrationEmailsOnPush) ToProjectIntegrationEmailsOnPushOutput() ProjectIntegrationEmailsOnPushOutput {
	return i.ToProjectIntegrationEmailsOnPushOutputWithContext(context.Background())
}

func (i *ProjectIntegrationEmailsOnPush) ToProjectIntegrationEmailsOnPushOutputWithContext(ctx context.Context) ProjectIntegrationEmailsOnPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationEmailsOnPushOutput)
}

// ProjectIntegrationEmailsOnPushArrayInput is an input type that accepts ProjectIntegrationEmailsOnPushArray and ProjectIntegrationEmailsOnPushArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationEmailsOnPushArrayInput` via:
//
//	ProjectIntegrationEmailsOnPushArray{ ProjectIntegrationEmailsOnPushArgs{...} }
type ProjectIntegrationEmailsOnPushArrayInput interface {
	pulumi.Input

	ToProjectIntegrationEmailsOnPushArrayOutput() ProjectIntegrationEmailsOnPushArrayOutput
	ToProjectIntegrationEmailsOnPushArrayOutputWithContext(context.Context) ProjectIntegrationEmailsOnPushArrayOutput
}

type ProjectIntegrationEmailsOnPushArray []ProjectIntegrationEmailsOnPushInput

func (ProjectIntegrationEmailsOnPushArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationEmailsOnPush)(nil)).Elem()
}

func (i ProjectIntegrationEmailsOnPushArray) ToProjectIntegrationEmailsOnPushArrayOutput() ProjectIntegrationEmailsOnPushArrayOutput {
	return i.ToProjectIntegrationEmailsOnPushArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationEmailsOnPushArray) ToProjectIntegrationEmailsOnPushArrayOutputWithContext(ctx context.Context) ProjectIntegrationEmailsOnPushArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationEmailsOnPushArrayOutput)
}

// ProjectIntegrationEmailsOnPushMapInput is an input type that accepts ProjectIntegrationEmailsOnPushMap and ProjectIntegrationEmailsOnPushMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationEmailsOnPushMapInput` via:
//
//	ProjectIntegrationEmailsOnPushMap{ "key": ProjectIntegrationEmailsOnPushArgs{...} }
type ProjectIntegrationEmailsOnPushMapInput interface {
	pulumi.Input

	ToProjectIntegrationEmailsOnPushMapOutput() ProjectIntegrationEmailsOnPushMapOutput
	ToProjectIntegrationEmailsOnPushMapOutputWithContext(context.Context) ProjectIntegrationEmailsOnPushMapOutput
}

type ProjectIntegrationEmailsOnPushMap map[string]ProjectIntegrationEmailsOnPushInput

func (ProjectIntegrationEmailsOnPushMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationEmailsOnPush)(nil)).Elem()
}

func (i ProjectIntegrationEmailsOnPushMap) ToProjectIntegrationEmailsOnPushMapOutput() ProjectIntegrationEmailsOnPushMapOutput {
	return i.ToProjectIntegrationEmailsOnPushMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationEmailsOnPushMap) ToProjectIntegrationEmailsOnPushMapOutputWithContext(ctx context.Context) ProjectIntegrationEmailsOnPushMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationEmailsOnPushMapOutput)
}

type ProjectIntegrationEmailsOnPushOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationEmailsOnPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationEmailsOnPush)(nil)).Elem()
}

func (o ProjectIntegrationEmailsOnPushOutput) ToProjectIntegrationEmailsOnPushOutput() ProjectIntegrationEmailsOnPushOutput {
	return o
}

func (o ProjectIntegrationEmailsOnPushOutput) ToProjectIntegrationEmailsOnPushOutputWithContext(ctx context.Context) ProjectIntegrationEmailsOnPushOutput {
	return o
}

// Whether the integration is active.
func (o ProjectIntegrationEmailsOnPushOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Branches to send notifications for. Valid options are `all`, `default`, `protected`, `defaultAndProtected`. Notifications are always fired for tag pushes.
func (o ProjectIntegrationEmailsOnPushOutput) BranchesToBeNotified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.StringPtrOutput { return v.BranchesToBeNotified }).(pulumi.StringPtrOutput)
}

// The ISO8601 date/time that this integration was activated at in UTC.
func (o ProjectIntegrationEmailsOnPushOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Disable code diffs.
func (o ProjectIntegrationEmailsOnPushOutput) DisableDiffs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.BoolPtrOutput { return v.DisableDiffs }).(pulumi.BoolPtrOutput)
}

// ID or full-path of the project you want to activate integration on.
func (o ProjectIntegrationEmailsOnPushOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Enable notifications for push events.
func (o ProjectIntegrationEmailsOnPushOutput) PushEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.BoolPtrOutput { return v.PushEvents }).(pulumi.BoolPtrOutput)
}

// Emails separated by whitespace.
func (o ProjectIntegrationEmailsOnPushOutput) Recipients() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.StringOutput { return v.Recipients }).(pulumi.StringOutput)
}

// Send from committer.
func (o ProjectIntegrationEmailsOnPushOutput) SendFromCommitterEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.BoolPtrOutput { return v.SendFromCommitterEmail }).(pulumi.BoolPtrOutput)
}

// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
func (o ProjectIntegrationEmailsOnPushOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Enable notifications for tag push events.
func (o ProjectIntegrationEmailsOnPushOutput) TagPushEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.BoolPtrOutput { return v.TagPushEvents }).(pulumi.BoolPtrOutput)
}

// Title of the integration.
func (o ProjectIntegrationEmailsOnPushOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The ISO8601 date/time that this integration was last updated at in UTC.
func (o ProjectIntegrationEmailsOnPushOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationEmailsOnPush) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ProjectIntegrationEmailsOnPushArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationEmailsOnPushArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationEmailsOnPush)(nil)).Elem()
}

func (o ProjectIntegrationEmailsOnPushArrayOutput) ToProjectIntegrationEmailsOnPushArrayOutput() ProjectIntegrationEmailsOnPushArrayOutput {
	return o
}

func (o ProjectIntegrationEmailsOnPushArrayOutput) ToProjectIntegrationEmailsOnPushArrayOutputWithContext(ctx context.Context) ProjectIntegrationEmailsOnPushArrayOutput {
	return o
}

func (o ProjectIntegrationEmailsOnPushArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationEmailsOnPushOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationEmailsOnPush {
		return vs[0].([]*ProjectIntegrationEmailsOnPush)[vs[1].(int)]
	}).(ProjectIntegrationEmailsOnPushOutput)
}

type ProjectIntegrationEmailsOnPushMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationEmailsOnPushMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationEmailsOnPush)(nil)).Elem()
}

func (o ProjectIntegrationEmailsOnPushMapOutput) ToProjectIntegrationEmailsOnPushMapOutput() ProjectIntegrationEmailsOnPushMapOutput {
	return o
}

func (o ProjectIntegrationEmailsOnPushMapOutput) ToProjectIntegrationEmailsOnPushMapOutputWithContext(ctx context.Context) ProjectIntegrationEmailsOnPushMapOutput {
	return o
}

func (o ProjectIntegrationEmailsOnPushMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationEmailsOnPushOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationEmailsOnPush {
		return vs[0].(map[string]*ProjectIntegrationEmailsOnPush)[vs[1].(string)]
	}).(ProjectIntegrationEmailsOnPushOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationEmailsOnPushInput)(nil)).Elem(), &ProjectIntegrationEmailsOnPush{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationEmailsOnPushArrayInput)(nil)).Elem(), ProjectIntegrationEmailsOnPushArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationEmailsOnPushMapInput)(nil)).Elem(), ProjectIntegrationEmailsOnPushMap{})
	pulumi.RegisterOutputType(ProjectIntegrationEmailsOnPushOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationEmailsOnPushArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationEmailsOnPushMapOutput{})
}
