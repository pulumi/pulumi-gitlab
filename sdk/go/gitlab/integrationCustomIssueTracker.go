// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `IntegrationCustomIssueTracker` resource allows to manage the lifecycle of a project integration with Custom Issue Tracker.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#custom-issue-tracker)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v6/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesomeProject", &gitlab.ProjectArgs{
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewIntegrationCustomIssueTracker(ctx, "tracker", &gitlab.IntegrationCustomIssueTrackerArgs{
//				Project:    awesomeProject.ID(),
//				ProjectUrl: pulumi.String("https://customtracker.com/issues"),
//				IssuesUrl:  pulumi.String("https://customtracker.com/TEST-:id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a gitlab_integration_custom_issue_tracker state using the project ID, e.g.
//
// ```sh
//
//	$ pulumi import gitlab:index/integrationCustomIssueTracker:IntegrationCustomIssueTracker tracker 1
//
// ```
type IntegrationCustomIssueTracker struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringOutput `pulumi:"issuesUrl"`
	// The ID or full path of the project for the custom issue tracker.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URL to the project in the external issue tracker.
	ProjectUrl pulumi.StringOutput `pulumi:"projectUrl"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIntegrationCustomIssueTracker registers a new resource with the given unique name, arguments, and options.
func NewIntegrationCustomIssueTracker(ctx *pulumi.Context,
	name string, args *IntegrationCustomIssueTrackerArgs, opts ...pulumi.ResourceOption) (*IntegrationCustomIssueTracker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IssuesUrl == nil {
		return nil, errors.New("invalid value for required argument 'IssuesUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProjectUrl == nil {
		return nil, errors.New("invalid value for required argument 'ProjectUrl'")
	}
	var resource IntegrationCustomIssueTracker
	err := ctx.RegisterResource("gitlab:index/integrationCustomIssueTracker:IntegrationCustomIssueTracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationCustomIssueTracker gets an existing IntegrationCustomIssueTracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationCustomIssueTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationCustomIssueTrackerState, opts ...pulumi.ResourceOption) (*IntegrationCustomIssueTracker, error) {
	var resource IntegrationCustomIssueTracker
	err := ctx.ReadResource("gitlab:index/integrationCustomIssueTracker:IntegrationCustomIssueTracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationCustomIssueTracker resources.
type integrationCustomIssueTrackerState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl *string `pulumi:"issuesUrl"`
	// The ID or full path of the project for the custom issue tracker.
	Project *string `pulumi:"project"`
	// The URL to the project in the external issue tracker.
	ProjectUrl *string `pulumi:"projectUrl"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug *string `pulumi:"slug"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IntegrationCustomIssueTrackerState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringPtrInput
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringPtrInput
	// The ID or full path of the project for the custom issue tracker.
	Project pulumi.StringPtrInput
	// The URL to the project in the external issue tracker.
	ProjectUrl pulumi.StringPtrInput
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringPtrInput
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (IntegrationCustomIssueTrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationCustomIssueTrackerState)(nil)).Elem()
}

type integrationCustomIssueTrackerArgs struct {
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl string `pulumi:"issuesUrl"`
	// The ID or full path of the project for the custom issue tracker.
	Project string `pulumi:"project"`
	// The URL to the project in the external issue tracker.
	ProjectUrl string `pulumi:"projectUrl"`
}

// The set of arguments for constructing a IntegrationCustomIssueTracker resource.
type IntegrationCustomIssueTrackerArgs struct {
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringInput
	// The ID or full path of the project for the custom issue tracker.
	Project pulumi.StringInput
	// The URL to the project in the external issue tracker.
	ProjectUrl pulumi.StringInput
}

func (IntegrationCustomIssueTrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationCustomIssueTrackerArgs)(nil)).Elem()
}

type IntegrationCustomIssueTrackerInput interface {
	pulumi.Input

	ToIntegrationCustomIssueTrackerOutput() IntegrationCustomIssueTrackerOutput
	ToIntegrationCustomIssueTrackerOutputWithContext(ctx context.Context) IntegrationCustomIssueTrackerOutput
}

func (*IntegrationCustomIssueTracker) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationCustomIssueTracker)(nil)).Elem()
}

func (i *IntegrationCustomIssueTracker) ToIntegrationCustomIssueTrackerOutput() IntegrationCustomIssueTrackerOutput {
	return i.ToIntegrationCustomIssueTrackerOutputWithContext(context.Background())
}

func (i *IntegrationCustomIssueTracker) ToIntegrationCustomIssueTrackerOutputWithContext(ctx context.Context) IntegrationCustomIssueTrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationCustomIssueTrackerOutput)
}

// IntegrationCustomIssueTrackerArrayInput is an input type that accepts IntegrationCustomIssueTrackerArray and IntegrationCustomIssueTrackerArrayOutput values.
// You can construct a concrete instance of `IntegrationCustomIssueTrackerArrayInput` via:
//
//	IntegrationCustomIssueTrackerArray{ IntegrationCustomIssueTrackerArgs{...} }
type IntegrationCustomIssueTrackerArrayInput interface {
	pulumi.Input

	ToIntegrationCustomIssueTrackerArrayOutput() IntegrationCustomIssueTrackerArrayOutput
	ToIntegrationCustomIssueTrackerArrayOutputWithContext(context.Context) IntegrationCustomIssueTrackerArrayOutput
}

type IntegrationCustomIssueTrackerArray []IntegrationCustomIssueTrackerInput

func (IntegrationCustomIssueTrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationCustomIssueTracker)(nil)).Elem()
}

func (i IntegrationCustomIssueTrackerArray) ToIntegrationCustomIssueTrackerArrayOutput() IntegrationCustomIssueTrackerArrayOutput {
	return i.ToIntegrationCustomIssueTrackerArrayOutputWithContext(context.Background())
}

func (i IntegrationCustomIssueTrackerArray) ToIntegrationCustomIssueTrackerArrayOutputWithContext(ctx context.Context) IntegrationCustomIssueTrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationCustomIssueTrackerArrayOutput)
}

// IntegrationCustomIssueTrackerMapInput is an input type that accepts IntegrationCustomIssueTrackerMap and IntegrationCustomIssueTrackerMapOutput values.
// You can construct a concrete instance of `IntegrationCustomIssueTrackerMapInput` via:
//
//	IntegrationCustomIssueTrackerMap{ "key": IntegrationCustomIssueTrackerArgs{...} }
type IntegrationCustomIssueTrackerMapInput interface {
	pulumi.Input

	ToIntegrationCustomIssueTrackerMapOutput() IntegrationCustomIssueTrackerMapOutput
	ToIntegrationCustomIssueTrackerMapOutputWithContext(context.Context) IntegrationCustomIssueTrackerMapOutput
}

type IntegrationCustomIssueTrackerMap map[string]IntegrationCustomIssueTrackerInput

func (IntegrationCustomIssueTrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationCustomIssueTracker)(nil)).Elem()
}

func (i IntegrationCustomIssueTrackerMap) ToIntegrationCustomIssueTrackerMapOutput() IntegrationCustomIssueTrackerMapOutput {
	return i.ToIntegrationCustomIssueTrackerMapOutputWithContext(context.Background())
}

func (i IntegrationCustomIssueTrackerMap) ToIntegrationCustomIssueTrackerMapOutputWithContext(ctx context.Context) IntegrationCustomIssueTrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationCustomIssueTrackerMapOutput)
}

type IntegrationCustomIssueTrackerOutput struct{ *pulumi.OutputState }

func (IntegrationCustomIssueTrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationCustomIssueTracker)(nil)).Elem()
}

func (o IntegrationCustomIssueTrackerOutput) ToIntegrationCustomIssueTrackerOutput() IntegrationCustomIssueTrackerOutput {
	return o
}

func (o IntegrationCustomIssueTrackerOutput) ToIntegrationCustomIssueTrackerOutputWithContext(ctx context.Context) IntegrationCustomIssueTrackerOutput {
	return o
}

// Whether the integration is active.
func (o IntegrationCustomIssueTrackerOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationCustomIssueTracker) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The ISO8601 date/time that this integration was activated at in UTC.
func (o IntegrationCustomIssueTrackerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCustomIssueTracker) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL to view an issue in the external issue tracker. Must contain :id.
func (o IntegrationCustomIssueTrackerOutput) IssuesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCustomIssueTracker) pulumi.StringOutput { return v.IssuesUrl }).(pulumi.StringOutput)
}

// The ID or full path of the project for the custom issue tracker.
func (o IntegrationCustomIssueTrackerOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCustomIssueTracker) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URL to the project in the external issue tracker.
func (o IntegrationCustomIssueTrackerOutput) ProjectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCustomIssueTracker) pulumi.StringOutput { return v.ProjectUrl }).(pulumi.StringOutput)
}

// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
func (o IntegrationCustomIssueTrackerOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCustomIssueTracker) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The ISO8601 date/time that this integration was last updated at in UTC.
func (o IntegrationCustomIssueTrackerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationCustomIssueTracker) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type IntegrationCustomIssueTrackerArrayOutput struct{ *pulumi.OutputState }

func (IntegrationCustomIssueTrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationCustomIssueTracker)(nil)).Elem()
}

func (o IntegrationCustomIssueTrackerArrayOutput) ToIntegrationCustomIssueTrackerArrayOutput() IntegrationCustomIssueTrackerArrayOutput {
	return o
}

func (o IntegrationCustomIssueTrackerArrayOutput) ToIntegrationCustomIssueTrackerArrayOutputWithContext(ctx context.Context) IntegrationCustomIssueTrackerArrayOutput {
	return o
}

func (o IntegrationCustomIssueTrackerArrayOutput) Index(i pulumi.IntInput) IntegrationCustomIssueTrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationCustomIssueTracker {
		return vs[0].([]*IntegrationCustomIssueTracker)[vs[1].(int)]
	}).(IntegrationCustomIssueTrackerOutput)
}

type IntegrationCustomIssueTrackerMapOutput struct{ *pulumi.OutputState }

func (IntegrationCustomIssueTrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationCustomIssueTracker)(nil)).Elem()
}

func (o IntegrationCustomIssueTrackerMapOutput) ToIntegrationCustomIssueTrackerMapOutput() IntegrationCustomIssueTrackerMapOutput {
	return o
}

func (o IntegrationCustomIssueTrackerMapOutput) ToIntegrationCustomIssueTrackerMapOutputWithContext(ctx context.Context) IntegrationCustomIssueTrackerMapOutput {
	return o
}

func (o IntegrationCustomIssueTrackerMapOutput) MapIndex(k pulumi.StringInput) IntegrationCustomIssueTrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationCustomIssueTracker {
		return vs[0].(map[string]*IntegrationCustomIssueTracker)[vs[1].(string)]
	}).(IntegrationCustomIssueTrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationCustomIssueTrackerInput)(nil)).Elem(), &IntegrationCustomIssueTracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationCustomIssueTrackerArrayInput)(nil)).Elem(), IntegrationCustomIssueTrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationCustomIssueTrackerMapInput)(nil)).Elem(), IntegrationCustomIssueTrackerMap{})
	pulumi.RegisterOutputType(IntegrationCustomIssueTrackerOutput{})
	pulumi.RegisterOutputType(IntegrationCustomIssueTrackerArrayOutput{})
	pulumi.RegisterOutputType(IntegrationCustomIssueTrackerMapOutput{})
}
