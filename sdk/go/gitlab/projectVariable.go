// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource allows you to create and manage CI/CD variables for your GitLab projects.
// For further information on variables, consult the [gitlab
// documentation](https://docs.gitlab.com/ce/ci/variables/README.html#variables).
type ProjectVariable struct {
	pulumi.CustomResourceState

	// The environmentScope of the variable
	EnvironmentScope pulumi.StringPtrOutput `pulumi:"environmentScope"`
	// The name of the variable.
	Key pulumi.StringOutput `pulumi:"key"`
	// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
	Masked pulumi.BoolPtrOutput `pulumi:"masked"`
	// The name or id of the project to add the hook to.
	Project pulumi.StringOutput `pulumi:"project"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolPtrOutput `pulumi:"protected"`
	// The value of the variable.
	Value pulumi.StringOutput `pulumi:"value"`
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType pulumi.StringPtrOutput `pulumi:"variableType"`
}

// NewProjectVariable registers a new resource with the given unique name, arguments, and options.
func NewProjectVariable(ctx *pulumi.Context,
	name string, args *ProjectVariableArgs, opts ...pulumi.ResourceOption) (*ProjectVariable, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &ProjectVariableArgs{}
	}
	var resource ProjectVariable
	err := ctx.RegisterResource("gitlab:index/projectVariable:ProjectVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectVariable gets an existing ProjectVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectVariableState, opts ...pulumi.ResourceOption) (*ProjectVariable, error) {
	var resource ProjectVariable
	err := ctx.ReadResource("gitlab:index/projectVariable:ProjectVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectVariable resources.
type projectVariableState struct {
	// The environmentScope of the variable
	EnvironmentScope *string `pulumi:"environmentScope"`
	// The name of the variable.
	Key *string `pulumi:"key"`
	// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
	Masked *bool `pulumi:"masked"`
	// The name or id of the project to add the hook to.
	Project *string `pulumi:"project"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected *bool `pulumi:"protected"`
	// The value of the variable.
	Value *string `pulumi:"value"`
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType *string `pulumi:"variableType"`
}

type ProjectVariableState struct {
	// The environmentScope of the variable
	EnvironmentScope pulumi.StringPtrInput
	// The name of the variable.
	Key pulumi.StringPtrInput
	// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
	Masked pulumi.BoolPtrInput
	// The name or id of the project to add the hook to.
	Project pulumi.StringPtrInput
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolPtrInput
	// The value of the variable.
	Value pulumi.StringPtrInput
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType pulumi.StringPtrInput
}

func (ProjectVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectVariableState)(nil)).Elem()
}

type projectVariableArgs struct {
	// The environmentScope of the variable
	EnvironmentScope *string `pulumi:"environmentScope"`
	// The name of the variable.
	Key string `pulumi:"key"`
	// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
	Masked *bool `pulumi:"masked"`
	// The name or id of the project to add the hook to.
	Project string `pulumi:"project"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected *bool `pulumi:"protected"`
	// The value of the variable.
	Value string `pulumi:"value"`
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType *string `pulumi:"variableType"`
}

// The set of arguments for constructing a ProjectVariable resource.
type ProjectVariableArgs struct {
	// The environmentScope of the variable
	EnvironmentScope pulumi.StringPtrInput
	// The name of the variable.
	Key pulumi.StringInput
	// If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.
	Masked pulumi.BoolPtrInput
	// The name or id of the project to add the hook to.
	Project pulumi.StringInput
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.
	Protected pulumi.BoolPtrInput
	// The value of the variable.
	Value pulumi.StringInput
	// The type of a variable. Available types are: envVar (default) and file.
	VariableType pulumi.StringPtrInput
}

func (ProjectVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectVariableArgs)(nil)).Elem()
}
