// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # gitlab\_instance\_cluster
//
// This resource allows you to create and manage instance clusters for your GitLab instances.
// For further information on clusters, consult the [gitlab
// documentation](https://docs.gitlab.com/ee/user/instance/clusters/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gitlab.NewInstanceCluster(ctx, "bar", &gitlab.InstanceClusterArgs{
// 			Domain:                      pulumi.String("example.com"),
// 			Enabled:                     pulumi.Bool(true),
// 			EnvironmentScope:            pulumi.String("*"),
// 			KubernetesApiUrl:            pulumi.String("https://124.124.124"),
// 			KubernetesAuthorizationType: pulumi.String("rbac"),
// 			KubernetesCaCert:            pulumi.String("some-cert"),
// 			KubernetesNamespace:         pulumi.String("namespace"),
// 			KubernetesToken:             pulumi.String("some-token"),
// 			ManagementProjectId:         pulumi.String("123456"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// GitLab instance clusters can be imported using a `clusterid`, e.g.
//
// ```sh
//  $ pulumi import gitlab:index/instanceCluster:InstanceCluster bar 123
// ```
type InstanceCluster struct {
	pulumi.CustomResourceState

	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	CreatedAt   pulumi.StringOutput `pulumi:"createdAt"`
	// The base domain of the cluster.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope pulumi.StringPtrOutput `pulumi:"environmentScope"`
	// The URL to access the Kubernetes API.
	KubernetesApiUrl pulumi.StringOutput `pulumi:"kubernetesApiUrl"`
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType pulumi.StringPtrOutput `pulumi:"kubernetesAuthorizationType"`
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert pulumi.StringPtrOutput `pulumi:"kubernetesCaCert"`
	// The unique namespace related to the instance.
	KubernetesNamespace pulumi.StringPtrOutput `pulumi:"kubernetesNamespace"`
	// The token to authenticate against Kubernetes. This attribute cannot be read.
	KubernetesToken pulumi.StringOutput `pulumi:"kubernetesToken"`
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed pulumi.BoolPtrOutput `pulumi:"managed"`
	// The ID of the management project for the cluster.
	ManagementProjectId pulumi.StringPtrOutput `pulumi:"managementProjectId"`
	// The name of cluster.
	Name         pulumi.StringOutput `pulumi:"name"`
	PlatformType pulumi.StringOutput `pulumi:"platformType"`
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
}

// NewInstanceCluster registers a new resource with the given unique name, arguments, and options.
func NewInstanceCluster(ctx *pulumi.Context,
	name string, args *InstanceClusterArgs, opts ...pulumi.ResourceOption) (*InstanceCluster, error) {
	if args == nil || args.KubernetesApiUrl == nil {
		return nil, errors.New("missing required argument 'KubernetesApiUrl'")
	}
	if args == nil || args.KubernetesToken == nil {
		return nil, errors.New("missing required argument 'KubernetesToken'")
	}
	if args == nil {
		args = &InstanceClusterArgs{}
	}
	var resource InstanceCluster
	err := ctx.RegisterResource("gitlab:index/instanceCluster:InstanceCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceCluster gets an existing InstanceCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceClusterState, opts ...pulumi.ResourceOption) (*InstanceCluster, error) {
	var resource InstanceCluster
	err := ctx.ReadResource("gitlab:index/instanceCluster:InstanceCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceCluster resources.
type instanceClusterState struct {
	ClusterType *string `pulumi:"clusterType"`
	CreatedAt   *string `pulumi:"createdAt"`
	// The base domain of the cluster.
	Domain *string `pulumi:"domain"`
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled *bool `pulumi:"enabled"`
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope *string `pulumi:"environmentScope"`
	// The URL to access the Kubernetes API.
	KubernetesApiUrl *string `pulumi:"kubernetesApiUrl"`
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType *string `pulumi:"kubernetesAuthorizationType"`
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert *string `pulumi:"kubernetesCaCert"`
	// The unique namespace related to the instance.
	KubernetesNamespace *string `pulumi:"kubernetesNamespace"`
	// The token to authenticate against Kubernetes. This attribute cannot be read.
	KubernetesToken *string `pulumi:"kubernetesToken"`
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed *bool `pulumi:"managed"`
	// The ID of the management project for the cluster.
	ManagementProjectId *string `pulumi:"managementProjectId"`
	// The name of cluster.
	Name         *string `pulumi:"name"`
	PlatformType *string `pulumi:"platformType"`
	ProviderType *string `pulumi:"providerType"`
}

type InstanceClusterState struct {
	ClusterType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	// The base domain of the cluster.
	Domain pulumi.StringPtrInput
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled pulumi.BoolPtrInput
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope pulumi.StringPtrInput
	// The URL to access the Kubernetes API.
	KubernetesApiUrl pulumi.StringPtrInput
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType pulumi.StringPtrInput
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert pulumi.StringPtrInput
	// The unique namespace related to the instance.
	KubernetesNamespace pulumi.StringPtrInput
	// The token to authenticate against Kubernetes. This attribute cannot be read.
	KubernetesToken pulumi.StringPtrInput
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed pulumi.BoolPtrInput
	// The ID of the management project for the cluster.
	ManagementProjectId pulumi.StringPtrInput
	// The name of cluster.
	Name         pulumi.StringPtrInput
	PlatformType pulumi.StringPtrInput
	ProviderType pulumi.StringPtrInput
}

func (InstanceClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterState)(nil)).Elem()
}

type instanceClusterArgs struct {
	// The base domain of the cluster.
	Domain *string `pulumi:"domain"`
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled *bool `pulumi:"enabled"`
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope *string `pulumi:"environmentScope"`
	// The URL to access the Kubernetes API.
	KubernetesApiUrl string `pulumi:"kubernetesApiUrl"`
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType *string `pulumi:"kubernetesAuthorizationType"`
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert *string `pulumi:"kubernetesCaCert"`
	// The unique namespace related to the instance.
	KubernetesNamespace *string `pulumi:"kubernetesNamespace"`
	// The token to authenticate against Kubernetes. This attribute cannot be read.
	KubernetesToken string `pulumi:"kubernetesToken"`
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed *bool `pulumi:"managed"`
	// The ID of the management project for the cluster.
	ManagementProjectId *string `pulumi:"managementProjectId"`
	// The name of cluster.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a InstanceCluster resource.
type InstanceClusterArgs struct {
	// The base domain of the cluster.
	Domain pulumi.StringPtrInput
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled pulumi.BoolPtrInput
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope pulumi.StringPtrInput
	// The URL to access the Kubernetes API.
	KubernetesApiUrl pulumi.StringInput
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType pulumi.StringPtrInput
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert pulumi.StringPtrInput
	// The unique namespace related to the instance.
	KubernetesNamespace pulumi.StringPtrInput
	// The token to authenticate against Kubernetes. This attribute cannot be read.
	KubernetesToken pulumi.StringInput
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed pulumi.BoolPtrInput
	// The ID of the management project for the cluster.
	ManagementProjectId pulumi.StringPtrInput
	// The name of cluster.
	Name pulumi.StringPtrInput
}

func (InstanceClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterArgs)(nil)).Elem()
}

type InstanceClusterInput interface {
	pulumi.Input

	ToInstanceClusterOutput() InstanceClusterOutput
	ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput
}

func (InstanceCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCluster)(nil)).Elem()
}

func (i InstanceCluster) ToInstanceClusterOutput() InstanceClusterOutput {
	return i.ToInstanceClusterOutputWithContext(context.Background())
}

func (i InstanceCluster) ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterOutput)
}

type InstanceClusterOutput struct {
	*pulumi.OutputState
}

func (InstanceClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceClusterOutput)(nil)).Elem()
}

func (o InstanceClusterOutput) ToInstanceClusterOutput() InstanceClusterOutput {
	return o
}

func (o InstanceClusterOutput) ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceClusterOutput{})
}
