// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_pages_settings`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_pages_settings.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// Gitlab project pages settings can be imported using the project ID, for example:
//
// ```sh
// $ pulumi import gitlab:index/projectPagesSettings:ProjectPagesSettings example 12345
// ```
type ProjectPagesSettings struct {
	pulumi.CustomResourceState

	// List of current active deployments.
	Deployments ProjectPagesSettingsDeploymentArrayOutput `pulumi:"deployments"`
	// Boolean indicating if the project is set to force https. Requires `externalHttps` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
	ForceHttps pulumi.BoolOutput `pulumi:"forceHttps"`
	// Boolean indicating if a unique domain is enabled.
	IsUniqueDomainEnabled pulumi.BoolOutput `pulumi:"isUniqueDomainEnabled"`
	KeepSettingsOnDestroy pulumi.BoolOutput `pulumi:"keepSettingsOnDestroy"`
	// The project ID or path.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URL to access the project pages.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewProjectPagesSettings registers a new resource with the given unique name, arguments, and options.
func NewProjectPagesSettings(ctx *pulumi.Context,
	name string, args *ProjectPagesSettingsArgs, opts ...pulumi.ResourceOption) (*ProjectPagesSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectPagesSettings
	err := ctx.RegisterResource("gitlab:index/projectPagesSettings:ProjectPagesSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectPagesSettings gets an existing ProjectPagesSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectPagesSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectPagesSettingsState, opts ...pulumi.ResourceOption) (*ProjectPagesSettings, error) {
	var resource ProjectPagesSettings
	err := ctx.ReadResource("gitlab:index/projectPagesSettings:ProjectPagesSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectPagesSettings resources.
type projectPagesSettingsState struct {
	// List of current active deployments.
	Deployments []ProjectPagesSettingsDeployment `pulumi:"deployments"`
	// Boolean indicating if the project is set to force https. Requires `externalHttps` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
	ForceHttps *bool `pulumi:"forceHttps"`
	// Boolean indicating if a unique domain is enabled.
	IsUniqueDomainEnabled *bool `pulumi:"isUniqueDomainEnabled"`
	KeepSettingsOnDestroy *bool `pulumi:"keepSettingsOnDestroy"`
	// The project ID or path.
	Project *string `pulumi:"project"`
	// The URL to access the project pages.
	Url *string `pulumi:"url"`
}

type ProjectPagesSettingsState struct {
	// List of current active deployments.
	Deployments ProjectPagesSettingsDeploymentArrayInput
	// Boolean indicating if the project is set to force https. Requires `externalHttps` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
	ForceHttps pulumi.BoolPtrInput
	// Boolean indicating if a unique domain is enabled.
	IsUniqueDomainEnabled pulumi.BoolPtrInput
	KeepSettingsOnDestroy pulumi.BoolPtrInput
	// The project ID or path.
	Project pulumi.StringPtrInput
	// The URL to access the project pages.
	Url pulumi.StringPtrInput
}

func (ProjectPagesSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPagesSettingsState)(nil)).Elem()
}

type projectPagesSettingsArgs struct {
	// Boolean indicating if the project is set to force https. Requires `externalHttps` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
	ForceHttps *bool `pulumi:"forceHttps"`
	// Boolean indicating if a unique domain is enabled.
	IsUniqueDomainEnabled *bool `pulumi:"isUniqueDomainEnabled"`
	KeepSettingsOnDestroy *bool `pulumi:"keepSettingsOnDestroy"`
	// The project ID or path.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectPagesSettings resource.
type ProjectPagesSettingsArgs struct {
	// Boolean indicating if the project is set to force https. Requires `externalHttps` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
	ForceHttps pulumi.BoolPtrInput
	// Boolean indicating if a unique domain is enabled.
	IsUniqueDomainEnabled pulumi.BoolPtrInput
	KeepSettingsOnDestroy pulumi.BoolPtrInput
	// The project ID or path.
	Project pulumi.StringInput
}

func (ProjectPagesSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPagesSettingsArgs)(nil)).Elem()
}

type ProjectPagesSettingsInput interface {
	pulumi.Input

	ToProjectPagesSettingsOutput() ProjectPagesSettingsOutput
	ToProjectPagesSettingsOutputWithContext(ctx context.Context) ProjectPagesSettingsOutput
}

func (*ProjectPagesSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPagesSettings)(nil)).Elem()
}

func (i *ProjectPagesSettings) ToProjectPagesSettingsOutput() ProjectPagesSettingsOutput {
	return i.ToProjectPagesSettingsOutputWithContext(context.Background())
}

func (i *ProjectPagesSettings) ToProjectPagesSettingsOutputWithContext(ctx context.Context) ProjectPagesSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPagesSettingsOutput)
}

// ProjectPagesSettingsArrayInput is an input type that accepts ProjectPagesSettingsArray and ProjectPagesSettingsArrayOutput values.
// You can construct a concrete instance of `ProjectPagesSettingsArrayInput` via:
//
//	ProjectPagesSettingsArray{ ProjectPagesSettingsArgs{...} }
type ProjectPagesSettingsArrayInput interface {
	pulumi.Input

	ToProjectPagesSettingsArrayOutput() ProjectPagesSettingsArrayOutput
	ToProjectPagesSettingsArrayOutputWithContext(context.Context) ProjectPagesSettingsArrayOutput
}

type ProjectPagesSettingsArray []ProjectPagesSettingsInput

func (ProjectPagesSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectPagesSettings)(nil)).Elem()
}

func (i ProjectPagesSettingsArray) ToProjectPagesSettingsArrayOutput() ProjectPagesSettingsArrayOutput {
	return i.ToProjectPagesSettingsArrayOutputWithContext(context.Background())
}

func (i ProjectPagesSettingsArray) ToProjectPagesSettingsArrayOutputWithContext(ctx context.Context) ProjectPagesSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPagesSettingsArrayOutput)
}

// ProjectPagesSettingsMapInput is an input type that accepts ProjectPagesSettingsMap and ProjectPagesSettingsMapOutput values.
// You can construct a concrete instance of `ProjectPagesSettingsMapInput` via:
//
//	ProjectPagesSettingsMap{ "key": ProjectPagesSettingsArgs{...} }
type ProjectPagesSettingsMapInput interface {
	pulumi.Input

	ToProjectPagesSettingsMapOutput() ProjectPagesSettingsMapOutput
	ToProjectPagesSettingsMapOutputWithContext(context.Context) ProjectPagesSettingsMapOutput
}

type ProjectPagesSettingsMap map[string]ProjectPagesSettingsInput

func (ProjectPagesSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectPagesSettings)(nil)).Elem()
}

func (i ProjectPagesSettingsMap) ToProjectPagesSettingsMapOutput() ProjectPagesSettingsMapOutput {
	return i.ToProjectPagesSettingsMapOutputWithContext(context.Background())
}

func (i ProjectPagesSettingsMap) ToProjectPagesSettingsMapOutputWithContext(ctx context.Context) ProjectPagesSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPagesSettingsMapOutput)
}

type ProjectPagesSettingsOutput struct{ *pulumi.OutputState }

func (ProjectPagesSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPagesSettings)(nil)).Elem()
}

func (o ProjectPagesSettingsOutput) ToProjectPagesSettingsOutput() ProjectPagesSettingsOutput {
	return o
}

func (o ProjectPagesSettingsOutput) ToProjectPagesSettingsOutputWithContext(ctx context.Context) ProjectPagesSettingsOutput {
	return o
}

// List of current active deployments.
func (o ProjectPagesSettingsOutput) Deployments() ProjectPagesSettingsDeploymentArrayOutput {
	return o.ApplyT(func(v *ProjectPagesSettings) ProjectPagesSettingsDeploymentArrayOutput { return v.Deployments }).(ProjectPagesSettingsDeploymentArrayOutput)
}

// Boolean indicating if the project is set to force https. Requires `externalHttps` to be configured in the GitLab instance: https://docs.gitlab.com/administration/pages/#custom-domains-with-tls-support.
func (o ProjectPagesSettingsOutput) ForceHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectPagesSettings) pulumi.BoolOutput { return v.ForceHttps }).(pulumi.BoolOutput)
}

// Boolean indicating if a unique domain is enabled.
func (o ProjectPagesSettingsOutput) IsUniqueDomainEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectPagesSettings) pulumi.BoolOutput { return v.IsUniqueDomainEnabled }).(pulumi.BoolOutput)
}

func (o ProjectPagesSettingsOutput) KeepSettingsOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectPagesSettings) pulumi.BoolOutput { return v.KeepSettingsOnDestroy }).(pulumi.BoolOutput)
}

// The project ID or path.
func (o ProjectPagesSettingsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPagesSettings) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URL to access the project pages.
func (o ProjectPagesSettingsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPagesSettings) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ProjectPagesSettingsArrayOutput struct{ *pulumi.OutputState }

func (ProjectPagesSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectPagesSettings)(nil)).Elem()
}

func (o ProjectPagesSettingsArrayOutput) ToProjectPagesSettingsArrayOutput() ProjectPagesSettingsArrayOutput {
	return o
}

func (o ProjectPagesSettingsArrayOutput) ToProjectPagesSettingsArrayOutputWithContext(ctx context.Context) ProjectPagesSettingsArrayOutput {
	return o
}

func (o ProjectPagesSettingsArrayOutput) Index(i pulumi.IntInput) ProjectPagesSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectPagesSettings {
		return vs[0].([]*ProjectPagesSettings)[vs[1].(int)]
	}).(ProjectPagesSettingsOutput)
}

type ProjectPagesSettingsMapOutput struct{ *pulumi.OutputState }

func (ProjectPagesSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectPagesSettings)(nil)).Elem()
}

func (o ProjectPagesSettingsMapOutput) ToProjectPagesSettingsMapOutput() ProjectPagesSettingsMapOutput {
	return o
}

func (o ProjectPagesSettingsMapOutput) ToProjectPagesSettingsMapOutputWithContext(ctx context.Context) ProjectPagesSettingsMapOutput {
	return o
}

func (o ProjectPagesSettingsMapOutput) MapIndex(k pulumi.StringInput) ProjectPagesSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectPagesSettings {
		return vs[0].(map[string]*ProjectPagesSettings)[vs[1].(string)]
	}).(ProjectPagesSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPagesSettingsInput)(nil)).Elem(), &ProjectPagesSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPagesSettingsArrayInput)(nil)).Elem(), ProjectPagesSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPagesSettingsMapInput)(nil)).Elem(), ProjectPagesSettingsMap{})
	pulumi.RegisterOutputType(ProjectPagesSettingsOutput{})
	pulumi.RegisterOutputType(ProjectPagesSettingsArrayOutput{})
	pulumi.RegisterOutputType(ProjectPagesSettingsMapOutput{})
}
