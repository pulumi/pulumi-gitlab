// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `GroupDependencyProxy` resource allows managing the group docker dependency proxy. More than one dependency proxy per group will conflict with each other.
//
// If you're looking to manage the project-level package dependency proxy, see the `gitlabProjectPackageRegistryProxy` resource instead.
//
// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#mutationupdatedependencyproxysettings)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewGroupDependencyProxy(ctx, "foo", &gitlab.GroupDependencyProxyArgs{
//				Group:    pulumi.String("1234"),
//				Enabled:  pulumi.Bool(true),
//				Identity: pulumi.String("newidentity"),
//				Secret:   pulumi.String("somesecret"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_group_dependency_proxy`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_group_dependency_proxy.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// You can import a group dependency proxy using the group id. e.g. `{group-id}`
//
// "secret" will not populate when importing the dependency proxy, but will still
//
// be required in the configuration.
//
// ```sh
// $ pulumi import gitlab:index/groupDependencyProxy:GroupDependencyProxy foo 42
// ```
type GroupDependencyProxy struct {
	pulumi.CustomResourceState

	// Indicates whether the proxy is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID or URL-encoded path of the group.
	Group pulumi.StringOutput `pulumi:"group"`
	// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
	Identity pulumi.StringOutput `pulumi:"identity"`
	// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
	Secret pulumi.StringOutput `pulumi:"secret"`
}

// NewGroupDependencyProxy registers a new resource with the given unique name, arguments, and options.
func NewGroupDependencyProxy(ctx *pulumi.Context,
	name string, args *GroupDependencyProxyArgs, opts ...pulumi.ResourceOption) (*GroupDependencyProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupDependencyProxy
	err := ctx.RegisterResource("gitlab:index/groupDependencyProxy:GroupDependencyProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupDependencyProxy gets an existing GroupDependencyProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupDependencyProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupDependencyProxyState, opts ...pulumi.ResourceOption) (*GroupDependencyProxy, error) {
	var resource GroupDependencyProxy
	err := ctx.ReadResource("gitlab:index/groupDependencyProxy:GroupDependencyProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupDependencyProxy resources.
type groupDependencyProxyState struct {
	// Indicates whether the proxy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The ID or URL-encoded path of the group.
	Group *string `pulumi:"group"`
	// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
	Identity *string `pulumi:"identity"`
	// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
	Secret *string `pulumi:"secret"`
}

type GroupDependencyProxyState struct {
	// Indicates whether the proxy is enabled.
	Enabled pulumi.BoolPtrInput
	// The ID or URL-encoded path of the group.
	Group pulumi.StringPtrInput
	// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
	Identity pulumi.StringPtrInput
	// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
	Secret pulumi.StringPtrInput
}

func (GroupDependencyProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupDependencyProxyState)(nil)).Elem()
}

type groupDependencyProxyArgs struct {
	// Indicates whether the proxy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The ID or URL-encoded path of the group.
	Group string `pulumi:"group"`
	// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
	Identity *string `pulumi:"identity"`
	// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
	Secret *string `pulumi:"secret"`
}

// The set of arguments for constructing a GroupDependencyProxy resource.
type GroupDependencyProxyArgs struct {
	// Indicates whether the proxy is enabled.
	Enabled pulumi.BoolPtrInput
	// The ID or URL-encoded path of the group.
	Group pulumi.StringInput
	// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
	Identity pulumi.StringPtrInput
	// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
	Secret pulumi.StringPtrInput
}

func (GroupDependencyProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupDependencyProxyArgs)(nil)).Elem()
}

type GroupDependencyProxyInput interface {
	pulumi.Input

	ToGroupDependencyProxyOutput() GroupDependencyProxyOutput
	ToGroupDependencyProxyOutputWithContext(ctx context.Context) GroupDependencyProxyOutput
}

func (*GroupDependencyProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupDependencyProxy)(nil)).Elem()
}

func (i *GroupDependencyProxy) ToGroupDependencyProxyOutput() GroupDependencyProxyOutput {
	return i.ToGroupDependencyProxyOutputWithContext(context.Background())
}

func (i *GroupDependencyProxy) ToGroupDependencyProxyOutputWithContext(ctx context.Context) GroupDependencyProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDependencyProxyOutput)
}

// GroupDependencyProxyArrayInput is an input type that accepts GroupDependencyProxyArray and GroupDependencyProxyArrayOutput values.
// You can construct a concrete instance of `GroupDependencyProxyArrayInput` via:
//
//	GroupDependencyProxyArray{ GroupDependencyProxyArgs{...} }
type GroupDependencyProxyArrayInput interface {
	pulumi.Input

	ToGroupDependencyProxyArrayOutput() GroupDependencyProxyArrayOutput
	ToGroupDependencyProxyArrayOutputWithContext(context.Context) GroupDependencyProxyArrayOutput
}

type GroupDependencyProxyArray []GroupDependencyProxyInput

func (GroupDependencyProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupDependencyProxy)(nil)).Elem()
}

func (i GroupDependencyProxyArray) ToGroupDependencyProxyArrayOutput() GroupDependencyProxyArrayOutput {
	return i.ToGroupDependencyProxyArrayOutputWithContext(context.Background())
}

func (i GroupDependencyProxyArray) ToGroupDependencyProxyArrayOutputWithContext(ctx context.Context) GroupDependencyProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDependencyProxyArrayOutput)
}

// GroupDependencyProxyMapInput is an input type that accepts GroupDependencyProxyMap and GroupDependencyProxyMapOutput values.
// You can construct a concrete instance of `GroupDependencyProxyMapInput` via:
//
//	GroupDependencyProxyMap{ "key": GroupDependencyProxyArgs{...} }
type GroupDependencyProxyMapInput interface {
	pulumi.Input

	ToGroupDependencyProxyMapOutput() GroupDependencyProxyMapOutput
	ToGroupDependencyProxyMapOutputWithContext(context.Context) GroupDependencyProxyMapOutput
}

type GroupDependencyProxyMap map[string]GroupDependencyProxyInput

func (GroupDependencyProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupDependencyProxy)(nil)).Elem()
}

func (i GroupDependencyProxyMap) ToGroupDependencyProxyMapOutput() GroupDependencyProxyMapOutput {
	return i.ToGroupDependencyProxyMapOutputWithContext(context.Background())
}

func (i GroupDependencyProxyMap) ToGroupDependencyProxyMapOutputWithContext(ctx context.Context) GroupDependencyProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupDependencyProxyMapOutput)
}

type GroupDependencyProxyOutput struct{ *pulumi.OutputState }

func (GroupDependencyProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupDependencyProxy)(nil)).Elem()
}

func (o GroupDependencyProxyOutput) ToGroupDependencyProxyOutput() GroupDependencyProxyOutput {
	return o
}

func (o GroupDependencyProxyOutput) ToGroupDependencyProxyOutputWithContext(ctx context.Context) GroupDependencyProxyOutput {
	return o
}

// Indicates whether the proxy is enabled.
func (o GroupDependencyProxyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupDependencyProxy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID or URL-encoded path of the group.
func (o GroupDependencyProxyOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDependencyProxy) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
func (o GroupDependencyProxyOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDependencyProxy) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
func (o GroupDependencyProxyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupDependencyProxy) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

type GroupDependencyProxyArrayOutput struct{ *pulumi.OutputState }

func (GroupDependencyProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupDependencyProxy)(nil)).Elem()
}

func (o GroupDependencyProxyArrayOutput) ToGroupDependencyProxyArrayOutput() GroupDependencyProxyArrayOutput {
	return o
}

func (o GroupDependencyProxyArrayOutput) ToGroupDependencyProxyArrayOutputWithContext(ctx context.Context) GroupDependencyProxyArrayOutput {
	return o
}

func (o GroupDependencyProxyArrayOutput) Index(i pulumi.IntInput) GroupDependencyProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupDependencyProxy {
		return vs[0].([]*GroupDependencyProxy)[vs[1].(int)]
	}).(GroupDependencyProxyOutput)
}

type GroupDependencyProxyMapOutput struct{ *pulumi.OutputState }

func (GroupDependencyProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupDependencyProxy)(nil)).Elem()
}

func (o GroupDependencyProxyMapOutput) ToGroupDependencyProxyMapOutput() GroupDependencyProxyMapOutput {
	return o
}

func (o GroupDependencyProxyMapOutput) ToGroupDependencyProxyMapOutputWithContext(ctx context.Context) GroupDependencyProxyMapOutput {
	return o
}

func (o GroupDependencyProxyMapOutput) MapIndex(k pulumi.StringInput) GroupDependencyProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupDependencyProxy {
		return vs[0].(map[string]*GroupDependencyProxy)[vs[1].(string)]
	}).(GroupDependencyProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDependencyProxyInput)(nil)).Elem(), &GroupDependencyProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDependencyProxyArrayInput)(nil)).Elem(), GroupDependencyProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupDependencyProxyMapInput)(nil)).Elem(), GroupDependencyProxyMap{})
	pulumi.RegisterOutputType(GroupDependencyProxyOutput{})
	pulumi.RegisterOutputType(GroupDependencyProxyArrayOutput{})
	pulumi.RegisterOutputType(GroupDependencyProxyMapOutput{})
}
