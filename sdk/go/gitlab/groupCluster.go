// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # gitlab\_group\_cluster
//
// This resource allows you to create and manage group clusters for your GitLab groups.
// For further information on clusters, consult the [gitlab
// documentation](https://docs.gitlab.com/ce/user/group/clusters/index.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := gitlab.NewGroup(ctx, "foo", &gitlab.GroupArgs{
// 			Path: pulumi.String("foo-path"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = gitlab.NewGroupCluster(ctx, "bar", &gitlab.GroupClusterArgs{
// 			Domain:                      pulumi.String("example.com"),
// 			Enabled:                     pulumi.Bool(true),
// 			EnvironmentScope:            pulumi.String("*"),
// 			Group:                       foo.ID(),
// 			KubernetesApiUrl:            pulumi.String("https://124.124.124"),
// 			KubernetesAuthorizationType: pulumi.String("rbac"),
// 			KubernetesCaCert:            pulumi.String("some-cert"),
// 			KubernetesToken:             pulumi.String("some-token"),
// 			ManagementProjectId:         pulumi.String("123456"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// GitLab group clusters can be imported using an id made up of `groupid:clusterid`, e.g.
//
// ```sh
//  $ pulumi import gitlab:index/groupCluster:GroupCluster bar 123:321
// ```
type GroupCluster struct {
	pulumi.CustomResourceState

	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	CreatedAt   pulumi.StringOutput `pulumi:"createdAt"`
	// The base domain of the cluster.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope pulumi.StringPtrOutput `pulumi:"environmentScope"`
	// The id of the group to add the cluster to.
	Group pulumi.StringOutput `pulumi:"group"`
	// The URL to access the Kubernetes API.
	KubernetesApiUrl pulumi.StringOutput `pulumi:"kubernetesApiUrl"`
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType pulumi.StringPtrOutput `pulumi:"kubernetesAuthorizationType"`
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert pulumi.StringPtrOutput `pulumi:"kubernetesCaCert"`
	// The token to authenticate against Kubernetes.
	KubernetesToken pulumi.StringOutput `pulumi:"kubernetesToken"`
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed pulumi.BoolPtrOutput `pulumi:"managed"`
	// The ID of the management project for the cluster.
	ManagementProjectId pulumi.StringPtrOutput `pulumi:"managementProjectId"`
	// The name of cluster.
	Name         pulumi.StringOutput `pulumi:"name"`
	PlatformType pulumi.StringOutput `pulumi:"platformType"`
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
}

// NewGroupCluster registers a new resource with the given unique name, arguments, and options.
func NewGroupCluster(ctx *pulumi.Context,
	name string, args *GroupClusterArgs, opts ...pulumi.ResourceOption) (*GroupCluster, error) {
	if args == nil || args.Group == nil {
		return nil, errors.New("missing required argument 'Group'")
	}
	if args == nil || args.KubernetesApiUrl == nil {
		return nil, errors.New("missing required argument 'KubernetesApiUrl'")
	}
	if args == nil || args.KubernetesToken == nil {
		return nil, errors.New("missing required argument 'KubernetesToken'")
	}
	if args == nil {
		args = &GroupClusterArgs{}
	}
	var resource GroupCluster
	err := ctx.RegisterResource("gitlab:index/groupCluster:GroupCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupCluster gets an existing GroupCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupClusterState, opts ...pulumi.ResourceOption) (*GroupCluster, error) {
	var resource GroupCluster
	err := ctx.ReadResource("gitlab:index/groupCluster:GroupCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupCluster resources.
type groupClusterState struct {
	ClusterType *string `pulumi:"clusterType"`
	CreatedAt   *string `pulumi:"createdAt"`
	// The base domain of the cluster.
	Domain *string `pulumi:"domain"`
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled *bool `pulumi:"enabled"`
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope *string `pulumi:"environmentScope"`
	// The id of the group to add the cluster to.
	Group *string `pulumi:"group"`
	// The URL to access the Kubernetes API.
	KubernetesApiUrl *string `pulumi:"kubernetesApiUrl"`
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType *string `pulumi:"kubernetesAuthorizationType"`
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert *string `pulumi:"kubernetesCaCert"`
	// The token to authenticate against Kubernetes.
	KubernetesToken *string `pulumi:"kubernetesToken"`
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed *bool `pulumi:"managed"`
	// The ID of the management project for the cluster.
	ManagementProjectId *string `pulumi:"managementProjectId"`
	// The name of cluster.
	Name         *string `pulumi:"name"`
	PlatformType *string `pulumi:"platformType"`
	ProviderType *string `pulumi:"providerType"`
}

type GroupClusterState struct {
	ClusterType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	// The base domain of the cluster.
	Domain pulumi.StringPtrInput
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled pulumi.BoolPtrInput
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope pulumi.StringPtrInput
	// The id of the group to add the cluster to.
	Group pulumi.StringPtrInput
	// The URL to access the Kubernetes API.
	KubernetesApiUrl pulumi.StringPtrInput
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType pulumi.StringPtrInput
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert pulumi.StringPtrInput
	// The token to authenticate against Kubernetes.
	KubernetesToken pulumi.StringPtrInput
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed pulumi.BoolPtrInput
	// The ID of the management project for the cluster.
	ManagementProjectId pulumi.StringPtrInput
	// The name of cluster.
	Name         pulumi.StringPtrInput
	PlatformType pulumi.StringPtrInput
	ProviderType pulumi.StringPtrInput
}

func (GroupClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupClusterState)(nil)).Elem()
}

type groupClusterArgs struct {
	// The base domain of the cluster.
	Domain *string `pulumi:"domain"`
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled *bool `pulumi:"enabled"`
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope *string `pulumi:"environmentScope"`
	// The id of the group to add the cluster to.
	Group string `pulumi:"group"`
	// The URL to access the Kubernetes API.
	KubernetesApiUrl string `pulumi:"kubernetesApiUrl"`
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType *string `pulumi:"kubernetesAuthorizationType"`
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert *string `pulumi:"kubernetesCaCert"`
	// The token to authenticate against Kubernetes.
	KubernetesToken string `pulumi:"kubernetesToken"`
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed *bool `pulumi:"managed"`
	// The ID of the management project for the cluster.
	ManagementProjectId *string `pulumi:"managementProjectId"`
	// The name of cluster.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a GroupCluster resource.
type GroupClusterArgs struct {
	// The base domain of the cluster.
	Domain pulumi.StringPtrInput
	// Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
	Enabled pulumi.BoolPtrInput
	// The associated environment to the cluster. Defaults to `*`.
	EnvironmentScope pulumi.StringPtrInput
	// The id of the group to add the cluster to.
	Group pulumi.StringInput
	// The URL to access the Kubernetes API.
	KubernetesApiUrl pulumi.StringInput
	// The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
	KubernetesAuthorizationType pulumi.StringPtrInput
	// TLS certificate (needed if API is using a self-signed TLS certificate).
	KubernetesCaCert pulumi.StringPtrInput
	// The token to authenticate against Kubernetes.
	KubernetesToken pulumi.StringInput
	// Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
	Managed pulumi.BoolPtrInput
	// The ID of the management project for the cluster.
	ManagementProjectId pulumi.StringPtrInput
	// The name of cluster.
	Name pulumi.StringPtrInput
}

func (GroupClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupClusterArgs)(nil)).Elem()
}

type GroupClusterInput interface {
	pulumi.Input

	ToGroupClusterOutput() GroupClusterOutput
	ToGroupClusterOutputWithContext(ctx context.Context) GroupClusterOutput
}

func (GroupCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupCluster)(nil)).Elem()
}

func (i GroupCluster) ToGroupClusterOutput() GroupClusterOutput {
	return i.ToGroupClusterOutputWithContext(context.Background())
}

func (i GroupCluster) ToGroupClusterOutputWithContext(ctx context.Context) GroupClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupClusterOutput)
}

type GroupClusterOutput struct {
	*pulumi.OutputState
}

func (GroupClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupClusterOutput)(nil)).Elem()
}

func (o GroupClusterOutput) ToGroupClusterOutput() GroupClusterOutput {
	return o
}

func (o GroupClusterOutput) ToGroupClusterOutputWithContext(ctx context.Context) GroupClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GroupClusterOutput{})
}
