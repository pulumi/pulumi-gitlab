// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationCustomIssueTracker` resource manages the lifecycle of a project integration with a Custom Issue Tracker.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#custom-issue-tracker)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationCustomIssueTracker(ctx, "tracker", &gitlab.ProjectIntegrationCustomIssueTrackerArgs{
//				Project:    awesomeProject.ID(),
//				ProjectUrl: pulumi.String("https://customtracker.com/issues"),
//				IssuesUrl:  pulumi.String("https://customtracker.com/TEST-:id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_custom_issue_tracker`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_custom_issue_tracker.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// You can import a gitlab_project_integration_custom_issue_tracker state using the project ID, e.g.
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationCustomIssueTracker:ProjectIntegrationCustomIssueTracker tracker 1
// ```
type ProjectIntegrationCustomIssueTracker struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringOutput `pulumi:"issuesUrl"`
	// The ID or full path of the project for the custom issue tracker.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URL to the project in the external issue tracker.
	ProjectUrl pulumi.StringOutput `pulumi:"projectUrl"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewProjectIntegrationCustomIssueTracker registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationCustomIssueTracker(ctx *pulumi.Context,
	name string, args *ProjectIntegrationCustomIssueTrackerArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationCustomIssueTracker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IssuesUrl == nil {
		return nil, errors.New("invalid value for required argument 'IssuesUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProjectUrl == nil {
		return nil, errors.New("invalid value for required argument 'ProjectUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationCustomIssueTracker
	err := ctx.RegisterResource("gitlab:index/projectIntegrationCustomIssueTracker:ProjectIntegrationCustomIssueTracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationCustomIssueTracker gets an existing ProjectIntegrationCustomIssueTracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationCustomIssueTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationCustomIssueTrackerState, opts ...pulumi.ResourceOption) (*ProjectIntegrationCustomIssueTracker, error) {
	var resource ProjectIntegrationCustomIssueTracker
	err := ctx.ReadResource("gitlab:index/projectIntegrationCustomIssueTracker:ProjectIntegrationCustomIssueTracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationCustomIssueTracker resources.
type projectIntegrationCustomIssueTrackerState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl *string `pulumi:"issuesUrl"`
	// The ID or full path of the project for the custom issue tracker.
	Project *string `pulumi:"project"`
	// The URL to the project in the external issue tracker.
	ProjectUrl *string `pulumi:"projectUrl"`
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug *string `pulumi:"slug"`
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ProjectIntegrationCustomIssueTrackerState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// The ISO8601 date/time that this integration was activated at in UTC.
	CreatedAt pulumi.StringPtrInput
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringPtrInput
	// The ID or full path of the project for the custom issue tracker.
	Project pulumi.StringPtrInput
	// The URL to the project in the external issue tracker.
	ProjectUrl pulumi.StringPtrInput
	// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
	Slug pulumi.StringPtrInput
	// The ISO8601 date/time that this integration was last updated at in UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (ProjectIntegrationCustomIssueTrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationCustomIssueTrackerState)(nil)).Elem()
}

type projectIntegrationCustomIssueTrackerArgs struct {
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl string `pulumi:"issuesUrl"`
	// The ID or full path of the project for the custom issue tracker.
	Project string `pulumi:"project"`
	// The URL to the project in the external issue tracker.
	ProjectUrl string `pulumi:"projectUrl"`
}

// The set of arguments for constructing a ProjectIntegrationCustomIssueTracker resource.
type ProjectIntegrationCustomIssueTrackerArgs struct {
	// The URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringInput
	// The ID or full path of the project for the custom issue tracker.
	Project pulumi.StringInput
	// The URL to the project in the external issue tracker.
	ProjectUrl pulumi.StringInput
}

func (ProjectIntegrationCustomIssueTrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationCustomIssueTrackerArgs)(nil)).Elem()
}

type ProjectIntegrationCustomIssueTrackerInput interface {
	pulumi.Input

	ToProjectIntegrationCustomIssueTrackerOutput() ProjectIntegrationCustomIssueTrackerOutput
	ToProjectIntegrationCustomIssueTrackerOutputWithContext(ctx context.Context) ProjectIntegrationCustomIssueTrackerOutput
}

func (*ProjectIntegrationCustomIssueTracker) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationCustomIssueTracker)(nil)).Elem()
}

func (i *ProjectIntegrationCustomIssueTracker) ToProjectIntegrationCustomIssueTrackerOutput() ProjectIntegrationCustomIssueTrackerOutput {
	return i.ToProjectIntegrationCustomIssueTrackerOutputWithContext(context.Background())
}

func (i *ProjectIntegrationCustomIssueTracker) ToProjectIntegrationCustomIssueTrackerOutputWithContext(ctx context.Context) ProjectIntegrationCustomIssueTrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationCustomIssueTrackerOutput)
}

// ProjectIntegrationCustomIssueTrackerArrayInput is an input type that accepts ProjectIntegrationCustomIssueTrackerArray and ProjectIntegrationCustomIssueTrackerArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationCustomIssueTrackerArrayInput` via:
//
//	ProjectIntegrationCustomIssueTrackerArray{ ProjectIntegrationCustomIssueTrackerArgs{...} }
type ProjectIntegrationCustomIssueTrackerArrayInput interface {
	pulumi.Input

	ToProjectIntegrationCustomIssueTrackerArrayOutput() ProjectIntegrationCustomIssueTrackerArrayOutput
	ToProjectIntegrationCustomIssueTrackerArrayOutputWithContext(context.Context) ProjectIntegrationCustomIssueTrackerArrayOutput
}

type ProjectIntegrationCustomIssueTrackerArray []ProjectIntegrationCustomIssueTrackerInput

func (ProjectIntegrationCustomIssueTrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationCustomIssueTracker)(nil)).Elem()
}

func (i ProjectIntegrationCustomIssueTrackerArray) ToProjectIntegrationCustomIssueTrackerArrayOutput() ProjectIntegrationCustomIssueTrackerArrayOutput {
	return i.ToProjectIntegrationCustomIssueTrackerArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationCustomIssueTrackerArray) ToProjectIntegrationCustomIssueTrackerArrayOutputWithContext(ctx context.Context) ProjectIntegrationCustomIssueTrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationCustomIssueTrackerArrayOutput)
}

// ProjectIntegrationCustomIssueTrackerMapInput is an input type that accepts ProjectIntegrationCustomIssueTrackerMap and ProjectIntegrationCustomIssueTrackerMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationCustomIssueTrackerMapInput` via:
//
//	ProjectIntegrationCustomIssueTrackerMap{ "key": ProjectIntegrationCustomIssueTrackerArgs{...} }
type ProjectIntegrationCustomIssueTrackerMapInput interface {
	pulumi.Input

	ToProjectIntegrationCustomIssueTrackerMapOutput() ProjectIntegrationCustomIssueTrackerMapOutput
	ToProjectIntegrationCustomIssueTrackerMapOutputWithContext(context.Context) ProjectIntegrationCustomIssueTrackerMapOutput
}

type ProjectIntegrationCustomIssueTrackerMap map[string]ProjectIntegrationCustomIssueTrackerInput

func (ProjectIntegrationCustomIssueTrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationCustomIssueTracker)(nil)).Elem()
}

func (i ProjectIntegrationCustomIssueTrackerMap) ToProjectIntegrationCustomIssueTrackerMapOutput() ProjectIntegrationCustomIssueTrackerMapOutput {
	return i.ToProjectIntegrationCustomIssueTrackerMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationCustomIssueTrackerMap) ToProjectIntegrationCustomIssueTrackerMapOutputWithContext(ctx context.Context) ProjectIntegrationCustomIssueTrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationCustomIssueTrackerMapOutput)
}

type ProjectIntegrationCustomIssueTrackerOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationCustomIssueTrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationCustomIssueTracker)(nil)).Elem()
}

func (o ProjectIntegrationCustomIssueTrackerOutput) ToProjectIntegrationCustomIssueTrackerOutput() ProjectIntegrationCustomIssueTrackerOutput {
	return o
}

func (o ProjectIntegrationCustomIssueTrackerOutput) ToProjectIntegrationCustomIssueTrackerOutputWithContext(ctx context.Context) ProjectIntegrationCustomIssueTrackerOutput {
	return o
}

// Whether the integration is active.
func (o ProjectIntegrationCustomIssueTrackerOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectIntegrationCustomIssueTracker) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The ISO8601 date/time that this integration was activated at in UTC.
func (o ProjectIntegrationCustomIssueTrackerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationCustomIssueTracker) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL to view an issue in the external issue tracker. Must contain :id.
func (o ProjectIntegrationCustomIssueTrackerOutput) IssuesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationCustomIssueTracker) pulumi.StringOutput { return v.IssuesUrl }).(pulumi.StringOutput)
}

// The ID or full path of the project for the custom issue tracker.
func (o ProjectIntegrationCustomIssueTrackerOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationCustomIssueTracker) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URL to the project in the external issue tracker.
func (o ProjectIntegrationCustomIssueTrackerOutput) ProjectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationCustomIssueTracker) pulumi.StringOutput { return v.ProjectUrl }).(pulumi.StringOutput)
}

// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
func (o ProjectIntegrationCustomIssueTrackerOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationCustomIssueTracker) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The ISO8601 date/time that this integration was last updated at in UTC.
func (o ProjectIntegrationCustomIssueTrackerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationCustomIssueTracker) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ProjectIntegrationCustomIssueTrackerArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationCustomIssueTrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationCustomIssueTracker)(nil)).Elem()
}

func (o ProjectIntegrationCustomIssueTrackerArrayOutput) ToProjectIntegrationCustomIssueTrackerArrayOutput() ProjectIntegrationCustomIssueTrackerArrayOutput {
	return o
}

func (o ProjectIntegrationCustomIssueTrackerArrayOutput) ToProjectIntegrationCustomIssueTrackerArrayOutputWithContext(ctx context.Context) ProjectIntegrationCustomIssueTrackerArrayOutput {
	return o
}

func (o ProjectIntegrationCustomIssueTrackerArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationCustomIssueTrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationCustomIssueTracker {
		return vs[0].([]*ProjectIntegrationCustomIssueTracker)[vs[1].(int)]
	}).(ProjectIntegrationCustomIssueTrackerOutput)
}

type ProjectIntegrationCustomIssueTrackerMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationCustomIssueTrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationCustomIssueTracker)(nil)).Elem()
}

func (o ProjectIntegrationCustomIssueTrackerMapOutput) ToProjectIntegrationCustomIssueTrackerMapOutput() ProjectIntegrationCustomIssueTrackerMapOutput {
	return o
}

func (o ProjectIntegrationCustomIssueTrackerMapOutput) ToProjectIntegrationCustomIssueTrackerMapOutputWithContext(ctx context.Context) ProjectIntegrationCustomIssueTrackerMapOutput {
	return o
}

func (o ProjectIntegrationCustomIssueTrackerMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationCustomIssueTrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationCustomIssueTracker {
		return vs[0].(map[string]*ProjectIntegrationCustomIssueTracker)[vs[1].(string)]
	}).(ProjectIntegrationCustomIssueTrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationCustomIssueTrackerInput)(nil)).Elem(), &ProjectIntegrationCustomIssueTracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationCustomIssueTrackerArrayInput)(nil)).Elem(), ProjectIntegrationCustomIssueTrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationCustomIssueTrackerMapInput)(nil)).Elem(), ProjectIntegrationCustomIssueTrackerMap{})
	pulumi.RegisterOutputType(ProjectIntegrationCustomIssueTrackerOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationCustomIssueTrackerArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationCustomIssueTrackerMapOutput{})
}
