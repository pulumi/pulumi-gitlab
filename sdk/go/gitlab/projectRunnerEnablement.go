// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectRunnerEnablement` resource allows to enable a runner in a project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/runners.html#enable-a-runner-in-project)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v5/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewProjectRunnerEnablement(ctx, "foo", &gitlab.ProjectRunnerEnablementArgs{
//				Project:  pulumi.String("5"),
//				RunnerId: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GitLab project runners can be imported using an id made up of `project:runner_id`, e.g.
//
// ```sh
//
//	$ pulumi import gitlab:index/projectRunnerEnablement:ProjectRunnerEnablement foo 5:7
//
// ```
type ProjectRunnerEnablement struct {
	pulumi.CustomResourceState

	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID of a runner to enable for the project.
	RunnerId pulumi.IntOutput `pulumi:"runnerId"`
}

// NewProjectRunnerEnablement registers a new resource with the given unique name, arguments, and options.
func NewProjectRunnerEnablement(ctx *pulumi.Context,
	name string, args *ProjectRunnerEnablementArgs, opts ...pulumi.ResourceOption) (*ProjectRunnerEnablement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.RunnerId == nil {
		return nil, errors.New("invalid value for required argument 'RunnerId'")
	}
	var resource ProjectRunnerEnablement
	err := ctx.RegisterResource("gitlab:index/projectRunnerEnablement:ProjectRunnerEnablement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectRunnerEnablement gets an existing ProjectRunnerEnablement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRunnerEnablement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectRunnerEnablementState, opts ...pulumi.ResourceOption) (*ProjectRunnerEnablement, error) {
	var resource ProjectRunnerEnablement
	err := ctx.ReadResource("gitlab:index/projectRunnerEnablement:ProjectRunnerEnablement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectRunnerEnablement resources.
type projectRunnerEnablementState struct {
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project *string `pulumi:"project"`
	// The ID of a runner to enable for the project.
	RunnerId *int `pulumi:"runnerId"`
}

type ProjectRunnerEnablementState struct {
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project pulumi.StringPtrInput
	// The ID of a runner to enable for the project.
	RunnerId pulumi.IntPtrInput
}

func (ProjectRunnerEnablementState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRunnerEnablementState)(nil)).Elem()
}

type projectRunnerEnablementArgs struct {
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project string `pulumi:"project"`
	// The ID of a runner to enable for the project.
	RunnerId int `pulumi:"runnerId"`
}

// The set of arguments for constructing a ProjectRunnerEnablement resource.
type ProjectRunnerEnablementArgs struct {
	// The ID or URL-encoded path of the project owned by the authenticated user.
	Project pulumi.StringInput
	// The ID of a runner to enable for the project.
	RunnerId pulumi.IntInput
}

func (ProjectRunnerEnablementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRunnerEnablementArgs)(nil)).Elem()
}

type ProjectRunnerEnablementInput interface {
	pulumi.Input

	ToProjectRunnerEnablementOutput() ProjectRunnerEnablementOutput
	ToProjectRunnerEnablementOutputWithContext(ctx context.Context) ProjectRunnerEnablementOutput
}

func (*ProjectRunnerEnablement) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRunnerEnablement)(nil)).Elem()
}

func (i *ProjectRunnerEnablement) ToProjectRunnerEnablementOutput() ProjectRunnerEnablementOutput {
	return i.ToProjectRunnerEnablementOutputWithContext(context.Background())
}

func (i *ProjectRunnerEnablement) ToProjectRunnerEnablementOutputWithContext(ctx context.Context) ProjectRunnerEnablementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRunnerEnablementOutput)
}

// ProjectRunnerEnablementArrayInput is an input type that accepts ProjectRunnerEnablementArray and ProjectRunnerEnablementArrayOutput values.
// You can construct a concrete instance of `ProjectRunnerEnablementArrayInput` via:
//
//	ProjectRunnerEnablementArray{ ProjectRunnerEnablementArgs{...} }
type ProjectRunnerEnablementArrayInput interface {
	pulumi.Input

	ToProjectRunnerEnablementArrayOutput() ProjectRunnerEnablementArrayOutput
	ToProjectRunnerEnablementArrayOutputWithContext(context.Context) ProjectRunnerEnablementArrayOutput
}

type ProjectRunnerEnablementArray []ProjectRunnerEnablementInput

func (ProjectRunnerEnablementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRunnerEnablement)(nil)).Elem()
}

func (i ProjectRunnerEnablementArray) ToProjectRunnerEnablementArrayOutput() ProjectRunnerEnablementArrayOutput {
	return i.ToProjectRunnerEnablementArrayOutputWithContext(context.Background())
}

func (i ProjectRunnerEnablementArray) ToProjectRunnerEnablementArrayOutputWithContext(ctx context.Context) ProjectRunnerEnablementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRunnerEnablementArrayOutput)
}

// ProjectRunnerEnablementMapInput is an input type that accepts ProjectRunnerEnablementMap and ProjectRunnerEnablementMapOutput values.
// You can construct a concrete instance of `ProjectRunnerEnablementMapInput` via:
//
//	ProjectRunnerEnablementMap{ "key": ProjectRunnerEnablementArgs{...} }
type ProjectRunnerEnablementMapInput interface {
	pulumi.Input

	ToProjectRunnerEnablementMapOutput() ProjectRunnerEnablementMapOutput
	ToProjectRunnerEnablementMapOutputWithContext(context.Context) ProjectRunnerEnablementMapOutput
}

type ProjectRunnerEnablementMap map[string]ProjectRunnerEnablementInput

func (ProjectRunnerEnablementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRunnerEnablement)(nil)).Elem()
}

func (i ProjectRunnerEnablementMap) ToProjectRunnerEnablementMapOutput() ProjectRunnerEnablementMapOutput {
	return i.ToProjectRunnerEnablementMapOutputWithContext(context.Background())
}

func (i ProjectRunnerEnablementMap) ToProjectRunnerEnablementMapOutputWithContext(ctx context.Context) ProjectRunnerEnablementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRunnerEnablementMapOutput)
}

type ProjectRunnerEnablementOutput struct{ *pulumi.OutputState }

func (ProjectRunnerEnablementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRunnerEnablement)(nil)).Elem()
}

func (o ProjectRunnerEnablementOutput) ToProjectRunnerEnablementOutput() ProjectRunnerEnablementOutput {
	return o
}

func (o ProjectRunnerEnablementOutput) ToProjectRunnerEnablementOutputWithContext(ctx context.Context) ProjectRunnerEnablementOutput {
	return o
}

// The ID or URL-encoded path of the project owned by the authenticated user.
func (o ProjectRunnerEnablementOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRunnerEnablement) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ID of a runner to enable for the project.
func (o ProjectRunnerEnablementOutput) RunnerId() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectRunnerEnablement) pulumi.IntOutput { return v.RunnerId }).(pulumi.IntOutput)
}

type ProjectRunnerEnablementArrayOutput struct{ *pulumi.OutputState }

func (ProjectRunnerEnablementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRunnerEnablement)(nil)).Elem()
}

func (o ProjectRunnerEnablementArrayOutput) ToProjectRunnerEnablementArrayOutput() ProjectRunnerEnablementArrayOutput {
	return o
}

func (o ProjectRunnerEnablementArrayOutput) ToProjectRunnerEnablementArrayOutputWithContext(ctx context.Context) ProjectRunnerEnablementArrayOutput {
	return o
}

func (o ProjectRunnerEnablementArrayOutput) Index(i pulumi.IntInput) ProjectRunnerEnablementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectRunnerEnablement {
		return vs[0].([]*ProjectRunnerEnablement)[vs[1].(int)]
	}).(ProjectRunnerEnablementOutput)
}

type ProjectRunnerEnablementMapOutput struct{ *pulumi.OutputState }

func (ProjectRunnerEnablementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRunnerEnablement)(nil)).Elem()
}

func (o ProjectRunnerEnablementMapOutput) ToProjectRunnerEnablementMapOutput() ProjectRunnerEnablementMapOutput {
	return o
}

func (o ProjectRunnerEnablementMapOutput) ToProjectRunnerEnablementMapOutputWithContext(ctx context.Context) ProjectRunnerEnablementMapOutput {
	return o
}

func (o ProjectRunnerEnablementMapOutput) MapIndex(k pulumi.StringInput) ProjectRunnerEnablementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectRunnerEnablement {
		return vs[0].(map[string]*ProjectRunnerEnablement)[vs[1].(string)]
	}).(ProjectRunnerEnablementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRunnerEnablementInput)(nil)).Elem(), &ProjectRunnerEnablement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRunnerEnablementArrayInput)(nil)).Elem(), ProjectRunnerEnablementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRunnerEnablementMapInput)(nil)).Elem(), ProjectRunnerEnablementMap{})
	pulumi.RegisterOutputType(ProjectRunnerEnablementOutput{})
	pulumi.RegisterOutputType(ProjectRunnerEnablementArrayOutput{})
	pulumi.RegisterOutputType(ProjectRunnerEnablementMapOutput{})
}
