// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ProjectIntegrationYoutrack` resource manages the lifecycle of a project integration with YouTrack.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#youtrack)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myProject, err := gitlab.NewProject(ctx, "my_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("my_project"),
//				Description:     pulumi.String("My project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewProjectIntegrationYoutrack(ctx, "default", &gitlab.ProjectIntegrationYoutrackArgs{
//				Project:    myProject.ID(),
//				IssuesUrl:  pulumi.String("https://my.youtrack.com/issue/:id"),
//				ProjectUrl: pulumi.String("https://my.youtrack.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_youtrack`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_project_integration_youtrack.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// You can import a gitlab_project_integration_youtrack state using the project ID, for example:
//
// ```sh
// $ pulumi import gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack default 1
// ```
type ProjectIntegrationYoutrack struct {
	pulumi.CustomResourceState

	// URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringOutput `pulumi:"issuesUrl"`
	// ID or namespace of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// URL of the project in the external issue tracker.
	ProjectUrl pulumi.StringOutput `pulumi:"projectUrl"`
}

// NewProjectIntegrationYoutrack registers a new resource with the given unique name, arguments, and options.
func NewProjectIntegrationYoutrack(ctx *pulumi.Context,
	name string, args *ProjectIntegrationYoutrackArgs, opts ...pulumi.ResourceOption) (*ProjectIntegrationYoutrack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IssuesUrl == nil {
		return nil, errors.New("invalid value for required argument 'IssuesUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProjectUrl == nil {
		return nil, errors.New("invalid value for required argument 'ProjectUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectIntegrationYoutrack
	err := ctx.RegisterResource("gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIntegrationYoutrack gets an existing ProjectIntegrationYoutrack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIntegrationYoutrack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIntegrationYoutrackState, opts ...pulumi.ResourceOption) (*ProjectIntegrationYoutrack, error) {
	var resource ProjectIntegrationYoutrack
	err := ctx.ReadResource("gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIntegrationYoutrack resources.
type projectIntegrationYoutrackState struct {
	// URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl *string `pulumi:"issuesUrl"`
	// ID or namespace of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// URL of the project in the external issue tracker.
	ProjectUrl *string `pulumi:"projectUrl"`
}

type ProjectIntegrationYoutrackState struct {
	// URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringPtrInput
	// ID or namespace of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// URL of the project in the external issue tracker.
	ProjectUrl pulumi.StringPtrInput
}

func (ProjectIntegrationYoutrackState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationYoutrackState)(nil)).Elem()
}

type projectIntegrationYoutrackArgs struct {
	// URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl string `pulumi:"issuesUrl"`
	// ID or namespace of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// URL of the project in the external issue tracker.
	ProjectUrl string `pulumi:"projectUrl"`
}

// The set of arguments for constructing a ProjectIntegrationYoutrack resource.
type ProjectIntegrationYoutrackArgs struct {
	// URL to view an issue in the external issue tracker. Must contain :id.
	IssuesUrl pulumi.StringInput
	// ID or namespace of the project you want to activate integration on.
	Project pulumi.StringInput
	// URL of the project in the external issue tracker.
	ProjectUrl pulumi.StringInput
}

func (ProjectIntegrationYoutrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIntegrationYoutrackArgs)(nil)).Elem()
}

type ProjectIntegrationYoutrackInput interface {
	pulumi.Input

	ToProjectIntegrationYoutrackOutput() ProjectIntegrationYoutrackOutput
	ToProjectIntegrationYoutrackOutputWithContext(ctx context.Context) ProjectIntegrationYoutrackOutput
}

func (*ProjectIntegrationYoutrack) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationYoutrack)(nil)).Elem()
}

func (i *ProjectIntegrationYoutrack) ToProjectIntegrationYoutrackOutput() ProjectIntegrationYoutrackOutput {
	return i.ToProjectIntegrationYoutrackOutputWithContext(context.Background())
}

func (i *ProjectIntegrationYoutrack) ToProjectIntegrationYoutrackOutputWithContext(ctx context.Context) ProjectIntegrationYoutrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationYoutrackOutput)
}

// ProjectIntegrationYoutrackArrayInput is an input type that accepts ProjectIntegrationYoutrackArray and ProjectIntegrationYoutrackArrayOutput values.
// You can construct a concrete instance of `ProjectIntegrationYoutrackArrayInput` via:
//
//	ProjectIntegrationYoutrackArray{ ProjectIntegrationYoutrackArgs{...} }
type ProjectIntegrationYoutrackArrayInput interface {
	pulumi.Input

	ToProjectIntegrationYoutrackArrayOutput() ProjectIntegrationYoutrackArrayOutput
	ToProjectIntegrationYoutrackArrayOutputWithContext(context.Context) ProjectIntegrationYoutrackArrayOutput
}

type ProjectIntegrationYoutrackArray []ProjectIntegrationYoutrackInput

func (ProjectIntegrationYoutrackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationYoutrack)(nil)).Elem()
}

func (i ProjectIntegrationYoutrackArray) ToProjectIntegrationYoutrackArrayOutput() ProjectIntegrationYoutrackArrayOutput {
	return i.ToProjectIntegrationYoutrackArrayOutputWithContext(context.Background())
}

func (i ProjectIntegrationYoutrackArray) ToProjectIntegrationYoutrackArrayOutputWithContext(ctx context.Context) ProjectIntegrationYoutrackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationYoutrackArrayOutput)
}

// ProjectIntegrationYoutrackMapInput is an input type that accepts ProjectIntegrationYoutrackMap and ProjectIntegrationYoutrackMapOutput values.
// You can construct a concrete instance of `ProjectIntegrationYoutrackMapInput` via:
//
//	ProjectIntegrationYoutrackMap{ "key": ProjectIntegrationYoutrackArgs{...} }
type ProjectIntegrationYoutrackMapInput interface {
	pulumi.Input

	ToProjectIntegrationYoutrackMapOutput() ProjectIntegrationYoutrackMapOutput
	ToProjectIntegrationYoutrackMapOutputWithContext(context.Context) ProjectIntegrationYoutrackMapOutput
}

type ProjectIntegrationYoutrackMap map[string]ProjectIntegrationYoutrackInput

func (ProjectIntegrationYoutrackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationYoutrack)(nil)).Elem()
}

func (i ProjectIntegrationYoutrackMap) ToProjectIntegrationYoutrackMapOutput() ProjectIntegrationYoutrackMapOutput {
	return i.ToProjectIntegrationYoutrackMapOutputWithContext(context.Background())
}

func (i ProjectIntegrationYoutrackMap) ToProjectIntegrationYoutrackMapOutputWithContext(ctx context.Context) ProjectIntegrationYoutrackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIntegrationYoutrackMapOutput)
}

type ProjectIntegrationYoutrackOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationYoutrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIntegrationYoutrack)(nil)).Elem()
}

func (o ProjectIntegrationYoutrackOutput) ToProjectIntegrationYoutrackOutput() ProjectIntegrationYoutrackOutput {
	return o
}

func (o ProjectIntegrationYoutrackOutput) ToProjectIntegrationYoutrackOutputWithContext(ctx context.Context) ProjectIntegrationYoutrackOutput {
	return o
}

// URL to view an issue in the external issue tracker. Must contain :id.
func (o ProjectIntegrationYoutrackOutput) IssuesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationYoutrack) pulumi.StringOutput { return v.IssuesUrl }).(pulumi.StringOutput)
}

// ID or namespace of the project you want to activate integration on.
func (o ProjectIntegrationYoutrackOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationYoutrack) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// URL of the project in the external issue tracker.
func (o ProjectIntegrationYoutrackOutput) ProjectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIntegrationYoutrack) pulumi.StringOutput { return v.ProjectUrl }).(pulumi.StringOutput)
}

type ProjectIntegrationYoutrackArrayOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationYoutrackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectIntegrationYoutrack)(nil)).Elem()
}

func (o ProjectIntegrationYoutrackArrayOutput) ToProjectIntegrationYoutrackArrayOutput() ProjectIntegrationYoutrackArrayOutput {
	return o
}

func (o ProjectIntegrationYoutrackArrayOutput) ToProjectIntegrationYoutrackArrayOutputWithContext(ctx context.Context) ProjectIntegrationYoutrackArrayOutput {
	return o
}

func (o ProjectIntegrationYoutrackArrayOutput) Index(i pulumi.IntInput) ProjectIntegrationYoutrackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectIntegrationYoutrack {
		return vs[0].([]*ProjectIntegrationYoutrack)[vs[1].(int)]
	}).(ProjectIntegrationYoutrackOutput)
}

type ProjectIntegrationYoutrackMapOutput struct{ *pulumi.OutputState }

func (ProjectIntegrationYoutrackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectIntegrationYoutrack)(nil)).Elem()
}

func (o ProjectIntegrationYoutrackMapOutput) ToProjectIntegrationYoutrackMapOutput() ProjectIntegrationYoutrackMapOutput {
	return o
}

func (o ProjectIntegrationYoutrackMapOutput) ToProjectIntegrationYoutrackMapOutputWithContext(ctx context.Context) ProjectIntegrationYoutrackMapOutput {
	return o
}

func (o ProjectIntegrationYoutrackMapOutput) MapIndex(k pulumi.StringInput) ProjectIntegrationYoutrackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectIntegrationYoutrack {
		return vs[0].(map[string]*ProjectIntegrationYoutrack)[vs[1].(string)]
	}).(ProjectIntegrationYoutrackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationYoutrackInput)(nil)).Elem(), &ProjectIntegrationYoutrack{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationYoutrackArrayInput)(nil)).Elem(), ProjectIntegrationYoutrackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIntegrationYoutrackMapInput)(nil)).Elem(), ProjectIntegrationYoutrackMap{})
	pulumi.RegisterOutputType(ProjectIntegrationYoutrackOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationYoutrackArrayOutput{})
	pulumi.RegisterOutputType(ProjectIntegrationYoutrackMapOutput{})
}
