// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectProtectedTag` data source allows details of a protected tag to be retrieved by its name and the project it belongs to.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_tags/#get-a-single-protected-tag-or-wildcard-protected-tag)
func GetProjectProtectedTag(ctx *pulumi.Context, args *GetProjectProtectedTagArgs, opts ...pulumi.InvokeOption) (*GetProjectProtectedTagResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectProtectedTagResult
	err := ctx.Invoke("gitlab:index/getProjectProtectedTag:getProjectProtectedTag", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectProtectedTag.
type GetProjectProtectedTagArgs struct {
	// The integer or path with namespace that uniquely identifies the project.
	Project string `pulumi:"project"`
	// The name of the protected tag.
	Tag string `pulumi:"tag"`
}

// A collection of values returned by getProjectProtectedTag.
type GetProjectProtectedTagResult struct {
	// Array of access levels/user(s)/group(s) allowed to create protected tags.
	CreateAccessLevels []GetProjectProtectedTagCreateAccessLevel `pulumi:"createAccessLevels"`
	// The ID of this resource. In the format of `<tag>`.
	Id string `pulumi:"id"`
	// The integer or path with namespace that uniquely identifies the project.
	Project string `pulumi:"project"`
	// The name of the protected tag.
	Tag string `pulumi:"tag"`
}

func GetProjectProtectedTagOutput(ctx *pulumi.Context, args GetProjectProtectedTagOutputArgs, opts ...pulumi.InvokeOption) GetProjectProtectedTagResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectProtectedTagResultOutput, error) {
			args := v.(GetProjectProtectedTagArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getProjectProtectedTag:getProjectProtectedTag", args, GetProjectProtectedTagResultOutput{}, options).(GetProjectProtectedTagResultOutput), nil
		}).(GetProjectProtectedTagResultOutput)
}

// A collection of arguments for invoking getProjectProtectedTag.
type GetProjectProtectedTagOutputArgs struct {
	// The integer or path with namespace that uniquely identifies the project.
	Project pulumi.StringInput `pulumi:"project"`
	// The name of the protected tag.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (GetProjectProtectedTagOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagArgs)(nil)).Elem()
}

// A collection of values returned by getProjectProtectedTag.
type GetProjectProtectedTagResultOutput struct{ *pulumi.OutputState }

func (GetProjectProtectedTagResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectProtectedTagResult)(nil)).Elem()
}

func (o GetProjectProtectedTagResultOutput) ToGetProjectProtectedTagResultOutput() GetProjectProtectedTagResultOutput {
	return o
}

func (o GetProjectProtectedTagResultOutput) ToGetProjectProtectedTagResultOutputWithContext(ctx context.Context) GetProjectProtectedTagResultOutput {
	return o
}

// Array of access levels/user(s)/group(s) allowed to create protected tags.
func (o GetProjectProtectedTagResultOutput) CreateAccessLevels() GetProjectProtectedTagCreateAccessLevelArrayOutput {
	return o.ApplyT(func(v GetProjectProtectedTagResult) []GetProjectProtectedTagCreateAccessLevel {
		return v.CreateAccessLevels
	}).(GetProjectProtectedTagCreateAccessLevelArrayOutput)
}

// The ID of this resource. In the format of `<tag>`.
func (o GetProjectProtectedTagResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagResult) string { return v.Id }).(pulumi.StringOutput)
}

// The integer or path with namespace that uniquely identifies the project.
func (o GetProjectProtectedTagResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagResult) string { return v.Project }).(pulumi.StringOutput)
}

// The name of the protected tag.
func (o GetProjectProtectedTagResultOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectProtectedTagResult) string { return v.Tag }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectProtectedTagResultOutput{})
}
