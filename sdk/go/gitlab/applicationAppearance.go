// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_application_appearance`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_application_appearance.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// Gitlab application appearance can be imported with the hard-coded key `gitlab`, for example:
//
// ```sh
// $ pulumi import gitlab:index/applicationAppearance:ApplicationAppearance example "gitlab"
// ```
type ApplicationAppearance struct {
	pulumi.CustomResourceState

	// Markdown text shown on the sign-in and sign-up page.
	Description pulumi.StringOutput `pulumi:"description"`
	// Add header and footer to all outgoing emails if enabled.
	EmailHeaderAndFooterEnabled pulumi.BoolOutput `pulumi:"emailHeaderAndFooterEnabled"`
	// Message in the system footer bar.
	FooterMessage pulumi.StringOutput `pulumi:"footerMessage"`
	// Message in the system header bar.
	HeaderMessage         pulumi.StringOutput `pulumi:"headerMessage"`
	KeepSettingsOnDestroy pulumi.BoolOutput   `pulumi:"keepSettingsOnDestroy"`
	// Markdown text shown on the group or project member page for users with permission to change members.
	MemberGuidelines pulumi.StringOutput `pulumi:"memberGuidelines"`
	// Background color for the system header or footer bar, in CSS hex notation.
	MessageBackgroundColor pulumi.StringOutput `pulumi:"messageBackgroundColor"`
	// Font color for the system header or footer bar, in CSS hex notation.
	MessageFontColor pulumi.StringOutput `pulumi:"messageFontColor"`
	// Markdown text shown on the new project page.
	NewProjectGuidelines pulumi.StringOutput `pulumi:"newProjectGuidelines"`
	// Markdown text shown on the profile page below the Public Avatar.
	ProfileImageGuidelines pulumi.StringOutput `pulumi:"profileImageGuidelines"`
	// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
	PwaDescription pulumi.StringOutput `pulumi:"pwaDescription"`
	// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
	PwaName pulumi.StringOutput `pulumi:"pwaName"`
	// Short name for Progressive Web App.
	PwaShortName pulumi.StringOutput `pulumi:"pwaShortName"`
	// Application title on the sign-in and sign-up page.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewApplicationAppearance registers a new resource with the given unique name, arguments, and options.
func NewApplicationAppearance(ctx *pulumi.Context,
	name string, args *ApplicationAppearanceArgs, opts ...pulumi.ResourceOption) (*ApplicationAppearance, error) {
	if args == nil {
		args = &ApplicationAppearanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationAppearance
	err := ctx.RegisterResource("gitlab:index/applicationAppearance:ApplicationAppearance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationAppearance gets an existing ApplicationAppearance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationAppearance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationAppearanceState, opts ...pulumi.ResourceOption) (*ApplicationAppearance, error) {
	var resource ApplicationAppearance
	err := ctx.ReadResource("gitlab:index/applicationAppearance:ApplicationAppearance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationAppearance resources.
type applicationAppearanceState struct {
	// Markdown text shown on the sign-in and sign-up page.
	Description *string `pulumi:"description"`
	// Add header and footer to all outgoing emails if enabled.
	EmailHeaderAndFooterEnabled *bool `pulumi:"emailHeaderAndFooterEnabled"`
	// Message in the system footer bar.
	FooterMessage *string `pulumi:"footerMessage"`
	// Message in the system header bar.
	HeaderMessage         *string `pulumi:"headerMessage"`
	KeepSettingsOnDestroy *bool   `pulumi:"keepSettingsOnDestroy"`
	// Markdown text shown on the group or project member page for users with permission to change members.
	MemberGuidelines *string `pulumi:"memberGuidelines"`
	// Background color for the system header or footer bar, in CSS hex notation.
	MessageBackgroundColor *string `pulumi:"messageBackgroundColor"`
	// Font color for the system header or footer bar, in CSS hex notation.
	MessageFontColor *string `pulumi:"messageFontColor"`
	// Markdown text shown on the new project page.
	NewProjectGuidelines *string `pulumi:"newProjectGuidelines"`
	// Markdown text shown on the profile page below the Public Avatar.
	ProfileImageGuidelines *string `pulumi:"profileImageGuidelines"`
	// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
	PwaDescription *string `pulumi:"pwaDescription"`
	// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
	PwaName *string `pulumi:"pwaName"`
	// Short name for Progressive Web App.
	PwaShortName *string `pulumi:"pwaShortName"`
	// Application title on the sign-in and sign-up page.
	Title *string `pulumi:"title"`
}

type ApplicationAppearanceState struct {
	// Markdown text shown on the sign-in and sign-up page.
	Description pulumi.StringPtrInput
	// Add header and footer to all outgoing emails if enabled.
	EmailHeaderAndFooterEnabled pulumi.BoolPtrInput
	// Message in the system footer bar.
	FooterMessage pulumi.StringPtrInput
	// Message in the system header bar.
	HeaderMessage         pulumi.StringPtrInput
	KeepSettingsOnDestroy pulumi.BoolPtrInput
	// Markdown text shown on the group or project member page for users with permission to change members.
	MemberGuidelines pulumi.StringPtrInput
	// Background color for the system header or footer bar, in CSS hex notation.
	MessageBackgroundColor pulumi.StringPtrInput
	// Font color for the system header or footer bar, in CSS hex notation.
	MessageFontColor pulumi.StringPtrInput
	// Markdown text shown on the new project page.
	NewProjectGuidelines pulumi.StringPtrInput
	// Markdown text shown on the profile page below the Public Avatar.
	ProfileImageGuidelines pulumi.StringPtrInput
	// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
	PwaDescription pulumi.StringPtrInput
	// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
	PwaName pulumi.StringPtrInput
	// Short name for Progressive Web App.
	PwaShortName pulumi.StringPtrInput
	// Application title on the sign-in and sign-up page.
	Title pulumi.StringPtrInput
}

func (ApplicationAppearanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAppearanceState)(nil)).Elem()
}

type applicationAppearanceArgs struct {
	// Markdown text shown on the sign-in and sign-up page.
	Description *string `pulumi:"description"`
	// Add header and footer to all outgoing emails if enabled.
	EmailHeaderAndFooterEnabled *bool `pulumi:"emailHeaderAndFooterEnabled"`
	// Message in the system footer bar.
	FooterMessage *string `pulumi:"footerMessage"`
	// Message in the system header bar.
	HeaderMessage         *string `pulumi:"headerMessage"`
	KeepSettingsOnDestroy *bool   `pulumi:"keepSettingsOnDestroy"`
	// Markdown text shown on the group or project member page for users with permission to change members.
	MemberGuidelines *string `pulumi:"memberGuidelines"`
	// Background color for the system header or footer bar, in CSS hex notation.
	MessageBackgroundColor *string `pulumi:"messageBackgroundColor"`
	// Font color for the system header or footer bar, in CSS hex notation.
	MessageFontColor *string `pulumi:"messageFontColor"`
	// Markdown text shown on the new project page.
	NewProjectGuidelines *string `pulumi:"newProjectGuidelines"`
	// Markdown text shown on the profile page below the Public Avatar.
	ProfileImageGuidelines *string `pulumi:"profileImageGuidelines"`
	// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
	PwaDescription *string `pulumi:"pwaDescription"`
	// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
	PwaName *string `pulumi:"pwaName"`
	// Short name for Progressive Web App.
	PwaShortName *string `pulumi:"pwaShortName"`
	// Application title on the sign-in and sign-up page.
	Title *string `pulumi:"title"`
}

// The set of arguments for constructing a ApplicationAppearance resource.
type ApplicationAppearanceArgs struct {
	// Markdown text shown on the sign-in and sign-up page.
	Description pulumi.StringPtrInput
	// Add header and footer to all outgoing emails if enabled.
	EmailHeaderAndFooterEnabled pulumi.BoolPtrInput
	// Message in the system footer bar.
	FooterMessage pulumi.StringPtrInput
	// Message in the system header bar.
	HeaderMessage         pulumi.StringPtrInput
	KeepSettingsOnDestroy pulumi.BoolPtrInput
	// Markdown text shown on the group or project member page for users with permission to change members.
	MemberGuidelines pulumi.StringPtrInput
	// Background color for the system header or footer bar, in CSS hex notation.
	MessageBackgroundColor pulumi.StringPtrInput
	// Font color for the system header or footer bar, in CSS hex notation.
	MessageFontColor pulumi.StringPtrInput
	// Markdown text shown on the new project page.
	NewProjectGuidelines pulumi.StringPtrInput
	// Markdown text shown on the profile page below the Public Avatar.
	ProfileImageGuidelines pulumi.StringPtrInput
	// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
	PwaDescription pulumi.StringPtrInput
	// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
	PwaName pulumi.StringPtrInput
	// Short name for Progressive Web App.
	PwaShortName pulumi.StringPtrInput
	// Application title on the sign-in and sign-up page.
	Title pulumi.StringPtrInput
}

func (ApplicationAppearanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAppearanceArgs)(nil)).Elem()
}

type ApplicationAppearanceInput interface {
	pulumi.Input

	ToApplicationAppearanceOutput() ApplicationAppearanceOutput
	ToApplicationAppearanceOutputWithContext(ctx context.Context) ApplicationAppearanceOutput
}

func (*ApplicationAppearance) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAppearance)(nil)).Elem()
}

func (i *ApplicationAppearance) ToApplicationAppearanceOutput() ApplicationAppearanceOutput {
	return i.ToApplicationAppearanceOutputWithContext(context.Background())
}

func (i *ApplicationAppearance) ToApplicationAppearanceOutputWithContext(ctx context.Context) ApplicationAppearanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppearanceOutput)
}

// ApplicationAppearanceArrayInput is an input type that accepts ApplicationAppearanceArray and ApplicationAppearanceArrayOutput values.
// You can construct a concrete instance of `ApplicationAppearanceArrayInput` via:
//
//	ApplicationAppearanceArray{ ApplicationAppearanceArgs{...} }
type ApplicationAppearanceArrayInput interface {
	pulumi.Input

	ToApplicationAppearanceArrayOutput() ApplicationAppearanceArrayOutput
	ToApplicationAppearanceArrayOutputWithContext(context.Context) ApplicationAppearanceArrayOutput
}

type ApplicationAppearanceArray []ApplicationAppearanceInput

func (ApplicationAppearanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationAppearance)(nil)).Elem()
}

func (i ApplicationAppearanceArray) ToApplicationAppearanceArrayOutput() ApplicationAppearanceArrayOutput {
	return i.ToApplicationAppearanceArrayOutputWithContext(context.Background())
}

func (i ApplicationAppearanceArray) ToApplicationAppearanceArrayOutputWithContext(ctx context.Context) ApplicationAppearanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppearanceArrayOutput)
}

// ApplicationAppearanceMapInput is an input type that accepts ApplicationAppearanceMap and ApplicationAppearanceMapOutput values.
// You can construct a concrete instance of `ApplicationAppearanceMapInput` via:
//
//	ApplicationAppearanceMap{ "key": ApplicationAppearanceArgs{...} }
type ApplicationAppearanceMapInput interface {
	pulumi.Input

	ToApplicationAppearanceMapOutput() ApplicationAppearanceMapOutput
	ToApplicationAppearanceMapOutputWithContext(context.Context) ApplicationAppearanceMapOutput
}

type ApplicationAppearanceMap map[string]ApplicationAppearanceInput

func (ApplicationAppearanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationAppearance)(nil)).Elem()
}

func (i ApplicationAppearanceMap) ToApplicationAppearanceMapOutput() ApplicationAppearanceMapOutput {
	return i.ToApplicationAppearanceMapOutputWithContext(context.Background())
}

func (i ApplicationAppearanceMap) ToApplicationAppearanceMapOutputWithContext(ctx context.Context) ApplicationAppearanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppearanceMapOutput)
}

type ApplicationAppearanceOutput struct{ *pulumi.OutputState }

func (ApplicationAppearanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAppearance)(nil)).Elem()
}

func (o ApplicationAppearanceOutput) ToApplicationAppearanceOutput() ApplicationAppearanceOutput {
	return o
}

func (o ApplicationAppearanceOutput) ToApplicationAppearanceOutputWithContext(ctx context.Context) ApplicationAppearanceOutput {
	return o
}

// Markdown text shown on the sign-in and sign-up page.
func (o ApplicationAppearanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Add header and footer to all outgoing emails if enabled.
func (o ApplicationAppearanceOutput) EmailHeaderAndFooterEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.BoolOutput { return v.EmailHeaderAndFooterEnabled }).(pulumi.BoolOutput)
}

// Message in the system footer bar.
func (o ApplicationAppearanceOutput) FooterMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.FooterMessage }).(pulumi.StringOutput)
}

// Message in the system header bar.
func (o ApplicationAppearanceOutput) HeaderMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.HeaderMessage }).(pulumi.StringOutput)
}

func (o ApplicationAppearanceOutput) KeepSettingsOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.BoolOutput { return v.KeepSettingsOnDestroy }).(pulumi.BoolOutput)
}

// Markdown text shown on the group or project member page for users with permission to change members.
func (o ApplicationAppearanceOutput) MemberGuidelines() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.MemberGuidelines }).(pulumi.StringOutput)
}

// Background color for the system header or footer bar, in CSS hex notation.
func (o ApplicationAppearanceOutput) MessageBackgroundColor() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.MessageBackgroundColor }).(pulumi.StringOutput)
}

// Font color for the system header or footer bar, in CSS hex notation.
func (o ApplicationAppearanceOutput) MessageFontColor() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.MessageFontColor }).(pulumi.StringOutput)
}

// Markdown text shown on the new project page.
func (o ApplicationAppearanceOutput) NewProjectGuidelines() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.NewProjectGuidelines }).(pulumi.StringOutput)
}

// Markdown text shown on the profile page below the Public Avatar.
func (o ApplicationAppearanceOutput) ProfileImageGuidelines() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.ProfileImageGuidelines }).(pulumi.StringOutput)
}

// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
func (o ApplicationAppearanceOutput) PwaDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.PwaDescription }).(pulumi.StringOutput)
}

// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
func (o ApplicationAppearanceOutput) PwaName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.PwaName }).(pulumi.StringOutput)
}

// Short name for Progressive Web App.
func (o ApplicationAppearanceOutput) PwaShortName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.PwaShortName }).(pulumi.StringOutput)
}

// Application title on the sign-in and sign-up page.
func (o ApplicationAppearanceOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAppearance) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type ApplicationAppearanceArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppearanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationAppearance)(nil)).Elem()
}

func (o ApplicationAppearanceArrayOutput) ToApplicationAppearanceArrayOutput() ApplicationAppearanceArrayOutput {
	return o
}

func (o ApplicationAppearanceArrayOutput) ToApplicationAppearanceArrayOutputWithContext(ctx context.Context) ApplicationAppearanceArrayOutput {
	return o
}

func (o ApplicationAppearanceArrayOutput) Index(i pulumi.IntInput) ApplicationAppearanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationAppearance {
		return vs[0].([]*ApplicationAppearance)[vs[1].(int)]
	}).(ApplicationAppearanceOutput)
}

type ApplicationAppearanceMapOutput struct{ *pulumi.OutputState }

func (ApplicationAppearanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationAppearance)(nil)).Elem()
}

func (o ApplicationAppearanceMapOutput) ToApplicationAppearanceMapOutput() ApplicationAppearanceMapOutput {
	return o
}

func (o ApplicationAppearanceMapOutput) ToApplicationAppearanceMapOutputWithContext(ctx context.Context) ApplicationAppearanceMapOutput {
	return o
}

func (o ApplicationAppearanceMapOutput) MapIndex(k pulumi.StringInput) ApplicationAppearanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationAppearance {
		return vs[0].(map[string]*ApplicationAppearance)[vs[1].(string)]
	}).(ApplicationAppearanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAppearanceInput)(nil)).Elem(), &ApplicationAppearance{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAppearanceArrayInput)(nil)).Elem(), ApplicationAppearanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAppearanceMapInput)(nil)).Elem(), ApplicationAppearanceMap{})
	pulumi.RegisterOutputType(ApplicationAppearanceOutput{})
	pulumi.RegisterOutputType(ApplicationAppearanceArrayOutput{})
	pulumi.RegisterOutputType(ApplicationAppearanceMapOutput{})
}
