// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ValueStreamAnalytics` resource allows to manage the lifecycle of value stream analytics.
//
// > This resource requires a GitLab Enterprise instance with a Premium license to create custom value stream analytics.
//
// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#mutationvaluestreamcreate)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.NewValueStreamAnalytics(ctx, "project", &gitlab.ValueStreamAnalyticsArgs{
//				Name:            pulumi.String("TEST"),
//				ProjectFullPath: pulumi.String("test/project"),
//				Stages: gitlab.ValueStreamAnalyticsStageArray{
//					&gitlab.ValueStreamAnalyticsStageArgs{
//						Name:   pulumi.String("Issue"),
//						Custom: pulumi.Bool(false),
//						Hidden: pulumi.Bool(false),
//					},
//					&gitlab.ValueStreamAnalyticsStageArgs{
//						Name:                   pulumi.String("Issue Labels"),
//						Custom:                 pulumi.Bool(true),
//						Hidden:                 pulumi.Bool(false),
//						Start_event_identifier: "ISSUE_LABEL_ADDED",
//						Start_event_label_id:   "gid://gitlab/ProjectLabel/0",
//						End_event_identifier:   "ISSUE_LABEL_REMOVED",
//						End_event_label_id:     "gid://gitlab/ProjectLabel/1",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewValueStreamAnalytics(ctx, "group", &gitlab.ValueStreamAnalyticsArgs{
//				Name:          pulumi.String("TEST"),
//				GroupFullPath: pulumi.String("test/group"),
//				Stages: gitlab.ValueStreamAnalyticsStageArray{
//					&gitlab.ValueStreamAnalyticsStageArgs{
//						Name:   pulumi.String("Issue"),
//						Custom: pulumi.Bool(false),
//						Hidden: pulumi.Bool(false),
//					},
//					&gitlab.ValueStreamAnalyticsStageArgs{
//						Name:                   pulumi.String("Issue Labels"),
//						Custom:                 pulumi.Bool(true),
//						Hidden:                 pulumi.Bool(false),
//						Start_event_identifier: "ISSUE_LABEL_ADDED",
//						Start_event_label_id:   "gid://gitlab/GroupLabel/0",
//						End_event_identifier:   "ISSUE_LABEL_REMOVED",
//						End_event_label_id:     "gid://gitlab/GroupLabel/1",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_value_stream_analytics`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_value_stream_analytics.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Importing using the CLI is supported with the following syntax:
//
// Gitlab value stream analytics can be imported with a key composed of `<full_path_type>:<full_path>:<value_stream_id>`, e.g.
//
// ```sh
// $ pulumi import gitlab:index/valueStreamAnalytics:ValueStreamAnalytics group "group:people/engineers:42"
// ```
//
// ```sh
// $ pulumi import gitlab:index/valueStreamAnalytics:ValueStreamAnalytics project "project:projects/sample:43"
// ```
type ValueStreamAnalytics struct {
	pulumi.CustomResourceState

	// Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	GroupFullPath pulumi.StringPtrOutput `pulumi:"groupFullPath"`
	// The name of the value stream
	Name pulumi.StringOutput `pulumi:"name"`
	// Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	ProjectFullPath pulumi.StringPtrOutput `pulumi:"projectFullPath"`
	// Stages of the value stream
	Stages ValueStreamAnalyticsStageArrayOutput `pulumi:"stages"`
}

// NewValueStreamAnalytics registers a new resource with the given unique name, arguments, and options.
func NewValueStreamAnalytics(ctx *pulumi.Context,
	name string, args *ValueStreamAnalyticsArgs, opts ...pulumi.ResourceOption) (*ValueStreamAnalytics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Stages == nil {
		return nil, errors.New("invalid value for required argument 'Stages'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ValueStreamAnalytics
	err := ctx.RegisterResource("gitlab:index/valueStreamAnalytics:ValueStreamAnalytics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetValueStreamAnalytics gets an existing ValueStreamAnalytics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetValueStreamAnalytics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ValueStreamAnalyticsState, opts ...pulumi.ResourceOption) (*ValueStreamAnalytics, error) {
	var resource ValueStreamAnalytics
	err := ctx.ReadResource("gitlab:index/valueStreamAnalytics:ValueStreamAnalytics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ValueStreamAnalytics resources.
type valueStreamAnalyticsState struct {
	// Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	GroupFullPath *string `pulumi:"groupFullPath"`
	// The name of the value stream
	Name *string `pulumi:"name"`
	// Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	ProjectFullPath *string `pulumi:"projectFullPath"`
	// Stages of the value stream
	Stages []ValueStreamAnalyticsStage `pulumi:"stages"`
}

type ValueStreamAnalyticsState struct {
	// Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	GroupFullPath pulumi.StringPtrInput
	// The name of the value stream
	Name pulumi.StringPtrInput
	// Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	ProjectFullPath pulumi.StringPtrInput
	// Stages of the value stream
	Stages ValueStreamAnalyticsStageArrayInput
}

func (ValueStreamAnalyticsState) ElementType() reflect.Type {
	return reflect.TypeOf((*valueStreamAnalyticsState)(nil)).Elem()
}

type valueStreamAnalyticsArgs struct {
	// Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	GroupFullPath *string `pulumi:"groupFullPath"`
	// The name of the value stream
	Name *string `pulumi:"name"`
	// Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	ProjectFullPath *string `pulumi:"projectFullPath"`
	// Stages of the value stream
	Stages []ValueStreamAnalyticsStage `pulumi:"stages"`
}

// The set of arguments for constructing a ValueStreamAnalytics resource.
type ValueStreamAnalyticsArgs struct {
	// Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	GroupFullPath pulumi.StringPtrInput
	// The name of the value stream
	Name pulumi.StringPtrInput
	// Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
	ProjectFullPath pulumi.StringPtrInput
	// Stages of the value stream
	Stages ValueStreamAnalyticsStageArrayInput
}

func (ValueStreamAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*valueStreamAnalyticsArgs)(nil)).Elem()
}

type ValueStreamAnalyticsInput interface {
	pulumi.Input

	ToValueStreamAnalyticsOutput() ValueStreamAnalyticsOutput
	ToValueStreamAnalyticsOutputWithContext(ctx context.Context) ValueStreamAnalyticsOutput
}

func (*ValueStreamAnalytics) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueStreamAnalytics)(nil)).Elem()
}

func (i *ValueStreamAnalytics) ToValueStreamAnalyticsOutput() ValueStreamAnalyticsOutput {
	return i.ToValueStreamAnalyticsOutputWithContext(context.Background())
}

func (i *ValueStreamAnalytics) ToValueStreamAnalyticsOutputWithContext(ctx context.Context) ValueStreamAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueStreamAnalyticsOutput)
}

// ValueStreamAnalyticsArrayInput is an input type that accepts ValueStreamAnalyticsArray and ValueStreamAnalyticsArrayOutput values.
// You can construct a concrete instance of `ValueStreamAnalyticsArrayInput` via:
//
//	ValueStreamAnalyticsArray{ ValueStreamAnalyticsArgs{...} }
type ValueStreamAnalyticsArrayInput interface {
	pulumi.Input

	ToValueStreamAnalyticsArrayOutput() ValueStreamAnalyticsArrayOutput
	ToValueStreamAnalyticsArrayOutputWithContext(context.Context) ValueStreamAnalyticsArrayOutput
}

type ValueStreamAnalyticsArray []ValueStreamAnalyticsInput

func (ValueStreamAnalyticsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ValueStreamAnalytics)(nil)).Elem()
}

func (i ValueStreamAnalyticsArray) ToValueStreamAnalyticsArrayOutput() ValueStreamAnalyticsArrayOutput {
	return i.ToValueStreamAnalyticsArrayOutputWithContext(context.Background())
}

func (i ValueStreamAnalyticsArray) ToValueStreamAnalyticsArrayOutputWithContext(ctx context.Context) ValueStreamAnalyticsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueStreamAnalyticsArrayOutput)
}

// ValueStreamAnalyticsMapInput is an input type that accepts ValueStreamAnalyticsMap and ValueStreamAnalyticsMapOutput values.
// You can construct a concrete instance of `ValueStreamAnalyticsMapInput` via:
//
//	ValueStreamAnalyticsMap{ "key": ValueStreamAnalyticsArgs{...} }
type ValueStreamAnalyticsMapInput interface {
	pulumi.Input

	ToValueStreamAnalyticsMapOutput() ValueStreamAnalyticsMapOutput
	ToValueStreamAnalyticsMapOutputWithContext(context.Context) ValueStreamAnalyticsMapOutput
}

type ValueStreamAnalyticsMap map[string]ValueStreamAnalyticsInput

func (ValueStreamAnalyticsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ValueStreamAnalytics)(nil)).Elem()
}

func (i ValueStreamAnalyticsMap) ToValueStreamAnalyticsMapOutput() ValueStreamAnalyticsMapOutput {
	return i.ToValueStreamAnalyticsMapOutputWithContext(context.Background())
}

func (i ValueStreamAnalyticsMap) ToValueStreamAnalyticsMapOutputWithContext(ctx context.Context) ValueStreamAnalyticsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueStreamAnalyticsMapOutput)
}

type ValueStreamAnalyticsOutput struct{ *pulumi.OutputState }

func (ValueStreamAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueStreamAnalytics)(nil)).Elem()
}

func (o ValueStreamAnalyticsOutput) ToValueStreamAnalyticsOutput() ValueStreamAnalyticsOutput {
	return o
}

func (o ValueStreamAnalyticsOutput) ToValueStreamAnalyticsOutputWithContext(ctx context.Context) ValueStreamAnalyticsOutput {
	return o
}

// Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
func (o ValueStreamAnalyticsOutput) GroupFullPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValueStreamAnalytics) pulumi.StringPtrOutput { return v.GroupFullPath }).(pulumi.StringPtrOutput)
}

// The name of the value stream
func (o ValueStreamAnalyticsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ValueStreamAnalytics) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
func (o ValueStreamAnalyticsOutput) ProjectFullPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValueStreamAnalytics) pulumi.StringPtrOutput { return v.ProjectFullPath }).(pulumi.StringPtrOutput)
}

// Stages of the value stream
func (o ValueStreamAnalyticsOutput) Stages() ValueStreamAnalyticsStageArrayOutput {
	return o.ApplyT(func(v *ValueStreamAnalytics) ValueStreamAnalyticsStageArrayOutput { return v.Stages }).(ValueStreamAnalyticsStageArrayOutput)
}

type ValueStreamAnalyticsArrayOutput struct{ *pulumi.OutputState }

func (ValueStreamAnalyticsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ValueStreamAnalytics)(nil)).Elem()
}

func (o ValueStreamAnalyticsArrayOutput) ToValueStreamAnalyticsArrayOutput() ValueStreamAnalyticsArrayOutput {
	return o
}

func (o ValueStreamAnalyticsArrayOutput) ToValueStreamAnalyticsArrayOutputWithContext(ctx context.Context) ValueStreamAnalyticsArrayOutput {
	return o
}

func (o ValueStreamAnalyticsArrayOutput) Index(i pulumi.IntInput) ValueStreamAnalyticsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ValueStreamAnalytics {
		return vs[0].([]*ValueStreamAnalytics)[vs[1].(int)]
	}).(ValueStreamAnalyticsOutput)
}

type ValueStreamAnalyticsMapOutput struct{ *pulumi.OutputState }

func (ValueStreamAnalyticsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ValueStreamAnalytics)(nil)).Elem()
}

func (o ValueStreamAnalyticsMapOutput) ToValueStreamAnalyticsMapOutput() ValueStreamAnalyticsMapOutput {
	return o
}

func (o ValueStreamAnalyticsMapOutput) ToValueStreamAnalyticsMapOutputWithContext(ctx context.Context) ValueStreamAnalyticsMapOutput {
	return o
}

func (o ValueStreamAnalyticsMapOutput) MapIndex(k pulumi.StringInput) ValueStreamAnalyticsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ValueStreamAnalytics {
		return vs[0].(map[string]*ValueStreamAnalytics)[vs[1].(string)]
	}).(ValueStreamAnalyticsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ValueStreamAnalyticsInput)(nil)).Elem(), &ValueStreamAnalytics{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValueStreamAnalyticsArrayInput)(nil)).Elem(), ValueStreamAnalyticsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValueStreamAnalyticsMapInput)(nil)).Elem(), ValueStreamAnalyticsMap{})
	pulumi.RegisterOutputType(ValueStreamAnalyticsOutput{})
	pulumi.RegisterOutputType(ValueStreamAnalyticsArrayOutput{})
	pulumi.RegisterOutputType(ValueStreamAnalyticsMapOutput{})
}
