// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
//
// > You must be an administrator!
//
// > When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
// the most related match will prioritize an exact match if one is available.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-memberships-for-a-billable-member-of-a-group)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.GetGroupBillableMemberMemberships(ctx, &gitlab.GetGroupBillableMemberMembershipsArgs{
//				UserId:  21,
//				GroupId: "42",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGroupBillableMemberMemberships(ctx *pulumi.Context, args *GetGroupBillableMemberMembershipsArgs, opts ...pulumi.InvokeOption) (*GetGroupBillableMemberMembershipsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupBillableMemberMembershipsResult
	err := ctx.Invoke("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupBillableMemberMemberships.
type GetGroupBillableMemberMembershipsArgs struct {
	// The ID of the group.
	GroupId string `pulumi:"groupId"`
	// The ID of the user.
	UserId int `pulumi:"userId"`
}

// A collection of values returned by getGroupBillableMemberMemberships.
type GetGroupBillableMemberMembershipsResult struct {
	// The ID of the group.
	GroupId string `pulumi:"groupId"`
	// The id of the data source. It will always be equal to the user_id
	Id string `pulumi:"id"`
	// group- and/or project-memberships of the user.
	Memberships []GetGroupBillableMemberMembershipsMembership `pulumi:"memberships"`
	// The ID of the user.
	UserId int `pulumi:"userId"`
}

func GetGroupBillableMemberMembershipsOutput(ctx *pulumi.Context, args GetGroupBillableMemberMembershipsOutputArgs, opts ...pulumi.InvokeOption) GetGroupBillableMemberMembershipsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGroupBillableMemberMembershipsResultOutput, error) {
			args := v.(GetGroupBillableMemberMembershipsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", args, GetGroupBillableMemberMembershipsResultOutput{}, options).(GetGroupBillableMemberMembershipsResultOutput), nil
		}).(GetGroupBillableMemberMembershipsResultOutput)
}

// A collection of arguments for invoking getGroupBillableMemberMemberships.
type GetGroupBillableMemberMembershipsOutputArgs struct {
	// The ID of the group.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The ID of the user.
	UserId pulumi.IntInput `pulumi:"userId"`
}

func (GetGroupBillableMemberMembershipsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupBillableMemberMembershipsArgs)(nil)).Elem()
}

// A collection of values returned by getGroupBillableMemberMemberships.
type GetGroupBillableMemberMembershipsResultOutput struct{ *pulumi.OutputState }

func (GetGroupBillableMemberMembershipsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupBillableMemberMembershipsResult)(nil)).Elem()
}

func (o GetGroupBillableMemberMembershipsResultOutput) ToGetGroupBillableMemberMembershipsResultOutput() GetGroupBillableMemberMembershipsResultOutput {
	return o
}

func (o GetGroupBillableMemberMembershipsResultOutput) ToGetGroupBillableMemberMembershipsResultOutputWithContext(ctx context.Context) GetGroupBillableMemberMembershipsResultOutput {
	return o
}

// The ID of the group.
func (o GetGroupBillableMemberMembershipsResultOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsResult) string { return v.GroupId }).(pulumi.StringOutput)
}

// The id of the data source. It will always be equal to the user_id
func (o GetGroupBillableMemberMembershipsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsResult) string { return v.Id }).(pulumi.StringOutput)
}

// group- and/or project-memberships of the user.
func (o GetGroupBillableMemberMembershipsResultOutput) Memberships() GetGroupBillableMemberMembershipsMembershipArrayOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsResult) []GetGroupBillableMemberMembershipsMembership {
		return v.Memberships
	}).(GetGroupBillableMemberMembershipsMembershipArrayOutput)
}

// The ID of the user.
func (o GetGroupBillableMemberMembershipsResultOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupBillableMemberMembershipsResult) int { return v.UserId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupBillableMemberMembershipsResultOutput{})
}
