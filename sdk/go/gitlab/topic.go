// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Topic` resource allows to manage the lifecycle of topics that are then assignable to projects.
//
// > Topics are the successors for project tags. Aside from avoiding terminology collisions with Git tags, they are more descriptive and better searchable.
//
// > Deleting a topic was implemented in GitLab 14.9. For older versions of GitLab set `softDestroy = true` to empty out a topic instead of deleting it.
//
// **Upstream API**: [GitLab REST API docs for topics](https://docs.gitlab.com/ee/api/topics.html)
//
// ## Import
//
// ```sh
//  $ pulumi import gitlab:index/topic:Topic # You can import a topic to terraform state using `<resource> <id>`.
// ```
//
// # The `id` must be an integer for the id of the topic you want to import, # for example
//
// ```sh
//  $ pulumi import gitlab:index/topic:Topic functional_programming 1
// ```
type Topic struct {
	pulumi.CustomResourceState

	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar pulumi.StringPtrOutput `pulumi:"avatar"`
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to
	// trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash pulumi.StringOutput `pulumi:"avatarHash"`
	// The URL of the avatar image.
	AvatarUrl pulumi.StringOutput `pulumi:"avatarUrl"`
	// A text describing the topic.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The topic's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Empty the topics fields instead of deleting it.
	//
	// Deprecated: GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed.
	SoftDestroy pulumi.BoolPtrOutput `pulumi:"softDestroy"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		args = &TopicArgs{}
	}

	var resource Topic
	err := ctx.RegisterResource("gitlab:index/topic:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("gitlab:index/topic:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar *string `pulumi:"avatar"`
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to
	// trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash *string `pulumi:"avatarHash"`
	// The URL of the avatar image.
	AvatarUrl *string `pulumi:"avatarUrl"`
	// A text describing the topic.
	Description *string `pulumi:"description"`
	// The topic's name.
	Name *string `pulumi:"name"`
	// Empty the topics fields instead of deleting it.
	//
	// Deprecated: GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed.
	SoftDestroy *bool `pulumi:"softDestroy"`
}

type TopicState struct {
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar pulumi.StringPtrInput
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to
	// trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash pulumi.StringPtrInput
	// The URL of the avatar image.
	AvatarUrl pulumi.StringPtrInput
	// A text describing the topic.
	Description pulumi.StringPtrInput
	// The topic's name.
	Name pulumi.StringPtrInput
	// Empty the topics fields instead of deleting it.
	//
	// Deprecated: GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed.
	SoftDestroy pulumi.BoolPtrInput
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar *string `pulumi:"avatar"`
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to
	// trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash *string `pulumi:"avatarHash"`
	// A text describing the topic.
	Description *string `pulumi:"description"`
	// The topic's name.
	Name *string `pulumi:"name"`
	// Empty the topics fields instead of deleting it.
	//
	// Deprecated: GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed.
	SoftDestroy *bool `pulumi:"softDestroy"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar pulumi.StringPtrInput
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to
	// trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash pulumi.StringPtrInput
	// A text describing the topic.
	Description pulumi.StringPtrInput
	// The topic's name.
	Name pulumi.StringPtrInput
	// Empty the topics fields instead of deleting it.
	//
	// Deprecated: GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed.
	SoftDestroy pulumi.BoolPtrInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

// TopicArrayInput is an input type that accepts TopicArray and TopicArrayOutput values.
// You can construct a concrete instance of `TopicArrayInput` via:
//
//          TopicArray{ TopicArgs{...} }
type TopicArrayInput interface {
	pulumi.Input

	ToTopicArrayOutput() TopicArrayOutput
	ToTopicArrayOutputWithContext(context.Context) TopicArrayOutput
}

type TopicArray []TopicInput

func (TopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (i TopicArray) ToTopicArrayOutput() TopicArrayOutput {
	return i.ToTopicArrayOutputWithContext(context.Background())
}

func (i TopicArray) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicArrayOutput)
}

// TopicMapInput is an input type that accepts TopicMap and TopicMapOutput values.
// You can construct a concrete instance of `TopicMapInput` via:
//
//          TopicMap{ "key": TopicArgs{...} }
type TopicMapInput interface {
	pulumi.Input

	ToTopicMapOutput() TopicMapOutput
	ToTopicMapOutputWithContext(context.Context) TopicMapOutput
}

type TopicMap map[string]TopicInput

func (TopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (i TopicMap) ToTopicMapOutput() TopicMapOutput {
	return i.ToTopicMapOutputWithContext(context.Background())
}

func (i TopicMap) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMapOutput)
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

type TopicArrayOutput struct{ *pulumi.OutputState }

func (TopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (o TopicArrayOutput) ToTopicArrayOutput() TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) Index(i pulumi.IntInput) TopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].([]*Topic)[vs[1].(int)]
	}).(TopicOutput)
}

type TopicMapOutput struct{ *pulumi.OutputState }

func (TopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (o TopicMapOutput) ToTopicMapOutput() TopicMapOutput {
	return o
}

func (o TopicMapOutput) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return o
}

func (o TopicMapOutput) MapIndex(k pulumi.StringInput) TopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].(map[string]*Topic)[vs[1].(string)]
	}).(TopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInput)(nil)).Elem(), &Topic{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicArrayInput)(nil)).Elem(), TopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicMapInput)(nil)).Elem(), TopicMap{})
	pulumi.RegisterOutputType(TopicOutput{})
	pulumi.RegisterOutputType(TopicArrayOutput{})
	pulumi.RegisterOutputType(TopicMapOutput{})
}
