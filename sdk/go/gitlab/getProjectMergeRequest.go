// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectMergeRequest` data source retrieves
// information about a single merge request related to a specific project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.GetProjectMergeRequest(ctx, &gitlab.GetProjectMergeRequestArgs{
//				Project: "123",
//				Iid:     456,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.GetProjectMergeRequest(ctx, &gitlab.GetProjectMergeRequestArgs{
//				Project: "company/group/project1",
//				Iid:     3,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProjectMergeRequest(ctx *pulumi.Context, args *GetProjectMergeRequestArgs, opts ...pulumi.InvokeOption) (*GetProjectMergeRequestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectMergeRequestResult
	err := ctx.Invoke("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectMergeRequest.
type GetProjectMergeRequestArgs struct {
	// The unique project level ID of the merge request.
	Iid int `pulumi:"iid"`
	// The ID or path of the project.
	Project string `pulumi:"project"`
}

// A collection of values returned by getProjectMergeRequest.
type GetProjectMergeRequestResult struct {
	// First assignee of the merge request.
	Assignee GetProjectMergeRequestAssignee `pulumi:"assignee"`
	// Assignees of the merge request.
	Assignees []GetProjectMergeRequestAssignee `pulumi:"assignees"`
	// User who created this merge request.
	Author GetProjectMergeRequestAuthor `pulumi:"author"`
	// Indicates if all discussions are resolved only if all are
	// required before merge request can be merged.
	BlockingDiscussionsResolved bool `pulumi:"blockingDiscussionsResolved"`
	// Number of changes made on the merge request. Empty when the
	// merge request is created, and populates asynchronously.
	ChangesCount string `pulumi:"changesCount"`
	// Timestamp of when the merge request was closed.
	ClosedAt string `pulumi:"closedAt"`
	// User who closed this merge request.
	ClosedBy GetProjectMergeRequestClosedBy `pulumi:"closedBy"`
	// Timestamp of when the merge request was created.
	CreatedAt string `pulumi:"createdAt"`
	// The unique instance level ID of the merge request.
	Id int `pulumi:"id"`
	// The unique project level ID of the merge request.
	Iid int `pulumi:"iid"`
	// The ID or path of the project.
	Project string `pulumi:"project"`
}

func GetProjectMergeRequestOutput(ctx *pulumi.Context, args GetProjectMergeRequestOutputArgs, opts ...pulumi.InvokeOption) GetProjectMergeRequestResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectMergeRequestResultOutput, error) {
			args := v.(GetProjectMergeRequestArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", args, GetProjectMergeRequestResultOutput{}, options).(GetProjectMergeRequestResultOutput), nil
		}).(GetProjectMergeRequestResultOutput)
}

// A collection of arguments for invoking getProjectMergeRequest.
type GetProjectMergeRequestOutputArgs struct {
	// The unique project level ID of the merge request.
	Iid pulumi.IntInput `pulumi:"iid"`
	// The ID or path of the project.
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetProjectMergeRequestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestArgs)(nil)).Elem()
}

// A collection of values returned by getProjectMergeRequest.
type GetProjectMergeRequestResultOutput struct{ *pulumi.OutputState }

func (GetProjectMergeRequestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestResult)(nil)).Elem()
}

func (o GetProjectMergeRequestResultOutput) ToGetProjectMergeRequestResultOutput() GetProjectMergeRequestResultOutput {
	return o
}

func (o GetProjectMergeRequestResultOutput) ToGetProjectMergeRequestResultOutputWithContext(ctx context.Context) GetProjectMergeRequestResultOutput {
	return o
}

// First assignee of the merge request.
func (o GetProjectMergeRequestResultOutput) Assignee() GetProjectMergeRequestAssigneeOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) GetProjectMergeRequestAssignee { return v.Assignee }).(GetProjectMergeRequestAssigneeOutput)
}

// Assignees of the merge request.
func (o GetProjectMergeRequestResultOutput) Assignees() GetProjectMergeRequestAssigneeArrayOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) []GetProjectMergeRequestAssignee { return v.Assignees }).(GetProjectMergeRequestAssigneeArrayOutput)
}

// User who created this merge request.
func (o GetProjectMergeRequestResultOutput) Author() GetProjectMergeRequestAuthorOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) GetProjectMergeRequestAuthor { return v.Author }).(GetProjectMergeRequestAuthorOutput)
}

// Indicates if all discussions are resolved only if all are
// required before merge request can be merged.
func (o GetProjectMergeRequestResultOutput) BlockingDiscussionsResolved() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) bool { return v.BlockingDiscussionsResolved }).(pulumi.BoolOutput)
}

// Number of changes made on the merge request. Empty when the
// merge request is created, and populates asynchronously.
func (o GetProjectMergeRequestResultOutput) ChangesCount() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) string { return v.ChangesCount }).(pulumi.StringOutput)
}

// Timestamp of when the merge request was closed.
func (o GetProjectMergeRequestResultOutput) ClosedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) string { return v.ClosedAt }).(pulumi.StringOutput)
}

// User who closed this merge request.
func (o GetProjectMergeRequestResultOutput) ClosedBy() GetProjectMergeRequestClosedByOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) GetProjectMergeRequestClosedBy { return v.ClosedBy }).(GetProjectMergeRequestClosedByOutput)
}

// Timestamp of when the merge request was created.
func (o GetProjectMergeRequestResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique instance level ID of the merge request.
func (o GetProjectMergeRequestResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) int { return v.Id }).(pulumi.IntOutput)
}

// The unique project level ID of the merge request.
func (o GetProjectMergeRequestResultOutput) Iid() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) int { return v.Iid }).(pulumi.IntOutput)
}

// The ID or path of the project.
func (o GetProjectMergeRequestResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectMergeRequestResultOutput{})
}
