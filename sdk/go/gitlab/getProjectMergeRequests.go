// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `getProjectMergeRequests` data source retrieves
// information about a list of merge requests related to a specific project.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.GetProjectMergeRequests(ctx, &gitlab.GetProjectMergeRequestsArgs{
//				Project:      "123",
//				TargetBranch: pulumi.StringRef("main"),
//				Wip:          pulumi.StringRef("yes"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.GetProjectMergeRequests(ctx, &gitlab.GetProjectMergeRequestsArgs{
//				Project:      "company/group/project1",
//				AuthorId:     pulumi.IntRef(5),
//				CreatedAfter: pulumi.StringRef("2024-07-25T12:00:00Z"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProjectMergeRequests(ctx *pulumi.Context, args *GetProjectMergeRequestsArgs, opts ...pulumi.InvokeOption) (*GetProjectMergeRequestsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectMergeRequestsResult
	err := ctx.Invoke("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectMergeRequests.
type GetProjectMergeRequestsArgs struct {
	// Return merge requests created by the given user ID.
	AuthorId *int `pulumi:"authorId"`
	// Return merge requests created by the given username.
	AuthorUsername *string `pulumi:"authorUsername"`
	// Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	CreatedAfter *string `pulumi:"createdAfter"`
	// Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	CreatedBefore *string `pulumi:"createdBefore"`
	// The unique internal IDs of the merge requests.
	Iids []int `pulumi:"iids"`
	// Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
	Milestone *string `pulumi:"milestone"`
	// Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
	MyReactionEmoji *string `pulumi:"myReactionEmoji"`
	// Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
	OrderBy *string `pulumi:"orderBy"`
	// The ID or path of the project.
	Project string `pulumi:"project"`
	// Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
	ReviewerUsername *string `pulumi:"reviewerUsername"`
	// Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
	Scope *string `pulumi:"scope"`
	// Search merge requests against their `title` or `description`.
	Search *string `pulumi:"search"`
	// Return requests sorted in `asc` or `desc` order. Default is `desc`.
	Sort *string `pulumi:"sort"`
	// Return merge requests with the given source branch.
	SourceBranch *string `pulumi:"sourceBranch"`
	// Return all merge requests (all) or just those that are opened, closed, locked, or merged.
	State *string `pulumi:"state"`
	// Return merge requests with the given target branch.
	TargetBranch *string `pulumi:"targetBranch"`
	// Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	UpdatedAfter *string `pulumi:"updatedAfter"`
	// Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	UpdatedBefore *string `pulumi:"updatedBefore"`
	// Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
	Wip *string `pulumi:"wip"`
}

// A collection of values returned by getProjectMergeRequests.
type GetProjectMergeRequestsResult struct {
	// Return merge requests created by the given user ID.
	AuthorId *int `pulumi:"authorId"`
	// Return merge requests created by the given username.
	AuthorUsername *string `pulumi:"authorUsername"`
	// Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	CreatedAfter *string `pulumi:"createdAfter"`
	// Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	CreatedBefore *string `pulumi:"createdBefore"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The unique internal IDs of the merge requests.
	Iids []int `pulumi:"iids"`
	// The list of merge requests.
	MergeRequests []GetProjectMergeRequestsMergeRequest `pulumi:"mergeRequests"`
	// Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
	Milestone *string `pulumi:"milestone"`
	// Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
	MyReactionEmoji *string `pulumi:"myReactionEmoji"`
	// Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
	OrderBy *string `pulumi:"orderBy"`
	// The ID or path of the project.
	Project string `pulumi:"project"`
	// Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
	ReviewerUsername *string `pulumi:"reviewerUsername"`
	// Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
	Scope *string `pulumi:"scope"`
	// Search merge requests against their `title` or `description`.
	Search *string `pulumi:"search"`
	// Return requests sorted in `asc` or `desc` order. Default is `desc`.
	Sort *string `pulumi:"sort"`
	// Return merge requests with the given source branch.
	SourceBranch *string `pulumi:"sourceBranch"`
	// Return all merge requests (all) or just those that are opened, closed, locked, or merged.
	State *string `pulumi:"state"`
	// Return merge requests with the given target branch.
	TargetBranch *string `pulumi:"targetBranch"`
	// Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	UpdatedAfter *string `pulumi:"updatedAfter"`
	// Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	UpdatedBefore *string `pulumi:"updatedBefore"`
	// Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
	Wip *string `pulumi:"wip"`
}

func GetProjectMergeRequestsOutput(ctx *pulumi.Context, args GetProjectMergeRequestsOutputArgs, opts ...pulumi.InvokeOption) GetProjectMergeRequestsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectMergeRequestsResultOutput, error) {
			args := v.(GetProjectMergeRequestsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", args, GetProjectMergeRequestsResultOutput{}, options).(GetProjectMergeRequestsResultOutput), nil
		}).(GetProjectMergeRequestsResultOutput)
}

// A collection of arguments for invoking getProjectMergeRequests.
type GetProjectMergeRequestsOutputArgs struct {
	// Return merge requests created by the given user ID.
	AuthorId pulumi.IntPtrInput `pulumi:"authorId"`
	// Return merge requests created by the given username.
	AuthorUsername pulumi.StringPtrInput `pulumi:"authorUsername"`
	// Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	CreatedAfter pulumi.StringPtrInput `pulumi:"createdAfter"`
	// Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	CreatedBefore pulumi.StringPtrInput `pulumi:"createdBefore"`
	// The unique internal IDs of the merge requests.
	Iids pulumi.IntArrayInput `pulumi:"iids"`
	// Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
	Milestone pulumi.StringPtrInput `pulumi:"milestone"`
	// Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
	MyReactionEmoji pulumi.StringPtrInput `pulumi:"myReactionEmoji"`
	// Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
	OrderBy pulumi.StringPtrInput `pulumi:"orderBy"`
	// The ID or path of the project.
	Project pulumi.StringInput `pulumi:"project"`
	// Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
	ReviewerUsername pulumi.StringPtrInput `pulumi:"reviewerUsername"`
	// Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// Search merge requests against their `title` or `description`.
	Search pulumi.StringPtrInput `pulumi:"search"`
	// Return requests sorted in `asc` or `desc` order. Default is `desc`.
	Sort pulumi.StringPtrInput `pulumi:"sort"`
	// Return merge requests with the given source branch.
	SourceBranch pulumi.StringPtrInput `pulumi:"sourceBranch"`
	// Return all merge requests (all) or just those that are opened, closed, locked, or merged.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Return merge requests with the given target branch.
	TargetBranch pulumi.StringPtrInput `pulumi:"targetBranch"`
	// Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	UpdatedAfter pulumi.StringPtrInput `pulumi:"updatedAfter"`
	// Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
	UpdatedBefore pulumi.StringPtrInput `pulumi:"updatedBefore"`
	// Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
	Wip pulumi.StringPtrInput `pulumi:"wip"`
}

func (GetProjectMergeRequestsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestsArgs)(nil)).Elem()
}

// A collection of values returned by getProjectMergeRequests.
type GetProjectMergeRequestsResultOutput struct{ *pulumi.OutputState }

func (GetProjectMergeRequestsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMergeRequestsResult)(nil)).Elem()
}

func (o GetProjectMergeRequestsResultOutput) ToGetProjectMergeRequestsResultOutput() GetProjectMergeRequestsResultOutput {
	return o
}

func (o GetProjectMergeRequestsResultOutput) ToGetProjectMergeRequestsResultOutputWithContext(ctx context.Context) GetProjectMergeRequestsResultOutput {
	return o
}

// Return merge requests created by the given user ID.
func (o GetProjectMergeRequestsResultOutput) AuthorId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *int { return v.AuthorId }).(pulumi.IntPtrOutput)
}

// Return merge requests created by the given username.
func (o GetProjectMergeRequestsResultOutput) AuthorUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.AuthorUsername }).(pulumi.StringPtrOutput)
}

// Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
func (o GetProjectMergeRequestsResultOutput) CreatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.CreatedAfter }).(pulumi.StringPtrOutput)
}

// Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
func (o GetProjectMergeRequestsResultOutput) CreatedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.CreatedBefore }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProjectMergeRequestsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique internal IDs of the merge requests.
func (o GetProjectMergeRequestsResultOutput) Iids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) []int { return v.Iids }).(pulumi.IntArrayOutput)
}

// The list of merge requests.
func (o GetProjectMergeRequestsResultOutput) MergeRequests() GetProjectMergeRequestsMergeRequestArrayOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) []GetProjectMergeRequestsMergeRequest { return v.MergeRequests }).(GetProjectMergeRequestsMergeRequestArrayOutput)
}

// Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
func (o GetProjectMergeRequestsResultOutput) Milestone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.Milestone }).(pulumi.StringPtrOutput)
}

// Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
func (o GetProjectMergeRequestsResultOutput) MyReactionEmoji() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.MyReactionEmoji }).(pulumi.StringPtrOutput)
}

// Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
func (o GetProjectMergeRequestsResultOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

// The ID or path of the project.
func (o GetProjectMergeRequestsResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) string { return v.Project }).(pulumi.StringOutput)
}

// Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
func (o GetProjectMergeRequestsResultOutput) ReviewerUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.ReviewerUsername }).(pulumi.StringPtrOutput)
}

// Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
func (o GetProjectMergeRequestsResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// Search merge requests against their `title` or `description`.
func (o GetProjectMergeRequestsResultOutput) Search() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.Search }).(pulumi.StringPtrOutput)
}

// Return requests sorted in `asc` or `desc` order. Default is `desc`.
func (o GetProjectMergeRequestsResultOutput) Sort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.Sort }).(pulumi.StringPtrOutput)
}

// Return merge requests with the given source branch.
func (o GetProjectMergeRequestsResultOutput) SourceBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.SourceBranch }).(pulumi.StringPtrOutput)
}

// Return all merge requests (all) or just those that are opened, closed, locked, or merged.
func (o GetProjectMergeRequestsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Return merge requests with the given target branch.
func (o GetProjectMergeRequestsResultOutput) TargetBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.TargetBranch }).(pulumi.StringPtrOutput)
}

// Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
func (o GetProjectMergeRequestsResultOutput) UpdatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.UpdatedAfter }).(pulumi.StringPtrOutput)
}

// Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
func (o GetProjectMergeRequestsResultOutput) UpdatedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.UpdatedBefore }).(pulumi.StringPtrOutput)
}

// Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
func (o GetProjectMergeRequestsResultOutput) Wip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMergeRequestsResult) *string { return v.Wip }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectMergeRequestsResultOutput{})
}
