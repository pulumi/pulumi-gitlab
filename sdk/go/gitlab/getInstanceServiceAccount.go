// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `InstanceServiceAccount` data source retrieves information about a gitlab service account.
//
// > In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.LookupInstanceServiceAccount(ctx, &gitlab.LookupInstanceServiceAccountArgs{
//				ServiceAccountId: "123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInstanceServiceAccount(ctx *pulumi.Context, args *LookupInstanceServiceAccountArgs, opts ...pulumi.InvokeOption) (*LookupInstanceServiceAccountResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceServiceAccountResult
	err := ctx.Invoke("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceServiceAccount.
type LookupInstanceServiceAccountArgs struct {
	// The service account id.
	ServiceAccountId string `pulumi:"serviceAccountId"`
}

// A collection of values returned by getInstanceServiceAccount.
type LookupInstanceServiceAccountResult struct {
	Id string `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The service account id.
	ServiceAccountId string `pulumi:"serviceAccountId"`
	// The username of the user.
	Username string `pulumi:"username"`
}

func LookupInstanceServiceAccountOutput(ctx *pulumi.Context, args LookupInstanceServiceAccountOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceServiceAccountResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInstanceServiceAccountResultOutput, error) {
			args := v.(LookupInstanceServiceAccountArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", args, LookupInstanceServiceAccountResultOutput{}, options).(LookupInstanceServiceAccountResultOutput), nil
		}).(LookupInstanceServiceAccountResultOutput)
}

// A collection of arguments for invoking getInstanceServiceAccount.
type LookupInstanceServiceAccountOutputArgs struct {
	// The service account id.
	ServiceAccountId pulumi.StringInput `pulumi:"serviceAccountId"`
}

func (LookupInstanceServiceAccountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceServiceAccountArgs)(nil)).Elem()
}

// A collection of values returned by getInstanceServiceAccount.
type LookupInstanceServiceAccountResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceServiceAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceServiceAccountResult)(nil)).Elem()
}

func (o LookupInstanceServiceAccountResultOutput) ToLookupInstanceServiceAccountResultOutput() LookupInstanceServiceAccountResultOutput {
	return o
}

func (o LookupInstanceServiceAccountResultOutput) ToLookupInstanceServiceAccountResultOutputWithContext(ctx context.Context) LookupInstanceServiceAccountResultOutput {
	return o
}

func (o LookupInstanceServiceAccountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceServiceAccountResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the user.
func (o LookupInstanceServiceAccountResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceServiceAccountResult) string { return v.Name }).(pulumi.StringOutput)
}

// The service account id.
func (o LookupInstanceServiceAccountResultOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceServiceAccountResult) string { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// The username of the user.
func (o LookupInstanceServiceAccountResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceServiceAccountResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceServiceAccountResultOutput{})
}
