// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `IntegrationJenkins` resource allows to manage the lifecycle of a project integration with Jenkins.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#jenkins)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awesomeProject, err := gitlab.NewProject(ctx, "awesome_project", &gitlab.ProjectArgs{
//				Name:            pulumi.String("awesome_project"),
//				Description:     pulumi.String("My awesome project."),
//				VisibilityLevel: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewIntegrationJenkins(ctx, "jenkins", &gitlab.IntegrationJenkinsArgs{
//				Project:     awesomeProject.ID(),
//				JenkinsUrl:  pulumi.String("http://jenkins.example.com"),
//				ProjectName: pulumi.String("my_project_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_integration_jenkins`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_integration_jenkins.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// ```sh
// $ pulumi import gitlab:index/integrationJenkins:IntegrationJenkins You can import a gitlab_integration_jenkins state using `<resource> <project_id>`:
// ```
//
// ```sh
// $ pulumi import gitlab:index/integrationJenkins:IntegrationJenkins jenkins 1
// ```
type IntegrationJenkins struct {
	pulumi.CustomResourceState

	// Whether the integration is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification pulumi.BoolOutput `pulumi:"enableSslVerification"`
	// Jenkins URL like `http://jenkins.example.com`
	JenkinsUrl pulumi.StringOutput `pulumi:"jenkinsUrl"`
	// Enable notifications for merge request events.
	MergeRequestEvents pulumi.BoolOutput `pulumi:"mergeRequestEvents"`
	// Password for authentication with the Jenkins server, if authentication is required by the server.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// ID of the project you want to activate integration on.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URL-friendly project name. Example: `myProjectName`.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Enable notifications for push events.
	PushEvents pulumi.BoolOutput `pulumi:"pushEvents"`
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolOutput `pulumi:"tagPushEvents"`
	// Username for authentication with the Jenkins server, if authentication is required by the server.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewIntegrationJenkins registers a new resource with the given unique name, arguments, and options.
func NewIntegrationJenkins(ctx *pulumi.Context,
	name string, args *IntegrationJenkinsArgs, opts ...pulumi.ResourceOption) (*IntegrationJenkins, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JenkinsUrl == nil {
		return nil, errors.New("invalid value for required argument 'JenkinsUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationJenkins
	err := ctx.RegisterResource("gitlab:index/integrationJenkins:IntegrationJenkins", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationJenkins gets an existing IntegrationJenkins resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationJenkins(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationJenkinsState, opts ...pulumi.ResourceOption) (*IntegrationJenkins, error) {
	var resource IntegrationJenkins
	err := ctx.ReadResource("gitlab:index/integrationJenkins:IntegrationJenkins", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationJenkins resources.
type integrationJenkinsState struct {
	// Whether the integration is active.
	Active *bool `pulumi:"active"`
	// Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification *bool `pulumi:"enableSslVerification"`
	// Jenkins URL like `http://jenkins.example.com`
	JenkinsUrl *string `pulumi:"jenkinsUrl"`
	// Enable notifications for merge request events.
	MergeRequestEvents *bool `pulumi:"mergeRequestEvents"`
	// Password for authentication with the Jenkins server, if authentication is required by the server.
	Password *string `pulumi:"password"`
	// ID of the project you want to activate integration on.
	Project *string `pulumi:"project"`
	// The URL-friendly project name. Example: `myProjectName`.
	ProjectName *string `pulumi:"projectName"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Enable notifications for tag push events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Username for authentication with the Jenkins server, if authentication is required by the server.
	Username *string `pulumi:"username"`
}

type IntegrationJenkinsState struct {
	// Whether the integration is active.
	Active pulumi.BoolPtrInput
	// Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification pulumi.BoolPtrInput
	// Jenkins URL like `http://jenkins.example.com`
	JenkinsUrl pulumi.StringPtrInput
	// Enable notifications for merge request events.
	MergeRequestEvents pulumi.BoolPtrInput
	// Password for authentication with the Jenkins server, if authentication is required by the server.
	Password pulumi.StringPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringPtrInput
	// The URL-friendly project name. Example: `myProjectName`.
	ProjectName pulumi.StringPtrInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolPtrInput
	// Username for authentication with the Jenkins server, if authentication is required by the server.
	Username pulumi.StringPtrInput
}

func (IntegrationJenkinsState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationJenkinsState)(nil)).Elem()
}

type integrationJenkinsArgs struct {
	// Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification *bool `pulumi:"enableSslVerification"`
	// Jenkins URL like `http://jenkins.example.com`
	JenkinsUrl string `pulumi:"jenkinsUrl"`
	// Enable notifications for merge request events.
	MergeRequestEvents *bool `pulumi:"mergeRequestEvents"`
	// Password for authentication with the Jenkins server, if authentication is required by the server.
	Password *string `pulumi:"password"`
	// ID of the project you want to activate integration on.
	Project string `pulumi:"project"`
	// The URL-friendly project name. Example: `myProjectName`.
	ProjectName string `pulumi:"projectName"`
	// Enable notifications for push events.
	PushEvents *bool `pulumi:"pushEvents"`
	// Enable notifications for tag push events.
	TagPushEvents *bool `pulumi:"tagPushEvents"`
	// Username for authentication with the Jenkins server, if authentication is required by the server.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a IntegrationJenkins resource.
type IntegrationJenkinsArgs struct {
	// Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification pulumi.BoolPtrInput
	// Jenkins URL like `http://jenkins.example.com`
	JenkinsUrl pulumi.StringInput
	// Enable notifications for merge request events.
	MergeRequestEvents pulumi.BoolPtrInput
	// Password for authentication with the Jenkins server, if authentication is required by the server.
	Password pulumi.StringPtrInput
	// ID of the project you want to activate integration on.
	Project pulumi.StringInput
	// The URL-friendly project name. Example: `myProjectName`.
	ProjectName pulumi.StringInput
	// Enable notifications for push events.
	PushEvents pulumi.BoolPtrInput
	// Enable notifications for tag push events.
	TagPushEvents pulumi.BoolPtrInput
	// Username for authentication with the Jenkins server, if authentication is required by the server.
	Username pulumi.StringPtrInput
}

func (IntegrationJenkinsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationJenkinsArgs)(nil)).Elem()
}

type IntegrationJenkinsInput interface {
	pulumi.Input

	ToIntegrationJenkinsOutput() IntegrationJenkinsOutput
	ToIntegrationJenkinsOutputWithContext(ctx context.Context) IntegrationJenkinsOutput
}

func (*IntegrationJenkins) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationJenkins)(nil)).Elem()
}

func (i *IntegrationJenkins) ToIntegrationJenkinsOutput() IntegrationJenkinsOutput {
	return i.ToIntegrationJenkinsOutputWithContext(context.Background())
}

func (i *IntegrationJenkins) ToIntegrationJenkinsOutputWithContext(ctx context.Context) IntegrationJenkinsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationJenkinsOutput)
}

// IntegrationJenkinsArrayInput is an input type that accepts IntegrationJenkinsArray and IntegrationJenkinsArrayOutput values.
// You can construct a concrete instance of `IntegrationJenkinsArrayInput` via:
//
//	IntegrationJenkinsArray{ IntegrationJenkinsArgs{...} }
type IntegrationJenkinsArrayInput interface {
	pulumi.Input

	ToIntegrationJenkinsArrayOutput() IntegrationJenkinsArrayOutput
	ToIntegrationJenkinsArrayOutputWithContext(context.Context) IntegrationJenkinsArrayOutput
}

type IntegrationJenkinsArray []IntegrationJenkinsInput

func (IntegrationJenkinsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationJenkins)(nil)).Elem()
}

func (i IntegrationJenkinsArray) ToIntegrationJenkinsArrayOutput() IntegrationJenkinsArrayOutput {
	return i.ToIntegrationJenkinsArrayOutputWithContext(context.Background())
}

func (i IntegrationJenkinsArray) ToIntegrationJenkinsArrayOutputWithContext(ctx context.Context) IntegrationJenkinsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationJenkinsArrayOutput)
}

// IntegrationJenkinsMapInput is an input type that accepts IntegrationJenkinsMap and IntegrationJenkinsMapOutput values.
// You can construct a concrete instance of `IntegrationJenkinsMapInput` via:
//
//	IntegrationJenkinsMap{ "key": IntegrationJenkinsArgs{...} }
type IntegrationJenkinsMapInput interface {
	pulumi.Input

	ToIntegrationJenkinsMapOutput() IntegrationJenkinsMapOutput
	ToIntegrationJenkinsMapOutputWithContext(context.Context) IntegrationJenkinsMapOutput
}

type IntegrationJenkinsMap map[string]IntegrationJenkinsInput

func (IntegrationJenkinsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationJenkins)(nil)).Elem()
}

func (i IntegrationJenkinsMap) ToIntegrationJenkinsMapOutput() IntegrationJenkinsMapOutput {
	return i.ToIntegrationJenkinsMapOutputWithContext(context.Background())
}

func (i IntegrationJenkinsMap) ToIntegrationJenkinsMapOutputWithContext(ctx context.Context) IntegrationJenkinsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationJenkinsMapOutput)
}

type IntegrationJenkinsOutput struct{ *pulumi.OutputState }

func (IntegrationJenkinsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationJenkins)(nil)).Elem()
}

func (o IntegrationJenkinsOutput) ToIntegrationJenkinsOutput() IntegrationJenkinsOutput {
	return o
}

func (o IntegrationJenkinsOutput) ToIntegrationJenkinsOutputWithContext(ctx context.Context) IntegrationJenkinsOutput {
	return o
}

// Whether the integration is active.
func (o IntegrationJenkinsOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Enable SSL verification. Defaults to `true` (enabled).
func (o IntegrationJenkinsOutput) EnableSslVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.BoolOutput { return v.EnableSslVerification }).(pulumi.BoolOutput)
}

// Jenkins URL like `http://jenkins.example.com`
func (o IntegrationJenkinsOutput) JenkinsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.StringOutput { return v.JenkinsUrl }).(pulumi.StringOutput)
}

// Enable notifications for merge request events.
func (o IntegrationJenkinsOutput) MergeRequestEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.BoolOutput { return v.MergeRequestEvents }).(pulumi.BoolOutput)
}

// Password for authentication with the Jenkins server, if authentication is required by the server.
func (o IntegrationJenkinsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// ID of the project you want to activate integration on.
func (o IntegrationJenkinsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URL-friendly project name. Example: `myProjectName`.
func (o IntegrationJenkinsOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Enable notifications for push events.
func (o IntegrationJenkinsOutput) PushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.BoolOutput { return v.PushEvents }).(pulumi.BoolOutput)
}

// Enable notifications for tag push events.
func (o IntegrationJenkinsOutput) TagPushEvents() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.BoolOutput { return v.TagPushEvents }).(pulumi.BoolOutput)
}

// Username for authentication with the Jenkins server, if authentication is required by the server.
func (o IntegrationJenkinsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationJenkins) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type IntegrationJenkinsArrayOutput struct{ *pulumi.OutputState }

func (IntegrationJenkinsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationJenkins)(nil)).Elem()
}

func (o IntegrationJenkinsArrayOutput) ToIntegrationJenkinsArrayOutput() IntegrationJenkinsArrayOutput {
	return o
}

func (o IntegrationJenkinsArrayOutput) ToIntegrationJenkinsArrayOutputWithContext(ctx context.Context) IntegrationJenkinsArrayOutput {
	return o
}

func (o IntegrationJenkinsArrayOutput) Index(i pulumi.IntInput) IntegrationJenkinsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationJenkins {
		return vs[0].([]*IntegrationJenkins)[vs[1].(int)]
	}).(IntegrationJenkinsOutput)
}

type IntegrationJenkinsMapOutput struct{ *pulumi.OutputState }

func (IntegrationJenkinsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationJenkins)(nil)).Elem()
}

func (o IntegrationJenkinsMapOutput) ToIntegrationJenkinsMapOutput() IntegrationJenkinsMapOutput {
	return o
}

func (o IntegrationJenkinsMapOutput) ToIntegrationJenkinsMapOutputWithContext(ctx context.Context) IntegrationJenkinsMapOutput {
	return o
}

func (o IntegrationJenkinsMapOutput) MapIndex(k pulumi.StringInput) IntegrationJenkinsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationJenkins {
		return vs[0].(map[string]*IntegrationJenkins)[vs[1].(string)]
	}).(IntegrationJenkinsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationJenkinsInput)(nil)).Elem(), &IntegrationJenkins{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationJenkinsArrayInput)(nil)).Elem(), IntegrationJenkinsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationJenkinsMapInput)(nil)).Elem(), IntegrationJenkinsMap{})
	pulumi.RegisterOutputType(IntegrationJenkinsOutput{})
	pulumi.RegisterOutputType(IntegrationJenkinsArrayOutput{})
	pulumi.RegisterOutputType(IntegrationJenkinsMapOutput{})
}
