// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v7/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `GroupEpicBoard` resource allows to manage the lifecycle of a epic board in a group.
//
// > Multiple epic boards on one group requires a GitLab Premium or above License.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_boards.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v7/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := gitlab.NewGroup(ctx, "example", &gitlab.GroupArgs{
//				Name:        pulumi.String("test_group"),
//				Path:        pulumi.String("test_group"),
//				Description: pulumi.String("An example group"),
//			})
//			if err != nil {
//				return err
//			}
//			label1, err := gitlab.NewGroupLabel(ctx, "label_1", &gitlab.GroupLabelArgs{
//				Group: example.ID(),
//				Color: pulumi.String("#FF0000"),
//				Name:  pulumi.String("red-label"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewGroupLabel(ctx, "label_3", &gitlab.GroupLabelArgs{
//				Group: example.ID(),
//				Name:  pulumi.String("label-3"),
//				Color: pulumi.String("#003000"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gitlab.NewGroupEpicBoard(ctx, "epic_board", &gitlab.GroupEpicBoardArgs{
//				Name:  pulumi.String("epic board 6"),
//				Group: example.Path,
//				Lists: gitlab.GroupEpicBoardListArray{
//					&gitlab.GroupEpicBoardListArgs{
//						LabelId: label1.LabelId,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import this resource with an id made up of `{group-id}:{epic-board-id}`, e.g.
//
// ```sh
// $ pulumi import gitlab:index/groupEpicBoard:GroupEpicBoard agile 70:156
// ```
type GroupEpicBoard struct {
	pulumi.CustomResourceState

	// The ID or URL-encoded path of the group owned by the authenticated user.
	Group pulumi.StringOutput `pulumi:"group"`
	// The list of epic board lists.
	Lists GroupEpicBoardListArrayOutput `pulumi:"lists"`
	// The name of the board.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewGroupEpicBoard registers a new resource with the given unique name, arguments, and options.
func NewGroupEpicBoard(ctx *pulumi.Context,
	name string, args *GroupEpicBoardArgs, opts ...pulumi.ResourceOption) (*GroupEpicBoard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupEpicBoard
	err := ctx.RegisterResource("gitlab:index/groupEpicBoard:GroupEpicBoard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupEpicBoard gets an existing GroupEpicBoard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupEpicBoard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupEpicBoardState, opts ...pulumi.ResourceOption) (*GroupEpicBoard, error) {
	var resource GroupEpicBoard
	err := ctx.ReadResource("gitlab:index/groupEpicBoard:GroupEpicBoard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupEpicBoard resources.
type groupEpicBoardState struct {
	// The ID or URL-encoded path of the group owned by the authenticated user.
	Group *string `pulumi:"group"`
	// The list of epic board lists.
	Lists []GroupEpicBoardList `pulumi:"lists"`
	// The name of the board.
	Name *string `pulumi:"name"`
}

type GroupEpicBoardState struct {
	// The ID or URL-encoded path of the group owned by the authenticated user.
	Group pulumi.StringPtrInput
	// The list of epic board lists.
	Lists GroupEpicBoardListArrayInput
	// The name of the board.
	Name pulumi.StringPtrInput
}

func (GroupEpicBoardState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupEpicBoardState)(nil)).Elem()
}

type groupEpicBoardArgs struct {
	// The ID or URL-encoded path of the group owned by the authenticated user.
	Group string `pulumi:"group"`
	// The list of epic board lists.
	Lists []GroupEpicBoardList `pulumi:"lists"`
	// The name of the board.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a GroupEpicBoard resource.
type GroupEpicBoardArgs struct {
	// The ID or URL-encoded path of the group owned by the authenticated user.
	Group pulumi.StringInput
	// The list of epic board lists.
	Lists GroupEpicBoardListArrayInput
	// The name of the board.
	Name pulumi.StringPtrInput
}

func (GroupEpicBoardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupEpicBoardArgs)(nil)).Elem()
}

type GroupEpicBoardInput interface {
	pulumi.Input

	ToGroupEpicBoardOutput() GroupEpicBoardOutput
	ToGroupEpicBoardOutputWithContext(ctx context.Context) GroupEpicBoardOutput
}

func (*GroupEpicBoard) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupEpicBoard)(nil)).Elem()
}

func (i *GroupEpicBoard) ToGroupEpicBoardOutput() GroupEpicBoardOutput {
	return i.ToGroupEpicBoardOutputWithContext(context.Background())
}

func (i *GroupEpicBoard) ToGroupEpicBoardOutputWithContext(ctx context.Context) GroupEpicBoardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEpicBoardOutput)
}

// GroupEpicBoardArrayInput is an input type that accepts GroupEpicBoardArray and GroupEpicBoardArrayOutput values.
// You can construct a concrete instance of `GroupEpicBoardArrayInput` via:
//
//	GroupEpicBoardArray{ GroupEpicBoardArgs{...} }
type GroupEpicBoardArrayInput interface {
	pulumi.Input

	ToGroupEpicBoardArrayOutput() GroupEpicBoardArrayOutput
	ToGroupEpicBoardArrayOutputWithContext(context.Context) GroupEpicBoardArrayOutput
}

type GroupEpicBoardArray []GroupEpicBoardInput

func (GroupEpicBoardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupEpicBoard)(nil)).Elem()
}

func (i GroupEpicBoardArray) ToGroupEpicBoardArrayOutput() GroupEpicBoardArrayOutput {
	return i.ToGroupEpicBoardArrayOutputWithContext(context.Background())
}

func (i GroupEpicBoardArray) ToGroupEpicBoardArrayOutputWithContext(ctx context.Context) GroupEpicBoardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEpicBoardArrayOutput)
}

// GroupEpicBoardMapInput is an input type that accepts GroupEpicBoardMap and GroupEpicBoardMapOutput values.
// You can construct a concrete instance of `GroupEpicBoardMapInput` via:
//
//	GroupEpicBoardMap{ "key": GroupEpicBoardArgs{...} }
type GroupEpicBoardMapInput interface {
	pulumi.Input

	ToGroupEpicBoardMapOutput() GroupEpicBoardMapOutput
	ToGroupEpicBoardMapOutputWithContext(context.Context) GroupEpicBoardMapOutput
}

type GroupEpicBoardMap map[string]GroupEpicBoardInput

func (GroupEpicBoardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupEpicBoard)(nil)).Elem()
}

func (i GroupEpicBoardMap) ToGroupEpicBoardMapOutput() GroupEpicBoardMapOutput {
	return i.ToGroupEpicBoardMapOutputWithContext(context.Background())
}

func (i GroupEpicBoardMap) ToGroupEpicBoardMapOutputWithContext(ctx context.Context) GroupEpicBoardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEpicBoardMapOutput)
}

type GroupEpicBoardOutput struct{ *pulumi.OutputState }

func (GroupEpicBoardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupEpicBoard)(nil)).Elem()
}

func (o GroupEpicBoardOutput) ToGroupEpicBoardOutput() GroupEpicBoardOutput {
	return o
}

func (o GroupEpicBoardOutput) ToGroupEpicBoardOutputWithContext(ctx context.Context) GroupEpicBoardOutput {
	return o
}

// The ID or URL-encoded path of the group owned by the authenticated user.
func (o GroupEpicBoardOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupEpicBoard) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The list of epic board lists.
func (o GroupEpicBoardOutput) Lists() GroupEpicBoardListArrayOutput {
	return o.ApplyT(func(v *GroupEpicBoard) GroupEpicBoardListArrayOutput { return v.Lists }).(GroupEpicBoardListArrayOutput)
}

// The name of the board.
func (o GroupEpicBoardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupEpicBoard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type GroupEpicBoardArrayOutput struct{ *pulumi.OutputState }

func (GroupEpicBoardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupEpicBoard)(nil)).Elem()
}

func (o GroupEpicBoardArrayOutput) ToGroupEpicBoardArrayOutput() GroupEpicBoardArrayOutput {
	return o
}

func (o GroupEpicBoardArrayOutput) ToGroupEpicBoardArrayOutputWithContext(ctx context.Context) GroupEpicBoardArrayOutput {
	return o
}

func (o GroupEpicBoardArrayOutput) Index(i pulumi.IntInput) GroupEpicBoardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupEpicBoard {
		return vs[0].([]*GroupEpicBoard)[vs[1].(int)]
	}).(GroupEpicBoardOutput)
}

type GroupEpicBoardMapOutput struct{ *pulumi.OutputState }

func (GroupEpicBoardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupEpicBoard)(nil)).Elem()
}

func (o GroupEpicBoardMapOutput) ToGroupEpicBoardMapOutput() GroupEpicBoardMapOutput {
	return o
}

func (o GroupEpicBoardMapOutput) ToGroupEpicBoardMapOutputWithContext(ctx context.Context) GroupEpicBoardMapOutput {
	return o
}

func (o GroupEpicBoardMapOutput) MapIndex(k pulumi.StringInput) GroupEpicBoardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupEpicBoard {
		return vs[0].(map[string]*GroupEpicBoard)[vs[1].(string)]
	}).(GroupEpicBoardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEpicBoardInput)(nil)).Elem(), &GroupEpicBoard{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEpicBoardArrayInput)(nil)).Elem(), GroupEpicBoardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEpicBoardMapInput)(nil)).Elem(), GroupEpicBoardMap{})
	pulumi.RegisterOutputType(GroupEpicBoardOutput{})
	pulumi.RegisterOutputType(GroupEpicBoardArrayOutput{})
	pulumi.RegisterOutputType(GroupEpicBoardMapOutput{})
}
