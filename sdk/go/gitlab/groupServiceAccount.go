// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `GroupServiceAccount` resource allows creating a GitLab group service account.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v8/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// This must be a top-level group
//			example, err := gitlab.NewGroup(ctx, "example", &gitlab.GroupArgs{
//				Name:        pulumi.String("example"),
//				Path:        pulumi.String("example"),
//				Description: pulumi.String("An example group"),
//			})
//			if err != nil {
//				return err
//			}
//			// The service account against the top-level group
//			exampleSa, err := gitlab.NewGroupServiceAccount(ctx, "example_sa", &gitlab.GroupServiceAccountArgs{
//				Group:    example.ID(),
//				Name:     pulumi.String("example-name"),
//				Username: pulumi.String("example-username"),
//			})
//			if err != nil {
//				return err
//			}
//			// Group to assign the service account to. Can be the same top-level group resource as above, or a subgroup of that group.
//			exampleSubgroup, err := gitlab.NewGroup(ctx, "example_subgroup", &gitlab.GroupArgs{
//				Name:        pulumi.String("subgroup"),
//				Path:        pulumi.String("example/subgroup"),
//				Description: pulumi.String("An example subgroup"),
//			})
//			if err != nil {
//				return err
//			}
//			// To assign the service account to a group
//			_, err = gitlab.NewGroupMembership(ctx, "example_membership", &gitlab.GroupMembershipArgs{
//				GroupId:     exampleSubgroup.ID(),
//				UserId:      exampleSa.ServiceAccountId,
//				AccessLevel: pulumi.String("developer"),
//				ExpiresAt:   pulumi.String("2020-03-14"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_group_service_account`. For example:
//
// terraform
//
// import {
//
//	to = gitlab_group_service_account.example
//
//	id = "see CLI command below for ID"
//
// }
//
// Import using the CLI is supported using the following syntax:
//
// ```sh
// $ pulumi import gitlab:index/groupServiceAccount:GroupServiceAccount You can import a group service account using `<resource> <id>`. The
// ```
//
// `id` is in the form of <group_id>:<service_account_id>
//
// ```sh
// $ pulumi import gitlab:index/groupServiceAccount:GroupServiceAccount example example
// ```
type GroupServiceAccount struct {
	pulumi.CustomResourceState

	// The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
	Group pulumi.StringOutput `pulumi:"group"`
	// The name of the user. If not specified, the default Service account user name is used.
	Name pulumi.StringOutput `pulumi:"name"`
	// The service account id.
	ServiceAccountId pulumi.StringOutput `pulumi:"serviceAccountId"`
	// The username of the user. If not specified, it’s automatically generated.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewGroupServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewGroupServiceAccount(ctx *pulumi.Context,
	name string, args *GroupServiceAccountArgs, opts ...pulumi.ResourceOption) (*GroupServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupServiceAccount
	err := ctx.RegisterResource("gitlab:index/groupServiceAccount:GroupServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupServiceAccount gets an existing GroupServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupServiceAccountState, opts ...pulumi.ResourceOption) (*GroupServiceAccount, error) {
	var resource GroupServiceAccount
	err := ctx.ReadResource("gitlab:index/groupServiceAccount:GroupServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupServiceAccount resources.
type groupServiceAccountState struct {
	// The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
	Group *string `pulumi:"group"`
	// The name of the user. If not specified, the default Service account user name is used.
	Name *string `pulumi:"name"`
	// The service account id.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// The username of the user. If not specified, it’s automatically generated.
	Username *string `pulumi:"username"`
}

type GroupServiceAccountState struct {
	// The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
	Group pulumi.StringPtrInput
	// The name of the user. If not specified, the default Service account user name is used.
	Name pulumi.StringPtrInput
	// The service account id.
	ServiceAccountId pulumi.StringPtrInput
	// The username of the user. If not specified, it’s automatically generated.
	Username pulumi.StringPtrInput
}

func (GroupServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupServiceAccountState)(nil)).Elem()
}

type groupServiceAccountArgs struct {
	// The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
	Group string `pulumi:"group"`
	// The name of the user. If not specified, the default Service account user name is used.
	Name *string `pulumi:"name"`
	// The username of the user. If not specified, it’s automatically generated.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a GroupServiceAccount resource.
type GroupServiceAccountArgs struct {
	// The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
	Group pulumi.StringInput
	// The name of the user. If not specified, the default Service account user name is used.
	Name pulumi.StringPtrInput
	// The username of the user. If not specified, it’s automatically generated.
	Username pulumi.StringPtrInput
}

func (GroupServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupServiceAccountArgs)(nil)).Elem()
}

type GroupServiceAccountInput interface {
	pulumi.Input

	ToGroupServiceAccountOutput() GroupServiceAccountOutput
	ToGroupServiceAccountOutputWithContext(ctx context.Context) GroupServiceAccountOutput
}

func (*GroupServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupServiceAccount)(nil)).Elem()
}

func (i *GroupServiceAccount) ToGroupServiceAccountOutput() GroupServiceAccountOutput {
	return i.ToGroupServiceAccountOutputWithContext(context.Background())
}

func (i *GroupServiceAccount) ToGroupServiceAccountOutputWithContext(ctx context.Context) GroupServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupServiceAccountOutput)
}

// GroupServiceAccountArrayInput is an input type that accepts GroupServiceAccountArray and GroupServiceAccountArrayOutput values.
// You can construct a concrete instance of `GroupServiceAccountArrayInput` via:
//
//	GroupServiceAccountArray{ GroupServiceAccountArgs{...} }
type GroupServiceAccountArrayInput interface {
	pulumi.Input

	ToGroupServiceAccountArrayOutput() GroupServiceAccountArrayOutput
	ToGroupServiceAccountArrayOutputWithContext(context.Context) GroupServiceAccountArrayOutput
}

type GroupServiceAccountArray []GroupServiceAccountInput

func (GroupServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupServiceAccount)(nil)).Elem()
}

func (i GroupServiceAccountArray) ToGroupServiceAccountArrayOutput() GroupServiceAccountArrayOutput {
	return i.ToGroupServiceAccountArrayOutputWithContext(context.Background())
}

func (i GroupServiceAccountArray) ToGroupServiceAccountArrayOutputWithContext(ctx context.Context) GroupServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupServiceAccountArrayOutput)
}

// GroupServiceAccountMapInput is an input type that accepts GroupServiceAccountMap and GroupServiceAccountMapOutput values.
// You can construct a concrete instance of `GroupServiceAccountMapInput` via:
//
//	GroupServiceAccountMap{ "key": GroupServiceAccountArgs{...} }
type GroupServiceAccountMapInput interface {
	pulumi.Input

	ToGroupServiceAccountMapOutput() GroupServiceAccountMapOutput
	ToGroupServiceAccountMapOutputWithContext(context.Context) GroupServiceAccountMapOutput
}

type GroupServiceAccountMap map[string]GroupServiceAccountInput

func (GroupServiceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupServiceAccount)(nil)).Elem()
}

func (i GroupServiceAccountMap) ToGroupServiceAccountMapOutput() GroupServiceAccountMapOutput {
	return i.ToGroupServiceAccountMapOutputWithContext(context.Background())
}

func (i GroupServiceAccountMap) ToGroupServiceAccountMapOutputWithContext(ctx context.Context) GroupServiceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupServiceAccountMapOutput)
}

type GroupServiceAccountOutput struct{ *pulumi.OutputState }

func (GroupServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupServiceAccount)(nil)).Elem()
}

func (o GroupServiceAccountOutput) ToGroupServiceAccountOutput() GroupServiceAccountOutput {
	return o
}

func (o GroupServiceAccountOutput) ToGroupServiceAccountOutputWithContext(ctx context.Context) GroupServiceAccountOutput {
	return o
}

// The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
func (o GroupServiceAccountOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupServiceAccount) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The name of the user. If not specified, the default Service account user name is used.
func (o GroupServiceAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupServiceAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The service account id.
func (o GroupServiceAccountOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupServiceAccount) pulumi.StringOutput { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// The username of the user. If not specified, it’s automatically generated.
func (o GroupServiceAccountOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupServiceAccount) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type GroupServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (GroupServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupServiceAccount)(nil)).Elem()
}

func (o GroupServiceAccountArrayOutput) ToGroupServiceAccountArrayOutput() GroupServiceAccountArrayOutput {
	return o
}

func (o GroupServiceAccountArrayOutput) ToGroupServiceAccountArrayOutputWithContext(ctx context.Context) GroupServiceAccountArrayOutput {
	return o
}

func (o GroupServiceAccountArrayOutput) Index(i pulumi.IntInput) GroupServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupServiceAccount {
		return vs[0].([]*GroupServiceAccount)[vs[1].(int)]
	}).(GroupServiceAccountOutput)
}

type GroupServiceAccountMapOutput struct{ *pulumi.OutputState }

func (GroupServiceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupServiceAccount)(nil)).Elem()
}

func (o GroupServiceAccountMapOutput) ToGroupServiceAccountMapOutput() GroupServiceAccountMapOutput {
	return o
}

func (o GroupServiceAccountMapOutput) ToGroupServiceAccountMapOutputWithContext(ctx context.Context) GroupServiceAccountMapOutput {
	return o
}

func (o GroupServiceAccountMapOutput) MapIndex(k pulumi.StringInput) GroupServiceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupServiceAccount {
		return vs[0].(map[string]*GroupServiceAccount)[vs[1].(string)]
	}).(GroupServiceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupServiceAccountInput)(nil)).Elem(), &GroupServiceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupServiceAccountArrayInput)(nil)).Elem(), GroupServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupServiceAccountMapInput)(nil)).Elem(), GroupServiceAccountMap{})
	pulumi.RegisterOutputType(GroupServiceAccountOutput{})
	pulumi.RegisterOutputType(GroupServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(GroupServiceAccountMapOutput{})
}
