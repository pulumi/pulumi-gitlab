// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitlab

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
//
// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gitlab/sdk/v9/go/gitlab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gitlab.LookupInstanceVariable(ctx, &gitlab.LookupInstanceVariableArgs{
//				Key: "foo",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInstanceVariable(ctx *pulumi.Context, args *LookupInstanceVariableArgs, opts ...pulumi.InvokeOption) (*LookupInstanceVariableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceVariableResult
	err := ctx.Invoke("gitlab:index/getInstanceVariable:getInstanceVariable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceVariable.
type LookupInstanceVariableArgs struct {
	// The name of the variable.
	Key string `pulumi:"key"`
}

// A collection of values returned by getInstanceVariable.
type LookupInstanceVariableResult struct {
	// The description of the variable. Maximum of 255 characters.
	Description string `pulumi:"description"`
	// The ID of this datasource. In the format `<key>`.
	Id string `pulumi:"id"`
	// The name of the variable.
	Key string `pulumi:"key"`
	// If set to `true`, the value of the variable will be hidden in job logs.
	Masked bool `pulumi:"masked"`
	// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags.
	Protected bool `pulumi:"protected"`
	// If set to `true`, the variable will be treated as a raw string.
	Raw bool `pulumi:"raw"`
	// The value of the variable.
	Value string `pulumi:"value"`
	// The type of the variable, either `envVar` or `file`.
	VariableType string `pulumi:"variableType"`
}

func LookupInstanceVariableOutput(ctx *pulumi.Context, args LookupInstanceVariableOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceVariableResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInstanceVariableResultOutput, error) {
			args := v.(LookupInstanceVariableArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gitlab:index/getInstanceVariable:getInstanceVariable", args, LookupInstanceVariableResultOutput{}, options).(LookupInstanceVariableResultOutput), nil
		}).(LookupInstanceVariableResultOutput)
}

// A collection of arguments for invoking getInstanceVariable.
type LookupInstanceVariableOutputArgs struct {
	// The name of the variable.
	Key pulumi.StringInput `pulumi:"key"`
}

func (LookupInstanceVariableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceVariableArgs)(nil)).Elem()
}

// A collection of values returned by getInstanceVariable.
type LookupInstanceVariableResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceVariableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceVariableResult)(nil)).Elem()
}

func (o LookupInstanceVariableResultOutput) ToLookupInstanceVariableResultOutput() LookupInstanceVariableResultOutput {
	return o
}

func (o LookupInstanceVariableResultOutput) ToLookupInstanceVariableResultOutputWithContext(ctx context.Context) LookupInstanceVariableResultOutput {
	return o
}

// The description of the variable. Maximum of 255 characters.
func (o LookupInstanceVariableResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of this datasource. In the format `<key>`.
func (o LookupInstanceVariableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the variable.
func (o LookupInstanceVariableResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) string { return v.Key }).(pulumi.StringOutput)
}

// If set to `true`, the value of the variable will be hidden in job logs.
func (o LookupInstanceVariableResultOutput) Masked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) bool { return v.Masked }).(pulumi.BoolOutput)
}

// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags.
func (o LookupInstanceVariableResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) bool { return v.Protected }).(pulumi.BoolOutput)
}

// If set to `true`, the variable will be treated as a raw string.
func (o LookupInstanceVariableResultOutput) Raw() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) bool { return v.Raw }).(pulumi.BoolOutput)
}

// The value of the variable.
func (o LookupInstanceVariableResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) string { return v.Value }).(pulumi.StringOutput)
}

// The type of the variable, either `envVar` or `file`.
func (o LookupInstanceVariableResultOutput) VariableType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceVariableResult) string { return v.VariableType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceVariableResultOutput{})
}
