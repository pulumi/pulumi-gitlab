// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectExternalStatusCheck` resource allows you to manage the lifecycle of an external status check service on a project.
 *
 * > This resource requires a GitLab Enterprise instance with an Ultimate license.
 *
 * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/status_checks/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const foo = new gitlab.ProjectExternalStatusCheck("foo", {
 *     projectId: 123,
 *     name: "foo",
 *     externalUrl: "https://example.gitlab.com",
 * });
 * const bar = new gitlab.ProjectExternalStatusCheck("bar", {
 *     projectId: 456,
 *     name: "bar",
 *     externalUrl: "https://example.gitlab.com",
 *     sharedSecret: "secret",
 *     protectedBranchIds: [
 *         6,
 *         28,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_external_status_check`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_external_status_check.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * GitLab project external status checks can be imported using an id made up of `<project-id>:<external-check-id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck foo "123:42"
 * ```
 *
 * NOTE: the `shared_secret` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 */
export class ProjectExternalStatusCheck extends pulumi.CustomResource {
    /**
     * Get an existing ProjectExternalStatusCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectExternalStatusCheckState, opts?: pulumi.CustomResourceOptions): ProjectExternalStatusCheck {
        return new ProjectExternalStatusCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck';

    /**
     * Returns true if the given object is an instance of ProjectExternalStatusCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectExternalStatusCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectExternalStatusCheck.__pulumiType;
    }

    /**
     * The URL of the external status check service.
     */
    declare public readonly externalUrl: pulumi.Output<string>;
    /**
     * True if the external status check uses an HMAC secret.
     */
    declare public /*out*/ readonly hmac: pulumi.Output<boolean>;
    /**
     * The display name of the external status check service.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project.
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * The list of IDs of protected branches to scope the rule by.
     */
    declare public readonly protectedBranchIds: pulumi.Output<number[]>;
    /**
     * The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
     */
    declare public readonly sharedSecret: pulumi.Output<string | undefined>;

    /**
     * Create a ProjectExternalStatusCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectExternalStatusCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectExternalStatusCheckArgs | ProjectExternalStatusCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectExternalStatusCheckState | undefined;
            resourceInputs["externalUrl"] = state?.externalUrl;
            resourceInputs["hmac"] = state?.hmac;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["protectedBranchIds"] = state?.protectedBranchIds;
            resourceInputs["sharedSecret"] = state?.sharedSecret;
        } else {
            const args = argsOrState as ProjectExternalStatusCheckArgs | undefined;
            if (args?.externalUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalUrl'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["externalUrl"] = args?.externalUrl;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["protectedBranchIds"] = args?.protectedBranchIds;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["hmac"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProjectExternalStatusCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectExternalStatusCheck resources.
 */
export interface ProjectExternalStatusCheckState {
    /**
     * The URL of the external status check service.
     */
    externalUrl?: pulumi.Input<string>;
    /**
     * True if the external status check uses an HMAC secret.
     */
    hmac?: pulumi.Input<boolean>;
    /**
     * The display name of the external status check service.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<number>;
    /**
     * The list of IDs of protected branches to scope the rule by.
     */
    protectedBranchIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
     */
    sharedSecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectExternalStatusCheck resource.
 */
export interface ProjectExternalStatusCheckArgs {
    /**
     * The URL of the external status check service.
     */
    externalUrl: pulumi.Input<string>;
    /**
     * The display name of the external status check service.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId: pulumi.Input<number>;
    /**
     * The list of IDs of protected branches to scope the rule by.
     */
    protectedBranchIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
     */
    sharedSecret?: pulumi.Input<string>;
}
