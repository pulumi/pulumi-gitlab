// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ClusterAgentToken` resource allows to manage the lifecycle of a token for a GitLab Agent for Kubernetes.
 *
 * > Requires at least maintainer permissions on the project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/#create-an-agent-token)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 * import * as helm from "@pulumi/helm";
 *
 * // Create token for an agent
 * const example = new gitlab.ClusterAgentToken("example", {
 *     project: "12345",
 *     agentId: 42,
 *     name: "some-token",
 *     description: "some token",
 * });
 * // The following example creates a GitLab Agent for Kubernetes in a given project,
 * // creates a token and install the `gitlab-agent` Helm Chart.
 * // (see https://gitlab.com/gitlab-org/charts/gitlab-agent)
 * const _this = gitlab.getProject({
 *     pathWithNamespace: "my-org/example",
 * });
 * const thisClusterAgent = new gitlab.ClusterAgent("this", {
 *     project: _this.then(_this => _this.id),
 *     name: "my-agent",
 * });
 * const thisClusterAgentToken = new gitlab.ClusterAgentToken("this", {
 *     project: _this.then(_this => _this.id),
 *     agentId: thisClusterAgent.agentId,
 *     name: "my-agent-token",
 *     description: "Token for the my-agent used with `gitlab-agent` Helm Chart",
 * });
 * const gitlabAgent = new helm.index.Release("gitlab_agent", {
 *     name: "gitlab-agent",
 *     namespace: "gitlab-agent",
 *     createNamespace: true,
 *     repository: "https://charts.gitlab.io",
 *     chart: "gitlab-agent",
 *     version: "1.2.0",
 *     set: [{
 *         name: "config.token",
 *         value: thisClusterAgentToken.token,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_cluster_agent_token`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_cluster_agent_token.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * A token for a GitLab Agent for Kubernetes can be imported with the following command and the id pattern `<project>:<agent-id>:<token-id>`:
 *
 * ```sh
 * $ pulumi import gitlab:index/clusterAgentToken:ClusterAgentToken example '12345:42:1'
 * ```
 *
 * ATTENTION: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 */
export class ClusterAgentToken extends pulumi.CustomResource {
    /**
     * Get an existing ClusterAgentToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterAgentTokenState, opts?: pulumi.CustomResourceOptions): ClusterAgentToken {
        return new ClusterAgentToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/clusterAgentToken:ClusterAgentToken';

    /**
     * Returns true if the given object is an instance of ClusterAgentToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterAgentToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterAgentToken.__pulumiType;
    }

    /**
     * The ID of the agent.
     */
    declare public readonly agentId: pulumi.Output<number>;
    /**
     * The ISO8601 datetime when the agent was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The ID of the user who created the agent.
     */
    declare public /*out*/ readonly createdByUserId: pulumi.Output<number>;
    /**
     * The Description for the agent.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The ISO8601 datetime when the token was last used.
     */
    declare public /*out*/ readonly lastUsedAt: pulumi.Output<string>;
    /**
     * The Name of the agent.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * ID or full path of the project maintained by the authenticated user.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The status of the token. Valid values are `active`, `revoked`.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The secret token for the agent. The `token` is not available in imported resources.
     */
    declare public /*out*/ readonly token: pulumi.Output<string>;
    /**
     * The ID of the token.
     */
    declare public /*out*/ readonly tokenId: pulumi.Output<number>;

    /**
     * Create a ClusterAgentToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterAgentTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterAgentTokenArgs | ClusterAgentTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterAgentTokenState | undefined;
            resourceInputs["agentId"] = state?.agentId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdByUserId"] = state?.createdByUserId;
            resourceInputs["description"] = state?.description;
            resourceInputs["lastUsedAt"] = state?.lastUsedAt;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["status"] = state?.status;
            resourceInputs["token"] = state?.token;
            resourceInputs["tokenId"] = state?.tokenId;
        } else {
            const args = argsOrState as ClusterAgentTokenArgs | undefined;
            if (args?.agentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["agentId"] = args?.agentId;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdByUserId"] = undefined /*out*/;
            resourceInputs["lastUsedAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["tokenId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ClusterAgentToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterAgentToken resources.
 */
export interface ClusterAgentTokenState {
    /**
     * The ID of the agent.
     */
    agentId?: pulumi.Input<number>;
    /**
     * The ISO8601 datetime when the agent was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the user who created the agent.
     */
    createdByUserId?: pulumi.Input<number>;
    /**
     * The Description for the agent.
     */
    description?: pulumi.Input<string>;
    /**
     * The ISO8601 datetime when the token was last used.
     */
    lastUsedAt?: pulumi.Input<string>;
    /**
     * The Name of the agent.
     */
    name?: pulumi.Input<string>;
    /**
     * ID or full path of the project maintained by the authenticated user.
     */
    project?: pulumi.Input<string>;
    /**
     * The status of the token. Valid values are `active`, `revoked`.
     */
    status?: pulumi.Input<string>;
    /**
     * The secret token for the agent. The `token` is not available in imported resources.
     */
    token?: pulumi.Input<string>;
    /**
     * The ID of the token.
     */
    tokenId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ClusterAgentToken resource.
 */
export interface ClusterAgentTokenArgs {
    /**
     * The ID of the agent.
     */
    agentId: pulumi.Input<number>;
    /**
     * The Description for the agent.
     */
    description?: pulumi.Input<string>;
    /**
     * The Name of the agent.
     */
    name?: pulumi.Input<string>;
    /**
     * ID or full path of the project maintained by the authenticated user.
     */
    project: pulumi.Input<string>;
}
