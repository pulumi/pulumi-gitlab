// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ManagedLicense` resource allows to manage the lifecycle of a managed license.
 *
 * > This resource requires a GitLab Enterprise instance.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/managed_licenses.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const foo = new gitlab.Project("foo", {
 *     description: "Lorem Ipsum",
 *     visibilityLevel: "public",
 * });
 * const mit = new gitlab.ManagedLicense("mit", {
 *     project: foo.id,
 *     approvalStatus: "allowed",
 * });
 * ```
 *
 * ## Import
 *
 * # You can import this resource with an id made up of `{project-id}:{license-id}`, e.g.
 *
 * ```sh
 *  $ pulumi import gitlab:index/managedLicense:ManagedLicense foo 1:2
 * ```
 */
export class ManagedLicense extends pulumi.CustomResource {
    /**
     * Get an existing ManagedLicense resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedLicenseState, opts?: pulumi.CustomResourceOptions): ManagedLicense {
        return new ManagedLicense(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/managedLicense:ManagedLicense';

    /**
     * Returns true if the given object is an instance of ManagedLicense.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedLicense {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedLicense.__pulumiType;
    }

    /**
     * The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. "approved" and
     * "blacklisted" have been deprecated in favor of "allowed" and "denied"; use "allowed" and "denied" for GitLab versions
     * 15.0 and higher. Prior to version 15.0 and after 14.6, the values are equivalent.
     */
    public readonly approvalStatus!: pulumi.Output<string>;
    /**
     * The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project under which the managed license will be created.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a ManagedLicense resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedLicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedLicenseArgs | ManagedLicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedLicenseState | undefined;
            resourceInputs["approvalStatus"] = state ? state.approvalStatus : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as ManagedLicenseArgs | undefined;
            if ((!args || args.approvalStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'approvalStatus'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["approvalStatus"] = args ? args.approvalStatus : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedLicense.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedLicense resources.
 */
export interface ManagedLicenseState {
    /**
     * The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. "approved" and
     * "blacklisted" have been deprecated in favor of "allowed" and "denied"; use "allowed" and "denied" for GitLab versions
     * 15.0 and higher. Prior to version 15.0 and after 14.6, the values are equivalent.
     */
    approvalStatus?: pulumi.Input<string>;
    /**
     * The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project under which the managed license will be created.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedLicense resource.
 */
export interface ManagedLicenseArgs {
    /**
     * The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. "approved" and
     * "blacklisted" have been deprecated in favor of "allowed" and "denied"; use "allowed" and "denied" for GitLab versions
     * 15.0 and higher. Prior to version 15.0 and after 14.6, the values are equivalent.
     */
    approvalStatus: pulumi.Input<string>;
    /**
     * The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project under which the managed license will be created.
     */
    project: pulumi.Input<string>;
}
