// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.
 *
 * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const foo = gitlab.getProject({
 *     id: "foo/bar/baz",
 * });
 * const welcomeIssue = foo.then(foo => gitlab.getProjectIssue({
 *     project: foo.id,
 *     iid: 1,
 * }));
 * export const welcomeIssueWebUrl = data.gitlab_project_issue.web_url;
 * ```
 */
export function getProjectIssue(args: GetProjectIssueArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectIssueResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("gitlab:index/getProjectIssue:getProjectIssue", {
        "iid": args.iid,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectIssue.
 */
export interface GetProjectIssueArgs {
    iid: number;
    project: string;
}

/**
 * A collection of values returned by getProjectIssue.
 */
export interface GetProjectIssueResult {
    readonly assigneeIds: number[];
    readonly authorId: number;
    readonly closedAt: string;
    readonly closedByUserId: number;
    readonly confidential: boolean;
    readonly createdAt: string;
    readonly description: string;
    readonly discussionLocked: boolean;
    readonly discussionToResolve: string;
    readonly downvotes: number;
    readonly dueDate: string;
    readonly epicId: number;
    readonly epicIssueId: number;
    readonly externalId: string;
    readonly humanTimeEstimate: string;
    readonly humanTotalTimeSpent: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly iid: number;
    readonly issueId: number;
    readonly issueLinkId: number;
    readonly issueType: string;
    readonly labels: string[];
    readonly links: {[key: string]: string};
    readonly mergeRequestToResolveDiscussionsOf: number;
    readonly mergeRequestsCount: number;
    readonly milestoneId: number;
    readonly movedToId: number;
    readonly project: string;
    readonly references: {[key: string]: string};
    readonly state: string;
    readonly subscribed: boolean;
    readonly taskCompletionStatuses: outputs.GetProjectIssueTaskCompletionStatus[];
    readonly timeEstimate: number;
    readonly title: string;
    readonly totalTimeSpent: number;
    readonly updatedAt: string;
    readonly upvotes: number;
    readonly userNotesCount: number;
    readonly webUrl: string;
    readonly weight: number;
}

export function getProjectIssueOutput(args: GetProjectIssueOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectIssueResult> {
    return pulumi.output(args).apply(a => getProjectIssue(a, opts))
}

/**
 * A collection of arguments for invoking getProjectIssue.
 */
export interface GetProjectIssueOutputArgs {
    iid: pulumi.Input<number>;
    project: pulumi.Input<string>;
}
