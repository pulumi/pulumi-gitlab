// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceGithub extends pulumi.CustomResource {
    /**
     * Get an existing ServiceGithub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceGithubState, opts?: pulumi.CustomResourceOptions): ServiceGithub {
        return new ServiceGithub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/serviceGithub:ServiceGithub';

    /**
     * Returns true if the given object is an instance of ServiceGithub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceGithub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceGithub.__pulumiType;
    }

    public /*out*/ readonly active!: pulumi.Output<boolean>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    public readonly project!: pulumi.Output<string>;
    public readonly repositoryUrl!: pulumi.Output<string>;
    /**
     * Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more. 
     */
    public readonly staticContext!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly title!: pulumi.Output<string>;
    /**
     * A GitHub personal access token with at least `repo:status` scope.
     */
    public readonly token!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ServiceGithub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceGithubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceGithubArgs | ServiceGithubState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceGithubState | undefined;
            inputs["active"] = state ? state.active : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["repositoryUrl"] = state ? state.repositoryUrl : undefined;
            inputs["staticContext"] = state ? state.staticContext : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["token"] = state ? state.token : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ServiceGithubArgs | undefined;
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.repositoryUrl === undefined) {
                throw new Error("Missing required property 'repositoryUrl'");
            }
            if (!args || args.token === undefined) {
                throw new Error("Missing required property 'token'");
            }
            inputs["project"] = args ? args.project : undefined;
            inputs["repositoryUrl"] = args ? args.repositoryUrl : undefined;
            inputs["staticContext"] = args ? args.staticContext : undefined;
            inputs["token"] = args ? args.token : undefined;
            inputs["active"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["title"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServiceGithub.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceGithub resources.
 */
export interface ServiceGithubState {
    readonly active?: pulumi.Input<boolean>;
    readonly createdAt?: pulumi.Input<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    readonly project?: pulumi.Input<string>;
    readonly repositoryUrl?: pulumi.Input<string>;
    /**
     * Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more. 
     */
    readonly staticContext?: pulumi.Input<boolean>;
    readonly title?: pulumi.Input<string>;
    /**
     * A GitHub personal access token with at least `repo:status` scope.
     */
    readonly token?: pulumi.Input<string>;
    readonly updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceGithub resource.
 */
export interface ServiceGithubArgs {
    /**
     * ID of the project you want to activate integration on.
     */
    readonly project: pulumi.Input<string>;
    readonly repositoryUrl: pulumi.Input<string>;
    /**
     * Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more. 
     */
    readonly staticContext?: pulumi.Input<boolean>;
    /**
     * A GitHub personal access token with at least `repo:status` scope.
     */
    readonly token: pulumi.Input<string>;
}
