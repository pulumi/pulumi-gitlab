// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.MemberRole` resource allows to manage the lifecycle of a custom member role.
 *
 * Custom roles allow an organization to create user roles with the precise privileges and permissions required for that organizationâ€™s needs.
 *
 * > This resource requires an Ultimate license.
 *
 * > Most custom roles are considered billable users that use a seat. [Custom roles billing and seat usage](https://docs.gitlab.com/ee/user/custom_roles.html#billing-and-seat-usage)
 *
 * > There can be only 10 custom roles on your instance or namespace. See [issue 450929](https://gitlab.com/gitlab-org/gitlab/-/issues/450929) for more details.
 *
 * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/#mutationmemberrolecreate)
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_member_role`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_member_role.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Import using the CLI is supported using the following syntax:
 *
 * GitLab member role can be imported using the id made up of `gid://gitlab/MemberRole/<ID>` e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/memberRole:MemberRole example 'gid://gitlab/MemberRole/123'
 * ```
 */
export class MemberRole extends pulumi.CustomResource {
    /**
     * Get an existing MemberRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MemberRoleState, opts?: pulumi.CustomResourceOptions): MemberRole {
        return new MemberRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/memberRole:MemberRole';

    /**
     * Returns true if the given object is an instance of MemberRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MemberRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MemberRole.__pulumiType;
    }

    /**
     * The base access level for the custom role. Valid values are: `DEVELOPER`, `GUEST`, `MAINTAINER`, `MINIMAL_ACCESS`, `OWNER`, `REPORTER`
     */
    public readonly baseAccessLevel!: pulumi.Output<string>;
    /**
     * Timestamp of when the member role was created. Only available with GitLab version 17.3 or higher.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description for the member role.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Web UI path to edit the member role
     */
    public /*out*/ readonly editPath!: pulumi.Output<string>;
    /**
     * All permissions enabled for the custom role. Valid values are: `ADMIN_CICD_VARIABLES`, `ADMIN_COMPLIANCE_FRAMEWORK`, `ADMIN_GROUP_MEMBER`, `ADMIN_INTEGRATIONS`, `ADMIN_MERGE_REQUEST`, `ADMIN_PUSH_RULES`, `ADMIN_RUNNERS`, `ADMIN_TERRAFORM_STATE`, `ADMIN_VULNERABILITY`, `ADMIN_WEB_HOOK`, `ARCHIVE_PROJECT`, `MANAGE_DEPLOY_TOKENS`, `MANAGE_GROUP_ACCESS_TOKENS`, `MANAGE_MERGE_REQUEST_SETTINGS`, `MANAGE_PROJECT_ACCESS_TOKENS`, `MANAGE_SECURITY_POLICY_LINK`, `READ_CODE`, `READ_CRM_CONTACT`, `READ_DEPENDENCY`, `READ_RUNNERS`, `READ_VULNERABILITY`, `REMOVE_GROUP`, `REMOVE_PROJECT`
     */
    public readonly enabledPermissions!: pulumi.Output<string[]>;
    /**
     * Full path of the namespace to create the member role in. **Required for SAAS** **Not allowed for self-managed**
     */
    public readonly groupPath!: pulumi.Output<string>;
    /**
     * The id integer value extracted from the `id` attribute
     */
    public /*out*/ readonly iid!: pulumi.Output<number>;
    /**
     * Name for the member role.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a MemberRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MemberRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MemberRoleArgs | MemberRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MemberRoleState | undefined;
            resourceInputs["baseAccessLevel"] = state ? state.baseAccessLevel : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["editPath"] = state ? state.editPath : undefined;
            resourceInputs["enabledPermissions"] = state ? state.enabledPermissions : undefined;
            resourceInputs["groupPath"] = state ? state.groupPath : undefined;
            resourceInputs["iid"] = state ? state.iid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as MemberRoleArgs | undefined;
            if ((!args || args.baseAccessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseAccessLevel'");
            }
            if ((!args || args.enabledPermissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabledPermissions'");
            }
            resourceInputs["baseAccessLevel"] = args ? args.baseAccessLevel : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabledPermissions"] = args ? args.enabledPermissions : undefined;
            resourceInputs["groupPath"] = args ? args.groupPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["editPath"] = undefined /*out*/;
            resourceInputs["iid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MemberRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MemberRole resources.
 */
export interface MemberRoleState {
    /**
     * The base access level for the custom role. Valid values are: `DEVELOPER`, `GUEST`, `MAINTAINER`, `MINIMAL_ACCESS`, `OWNER`, `REPORTER`
     */
    baseAccessLevel?: pulumi.Input<string>;
    /**
     * Timestamp of when the member role was created. Only available with GitLab version 17.3 or higher.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description for the member role.
     */
    description?: pulumi.Input<string>;
    /**
     * The Web UI path to edit the member role
     */
    editPath?: pulumi.Input<string>;
    /**
     * All permissions enabled for the custom role. Valid values are: `ADMIN_CICD_VARIABLES`, `ADMIN_COMPLIANCE_FRAMEWORK`, `ADMIN_GROUP_MEMBER`, `ADMIN_INTEGRATIONS`, `ADMIN_MERGE_REQUEST`, `ADMIN_PUSH_RULES`, `ADMIN_RUNNERS`, `ADMIN_TERRAFORM_STATE`, `ADMIN_VULNERABILITY`, `ADMIN_WEB_HOOK`, `ARCHIVE_PROJECT`, `MANAGE_DEPLOY_TOKENS`, `MANAGE_GROUP_ACCESS_TOKENS`, `MANAGE_MERGE_REQUEST_SETTINGS`, `MANAGE_PROJECT_ACCESS_TOKENS`, `MANAGE_SECURITY_POLICY_LINK`, `READ_CODE`, `READ_CRM_CONTACT`, `READ_DEPENDENCY`, `READ_RUNNERS`, `READ_VULNERABILITY`, `REMOVE_GROUP`, `REMOVE_PROJECT`
     */
    enabledPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Full path of the namespace to create the member role in. **Required for SAAS** **Not allowed for self-managed**
     */
    groupPath?: pulumi.Input<string>;
    /**
     * The id integer value extracted from the `id` attribute
     */
    iid?: pulumi.Input<number>;
    /**
     * Name for the member role.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MemberRole resource.
 */
export interface MemberRoleArgs {
    /**
     * The base access level for the custom role. Valid values are: `DEVELOPER`, `GUEST`, `MAINTAINER`, `MINIMAL_ACCESS`, `OWNER`, `REPORTER`
     */
    baseAccessLevel: pulumi.Input<string>;
    /**
     * Description for the member role.
     */
    description?: pulumi.Input<string>;
    /**
     * All permissions enabled for the custom role. Valid values are: `ADMIN_CICD_VARIABLES`, `ADMIN_COMPLIANCE_FRAMEWORK`, `ADMIN_GROUP_MEMBER`, `ADMIN_INTEGRATIONS`, `ADMIN_MERGE_REQUEST`, `ADMIN_PUSH_RULES`, `ADMIN_RUNNERS`, `ADMIN_TERRAFORM_STATE`, `ADMIN_VULNERABILITY`, `ADMIN_WEB_HOOK`, `ARCHIVE_PROJECT`, `MANAGE_DEPLOY_TOKENS`, `MANAGE_GROUP_ACCESS_TOKENS`, `MANAGE_MERGE_REQUEST_SETTINGS`, `MANAGE_PROJECT_ACCESS_TOKENS`, `MANAGE_SECURITY_POLICY_LINK`, `READ_CODE`, `READ_CRM_CONTACT`, `READ_DEPENDENCY`, `READ_RUNNERS`, `READ_VULNERABILITY`, `REMOVE_GROUP`, `REMOVE_PROJECT`
     */
    enabledPermissions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Full path of the namespace to create the member role in. **Required for SAAS** **Not allowed for self-managed**
     */
    groupPath?: pulumi.Input<string>;
    /**
     * Name for the member role.
     */
    name?: pulumi.Input<string>;
}
