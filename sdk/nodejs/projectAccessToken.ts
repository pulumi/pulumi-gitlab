// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectAccessToken` resource allows to manage the lifecycle of a project access token.
 *
 * > Observability scopes are in beta and may not work on all instances. See more details in [the documentation](https://docs.gitlab.com/operations/tracing/)
 *
 * > Use `rotationConfiguration` to automatically rotate tokens instead of using `timestamp()` as timestamp will cause changes with every plan. `pulumi up` must still be run to rotate the token.
 *
 * > Due to [Automatic reuse detection](https://docs.gitlab.com/api/project_access_tokens/#automatic-reuse-detection) it's possible that a new Project Access Token will immediately be revoked. Check if an old process using the old token is running if this happens.
 *
 * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/project_access_tokens/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = new gitlab.ProjectAccessToken("example", {
 *     project: "25",
 *     name: "Example project access token",
 *     expiresAt: "2020-03-14",
 *     accessLevel: "reporter",
 *     scopes: ["api"],
 * });
 * const exampleProjectVariable = new gitlab.ProjectVariable("example", {
 *     project: exampleGitlabProject.id,
 *     key: "pat",
 *     value: example.token,
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_access_token`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_access_token.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Import using the CLI is supported using the following syntax:
 *
 * A GitLab Project Access Token can be imported using a key composed of `<project-id>:<token-id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/projectAccessToken:ProjectAccessToken example "12345:1"
 * ```
 *
 * NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 */
export class ProjectAccessToken extends pulumi.CustomResource {
    /**
     * Get an existing ProjectAccessToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectAccessTokenState, opts?: pulumi.CustomResourceOptions): ProjectAccessToken {
        return new ProjectAccessToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectAccessToken:ProjectAccessToken';

    /**
     * Returns true if the given object is an instance of ProjectAccessToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectAccessToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectAccessToken.__pulumiType;
    }

    /**
     * The access level for the project access token. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`. Default is `maintainer`.
     */
    public readonly accessLevel!: pulumi.Output<string>;
    /**
     * True if the token is active.
     */
    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * Time the token has been created, RFC3339 format.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * When the token will expire, YYYY-MM-DD format. Is automatically set when `rotationConfiguration` is used.
     */
    public readonly expiresAt!: pulumi.Output<string>;
    /**
     * The name of the project access token.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID or full path of the project.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * True if the token is revoked.
     */
    public /*out*/ readonly revoked!: pulumi.Output<boolean>;
    /**
     * The configuration for when to rotate a token automatically. Will not rotate a token until `pulumi up` is run.
     */
    public readonly rotationConfiguration!: pulumi.Output<outputs.ProjectAccessTokenRotationConfiguration | undefined>;
    /**
     * The scopes of the project access token. valid values are: `api`, `readApi`, `readRegistry`, `writeRegistry`, `readRepository`, `writeRepository`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `readObservability`, `writeObservability`
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * The token of the project access token. **Note**: the token is not available for imported resources.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * The userId associated to the token.
     */
    public /*out*/ readonly userId!: pulumi.Output<number>;

    /**
     * Create a ProjectAccessToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectAccessTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectAccessTokenArgs | ProjectAccessTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectAccessTokenState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["revoked"] = state ? state.revoked : undefined;
            resourceInputs["rotationConfiguration"] = state ? state.rotationConfiguration : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ProjectAccessTokenArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rotationConfiguration"] = args ? args.rotationConfiguration : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["revoked"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProjectAccessToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectAccessToken resources.
 */
export interface ProjectAccessTokenState {
    /**
     * The access level for the project access token. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`. Default is `maintainer`.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * True if the token is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Time the token has been created, RFC3339 format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * When the token will expire, YYYY-MM-DD format. Is automatically set when `rotationConfiguration` is used.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The name of the project access token.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * True if the token is revoked.
     */
    revoked?: pulumi.Input<boolean>;
    /**
     * The configuration for when to rotate a token automatically. Will not rotate a token until `pulumi up` is run.
     */
    rotationConfiguration?: pulumi.Input<inputs.ProjectAccessTokenRotationConfiguration>;
    /**
     * The scopes of the project access token. valid values are: `api`, `readApi`, `readRegistry`, `writeRegistry`, `readRepository`, `writeRepository`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `readObservability`, `writeObservability`
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The token of the project access token. **Note**: the token is not available for imported resources.
     */
    token?: pulumi.Input<string>;
    /**
     * The userId associated to the token.
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ProjectAccessToken resource.
 */
export interface ProjectAccessTokenArgs {
    /**
     * The access level for the project access token. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`. Default is `maintainer`.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * When the token will expire, YYYY-MM-DD format. Is automatically set when `rotationConfiguration` is used.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The name of the project access token.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * The configuration for when to rotate a token automatically. Will not rotate a token until `pulumi up` is run.
     */
    rotationConfiguration?: pulumi.Input<inputs.ProjectAccessTokenRotationConfiguration>;
    /**
     * The scopes of the project access token. valid values are: `api`, `readApi`, `readRegistry`, `writeRegistry`, `readRepository`, `writeRepository`, `createRunner`, `manageRunner`, `aiFeatures`, `k8sProxy`, `readObservability`, `writeObservability`
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
}
