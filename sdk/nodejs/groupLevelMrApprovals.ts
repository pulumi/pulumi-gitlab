// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_level_mr_approvals`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_group_level_mr_approvals.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals You can import an approval configuration state using `<resource> <group_id>`.
 * ```
 *
 * For example:
 *
 * ```sh
 * $ pulumi import gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals foo 1234
 * ```
 */
export class GroupLevelMrApprovals extends pulumi.CustomResource {
    /**
     * Get an existing GroupLevelMrApprovals resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupLevelMrApprovalsState, opts?: pulumi.CustomResourceOptions): GroupLevelMrApprovals {
        return new GroupLevelMrApprovals(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals';

    /**
     * Returns true if the given object is an instance of GroupLevelMrApprovals.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupLevelMrApprovals {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupLevelMrApprovals.__pulumiType;
    }

    /**
     * Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
     */
    declare public readonly allowAuthorApproval: pulumi.Output<boolean>;
    /**
     * Allow or prevent committers from self approving merge requests.
     */
    declare public readonly allowCommitterApproval: pulumi.Output<boolean>;
    /**
     * Allow or prevent overriding approvers per merge request.
     */
    declare public readonly allowOverridesToApproverListPerMergeRequest: pulumi.Output<boolean>;
    /**
     * The ID or URL-encoded path of the group.
     */
    declare public readonly group: pulumi.Output<string>;
    declare public readonly keepSettingsOnDestroy: pulumi.Output<boolean>;
    /**
     * Require approver to authenticate before adding the approval.
     */
    declare public readonly requireReauthenticationToApprove: pulumi.Output<boolean>;
    /**
     * Retain approval count on a new push.
     */
    declare public readonly retainApprovalsOnPush: pulumi.Output<boolean>;

    /**
     * Create a GroupLevelMrApprovals resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupLevelMrApprovalsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupLevelMrApprovalsArgs | GroupLevelMrApprovalsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupLevelMrApprovalsState | undefined;
            resourceInputs["allowAuthorApproval"] = state?.allowAuthorApproval;
            resourceInputs["allowCommitterApproval"] = state?.allowCommitterApproval;
            resourceInputs["allowOverridesToApproverListPerMergeRequest"] = state?.allowOverridesToApproverListPerMergeRequest;
            resourceInputs["group"] = state?.group;
            resourceInputs["keepSettingsOnDestroy"] = state?.keepSettingsOnDestroy;
            resourceInputs["requireReauthenticationToApprove"] = state?.requireReauthenticationToApprove;
            resourceInputs["retainApprovalsOnPush"] = state?.retainApprovalsOnPush;
        } else {
            const args = argsOrState as GroupLevelMrApprovalsArgs | undefined;
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            resourceInputs["allowAuthorApproval"] = args?.allowAuthorApproval;
            resourceInputs["allowCommitterApproval"] = args?.allowCommitterApproval;
            resourceInputs["allowOverridesToApproverListPerMergeRequest"] = args?.allowOverridesToApproverListPerMergeRequest;
            resourceInputs["group"] = args?.group;
            resourceInputs["keepSettingsOnDestroy"] = args?.keepSettingsOnDestroy;
            resourceInputs["requireReauthenticationToApprove"] = args?.requireReauthenticationToApprove;
            resourceInputs["retainApprovalsOnPush"] = args?.retainApprovalsOnPush;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupLevelMrApprovals.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupLevelMrApprovals resources.
 */
export interface GroupLevelMrApprovalsState {
    /**
     * Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
     */
    allowAuthorApproval?: pulumi.Input<boolean>;
    /**
     * Allow or prevent committers from self approving merge requests.
     */
    allowCommitterApproval?: pulumi.Input<boolean>;
    /**
     * Allow or prevent overriding approvers per merge request.
     */
    allowOverridesToApproverListPerMergeRequest?: pulumi.Input<boolean>;
    /**
     * The ID or URL-encoded path of the group.
     */
    group?: pulumi.Input<string>;
    keepSettingsOnDestroy?: pulumi.Input<boolean>;
    /**
     * Require approver to authenticate before adding the approval.
     */
    requireReauthenticationToApprove?: pulumi.Input<boolean>;
    /**
     * Retain approval count on a new push.
     */
    retainApprovalsOnPush?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GroupLevelMrApprovals resource.
 */
export interface GroupLevelMrApprovalsArgs {
    /**
     * Allow or prevent authors from self approving merge requests; `true` means authors can self approve.
     */
    allowAuthorApproval?: pulumi.Input<boolean>;
    /**
     * Allow or prevent committers from self approving merge requests.
     */
    allowCommitterApproval?: pulumi.Input<boolean>;
    /**
     * Allow or prevent overriding approvers per merge request.
     */
    allowOverridesToApproverListPerMergeRequest?: pulumi.Input<boolean>;
    /**
     * The ID or URL-encoded path of the group.
     */
    group: pulumi.Input<string>;
    keepSettingsOnDestroy?: pulumi.Input<boolean>;
    /**
     * Require approver to authenticate before adding the approval.
     */
    requireReauthenticationToApprove?: pulumi.Input<boolean>;
    /**
     * Retain approval count on a new push.
     */
    retainApprovalsOnPush?: pulumi.Input<boolean>;
}
