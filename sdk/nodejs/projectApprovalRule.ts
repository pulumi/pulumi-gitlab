// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_approval_rule`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_approval_rule.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * GitLab project approval rules can be imported using a key composed of `<project-id>:<rule-id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/projectApprovalRule:ProjectApprovalRule example "12345:6"
 * ```
 */
export class ProjectApprovalRule extends pulumi.CustomResource {
    /**
     * Get an existing ProjectApprovalRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectApprovalRuleState, opts?: pulumi.CustomResourceOptions): ProjectApprovalRule {
        return new ProjectApprovalRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectApprovalRule:ProjectApprovalRule';

    /**
     * Returns true if the given object is an instance of ProjectApprovalRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectApprovalRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectApprovalRule.__pulumiType;
    }

    /**
     * Whether the rule is applied to all protected branches. If set to 'true', the value of `protectedBranchIds` is ignored. Default is 'false'.
     */
    declare public readonly appliesToAllProtectedBranches: pulumi.Output<boolean | undefined>;
    /**
     * The number of approvals required for this rule.
     */
    declare public readonly approvalsRequired: pulumi.Output<number>;
    /**
     * When this flag is set, the default `anyApprover` rule will not be imported if present.
     */
    declare public readonly disableImportingDefaultAnyApproverRuleOnCreate: pulumi.Output<boolean | undefined>;
    /**
     * A list of group IDs whose members can approve of the merge request.
     */
    declare public readonly groupIds: pulumi.Output<number[] | undefined>;
    /**
     * The name of the approval rule.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name or id of the project to add the approval rules.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * A list of protected branch IDs (not branch names) for which the rule applies.
     */
    declare public readonly protectedBranchIds: pulumi.Output<number[] | undefined>;
    /**
     * Report type is required when the ruleType is `reportApprover`. Valid values are `codeCoverage`.
     */
    declare public readonly reportType: pulumi.Output<string>;
    /**
     * String, defaults to 'regular'. The type of rule. `anyApprover` is a pre-configured default rule with `approvalsRequired` at `0`. Valid values are `regular`, `anyApprover`, `reportApprover`.
     */
    declare public readonly ruleType: pulumi.Output<string>;
    /**
     * A list of specific User IDs to add to the list of approvers.
     */
    declare public readonly userIds: pulumi.Output<number[] | undefined>;

    /**
     * Create a ProjectApprovalRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectApprovalRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectApprovalRuleArgs | ProjectApprovalRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectApprovalRuleState | undefined;
            resourceInputs["appliesToAllProtectedBranches"] = state?.appliesToAllProtectedBranches;
            resourceInputs["approvalsRequired"] = state?.approvalsRequired;
            resourceInputs["disableImportingDefaultAnyApproverRuleOnCreate"] = state?.disableImportingDefaultAnyApproverRuleOnCreate;
            resourceInputs["groupIds"] = state?.groupIds;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["protectedBranchIds"] = state?.protectedBranchIds;
            resourceInputs["reportType"] = state?.reportType;
            resourceInputs["ruleType"] = state?.ruleType;
            resourceInputs["userIds"] = state?.userIds;
        } else {
            const args = argsOrState as ProjectApprovalRuleArgs | undefined;
            if (args?.approvalsRequired === undefined && !opts.urn) {
                throw new Error("Missing required property 'approvalsRequired'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["appliesToAllProtectedBranches"] = args?.appliesToAllProtectedBranches;
            resourceInputs["approvalsRequired"] = args?.approvalsRequired;
            resourceInputs["disableImportingDefaultAnyApproverRuleOnCreate"] = args?.disableImportingDefaultAnyApproverRuleOnCreate;
            resourceInputs["groupIds"] = args?.groupIds;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["protectedBranchIds"] = args?.protectedBranchIds;
            resourceInputs["reportType"] = args?.reportType;
            resourceInputs["ruleType"] = args?.ruleType;
            resourceInputs["userIds"] = args?.userIds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectApprovalRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectApprovalRule resources.
 */
export interface ProjectApprovalRuleState {
    /**
     * Whether the rule is applied to all protected branches. If set to 'true', the value of `protectedBranchIds` is ignored. Default is 'false'.
     */
    appliesToAllProtectedBranches?: pulumi.Input<boolean>;
    /**
     * The number of approvals required for this rule.
     */
    approvalsRequired?: pulumi.Input<number>;
    /**
     * When this flag is set, the default `anyApprover` rule will not be imported if present.
     */
    disableImportingDefaultAnyApproverRuleOnCreate?: pulumi.Input<boolean>;
    /**
     * A list of group IDs whose members can approve of the merge request.
     */
    groupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the approval rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The name or id of the project to add the approval rules.
     */
    project?: pulumi.Input<string>;
    /**
     * A list of protected branch IDs (not branch names) for which the rule applies.
     */
    protectedBranchIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Report type is required when the ruleType is `reportApprover`. Valid values are `codeCoverage`.
     */
    reportType?: pulumi.Input<string>;
    /**
     * String, defaults to 'regular'. The type of rule. `anyApprover` is a pre-configured default rule with `approvalsRequired` at `0`. Valid values are `regular`, `anyApprover`, `reportApprover`.
     */
    ruleType?: pulumi.Input<string>;
    /**
     * A list of specific User IDs to add to the list of approvers.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ProjectApprovalRule resource.
 */
export interface ProjectApprovalRuleArgs {
    /**
     * Whether the rule is applied to all protected branches. If set to 'true', the value of `protectedBranchIds` is ignored. Default is 'false'.
     */
    appliesToAllProtectedBranches?: pulumi.Input<boolean>;
    /**
     * The number of approvals required for this rule.
     */
    approvalsRequired: pulumi.Input<number>;
    /**
     * When this flag is set, the default `anyApprover` rule will not be imported if present.
     */
    disableImportingDefaultAnyApproverRuleOnCreate?: pulumi.Input<boolean>;
    /**
     * A list of group IDs whose members can approve of the merge request.
     */
    groupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the approval rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The name or id of the project to add the approval rules.
     */
    project: pulumi.Input<string>;
    /**
     * A list of protected branch IDs (not branch names) for which the rule applies.
     */
    protectedBranchIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Report type is required when the ruleType is `reportApprover`. Valid values are `codeCoverage`.
     */
    reportType?: pulumi.Input<string>;
    /**
     * String, defaults to 'regular'. The type of rule. `anyApprover` is a pre-configured default rule with `approvalsRequired` at `0`. Valid values are `regular`, `anyApprover`, `reportApprover`.
     */
    ruleType?: pulumi.Input<string>;
    /**
     * A list of specific User IDs to add to the list of approvers.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}
