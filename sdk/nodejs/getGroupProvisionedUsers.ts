// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getGroupProvisionedUsers` data source retrieves details of the provisioned users in a given group.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
 */
export function getGroupProvisionedUsers(args: GetGroupProvisionedUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupProvisionedUsersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroupProvisionedUsers:getGroupProvisionedUsers", {
        "active": args.active,
        "blocked": args.blocked,
        "createdAfter": args.createdAfter,
        "createdBefore": args.createdBefore,
        "id": args.id,
        "provisionedUsers": args.provisionedUsers,
        "search": args.search,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupProvisionedUsers.
 */
export interface GetGroupProvisionedUsersArgs {
    /**
     * Return only active provisioned users.
     */
    active?: boolean;
    /**
     * Return only blocked provisioned users.
     */
    blocked?: boolean;
    /**
     * Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     */
    createdAfter?: string;
    /**
     * Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     */
    createdBefore?: string;
    /**
     * The ID or URL-encoded path of the group.
     */
    id: string;
    /**
     * The list of provisioned users.
     */
    provisionedUsers?: inputs.GetGroupProvisionedUsersProvisionedUser[];
    /**
     * The search query to filter the provisioned users.
     */
    search?: string;
    /**
     * The username of the provisioned user.
     */
    username?: string;
}

/**
 * A collection of values returned by getGroupProvisionedUsers.
 */
export interface GetGroupProvisionedUsersResult {
    /**
     * Return only active provisioned users.
     */
    readonly active?: boolean;
    /**
     * Return only blocked provisioned users.
     */
    readonly blocked?: boolean;
    /**
     * Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     */
    readonly createdAfter?: string;
    /**
     * Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     */
    readonly createdBefore?: string;
    /**
     * The ID or URL-encoded path of the group.
     */
    readonly id: string;
    /**
     * The list of provisioned users.
     */
    readonly provisionedUsers?: outputs.GetGroupProvisionedUsersProvisionedUser[];
    /**
     * The search query to filter the provisioned users.
     */
    readonly search?: string;
    /**
     * The username of the provisioned user.
     */
    readonly username?: string;
}
/**
 * The `gitlab.getGroupProvisionedUsers` data source retrieves details of the provisioned users in a given group.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/groups/#list-provisioned-users)
 */
export function getGroupProvisionedUsersOutput(args: GetGroupProvisionedUsersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGroupProvisionedUsersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getGroupProvisionedUsers:getGroupProvisionedUsers", {
        "active": args.active,
        "blocked": args.blocked,
        "createdAfter": args.createdAfter,
        "createdBefore": args.createdBefore,
        "id": args.id,
        "provisionedUsers": args.provisionedUsers,
        "search": args.search,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupProvisionedUsers.
 */
export interface GetGroupProvisionedUsersOutputArgs {
    /**
     * Return only active provisioned users.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Return only blocked provisioned users.
     */
    blocked?: pulumi.Input<boolean>;
    /**
     * Return only provisioned users created on or after the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     */
    createdAfter?: pulumi.Input<string>;
    /**
     * Return only provisioned users created on or before the specified date. Expected in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
     */
    createdBefore?: pulumi.Input<string>;
    /**
     * The ID or URL-encoded path of the group.
     */
    id: pulumi.Input<string>;
    /**
     * The list of provisioned users.
     */
    provisionedUsers?: pulumi.Input<pulumi.Input<inputs.GetGroupProvisionedUsersProvisionedUserArgs>[]>;
    /**
     * The search query to filter the provisioned users.
     */
    search?: pulumi.Input<string>;
    /**
     * The username of the provisioned user.
     */
    username?: pulumi.Input<string>;
}
