// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
 *
 * > Some attributes might not be returned depending on if you're an admin or not.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
 */
export function getUser(args?: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("gitlab:index/getUser:getUser", {
        "email": args.email,
        "userId": args.userId,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    email?: string;
    userId?: number;
    username?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly avatarUrl: string;
    readonly bio: string;
    readonly canCreateGroup: boolean;
    readonly canCreateProject: boolean;
    readonly colorSchemeId: number;
    readonly createdAt: string;
    readonly currentSignInAt: string;
    readonly email: string;
    readonly externUid: string;
    readonly external: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isAdmin: boolean;
    readonly lastSignInAt: string;
    readonly linkedin: string;
    readonly location: string;
    readonly name: string;
    readonly note: string;
    readonly organization: string;
    readonly projectsLimit: number;
    readonly skype: string;
    readonly state: string;
    readonly themeId: number;
    readonly twitter: string;
    readonly twoFactorEnabled: boolean;
    readonly userId: number;
    readonly userProvider: string;
    readonly username: string;
    readonly websiteUrl: string;
}

export function getUserOutput(args?: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply(a => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    email?: pulumi.Input<string>;
    userId?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}
