// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // By group's full path
 * const foo = pulumi.output(gitlab.getGroup({
 *     fullPath: "foo/bar",
 * }));
 * ```
 */
export function getGroup(args?: GetGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("gitlab:index/getGroup:getGroup", {
        "fullPath": args.fullPath,
        "groupId": args.groupId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupArgs {
    fullPath?: string;
    groupId?: number;
}

/**
 * A collection of values returned by getGroup.
 */
export interface GetGroupResult {
    readonly defaultBranchProtection: number;
    readonly description: string;
    readonly fullName: string;
    readonly fullPath: string;
    readonly groupId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lfsEnabled: boolean;
    readonly name: string;
    readonly parentId: number;
    readonly path: string;
    readonly preventForkingOutsideGroup: boolean;
    readonly requestAccessEnabled: boolean;
    readonly runnersToken: string;
    readonly visibilityLevel: string;
    readonly webUrl: string;
}

export function getGroupOutput(args?: GetGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupResult> {
    return pulumi.output(args).apply(a => getGroup(a, opts))
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupOutputArgs {
    fullPath?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
}
