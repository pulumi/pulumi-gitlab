// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectProtectedEnvironment` resource allows to manage the lifecycle of a protected environment in a project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_environments.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const thisGroup = new gitlab.Group("thisGroup", {
 *     path: "example",
 *     description: "An example group",
 * });
 * const thisProject = new gitlab.Project("thisProject", {
 *     namespaceId: thisGroup.id,
 *     initializeWithReadme: true,
 * });
 * const thisProjectEnvironment = new gitlab.ProjectEnvironment("thisProjectEnvironment", {
 *     project: thisProject.id,
 *     externalUrl: "www.example.com",
 * });
 * const thisProjectProtectedEnvironment = new gitlab.ProjectProtectedEnvironment("thisProjectProtectedEnvironment", {
 *     project: thisProject.id,
 *     environment: thisProjectEnvironment.name,
 *     deployAccessLevels: {
 *         accessLevel: "developer",
 *     },
 * });
 * const thisIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new gitlab.ProjectProtectedEnvironment("thisIndex/projectProtectedEnvironmentProjectProtectedEnvironment", {
 *     project: thisProject.id,
 *     environment: thisProjectEnvironment.name,
 *     deployAccessLevels: {
 *         groupId: gitlab_group.test.id,
 *     },
 * });
 * const thisGitlabIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new gitlab.ProjectProtectedEnvironment("thisGitlabIndex/projectProtectedEnvironmentProjectProtectedEnvironment", {
 *     project: thisProject.id,
 *     environment: thisProjectEnvironment.name,
 *     deployAccessLevels: {
 *         userId: gitlab_user.test.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * # GitLab protected environments can be imported using an id made up of `projectId:environmentName`, e.g.
 *
 * ```sh
 *  $ pulumi import gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment bar 123:production
 * ```
 */
export class ProjectProtectedEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing ProjectProtectedEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectProtectedEnvironmentState, opts?: pulumi.CustomResourceOptions): ProjectProtectedEnvironment {
        return new ProjectProtectedEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment';

    /**
     * Returns true if the given object is an instance of ProjectProtectedEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectProtectedEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectProtectedEnvironment.__pulumiType;
    }

    /**
     * Array of access levels allowed to deploy, with each described by a hash.
     */
    public readonly deployAccessLevels!: pulumi.Output<outputs.ProjectProtectedEnvironmentDeployAccessLevels>;
    /**
     * The name of the environment.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The ID or full path of the project which the protected environment is created against.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a ProjectProtectedEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectProtectedEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectProtectedEnvironmentArgs | ProjectProtectedEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectProtectedEnvironmentState | undefined;
            resourceInputs["deployAccessLevels"] = state ? state.deployAccessLevels : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as ProjectProtectedEnvironmentArgs | undefined;
            if ((!args || args.deployAccessLevels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployAccessLevels'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["deployAccessLevels"] = args ? args.deployAccessLevels : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectProtectedEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectProtectedEnvironment resources.
 */
export interface ProjectProtectedEnvironmentState {
    /**
     * Array of access levels allowed to deploy, with each described by a hash.
     */
    deployAccessLevels?: pulumi.Input<inputs.ProjectProtectedEnvironmentDeployAccessLevels>;
    /**
     * The name of the environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The ID or full path of the project which the protected environment is created against.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectProtectedEnvironment resource.
 */
export interface ProjectProtectedEnvironmentArgs {
    /**
     * Array of access levels allowed to deploy, with each described by a hash.
     */
    deployAccessLevels: pulumi.Input<inputs.ProjectProtectedEnvironmentDeployAccessLevels>;
    /**
     * The name of the environment.
     */
    environment: pulumi.Input<string>;
    /**
     * The ID or full path of the project which the protected environment is created against.
     */
    project: pulumi.Input<string>;
}
