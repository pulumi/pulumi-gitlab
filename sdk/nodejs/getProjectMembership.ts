// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
 *
 * > **Note** exactly one of projectId or fullPath must be provided.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = gitlab.getProjectMembership({
 *     inherited: true,
 *     projectId: 123,
 * });
 * ```
 */
export function getProjectMembership(args?: GetProjectMembershipArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectMembershipResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectMembership:getProjectMembership", {
        "fullPath": args.fullPath,
        "inherited": args.inherited,
        "projectId": args.projectId,
        "query": args.query,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectMembership.
 */
export interface GetProjectMembershipArgs {
    /**
     * The full path of the project.
     */
    fullPath?: string;
    /**
     * Return all project members including members through ancestor groups
     */
    inherited?: boolean;
    /**
     * The ID of the project.
     */
    projectId?: number;
    /**
     * A query string to search for members
     */
    query?: string;
}

/**
 * A collection of values returned by getProjectMembership.
 */
export interface GetProjectMembershipResult {
    /**
     * The full path of the project.
     */
    readonly fullPath: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Return all project members including members through ancestor groups
     */
    readonly inherited?: boolean;
    /**
     * The list of project members.
     */
    readonly members: outputs.GetProjectMembershipMember[];
    /**
     * The ID of the project.
     */
    readonly projectId: number;
    /**
     * A query string to search for members
     */
    readonly query?: string;
}
/**
 * The `gitlab.ProjectMembership` data source allows to list and filter all members of a project specified by either its id or full path.
 *
 * > **Note** exactly one of projectId or fullPath must be provided.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = gitlab.getProjectMembership({
 *     inherited: true,
 *     projectId: 123,
 * });
 * ```
 */
export function getProjectMembershipOutput(args?: GetProjectMembershipOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectMembershipResult> {
    return pulumi.output(args).apply((a: any) => getProjectMembership(a, opts))
}

/**
 * A collection of arguments for invoking getProjectMembership.
 */
export interface GetProjectMembershipOutputArgs {
    /**
     * The full path of the project.
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Return all project members including members through ancestor groups
     */
    inherited?: pulumi.Input<boolean>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<number>;
    /**
     * A query string to search for members
     */
    query?: pulumi.Input<string>;
}
