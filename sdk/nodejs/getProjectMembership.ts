// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
 */
export function getProjectMembership(args?: GetProjectMembershipArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectMembershipResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectMembership:getProjectMembership", {
        "fullPath": args.fullPath,
        "inherited": args.inherited,
        "project": args.project,
        "projectId": args.projectId,
        "query": args.query,
        "userIds": args.userIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectMembership.
 */
export interface GetProjectMembershipArgs {
    /**
     * The full path of the project.
     *
     * @deprecated Will be removed in 19.0. Use `project` instead.
     */
    fullPath?: string;
    /**
     * Return all project members including members through ancestor groups
     */
    inherited?: boolean;
    /**
     * The ID or full path of the project.
     */
    project?: string;
    /**
     * The ID of the project.
     *
     * @deprecated Will be removed in 19.0. Use `project` instead.
     */
    projectId?: number;
    /**
     * A query string to search for members
     */
    query?: string;
    /**
     * List of user ids to filter members by
     */
    userIds?: number[];
}

/**
 * A collection of values returned by getProjectMembership.
 */
export interface GetProjectMembershipResult {
    /**
     * The full path of the project.
     *
     * @deprecated Will be removed in 19.0. Use `project` instead.
     */
    readonly fullPath: string;
    /**
     * The ID of this datasource. In the format `<project:query-hash>` if query is set, otherwise `<project>`.
     */
    readonly id: string;
    /**
     * Return all project members including members through ancestor groups
     */
    readonly inherited?: boolean;
    /**
     * The list of project members.
     */
    readonly members: outputs.GetProjectMembershipMember[];
    /**
     * The ID or full path of the project.
     */
    readonly project: string;
    /**
     * The ID of the project.
     *
     * @deprecated Will be removed in 19.0. Use `project` instead.
     */
    readonly projectId: number;
    /**
     * A query string to search for members
     */
    readonly query?: string;
    /**
     * List of user ids to filter members by
     */
    readonly userIds?: number[];
}
/**
 * The `gitlab.ProjectMembership` data source allows you to list and filter all members of a project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/members/#list-all-members-of-a-group-or-project)
 */
export function getProjectMembershipOutput(args?: GetProjectMembershipOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectMembershipResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getProjectMembership:getProjectMembership", {
        "fullPath": args.fullPath,
        "inherited": args.inherited,
        "project": args.project,
        "projectId": args.projectId,
        "query": args.query,
        "userIds": args.userIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectMembership.
 */
export interface GetProjectMembershipOutputArgs {
    /**
     * The full path of the project.
     *
     * @deprecated Will be removed in 19.0. Use `project` instead.
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Return all project members including members through ancestor groups
     */
    inherited?: pulumi.Input<boolean>;
    /**
     * The ID or full path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID of the project.
     *
     * @deprecated Will be removed in 19.0. Use `project` instead.
     */
    projectId?: pulumi.Input<number>;
    /**
     * A query string to search for members
     */
    query?: pulumi.Input<string>;
    /**
     * List of user ids to filter members by
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}
