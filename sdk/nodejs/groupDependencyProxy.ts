// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.GroupDependencyProxy` resource allows managing the group docker dependency proxy. More than one dependency proxy per group will conflict with each other.
 *
 * If you're looking to manage the project-level package dependency proxy, see the `gitlabProjectPackageRegistryProxy` resource instead.
 *
 * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#mutationupdatedependencyproxysettings)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const foo = new gitlab.GroupDependencyProxy("foo", {
 *     group: "1234",
 *     enabled: true,
 *     identity: "newidentity",
 *     secret: "somesecret",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_group_dependency_proxy`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_group_dependency_proxy.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Import using the CLI is supported using the following syntax:
 *
 * You can import a group dependency proxy using the group id. e.g. `{group-id}`
 *
 * "secret" will not populate when importing the dependency proxy, but will still
 *
 * be required in the configuration.
 *
 * ```sh
 * $ pulumi import gitlab:index/groupDependencyProxy:GroupDependencyProxy foo 42
 * ```
 */
export class GroupDependencyProxy extends pulumi.CustomResource {
    /**
     * Get an existing GroupDependencyProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupDependencyProxyState, opts?: pulumi.CustomResourceOptions): GroupDependencyProxy {
        return new GroupDependencyProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupDependencyProxy:GroupDependencyProxy';

    /**
     * Returns true if the given object is an instance of GroupDependencyProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupDependencyProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupDependencyProxy.__pulumiType;
    }

    /**
     * Indicates whether the proxy is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID or URL-encoded path of the group.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
     */
    public readonly identity!: pulumi.Output<string>;
    /**
     * Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
     */
    public readonly secret!: pulumi.Output<string>;

    /**
     * Create a GroupDependencyProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupDependencyProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupDependencyProxyArgs | GroupDependencyProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupDependencyProxyState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as GroupDependencyProxyArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GroupDependencyProxy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupDependencyProxy resources.
 */
export interface GroupDependencyProxyState {
    /**
     * Indicates whether the proxy is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID or URL-encoded path of the group.
     */
    group?: pulumi.Input<string>;
    /**
     * Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
     */
    identity?: pulumi.Input<string>;
    /**
     * Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
     */
    secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupDependencyProxy resource.
 */
export interface GroupDependencyProxyArgs {
    /**
     * Indicates whether the proxy is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID or URL-encoded path of the group.
     */
    group: pulumi.Input<string>;
    /**
     * Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
     */
    identity?: pulumi.Input<string>;
    /**
     * Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
     */
    secret?: pulumi.Input<string>;
}
