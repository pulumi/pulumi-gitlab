// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#get-single-repository-branch)
 */
export function getBranch(args: GetBranchArgs, opts?: pulumi.InvokeOptions): Promise<GetBranchResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getBranch:getBranch", {
        "name": args.name,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getBranch.
 */
export interface GetBranchArgs {
    /**
     * The name of the branch.
     */
    name: string;
    /**
     * The full path or id of the project.
     */
    project: string;
}

/**
 * A collection of values returned by getBranch.
 */
export interface GetBranchResult {
    /**
     * Bool, true if you can push to the branch.
     */
    readonly canPush: boolean;
    /**
     * The commit associated with the branch ref.
     */
    readonly commits: outputs.GetBranchCommit[];
    /**
     * Bool, true if branch is the default branch for the project.
     */
    readonly default: boolean;
    /**
     * Bool, true if developer level access allows to merge branch.
     */
    readonly developerCanMerge: boolean;
    /**
     * Bool, true if developer level access allows git push.
     */
    readonly developerCanPush: boolean;
    /**
     * The ID of this datasource. In the format `<project:name>`.
     */
    readonly id: string;
    /**
     * Bool, true if the branch has been merged into its parent.
     */
    readonly merged: boolean;
    /**
     * The name of the branch.
     */
    readonly name: string;
    /**
     * The full path or id of the project.
     */
    readonly project: string;
    /**
     * Bool, true if branch has branch protection.
     */
    readonly protected: boolean;
    /**
     * The url of the created branch (https.)
     */
    readonly webUrl: string;
}
/**
 * The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/branches/#get-single-repository-branch)
 */
export function getBranchOutput(args: GetBranchOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetBranchResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getBranch:getBranch", {
        "name": args.name,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getBranch.
 */
export interface GetBranchOutputArgs {
    /**
     * The name of the branch.
     */
    name: pulumi.Input<string>;
    /**
     * The full path or id of the project.
     */
    project: pulumi.Input<string>;
}
