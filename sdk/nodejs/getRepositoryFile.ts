// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = pulumi.output(gitlab.getRepositoryFile({
 *     filePath: "README.md",
 *     project: "example",
 *     ref: "main",
 * }));
 * ```
 */
export function getRepositoryFile(args: GetRepositoryFileArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryFileResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("gitlab:index/getRepositoryFile:getRepositoryFile", {
        "filePath": args.filePath,
        "project": args.project,
        "ref": args.ref,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositoryFile.
 */
export interface GetRepositoryFileArgs {
    filePath: string;
    project: string;
    ref: string;
}

/**
 * A collection of values returned by getRepositoryFile.
 */
export interface GetRepositoryFileResult {
    readonly blobId: string;
    readonly commitId: string;
    readonly content: string;
    readonly contentSha256: string;
    readonly encoding: string;
    readonly fileName: string;
    readonly filePath: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lastCommitId: string;
    readonly project: string;
    readonly ref: string;
    readonly size: number;
}

export function getRepositoryFileOutput(args: GetRepositoryFileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryFileResult> {
    return pulumi.output(args).apply(a => getRepositoryFile(a, opts))
}

/**
 * A collection of arguments for invoking getRepositoryFile.
 */
export interface GetRepositoryFileOutputArgs {
    filePath: pulumi.Input<string>;
    project: pulumi.Input<string>;
    ref: pulumi.Input<string>;
}
