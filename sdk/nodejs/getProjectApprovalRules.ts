// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getProjectApprovalRules` data source retrieves all approval rules of a given project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_request_approvals/#list-all-approval-rules-for-a-project)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const byProjectId = gitlab.getProjectApprovalRules({
 *     project: "12345",
 * });
 * const byProjectPath = gitlab.getProjectApprovalRules({
 *     project: "my-group/my-project",
 * });
 * ```
 */
export function getProjectApprovalRules(args: GetProjectApprovalRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectApprovalRulesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectApprovalRules:getProjectApprovalRules", {
        "approvalRules": args.approvalRules,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectApprovalRules.
 */
export interface GetProjectApprovalRulesArgs {
    /**
     * A list of project approval rules, as defined below.
     */
    approvalRules?: inputs.GetProjectApprovalRulesApprovalRule[];
    /**
     * The ID or path with namespace that identifies the project.
     */
    project: string;
}

/**
 * A collection of values returned by getProjectApprovalRules.
 */
export interface GetProjectApprovalRulesResult {
    /**
     * A list of project approval rules, as defined below.
     */
    readonly approvalRules?: outputs.GetProjectApprovalRulesApprovalRule[];
    readonly id: string;
    /**
     * The ID or path with namespace that identifies the project.
     */
    readonly project: string;
}
/**
 * The `gitlab.getProjectApprovalRules` data source retrieves all approval rules of a given project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_request_approvals/#list-all-approval-rules-for-a-project)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const byProjectId = gitlab.getProjectApprovalRules({
 *     project: "12345",
 * });
 * const byProjectPath = gitlab.getProjectApprovalRules({
 *     project: "my-group/my-project",
 * });
 * ```
 */
export function getProjectApprovalRulesOutput(args: GetProjectApprovalRulesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectApprovalRulesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getProjectApprovalRules:getProjectApprovalRules", {
        "approvalRules": args.approvalRules,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectApprovalRules.
 */
export interface GetProjectApprovalRulesOutputArgs {
    /**
     * A list of project approval rules, as defined below.
     */
    approvalRules?: pulumi.Input<pulumi.Input<inputs.GetProjectApprovalRulesApprovalRuleArgs>[]>;
    /**
     * The ID or path with namespace that identifies the project.
     */
    project: pulumi.Input<string>;
}
