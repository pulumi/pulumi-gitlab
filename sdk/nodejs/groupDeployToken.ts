// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.GroupDeployToken` resource allows you to manage the lifecycle of deploy tokens on a group.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_tokens/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 * import * as std from "@pulumi/std";
 *
 * // Example Usage
 * const example = new gitlab.GroupDeployToken("example", {
 *     group: "example/deploying",
 *     name: "Example group deploy token",
 *     username: "example-username",
 *     expiresAt: "2020-03-14T00:00:00.000Z",
 *     scopes: [
 *         "read_repository",
 *         "read_registry",
 *     ],
 * });
 * const example_two = new gitlab.GroupDeployToken("example-two", {
 *     group: "12345678",
 *     name: "Example group deploy token expires in 24h",
 *     expiresAt: std.timestamp({}).then(invoke => std.timeadd({
 *         duration: invoke.result,
 *         timestamp: "24h",
 *     })).then(invoke => invoke.result),
 *     scopes: [
 *         "read_repository",
 *         "read_registry",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_deploy_token`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_group_deploy_token.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * GitLab group deploy tokens can be imported using an id made up of `{group_id}:{deploy_token_id}`.
 *
 * ```sh
 * $ pulumi import gitlab:index/groupDeployToken:GroupDeployToken group_token 1:4
 * ```
 *
 * Note: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 */
export class GroupDeployToken extends pulumi.CustomResource {
    /**
     * Get an existing GroupDeployToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupDeployTokenState, opts?: pulumi.CustomResourceOptions): GroupDeployToken {
        return new GroupDeployToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupDeployToken:GroupDeployToken';

    /**
     * Returns true if the given object is an instance of GroupDeployToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupDeployToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupDeployToken.__pulumiType;
    }

    /**
     * True if the token is expired.
     */
    declare public /*out*/ readonly expired: pulumi.Output<boolean>;
    /**
     * Time the token expires in RFC3339 format. Not set by default.
     */
    declare public readonly expiresAt: pulumi.Output<string>;
    /**
     * The Id or full path of the group.
     */
    declare public readonly group: pulumi.Output<string>;
    /**
     * A name to describe the deploy token with.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * True if the token is revoked.
     */
    declare public /*out*/ readonly revoked: pulumi.Output<boolean>;
    /**
     * The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
     */
    declare public readonly scopes: pulumi.Output<string[]>;
    /**
     * The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
     */
    declare public /*out*/ readonly token: pulumi.Output<string>;
    /**
     * A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     */
    declare public readonly username: pulumi.Output<string>;
    /**
     * Wether to validate if the expiration date is in the future.
     */
    declare public readonly validatePastExpirationDate: pulumi.Output<boolean>;

    /**
     * Create a GroupDeployToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupDeployTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupDeployTokenArgs | GroupDeployTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupDeployTokenState | undefined;
            resourceInputs["expired"] = state?.expired;
            resourceInputs["expiresAt"] = state?.expiresAt;
            resourceInputs["group"] = state?.group;
            resourceInputs["name"] = state?.name;
            resourceInputs["revoked"] = state?.revoked;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["token"] = state?.token;
            resourceInputs["username"] = state?.username;
            resourceInputs["validatePastExpirationDate"] = state?.validatePastExpirationDate;
        } else {
            const args = argsOrState as GroupDeployTokenArgs | undefined;
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if (args?.scopes === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["expiresAt"] = args?.expiresAt;
            resourceInputs["group"] = args?.group;
            resourceInputs["name"] = args?.name;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["username"] = args?.username;
            resourceInputs["validatePastExpirationDate"] = args?.validatePastExpirationDate;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["revoked"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GroupDeployToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupDeployToken resources.
 */
export interface GroupDeployTokenState {
    /**
     * True if the token is expired.
     */
    expired?: pulumi.Input<boolean>;
    /**
     * Time the token expires in RFC3339 format. Not set by default.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The Id or full path of the group.
     */
    group?: pulumi.Input<string>;
    /**
     * A name to describe the deploy token with.
     */
    name?: pulumi.Input<string>;
    /**
     * True if the token is revoked.
     */
    revoked?: pulumi.Input<boolean>;
    /**
     * The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
     */
    token?: pulumi.Input<string>;
    /**
     * A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     */
    username?: pulumi.Input<string>;
    /**
     * Wether to validate if the expiration date is in the future.
     */
    validatePastExpirationDate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GroupDeployToken resource.
 */
export interface GroupDeployTokenArgs {
    /**
     * Time the token expires in RFC3339 format. Not set by default.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The Id or full path of the group.
     */
    group: pulumi.Input<string>;
    /**
     * A name to describe the deploy token with.
     */
    name?: pulumi.Input<string>;
    /**
     * The scopes of the group deploy token. Valid values are: `readRepository`, `readRegistry`, `writeRegistry`, `readVirtualRegistry`, `writeVirtualRegistry`, `readPackageRegistry`, `writePackageRegistry`
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     */
    username?: pulumi.Input<string>;
    /**
     * Wether to validate if the expiration date is in the future.
     */
    validatePastExpirationDate?: pulumi.Input<boolean>;
}
