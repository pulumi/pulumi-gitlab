// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = pulumi.output(gitlab.getProject({
 *     id: "foo/bar/baz",
 * }));
 * ```
 */
export function getProject(args?: GetProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("gitlab:index/getProject:getProject", {
        "id": args.id,
        "pathWithNamespace": args.pathWithNamespace,
        "publicBuilds": args.publicBuilds,
    }, opts);
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectArgs {
    id?: string;
    pathWithNamespace?: string;
    publicBuilds?: boolean;
}

/**
 * A collection of values returned by getProject.
 */
export interface GetProjectResult {
    readonly analyticsAccessLevel: string;
    readonly archived: boolean;
    readonly autoCancelPendingPipelines: string;
    readonly autoDevopsDeployStrategy: string;
    readonly autoDevopsEnabled: boolean;
    readonly autocloseReferencedIssues: boolean;
    readonly buildGitStrategy: string;
    readonly buildTimeout: number;
    readonly buildsAccessLevel: string;
    readonly containerExpirationPolicies: outputs.GetProjectContainerExpirationPolicy[];
    readonly containerRegistryAccessLevel: string;
    readonly defaultBranch: string;
    readonly description: string;
    readonly emailsDisabled: boolean;
    readonly externalAuthorizationClassificationLabel: string;
    readonly forkingAccessLevel: string;
    readonly httpUrlToRepo: string;
    readonly id: string;
    readonly issuesAccessLevel: string;
    readonly issuesEnabled: boolean;
    readonly lfsEnabled: boolean;
    readonly mergeCommitTemplate: string;
    readonly mergePipelinesEnabled: boolean;
    readonly mergeRequestsAccessLevel: string;
    readonly mergeRequestsEnabled: boolean;
    readonly mergeTrainsEnabled: boolean;
    readonly name: string;
    readonly namespaceId: number;
    readonly operationsAccessLevel: string;
    readonly path: string;
    readonly pathWithNamespace: string;
    readonly pipelinesEnabled: boolean;
    readonly printingMergeRequestLinkEnabled: boolean;
    readonly publicBuilds?: boolean;
    readonly pushRules: outputs.GetProjectPushRules;
    readonly removeSourceBranchAfterMerge: boolean;
    readonly repositoryAccessLevel: string;
    readonly repositoryStorage: string;
    readonly requestAccessEnabled: boolean;
    readonly requirementsAccessLevel: string;
    readonly resolveOutdatedDiffDiscussions: boolean;
    readonly runnersToken: string;
    readonly securityAndComplianceAccessLevel: string;
    readonly snippetsAccessLevel: string;
    readonly snippetsEnabled: boolean;
    readonly squashCommitTemplate: string;
    readonly sshUrlToRepo: string;
    readonly topics: string[];
    readonly visibilityLevel: string;
    readonly webUrl: string;
    readonly wikiAccessLevel: string;
    readonly wikiEnabled: boolean;
}

export function getProjectOutput(args?: GetProjectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectResult> {
    return pulumi.output(args).apply(a => getProject(a, opts))
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectOutputArgs {
    id?: pulumi.Input<string>;
    pathWithNamespace?: pulumi.Input<string>;
    publicBuilds?: pulumi.Input<boolean>;
}
