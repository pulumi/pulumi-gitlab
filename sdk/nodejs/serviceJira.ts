// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceJira extends pulumi.CustomResource {
    /**
     * Get an existing ServiceJira resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceJiraState, opts?: pulumi.CustomResourceOptions): ServiceJira {
        return new ServiceJira(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/serviceJira:ServiceJira';

    /**
     * Returns true if the given object is an instance of ServiceJira.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceJira {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceJira.__pulumiType;
    }

    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * Enable comments inside Jira issues on each GitLab event (commit / merge request)
     */
    public readonly commentOnEventEnabled!: pulumi.Output<boolean>;
    /**
     * Enable notifications for commit events
     */
    public readonly commitEvents!: pulumi.Output<boolean>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
     */
    public readonly jiraIssueTransitionId!: pulumi.Output<string | undefined>;
    /**
     * Enable notifications for merge request events
     */
    public readonly mergeRequestsEvents!: pulumi.Output<boolean>;
    /**
     * The password of the user created to be used with GitLab/JIRA.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The short identifier for your JIRA project, all uppercase, e.g., PROJ.
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly title!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The username of the user created to be used with GitLab/JIRA.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ServiceJira resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceJiraArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceJiraArgs | ServiceJiraState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceJiraState | undefined;
            inputs["active"] = state ? state.active : undefined;
            inputs["commentOnEventEnabled"] = state ? state.commentOnEventEnabled : undefined;
            inputs["commitEvents"] = state ? state.commitEvents : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["jiraIssueTransitionId"] = state ? state.jiraIssueTransitionId : undefined;
            inputs["mergeRequestsEvents"] = state ? state.mergeRequestsEvents : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["projectKey"] = state ? state.projectKey : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ServiceJiraArgs | undefined;
            if (!args || args.password === undefined) {
                throw new Error("Missing required property 'password'");
            }
            if (!args || args.project === undefined) {
                throw new Error("Missing required property 'project'");
            }
            if (!args || args.url === undefined) {
                throw new Error("Missing required property 'url'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["commentOnEventEnabled"] = args ? args.commentOnEventEnabled : undefined;
            inputs["commitEvents"] = args ? args.commitEvents : undefined;
            inputs["jiraIssueTransitionId"] = args ? args.jiraIssueTransitionId : undefined;
            inputs["mergeRequestsEvents"] = args ? args.mergeRequestsEvents : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["projectKey"] = args ? args.projectKey : undefined;
            inputs["url"] = args ? args.url : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["active"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["title"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServiceJira.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceJira resources.
 */
export interface ServiceJiraState {
    readonly active?: pulumi.Input<boolean>;
    /**
     * Enable comments inside Jira issues on each GitLab event (commit / merge request)
     */
    readonly commentOnEventEnabled?: pulumi.Input<boolean>;
    /**
     * Enable notifications for commit events
     */
    readonly commitEvents?: pulumi.Input<boolean>;
    readonly createdAt?: pulumi.Input<string>;
    /**
     * The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
     */
    readonly jiraIssueTransitionId?: pulumi.Input<string>;
    /**
     * Enable notifications for merge request events
     */
    readonly mergeRequestsEvents?: pulumi.Input<boolean>;
    /**
     * The password of the user created to be used with GitLab/JIRA.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The short identifier for your JIRA project, all uppercase, e.g., PROJ.
     */
    readonly projectKey?: pulumi.Input<string>;
    readonly title?: pulumi.Input<string>;
    readonly updatedAt?: pulumi.Input<string>;
    /**
     * The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
     */
    readonly url?: pulumi.Input<string>;
    /**
     * The username of the user created to be used with GitLab/JIRA.
     */
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceJira resource.
 */
export interface ServiceJiraArgs {
    /**
     * Enable comments inside Jira issues on each GitLab event (commit / merge request)
     */
    readonly commentOnEventEnabled?: pulumi.Input<boolean>;
    /**
     * Enable notifications for commit events
     */
    readonly commitEvents?: pulumi.Input<boolean>;
    /**
     * The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
     */
    readonly jiraIssueTransitionId?: pulumi.Input<string>;
    /**
     * Enable notifications for merge request events
     */
    readonly mergeRequestsEvents?: pulumi.Input<boolean>;
    /**
     * The password of the user created to be used with GitLab/JIRA.
     */
    readonly password: pulumi.Input<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    readonly project: pulumi.Input<string>;
    /**
     * The short identifier for your JIRA project, all uppercase, e.g., PROJ.
     */
    readonly projectKey?: pulumi.Input<string>;
    /**
     * The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
     */
    readonly url: pulumi.Input<string>;
    /**
     * The username of the user created to be used with GitLab/JIRA.
     */
    readonly username: pulumi.Input<string>;
}
