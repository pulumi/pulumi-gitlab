// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlabAccessTokens` data source allows to retrieve all group-level access tokens.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const accessTokens = gitlab.getGroupAccessTokens({
 *     group: "my/example/group",
 * });
 * ```
 */
export function getGroupAccessTokens(args: GetGroupAccessTokensArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupAccessTokensResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroupAccessTokens:getGroupAccessTokens", {
        "group": args.group,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupAccessTokens.
 */
export interface GetGroupAccessTokensArgs {
    /**
     * The name or id of the group.
     */
    group: string;
}

/**
 * A collection of values returned by getGroupAccessTokens.
 */
export interface GetGroupAccessTokensResult {
    /**
     * The list of access tokens returned by the search
     */
    readonly accessTokens: outputs.GetGroupAccessTokensAccessToken[];
    /**
     * The name or id of the group.
     */
    readonly group: string;
    readonly id: string;
}
/**
 * The `gitlabAccessTokens` data source allows to retrieve all group-level access tokens.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_access_tokens/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const accessTokens = gitlab.getGroupAccessTokens({
 *     group: "my/example/group",
 * });
 * ```
 */
export function getGroupAccessTokensOutput(args: GetGroupAccessTokensOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGroupAccessTokensResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getGroupAccessTokens:getGroupAccessTokens", {
        "group": args.group,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupAccessTokens.
 */
export interface GetGroupAccessTokensOutputArgs {
    /**
     * The name or id of the group.
     */
    group: pulumi.Input<string>;
}
