// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.GroupServiceAccount` data source retrieves information about a gitlab service account for a group.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_service_accounts.html#list-service-account-users)
 */
export function getGroupServiceAccount(args: GetGroupServiceAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupServiceAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroupServiceAccount:getGroupServiceAccount", {
        "group": args.group,
        "name": args.name,
        "serviceAccountId": args.serviceAccountId,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupServiceAccount.
 */
export interface GetGroupServiceAccountArgs {
    /**
     * The ID or URL-encoded path of the target group. Must be a top-level group.
     */
    group: string;
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    name?: string;
    /**
     * The service account id.
     */
    serviceAccountId: string;
    /**
     * The username of the user. If not specified, it's automatically generated.
     */
    username?: string;
}

/**
 * A collection of values returned by getGroupServiceAccount.
 */
export interface GetGroupServiceAccountResult {
    /**
     * The ID or URL-encoded path of the target group. Must be a top-level group.
     */
    readonly group: string;
    readonly id: string;
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    readonly name?: string;
    /**
     * The service account id.
     */
    readonly serviceAccountId: string;
    /**
     * The username of the user. If not specified, it's automatically generated.
     */
    readonly username?: string;
}
/**
 * The `gitlab.GroupServiceAccount` data source retrieves information about a gitlab service account for a group.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_service_accounts.html#list-service-account-users)
 */
export function getGroupServiceAccountOutput(args: GetGroupServiceAccountOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGroupServiceAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getGroupServiceAccount:getGroupServiceAccount", {
        "group": args.group,
        "name": args.name,
        "serviceAccountId": args.serviceAccountId,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupServiceAccount.
 */
export interface GetGroupServiceAccountOutputArgs {
    /**
     * The ID or URL-encoded path of the target group. Must be a top-level group.
     */
    group: pulumi.Input<string>;
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    name?: pulumi.Input<string>;
    /**
     * The service account id.
     */
    serviceAccountId: pulumi.Input<string>;
    /**
     * The username of the user. If not specified, it's automatically generated.
     */
    username?: pulumi.Input<string>;
}
