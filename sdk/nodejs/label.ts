// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.Label` resource manages the lifecycle of a project label.
 *
 * > This resource is deprecated and will be removed in 19.0. Use `gitlab.ProjectLabel`instead.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/labels/#get-a-single-project-label)
 */
export class Label extends pulumi.CustomResource {
    /**
     * Get an existing Label resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LabelState, opts?: pulumi.CustomResourceOptions): Label {
        return new Label(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/label:Label';

    /**
     * Returns true if the given object is an instance of Label.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Label {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Label.__pulumiType;
    }

    /**
     * The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
     */
    declare public readonly color: pulumi.Output<string>;
    /**
     * Read-only, used by the provider to store the API response color. This is always in the 6-digit hex notation with leading '#' sign (e.g. #FFAABB). If `color` contains a color name, this attribute contains the hex notation equivalent. Otherwise, the value of this attribute is the same as `color`.
     */
    declare public /*out*/ readonly colorHex: pulumi.Output<string>;
    /**
     * The description of the label.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The id of the project label.
     */
    declare public /*out*/ readonly labelId: pulumi.Output<number>;
    /**
     * The name of the label.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name or id of the project to add the label to.
     */
    declare public readonly project: pulumi.Output<string>;

    /**
     * Create a Label resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LabelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LabelArgs | LabelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LabelState | undefined;
            resourceInputs["color"] = state?.color;
            resourceInputs["colorHex"] = state?.colorHex;
            resourceInputs["description"] = state?.description;
            resourceInputs["labelId"] = state?.labelId;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
        } else {
            const args = argsOrState as LabelArgs | undefined;
            if (args?.color === undefined && !opts.urn) {
                throw new Error("Missing required property 'color'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["color"] = args?.color;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["colorHex"] = undefined /*out*/;
            resourceInputs["labelId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Label.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Label resources.
 */
export interface LabelState {
    /**
     * The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
     */
    color?: pulumi.Input<string>;
    /**
     * Read-only, used by the provider to store the API response color. This is always in the 6-digit hex notation with leading '#' sign (e.g. #FFAABB). If `color` contains a color name, this attribute contains the hex notation equivalent. Otherwise, the value of this attribute is the same as `color`.
     */
    colorHex?: pulumi.Input<string>;
    /**
     * The description of the label.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of the project label.
     */
    labelId?: pulumi.Input<number>;
    /**
     * The name of the label.
     */
    name?: pulumi.Input<string>;
    /**
     * The name or id of the project to add the label to.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Label resource.
 */
export interface LabelArgs {
    /**
     * The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).
     */
    color: pulumi.Input<string>;
    /**
     * The description of the label.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the label.
     */
    name?: pulumi.Input<string>;
    /**
     * The name or id of the project to add the label to.
     */
    project: pulumi.Input<string>;
}
