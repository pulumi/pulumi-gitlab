// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectJobTokenScopes` resource allows to manage the CI/CD Job Token scopes in a project.
 * Any project not within the defined set in this attribute will be removed, which allows this resource to be used as an explicit deny.
 *
 * > Conflicts with the use of `gitlab.ProjectJobTokenScope` when used on the same project. Use one or the other to ensure the desired state.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_job_token_scopes.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const allowedSingleProject = new gitlab.ProjectJobTokenScopes("allowed_single_project", {
 *     project: "111",
 *     targetProjectIds: [123],
 * });
 * const allowedMultipleProject = new gitlab.ProjectJobTokenScopes("allowed_multiple_project", {
 *     project: "111",
 *     targetProjectIds: [
 *         123,
 *         456,
 *         789,
 *     ],
 * });
 * const allowedMultipleGroups = new gitlab.ProjectJobTokenScopes("allowed_multiple_groups", {
 *     projectId: 111,
 *     targetProjectIds: [],
 *     targetGroupIds: [
 *         321,
 *         654,
 *     ],
 * });
 * // This will remove all job token scopes, even if added outside of TF.
 * const explicitDeny = new gitlab.ProjectJobTokenScopes("explicit_deny", {
 *     project: "111",
 *     targetProjectIds: [],
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_job_token_scopes`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_job_token_scopes.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Import using the CLI is supported using the following syntax:
 *
 * GitLab project job token scopes can be imported using an id made up of just the `project_id`
 *
 * ```sh
 * $ pulumi import gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes bar 123
 * ```
 */
export class ProjectJobTokenScopes extends pulumi.CustomResource {
    /**
     * Get an existing ProjectJobTokenScopes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectJobTokenScopesState, opts?: pulumi.CustomResourceOptions): ProjectJobTokenScopes {
        return new ProjectJobTokenScopes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes';

    /**
     * Returns true if the given object is an instance of ProjectJobTokenScopes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectJobTokenScopes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectJobTokenScopes.__pulumiType;
    }

    /**
     * The ID or full path of the project.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The ID of the project.
     *
     * @deprecated `projectId` has been deprecated. Use `project` instead.
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * A set of group IDs that are in the CI/CD job token inbound allowlist.
     */
    public readonly targetGroupIds!: pulumi.Output<number[]>;
    /**
     * A set of project IDs that are in the CI/CD job token inbound allowlist.
     */
    public readonly targetProjectIds!: pulumi.Output<number[]>;

    /**
     * Create a ProjectJobTokenScopes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectJobTokenScopesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectJobTokenScopesArgs | ProjectJobTokenScopesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectJobTokenScopesState | undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["targetGroupIds"] = state ? state.targetGroupIds : undefined;
            resourceInputs["targetProjectIds"] = state ? state.targetProjectIds : undefined;
        } else {
            const args = argsOrState as ProjectJobTokenScopesArgs | undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["targetGroupIds"] = args ? args.targetGroupIds : undefined;
            resourceInputs["targetProjectIds"] = args ? args.targetProjectIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectJobTokenScopes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectJobTokenScopes resources.
 */
export interface ProjectJobTokenScopesState {
    /**
     * The ID or full path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID of the project.
     *
     * @deprecated `projectId` has been deprecated. Use `project` instead.
     */
    projectId?: pulumi.Input<number>;
    /**
     * A set of group IDs that are in the CI/CD job token inbound allowlist.
     */
    targetGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A set of project IDs that are in the CI/CD job token inbound allowlist.
     */
    targetProjectIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ProjectJobTokenScopes resource.
 */
export interface ProjectJobTokenScopesArgs {
    /**
     * The ID or full path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID of the project.
     *
     * @deprecated `projectId` has been deprecated. Use `project` instead.
     */
    projectId?: pulumi.Input<number>;
    /**
     * A set of group IDs that are in the CI/CD job token inbound allowlist.
     */
    targetGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A set of project IDs that are in the CI/CD job token inbound allowlist.
     */
    targetProjectIds?: pulumi.Input<pulumi.Input<number>[]>;
}
