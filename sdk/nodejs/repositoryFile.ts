// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 * import * as std from "@pulumi/std";
 *
 * const _this = new gitlab.Group("this", {
 *     name: "example",
 *     path: "example",
 *     description: "An example group",
 * });
 * const thisProject = new gitlab.Project("this", {
 *     name: "example",
 *     namespaceId: _this.id,
 *     initializeWithReadme: true,
 * });
 * const thisRepositoryFile = new gitlab.RepositoryFile("this", {
 *     project: thisProject.id,
 *     filePath: "meow.txt",
 *     branch: "main",
 *     encoding: "base64",
 *     content: std.base64encode({
 *         input: "Meow goes the cat",
 *     }).then(invoke => invoke.result),
 *     authorEmail: "terraform@example.com",
 *     authorName: "Terraform",
 *     commitMessage: "feature: add meow file",
 * });
 * const readme = new gitlab.RepositoryFile("readme", {
 *     project: thisProject.id,
 *     filePath: "readme.txt",
 *     branch: "main",
 *     encoding: "text",
 *     content: "Meow goes the cat",
 *     authorEmail: "terraform@example.com",
 *     authorName: "Terraform",
 *     commitMessage: "feature: add readme file",
 * });
 * const readmeForDogs = new gitlab.RepositoryFile("readme_for_dogs", {
 *     project: thisProject.id,
 *     filePath: "readme.txt",
 *     branch: "main",
 *     encoding: "text",
 *     content: "Bark goes the dog",
 *     authorEmail: "terraform@example.com",
 *     authorName: "Terraform",
 *     commitMessage: "feature: update readme file",
 *     overwriteOnCreate: true,
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_repository_file`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_repository_file.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * A Repository File can be imported using an id made up of `<project-id>:<branch-name>:<file-path>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/repositoryFile:RepositoryFile this 1:main:foo/bar.txt
 * ```
 */
export class RepositoryFile extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryFileState, opts?: pulumi.CustomResourceOptions): RepositoryFile {
        return new RepositoryFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/repositoryFile:RepositoryFile';

    /**
     * Returns true if the given object is an instance of RepositoryFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryFile.__pulumiType;
    }

    /**
     * Email of the commit author.
     */
    declare public readonly authorEmail: pulumi.Output<string | undefined>;
    /**
     * Name of the commit author.
     */
    declare public readonly authorName: pulumi.Output<string | undefined>;
    /**
     * The blob id.
     */
    declare public /*out*/ readonly blobId: pulumi.Output<string>;
    /**
     * Name of the branch to which to commit to.
     */
    declare public readonly branch: pulumi.Output<string>;
    /**
     * The commit id.
     */
    declare public /*out*/ readonly commitId: pulumi.Output<string>;
    /**
     * Commit message.
     */
    declare public readonly commitMessage: pulumi.Output<string | undefined>;
    /**
     * File content.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * File content sha256 digest.
     */
    declare public /*out*/ readonly contentSha256: pulumi.Output<string>;
    /**
     * Create commit message.
     */
    declare public readonly createCommitMessage: pulumi.Output<string | undefined>;
    /**
     * Delete Commit message.
     */
    declare public readonly deleteCommitMessage: pulumi.Output<string | undefined>;
    /**
     * The file content encoding. Valid values are: `base64`, `text`.
     */
    declare public readonly encoding: pulumi.Output<string>;
    /**
     * Enables or disables the execute flag on the file.
     */
    declare public readonly executeFilemode: pulumi.Output<boolean | undefined>;
    /**
     * The filename.
     */
    declare public /*out*/ readonly fileName: pulumi.Output<string>;
    /**
     * The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     */
    declare public readonly filePath: pulumi.Output<string>;
    /**
     * The last known commit id.
     */
    declare public /*out*/ readonly lastCommitId: pulumi.Output<string>;
    /**
     * Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
     */
    declare public readonly overwriteOnCreate: pulumi.Output<boolean | undefined>;
    /**
     * The name or ID of the project.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The name of branch, tag or commit.
     */
    declare public /*out*/ readonly ref: pulumi.Output<string>;
    /**
     * The file size.
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * Name of the branch to start the new commit from.
     */
    declare public readonly startBranch: pulumi.Output<string | undefined>;
    /**
     * Update commit message.
     */
    declare public readonly updateCommitMessage: pulumi.Output<string | undefined>;

    /**
     * Create a RepositoryFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryFileArgs | RepositoryFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryFileState | undefined;
            resourceInputs["authorEmail"] = state?.authorEmail;
            resourceInputs["authorName"] = state?.authorName;
            resourceInputs["blobId"] = state?.blobId;
            resourceInputs["branch"] = state?.branch;
            resourceInputs["commitId"] = state?.commitId;
            resourceInputs["commitMessage"] = state?.commitMessage;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentSha256"] = state?.contentSha256;
            resourceInputs["createCommitMessage"] = state?.createCommitMessage;
            resourceInputs["deleteCommitMessage"] = state?.deleteCommitMessage;
            resourceInputs["encoding"] = state?.encoding;
            resourceInputs["executeFilemode"] = state?.executeFilemode;
            resourceInputs["fileName"] = state?.fileName;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["lastCommitId"] = state?.lastCommitId;
            resourceInputs["overwriteOnCreate"] = state?.overwriteOnCreate;
            resourceInputs["project"] = state?.project;
            resourceInputs["ref"] = state?.ref;
            resourceInputs["size"] = state?.size;
            resourceInputs["startBranch"] = state?.startBranch;
            resourceInputs["updateCommitMessage"] = state?.updateCommitMessage;
        } else {
            const args = argsOrState as RepositoryFileArgs | undefined;
            if (args?.branch === undefined && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.encoding === undefined && !opts.urn) {
                throw new Error("Missing required property 'encoding'");
            }
            if (args?.filePath === undefined && !opts.urn) {
                throw new Error("Missing required property 'filePath'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["authorEmail"] = args?.authorEmail;
            resourceInputs["authorName"] = args?.authorName;
            resourceInputs["branch"] = args?.branch;
            resourceInputs["commitMessage"] = args?.commitMessage;
            resourceInputs["content"] = args?.content;
            resourceInputs["createCommitMessage"] = args?.createCommitMessage;
            resourceInputs["deleteCommitMessage"] = args?.deleteCommitMessage;
            resourceInputs["encoding"] = args?.encoding;
            resourceInputs["executeFilemode"] = args?.executeFilemode;
            resourceInputs["filePath"] = args?.filePath;
            resourceInputs["overwriteOnCreate"] = args?.overwriteOnCreate;
            resourceInputs["project"] = args?.project;
            resourceInputs["startBranch"] = args?.startBranch;
            resourceInputs["updateCommitMessage"] = args?.updateCommitMessage;
            resourceInputs["blobId"] = undefined /*out*/;
            resourceInputs["commitId"] = undefined /*out*/;
            resourceInputs["contentSha256"] = undefined /*out*/;
            resourceInputs["fileName"] = undefined /*out*/;
            resourceInputs["lastCommitId"] = undefined /*out*/;
            resourceInputs["ref"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositoryFile resources.
 */
export interface RepositoryFileState {
    /**
     * Email of the commit author.
     */
    authorEmail?: pulumi.Input<string>;
    /**
     * Name of the commit author.
     */
    authorName?: pulumi.Input<string>;
    /**
     * The blob id.
     */
    blobId?: pulumi.Input<string>;
    /**
     * Name of the branch to which to commit to.
     */
    branch?: pulumi.Input<string>;
    /**
     * The commit id.
     */
    commitId?: pulumi.Input<string>;
    /**
     * Commit message.
     */
    commitMessage?: pulumi.Input<string>;
    /**
     * File content.
     */
    content?: pulumi.Input<string>;
    /**
     * File content sha256 digest.
     */
    contentSha256?: pulumi.Input<string>;
    /**
     * Create commit message.
     */
    createCommitMessage?: pulumi.Input<string>;
    /**
     * Delete Commit message.
     */
    deleteCommitMessage?: pulumi.Input<string>;
    /**
     * The file content encoding. Valid values are: `base64`, `text`.
     */
    encoding?: pulumi.Input<string>;
    /**
     * Enables or disables the execute flag on the file.
     */
    executeFilemode?: pulumi.Input<boolean>;
    /**
     * The filename.
     */
    fileName?: pulumi.Input<string>;
    /**
     * The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     */
    filePath?: pulumi.Input<string>;
    /**
     * The last known commit id.
     */
    lastCommitId?: pulumi.Input<string>;
    /**
     * Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
     */
    overwriteOnCreate?: pulumi.Input<boolean>;
    /**
     * The name or ID of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of branch, tag or commit.
     */
    ref?: pulumi.Input<string>;
    /**
     * The file size.
     */
    size?: pulumi.Input<number>;
    /**
     * Name of the branch to start the new commit from.
     */
    startBranch?: pulumi.Input<string>;
    /**
     * Update commit message.
     */
    updateCommitMessage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryFile resource.
 */
export interface RepositoryFileArgs {
    /**
     * Email of the commit author.
     */
    authorEmail?: pulumi.Input<string>;
    /**
     * Name of the commit author.
     */
    authorName?: pulumi.Input<string>;
    /**
     * Name of the branch to which to commit to.
     */
    branch: pulumi.Input<string>;
    /**
     * Commit message.
     */
    commitMessage?: pulumi.Input<string>;
    /**
     * File content.
     */
    content: pulumi.Input<string>;
    /**
     * Create commit message.
     */
    createCommitMessage?: pulumi.Input<string>;
    /**
     * Delete Commit message.
     */
    deleteCommitMessage?: pulumi.Input<string>;
    /**
     * The file content encoding. Valid values are: `base64`, `text`.
     */
    encoding: pulumi.Input<string>;
    /**
     * Enables or disables the execute flag on the file.
     */
    executeFilemode?: pulumi.Input<boolean>;
    /**
     * The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
     */
    filePath: pulumi.Input<string>;
    /**
     * Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
     */
    overwriteOnCreate?: pulumi.Input<boolean>;
    /**
     * The name or ID of the project.
     */
    project: pulumi.Input<string>;
    /**
     * Name of the branch to start the new commit from.
     */
    startBranch?: pulumi.Input<string>;
    /**
     * Update commit message.
     */
    updateCommitMessage?: pulumi.Input<string>;
}
