// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectContainerRepositoryProtection` resource allows managing the lifecycle of a container repository protection rule.
 *
 * You can use a wildcard (*) to protect multiple container repositories with the same container protection rule.
 * You can apply several protection rules to the same container repository. A container repository is protected if at least one protection rule matches.
 *
 * **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/container_repository_protection_rules/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const _this = new gitlab.ProjectContainerRepositoryProtection("this", {
 *     project: "123",
 *     repositoryPathPattern: "my_namespace/project*",
 *     minimumAccessLevelForPush: "owner",
 *     minimumAccessLevelForDelete: "admin",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_container_repository_protection`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_container_repository_protection.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * GitLab project container repository protection rules can be imported using an id made up of `<project_id>:<protection_rule_id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection this 123:321
 * ```
 */
export class ProjectContainerRepositoryProtection extends pulumi.CustomResource {
    /**
     * Get an existing ProjectContainerRepositoryProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectContainerRepositoryProtectionState, opts?: pulumi.CustomResourceOptions): ProjectContainerRepositoryProtection {
        return new ProjectContainerRepositoryProtection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection';

    /**
     * Returns true if the given object is an instance of ProjectContainerRepositoryProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectContainerRepositoryProtection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectContainerRepositoryProtection.__pulumiType;
    }

    /**
     * Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimumAccessLevelForPush` is not set.
     */
    declare public readonly minimumAccessLevelForDelete: pulumi.Output<string | undefined>;
    /**
     * Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimumAccessLevelForDelete` is not set.
     */
    declare public readonly minimumAccessLevelForPush: pulumi.Output<string | undefined>;
    /**
     * ID or URL-encoded path of the project.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Unique ID of the protection rule.
     */
    declare public /*out*/ readonly protectionRuleId: pulumi.Output<number>;
    /**
     * Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project's full path
     */
    declare public readonly repositoryPathPattern: pulumi.Output<string>;

    /**
     * Create a ProjectContainerRepositoryProtection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectContainerRepositoryProtectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectContainerRepositoryProtectionArgs | ProjectContainerRepositoryProtectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectContainerRepositoryProtectionState | undefined;
            resourceInputs["minimumAccessLevelForDelete"] = state?.minimumAccessLevelForDelete;
            resourceInputs["minimumAccessLevelForPush"] = state?.minimumAccessLevelForPush;
            resourceInputs["project"] = state?.project;
            resourceInputs["protectionRuleId"] = state?.protectionRuleId;
            resourceInputs["repositoryPathPattern"] = state?.repositoryPathPattern;
        } else {
            const args = argsOrState as ProjectContainerRepositoryProtectionArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.repositoryPathPattern === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryPathPattern'");
            }
            resourceInputs["minimumAccessLevelForDelete"] = args?.minimumAccessLevelForDelete;
            resourceInputs["minimumAccessLevelForPush"] = args?.minimumAccessLevelForPush;
            resourceInputs["project"] = args?.project;
            resourceInputs["repositoryPathPattern"] = args?.repositoryPathPattern;
            resourceInputs["protectionRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectContainerRepositoryProtection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectContainerRepositoryProtection resources.
 */
export interface ProjectContainerRepositoryProtectionState {
    /**
     * Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimumAccessLevelForPush` is not set.
     */
    minimumAccessLevelForDelete?: pulumi.Input<string>;
    /**
     * Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimumAccessLevelForDelete` is not set.
     */
    minimumAccessLevelForPush?: pulumi.Input<string>;
    /**
     * ID or URL-encoded path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * Unique ID of the protection rule.
     */
    protectionRuleId?: pulumi.Input<number>;
    /**
     * Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project's full path
     */
    repositoryPathPattern?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectContainerRepositoryProtection resource.
 */
export interface ProjectContainerRepositoryProtectionArgs {
    /**
     * Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimumAccessLevelForPush` is not set.
     */
    minimumAccessLevelForDelete?: pulumi.Input<string>;
    /**
     * Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimumAccessLevelForDelete` is not set.
     */
    minimumAccessLevelForPush?: pulumi.Input<string>;
    /**
     * ID or URL-encoded path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project's full path
     */
    repositoryPathPattern: pulumi.Input<string>;
}
