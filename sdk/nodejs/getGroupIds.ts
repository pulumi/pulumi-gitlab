// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
 *
 * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const newGroup = new gitlab.Group("new_group", {});
 * // use group IDs to get additional information, such as the GraphQL ID
 * // for other resources
 * const foo = gitlab.getGroupIds({
 *     group: "gitlab_group.new_group.id",
 * });
 * export const graphQLId = foo.then(foo => foo.groupGraphqlId);
 * ```
 */
export function getGroupIds(args: GetGroupIdsArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupIdsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroupIds:getGroupIds", {
        "group": args.group,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupIds.
 */
export interface GetGroupIdsArgs {
    /**
     * The ID or URL-encoded path of the group.
     */
    group: string;
}

/**
 * A collection of values returned by getGroupIds.
 */
export interface GetGroupIdsResult {
    /**
     * The ID or URL-encoded path of the group.
     */
    readonly group: string;
    /**
     * The full path of the group.
     */
    readonly groupFullPath: string;
    /**
     * The GraphQL ID of the group.
     */
    readonly groupGraphqlId: string;
    /**
     * The ID of the group.
     */
    readonly groupId: string;
    readonly id: string;
}
/**
 * The `gitlab.getGroupIds` data source identification information for a given group, allowing a user to translate a full path or ID into the GraphQL ID of the group.
 *
 * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#querygroup)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const newGroup = new gitlab.Group("new_group", {});
 * // use group IDs to get additional information, such as the GraphQL ID
 * // for other resources
 * const foo = gitlab.getGroupIds({
 *     group: "gitlab_group.new_group.id",
 * });
 * export const graphQLId = foo.then(foo => foo.groupGraphqlId);
 * ```
 */
export function getGroupIdsOutput(args: GetGroupIdsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGroupIdsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getGroupIds:getGroupIds", {
        "group": args.group,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupIds.
 */
export interface GetGroupIdsOutputArgs {
    /**
     * The ID or URL-encoded path of the group.
     */
    group: pulumi.Input<string>;
}
