// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectIssueBoard` resource allows to manage the lifecycle of a Project Issue Board.
 *
 * > **NOTE:** If the board lists are changed all lists will be recreated.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/boards.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const exampleProject = new gitlab.Project("exampleProject", {
 *     description: "Lorem Ipsum",
 *     visibilityLevel: "public",
 * });
 * const exampleUser = new gitlab.User("exampleUser", {
 *     username: "example",
 *     email: "example@example.com",
 *     password: "example1$$$",
 * });
 * const exampleProjectMembership = new gitlab.ProjectMembership("exampleProjectMembership", {
 *     projectId: exampleProject.id,
 *     userId: exampleUser.id,
 *     accessLevel: "developer",
 * });
 * const exampleProjectMilestone = new gitlab.ProjectMilestone("exampleProjectMilestone", {
 *     project: exampleProject.id,
 *     title: "m1",
 * });
 * const _this = new gitlab.ProjectIssueBoard("this", {
 *     project: exampleProject.id,
 *     lists: [
 *         {
 *             assigneeId: exampleUser.id,
 *         },
 *         {
 *             milestoneId: exampleProjectMilestone.milestoneId,
 *         },
 *     ],
 * }, {
 *     dependsOn: [exampleProjectMembership],
 * });
 * const listSyntax = new gitlab.ProjectIssueBoard("listSyntax", {
 *     project: exampleProject.id,
 *     lists: [
 *         {
 *             assigneeId: exampleUser.id,
 *         },
 *         {
 *             milestoneId: exampleProjectMilestone.milestoneId,
 *         },
 *     ],
 * }, {
 *     dependsOn: [exampleProjectMembership],
 * });
 * ```
 *
 * ## Import
 *
 * You can import this resource with an id made up of `{project-id}:{issue-board-id}`, e.g.
 *
 * ```sh
 *  $ pulumi import gitlab:index/projectIssueBoard:ProjectIssueBoard kanban 42:1
 * ```
 */
export class ProjectIssueBoard extends pulumi.CustomResource {
    /**
     * Get an existing ProjectIssueBoard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectIssueBoardState, opts?: pulumi.CustomResourceOptions): ProjectIssueBoard {
        return new ProjectIssueBoard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectIssueBoard:ProjectIssueBoard';

    /**
     * Returns true if the given object is an instance of ProjectIssueBoard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectIssueBoard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectIssueBoard.__pulumiType;
    }

    /**
     * The assignee the board should be scoped to. Requires a GitLab EE license.
     */
    public readonly assigneeId!: pulumi.Output<number | undefined>;
    /**
     * The list of label names which the board should be scoped to. Requires a GitLab EE license.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The list of issue board lists
     */
    public readonly lists!: pulumi.Output<outputs.ProjectIssueBoardList[] | undefined>;
    /**
     * The milestone the board should be scoped to. Requires a GitLab EE license.
     */
    public readonly milestoneId!: pulumi.Output<number | undefined>;
    /**
     * The name of the board.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID or full path of the project maintained by the authenticated user.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a ProjectIssueBoard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectIssueBoardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectIssueBoardArgs | ProjectIssueBoardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectIssueBoardState | undefined;
            resourceInputs["assigneeId"] = state ? state.assigneeId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lists"] = state ? state.lists : undefined;
            resourceInputs["milestoneId"] = state ? state.milestoneId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as ProjectIssueBoardArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["assigneeId"] = args ? args.assigneeId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lists"] = args ? args.lists : undefined;
            resourceInputs["milestoneId"] = args ? args.milestoneId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectIssueBoard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectIssueBoard resources.
 */
export interface ProjectIssueBoardState {
    /**
     * The assignee the board should be scoped to. Requires a GitLab EE license.
     */
    assigneeId?: pulumi.Input<number>;
    /**
     * The list of label names which the board should be scoped to. Requires a GitLab EE license.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of issue board lists
     */
    lists?: pulumi.Input<pulumi.Input<inputs.ProjectIssueBoardList>[]>;
    /**
     * The milestone the board should be scoped to. Requires a GitLab EE license.
     */
    milestoneId?: pulumi.Input<number>;
    /**
     * The name of the board.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project maintained by the authenticated user.
     */
    project?: pulumi.Input<string>;
    /**
     * The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ProjectIssueBoard resource.
 */
export interface ProjectIssueBoardArgs {
    /**
     * The assignee the board should be scoped to. Requires a GitLab EE license.
     */
    assigneeId?: pulumi.Input<number>;
    /**
     * The list of label names which the board should be scoped to. Requires a GitLab EE license.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of issue board lists
     */
    lists?: pulumi.Input<pulumi.Input<inputs.ProjectIssueBoardList>[]>;
    /**
     * The milestone the board should be scoped to. Requires a GitLab EE license.
     */
    milestoneId?: pulumi.Input<number>;
    /**
     * The name of the board.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project maintained by the authenticated user.
     */
    project: pulumi.Input<string>;
    /**
     * The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
     */
    weight?: pulumi.Input<number>;
}
