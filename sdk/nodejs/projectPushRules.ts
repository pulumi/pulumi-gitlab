// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const sample = new gitlab.ProjectPushRules("sample", {
 *     project: "42",
 *     authorEmailRegex: "@gitlab.com$",
 *     branchNameRegex: "(feat|fix)\\/*",
 *     commitCommitterCheck: true,
 *     commitCommitterNameCheck: true,
 *     commitMessageNegativeRegex: "ssh\\:\\/\\/",
 *     commitMessageRegex: "(feat|fix):.*",
 *     denyDeleteTag: false,
 *     fileNameRegex: "(jar|exe)$",
 *     maxFileSize: 4,
 *     memberCheck: true,
 *     preventSecrets: true,
 *     rejectUnsignedCommits: false,
 * });
 * ```
 *
 * ## Import
 *
 * Gitlab project push rules can be imported with a key composed of `<project_id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/projectPushRules:ProjectPushRules sample "42"
 * ```
 */
export class ProjectPushRules extends pulumi.CustomResource {
    /**
     * Get an existing ProjectPushRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectPushRulesState, opts?: pulumi.CustomResourceOptions): ProjectPushRules {
        return new ProjectPushRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectPushRules:ProjectPushRules';

    /**
     * Returns true if the given object is an instance of ProjectPushRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectPushRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectPushRules.__pulumiType;
    }

    /**
     * All commit author emails must match this regex, e.g. `@my-company.com$`.
     */
    public readonly authorEmailRegex!: pulumi.Output<string>;
    /**
     * All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     */
    public readonly branchNameRegex!: pulumi.Output<string>;
    /**
     * Users can only push commits to this repository that were committed with one of their own verified emails.
     */
    public readonly commitCommitterCheck!: pulumi.Output<boolean>;
    /**
     * Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
     */
    public readonly commitCommitterNameCheck!: pulumi.Output<boolean>;
    /**
     * No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
     */
    public readonly commitMessageNegativeRegex!: pulumi.Output<string>;
    /**
     * All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     */
    public readonly commitMessageRegex!: pulumi.Output<string>;
    /**
     * Deny deleting a tag.
     */
    public readonly denyDeleteTag!: pulumi.Output<boolean>;
    /**
     * All committed filenames must not match this regex, e.g. `(jar|exe)$`.
     */
    public readonly fileNameRegex!: pulumi.Output<string>;
    /**
     * Maximum file size (MB).
     */
    public readonly maxFileSize!: pulumi.Output<number>;
    /**
     * Restrict commits by author (email) to existing GitLab users.
     */
    public readonly memberCheck!: pulumi.Output<boolean>;
    /**
     * GitLab will reject any files that are likely to contain secrets.
     */
    public readonly preventSecrets!: pulumi.Output<boolean>;
    /**
     * The ID or URL-encoded path of the project.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Reject commit when it’s not signed.
     */
    public readonly rejectUnsignedCommits!: pulumi.Output<boolean>;

    /**
     * Create a ProjectPushRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectPushRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectPushRulesArgs | ProjectPushRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectPushRulesState | undefined;
            resourceInputs["authorEmailRegex"] = state ? state.authorEmailRegex : undefined;
            resourceInputs["branchNameRegex"] = state ? state.branchNameRegex : undefined;
            resourceInputs["commitCommitterCheck"] = state ? state.commitCommitterCheck : undefined;
            resourceInputs["commitCommitterNameCheck"] = state ? state.commitCommitterNameCheck : undefined;
            resourceInputs["commitMessageNegativeRegex"] = state ? state.commitMessageNegativeRegex : undefined;
            resourceInputs["commitMessageRegex"] = state ? state.commitMessageRegex : undefined;
            resourceInputs["denyDeleteTag"] = state ? state.denyDeleteTag : undefined;
            resourceInputs["fileNameRegex"] = state ? state.fileNameRegex : undefined;
            resourceInputs["maxFileSize"] = state ? state.maxFileSize : undefined;
            resourceInputs["memberCheck"] = state ? state.memberCheck : undefined;
            resourceInputs["preventSecrets"] = state ? state.preventSecrets : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["rejectUnsignedCommits"] = state ? state.rejectUnsignedCommits : undefined;
        } else {
            const args = argsOrState as ProjectPushRulesArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["authorEmailRegex"] = args ? args.authorEmailRegex : undefined;
            resourceInputs["branchNameRegex"] = args ? args.branchNameRegex : undefined;
            resourceInputs["commitCommitterCheck"] = args ? args.commitCommitterCheck : undefined;
            resourceInputs["commitCommitterNameCheck"] = args ? args.commitCommitterNameCheck : undefined;
            resourceInputs["commitMessageNegativeRegex"] = args ? args.commitMessageNegativeRegex : undefined;
            resourceInputs["commitMessageRegex"] = args ? args.commitMessageRegex : undefined;
            resourceInputs["denyDeleteTag"] = args ? args.denyDeleteTag : undefined;
            resourceInputs["fileNameRegex"] = args ? args.fileNameRegex : undefined;
            resourceInputs["maxFileSize"] = args ? args.maxFileSize : undefined;
            resourceInputs["memberCheck"] = args ? args.memberCheck : undefined;
            resourceInputs["preventSecrets"] = args ? args.preventSecrets : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rejectUnsignedCommits"] = args ? args.rejectUnsignedCommits : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectPushRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectPushRules resources.
 */
export interface ProjectPushRulesState {
    /**
     * All commit author emails must match this regex, e.g. `@my-company.com$`.
     */
    authorEmailRegex?: pulumi.Input<string>;
    /**
     * All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     */
    branchNameRegex?: pulumi.Input<string>;
    /**
     * Users can only push commits to this repository that were committed with one of their own verified emails.
     */
    commitCommitterCheck?: pulumi.Input<boolean>;
    /**
     * Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
     */
    commitCommitterNameCheck?: pulumi.Input<boolean>;
    /**
     * No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
     */
    commitMessageNegativeRegex?: pulumi.Input<string>;
    /**
     * All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     */
    commitMessageRegex?: pulumi.Input<string>;
    /**
     * Deny deleting a tag.
     */
    denyDeleteTag?: pulumi.Input<boolean>;
    /**
     * All committed filenames must not match this regex, e.g. `(jar|exe)$`.
     */
    fileNameRegex?: pulumi.Input<string>;
    /**
     * Maximum file size (MB).
     */
    maxFileSize?: pulumi.Input<number>;
    /**
     * Restrict commits by author (email) to existing GitLab users.
     */
    memberCheck?: pulumi.Input<boolean>;
    /**
     * GitLab will reject any files that are likely to contain secrets.
     */
    preventSecrets?: pulumi.Input<boolean>;
    /**
     * The ID or URL-encoded path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * Reject commit when it’s not signed.
     */
    rejectUnsignedCommits?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ProjectPushRules resource.
 */
export interface ProjectPushRulesArgs {
    /**
     * All commit author emails must match this regex, e.g. `@my-company.com$`.
     */
    authorEmailRegex?: pulumi.Input<string>;
    /**
     * All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
     */
    branchNameRegex?: pulumi.Input<string>;
    /**
     * Users can only push commits to this repository that were committed with one of their own verified emails.
     */
    commitCommitterCheck?: pulumi.Input<boolean>;
    /**
     * Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
     */
    commitCommitterNameCheck?: pulumi.Input<boolean>;
    /**
     * No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
     */
    commitMessageNegativeRegex?: pulumi.Input<string>;
    /**
     * All commit messages must match this regex, e.g. `Fixed \d+\..*`.
     */
    commitMessageRegex?: pulumi.Input<string>;
    /**
     * Deny deleting a tag.
     */
    denyDeleteTag?: pulumi.Input<boolean>;
    /**
     * All committed filenames must not match this regex, e.g. `(jar|exe)$`.
     */
    fileNameRegex?: pulumi.Input<string>;
    /**
     * Maximum file size (MB).
     */
    maxFileSize?: pulumi.Input<number>;
    /**
     * Restrict commits by author (email) to existing GitLab users.
     */
    memberCheck?: pulumi.Input<boolean>;
    /**
     * GitLab will reject any files that are likely to contain secrets.
     */
    preventSecrets?: pulumi.Input<boolean>;
    /**
     * The ID or URL-encoded path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * Reject commit when it’s not signed.
     */
    rejectUnsignedCommits?: pulumi.Input<boolean>;
}
