// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ReleaseLink` resource allows to manage the lifecycle of a release link.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/links/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // Create a project
 * const example = new gitlab.Project("example", {
 *     name: "example",
 *     description: "An example project",
 * });
 * // Can create release link only to a tag associated with a release
 * const exampleReleaseLink = new gitlab.ReleaseLink("example", {
 *     project: example.id,
 *     tagName: "tag_name_associated_with_release",
 *     name: "test",
 *     url: "https://test/",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_release_link`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_release_link.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * Gitlab release link can be imported with a key composed of `<project>:<tag_name>:<link_id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/releaseLink:ReleaseLink example "12345:test:2"
 * ```
 */
export class ReleaseLink extends pulumi.CustomResource {
    /**
     * Get an existing ReleaseLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseLinkState, opts?: pulumi.CustomResourceOptions): ReleaseLink {
        return new ReleaseLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/releaseLink:ReleaseLink';

    /**
     * Returns true if the given object is an instance of ReleaseLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReleaseLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReleaseLink.__pulumiType;
    }

    /**
     * Full path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     */
    declare public /*out*/ readonly directAssetUrl: pulumi.Output<string>;
    /**
     * External or internal link.
     */
    declare public /*out*/ readonly external: pulumi.Output<boolean>;
    /**
     * Relative path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     */
    declare public readonly filepath: pulumi.Output<string | undefined>;
    /**
     * The ID of the link.
     */
    declare public /*out*/ readonly linkId: pulumi.Output<number>;
    /**
     * The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
     */
    declare public readonly linkType: pulumi.Output<string | undefined>;
    /**
     * The name of the link. Link names must be unique within the release.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding).
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The tag associated with the Release.
     */
    declare public readonly tagName: pulumi.Output<string>;
    /**
     * The URL of the link. Link URLs must be unique within the release.
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a ReleaseLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseLinkArgs | ReleaseLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseLinkState | undefined;
            resourceInputs["directAssetUrl"] = state?.directAssetUrl;
            resourceInputs["external"] = state?.external;
            resourceInputs["filepath"] = state?.filepath;
            resourceInputs["linkId"] = state?.linkId;
            resourceInputs["linkType"] = state?.linkType;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["tagName"] = state?.tagName;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as ReleaseLinkArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.tagName === undefined && !opts.urn) {
                throw new Error("Missing required property 'tagName'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["filepath"] = args?.filepath;
            resourceInputs["linkType"] = args?.linkType;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["tagName"] = args?.tagName;
            resourceInputs["url"] = args?.url;
            resourceInputs["directAssetUrl"] = undefined /*out*/;
            resourceInputs["external"] = undefined /*out*/;
            resourceInputs["linkId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReleaseLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReleaseLink resources.
 */
export interface ReleaseLinkState {
    /**
     * Full path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     */
    directAssetUrl?: pulumi.Input<string>;
    /**
     * External or internal link.
     */
    external?: pulumi.Input<boolean>;
    /**
     * Relative path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     */
    filepath?: pulumi.Input<string>;
    /**
     * The ID of the link.
     */
    linkId?: pulumi.Input<number>;
    /**
     * The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
     */
    linkType?: pulumi.Input<string>;
    /**
     * The name of the link. Link names must be unique within the release.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding).
     */
    project?: pulumi.Input<string>;
    /**
     * The tag associated with the Release.
     */
    tagName?: pulumi.Input<string>;
    /**
     * The URL of the link. Link URLs must be unique within the release.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReleaseLink resource.
 */
export interface ReleaseLinkArgs {
    /**
     * Relative path for a [Direct Asset link](https://docs.gitlab.com/user/project/releases/index/#permanent-links-to-release-assets).
     */
    filepath?: pulumi.Input<string>;
    /**
     * The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
     */
    linkType?: pulumi.Input<string>;
    /**
     * The name of the link. Link names must be unique within the release.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding).
     */
    project: pulumi.Input<string>;
    /**
     * The tag associated with the Release.
     */
    tagName: pulumi.Input<string>;
    /**
     * The URL of the link. Link URLs must be unique within the release.
     */
    url: pulumi.Input<string>;
}
