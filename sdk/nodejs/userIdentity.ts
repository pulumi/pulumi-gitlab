// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.UserIdentity` resource is for managing the lifecycle of a user's external identity.
 *
 * > the provider needs to be configured with admin-level access for this resource to work.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = new gitlab.User("example", {
 *     name: "Example Foo",
 *     username: "example",
 *     email: "gitlab@user.create",
 *     isAdmin: true,
 *     projectsLimit: 4,
 *     canCreateGroup: false,
 *     isExternal: true,
 * });
 * const exampleUserIdentity = new gitlab.UserIdentity("example", {
 *     userId: example.id,
 *     externalProvider: "google",
 *     externalUid: "1234567890",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_user_identity`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_user_identity.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/userIdentity:UserIdentity You can import a user identity to terraform state using `<resource> <id>`.
 * ```
 *
 * The `id` must be a string for the id of the user and identity provider you want to import,
 *
 * for example:
 *
 * ```sh
 * $ pulumi import gitlab:index/userIdentity:UserIdentity example "42:google"
 * ```
 */
export class UserIdentity extends pulumi.CustomResource {
    /**
     * Get an existing UserIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserIdentityState, opts?: pulumi.CustomResourceOptions): UserIdentity {
        return new UserIdentity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/userIdentity:UserIdentity';

    /**
     * Returns true if the given object is an instance of UserIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserIdentity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserIdentity.__pulumiType;
    }

    /**
     * The external provider name.
     */
    declare public readonly externalProvider: pulumi.Output<string>;
    /**
     * A specific external authentication provider UID.
     */
    declare public readonly externalUid: pulumi.Output<string>;
    /**
     * The GitLab ID of the user.
     */
    declare public readonly userId: pulumi.Output<number>;

    /**
     * Create a UserIdentity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserIdentityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserIdentityArgs | UserIdentityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserIdentityState | undefined;
            resourceInputs["externalProvider"] = state?.externalProvider;
            resourceInputs["externalUid"] = state?.externalUid;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as UserIdentityArgs | undefined;
            if (args?.externalProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalProvider'");
            }
            if (args?.externalUid === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalUid'");
            }
            if (args?.userId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["externalProvider"] = args?.externalProvider;
            resourceInputs["externalUid"] = args?.externalUid;
            resourceInputs["userId"] = args?.userId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserIdentity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserIdentity resources.
 */
export interface UserIdentityState {
    /**
     * The external provider name.
     */
    externalProvider?: pulumi.Input<string>;
    /**
     * A specific external authentication provider UID.
     */
    externalUid?: pulumi.Input<string>;
    /**
     * The GitLab ID of the user.
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a UserIdentity resource.
 */
export interface UserIdentityArgs {
    /**
     * The external provider name.
     */
    externalProvider: pulumi.Input<string>;
    /**
     * A specific external authentication provider UID.
     */
    externalUid: pulumi.Input<string>;
    /**
     * The GitLab ID of the user.
     */
    userId: pulumi.Input<number>;
}
