// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.GroupServiceAccount` resource allows creating a GitLab group service account.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_service_accounts/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // This must be a top-level group
 * const example = new gitlab.Group("example", {
 *     name: "example",
 *     path: "example",
 *     description: "An example group",
 * });
 * // The service account against the top-level group
 * const exampleSa = new gitlab.GroupServiceAccount("example_sa", {
 *     group: example.id,
 *     name: "example-name",
 *     username: "example-username",
 * });
 * // Group to assign the service account to. Can be the same top-level group resource as above, or a subgroup of that group.
 * const exampleSubgroup = new gitlab.Group("example_subgroup", {
 *     name: "subgroup",
 *     path: "example/subgroup",
 *     description: "An example subgroup",
 * });
 * // To assign the service account to a group
 * const exampleMembership = new gitlab.GroupMembership("example_membership", {
 *     groupId: exampleSubgroup.id,
 *     userId: exampleSa.serviceAccountId,
 *     accessLevel: "developer",
 *     expiresAt: "2020-03-14",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_group_service_account`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_group_service_account.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Import using the CLI is supported using the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/groupServiceAccount:GroupServiceAccount You can import a group service account using `<resource> <id>`. The
 * ```
 *
 * `id` is in the form of <group_id>:<service_account_id>
 *
 * ```sh
 * $ pulumi import gitlab:index/groupServiceAccount:GroupServiceAccount example example
 * ```
 */
export class GroupServiceAccount extends pulumi.CustomResource {
    /**
     * Get an existing GroupServiceAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupServiceAccountState, opts?: pulumi.CustomResourceOptions): GroupServiceAccount {
        return new GroupServiceAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupServiceAccount:GroupServiceAccount';

    /**
     * Returns true if the given object is an instance of GroupServiceAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupServiceAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupServiceAccount.__pulumiType;
    }

    /**
     * The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The service account id.
     */
    public /*out*/ readonly serviceAccountId!: pulumi.Output<string>;
    /**
     * The username of the user. If not specified, it’s automatically generated.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a GroupServiceAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupServiceAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupServiceAccountArgs | GroupServiceAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupServiceAccountState | undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as GroupServiceAccountArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["serviceAccountId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupServiceAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupServiceAccount resources.
 */
export interface GroupServiceAccountState {
    /**
     * The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    name?: pulumi.Input<string>;
    /**
     * The service account id.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * The username of the user. If not specified, it’s automatically generated.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupServiceAccount resource.
 */
export interface GroupServiceAccountArgs {
    /**
     * The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
     */
    group: pulumi.Input<string>;
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    name?: pulumi.Input<string>;
    /**
     * The username of the user. If not specified, it’s automatically generated.
     */
    username?: pulumi.Input<string>;
}
