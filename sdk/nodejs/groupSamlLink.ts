// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.GroupSamlLink` resource allows to manage the lifecycle of an SAML integration with a group.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#saml-group-links)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const test = new gitlab.GroupSamlLink("test", {
 *     accessLevel: "developer",
 *     group: "12345",
 *     samlGroupName: "samlgroupname1",
 * });
 * ```
 *
 * ## Import
 *
 * GitLab group saml links can be imported using an id made up of `group_id:saml_group_name`, e.g.
 *
 * ```sh
 *  $ pulumi import gitlab:index/groupSamlLink:GroupSamlLink test "12345:samlgroupname1"
 * ```
 */
export class GroupSamlLink extends pulumi.CustomResource {
    /**
     * Get an existing GroupSamlLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupSamlLinkState, opts?: pulumi.CustomResourceOptions): GroupSamlLink {
        return new GroupSamlLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupSamlLink:GroupSamlLink';

    /**
     * Returns true if the given object is an instance of GroupSamlLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupSamlLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupSamlLink.__pulumiType;
    }

    /**
     * Access level for members of the SAML group. Valid values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.
     */
    public readonly accessLevel!: pulumi.Output<string>;
    /**
     * The ID or path of the group to add the SAML Group Link to.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * The name of the SAML group.
     */
    public readonly samlGroupName!: pulumi.Output<string>;

    /**
     * Create a GroupSamlLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupSamlLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupSamlLinkArgs | GroupSamlLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupSamlLinkState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["samlGroupName"] = state ? state.samlGroupName : undefined;
        } else {
            const args = argsOrState as GroupSamlLinkArgs | undefined;
            if ((!args || args.accessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLevel'");
            }
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.samlGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'samlGroupName'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["samlGroupName"] = args ? args.samlGroupName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupSamlLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupSamlLink resources.
 */
export interface GroupSamlLinkState {
    /**
     * Access level for members of the SAML group. Valid values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * The ID or path of the group to add the SAML Group Link to.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the SAML group.
     */
    samlGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupSamlLink resource.
 */
export interface GroupSamlLinkArgs {
    /**
     * Access level for members of the SAML group. Valid values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.
     */
    accessLevel: pulumi.Input<string>;
    /**
     * The ID or path of the group to add the SAML Group Link to.
     */
    group: pulumi.Input<string>;
    /**
     * The name of the SAML group.
     */
    samlGroupName: pulumi.Input<string>;
}
