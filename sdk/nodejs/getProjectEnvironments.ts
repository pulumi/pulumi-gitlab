// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getProjectEnvironments` data source retrieves information about all environments of the given project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const thisProject = new gitlab.Project("this", {
 *     name: "example",
 *     initializeWithReadme: true,
 * });
 * const _this = gitlab.getProjectEnvironmentsOutput({
 *     project: thisProject.pathWithNamespace,
 * });
 * ```
 */
export function getProjectEnvironments(args: GetProjectEnvironmentsArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectEnvironmentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectEnvironments:getProjectEnvironments", {
        "name": args.name,
        "project": args.project,
        "search": args.search,
        "states": args.states,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectEnvironments.
 */
export interface GetProjectEnvironmentsArgs {
    /**
     * Return the environment with this name. Mutually exclusive with search.
     */
    name?: string;
    /**
     * The ID or full path of the project.
     */
    project: string;
    /**
     * Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     */
    search?: string;
    /**
     * List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     */
    states?: string;
}

/**
 * A collection of values returned by getProjectEnvironments.
 */
export interface GetProjectEnvironmentsResult {
    /**
     * The list of environments.
     */
    readonly environments: outputs.GetProjectEnvironmentsEnvironment[];
    readonly id: string;
    /**
     * Return the environment with this name. Mutually exclusive with search.
     */
    readonly name?: string;
    /**
     * The ID or full path of the project.
     */
    readonly project: string;
    /**
     * Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     */
    readonly search?: string;
    /**
     * List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     */
    readonly states?: string;
}
/**
 * The `gitlab.getProjectEnvironments` data source retrieves information about all environments of the given project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/environments/#list-environments)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const thisProject = new gitlab.Project("this", {
 *     name: "example",
 *     initializeWithReadme: true,
 * });
 * const _this = gitlab.getProjectEnvironmentsOutput({
 *     project: thisProject.pathWithNamespace,
 * });
 * ```
 */
export function getProjectEnvironmentsOutput(args: GetProjectEnvironmentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectEnvironmentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getProjectEnvironments:getProjectEnvironments", {
        "name": args.name,
        "project": args.project,
        "search": args.search,
        "states": args.states,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectEnvironments.
 */
export interface GetProjectEnvironmentsOutputArgs {
    /**
     * Return the environment with this name. Mutually exclusive with search.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters long.
     */
    search?: pulumi.Input<string>;
    /**
     * List all environments that match the specified state. Valid values are `available`, `stopping`, `stopped`. Returns all environments if not set.
     */
    states?: pulumi.Input<string>;
}
