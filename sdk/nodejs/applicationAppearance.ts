// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_application_appearance`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_application_appearance.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * Gitlab application appearance can be imported with the hard-coded key `gitlab`, for example:
 *
 * ```sh
 * $ pulumi import gitlab:index/applicationAppearance:ApplicationAppearance example "gitlab"
 * ```
 */
export class ApplicationAppearance extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationAppearance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationAppearanceState, opts?: pulumi.CustomResourceOptions): ApplicationAppearance {
        return new ApplicationAppearance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/applicationAppearance:ApplicationAppearance';

    /**
     * Returns true if the given object is an instance of ApplicationAppearance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationAppearance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationAppearance.__pulumiType;
    }

    /**
     * Markdown text shown on the sign-in and sign-up page.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Add header and footer to all outgoing emails if enabled.
     */
    declare public readonly emailHeaderAndFooterEnabled: pulumi.Output<boolean>;
    /**
     * Message in the system footer bar.
     */
    declare public readonly footerMessage: pulumi.Output<string>;
    /**
     * Message in the system header bar.
     */
    declare public readonly headerMessage: pulumi.Output<string>;
    declare public readonly keepSettingsOnDestroy: pulumi.Output<boolean>;
    /**
     * Markdown text shown on the group or project member page for users with permission to change members.
     */
    declare public readonly memberGuidelines: pulumi.Output<string>;
    /**
     * Background color for the system header or footer bar, in CSS hex notation.
     */
    declare public readonly messageBackgroundColor: pulumi.Output<string>;
    /**
     * Font color for the system header or footer bar, in CSS hex notation.
     */
    declare public readonly messageFontColor: pulumi.Output<string>;
    /**
     * Markdown text shown on the new project page.
     */
    declare public readonly newProjectGuidelines: pulumi.Output<string>;
    /**
     * Markdown text shown on the profile page below the Public Avatar.
     */
    declare public readonly profileImageGuidelines: pulumi.Output<string>;
    /**
     * An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
     */
    declare public readonly pwaDescription: pulumi.Output<string>;
    /**
     * Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
     */
    declare public readonly pwaName: pulumi.Output<string>;
    /**
     * Short name for Progressive Web App.
     */
    declare public readonly pwaShortName: pulumi.Output<string>;
    /**
     * Application title on the sign-in and sign-up page.
     */
    declare public readonly title: pulumi.Output<string>;

    /**
     * Create a ApplicationAppearance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationAppearanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationAppearanceArgs | ApplicationAppearanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationAppearanceState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["emailHeaderAndFooterEnabled"] = state?.emailHeaderAndFooterEnabled;
            resourceInputs["footerMessage"] = state?.footerMessage;
            resourceInputs["headerMessage"] = state?.headerMessage;
            resourceInputs["keepSettingsOnDestroy"] = state?.keepSettingsOnDestroy;
            resourceInputs["memberGuidelines"] = state?.memberGuidelines;
            resourceInputs["messageBackgroundColor"] = state?.messageBackgroundColor;
            resourceInputs["messageFontColor"] = state?.messageFontColor;
            resourceInputs["newProjectGuidelines"] = state?.newProjectGuidelines;
            resourceInputs["profileImageGuidelines"] = state?.profileImageGuidelines;
            resourceInputs["pwaDescription"] = state?.pwaDescription;
            resourceInputs["pwaName"] = state?.pwaName;
            resourceInputs["pwaShortName"] = state?.pwaShortName;
            resourceInputs["title"] = state?.title;
        } else {
            const args = argsOrState as ApplicationAppearanceArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["emailHeaderAndFooterEnabled"] = args?.emailHeaderAndFooterEnabled;
            resourceInputs["footerMessage"] = args?.footerMessage;
            resourceInputs["headerMessage"] = args?.headerMessage;
            resourceInputs["keepSettingsOnDestroy"] = args?.keepSettingsOnDestroy;
            resourceInputs["memberGuidelines"] = args?.memberGuidelines;
            resourceInputs["messageBackgroundColor"] = args?.messageBackgroundColor;
            resourceInputs["messageFontColor"] = args?.messageFontColor;
            resourceInputs["newProjectGuidelines"] = args?.newProjectGuidelines;
            resourceInputs["profileImageGuidelines"] = args?.profileImageGuidelines;
            resourceInputs["pwaDescription"] = args?.pwaDescription;
            resourceInputs["pwaName"] = args?.pwaName;
            resourceInputs["pwaShortName"] = args?.pwaShortName;
            resourceInputs["title"] = args?.title;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationAppearance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationAppearance resources.
 */
export interface ApplicationAppearanceState {
    /**
     * Markdown text shown on the sign-in and sign-up page.
     */
    description?: pulumi.Input<string>;
    /**
     * Add header and footer to all outgoing emails if enabled.
     */
    emailHeaderAndFooterEnabled?: pulumi.Input<boolean>;
    /**
     * Message in the system footer bar.
     */
    footerMessage?: pulumi.Input<string>;
    /**
     * Message in the system header bar.
     */
    headerMessage?: pulumi.Input<string>;
    keepSettingsOnDestroy?: pulumi.Input<boolean>;
    /**
     * Markdown text shown on the group or project member page for users with permission to change members.
     */
    memberGuidelines?: pulumi.Input<string>;
    /**
     * Background color for the system header or footer bar, in CSS hex notation.
     */
    messageBackgroundColor?: pulumi.Input<string>;
    /**
     * Font color for the system header or footer bar, in CSS hex notation.
     */
    messageFontColor?: pulumi.Input<string>;
    /**
     * Markdown text shown on the new project page.
     */
    newProjectGuidelines?: pulumi.Input<string>;
    /**
     * Markdown text shown on the profile page below the Public Avatar.
     */
    profileImageGuidelines?: pulumi.Input<string>;
    /**
     * An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
     */
    pwaDescription?: pulumi.Input<string>;
    /**
     * Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
     */
    pwaName?: pulumi.Input<string>;
    /**
     * Short name for Progressive Web App.
     */
    pwaShortName?: pulumi.Input<string>;
    /**
     * Application title on the sign-in and sign-up page.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationAppearance resource.
 */
export interface ApplicationAppearanceArgs {
    /**
     * Markdown text shown on the sign-in and sign-up page.
     */
    description?: pulumi.Input<string>;
    /**
     * Add header and footer to all outgoing emails if enabled.
     */
    emailHeaderAndFooterEnabled?: pulumi.Input<boolean>;
    /**
     * Message in the system footer bar.
     */
    footerMessage?: pulumi.Input<string>;
    /**
     * Message in the system header bar.
     */
    headerMessage?: pulumi.Input<string>;
    keepSettingsOnDestroy?: pulumi.Input<boolean>;
    /**
     * Markdown text shown on the group or project member page for users with permission to change members.
     */
    memberGuidelines?: pulumi.Input<string>;
    /**
     * Background color for the system header or footer bar, in CSS hex notation.
     */
    messageBackgroundColor?: pulumi.Input<string>;
    /**
     * Font color for the system header or footer bar, in CSS hex notation.
     */
    messageFontColor?: pulumi.Input<string>;
    /**
     * Markdown text shown on the new project page.
     */
    newProjectGuidelines?: pulumi.Input<string>;
    /**
     * Markdown text shown on the profile page below the Public Avatar.
     */
    profileImageGuidelines?: pulumi.Input<string>;
    /**
     * An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
     */
    pwaDescription?: pulumi.Input<string>;
    /**
     * Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
     */
    pwaName?: pulumi.Input<string>;
    /**
     * Short name for Progressive Web App.
     */
    pwaShortName?: pulumi.Input<string>;
    /**
     * Application title on the sign-in and sign-up page.
     */
    title?: pulumi.Input<string>;
}
