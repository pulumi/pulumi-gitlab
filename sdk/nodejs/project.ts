// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = new gitlab.Project("example", {
 *     description: "My awesome codebase",
 *     visibilityLevel: "public",
 * });
 * // Project with custom push rules
 * const example_two = new gitlab.Project("example-two", {pushRules: {
 *     authorEmailRegex: "@example\\.com$",
 *     commitCommitterCheck: true,
 *     memberCheck: true,
 *     preventSecrets: true,
 * }});
 * const peterParker = gitlab.getUser({
 *     username: "peter_parker",
 * });
 * const petersRepo = new gitlab.Project("petersRepo", {
 *     description: "This is a description",
 *     namespaceId: peterParker.then(peterParker => peterParker.namespaceId),
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import gitlab:index/project:Project You can import a project state using `<resource> <id>`. The
 * ```
 *
 *  `id` can be whatever the [get single project api][get_single_project] takes for its `:id` value, so for example
 *
 * ```sh
 *  $ pulumi import gitlab:index/project:Project example richardc/example
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     */
    public readonly allowMergeOnSkippedPipeline!: pulumi.Output<boolean | undefined>;
    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly analyticsAccessLevel!: pulumi.Output<string>;
    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     */
    public readonly approvalsBeforeMerge!: pulumi.Output<number | undefined>;
    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     */
    public readonly archiveOnDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     */
    public readonly archived!: pulumi.Output<boolean | undefined>;
    /**
     * Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     */
    public readonly autoCancelPendingPipelines!: pulumi.Output<string>;
    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
     */
    public readonly autoDevopsDeployStrategy!: pulumi.Output<string>;
    /**
     * Enable Auto DevOps for this project.
     */
    public readonly autoDevopsEnabled!: pulumi.Output<boolean>;
    /**
     * Set whether auto-closing referenced issues on default branch.
     */
    public readonly autocloseReferencedIssues!: pulumi.Output<boolean>;
    /**
     * Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
     *
     * @deprecated build_coverage_regex is removed in GitLab 15.0.
     */
    public readonly buildCoverageRegex!: pulumi.Output<string | undefined>;
    /**
     * The Git strategy. Defaults to fetch.
     */
    public readonly buildGitStrategy!: pulumi.Output<string>;
    /**
     * The maximum amount of time, in seconds, that a job can run.
     */
    public readonly buildTimeout!: pulumi.Output<number>;
    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly buildsAccessLevel!: pulumi.Output<string>;
    /**
     * Custom Path to CI config file.
     */
    public readonly ciConfigPath!: pulumi.Output<string | undefined>;
    /**
     * Default number of revisions for shallow cloning.
     */
    public readonly ciDefaultGitDepth!: pulumi.Output<number>;
    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     */
    public readonly ciForwardDeploymentEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
     */
    public readonly containerExpirationPolicy!: pulumi.Output<outputs.ProjectContainerExpirationPolicy>;
    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly containerRegistryAccessLevel!: pulumi.Output<string>;
    /**
     * Enable container registry for the project.
     */
    public readonly containerRegistryEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The default branch for the project.
     */
    public readonly defaultBranch!: pulumi.Output<string>;
    /**
     * A description of the project.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Disable email notifications.
     */
    public readonly emailsDisabled!: pulumi.Output<boolean | undefined>;
    /**
     * The classification label for the project.
     */
    public readonly externalAuthorizationClassificationLabel!: pulumi.Output<string | undefined>;
    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly forkingAccessLevel!: pulumi.Output<string>;
    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     */
    public readonly groupWithProjectTemplatesId!: pulumi.Output<number | undefined>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    public /*out*/ readonly httpUrlToRepo!: pulumi.Output<string>;
    /**
     * Git URL to a repository to be imported.
     */
    public readonly importUrl!: pulumi.Output<string | undefined>;
    /**
     * Create main branch with first commit containing a README.md file.
     */
    public readonly initializeWithReadme!: pulumi.Output<boolean | undefined>;
    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly issuesAccessLevel!: pulumi.Output<string>;
    /**
     * Enable issue tracking for the project.
     */
    public readonly issuesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Sets the template for new issues in the project.
     */
    public readonly issuesTemplate!: pulumi.Output<string | undefined>;
    /**
     * Enable LFS for the project.
     */
    public readonly lfsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
     */
    public readonly mergeCommitTemplate!: pulumi.Output<string | undefined>;
    /**
     * Set to `ff` to create fast-forward merges
     */
    public readonly mergeMethod!: pulumi.Output<string | undefined>;
    /**
     * Enable or disable merge pipelines.
     */
    public readonly mergePipelinesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly mergeRequestsAccessLevel!: pulumi.Output<string>;
    /**
     * Enable merge requests for the project.
     */
    public readonly mergeRequestsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Sets the template for new merge requests in the project.
     */
    public readonly mergeRequestsTemplate!: pulumi.Output<string | undefined>;
    /**
     * Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
     */
    public readonly mergeTrainsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable project pull mirror.
     */
    public readonly mirror!: pulumi.Output<boolean | undefined>;
    /**
     * Enable overwrite diverged branches for a mirrored project.
     */
    public readonly mirrorOverwritesDivergedBranches!: pulumi.Output<boolean | undefined>;
    /**
     * Enable trigger builds on pushes for a mirrored project.
     */
    public readonly mirrorTriggerBuilds!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the project.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace (group or user) of the project. Defaults to your user.
     */
    public readonly namespaceId!: pulumi.Output<number>;
    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     */
    public readonly onlyAllowMergeIfAllDiscussionsAreResolved!: pulumi.Output<boolean | undefined>;
    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     */
    public readonly onlyAllowMergeIfPipelineSucceeds!: pulumi.Output<boolean | undefined>;
    /**
     * Enable only mirror protected branches for a mirrored project.
     */
    public readonly onlyMirrorProtectedBranches!: pulumi.Output<boolean | undefined>;
    /**
     * Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly operationsAccessLevel!: pulumi.Output<string>;
    /**
     * Enable packages repository for the project.
     */
    public readonly packagesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable pages access control
     */
    public readonly pagesAccessLevel!: pulumi.Output<string | undefined>;
    /**
     * The path of the repository.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * The path of the repository with namespace.
     */
    public /*out*/ readonly pathWithNamespace!: pulumi.Output<string>;
    /**
     * Enable pipelines for the project.
     */
    public readonly pipelinesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Show link to create/view merge request when pushing from the command line
     */
    public readonly printingMergeRequestLinkEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * If true, jobs can be viewed by non-project members.
     */
    public readonly publicBuilds!: pulumi.Output<boolean | undefined>;
    /**
     * Push rules for the project.
     */
    public readonly pushRules!: pulumi.Output<outputs.ProjectPushRules>;
    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     */
    public readonly removeSourceBranchAfterMerge!: pulumi.Output<boolean | undefined>;
    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly repositoryAccessLevel!: pulumi.Output<string>;
    /**
     * Which storage shard the repository is on. (administrator only)
     */
    public readonly repositoryStorage!: pulumi.Output<string>;
    /**
     * Allow users to request member access.
     */
    public readonly requestAccessEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly requirementsAccessLevel!: pulumi.Output<string>;
    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     */
    public readonly resolveOutdatedDiffDiscussions!: pulumi.Output<boolean | undefined>;
    /**
     * Registration token to use during runner setup.
     */
    public /*out*/ readonly runnersToken!: pulumi.Output<string>;
    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly securityAndComplianceAccessLevel!: pulumi.Output<string>;
    /**
     * Enable shared runners for this project.
     */
    public readonly sharedRunnersEnabled!: pulumi.Output<boolean>;
    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     */
    public readonly skipWaitForDefaultBranchProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly snippetsAccessLevel!: pulumi.Output<string>;
    /**
     * Enable snippets for the project.
     */
    public readonly snippetsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
     */
    public readonly squashCommitTemplate!: pulumi.Output<string | undefined>;
    /**
     * Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
     */
    public readonly squashOption!: pulumi.Output<string | undefined>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    public /*out*/ readonly sshUrlToRepo!: pulumi.Output<string>;
    /**
     * The commit message used to apply merge request suggestions.
     */
    public readonly suggestionCommitMessage!: pulumi.Output<string | undefined>;
    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
     */
    public readonly templateName!: pulumi.Output<string | undefined>;
    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     */
    public readonly templateProjectId!: pulumi.Output<number | undefined>;
    /**
     * The list of topics for the project.
     */
    public readonly topics!: pulumi.Output<string[]>;
    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     */
    public readonly useCustomTemplate!: pulumi.Output<boolean | undefined>;
    /**
     * Set to `public` to create a public project.
     */
    public readonly visibilityLevel!: pulumi.Output<string | undefined>;
    /**
     * URL that can be used to find the project in a browser.
     */
    public /*out*/ readonly webUrl!: pulumi.Output<string>;
    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     */
    public readonly wikiAccessLevel!: pulumi.Output<string>;
    /**
     * Enable wiki for the project.
     */
    public readonly wikiEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["allowMergeOnSkippedPipeline"] = state ? state.allowMergeOnSkippedPipeline : undefined;
            resourceInputs["analyticsAccessLevel"] = state ? state.analyticsAccessLevel : undefined;
            resourceInputs["approvalsBeforeMerge"] = state ? state.approvalsBeforeMerge : undefined;
            resourceInputs["archiveOnDestroy"] = state ? state.archiveOnDestroy : undefined;
            resourceInputs["archived"] = state ? state.archived : undefined;
            resourceInputs["autoCancelPendingPipelines"] = state ? state.autoCancelPendingPipelines : undefined;
            resourceInputs["autoDevopsDeployStrategy"] = state ? state.autoDevopsDeployStrategy : undefined;
            resourceInputs["autoDevopsEnabled"] = state ? state.autoDevopsEnabled : undefined;
            resourceInputs["autocloseReferencedIssues"] = state ? state.autocloseReferencedIssues : undefined;
            resourceInputs["buildCoverageRegex"] = state ? state.buildCoverageRegex : undefined;
            resourceInputs["buildGitStrategy"] = state ? state.buildGitStrategy : undefined;
            resourceInputs["buildTimeout"] = state ? state.buildTimeout : undefined;
            resourceInputs["buildsAccessLevel"] = state ? state.buildsAccessLevel : undefined;
            resourceInputs["ciConfigPath"] = state ? state.ciConfigPath : undefined;
            resourceInputs["ciDefaultGitDepth"] = state ? state.ciDefaultGitDepth : undefined;
            resourceInputs["ciForwardDeploymentEnabled"] = state ? state.ciForwardDeploymentEnabled : undefined;
            resourceInputs["containerExpirationPolicy"] = state ? state.containerExpirationPolicy : undefined;
            resourceInputs["containerRegistryAccessLevel"] = state ? state.containerRegistryAccessLevel : undefined;
            resourceInputs["containerRegistryEnabled"] = state ? state.containerRegistryEnabled : undefined;
            resourceInputs["defaultBranch"] = state ? state.defaultBranch : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emailsDisabled"] = state ? state.emailsDisabled : undefined;
            resourceInputs["externalAuthorizationClassificationLabel"] = state ? state.externalAuthorizationClassificationLabel : undefined;
            resourceInputs["forkingAccessLevel"] = state ? state.forkingAccessLevel : undefined;
            resourceInputs["groupWithProjectTemplatesId"] = state ? state.groupWithProjectTemplatesId : undefined;
            resourceInputs["httpUrlToRepo"] = state ? state.httpUrlToRepo : undefined;
            resourceInputs["importUrl"] = state ? state.importUrl : undefined;
            resourceInputs["initializeWithReadme"] = state ? state.initializeWithReadme : undefined;
            resourceInputs["issuesAccessLevel"] = state ? state.issuesAccessLevel : undefined;
            resourceInputs["issuesEnabled"] = state ? state.issuesEnabled : undefined;
            resourceInputs["issuesTemplate"] = state ? state.issuesTemplate : undefined;
            resourceInputs["lfsEnabled"] = state ? state.lfsEnabled : undefined;
            resourceInputs["mergeCommitTemplate"] = state ? state.mergeCommitTemplate : undefined;
            resourceInputs["mergeMethod"] = state ? state.mergeMethod : undefined;
            resourceInputs["mergePipelinesEnabled"] = state ? state.mergePipelinesEnabled : undefined;
            resourceInputs["mergeRequestsAccessLevel"] = state ? state.mergeRequestsAccessLevel : undefined;
            resourceInputs["mergeRequestsEnabled"] = state ? state.mergeRequestsEnabled : undefined;
            resourceInputs["mergeRequestsTemplate"] = state ? state.mergeRequestsTemplate : undefined;
            resourceInputs["mergeTrainsEnabled"] = state ? state.mergeTrainsEnabled : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["mirrorOverwritesDivergedBranches"] = state ? state.mirrorOverwritesDivergedBranches : undefined;
            resourceInputs["mirrorTriggerBuilds"] = state ? state.mirrorTriggerBuilds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["onlyAllowMergeIfAllDiscussionsAreResolved"] = state ? state.onlyAllowMergeIfAllDiscussionsAreResolved : undefined;
            resourceInputs["onlyAllowMergeIfPipelineSucceeds"] = state ? state.onlyAllowMergeIfPipelineSucceeds : undefined;
            resourceInputs["onlyMirrorProtectedBranches"] = state ? state.onlyMirrorProtectedBranches : undefined;
            resourceInputs["operationsAccessLevel"] = state ? state.operationsAccessLevel : undefined;
            resourceInputs["packagesEnabled"] = state ? state.packagesEnabled : undefined;
            resourceInputs["pagesAccessLevel"] = state ? state.pagesAccessLevel : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pathWithNamespace"] = state ? state.pathWithNamespace : undefined;
            resourceInputs["pipelinesEnabled"] = state ? state.pipelinesEnabled : undefined;
            resourceInputs["printingMergeRequestLinkEnabled"] = state ? state.printingMergeRequestLinkEnabled : undefined;
            resourceInputs["publicBuilds"] = state ? state.publicBuilds : undefined;
            resourceInputs["pushRules"] = state ? state.pushRules : undefined;
            resourceInputs["removeSourceBranchAfterMerge"] = state ? state.removeSourceBranchAfterMerge : undefined;
            resourceInputs["repositoryAccessLevel"] = state ? state.repositoryAccessLevel : undefined;
            resourceInputs["repositoryStorage"] = state ? state.repositoryStorage : undefined;
            resourceInputs["requestAccessEnabled"] = state ? state.requestAccessEnabled : undefined;
            resourceInputs["requirementsAccessLevel"] = state ? state.requirementsAccessLevel : undefined;
            resourceInputs["resolveOutdatedDiffDiscussions"] = state ? state.resolveOutdatedDiffDiscussions : undefined;
            resourceInputs["runnersToken"] = state ? state.runnersToken : undefined;
            resourceInputs["securityAndComplianceAccessLevel"] = state ? state.securityAndComplianceAccessLevel : undefined;
            resourceInputs["sharedRunnersEnabled"] = state ? state.sharedRunnersEnabled : undefined;
            resourceInputs["skipWaitForDefaultBranchProtection"] = state ? state.skipWaitForDefaultBranchProtection : undefined;
            resourceInputs["snippetsAccessLevel"] = state ? state.snippetsAccessLevel : undefined;
            resourceInputs["snippetsEnabled"] = state ? state.snippetsEnabled : undefined;
            resourceInputs["squashCommitTemplate"] = state ? state.squashCommitTemplate : undefined;
            resourceInputs["squashOption"] = state ? state.squashOption : undefined;
            resourceInputs["sshUrlToRepo"] = state ? state.sshUrlToRepo : undefined;
            resourceInputs["suggestionCommitMessage"] = state ? state.suggestionCommitMessage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["templateProjectId"] = state ? state.templateProjectId : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["useCustomTemplate"] = state ? state.useCustomTemplate : undefined;
            resourceInputs["visibilityLevel"] = state ? state.visibilityLevel : undefined;
            resourceInputs["webUrl"] = state ? state.webUrl : undefined;
            resourceInputs["wikiAccessLevel"] = state ? state.wikiAccessLevel : undefined;
            resourceInputs["wikiEnabled"] = state ? state.wikiEnabled : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["allowMergeOnSkippedPipeline"] = args ? args.allowMergeOnSkippedPipeline : undefined;
            resourceInputs["analyticsAccessLevel"] = args ? args.analyticsAccessLevel : undefined;
            resourceInputs["approvalsBeforeMerge"] = args ? args.approvalsBeforeMerge : undefined;
            resourceInputs["archiveOnDestroy"] = args ? args.archiveOnDestroy : undefined;
            resourceInputs["archived"] = args ? args.archived : undefined;
            resourceInputs["autoCancelPendingPipelines"] = args ? args.autoCancelPendingPipelines : undefined;
            resourceInputs["autoDevopsDeployStrategy"] = args ? args.autoDevopsDeployStrategy : undefined;
            resourceInputs["autoDevopsEnabled"] = args ? args.autoDevopsEnabled : undefined;
            resourceInputs["autocloseReferencedIssues"] = args ? args.autocloseReferencedIssues : undefined;
            resourceInputs["buildCoverageRegex"] = args ? args.buildCoverageRegex : undefined;
            resourceInputs["buildGitStrategy"] = args ? args.buildGitStrategy : undefined;
            resourceInputs["buildTimeout"] = args ? args.buildTimeout : undefined;
            resourceInputs["buildsAccessLevel"] = args ? args.buildsAccessLevel : undefined;
            resourceInputs["ciConfigPath"] = args ? args.ciConfigPath : undefined;
            resourceInputs["ciDefaultGitDepth"] = args ? args.ciDefaultGitDepth : undefined;
            resourceInputs["ciForwardDeploymentEnabled"] = args ? args.ciForwardDeploymentEnabled : undefined;
            resourceInputs["containerExpirationPolicy"] = args ? args.containerExpirationPolicy : undefined;
            resourceInputs["containerRegistryAccessLevel"] = args ? args.containerRegistryAccessLevel : undefined;
            resourceInputs["containerRegistryEnabled"] = args ? args.containerRegistryEnabled : undefined;
            resourceInputs["defaultBranch"] = args ? args.defaultBranch : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["emailsDisabled"] = args ? args.emailsDisabled : undefined;
            resourceInputs["externalAuthorizationClassificationLabel"] = args ? args.externalAuthorizationClassificationLabel : undefined;
            resourceInputs["forkingAccessLevel"] = args ? args.forkingAccessLevel : undefined;
            resourceInputs["groupWithProjectTemplatesId"] = args ? args.groupWithProjectTemplatesId : undefined;
            resourceInputs["importUrl"] = args ? args.importUrl : undefined;
            resourceInputs["initializeWithReadme"] = args ? args.initializeWithReadme : undefined;
            resourceInputs["issuesAccessLevel"] = args ? args.issuesAccessLevel : undefined;
            resourceInputs["issuesEnabled"] = args ? args.issuesEnabled : undefined;
            resourceInputs["issuesTemplate"] = args ? args.issuesTemplate : undefined;
            resourceInputs["lfsEnabled"] = args ? args.lfsEnabled : undefined;
            resourceInputs["mergeCommitTemplate"] = args ? args.mergeCommitTemplate : undefined;
            resourceInputs["mergeMethod"] = args ? args.mergeMethod : undefined;
            resourceInputs["mergePipelinesEnabled"] = args ? args.mergePipelinesEnabled : undefined;
            resourceInputs["mergeRequestsAccessLevel"] = args ? args.mergeRequestsAccessLevel : undefined;
            resourceInputs["mergeRequestsEnabled"] = args ? args.mergeRequestsEnabled : undefined;
            resourceInputs["mergeRequestsTemplate"] = args ? args.mergeRequestsTemplate : undefined;
            resourceInputs["mergeTrainsEnabled"] = args ? args.mergeTrainsEnabled : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["mirrorOverwritesDivergedBranches"] = args ? args.mirrorOverwritesDivergedBranches : undefined;
            resourceInputs["mirrorTriggerBuilds"] = args ? args.mirrorTriggerBuilds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["onlyAllowMergeIfAllDiscussionsAreResolved"] = args ? args.onlyAllowMergeIfAllDiscussionsAreResolved : undefined;
            resourceInputs["onlyAllowMergeIfPipelineSucceeds"] = args ? args.onlyAllowMergeIfPipelineSucceeds : undefined;
            resourceInputs["onlyMirrorProtectedBranches"] = args ? args.onlyMirrorProtectedBranches : undefined;
            resourceInputs["operationsAccessLevel"] = args ? args.operationsAccessLevel : undefined;
            resourceInputs["packagesEnabled"] = args ? args.packagesEnabled : undefined;
            resourceInputs["pagesAccessLevel"] = args ? args.pagesAccessLevel : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["pipelinesEnabled"] = args ? args.pipelinesEnabled : undefined;
            resourceInputs["printingMergeRequestLinkEnabled"] = args ? args.printingMergeRequestLinkEnabled : undefined;
            resourceInputs["publicBuilds"] = args ? args.publicBuilds : undefined;
            resourceInputs["pushRules"] = args ? args.pushRules : undefined;
            resourceInputs["removeSourceBranchAfterMerge"] = args ? args.removeSourceBranchAfterMerge : undefined;
            resourceInputs["repositoryAccessLevel"] = args ? args.repositoryAccessLevel : undefined;
            resourceInputs["repositoryStorage"] = args ? args.repositoryStorage : undefined;
            resourceInputs["requestAccessEnabled"] = args ? args.requestAccessEnabled : undefined;
            resourceInputs["requirementsAccessLevel"] = args ? args.requirementsAccessLevel : undefined;
            resourceInputs["resolveOutdatedDiffDiscussions"] = args ? args.resolveOutdatedDiffDiscussions : undefined;
            resourceInputs["securityAndComplianceAccessLevel"] = args ? args.securityAndComplianceAccessLevel : undefined;
            resourceInputs["sharedRunnersEnabled"] = args ? args.sharedRunnersEnabled : undefined;
            resourceInputs["skipWaitForDefaultBranchProtection"] = args ? args.skipWaitForDefaultBranchProtection : undefined;
            resourceInputs["snippetsAccessLevel"] = args ? args.snippetsAccessLevel : undefined;
            resourceInputs["snippetsEnabled"] = args ? args.snippetsEnabled : undefined;
            resourceInputs["squashCommitTemplate"] = args ? args.squashCommitTemplate : undefined;
            resourceInputs["squashOption"] = args ? args.squashOption : undefined;
            resourceInputs["suggestionCommitMessage"] = args ? args.suggestionCommitMessage : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["templateProjectId"] = args ? args.templateProjectId : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["useCustomTemplate"] = args ? args.useCustomTemplate : undefined;
            resourceInputs["visibilityLevel"] = args ? args.visibilityLevel : undefined;
            resourceInputs["wikiAccessLevel"] = args ? args.wikiAccessLevel : undefined;
            resourceInputs["wikiEnabled"] = args ? args.wikiEnabled : undefined;
            resourceInputs["httpUrlToRepo"] = undefined /*out*/;
            resourceInputs["pathWithNamespace"] = undefined /*out*/;
            resourceInputs["runnersToken"] = undefined /*out*/;
            resourceInputs["sshUrlToRepo"] = undefined /*out*/;
            resourceInputs["webUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["runnersToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     */
    allowMergeOnSkippedPipeline?: pulumi.Input<boolean>;
    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     */
    analyticsAccessLevel?: pulumi.Input<string>;
    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     */
    approvalsBeforeMerge?: pulumi.Input<number>;
    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     */
    archived?: pulumi.Input<boolean>;
    /**
     * Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     */
    autoCancelPendingPipelines?: pulumi.Input<string>;
    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
     */
    autoDevopsDeployStrategy?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for this project.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Set whether auto-closing referenced issues on default branch.
     */
    autocloseReferencedIssues?: pulumi.Input<boolean>;
    /**
     * Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
     *
     * @deprecated build_coverage_regex is removed in GitLab 15.0.
     */
    buildCoverageRegex?: pulumi.Input<string>;
    /**
     * The Git strategy. Defaults to fetch.
     */
    buildGitStrategy?: pulumi.Input<string>;
    /**
     * The maximum amount of time, in seconds, that a job can run.
     */
    buildTimeout?: pulumi.Input<number>;
    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     */
    buildsAccessLevel?: pulumi.Input<string>;
    /**
     * Custom Path to CI config file.
     */
    ciConfigPath?: pulumi.Input<string>;
    /**
     * Default number of revisions for shallow cloning.
     */
    ciDefaultGitDepth?: pulumi.Input<number>;
    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     */
    ciForwardDeploymentEnabled?: pulumi.Input<boolean>;
    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
     */
    containerExpirationPolicy?: pulumi.Input<inputs.ProjectContainerExpirationPolicy>;
    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     */
    containerRegistryAccessLevel?: pulumi.Input<string>;
    /**
     * Enable container registry for the project.
     */
    containerRegistryEnabled?: pulumi.Input<boolean>;
    /**
     * The default branch for the project.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * A description of the project.
     */
    description?: pulumi.Input<string>;
    /**
     * Disable email notifications.
     */
    emailsDisabled?: pulumi.Input<boolean>;
    /**
     * The classification label for the project.
     */
    externalAuthorizationClassificationLabel?: pulumi.Input<string>;
    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     */
    forkingAccessLevel?: pulumi.Input<string>;
    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     */
    groupWithProjectTemplatesId?: pulumi.Input<number>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    httpUrlToRepo?: pulumi.Input<string>;
    /**
     * Git URL to a repository to be imported.
     */
    importUrl?: pulumi.Input<string>;
    /**
     * Create main branch with first commit containing a README.md file.
     */
    initializeWithReadme?: pulumi.Input<boolean>;
    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     */
    issuesAccessLevel?: pulumi.Input<string>;
    /**
     * Enable issue tracking for the project.
     */
    issuesEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new issues in the project.
     */
    issuesTemplate?: pulumi.Input<string>;
    /**
     * Enable LFS for the project.
     */
    lfsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
     */
    mergeCommitTemplate?: pulumi.Input<string>;
    /**
     * Set to `ff` to create fast-forward merges
     */
    mergeMethod?: pulumi.Input<string>;
    /**
     * Enable or disable merge pipelines.
     */
    mergePipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     */
    mergeRequestsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable merge requests for the project.
     */
    mergeRequestsEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new merge requests in the project.
     */
    mergeRequestsTemplate?: pulumi.Input<string>;
    /**
     * Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
     */
    mergeTrainsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable project pull mirror.
     */
    mirror?: pulumi.Input<boolean>;
    /**
     * Enable overwrite diverged branches for a mirrored project.
     */
    mirrorOverwritesDivergedBranches?: pulumi.Input<boolean>;
    /**
     * Enable trigger builds on pushes for a mirrored project.
     */
    mirrorTriggerBuilds?: pulumi.Input<boolean>;
    /**
     * The name of the project.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace (group or user) of the project. Defaults to your user.
     */
    namespaceId?: pulumi.Input<number>;
    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     */
    onlyAllowMergeIfAllDiscussionsAreResolved?: pulumi.Input<boolean>;
    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     */
    onlyAllowMergeIfPipelineSucceeds?: pulumi.Input<boolean>;
    /**
     * Enable only mirror protected branches for a mirrored project.
     */
    onlyMirrorProtectedBranches?: pulumi.Input<boolean>;
    /**
     * Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
     */
    operationsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable packages repository for the project.
     */
    packagesEnabled?: pulumi.Input<boolean>;
    /**
     * Enable pages access control
     */
    pagesAccessLevel?: pulumi.Input<string>;
    /**
     * The path of the repository.
     */
    path?: pulumi.Input<string>;
    /**
     * The path of the repository with namespace.
     */
    pathWithNamespace?: pulumi.Input<string>;
    /**
     * Enable pipelines for the project.
     */
    pipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Show link to create/view merge request when pushing from the command line
     */
    printingMergeRequestLinkEnabled?: pulumi.Input<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     */
    publicBuilds?: pulumi.Input<boolean>;
    /**
     * Push rules for the project.
     */
    pushRules?: pulumi.Input<inputs.ProjectPushRules>;
    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     */
    removeSourceBranchAfterMerge?: pulumi.Input<boolean>;
    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     */
    repositoryAccessLevel?: pulumi.Input<string>;
    /**
     * Which storage shard the repository is on. (administrator only)
     */
    repositoryStorage?: pulumi.Input<string>;
    /**
     * Allow users to request member access.
     */
    requestAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     */
    requirementsAccessLevel?: pulumi.Input<string>;
    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     */
    resolveOutdatedDiffDiscussions?: pulumi.Input<boolean>;
    /**
     * Registration token to use during runner setup.
     */
    runnersToken?: pulumi.Input<string>;
    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     */
    securityAndComplianceAccessLevel?: pulumi.Input<string>;
    /**
     * Enable shared runners for this project.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     */
    skipWaitForDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     */
    snippetsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable snippets for the project.
     */
    snippetsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
     */
    squashCommitTemplate?: pulumi.Input<string>;
    /**
     * Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
     */
    squashOption?: pulumi.Input<string>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    sshUrlToRepo?: pulumi.Input<string>;
    /**
     * The commit message used to apply merge request suggestions.
     */
    suggestionCommitMessage?: pulumi.Input<string>;
    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
     */
    templateName?: pulumi.Input<string>;
    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     */
    templateProjectId?: pulumi.Input<number>;
    /**
     * The list of topics for the project.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     */
    useCustomTemplate?: pulumi.Input<boolean>;
    /**
     * Set to `public` to create a public project.
     */
    visibilityLevel?: pulumi.Input<string>;
    /**
     * URL that can be used to find the project in a browser.
     */
    webUrl?: pulumi.Input<string>;
    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     */
    wikiAccessLevel?: pulumi.Input<string>;
    /**
     * Enable wiki for the project.
     */
    wikiEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     */
    allowMergeOnSkippedPipeline?: pulumi.Input<boolean>;
    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     */
    analyticsAccessLevel?: pulumi.Input<string>;
    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     */
    approvalsBeforeMerge?: pulumi.Input<number>;
    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     */
    archived?: pulumi.Input<boolean>;
    /**
     * Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     */
    autoCancelPendingPipelines?: pulumi.Input<string>;
    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
     */
    autoDevopsDeployStrategy?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for this project.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Set whether auto-closing referenced issues on default branch.
     */
    autocloseReferencedIssues?: pulumi.Input<boolean>;
    /**
     * Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
     *
     * @deprecated build_coverage_regex is removed in GitLab 15.0.
     */
    buildCoverageRegex?: pulumi.Input<string>;
    /**
     * The Git strategy. Defaults to fetch.
     */
    buildGitStrategy?: pulumi.Input<string>;
    /**
     * The maximum amount of time, in seconds, that a job can run.
     */
    buildTimeout?: pulumi.Input<number>;
    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     */
    buildsAccessLevel?: pulumi.Input<string>;
    /**
     * Custom Path to CI config file.
     */
    ciConfigPath?: pulumi.Input<string>;
    /**
     * Default number of revisions for shallow cloning.
     */
    ciDefaultGitDepth?: pulumi.Input<number>;
    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     */
    ciForwardDeploymentEnabled?: pulumi.Input<boolean>;
    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
     */
    containerExpirationPolicy?: pulumi.Input<inputs.ProjectContainerExpirationPolicy>;
    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     */
    containerRegistryAccessLevel?: pulumi.Input<string>;
    /**
     * Enable container registry for the project.
     */
    containerRegistryEnabled?: pulumi.Input<boolean>;
    /**
     * The default branch for the project.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * A description of the project.
     */
    description?: pulumi.Input<string>;
    /**
     * Disable email notifications.
     */
    emailsDisabled?: pulumi.Input<boolean>;
    /**
     * The classification label for the project.
     */
    externalAuthorizationClassificationLabel?: pulumi.Input<string>;
    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     */
    forkingAccessLevel?: pulumi.Input<string>;
    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     */
    groupWithProjectTemplatesId?: pulumi.Input<number>;
    /**
     * Git URL to a repository to be imported.
     */
    importUrl?: pulumi.Input<string>;
    /**
     * Create main branch with first commit containing a README.md file.
     */
    initializeWithReadme?: pulumi.Input<boolean>;
    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     */
    issuesAccessLevel?: pulumi.Input<string>;
    /**
     * Enable issue tracking for the project.
     */
    issuesEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new issues in the project.
     */
    issuesTemplate?: pulumi.Input<string>;
    /**
     * Enable LFS for the project.
     */
    lfsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
     */
    mergeCommitTemplate?: pulumi.Input<string>;
    /**
     * Set to `ff` to create fast-forward merges
     */
    mergeMethod?: pulumi.Input<string>;
    /**
     * Enable or disable merge pipelines.
     */
    mergePipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     */
    mergeRequestsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable merge requests for the project.
     */
    mergeRequestsEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new merge requests in the project.
     */
    mergeRequestsTemplate?: pulumi.Input<string>;
    /**
     * Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
     */
    mergeTrainsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable project pull mirror.
     */
    mirror?: pulumi.Input<boolean>;
    /**
     * Enable overwrite diverged branches for a mirrored project.
     */
    mirrorOverwritesDivergedBranches?: pulumi.Input<boolean>;
    /**
     * Enable trigger builds on pushes for a mirrored project.
     */
    mirrorTriggerBuilds?: pulumi.Input<boolean>;
    /**
     * The name of the project.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace (group or user) of the project. Defaults to your user.
     */
    namespaceId?: pulumi.Input<number>;
    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     */
    onlyAllowMergeIfAllDiscussionsAreResolved?: pulumi.Input<boolean>;
    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     */
    onlyAllowMergeIfPipelineSucceeds?: pulumi.Input<boolean>;
    /**
     * Enable only mirror protected branches for a mirrored project.
     */
    onlyMirrorProtectedBranches?: pulumi.Input<boolean>;
    /**
     * Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
     */
    operationsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable packages repository for the project.
     */
    packagesEnabled?: pulumi.Input<boolean>;
    /**
     * Enable pages access control
     */
    pagesAccessLevel?: pulumi.Input<string>;
    /**
     * The path of the repository.
     */
    path?: pulumi.Input<string>;
    /**
     * Enable pipelines for the project.
     */
    pipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Show link to create/view merge request when pushing from the command line
     */
    printingMergeRequestLinkEnabled?: pulumi.Input<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     */
    publicBuilds?: pulumi.Input<boolean>;
    /**
     * Push rules for the project.
     */
    pushRules?: pulumi.Input<inputs.ProjectPushRules>;
    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     */
    removeSourceBranchAfterMerge?: pulumi.Input<boolean>;
    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     */
    repositoryAccessLevel?: pulumi.Input<string>;
    /**
     * Which storage shard the repository is on. (administrator only)
     */
    repositoryStorage?: pulumi.Input<string>;
    /**
     * Allow users to request member access.
     */
    requestAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     */
    requirementsAccessLevel?: pulumi.Input<string>;
    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     */
    resolveOutdatedDiffDiscussions?: pulumi.Input<boolean>;
    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     */
    securityAndComplianceAccessLevel?: pulumi.Input<string>;
    /**
     * Enable shared runners for this project.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     */
    skipWaitForDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     */
    snippetsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable snippets for the project.
     */
    snippetsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
     */
    squashCommitTemplate?: pulumi.Input<string>;
    /**
     * Squash commits when merge request. Valid values are `never`, `always`, `defaultOn`, or `defaultOff`. The default value is `defaultOff`. [GitLab >= 14.1]
     */
    squashOption?: pulumi.Input<string>;
    /**
     * The commit message used to apply merge request suggestions.
     */
    suggestionCommitMessage?: pulumi.Input<string>;
    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
     */
    templateName?: pulumi.Input<string>;
    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     */
    templateProjectId?: pulumi.Input<number>;
    /**
     * The list of topics for the project.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     */
    useCustomTemplate?: pulumi.Input<boolean>;
    /**
     * Set to `public` to create a public project.
     */
    visibilityLevel?: pulumi.Input<string>;
    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     */
    wikiAccessLevel?: pulumi.Input<string>;
    /**
     * Enable wiki for the project.
     */
    wikiEnabled?: pulumi.Input<boolean>;
}
