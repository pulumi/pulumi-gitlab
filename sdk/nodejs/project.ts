// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/project:Project You can import a project state using `<resource> <id>`. The
 * ```
 *
 * `id` can be whatever the [get single project api][get_single_project] takes for
 *
 * its `:id` value, so for example:
 *
 * ```sh
 * $ pulumi import gitlab:index/project:Project example richardc/example
 * ```
 *
 * NOTE: the `import_url_username` and `import_url_password` cannot be imported.
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     */
    declare public readonly allowMergeOnSkippedPipeline: pulumi.Output<boolean>;
    /**
     * Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
     */
    declare public readonly allowPipelineTriggerApproveDeployment: pulumi.Output<boolean>;
    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly analyticsAccessLevel: pulumi.Output<string>;
    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     */
    declare public readonly approvalsBeforeMerge: pulumi.Output<number | undefined>;
    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     */
    declare public readonly archiveOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     */
    declare public readonly archived: pulumi.Output<boolean | undefined>;
    /**
     * Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     */
    declare public readonly autoCancelPendingPipelines: pulumi.Output<string>;
    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
     */
    declare public readonly autoDevopsDeployStrategy: pulumi.Output<string>;
    /**
     * Enable Auto DevOps for this project.
     */
    declare public readonly autoDevopsEnabled: pulumi.Output<boolean>;
    /**
     * Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
     */
    declare public readonly autoDuoCodeReviewEnabled: pulumi.Output<boolean>;
    /**
     * Set whether auto-closing referenced issues on default branch.
     */
    declare public readonly autocloseReferencedIssues: pulumi.Output<boolean>;
    /**
     * A local path to the avatar image to upload. **Note**: not available for imported resources.
     */
    declare public readonly avatar: pulumi.Output<string | undefined>;
    /**
     * The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
     */
    declare public readonly avatarHash: pulumi.Output<string>;
    /**
     * The URL of the avatar image.
     */
    declare public /*out*/ readonly avatarUrl: pulumi.Output<string>;
    /**
     * Branches to fork (empty for all branches).
     */
    declare public readonly branches: pulumi.Output<string | undefined>;
    /**
     * The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
     */
    declare public readonly buildGitStrategy: pulumi.Output<string>;
    /**
     * The maximum amount of time, in seconds, that a job can run.
     */
    declare public readonly buildTimeout: pulumi.Output<number>;
    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly buildsAccessLevel: pulumi.Output<string>;
    /**
     * Custom Path to CI config file.
     */
    declare public readonly ciConfigPath: pulumi.Output<string | undefined>;
    /**
     * Default number of revisions for shallow cloning.
     */
    declare public readonly ciDefaultGitDepth: pulumi.Output<number>;
    /**
     * Pipelines older than the configured time are deleted.
     */
    declare public readonly ciDeletePipelinesInSeconds: pulumi.Output<number>;
    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     */
    declare public readonly ciForwardDeploymentEnabled: pulumi.Output<boolean>;
    /**
     * Allow job retries even if the deployment job is outdated.
     */
    declare public readonly ciForwardDeploymentRollbackAllowed: pulumi.Output<boolean>;
    /**
     * Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to ["project*path", "ref*type", "ref"]. Introduced in GitLab 17.10.
     */
    declare public readonly ciIdTokenSubClaimComponents: pulumi.Output<string[]>;
    /**
     * The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `noOneAllowed`
     */
    declare public readonly ciPipelineVariablesMinimumOverrideRole: pulumi.Output<string>;
    /**
     * Allow Git push requests to your project repository that are authenticated with a CI/CD job token.
     */
    declare public readonly ciPushRepositoryForJobTokenAllowed: pulumi.Output<boolean>;
    /**
     * The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
     */
    declare public readonly ciRestrictPipelineCancellationRole: pulumi.Output<string>;
    /**
     * Use separate caches for protected branches.
     */
    declare public readonly ciSeparatedCaches: pulumi.Output<boolean>;
    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
     */
    declare public readonly containerExpirationPolicy: pulumi.Output<outputs.ProjectContainerExpirationPolicy>;
    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly containerRegistryAccessLevel: pulumi.Output<string>;
    /**
     * Enable container registry for the project.
     *
     * @deprecated Use `containerRegistryAccessLevel` instead.
     */
    declare public readonly containerRegistryEnabled: pulumi.Output<boolean>;
    /**
     * The default branch for the project.
     */
    declare public readonly defaultBranch: pulumi.Output<string>;
    /**
     * A description of the project.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable email notifications.
     */
    declare public readonly emailsEnabled: pulumi.Output<boolean>;
    /**
     * Whether the project is empty.
     */
    declare public /*out*/ readonly emptyRepo: pulumi.Output<boolean>;
    /**
     * Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly environmentsAccessLevel: pulumi.Output<string>;
    /**
     * The classification label for the project.
     */
    declare public readonly externalAuthorizationClassificationLabel: pulumi.Output<string | undefined>;
    /**
     * Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly featureFlagsAccessLevel: pulumi.Output<string>;
    /**
     * The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
     */
    declare public readonly forkedFromProjectId: pulumi.Output<number | undefined>;
    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly forkingAccessLevel: pulumi.Output<string>;
    /**
     * Enable group runners for this project.
     */
    declare public readonly groupRunnersEnabled: pulumi.Output<boolean>;
    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     */
    declare public readonly groupWithProjectTemplatesId: pulumi.Output<number | undefined>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    declare public /*out*/ readonly httpUrlToRepo: pulumi.Output<string>;
    /**
     * Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forkedFromProjectId` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `importUrlUsername` and `importUrlPassword`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
     */
    declare public readonly importUrl: pulumi.Output<string | undefined>;
    /**
     * The password for the `importUrl`. The value of this field is used to construct a valid `importUrl` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
     */
    declare public readonly importUrlPassword: pulumi.Output<string | undefined>;
    /**
     * The username for the `importUrl`. The value of this field is used to construct a valid `importUrl` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
     */
    declare public readonly importUrlUsername: pulumi.Output<string | undefined>;
    /**
     * Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly infrastructureAccessLevel: pulumi.Output<string>;
    /**
     * Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `defaultBranch`.
     */
    declare public readonly initializeWithReadme: pulumi.Output<boolean | undefined>;
    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly issuesAccessLevel: pulumi.Output<string>;
    /**
     * Enable issue tracking for the project.
     */
    declare public readonly issuesEnabled: pulumi.Output<boolean>;
    /**
     * Sets the template for new issues in the project.
     */
    declare public readonly issuesTemplate: pulumi.Output<string | undefined>;
    /**
     * Disable or enable the ability to keep the latest artifact for this project.
     */
    declare public readonly keepLatestArtifact: pulumi.Output<boolean>;
    /**
     * Enable LFS for the project.
     */
    declare public readonly lfsEnabled: pulumi.Output<boolean>;
    /**
     * Template used to create merge commit message in merge requests.
     */
    declare public readonly mergeCommitTemplate: pulumi.Output<string | undefined>;
    /**
     * Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
     */
    declare public readonly mergeMethod: pulumi.Output<string>;
    /**
     * Enable or disable merge pipelines.
     */
    declare public readonly mergePipelinesEnabled: pulumi.Output<boolean>;
    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly mergeRequestsAccessLevel: pulumi.Output<string>;
    /**
     * Enable merge requests for the project.
     */
    declare public readonly mergeRequestsEnabled: pulumi.Output<boolean>;
    /**
     * Sets the template for new merge requests in the project.
     */
    declare public readonly mergeRequestsTemplate: pulumi.Output<string | undefined>;
    /**
     * Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
     */
    declare public readonly mergeTrainsEnabled: pulumi.Output<boolean>;
    /**
     * Enable project pull mirror.
     */
    declare public readonly mirror: pulumi.Output<boolean | undefined>;
    /**
     * Enable overwrite diverged branches for a mirrored project.
     */
    declare public readonly mirrorOverwritesDivergedBranches: pulumi.Output<boolean>;
    /**
     * Enable trigger builds on pushes for a mirrored project.
     */
    declare public readonly mirrorTriggerBuilds: pulumi.Output<boolean>;
    /**
     * Set visibility of machine learning model experiments. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly modelExperimentsAccessLevel: pulumi.Output<string>;
    /**
     * Set visibility of machine learning model registry. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly modelRegistryAccessLevel: pulumi.Output<string>;
    /**
     * Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly monitorAccessLevel: pulumi.Output<string>;
    /**
     * For forked projects, target merge requests to this project. If false, the target will be the upstream project.
     */
    declare public readonly mrDefaultTargetSelf: pulumi.Output<boolean | undefined>;
    /**
     * The name of the project.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace (group or user) of the project. Defaults to your user.
     */
    declare public readonly namespaceId: pulumi.Output<number>;
    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     */
    declare public readonly onlyAllowMergeIfAllDiscussionsAreResolved: pulumi.Output<boolean>;
    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     */
    declare public readonly onlyAllowMergeIfPipelineSucceeds: pulumi.Output<boolean>;
    /**
     * Enable only mirror protected branches for a mirrored project.
     */
    declare public readonly onlyMirrorProtectedBranches: pulumi.Output<boolean>;
    /**
     * Enable packages repository for the project.
     */
    declare public readonly packagesEnabled: pulumi.Output<boolean>;
    /**
     * Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
     */
    declare public readonly pagesAccessLevel: pulumi.Output<string>;
    /**
     * The path of the repository.
     */
    declare public readonly path: pulumi.Output<string | undefined>;
    /**
     * The path of the repository with namespace.
     */
    declare public /*out*/ readonly pathWithNamespace: pulumi.Output<string>;
    /**
     * Set to `true` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
     */
    declare public readonly permanentlyDeleteOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
     *
     * @deprecated Deprecated in favor of `buildsAccessLevel`
     */
    declare public readonly pipelinesEnabled: pulumi.Output<boolean>;
    /**
     * Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
     */
    declare public readonly preReceiveSecretDetectionEnabled: pulumi.Output<boolean>;
    /**
     * Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
     */
    declare public readonly preventMergeWithoutJiraIssue: pulumi.Output<boolean>;
    /**
     * Show link to create/view merge request when pushing from the command line
     */
    declare public readonly printingMergeRequestLinkEnabled: pulumi.Output<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     *
     * @deprecated The `publicBuilds` attribute has been deprecated in favor of `publicJobs` and will be removed in the next major version of the provider.
     */
    declare public readonly publicBuilds: pulumi.Output<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     */
    declare public readonly publicJobs: pulumi.Output<boolean>;
    /**
     * Push rules for the project.
     */
    declare public readonly pushRules: pulumi.Output<outputs.ProjectPushRules>;
    /**
     * Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly releasesAccessLevel: pulumi.Output<string>;
    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     */
    declare public readonly removeSourceBranchAfterMerge: pulumi.Output<boolean>;
    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly repositoryAccessLevel: pulumi.Output<string>;
    /**
     * Which storage shard the repository is on. (administrator only)
     */
    declare public readonly repositoryStorage: pulumi.Output<string>;
    /**
     * Allow users to request member access.
     */
    declare public readonly requestAccessEnabled: pulumi.Output<boolean>;
    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly requirementsAccessLevel: pulumi.Output<string>;
    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     */
    declare public readonly resolveOutdatedDiffDiscussions: pulumi.Output<boolean | undefined>;
    /**
     * Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
     */
    declare public readonly restrictUserDefinedVariables: pulumi.Output<boolean>;
    /**
     * Registration token to use during runner setup.
     */
    declare public /*out*/ readonly runnersToken: pulumi.Output<string>;
    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly securityAndComplianceAccessLevel: pulumi.Output<string>;
    /**
     * Enable shared runners for this project.
     */
    declare public readonly sharedRunnersEnabled: pulumi.Output<boolean>;
    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     */
    declare public readonly skipWaitForDefaultBranchProtection: pulumi.Output<boolean | undefined>;
    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly snippetsAccessLevel: pulumi.Output<string>;
    /**
     * Enable snippets for the project.
     */
    declare public readonly snippetsEnabled: pulumi.Output<boolean>;
    /**
     * Template used to create squash commit message in merge requests.
     */
    declare public readonly squashCommitTemplate: pulumi.Output<string | undefined>;
    /**
     * Squash commits when merge request is merged. Valid values are `never` (Do not allow), `always` (Require), `defaultOn` (Encourage), or `defaultOff` (Allow). The default value is `defaultOff` (Allow).
     */
    declare public readonly squashOption: pulumi.Output<string>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    declare public /*out*/ readonly sshUrlToRepo: pulumi.Output<string>;
    /**
     * The commit message used to apply merge request suggestions.
     */
    declare public readonly suggestionCommitMessage: pulumi.Output<string | undefined>;
    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
     */
    declare public readonly templateName: pulumi.Output<string | undefined>;
    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     */
    declare public readonly templateProjectId: pulumi.Output<number | undefined>;
    /**
     * The list of topics for the project.
     */
    declare public readonly topics: pulumi.Output<string[]>;
    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     * 	> When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
     */
    declare public readonly useCustomTemplate: pulumi.Output<boolean | undefined>;
    /**
     * Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
     */
    declare public readonly visibilityLevel: pulumi.Output<string>;
    /**
     * URL that can be used to find the project in a browser.
     */
    declare public /*out*/ readonly webUrl: pulumi.Output<string>;
    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     */
    declare public readonly wikiAccessLevel: pulumi.Output<string>;
    /**
     * Enable wiki for the project.
     */
    declare public readonly wikiEnabled: pulumi.Output<boolean>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["allowMergeOnSkippedPipeline"] = state?.allowMergeOnSkippedPipeline;
            resourceInputs["allowPipelineTriggerApproveDeployment"] = state?.allowPipelineTriggerApproveDeployment;
            resourceInputs["analyticsAccessLevel"] = state?.analyticsAccessLevel;
            resourceInputs["approvalsBeforeMerge"] = state?.approvalsBeforeMerge;
            resourceInputs["archiveOnDestroy"] = state?.archiveOnDestroy;
            resourceInputs["archived"] = state?.archived;
            resourceInputs["autoCancelPendingPipelines"] = state?.autoCancelPendingPipelines;
            resourceInputs["autoDevopsDeployStrategy"] = state?.autoDevopsDeployStrategy;
            resourceInputs["autoDevopsEnabled"] = state?.autoDevopsEnabled;
            resourceInputs["autoDuoCodeReviewEnabled"] = state?.autoDuoCodeReviewEnabled;
            resourceInputs["autocloseReferencedIssues"] = state?.autocloseReferencedIssues;
            resourceInputs["avatar"] = state?.avatar;
            resourceInputs["avatarHash"] = state?.avatarHash;
            resourceInputs["avatarUrl"] = state?.avatarUrl;
            resourceInputs["branches"] = state?.branches;
            resourceInputs["buildGitStrategy"] = state?.buildGitStrategy;
            resourceInputs["buildTimeout"] = state?.buildTimeout;
            resourceInputs["buildsAccessLevel"] = state?.buildsAccessLevel;
            resourceInputs["ciConfigPath"] = state?.ciConfigPath;
            resourceInputs["ciDefaultGitDepth"] = state?.ciDefaultGitDepth;
            resourceInputs["ciDeletePipelinesInSeconds"] = state?.ciDeletePipelinesInSeconds;
            resourceInputs["ciForwardDeploymentEnabled"] = state?.ciForwardDeploymentEnabled;
            resourceInputs["ciForwardDeploymentRollbackAllowed"] = state?.ciForwardDeploymentRollbackAllowed;
            resourceInputs["ciIdTokenSubClaimComponents"] = state?.ciIdTokenSubClaimComponents;
            resourceInputs["ciPipelineVariablesMinimumOverrideRole"] = state?.ciPipelineVariablesMinimumOverrideRole;
            resourceInputs["ciPushRepositoryForJobTokenAllowed"] = state?.ciPushRepositoryForJobTokenAllowed;
            resourceInputs["ciRestrictPipelineCancellationRole"] = state?.ciRestrictPipelineCancellationRole;
            resourceInputs["ciSeparatedCaches"] = state?.ciSeparatedCaches;
            resourceInputs["containerExpirationPolicy"] = state?.containerExpirationPolicy;
            resourceInputs["containerRegistryAccessLevel"] = state?.containerRegistryAccessLevel;
            resourceInputs["containerRegistryEnabled"] = state?.containerRegistryEnabled;
            resourceInputs["defaultBranch"] = state?.defaultBranch;
            resourceInputs["description"] = state?.description;
            resourceInputs["emailsEnabled"] = state?.emailsEnabled;
            resourceInputs["emptyRepo"] = state?.emptyRepo;
            resourceInputs["environmentsAccessLevel"] = state?.environmentsAccessLevel;
            resourceInputs["externalAuthorizationClassificationLabel"] = state?.externalAuthorizationClassificationLabel;
            resourceInputs["featureFlagsAccessLevel"] = state?.featureFlagsAccessLevel;
            resourceInputs["forkedFromProjectId"] = state?.forkedFromProjectId;
            resourceInputs["forkingAccessLevel"] = state?.forkingAccessLevel;
            resourceInputs["groupRunnersEnabled"] = state?.groupRunnersEnabled;
            resourceInputs["groupWithProjectTemplatesId"] = state?.groupWithProjectTemplatesId;
            resourceInputs["httpUrlToRepo"] = state?.httpUrlToRepo;
            resourceInputs["importUrl"] = state?.importUrl;
            resourceInputs["importUrlPassword"] = state?.importUrlPassword;
            resourceInputs["importUrlUsername"] = state?.importUrlUsername;
            resourceInputs["infrastructureAccessLevel"] = state?.infrastructureAccessLevel;
            resourceInputs["initializeWithReadme"] = state?.initializeWithReadme;
            resourceInputs["issuesAccessLevel"] = state?.issuesAccessLevel;
            resourceInputs["issuesEnabled"] = state?.issuesEnabled;
            resourceInputs["issuesTemplate"] = state?.issuesTemplate;
            resourceInputs["keepLatestArtifact"] = state?.keepLatestArtifact;
            resourceInputs["lfsEnabled"] = state?.lfsEnabled;
            resourceInputs["mergeCommitTemplate"] = state?.mergeCommitTemplate;
            resourceInputs["mergeMethod"] = state?.mergeMethod;
            resourceInputs["mergePipelinesEnabled"] = state?.mergePipelinesEnabled;
            resourceInputs["mergeRequestsAccessLevel"] = state?.mergeRequestsAccessLevel;
            resourceInputs["mergeRequestsEnabled"] = state?.mergeRequestsEnabled;
            resourceInputs["mergeRequestsTemplate"] = state?.mergeRequestsTemplate;
            resourceInputs["mergeTrainsEnabled"] = state?.mergeTrainsEnabled;
            resourceInputs["mirror"] = state?.mirror;
            resourceInputs["mirrorOverwritesDivergedBranches"] = state?.mirrorOverwritesDivergedBranches;
            resourceInputs["mirrorTriggerBuilds"] = state?.mirrorTriggerBuilds;
            resourceInputs["modelExperimentsAccessLevel"] = state?.modelExperimentsAccessLevel;
            resourceInputs["modelRegistryAccessLevel"] = state?.modelRegistryAccessLevel;
            resourceInputs["monitorAccessLevel"] = state?.monitorAccessLevel;
            resourceInputs["mrDefaultTargetSelf"] = state?.mrDefaultTargetSelf;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespaceId"] = state?.namespaceId;
            resourceInputs["onlyAllowMergeIfAllDiscussionsAreResolved"] = state?.onlyAllowMergeIfAllDiscussionsAreResolved;
            resourceInputs["onlyAllowMergeIfPipelineSucceeds"] = state?.onlyAllowMergeIfPipelineSucceeds;
            resourceInputs["onlyMirrorProtectedBranches"] = state?.onlyMirrorProtectedBranches;
            resourceInputs["packagesEnabled"] = state?.packagesEnabled;
            resourceInputs["pagesAccessLevel"] = state?.pagesAccessLevel;
            resourceInputs["path"] = state?.path;
            resourceInputs["pathWithNamespace"] = state?.pathWithNamespace;
            resourceInputs["permanentlyDeleteOnDestroy"] = state?.permanentlyDeleteOnDestroy;
            resourceInputs["pipelinesEnabled"] = state?.pipelinesEnabled;
            resourceInputs["preReceiveSecretDetectionEnabled"] = state?.preReceiveSecretDetectionEnabled;
            resourceInputs["preventMergeWithoutJiraIssue"] = state?.preventMergeWithoutJiraIssue;
            resourceInputs["printingMergeRequestLinkEnabled"] = state?.printingMergeRequestLinkEnabled;
            resourceInputs["publicBuilds"] = state?.publicBuilds;
            resourceInputs["publicJobs"] = state?.publicJobs;
            resourceInputs["pushRules"] = state?.pushRules;
            resourceInputs["releasesAccessLevel"] = state?.releasesAccessLevel;
            resourceInputs["removeSourceBranchAfterMerge"] = state?.removeSourceBranchAfterMerge;
            resourceInputs["repositoryAccessLevel"] = state?.repositoryAccessLevel;
            resourceInputs["repositoryStorage"] = state?.repositoryStorage;
            resourceInputs["requestAccessEnabled"] = state?.requestAccessEnabled;
            resourceInputs["requirementsAccessLevel"] = state?.requirementsAccessLevel;
            resourceInputs["resolveOutdatedDiffDiscussions"] = state?.resolveOutdatedDiffDiscussions;
            resourceInputs["restrictUserDefinedVariables"] = state?.restrictUserDefinedVariables;
            resourceInputs["runnersToken"] = state?.runnersToken;
            resourceInputs["securityAndComplianceAccessLevel"] = state?.securityAndComplianceAccessLevel;
            resourceInputs["sharedRunnersEnabled"] = state?.sharedRunnersEnabled;
            resourceInputs["skipWaitForDefaultBranchProtection"] = state?.skipWaitForDefaultBranchProtection;
            resourceInputs["snippetsAccessLevel"] = state?.snippetsAccessLevel;
            resourceInputs["snippetsEnabled"] = state?.snippetsEnabled;
            resourceInputs["squashCommitTemplate"] = state?.squashCommitTemplate;
            resourceInputs["squashOption"] = state?.squashOption;
            resourceInputs["sshUrlToRepo"] = state?.sshUrlToRepo;
            resourceInputs["suggestionCommitMessage"] = state?.suggestionCommitMessage;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["templateName"] = state?.templateName;
            resourceInputs["templateProjectId"] = state?.templateProjectId;
            resourceInputs["topics"] = state?.topics;
            resourceInputs["useCustomTemplate"] = state?.useCustomTemplate;
            resourceInputs["visibilityLevel"] = state?.visibilityLevel;
            resourceInputs["webUrl"] = state?.webUrl;
            resourceInputs["wikiAccessLevel"] = state?.wikiAccessLevel;
            resourceInputs["wikiEnabled"] = state?.wikiEnabled;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["allowMergeOnSkippedPipeline"] = args?.allowMergeOnSkippedPipeline;
            resourceInputs["allowPipelineTriggerApproveDeployment"] = args?.allowPipelineTriggerApproveDeployment;
            resourceInputs["analyticsAccessLevel"] = args?.analyticsAccessLevel;
            resourceInputs["approvalsBeforeMerge"] = args?.approvalsBeforeMerge;
            resourceInputs["archiveOnDestroy"] = args?.archiveOnDestroy;
            resourceInputs["archived"] = args?.archived;
            resourceInputs["autoCancelPendingPipelines"] = args?.autoCancelPendingPipelines;
            resourceInputs["autoDevopsDeployStrategy"] = args?.autoDevopsDeployStrategy;
            resourceInputs["autoDevopsEnabled"] = args?.autoDevopsEnabled;
            resourceInputs["autoDuoCodeReviewEnabled"] = args?.autoDuoCodeReviewEnabled;
            resourceInputs["autocloseReferencedIssues"] = args?.autocloseReferencedIssues;
            resourceInputs["avatar"] = args?.avatar;
            resourceInputs["avatarHash"] = args?.avatarHash;
            resourceInputs["branches"] = args?.branches;
            resourceInputs["buildGitStrategy"] = args?.buildGitStrategy;
            resourceInputs["buildTimeout"] = args?.buildTimeout;
            resourceInputs["buildsAccessLevel"] = args?.buildsAccessLevel;
            resourceInputs["ciConfigPath"] = args?.ciConfigPath;
            resourceInputs["ciDefaultGitDepth"] = args?.ciDefaultGitDepth;
            resourceInputs["ciDeletePipelinesInSeconds"] = args?.ciDeletePipelinesInSeconds;
            resourceInputs["ciForwardDeploymentEnabled"] = args?.ciForwardDeploymentEnabled;
            resourceInputs["ciForwardDeploymentRollbackAllowed"] = args?.ciForwardDeploymentRollbackAllowed;
            resourceInputs["ciIdTokenSubClaimComponents"] = args?.ciIdTokenSubClaimComponents;
            resourceInputs["ciPipelineVariablesMinimumOverrideRole"] = args?.ciPipelineVariablesMinimumOverrideRole;
            resourceInputs["ciPushRepositoryForJobTokenAllowed"] = args?.ciPushRepositoryForJobTokenAllowed;
            resourceInputs["ciRestrictPipelineCancellationRole"] = args?.ciRestrictPipelineCancellationRole;
            resourceInputs["ciSeparatedCaches"] = args?.ciSeparatedCaches;
            resourceInputs["containerExpirationPolicy"] = args?.containerExpirationPolicy;
            resourceInputs["containerRegistryAccessLevel"] = args?.containerRegistryAccessLevel;
            resourceInputs["containerRegistryEnabled"] = args?.containerRegistryEnabled;
            resourceInputs["defaultBranch"] = args?.defaultBranch;
            resourceInputs["description"] = args?.description;
            resourceInputs["emailsEnabled"] = args?.emailsEnabled;
            resourceInputs["environmentsAccessLevel"] = args?.environmentsAccessLevel;
            resourceInputs["externalAuthorizationClassificationLabel"] = args?.externalAuthorizationClassificationLabel;
            resourceInputs["featureFlagsAccessLevel"] = args?.featureFlagsAccessLevel;
            resourceInputs["forkedFromProjectId"] = args?.forkedFromProjectId;
            resourceInputs["forkingAccessLevel"] = args?.forkingAccessLevel;
            resourceInputs["groupRunnersEnabled"] = args?.groupRunnersEnabled;
            resourceInputs["groupWithProjectTemplatesId"] = args?.groupWithProjectTemplatesId;
            resourceInputs["importUrl"] = args?.importUrl;
            resourceInputs["importUrlPassword"] = args?.importUrlPassword ? pulumi.secret(args.importUrlPassword) : undefined;
            resourceInputs["importUrlUsername"] = args?.importUrlUsername;
            resourceInputs["infrastructureAccessLevel"] = args?.infrastructureAccessLevel;
            resourceInputs["initializeWithReadme"] = args?.initializeWithReadme;
            resourceInputs["issuesAccessLevel"] = args?.issuesAccessLevel;
            resourceInputs["issuesEnabled"] = args?.issuesEnabled;
            resourceInputs["issuesTemplate"] = args?.issuesTemplate;
            resourceInputs["keepLatestArtifact"] = args?.keepLatestArtifact;
            resourceInputs["lfsEnabled"] = args?.lfsEnabled;
            resourceInputs["mergeCommitTemplate"] = args?.mergeCommitTemplate;
            resourceInputs["mergeMethod"] = args?.mergeMethod;
            resourceInputs["mergePipelinesEnabled"] = args?.mergePipelinesEnabled;
            resourceInputs["mergeRequestsAccessLevel"] = args?.mergeRequestsAccessLevel;
            resourceInputs["mergeRequestsEnabled"] = args?.mergeRequestsEnabled;
            resourceInputs["mergeRequestsTemplate"] = args?.mergeRequestsTemplate;
            resourceInputs["mergeTrainsEnabled"] = args?.mergeTrainsEnabled;
            resourceInputs["mirror"] = args?.mirror;
            resourceInputs["mirrorOverwritesDivergedBranches"] = args?.mirrorOverwritesDivergedBranches;
            resourceInputs["mirrorTriggerBuilds"] = args?.mirrorTriggerBuilds;
            resourceInputs["modelExperimentsAccessLevel"] = args?.modelExperimentsAccessLevel;
            resourceInputs["modelRegistryAccessLevel"] = args?.modelRegistryAccessLevel;
            resourceInputs["monitorAccessLevel"] = args?.monitorAccessLevel;
            resourceInputs["mrDefaultTargetSelf"] = args?.mrDefaultTargetSelf;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespaceId"] = args?.namespaceId;
            resourceInputs["onlyAllowMergeIfAllDiscussionsAreResolved"] = args?.onlyAllowMergeIfAllDiscussionsAreResolved;
            resourceInputs["onlyAllowMergeIfPipelineSucceeds"] = args?.onlyAllowMergeIfPipelineSucceeds;
            resourceInputs["onlyMirrorProtectedBranches"] = args?.onlyMirrorProtectedBranches;
            resourceInputs["packagesEnabled"] = args?.packagesEnabled;
            resourceInputs["pagesAccessLevel"] = args?.pagesAccessLevel;
            resourceInputs["path"] = args?.path;
            resourceInputs["permanentlyDeleteOnDestroy"] = args?.permanentlyDeleteOnDestroy;
            resourceInputs["pipelinesEnabled"] = args?.pipelinesEnabled;
            resourceInputs["preReceiveSecretDetectionEnabled"] = args?.preReceiveSecretDetectionEnabled;
            resourceInputs["preventMergeWithoutJiraIssue"] = args?.preventMergeWithoutJiraIssue;
            resourceInputs["printingMergeRequestLinkEnabled"] = args?.printingMergeRequestLinkEnabled;
            resourceInputs["publicBuilds"] = args?.publicBuilds;
            resourceInputs["publicJobs"] = args?.publicJobs;
            resourceInputs["pushRules"] = args?.pushRules;
            resourceInputs["releasesAccessLevel"] = args?.releasesAccessLevel;
            resourceInputs["removeSourceBranchAfterMerge"] = args?.removeSourceBranchAfterMerge;
            resourceInputs["repositoryAccessLevel"] = args?.repositoryAccessLevel;
            resourceInputs["repositoryStorage"] = args?.repositoryStorage;
            resourceInputs["requestAccessEnabled"] = args?.requestAccessEnabled;
            resourceInputs["requirementsAccessLevel"] = args?.requirementsAccessLevel;
            resourceInputs["resolveOutdatedDiffDiscussions"] = args?.resolveOutdatedDiffDiscussions;
            resourceInputs["restrictUserDefinedVariables"] = args?.restrictUserDefinedVariables;
            resourceInputs["securityAndComplianceAccessLevel"] = args?.securityAndComplianceAccessLevel;
            resourceInputs["sharedRunnersEnabled"] = args?.sharedRunnersEnabled;
            resourceInputs["skipWaitForDefaultBranchProtection"] = args?.skipWaitForDefaultBranchProtection;
            resourceInputs["snippetsAccessLevel"] = args?.snippetsAccessLevel;
            resourceInputs["snippetsEnabled"] = args?.snippetsEnabled;
            resourceInputs["squashCommitTemplate"] = args?.squashCommitTemplate;
            resourceInputs["squashOption"] = args?.squashOption;
            resourceInputs["suggestionCommitMessage"] = args?.suggestionCommitMessage;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateName"] = args?.templateName;
            resourceInputs["templateProjectId"] = args?.templateProjectId;
            resourceInputs["topics"] = args?.topics;
            resourceInputs["useCustomTemplate"] = args?.useCustomTemplate;
            resourceInputs["visibilityLevel"] = args?.visibilityLevel;
            resourceInputs["wikiAccessLevel"] = args?.wikiAccessLevel;
            resourceInputs["wikiEnabled"] = args?.wikiEnabled;
            resourceInputs["avatarUrl"] = undefined /*out*/;
            resourceInputs["emptyRepo"] = undefined /*out*/;
            resourceInputs["httpUrlToRepo"] = undefined /*out*/;
            resourceInputs["pathWithNamespace"] = undefined /*out*/;
            resourceInputs["runnersToken"] = undefined /*out*/;
            resourceInputs["sshUrlToRepo"] = undefined /*out*/;
            resourceInputs["webUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["importUrlPassword", "runnersToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     */
    allowMergeOnSkippedPipeline?: pulumi.Input<boolean>;
    /**
     * Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
     */
    allowPipelineTriggerApproveDeployment?: pulumi.Input<boolean>;
    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     */
    analyticsAccessLevel?: pulumi.Input<string>;
    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     */
    approvalsBeforeMerge?: pulumi.Input<number>;
    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     */
    archived?: pulumi.Input<boolean>;
    /**
     * Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     */
    autoCancelPendingPipelines?: pulumi.Input<string>;
    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
     */
    autoDevopsDeployStrategy?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for this project.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
     */
    autoDuoCodeReviewEnabled?: pulumi.Input<boolean>;
    /**
     * Set whether auto-closing referenced issues on default branch.
     */
    autocloseReferencedIssues?: pulumi.Input<boolean>;
    /**
     * A local path to the avatar image to upload. **Note**: not available for imported resources.
     */
    avatar?: pulumi.Input<string>;
    /**
     * The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
     */
    avatarHash?: pulumi.Input<string>;
    /**
     * The URL of the avatar image.
     */
    avatarUrl?: pulumi.Input<string>;
    /**
     * Branches to fork (empty for all branches).
     */
    branches?: pulumi.Input<string>;
    /**
     * The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
     */
    buildGitStrategy?: pulumi.Input<string>;
    /**
     * The maximum amount of time, in seconds, that a job can run.
     */
    buildTimeout?: pulumi.Input<number>;
    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     */
    buildsAccessLevel?: pulumi.Input<string>;
    /**
     * Custom Path to CI config file.
     */
    ciConfigPath?: pulumi.Input<string>;
    /**
     * Default number of revisions for shallow cloning.
     */
    ciDefaultGitDepth?: pulumi.Input<number>;
    /**
     * Pipelines older than the configured time are deleted.
     */
    ciDeletePipelinesInSeconds?: pulumi.Input<number>;
    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     */
    ciForwardDeploymentEnabled?: pulumi.Input<boolean>;
    /**
     * Allow job retries even if the deployment job is outdated.
     */
    ciForwardDeploymentRollbackAllowed?: pulumi.Input<boolean>;
    /**
     * Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to ["project*path", "ref*type", "ref"]. Introduced in GitLab 17.10.
     */
    ciIdTokenSubClaimComponents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `noOneAllowed`
     */
    ciPipelineVariablesMinimumOverrideRole?: pulumi.Input<string>;
    /**
     * Allow Git push requests to your project repository that are authenticated with a CI/CD job token.
     */
    ciPushRepositoryForJobTokenAllowed?: pulumi.Input<boolean>;
    /**
     * The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
     */
    ciRestrictPipelineCancellationRole?: pulumi.Input<string>;
    /**
     * Use separate caches for protected branches.
     */
    ciSeparatedCaches?: pulumi.Input<boolean>;
    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
     */
    containerExpirationPolicy?: pulumi.Input<inputs.ProjectContainerExpirationPolicy>;
    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     */
    containerRegistryAccessLevel?: pulumi.Input<string>;
    /**
     * Enable container registry for the project.
     *
     * @deprecated Use `containerRegistryAccessLevel` instead.
     */
    containerRegistryEnabled?: pulumi.Input<boolean>;
    /**
     * The default branch for the project.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * A description of the project.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable email notifications.
     */
    emailsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the project is empty.
     */
    emptyRepo?: pulumi.Input<boolean>;
    /**
     * Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
     */
    environmentsAccessLevel?: pulumi.Input<string>;
    /**
     * The classification label for the project.
     */
    externalAuthorizationClassificationLabel?: pulumi.Input<string>;
    /**
     * Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
     */
    featureFlagsAccessLevel?: pulumi.Input<string>;
    /**
     * The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
     */
    forkedFromProjectId?: pulumi.Input<number>;
    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     */
    forkingAccessLevel?: pulumi.Input<string>;
    /**
     * Enable group runners for this project.
     */
    groupRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     */
    groupWithProjectTemplatesId?: pulumi.Input<number>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    httpUrlToRepo?: pulumi.Input<string>;
    /**
     * Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forkedFromProjectId` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `importUrlUsername` and `importUrlPassword`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
     */
    importUrl?: pulumi.Input<string>;
    /**
     * The password for the `importUrl`. The value of this field is used to construct a valid `importUrl` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
     */
    importUrlPassword?: pulumi.Input<string>;
    /**
     * The username for the `importUrl`. The value of this field is used to construct a valid `importUrl` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
     */
    importUrlUsername?: pulumi.Input<string>;
    /**
     * Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
     */
    infrastructureAccessLevel?: pulumi.Input<string>;
    /**
     * Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `defaultBranch`.
     */
    initializeWithReadme?: pulumi.Input<boolean>;
    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     */
    issuesAccessLevel?: pulumi.Input<string>;
    /**
     * Enable issue tracking for the project.
     */
    issuesEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new issues in the project.
     */
    issuesTemplate?: pulumi.Input<string>;
    /**
     * Disable or enable the ability to keep the latest artifact for this project.
     */
    keepLatestArtifact?: pulumi.Input<boolean>;
    /**
     * Enable LFS for the project.
     */
    lfsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create merge commit message in merge requests.
     */
    mergeCommitTemplate?: pulumi.Input<string>;
    /**
     * Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
     */
    mergeMethod?: pulumi.Input<string>;
    /**
     * Enable or disable merge pipelines.
     */
    mergePipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     */
    mergeRequestsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable merge requests for the project.
     */
    mergeRequestsEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new merge requests in the project.
     */
    mergeRequestsTemplate?: pulumi.Input<string>;
    /**
     * Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
     */
    mergeTrainsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable project pull mirror.
     */
    mirror?: pulumi.Input<boolean>;
    /**
     * Enable overwrite diverged branches for a mirrored project.
     */
    mirrorOverwritesDivergedBranches?: pulumi.Input<boolean>;
    /**
     * Enable trigger builds on pushes for a mirrored project.
     */
    mirrorTriggerBuilds?: pulumi.Input<boolean>;
    /**
     * Set visibility of machine learning model experiments. Valid values are `disabled`, `private`, `enabled`.
     */
    modelExperimentsAccessLevel?: pulumi.Input<string>;
    /**
     * Set visibility of machine learning model registry. Valid values are `disabled`, `private`, `enabled`.
     */
    modelRegistryAccessLevel?: pulumi.Input<string>;
    /**
     * Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
     */
    monitorAccessLevel?: pulumi.Input<string>;
    /**
     * For forked projects, target merge requests to this project. If false, the target will be the upstream project.
     */
    mrDefaultTargetSelf?: pulumi.Input<boolean>;
    /**
     * The name of the project.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace (group or user) of the project. Defaults to your user.
     */
    namespaceId?: pulumi.Input<number>;
    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     */
    onlyAllowMergeIfAllDiscussionsAreResolved?: pulumi.Input<boolean>;
    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     */
    onlyAllowMergeIfPipelineSucceeds?: pulumi.Input<boolean>;
    /**
     * Enable only mirror protected branches for a mirrored project.
     */
    onlyMirrorProtectedBranches?: pulumi.Input<boolean>;
    /**
     * Enable packages repository for the project.
     */
    packagesEnabled?: pulumi.Input<boolean>;
    /**
     * Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
     */
    pagesAccessLevel?: pulumi.Input<string>;
    /**
     * The path of the repository.
     */
    path?: pulumi.Input<string>;
    /**
     * The path of the repository with namespace.
     */
    pathWithNamespace?: pulumi.Input<string>;
    /**
     * Set to `true` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
     */
    permanentlyDeleteOnDestroy?: pulumi.Input<boolean>;
    /**
     * Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
     *
     * @deprecated Deprecated in favor of `buildsAccessLevel`
     */
    pipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
     */
    preReceiveSecretDetectionEnabled?: pulumi.Input<boolean>;
    /**
     * Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
     */
    preventMergeWithoutJiraIssue?: pulumi.Input<boolean>;
    /**
     * Show link to create/view merge request when pushing from the command line
     */
    printingMergeRequestLinkEnabled?: pulumi.Input<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     *
     * @deprecated The `publicBuilds` attribute has been deprecated in favor of `publicJobs` and will be removed in the next major version of the provider.
     */
    publicBuilds?: pulumi.Input<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     */
    publicJobs?: pulumi.Input<boolean>;
    /**
     * Push rules for the project.
     */
    pushRules?: pulumi.Input<inputs.ProjectPushRules>;
    /**
     * Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
     */
    releasesAccessLevel?: pulumi.Input<string>;
    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     */
    removeSourceBranchAfterMerge?: pulumi.Input<boolean>;
    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     */
    repositoryAccessLevel?: pulumi.Input<string>;
    /**
     * Which storage shard the repository is on. (administrator only)
     */
    repositoryStorage?: pulumi.Input<string>;
    /**
     * Allow users to request member access.
     */
    requestAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     */
    requirementsAccessLevel?: pulumi.Input<string>;
    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     */
    resolveOutdatedDiffDiscussions?: pulumi.Input<boolean>;
    /**
     * Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
     */
    restrictUserDefinedVariables?: pulumi.Input<boolean>;
    /**
     * Registration token to use during runner setup.
     */
    runnersToken?: pulumi.Input<string>;
    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     */
    securityAndComplianceAccessLevel?: pulumi.Input<string>;
    /**
     * Enable shared runners for this project.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     */
    skipWaitForDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     */
    snippetsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable snippets for the project.
     */
    snippetsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create squash commit message in merge requests.
     */
    squashCommitTemplate?: pulumi.Input<string>;
    /**
     * Squash commits when merge request is merged. Valid values are `never` (Do not allow), `always` (Require), `defaultOn` (Encourage), or `defaultOff` (Allow). The default value is `defaultOff` (Allow).
     */
    squashOption?: pulumi.Input<string>;
    /**
     * URL that can be provided to `git clone` to clone the
     */
    sshUrlToRepo?: pulumi.Input<string>;
    /**
     * The commit message used to apply merge request suggestions.
     */
    suggestionCommitMessage?: pulumi.Input<string>;
    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
     */
    templateName?: pulumi.Input<string>;
    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     */
    templateProjectId?: pulumi.Input<number>;
    /**
     * The list of topics for the project.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     * 	> When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
     */
    useCustomTemplate?: pulumi.Input<boolean>;
    /**
     * Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
     */
    visibilityLevel?: pulumi.Input<string>;
    /**
     * URL that can be used to find the project in a browser.
     */
    webUrl?: pulumi.Input<string>;
    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     */
    wikiAccessLevel?: pulumi.Input<string>;
    /**
     * Enable wiki for the project.
     */
    wikiEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Set to true if you want to treat skipped pipelines as if they finished with success.
     */
    allowMergeOnSkippedPipeline?: pulumi.Input<boolean>;
    /**
     * Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
     */
    allowPipelineTriggerApproveDeployment?: pulumi.Input<boolean>;
    /**
     * Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
     */
    analyticsAccessLevel?: pulumi.Input<string>;
    /**
     * Number of merge request approvals required for merging. Default is 0.
     * This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
     * and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
     * In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
     */
    approvalsBeforeMerge?: pulumi.Input<number>;
    /**
     * Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
     */
    archived?: pulumi.Input<boolean>;
    /**
     * Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
     */
    autoCancelPendingPipelines?: pulumi.Input<string>;
    /**
     * Auto Deploy strategy. Valid values are `continuous`, `manual`, `timedIncremental`.
     */
    autoDevopsDeployStrategy?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for this project.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
     */
    autoDuoCodeReviewEnabled?: pulumi.Input<boolean>;
    /**
     * Set whether auto-closing referenced issues on default branch.
     */
    autocloseReferencedIssues?: pulumi.Input<boolean>;
    /**
     * A local path to the avatar image to upload. **Note**: not available for imported resources.
     */
    avatar?: pulumi.Input<string>;
    /**
     * The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
     */
    avatarHash?: pulumi.Input<string>;
    /**
     * Branches to fork (empty for all branches).
     */
    branches?: pulumi.Input<string>;
    /**
     * The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
     */
    buildGitStrategy?: pulumi.Input<string>;
    /**
     * The maximum amount of time, in seconds, that a job can run.
     */
    buildTimeout?: pulumi.Input<number>;
    /**
     * Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
     */
    buildsAccessLevel?: pulumi.Input<string>;
    /**
     * Custom Path to CI config file.
     */
    ciConfigPath?: pulumi.Input<string>;
    /**
     * Default number of revisions for shallow cloning.
     */
    ciDefaultGitDepth?: pulumi.Input<number>;
    /**
     * Pipelines older than the configured time are deleted.
     */
    ciDeletePipelinesInSeconds?: pulumi.Input<number>;
    /**
     * When a new deployment job starts, skip older deployment jobs that are still pending.
     */
    ciForwardDeploymentEnabled?: pulumi.Input<boolean>;
    /**
     * Allow job retries even if the deployment job is outdated.
     */
    ciForwardDeploymentRollbackAllowed?: pulumi.Input<boolean>;
    /**
     * Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to ["project*path", "ref*type", "ref"]. Introduced in GitLab 17.10.
     */
    ciIdTokenSubClaimComponents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `noOneAllowed`
     */
    ciPipelineVariablesMinimumOverrideRole?: pulumi.Input<string>;
    /**
     * Allow Git push requests to your project repository that are authenticated with a CI/CD job token.
     */
    ciPushRepositoryForJobTokenAllowed?: pulumi.Input<boolean>;
    /**
     * The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
     */
    ciRestrictPipelineCancellationRole?: pulumi.Input<string>;
    /**
     * Use separate caches for protected branches.
     */
    ciSeparatedCaches?: pulumi.Input<boolean>;
    /**
     * Set the image cleanup policy for this project. **Note**: this field is sometimes named `containerExpirationPolicyAttributes` in the GitLab Upstream API.
     */
    containerExpirationPolicy?: pulumi.Input<inputs.ProjectContainerExpirationPolicy>;
    /**
     * Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
     */
    containerRegistryAccessLevel?: pulumi.Input<string>;
    /**
     * Enable container registry for the project.
     *
     * @deprecated Use `containerRegistryAccessLevel` instead.
     */
    containerRegistryEnabled?: pulumi.Input<boolean>;
    /**
     * The default branch for the project.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * A description of the project.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable email notifications.
     */
    emailsEnabled?: pulumi.Input<boolean>;
    /**
     * Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
     */
    environmentsAccessLevel?: pulumi.Input<string>;
    /**
     * The classification label for the project.
     */
    externalAuthorizationClassificationLabel?: pulumi.Input<string>;
    /**
     * Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
     */
    featureFlagsAccessLevel?: pulumi.Input<string>;
    /**
     * The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
     */
    forkedFromProjectId?: pulumi.Input<number>;
    /**
     * Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
     */
    forkingAccessLevel?: pulumi.Input<string>;
    /**
     * Enable group runners for this project.
     */
    groupRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
     */
    groupWithProjectTemplatesId?: pulumi.Input<number>;
    /**
     * Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forkedFromProjectId` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `importUrlUsername` and `importUrlPassword`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
     */
    importUrl?: pulumi.Input<string>;
    /**
     * The password for the `importUrl`. The value of this field is used to construct a valid `importUrl` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
     */
    importUrlPassword?: pulumi.Input<string>;
    /**
     * The username for the `importUrl`. The value of this field is used to construct a valid `importUrl` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
     */
    importUrlUsername?: pulumi.Input<string>;
    /**
     * Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
     */
    infrastructureAccessLevel?: pulumi.Input<string>;
    /**
     * Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `defaultBranch`.
     */
    initializeWithReadme?: pulumi.Input<boolean>;
    /**
     * Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
     */
    issuesAccessLevel?: pulumi.Input<string>;
    /**
     * Enable issue tracking for the project.
     */
    issuesEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new issues in the project.
     */
    issuesTemplate?: pulumi.Input<string>;
    /**
     * Disable or enable the ability to keep the latest artifact for this project.
     */
    keepLatestArtifact?: pulumi.Input<boolean>;
    /**
     * Enable LFS for the project.
     */
    lfsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create merge commit message in merge requests.
     */
    mergeCommitTemplate?: pulumi.Input<string>;
    /**
     * Set the merge method. Valid values are `merge`, `rebaseMerge`, `ff`.
     */
    mergeMethod?: pulumi.Input<string>;
    /**
     * Enable or disable merge pipelines.
     */
    mergePipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
     */
    mergeRequestsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable merge requests for the project.
     */
    mergeRequestsEnabled?: pulumi.Input<boolean>;
    /**
     * Sets the template for new merge requests in the project.
     */
    mergeRequestsTemplate?: pulumi.Input<string>;
    /**
     * Enable or disable merge trains. Requires `mergePipelinesEnabled` to be set to `true` to take effect.
     */
    mergeTrainsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable project pull mirror.
     */
    mirror?: pulumi.Input<boolean>;
    /**
     * Enable overwrite diverged branches for a mirrored project.
     */
    mirrorOverwritesDivergedBranches?: pulumi.Input<boolean>;
    /**
     * Enable trigger builds on pushes for a mirrored project.
     */
    mirrorTriggerBuilds?: pulumi.Input<boolean>;
    /**
     * Set visibility of machine learning model experiments. Valid values are `disabled`, `private`, `enabled`.
     */
    modelExperimentsAccessLevel?: pulumi.Input<string>;
    /**
     * Set visibility of machine learning model registry. Valid values are `disabled`, `private`, `enabled`.
     */
    modelRegistryAccessLevel?: pulumi.Input<string>;
    /**
     * Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
     */
    monitorAccessLevel?: pulumi.Input<string>;
    /**
     * For forked projects, target merge requests to this project. If false, the target will be the upstream project.
     */
    mrDefaultTargetSelf?: pulumi.Input<boolean>;
    /**
     * The name of the project.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace (group or user) of the project. Defaults to your user.
     */
    namespaceId?: pulumi.Input<number>;
    /**
     * Set to true if you want allow merges only if all discussions are resolved.
     */
    onlyAllowMergeIfAllDiscussionsAreResolved?: pulumi.Input<boolean>;
    /**
     * Set to true if you want allow merges only if a pipeline succeeds.
     */
    onlyAllowMergeIfPipelineSucceeds?: pulumi.Input<boolean>;
    /**
     * Enable only mirror protected branches for a mirrored project.
     */
    onlyMirrorProtectedBranches?: pulumi.Input<boolean>;
    /**
     * Enable packages repository for the project.
     */
    packagesEnabled?: pulumi.Input<boolean>;
    /**
     * Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
     */
    pagesAccessLevel?: pulumi.Input<string>;
    /**
     * The path of the repository.
     */
    path?: pulumi.Input<string>;
    /**
     * Set to `true` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
     */
    permanentlyDeleteOnDestroy?: pulumi.Input<boolean>;
    /**
     * Enable pipelines for the project. The `pipelinesEnabled` field is being sent as `jobsEnabled` in the GitLab API calls.
     *
     * @deprecated Deprecated in favor of `buildsAccessLevel`
     */
    pipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
     */
    preReceiveSecretDetectionEnabled?: pulumi.Input<boolean>;
    /**
     * Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
     */
    preventMergeWithoutJiraIssue?: pulumi.Input<boolean>;
    /**
     * Show link to create/view merge request when pushing from the command line
     */
    printingMergeRequestLinkEnabled?: pulumi.Input<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     *
     * @deprecated The `publicBuilds` attribute has been deprecated in favor of `publicJobs` and will be removed in the next major version of the provider.
     */
    publicBuilds?: pulumi.Input<boolean>;
    /**
     * If true, jobs can be viewed by non-project members.
     */
    publicJobs?: pulumi.Input<boolean>;
    /**
     * Push rules for the project.
     */
    pushRules?: pulumi.Input<inputs.ProjectPushRules>;
    /**
     * Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
     */
    releasesAccessLevel?: pulumi.Input<string>;
    /**
     * Enable `Delete source branch` option by default for all new merge requests.
     */
    removeSourceBranchAfterMerge?: pulumi.Input<boolean>;
    /**
     * Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
     */
    repositoryAccessLevel?: pulumi.Input<string>;
    /**
     * Which storage shard the repository is on. (administrator only)
     */
    repositoryStorage?: pulumi.Input<string>;
    /**
     * Allow users to request member access.
     */
    requestAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
     */
    requirementsAccessLevel?: pulumi.Input<string>;
    /**
     * Automatically resolve merge request diffs discussions on lines changed with a push.
     */
    resolveOutdatedDiffDiscussions?: pulumi.Input<boolean>;
    /**
     * Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
     */
    restrictUserDefinedVariables?: pulumi.Input<boolean>;
    /**
     * Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
     */
    securityAndComplianceAccessLevel?: pulumi.Input<string>;
    /**
     * Enable shared runners for this project.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * If `true`, the default behavior to wait for the default branch protection to be created is skipped.
     * This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
     * There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
     * This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
     */
    skipWaitForDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
     */
    snippetsAccessLevel?: pulumi.Input<string>;
    /**
     * Enable snippets for the project.
     */
    snippetsEnabled?: pulumi.Input<boolean>;
    /**
     * Template used to create squash commit message in merge requests.
     */
    squashCommitTemplate?: pulumi.Input<string>;
    /**
     * Squash commits when merge request is merged. Valid values are `never` (Do not allow), `always` (Require), `defaultOn` (Encourage), or `defaultOff` (Allow). The default value is `defaultOff` (Allow).
     */
    squashOption?: pulumi.Input<string>;
    /**
     * The commit message used to apply merge request suggestions.
     */
    suggestionCommitMessage?: pulumi.Input<string>;
    /**
     * The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `templateProjectId`.
     */
    templateName?: pulumi.Input<string>;
    /**
     * When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `templateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
     */
    templateProjectId?: pulumi.Input<number>;
    /**
     * The list of topics for the project.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
     * 	> When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
     */
    useCustomTemplate?: pulumi.Input<boolean>;
    /**
     * Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
     */
    visibilityLevel?: pulumi.Input<string>;
    /**
     * Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
     */
    wikiAccessLevel?: pulumi.Input<string>;
    /**
     * Enable wiki for the project.
     */
    wikiEnabled?: pulumi.Input<boolean>;
}
