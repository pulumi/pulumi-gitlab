// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.ValueStreamAnalytics` resource allows to manage the lifecycle of value stream analytics.
 *
 * > This resource requires a GitLab Enterprise instance with a Premium license to create custom value stream analytics.
 *
 * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#mutationvaluestreamcreate)
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_value_stream_analytics`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_value_stream_analytics.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * Gitlab value stream analytics can be imported with a key composed of `<full_path_type>:<full_path>:<value_stream_id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/valueStreamAnalytics:ValueStreamAnalytics group "group:people/engineers:42"
 * ```
 *
 * ```sh
 * $ pulumi import gitlab:index/valueStreamAnalytics:ValueStreamAnalytics project "project:projects/sample:43"
 * ```
 */
export class ValueStreamAnalytics extends pulumi.CustomResource {
    /**
     * Get an existing ValueStreamAnalytics resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ValueStreamAnalyticsState, opts?: pulumi.CustomResourceOptions): ValueStreamAnalytics {
        return new ValueStreamAnalytics(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/valueStreamAnalytics:ValueStreamAnalytics';

    /**
     * Returns true if the given object is an instance of ValueStreamAnalytics.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ValueStreamAnalytics {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ValueStreamAnalytics.__pulumiType;
    }

    /**
     * Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
     */
    public readonly groupFullPath!: pulumi.Output<string | undefined>;
    /**
     * The name of the value stream
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
     */
    public readonly projectFullPath!: pulumi.Output<string | undefined>;
    /**
     * Stages of the value stream
     */
    public readonly stages!: pulumi.Output<outputs.ValueStreamAnalyticsStage[]>;

    /**
     * Create a ValueStreamAnalytics resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ValueStreamAnalyticsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ValueStreamAnalyticsArgs | ValueStreamAnalyticsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ValueStreamAnalyticsState | undefined;
            resourceInputs["groupFullPath"] = state ? state.groupFullPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectFullPath"] = state ? state.projectFullPath : undefined;
            resourceInputs["stages"] = state ? state.stages : undefined;
        } else {
            const args = argsOrState as ValueStreamAnalyticsArgs | undefined;
            if ((!args || args.stages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stages'");
            }
            resourceInputs["groupFullPath"] = args ? args.groupFullPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectFullPath"] = args ? args.projectFullPath : undefined;
            resourceInputs["stages"] = args ? args.stages : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ValueStreamAnalytics.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ValueStreamAnalytics resources.
 */
export interface ValueStreamAnalyticsState {
    /**
     * Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
     */
    groupFullPath?: pulumi.Input<string>;
    /**
     * The name of the value stream
     */
    name?: pulumi.Input<string>;
    /**
     * Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
     */
    projectFullPath?: pulumi.Input<string>;
    /**
     * Stages of the value stream
     */
    stages?: pulumi.Input<pulumi.Input<inputs.ValueStreamAnalyticsStage>[]>;
}

/**
 * The set of arguments for constructing a ValueStreamAnalytics resource.
 */
export interface ValueStreamAnalyticsArgs {
    /**
     * Full path of the group the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
     */
    groupFullPath?: pulumi.Input<string>;
    /**
     * The name of the value stream
     */
    name?: pulumi.Input<string>;
    /**
     * Full path of the project the value stream is created in. **One of `groupFullPath` OR `projectFullPath` is required.**
     */
    projectFullPath?: pulumi.Input<string>;
    /**
     * Stages of the value stream
     */
    stages: pulumi.Input<pulumi.Input<inputs.ValueStreamAnalyticsStage>[]>;
}
