// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectWikiPage` resource allows managing the lifecycle of a project wiki page.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/wikis/)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_wiki_page`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_wiki_page.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * You can import gitlab_project_wiki_page state using the project ID, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/projectWikiPage:ProjectWikiPage test 12345:my-wiki-page
 * ```
 */
export class ProjectWikiPage extends pulumi.CustomResource {
    /**
     * Get an existing ProjectWikiPage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectWikiPageState, opts?: pulumi.CustomResourceOptions): ProjectWikiPage {
        return new ProjectWikiPage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectWikiPage:ProjectWikiPage';

    /**
     * Returns true if the given object is an instance of ProjectWikiPage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectWikiPage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectWikiPage.__pulumiType;
    }

    /**
     * Content of the wiki page. Must be at least 1 character long.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * The encoding used for the wiki page content.
     */
    declare public /*out*/ readonly encoding: pulumi.Output<string>;
    /**
     * Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
     */
    declare public readonly format: pulumi.Output<string>;
    /**
     * The ID or URL-encoded path of the project.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Slug of the wiki page.
     */
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * Title of the wiki page.
     */
    declare public readonly title: pulumi.Output<string>;

    /**
     * Create a ProjectWikiPage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectWikiPageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectWikiPageArgs | ProjectWikiPageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectWikiPageState | undefined;
            resourceInputs["content"] = state?.content;
            resourceInputs["encoding"] = state?.encoding;
            resourceInputs["format"] = state?.format;
            resourceInputs["project"] = state?.project;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["title"] = state?.title;
        } else {
            const args = argsOrState as ProjectWikiPageArgs | undefined;
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.title === undefined && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["content"] = args?.content;
            resourceInputs["format"] = args?.format;
            resourceInputs["project"] = args?.project;
            resourceInputs["title"] = args?.title;
            resourceInputs["encoding"] = undefined /*out*/;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectWikiPage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectWikiPage resources.
 */
export interface ProjectWikiPageState {
    /**
     * Content of the wiki page. Must be at least 1 character long.
     */
    content?: pulumi.Input<string>;
    /**
     * The encoding used for the wiki page content.
     */
    encoding?: pulumi.Input<string>;
    /**
     * Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
     */
    format?: pulumi.Input<string>;
    /**
     * The ID or URL-encoded path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * Slug of the wiki page.
     */
    slug?: pulumi.Input<string>;
    /**
     * Title of the wiki page.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectWikiPage resource.
 */
export interface ProjectWikiPageArgs {
    /**
     * Content of the wiki page. Must be at least 1 character long.
     */
    content: pulumi.Input<string>;
    /**
     * Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
     */
    format?: pulumi.Input<string>;
    /**
     * The ID or URL-encoded path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * Title of the wiki page.
     */
    title: pulumi.Input<string>;
}
