// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface BranchCommit {
    authorEmail: string;
    authorName: string;
    authoredDate: string;
    committedDate: string;
    committerEmail: string;
    committerName: string;
    id: string;
    message: string;
    parentIds: string[];
    shortId: string;
    title: string;
}

export interface BranchProtectionAllowedToMerge {
    accessLevel: string;
    accessLevelDescription: string;
    groupId?: number;
    userId?: number;
}

export interface BranchProtectionAllowedToPush {
    accessLevel: string;
    accessLevelDescription: string;
    groupId?: number;
    userId?: number;
}

export interface BranchProtectionAllowedToUnprotect {
    accessLevel: string;
    accessLevelDescription: string;
    groupId?: number;
    userId?: number;
}

export interface GetBranchCommit {
    authorEmail: string;
    authorName: string;
    authoredDate: string;
    committedDate: string;
    committerEmail: string;
    committerName: string;
    id: string;
    message: string;
    parentIds: string[];
    shortId: string;
    title: string;
}

export interface GetGroupMembershipMember {
    accessLevel: string;
    avatarUrl: string;
    expiresAt: string;
    id: number;
    name: string;
    state: string;
    username: string;
    webUrl: string;
}

export interface GetInstanceDeployKeysDeployKey {
    createdAt: string;
    fingerprint: string;
    id: number;
    key: string;
    projectsWithWriteAccesses: outputs.GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess[];
    title: string;
}

export interface GetInstanceDeployKeysDeployKeyProjectsWithWriteAccess {
    createdAt: string;
    description: string;
    id: number;
    name: string;
    nameWithNamespace: string;
    path: string;
    pathWithNamespace: string;
}

export interface GetProjectContainerExpirationPolicy {
    cadence: string;
    enabled: boolean;
    keepN: number;
    nameRegexDelete: string;
    nameRegexKeep: string;
    nextRunAt: string;
    olderThan: string;
}

export interface GetProjectIssueTaskCompletionStatus {
    completedCount: number;
    count: number;
}

export interface GetProjectIssuesIssue {
    assigneeIds: number[];
    authorId: number;
    closedAt: string;
    closedByUserId: number;
    confidential: boolean;
    createdAt: string;
    description: string;
    discussionLocked: boolean;
    discussionToResolve: string;
    downvotes: number;
    dueDate: string;
    epicId: number;
    epicIssueId: number;
    externalId: string;
    humanTimeEstimate: string;
    humanTotalTimeSpent: string;
    iid: number;
    issueId: number;
    issueLinkId: number;
    issueType: string;
    labels: string[];
    links: {[key: string]: string};
    mergeRequestToResolveDiscussionsOf: number;
    mergeRequestsCount: number;
    milestoneId: number;
    movedToId: number;
    project: string;
    references: {[key: string]: string};
    state: string;
    subscribed: boolean;
    taskCompletionStatuses: outputs.GetProjectIssuesIssueTaskCompletionStatus[];
    timeEstimate: number;
    title: string;
    totalTimeSpent: number;
    updatedAt: string;
    upvotes: number;
    userNotesCount: number;
    webUrl: string;
    weight: number;
}

export interface GetProjectIssuesIssueTaskCompletionStatus {
    completedCount: number;
    count: number;
}

export interface GetProjectProtectedBranchMergeAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectProtectedBranchPushAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectProtectedBranchesProtectedBranch {
    allowForcePush: boolean;
    codeOwnerApprovalRequired: boolean;
    id: number;
    mergeAccessLevels: outputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevel[];
    name: string;
    pushAccessLevels: outputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevel[];
}

export interface GetProjectProtectedBranchesProtectedBranchMergeAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectProtectedBranchesProtectedBranchPushAccessLevel {
    accessLevel: string;
    accessLevelDescription: string;
    groupId: number;
    userId: number;
}

export interface GetProjectPushRules {
    authorEmailRegex: string;
    branchNameRegex: string;
    commitCommitterCheck: boolean;
    commitMessageNegativeRegex: string;
    commitMessageRegex: string;
    denyDeleteTag: boolean;
    fileNameRegex: string;
    maxFileSize: number;
    memberCheck: boolean;
    preventSecrets: boolean;
    rejectUnsignedCommits: boolean;
}

export interface GetProjectTagCommit {
    authorEmail: string;
    authorName: string;
    authoredDate: string;
    committedDate: string;
    committerEmail: string;
    committerName: string;
    id: string;
    message: string;
    parentIds: string[];
    shortId: string;
    title: string;
}

export interface GetProjectTagRelease {
    description: string;
    tagName: string;
}

export interface GetProjectTagsTag {
    commits: outputs.GetProjectTagsTagCommit[];
    message: string;
    name: string;
    protected: boolean;
    releases: outputs.GetProjectTagsTagRelease[];
    target: string;
}

export interface GetProjectTagsTagCommit {
    authorEmail: string;
    authorName: string;
    authoredDate: string;
    committedDate: string;
    committerEmail: string;
    committerName: string;
    id: string;
    message: string;
    parentIds: string[];
    shortId: string;
    title: string;
}

export interface GetProjectTagsTagRelease {
    description: string;
    tagName: string;
}

export interface GetProjectsProject {
    _links: {[key: string]: string};
    allowMergeOnSkippedPipeline: boolean;
    analyticsAccessLevel: string;
    approvalsBeforeMerge: number;
    archived: boolean;
    autoCancelPendingPipelines: string;
    autoDevopsDeployStrategy: string;
    autoDevopsEnabled: boolean;
    autocloseReferencedIssues: boolean;
    avatarUrl: string;
    buildCoverageRegex: string;
    buildGitStrategy: string;
    buildTimeout: number;
    buildsAccessLevel: string;
    ciConfigPath: string;
    ciForwardDeploymentEnabled: boolean;
    containerExpirationPolicies: outputs.GetProjectsProjectContainerExpirationPolicy[];
    containerRegistryAccessLevel: string;
    containerRegistryEnabled: boolean;
    createdAt: string;
    creatorId: number;
    customAttributes: {[key: string]: any}[];
    defaultBranch: string;
    description: string;
    emailsDisabled: boolean;
    externalAuthorizationClassificationLabel: string;
    forkedFromProject: outputs.GetProjectsProjectForkedFromProject;
    forkingAccessLevel: string;
    forksCount: number;
    httpUrlToRepo: string;
    id: number;
    importError: string;
    importStatus: string;
    issuesAccessLevel: string;
    issuesEnabled: boolean;
    jobsEnabled: boolean;
    lastActivityAt: string;
    lfsEnabled: boolean;
    mergeCommitTemplate: string;
    mergeMethod: string;
    mergePipelinesEnabled: boolean;
    mergeRequestsAccessLevel: string;
    mergeRequestsEnabled: boolean;
    mergeTrainsEnabled: boolean;
    mirror: boolean;
    mirrorOverwritesDivergedBranches: boolean;
    mirrorTriggerBuilds: boolean;
    mirrorUserId: number;
    name: string;
    nameWithNamespace: string;
    namespace: outputs.GetProjectsProjectNamespace;
    onlyAllowMergeIfAllDiscussionsAreResolved: boolean;
    onlyAllowMergeIfPipelineSucceeds: boolean;
    onlyMirrorProtectedBranches: boolean;
    openIssuesCount: number;
    operationsAccessLevel: string;
    owner: outputs.GetProjectsProjectOwner;
    packagesEnabled: boolean;
    path: string;
    pathWithNamespace: string;
    permissions: outputs.GetProjectsProjectPermissions;
    public: boolean;
    publicBuilds: boolean;
    readmeUrl: string;
    repositoryAccessLevel: string;
    repositoryStorage: string;
    requestAccessEnabled: boolean;
    requirementsAccessLevel: string;
    resolveOutdatedDiffDiscussions: boolean;
    runnersToken: string;
    securityAndComplianceAccessLevel: string;
    sharedRunnersEnabled: boolean;
    sharedWithGroups: outputs.GetProjectsProjectSharedWithGroup[];
    snippetsAccessLevel: string;
    snippetsEnabled: boolean;
    squashCommitTemplate: string;
    sshUrlToRepo: string;
    starCount: number;
    statistics: {[key: string]: number};
    tagLists: string[];
    topics: string[];
    visibility: string;
    webUrl: string;
    wikiAccessLevel: string;
    wikiEnabled: boolean;
}

export interface GetProjectsProjectContainerExpirationPolicy {
    cadence: string;
    enabled: boolean;
    keepN: number;
    nameRegexDelete: string;
    nameRegexKeep: string;
    nextRunAt: string;
    olderThan: string;
}

export interface GetProjectsProjectForkedFromProject {
    httpUrlToRepo: string;
    id: number;
    name: string;
    nameWithNamespace: string;
    path: string;
    pathWithNamespace: string;
    webUrl: string;
}

export interface GetProjectsProjectNamespace {
    fullPath: string;
    id: number;
    kind: string;
    name: string;
    path: string;
}

export interface GetProjectsProjectOwner {
    avatarUrl: string;
    id: number;
    name: string;
    state: string;
    username: string;
    websiteUrl: string;
}

export interface GetProjectsProjectPermissions {
    groupAccess: {[key: string]: number};
    projectAccess: {[key: string]: number};
}

export interface GetProjectsProjectSharedWithGroup {
    groupAccessLevel: string;
    groupId: number;
    groupName: string;
}

export interface GetUsersUser {
    avatarUrl: string;
    bio: string;
    canCreateGroup: boolean;
    canCreateProject: boolean;
    colorSchemeId: number;
    createdAt: string;
    currentSignInAt: string;
    email: string;
    externUid: string;
    external: boolean;
    id: number;
    isAdmin: boolean;
    lastSignInAt: string;
    linkedin: string;
    location: string;
    name: string;
    organization: string;
    projectsLimit: number;
    provider: string;
    skype: string;
    state: string;
    themeId: number;
    twitter: string;
    twoFactorEnabled: boolean;
    username: string;
    websiteUrl: string;
}

export interface ProjectContainerExpirationPolicy {
    cadence: string;
    enabled: boolean;
    keepN: number;
    nameRegexDelete: string;
    nameRegexKeep: string;
    nextRunAt: string;
    olderThan: string;
}

export interface ProjectIssueTaskCompletionStatus {
    completedCount: number;
    count: number;
}

export interface ProjectProtectedEnvironmentDeployAccessLevels {
    accessLevel: string;
    accessLevelDescription: string;
    groupId?: number;
    userId?: number;
}

export interface ProjectPushRules {
    authorEmailRegex?: string;
    branchNameRegex?: string;
    commitCommitterCheck?: boolean;
    commitMessageNegativeRegex?: string;
    commitMessageRegex?: string;
    denyDeleteTag?: boolean;
    fileNameRegex?: string;
    maxFileSize?: number;
    memberCheck?: boolean;
    preventSecrets?: boolean;
    rejectUnsignedCommits?: boolean;
}

export interface ProjectTagCommit {
    authorEmail: string;
    authorName: string;
    authoredDate: string;
    committedDate: string;
    committerEmail: string;
    committerName: string;
    id: string;
    message: string;
    parentIds: string[];
    shortId: string;
    title: string;
}

export interface ProjectTagRelease {
    description: string;
    tagName: string;
}
