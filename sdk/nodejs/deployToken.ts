// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # gitlab\_deploy\_token
 *
 * This resource allows you to create and manage deploy token for your GitLab projects and groups. Please refer to [Gitlab documentation](https://docs.gitlab.com/ee/user/project/deploy_tokens/) for further information.
 *
 * ## Example Usage
 * ### Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = new gitlab.DeployToken("example", {
 *     group: "example/deploying",
 *     scopes: ["read_repository"],
 * });
 * ```
 */
export class DeployToken extends pulumi.CustomResource {
    /**
     * Get an existing DeployToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeployTokenState, opts?: pulumi.CustomResourceOptions): DeployToken {
        return new DeployToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/deployToken:DeployToken';

    /**
     * Returns true if the given object is an instance of DeployToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeployToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeployToken.__pulumiType;
    }

    /**
     * Time the token will expire it, RFC3339 format. Will not expire per default.
     */
    public readonly expiresAt!: pulumi.Output<string | undefined>;
    /**
     * The name or id of the group to add the deploy token to.
     * Either `project` or `group` must be set.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * A name to describe the deploy token with.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name or id of the project to add the deploy token to.
     * Either `project` or `group` must be set.
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * Valid values: `readRepository`, `readRegistry`.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * The secret token. This is only populated when creating a new deploy token.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a DeployToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeployTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeployTokenArgs | DeployTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeployTokenState | undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DeployTokenArgs | undefined;
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeployToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeployToken resources.
 */
export interface DeployTokenState {
    /**
     * Time the token will expire it, RFC3339 format. Will not expire per default.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The name or id of the group to add the deploy token to.
     * Either `project` or `group` must be set.
     */
    group?: pulumi.Input<string>;
    /**
     * A name to describe the deploy token with.
     */
    name?: pulumi.Input<string>;
    /**
     * The name or id of the project to add the deploy token to.
     * Either `project` or `group` must be set.
     */
    project?: pulumi.Input<string>;
    /**
     * Valid values: `readRepository`, `readRegistry`.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The secret token. This is only populated when creating a new deploy token.
     */
    token?: pulumi.Input<string>;
    /**
     * A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeployToken resource.
 */
export interface DeployTokenArgs {
    /**
     * Time the token will expire it, RFC3339 format. Will not expire per default.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The name or id of the group to add the deploy token to.
     * Either `project` or `group` must be set.
     */
    group?: pulumi.Input<string>;
    /**
     * A name to describe the deploy token with.
     */
    name?: pulumi.Input<string>;
    /**
     * The name or id of the project to add the deploy token to.
     * Either `project` or `group` must be set.
     */
    project?: pulumi.Input<string>;
    /**
     * Valid values: `readRepository`, `readRegistry`.
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
     */
    username?: pulumi.Input<string>;
}
