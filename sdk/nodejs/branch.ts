// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // Create a project for the branch to use
 * const example = new gitlab.Project("example", {
 *     name: "example",
 *     description: "An example project",
 *     namespaceId: exampleGitlabGroup.id,
 * });
 * const exampleBranch = new gitlab.Branch("example", {
 *     name: "example",
 *     ref: "main",
 *     project: example.id,
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_branch`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_branch.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * Gitlab branches can be imported with a key composed of `<project_id>:<branch_name>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/branch:Branch example "12345:develop"
 * ```
 */
export class Branch extends pulumi.CustomResource {
    /**
     * Get an existing Branch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BranchState, opts?: pulumi.CustomResourceOptions): Branch {
        return new Branch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/branch:Branch';

    /**
     * Returns true if the given object is an instance of Branch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Branch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Branch.__pulumiType;
    }

    /**
     * Bool, true if you can push to the branch.
     */
    declare public /*out*/ readonly canPush: pulumi.Output<boolean>;
    /**
     * The commit associated with the branch ref.
     */
    declare public /*out*/ readonly commits: pulumi.Output<outputs.BranchCommit[]>;
    /**
     * Bool, true if branch is the default branch for the project.
     */
    declare public /*out*/ readonly default: pulumi.Output<boolean>;
    /**
     * Bool, true if developer level access allows to merge branch.
     */
    declare public /*out*/ readonly developerCanMerge: pulumi.Output<boolean>;
    /**
     * Bool, true if developer level access allows git push.
     */
    declare public /*out*/ readonly developerCanPush: pulumi.Output<boolean>;
    /**
     * Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
     */
    declare public readonly keepOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * Bool, true if the branch has been merged into its parent.
     */
    declare public /*out*/ readonly merged: pulumi.Output<boolean>;
    /**
     * The name for this branch.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID or full path of the project which the branch is created against.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Bool, true if branch has branch protection.
     */
    declare public /*out*/ readonly protected: pulumi.Output<boolean>;
    /**
     * The ref which the branch is created from.
     */
    declare public readonly ref: pulumi.Output<string>;
    /**
     * The url of the created branch (https).
     */
    declare public /*out*/ readonly webUrl: pulumi.Output<string>;

    /**
     * Create a Branch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BranchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BranchArgs | BranchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BranchState | undefined;
            resourceInputs["canPush"] = state?.canPush;
            resourceInputs["commits"] = state?.commits;
            resourceInputs["default"] = state?.default;
            resourceInputs["developerCanMerge"] = state?.developerCanMerge;
            resourceInputs["developerCanPush"] = state?.developerCanPush;
            resourceInputs["keepOnDestroy"] = state?.keepOnDestroy;
            resourceInputs["merged"] = state?.merged;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["protected"] = state?.protected;
            resourceInputs["ref"] = state?.ref;
            resourceInputs["webUrl"] = state?.webUrl;
        } else {
            const args = argsOrState as BranchArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.ref === undefined && !opts.urn) {
                throw new Error("Missing required property 'ref'");
            }
            resourceInputs["keepOnDestroy"] = args?.keepOnDestroy;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["ref"] = args?.ref;
            resourceInputs["canPush"] = undefined /*out*/;
            resourceInputs["commits"] = undefined /*out*/;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["developerCanMerge"] = undefined /*out*/;
            resourceInputs["developerCanPush"] = undefined /*out*/;
            resourceInputs["merged"] = undefined /*out*/;
            resourceInputs["protected"] = undefined /*out*/;
            resourceInputs["webUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Branch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Branch resources.
 */
export interface BranchState {
    /**
     * Bool, true if you can push to the branch.
     */
    canPush?: pulumi.Input<boolean>;
    /**
     * The commit associated with the branch ref.
     */
    commits?: pulumi.Input<pulumi.Input<inputs.BranchCommit>[]>;
    /**
     * Bool, true if branch is the default branch for the project.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Bool, true if developer level access allows to merge branch.
     */
    developerCanMerge?: pulumi.Input<boolean>;
    /**
     * Bool, true if developer level access allows git push.
     */
    developerCanPush?: pulumi.Input<boolean>;
    /**
     * Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
     */
    keepOnDestroy?: pulumi.Input<boolean>;
    /**
     * Bool, true if the branch has been merged into its parent.
     */
    merged?: pulumi.Input<boolean>;
    /**
     * The name for this branch.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project which the branch is created against.
     */
    project?: pulumi.Input<string>;
    /**
     * Bool, true if branch has branch protection.
     */
    protected?: pulumi.Input<boolean>;
    /**
     * The ref which the branch is created from.
     */
    ref?: pulumi.Input<string>;
    /**
     * The url of the created branch (https).
     */
    webUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Branch resource.
 */
export interface BranchArgs {
    /**
     * Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
     */
    keepOnDestroy?: pulumi.Input<boolean>;
    /**
     * The name for this branch.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project which the branch is created against.
     */
    project: pulumi.Input<string>;
    /**
     * The ref which the branch is created from.
     */
    ref: pulumi.Input<string>;
}
