// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.InstanceServiceAccount` resource allows creating a GitLab instance service account.
 *
 * > In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0 you can use an import block to import `gitlab_instance_service_account`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_instance_service_account.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Import using the CLI is supported using the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/instanceServiceAccount:InstanceServiceAccount You can import a group service account using `<resource> <id>`. The
 * ```
 *
 * `id` is the id of the service account
 *
 * ```sh
 * $ pulumi import gitlab:index/instanceServiceAccount:InstanceServiceAccount example example
 * ```
 */
export class InstanceServiceAccount extends pulumi.CustomResource {
    /**
     * Get an existing InstanceServiceAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceServiceAccountState, opts?: pulumi.CustomResourceOptions): InstanceServiceAccount {
        return new InstanceServiceAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/instanceServiceAccount:InstanceServiceAccount';

    /**
     * Returns true if the given object is an instance of InstanceServiceAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceServiceAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceServiceAccount.__pulumiType;
    }

    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The service account id.
     */
    public /*out*/ readonly serviceAccountId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceServiceAccountTimeouts | undefined>;
    /**
     * The username of the user. If not specified, it’s automatically generated.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a InstanceServiceAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InstanceServiceAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceServiceAccountArgs | InstanceServiceAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceServiceAccountState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as InstanceServiceAccountArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["serviceAccountId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceServiceAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceServiceAccount resources.
 */
export interface InstanceServiceAccountState {
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    name?: pulumi.Input<string>;
    /**
     * The service account id.
     */
    serviceAccountId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceServiceAccountTimeouts>;
    /**
     * The username of the user. If not specified, it’s automatically generated.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceServiceAccount resource.
 */
export interface InstanceServiceAccountArgs {
    /**
     * The name of the user. If not specified, the default Service account user name is used.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceServiceAccountTimeouts>;
    /**
     * The username of the user. If not specified, it’s automatically generated.
     */
    username?: pulumi.Input<string>;
}
