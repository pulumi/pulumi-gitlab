// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectIntegrationYoutrack` resource manages the lifecycle of a project integration with YouTrack.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#youtrack)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const myProject = new gitlab.Project("my_project", {
 *     name: "my_project",
 *     description: "My project.",
 *     visibilityLevel: "public",
 * });
 * const _default = new gitlab.ProjectIntegrationYoutrack("default", {
 *     project: myProject.id,
 *     issuesUrl: "https://my.youtrack.com/issue/:id",
 *     projectUrl: "https://my.youtrack.com",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_youtrack`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_integration_youtrack.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * You can import a gitlab_project_integration_youtrack state using the project ID, for example:
 *
 * ```sh
 * $ pulumi import gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack default 1
 * ```
 */
export class ProjectIntegrationYoutrack extends pulumi.CustomResource {
    /**
     * Get an existing ProjectIntegrationYoutrack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectIntegrationYoutrackState, opts?: pulumi.CustomResourceOptions): ProjectIntegrationYoutrack {
        return new ProjectIntegrationYoutrack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack';

    /**
     * Returns true if the given object is an instance of ProjectIntegrationYoutrack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectIntegrationYoutrack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectIntegrationYoutrack.__pulumiType;
    }

    /**
     * URL to view an issue in the external issue tracker. Must contain :id.
     */
    declare public readonly issuesUrl: pulumi.Output<string>;
    /**
     * ID or namespace of the project you want to activate integration on.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * URL of the project in the external issue tracker.
     */
    declare public readonly projectUrl: pulumi.Output<string>;

    /**
     * Create a ProjectIntegrationYoutrack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectIntegrationYoutrackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectIntegrationYoutrackArgs | ProjectIntegrationYoutrackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectIntegrationYoutrackState | undefined;
            resourceInputs["issuesUrl"] = state?.issuesUrl;
            resourceInputs["project"] = state?.project;
            resourceInputs["projectUrl"] = state?.projectUrl;
        } else {
            const args = argsOrState as ProjectIntegrationYoutrackArgs | undefined;
            if (args?.issuesUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuesUrl'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.projectUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectUrl'");
            }
            resourceInputs["issuesUrl"] = args?.issuesUrl;
            resourceInputs["project"] = args?.project;
            resourceInputs["projectUrl"] = args?.projectUrl;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectIntegrationYoutrack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectIntegrationYoutrack resources.
 */
export interface ProjectIntegrationYoutrackState {
    /**
     * URL to view an issue in the external issue tracker. Must contain :id.
     */
    issuesUrl?: pulumi.Input<string>;
    /**
     * ID or namespace of the project you want to activate integration on.
     */
    project?: pulumi.Input<string>;
    /**
     * URL of the project in the external issue tracker.
     */
    projectUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectIntegrationYoutrack resource.
 */
export interface ProjectIntegrationYoutrackArgs {
    /**
     * URL to view an issue in the external issue tracker. Must contain :id.
     */
    issuesUrl: pulumi.Input<string>;
    /**
     * ID or namespace of the project you want to activate integration on.
     */
    project: pulumi.Input<string>;
    /**
     * URL of the project in the external issue tracker.
     */
    projectUrl: pulumi.Input<string>;
}
