// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.GroupHook` resource allows to manage the lifecycle of a group hook.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_webhooks/)
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_hook`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_group_hook.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * A GitLab Group Hook can be imported using a key composed of `<group-id>:<hook-id>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/groupHook:GroupHook example "12345:1"
 * ```
 *
 * NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
 */
export class GroupHook extends pulumi.CustomResource {
    /**
     * Get an existing GroupHook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupHookState, opts?: pulumi.CustomResourceOptions): GroupHook {
        return new GroupHook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupHook:GroupHook';

    /**
     * Returns true if the given object is an instance of GroupHook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupHook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupHook.__pulumiType;
    }

    /**
     * Filter push events by branch. Valid values are: `wildcard`, `regex`, `allBranches`.
     */
    declare public readonly branchFilterStrategy: pulumi.Output<string>;
    /**
     * Invoke the hook for confidential issues events.
     */
    declare public readonly confidentialIssuesEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for confidential note events.
     */
    declare public readonly confidentialNoteEvents: pulumi.Output<boolean>;
    /**
     * Custom headers for the project webhook.
     */
    declare public readonly customHeaders: pulumi.Output<outputs.GroupHookCustomHeader[] | undefined>;
    /**
     * Custom webhook template.
     */
    declare public readonly customWebhookTemplate: pulumi.Output<string>;
    /**
     * Invoke the hook for deployment events.
     */
    declare public readonly deploymentEvents: pulumi.Output<boolean>;
    /**
     * Description of the group webhook.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Invoke the hook for emoji events.
     */
    declare public readonly emojiEvents: pulumi.Output<boolean>;
    /**
     * Enable SSL verification when invoking the hook.
     */
    declare public readonly enableSslVerification: pulumi.Output<boolean>;
    /**
     * Invoke the hook for feature flag events.
     */
    declare public readonly featureFlagEvents: pulumi.Output<boolean>;
    /**
     * The full path or id of the group to add the hook to.
     */
    declare public readonly group: pulumi.Output<string>;
    /**
     * The id of the group for the hook.
     */
    declare public /*out*/ readonly groupId: pulumi.Output<number>;
    /**
     * The id of the group hook.
     */
    declare public /*out*/ readonly hookId: pulumi.Output<number>;
    /**
     * Invoke the hook for issues events.
     */
    declare public readonly issuesEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for job events.
     */
    declare public readonly jobEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for merge requests events.
     */
    declare public readonly mergeRequestsEvents: pulumi.Output<boolean>;
    /**
     * Name of the group webhook.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Invoke the hook for note events.
     */
    declare public readonly noteEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for pipeline events.
     */
    declare public readonly pipelineEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for push events.
     */
    declare public readonly pushEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for push events on matching branches only.
     */
    declare public readonly pushEventsBranchFilter: pulumi.Output<string>;
    /**
     * Invoke the hook for release events.
     */
    declare public readonly releasesEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for subgroup events.
     */
    declare public readonly subgroupEvents: pulumi.Output<boolean>;
    /**
     * Invoke the hook for tag push events.
     */
    declare public readonly tagPushEvents: pulumi.Output<boolean>;
    /**
     * A token to present when invoking the hook. The token is not available for imported resources.
     */
    declare public readonly token: pulumi.Output<string>;
    /**
     * The url of the hook to invoke. Forces re-creation to preserve `token`.
     */
    declare public readonly url: pulumi.Output<string>;
    /**
     * Invoke the hook for wiki page events.
     */
    declare public readonly wikiPageEvents: pulumi.Output<boolean>;

    /**
     * Create a GroupHook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupHookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupHookArgs | GroupHookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupHookState | undefined;
            resourceInputs["branchFilterStrategy"] = state?.branchFilterStrategy;
            resourceInputs["confidentialIssuesEvents"] = state?.confidentialIssuesEvents;
            resourceInputs["confidentialNoteEvents"] = state?.confidentialNoteEvents;
            resourceInputs["customHeaders"] = state?.customHeaders;
            resourceInputs["customWebhookTemplate"] = state?.customWebhookTemplate;
            resourceInputs["deploymentEvents"] = state?.deploymentEvents;
            resourceInputs["description"] = state?.description;
            resourceInputs["emojiEvents"] = state?.emojiEvents;
            resourceInputs["enableSslVerification"] = state?.enableSslVerification;
            resourceInputs["featureFlagEvents"] = state?.featureFlagEvents;
            resourceInputs["group"] = state?.group;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["hookId"] = state?.hookId;
            resourceInputs["issuesEvents"] = state?.issuesEvents;
            resourceInputs["jobEvents"] = state?.jobEvents;
            resourceInputs["mergeRequestsEvents"] = state?.mergeRequestsEvents;
            resourceInputs["name"] = state?.name;
            resourceInputs["noteEvents"] = state?.noteEvents;
            resourceInputs["pipelineEvents"] = state?.pipelineEvents;
            resourceInputs["pushEvents"] = state?.pushEvents;
            resourceInputs["pushEventsBranchFilter"] = state?.pushEventsBranchFilter;
            resourceInputs["releasesEvents"] = state?.releasesEvents;
            resourceInputs["subgroupEvents"] = state?.subgroupEvents;
            resourceInputs["tagPushEvents"] = state?.tagPushEvents;
            resourceInputs["token"] = state?.token;
            resourceInputs["url"] = state?.url;
            resourceInputs["wikiPageEvents"] = state?.wikiPageEvents;
        } else {
            const args = argsOrState as GroupHookArgs | undefined;
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["branchFilterStrategy"] = args?.branchFilterStrategy;
            resourceInputs["confidentialIssuesEvents"] = args?.confidentialIssuesEvents;
            resourceInputs["confidentialNoteEvents"] = args?.confidentialNoteEvents;
            resourceInputs["customHeaders"] = args?.customHeaders;
            resourceInputs["customWebhookTemplate"] = args?.customWebhookTemplate;
            resourceInputs["deploymentEvents"] = args?.deploymentEvents;
            resourceInputs["description"] = args?.description;
            resourceInputs["emojiEvents"] = args?.emojiEvents;
            resourceInputs["enableSslVerification"] = args?.enableSslVerification;
            resourceInputs["featureFlagEvents"] = args?.featureFlagEvents;
            resourceInputs["group"] = args?.group;
            resourceInputs["issuesEvents"] = args?.issuesEvents;
            resourceInputs["jobEvents"] = args?.jobEvents;
            resourceInputs["mergeRequestsEvents"] = args?.mergeRequestsEvents;
            resourceInputs["name"] = args?.name;
            resourceInputs["noteEvents"] = args?.noteEvents;
            resourceInputs["pipelineEvents"] = args?.pipelineEvents;
            resourceInputs["pushEvents"] = args?.pushEvents;
            resourceInputs["pushEventsBranchFilter"] = args?.pushEventsBranchFilter;
            resourceInputs["releasesEvents"] = args?.releasesEvents;
            resourceInputs["subgroupEvents"] = args?.subgroupEvents;
            resourceInputs["tagPushEvents"] = args?.tagPushEvents;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["url"] = args?.url;
            resourceInputs["wikiPageEvents"] = args?.wikiPageEvents;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["hookId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GroupHook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupHook resources.
 */
export interface GroupHookState {
    /**
     * Filter push events by branch. Valid values are: `wildcard`, `regex`, `allBranches`.
     */
    branchFilterStrategy?: pulumi.Input<string>;
    /**
     * Invoke the hook for confidential issues events.
     */
    confidentialIssuesEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for confidential note events.
     */
    confidentialNoteEvents?: pulumi.Input<boolean>;
    /**
     * Custom headers for the project webhook.
     */
    customHeaders?: pulumi.Input<pulumi.Input<inputs.GroupHookCustomHeader>[]>;
    /**
     * Custom webhook template.
     */
    customWebhookTemplate?: pulumi.Input<string>;
    /**
     * Invoke the hook for deployment events.
     */
    deploymentEvents?: pulumi.Input<boolean>;
    /**
     * Description of the group webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * Invoke the hook for emoji events.
     */
    emojiEvents?: pulumi.Input<boolean>;
    /**
     * Enable SSL verification when invoking the hook.
     */
    enableSslVerification?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for feature flag events.
     */
    featureFlagEvents?: pulumi.Input<boolean>;
    /**
     * The full path or id of the group to add the hook to.
     */
    group?: pulumi.Input<string>;
    /**
     * The id of the group for the hook.
     */
    groupId?: pulumi.Input<number>;
    /**
     * The id of the group hook.
     */
    hookId?: pulumi.Input<number>;
    /**
     * Invoke the hook for issues events.
     */
    issuesEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for job events.
     */
    jobEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for merge requests events.
     */
    mergeRequestsEvents?: pulumi.Input<boolean>;
    /**
     * Name of the group webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * Invoke the hook for note events.
     */
    noteEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for pipeline events.
     */
    pipelineEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for push events.
     */
    pushEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for push events on matching branches only.
     */
    pushEventsBranchFilter?: pulumi.Input<string>;
    /**
     * Invoke the hook for release events.
     */
    releasesEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for subgroup events.
     */
    subgroupEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for tag push events.
     */
    tagPushEvents?: pulumi.Input<boolean>;
    /**
     * A token to present when invoking the hook. The token is not available for imported resources.
     */
    token?: pulumi.Input<string>;
    /**
     * The url of the hook to invoke. Forces re-creation to preserve `token`.
     */
    url?: pulumi.Input<string>;
    /**
     * Invoke the hook for wiki page events.
     */
    wikiPageEvents?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GroupHook resource.
 */
export interface GroupHookArgs {
    /**
     * Filter push events by branch. Valid values are: `wildcard`, `regex`, `allBranches`.
     */
    branchFilterStrategy?: pulumi.Input<string>;
    /**
     * Invoke the hook for confidential issues events.
     */
    confidentialIssuesEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for confidential note events.
     */
    confidentialNoteEvents?: pulumi.Input<boolean>;
    /**
     * Custom headers for the project webhook.
     */
    customHeaders?: pulumi.Input<pulumi.Input<inputs.GroupHookCustomHeader>[]>;
    /**
     * Custom webhook template.
     */
    customWebhookTemplate?: pulumi.Input<string>;
    /**
     * Invoke the hook for deployment events.
     */
    deploymentEvents?: pulumi.Input<boolean>;
    /**
     * Description of the group webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * Invoke the hook for emoji events.
     */
    emojiEvents?: pulumi.Input<boolean>;
    /**
     * Enable SSL verification when invoking the hook.
     */
    enableSslVerification?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for feature flag events.
     */
    featureFlagEvents?: pulumi.Input<boolean>;
    /**
     * The full path or id of the group to add the hook to.
     */
    group: pulumi.Input<string>;
    /**
     * Invoke the hook for issues events.
     */
    issuesEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for job events.
     */
    jobEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for merge requests events.
     */
    mergeRequestsEvents?: pulumi.Input<boolean>;
    /**
     * Name of the group webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * Invoke the hook for note events.
     */
    noteEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for pipeline events.
     */
    pipelineEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for push events.
     */
    pushEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for push events on matching branches only.
     */
    pushEventsBranchFilter?: pulumi.Input<string>;
    /**
     * Invoke the hook for release events.
     */
    releasesEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for subgroup events.
     */
    subgroupEvents?: pulumi.Input<boolean>;
    /**
     * Invoke the hook for tag push events.
     */
    tagPushEvents?: pulumi.Input<boolean>;
    /**
     * A token to present when invoking the hook. The token is not available for imported resources.
     */
    token?: pulumi.Input<string>;
    /**
     * The url of the hook to invoke. Forces re-creation to preserve `token`.
     */
    url: pulumi.Input<string>;
    /**
     * Invoke the hook for wiki page events.
     */
    wikiPageEvents?: pulumi.Input<boolean>;
}
