// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getProjectMergeRequest` data source retrieves
 * information about a single merge request related to a specific project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const byProjectId = gitlab.getProjectMergeRequest({
 *     project: "123",
 *     iid: 456,
 * });
 * const byProjectName = gitlab.getProjectMergeRequest({
 *     project: "company/group/project1",
 *     iid: 3,
 * });
 * ```
 */
export function getProjectMergeRequest(args: GetProjectMergeRequestArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectMergeRequestResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", {
        "iid": args.iid,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectMergeRequest.
 */
export interface GetProjectMergeRequestArgs {
    /**
     * The unique project level ID of the merge request.
     */
    iid: number;
    /**
     * The ID or path of the project.
     */
    project: string;
}

/**
 * A collection of values returned by getProjectMergeRequest.
 */
export interface GetProjectMergeRequestResult {
    /**
     * First assignee of the merge request.
     */
    readonly assignee: outputs.GetProjectMergeRequestAssignee;
    /**
     * Assignees of the merge request.
     */
    readonly assignees: outputs.GetProjectMergeRequestAssignee[];
    /**
     * User who created this merge request.
     */
    readonly author: outputs.GetProjectMergeRequestAuthor;
    /**
     * Indicates if all discussions are resolved only if all are
     * required before merge request can be merged.
     */
    readonly blockingDiscussionsResolved: boolean;
    /**
     * Number of changes made on the merge request. Empty when the
     * merge request is created, and populates asynchronously.
     */
    readonly changesCount: string;
    /**
     * Timestamp of when the merge request was closed.
     */
    readonly closedAt: string;
    /**
     * User who closed this merge request.
     */
    readonly closedBy: outputs.GetProjectMergeRequestClosedBy;
    /**
     * Timestamp of when the merge request was created.
     */
    readonly createdAt: string;
    /**
     * The unique instance level ID of the merge request.
     */
    readonly id: number;
    /**
     * The unique project level ID of the merge request.
     */
    readonly iid: number;
    /**
     * The ID or path of the project.
     */
    readonly project: string;
}
/**
 * The `gitlab.getProjectMergeRequest` data source retrieves
 * information about a single merge request related to a specific project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const byProjectId = gitlab.getProjectMergeRequest({
 *     project: "123",
 *     iid: 456,
 * });
 * const byProjectName = gitlab.getProjectMergeRequest({
 *     project: "company/group/project1",
 *     iid: 3,
 * });
 * ```
 */
export function getProjectMergeRequestOutput(args: GetProjectMergeRequestOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectMergeRequestResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", {
        "iid": args.iid,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectMergeRequest.
 */
export interface GetProjectMergeRequestOutputArgs {
    /**
     * The unique project level ID of the merge request.
     */
    iid: pulumi.Input<number>;
    /**
     * The ID or path of the project.
     */
    project: pulumi.Input<string>;
}
