// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectIntegrationGithub` resource manages the lifecycle of a project integration with GitHub.
 *
 * > This resource requires a GitLab Enterprise instance.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#github)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const awesomeProject = new gitlab.Project("awesome_project", {
 *     name: "awesome_project",
 *     description: "My awesome project.",
 *     visibilityLevel: "public",
 * });
 * const github = new gitlab.ProjectIntegrationGithub("github", {
 *     project: awesomeProject.id,
 *     token: "REDACTED",
 *     repositoryUrl: "https://github.com/gitlabhq/terraform-provider-gitlab",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_github`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_integration_github.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub You can import a gitlab_project_integration_github state using `<resource> <project_id>`:
 * ```
 *
 * ```sh
 * $ pulumi import gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub github 1
 * ```
 */
export class ProjectIntegrationGithub extends pulumi.CustomResource {
    /**
     * Get an existing ProjectIntegrationGithub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectIntegrationGithubState, opts?: pulumi.CustomResourceOptions): ProjectIntegrationGithub {
        return new ProjectIntegrationGithub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub';

    /**
     * Returns true if the given object is an instance of ProjectIntegrationGithub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectIntegrationGithub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectIntegrationGithub.__pulumiType;
    }

    /**
     * Whether the integration is active.
     */
    declare public /*out*/ readonly active: pulumi.Output<boolean>;
    /**
     * Creation time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * ID of the project you want to activate the integration on.
     */
    declare public readonly project: pulumi.Output<string>;
    declare public readonly repositoryUrl: pulumi.Output<string>;
    /**
     * Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
     */
    declare public readonly staticContext: pulumi.Output<boolean | undefined>;
    /**
     * The title of this resource.
     */
    declare public /*out*/ readonly title: pulumi.Output<string>;
    /**
     * A GitHub personal access token with at least the `repo:status` scope.
     */
    declare public readonly token: pulumi.Output<string>;
    /**
     * Update time.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a ProjectIntegrationGithub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectIntegrationGithubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectIntegrationGithubArgs | ProjectIntegrationGithubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectIntegrationGithubState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["project"] = state?.project;
            resourceInputs["repositoryUrl"] = state?.repositoryUrl;
            resourceInputs["staticContext"] = state?.staticContext;
            resourceInputs["title"] = state?.title;
            resourceInputs["token"] = state?.token;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as ProjectIntegrationGithubArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.repositoryUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryUrl'");
            }
            if (args?.token === undefined && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            resourceInputs["project"] = args?.project;
            resourceInputs["repositoryUrl"] = args?.repositoryUrl;
            resourceInputs["staticContext"] = args?.staticContext;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["title"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProjectIntegrationGithub.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectIntegrationGithub resources.
 */
export interface ProjectIntegrationGithubState {
    /**
     * Whether the integration is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * ID of the project you want to activate the integration on.
     */
    project?: pulumi.Input<string>;
    repositoryUrl?: pulumi.Input<string>;
    /**
     * Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
     */
    staticContext?: pulumi.Input<boolean>;
    /**
     * The title of this resource.
     */
    title?: pulumi.Input<string>;
    /**
     * A GitHub personal access token with at least the `repo:status` scope.
     */
    token?: pulumi.Input<string>;
    /**
     * Update time.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectIntegrationGithub resource.
 */
export interface ProjectIntegrationGithubArgs {
    /**
     * ID of the project you want to activate the integration on.
     */
    project: pulumi.Input<string>;
    repositoryUrl: pulumi.Input<string>;
    /**
     * Append the instance name instead of the branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.
     */
    staticContext?: pulumi.Input<boolean>;
    /**
     * A GitHub personal access token with at least the `repo:status` scope.
     */
    token: pulumi.Input<string>;
}
