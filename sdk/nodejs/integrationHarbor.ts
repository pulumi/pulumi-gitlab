// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.IntegrationHarbor` resource manages the lifecycle of a project integration with Harbor.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#harbor)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const awesomeProject = new gitlab.Project("awesome_project", {
 *     name: "awesome_project",
 *     description: "My awesome project.",
 *     visibilityLevel: "public",
 * });
 * const config = new pulumi.Config();
 * // Harbor password
 * const password = config.require("password");
 * const harbor = new gitlab.IntegrationHarbor("harbor", {
 *     project: awesomeProject.id,
 *     url: "http://harbor.example.com",
 *     projectName: "my_project_name",
 *     username: "username",
 *     password: password,
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_integration_harbor`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_integration_harbor.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/integrationHarbor:IntegrationHarbor You can import a gitlab_integration_harbor state using `<resource> <project_id>`:
 * ```
 *
 * ```sh
 * $ pulumi import gitlab:index/integrationHarbor:IntegrationHarbor harbor 1
 * ```
 */
export class IntegrationHarbor extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationHarbor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationHarborState, opts?: pulumi.CustomResourceOptions): IntegrationHarbor {
        return new IntegrationHarbor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/integrationHarbor:IntegrationHarbor';

    /**
     * Returns true if the given object is an instance of IntegrationHarbor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationHarbor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationHarbor.__pulumiType;
    }

    /**
     * Whether the integration is active.
     */
    declare public /*out*/ readonly active: pulumi.Output<boolean>;
    /**
     * Password for authentication with the Harbor server, if authentication is required by the server.
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * ID of the GitLab project you want to activate integration on.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
     */
    declare public readonly projectName: pulumi.Output<string>;
    /**
     * Harbor URL. Example: `http://harbor.example.com`
     */
    declare public readonly url: pulumi.Output<string>;
    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     */
    declare public readonly useInheritedSettings: pulumi.Output<boolean>;
    /**
     * Username for authentication with the Harbor server, if authentication is required by the server.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a IntegrationHarbor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationHarborArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationHarborArgs | IntegrationHarborState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationHarborState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["password"] = state?.password;
            resourceInputs["project"] = state?.project;
            resourceInputs["projectName"] = state?.projectName;
            resourceInputs["url"] = state?.url;
            resourceInputs["useInheritedSettings"] = state?.useInheritedSettings;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as IntegrationHarborArgs | undefined;
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.projectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["project"] = args?.project;
            resourceInputs["projectName"] = args?.projectName;
            resourceInputs["url"] = args?.url;
            resourceInputs["useInheritedSettings"] = args?.useInheritedSettings;
            resourceInputs["username"] = args?.username;
            resourceInputs["active"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationHarbor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationHarbor resources.
 */
export interface IntegrationHarborState {
    /**
     * Whether the integration is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Password for authentication with the Harbor server, if authentication is required by the server.
     */
    password?: pulumi.Input<string>;
    /**
     * ID of the GitLab project you want to activate integration on.
     */
    project?: pulumi.Input<string>;
    /**
     * The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Harbor URL. Example: `http://harbor.example.com`
     */
    url?: pulumi.Input<string>;
    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     */
    useInheritedSettings?: pulumi.Input<boolean>;
    /**
     * Username for authentication with the Harbor server, if authentication is required by the server.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationHarbor resource.
 */
export interface IntegrationHarborArgs {
    /**
     * Password for authentication with the Harbor server, if authentication is required by the server.
     */
    password: pulumi.Input<string>;
    /**
     * ID of the GitLab project you want to activate integration on.
     */
    project: pulumi.Input<string>;
    /**
     * The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: `myProjectName`.
     */
    projectName: pulumi.Input<string>;
    /**
     * Harbor URL. Example: `http://harbor.example.com`
     */
    url: pulumi.Input<string>;
    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     */
    useInheritedSettings?: pulumi.Input<boolean>;
    /**
     * Username for authentication with the Harbor server, if authentication is required by the server.
     */
    username: pulumi.Input<string>;
}
