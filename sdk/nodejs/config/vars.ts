// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("gitlab");

/**
 * This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab
 * Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from
 * the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
 */
export declare const baseUrl: string | undefined;
Object.defineProperty(exports, "baseUrl", {
    get() {
        return __config.get("baseUrl");
    },
    enumerable: true,
});

/**
 * This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab
 * CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
 */
export declare const cacertFile: string | undefined;
Object.defineProperty(exports, "cacertFile", {
    get() {
        return __config.get("cacertFile");
    },
    enumerable: true,
});

/**
 * File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
 */
export declare const clientCert: string | undefined;
Object.defineProperty(exports, "clientCert", {
    get() {
        return __config.get("clientCert");
    },
    enumerable: true,
});

/**
 * File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when
 * `client_cert` is set.
 */
export declare const clientKey: string | undefined;
Object.defineProperty(exports, "clientKey", {
    get() {
        return __config.get("clientKey");
    },
    enumerable: true,
});

/**
 * (Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider
 * configuration is correct and the GitLab API is reachable. Set this to `false` to skip this check. This may be useful if
 * the GitLab instance does not yet exist and is created within the same terraform module. It may be sourced from the
 * `GITLAB_EARLY_AUTH_CHECK`. This is an experimental feature and may change in the future. Please make sure to always keep
 * backups of your state.
 */
export declare const earlyAuthCheck: boolean | undefined;
Object.defineProperty(exports, "earlyAuthCheck", {
    get() {
        return __config.getObject<boolean>("earlyAuthCheck");
    },
    enumerable: true,
});

/**
 * When set to true this disables SSL verification of the connection to the GitLab instance.
 */
export declare const insecure: boolean | undefined;
Object.defineProperty(exports, "insecure", {
    get() {
        return __config.getObject<boolean>("insecure");
    },
    enumerable: true,
});

/**
 * The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is
 * used in this provider for authentication (using Bearer authorization token). See
 * https://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment
 * variable.
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

