// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectSecurityPolicyAttachment` resource allows to attach a security policy project to a project.
 *
 * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#mutationsecuritypolicyprojectassign)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // This resource can be used to attach a security policy to a pre-existing project
 * const foo = new gitlab.ProjectSecurityPolicyAttachment("foo", {
 *     project: "1234",
 *     policyProject: "4567",
 * });
 * // Or you can use Terraform to create a new project, add a policy to that project,
 * // then attach that policy project to other projects.
 * const my_policy_project = new gitlab.Project("my-policy-project", {name: "security-policy-project"});
 * const policy_yml = new gitlab.RepositoryFile("policy-yml", {
 *     project: my_policy_project.id,
 *     filePath: ".gitlab/security-policies/my-policy.yml",
 *     branch: "master",
 *     encoding: "text",
 *     content: `---
 * approval_policy:
 * - name: test
 * description: test
 * enabled: true
 * rules:
 * - type: any_merge_request
 *     branch_type: protected
 *     commits: any
 * approval_settings:
 *     block_branch_modification: true
 *     prevent_pushing_and_force_pushing: true
 *     prevent_approval_by_author: true
 *     prevent_approval_by_commit_author: true
 *     remove_approvals_with_new_commit: true
 *     require_password_to_approve: false
 * fallback_behavior:
 *     fail: closed
 * actions:
 * - type: send_bot_message
 *     enabled: true
 * `,
 * });
 * const my_policy = new gitlab.index.ProjectSecurityPolicy("my-policy", {
 *     project: 1234,
 *     policyProject: my_policy_project.id,
 * });
 * ```
 *
 * ## Import
 *
 * GitLab project security policy attachments can be imported using an id made up of `project:policy_project_id` where the policy project ID is the project ID of the policy project, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/projectSecurityPolicyAttachment:ProjectSecurityPolicyAttachment foo 1:2
 * ```
 */
export class ProjectSecurityPolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ProjectSecurityPolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectSecurityPolicyAttachmentState, opts?: pulumi.CustomResourceOptions): ProjectSecurityPolicyAttachment {
        return new ProjectSecurityPolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectSecurityPolicyAttachment:ProjectSecurityPolicyAttachment';

    /**
     * Returns true if the given object is an instance of ProjectSecurityPolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectSecurityPolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectSecurityPolicyAttachment.__pulumiType;
    }

    /**
     * The ID or Full Path of the security policy project.
     */
    public readonly policyProject!: pulumi.Output<string>;
    /**
     * The GraphQL ID of the security policy project.
     */
    public /*out*/ readonly policyProjectGraphqlId!: pulumi.Output<string>;
    /**
     * The ID or Full Path of the project which will have the security policy project assigned to it.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The GraphQL ID of the project to which the security policty project will be attached.
     */
    public /*out*/ readonly projectGraphqlId!: pulumi.Output<string>;

    /**
     * Create a ProjectSecurityPolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectSecurityPolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectSecurityPolicyAttachmentArgs | ProjectSecurityPolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectSecurityPolicyAttachmentState | undefined;
            resourceInputs["policyProject"] = state ? state.policyProject : undefined;
            resourceInputs["policyProjectGraphqlId"] = state ? state.policyProjectGraphqlId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectGraphqlId"] = state ? state.projectGraphqlId : undefined;
        } else {
            const args = argsOrState as ProjectSecurityPolicyAttachmentArgs | undefined;
            if ((!args || args.policyProject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyProject'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["policyProject"] = args ? args.policyProject : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["policyProjectGraphqlId"] = undefined /*out*/;
            resourceInputs["projectGraphqlId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectSecurityPolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectSecurityPolicyAttachment resources.
 */
export interface ProjectSecurityPolicyAttachmentState {
    /**
     * The ID or Full Path of the security policy project.
     */
    policyProject?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the security policy project.
     */
    policyProjectGraphqlId?: pulumi.Input<string>;
    /**
     * The ID or Full Path of the project which will have the security policy project assigned to it.
     */
    project?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the project to which the security policty project will be attached.
     */
    projectGraphqlId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectSecurityPolicyAttachment resource.
 */
export interface ProjectSecurityPolicyAttachmentArgs {
    /**
     * The ID or Full Path of the security policy project.
     */
    policyProject: pulumi.Input<string>;
    /**
     * The ID or Full Path of the project which will have the security policy project assigned to it.
     */
    project: pulumi.Input<string>;
}
