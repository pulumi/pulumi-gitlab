// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationAppearanceArgs, ApplicationAppearanceState } from "./applicationAppearance";
export type ApplicationAppearance = import("./applicationAppearance").ApplicationAppearance;
export const ApplicationAppearance: typeof import("./applicationAppearance").ApplicationAppearance = null as any;
utilities.lazyLoad(exports, ["ApplicationAppearance"], () => require("./applicationAppearance"));

export { ApplicationSettingsArgs, ApplicationSettingsState } from "./applicationSettings";
export type ApplicationSettings = import("./applicationSettings").ApplicationSettings;
export const ApplicationSettings: typeof import("./applicationSettings").ApplicationSettings = null as any;
utilities.lazyLoad(exports, ["ApplicationSettings"], () => require("./applicationSettings"));

export { BranchArgs, BranchState } from "./branch";
export type Branch = import("./branch").Branch;
export const Branch: typeof import("./branch").Branch = null as any;
utilities.lazyLoad(exports, ["Branch"], () => require("./branch"));

export { BranchProtectionArgs, BranchProtectionState } from "./branchProtection";
export type BranchProtection = import("./branchProtection").BranchProtection;
export const BranchProtection: typeof import("./branchProtection").BranchProtection = null as any;
utilities.lazyLoad(exports, ["BranchProtection"], () => require("./branchProtection"));

export { ClusterAgentArgs, ClusterAgentState } from "./clusterAgent";
export type ClusterAgent = import("./clusterAgent").ClusterAgent;
export const ClusterAgent: typeof import("./clusterAgent").ClusterAgent = null as any;
utilities.lazyLoad(exports, ["ClusterAgent"], () => require("./clusterAgent"));

export { ClusterAgentTokenArgs, ClusterAgentTokenState } from "./clusterAgentToken";
export type ClusterAgentToken = import("./clusterAgentToken").ClusterAgentToken;
export const ClusterAgentToken: typeof import("./clusterAgentToken").ClusterAgentToken = null as any;
utilities.lazyLoad(exports, ["ClusterAgentToken"], () => require("./clusterAgentToken"));

export { ComplianceFrameworkArgs, ComplianceFrameworkState } from "./complianceFramework";
export type ComplianceFramework = import("./complianceFramework").ComplianceFramework;
export const ComplianceFramework: typeof import("./complianceFramework").ComplianceFramework = null as any;
utilities.lazyLoad(exports, ["ComplianceFramework"], () => require("./complianceFramework"));

export { DeployKeyArgs, DeployKeyState } from "./deployKey";
export type DeployKey = import("./deployKey").DeployKey;
export const DeployKey: typeof import("./deployKey").DeployKey = null as any;
utilities.lazyLoad(exports, ["DeployKey"], () => require("./deployKey"));

export { DeployKeyEnableArgs, DeployKeyEnableState } from "./deployKeyEnable";
export type DeployKeyEnable = import("./deployKeyEnable").DeployKeyEnable;
export const DeployKeyEnable: typeof import("./deployKeyEnable").DeployKeyEnable = null as any;
utilities.lazyLoad(exports, ["DeployKeyEnable"], () => require("./deployKeyEnable"));

export { DeployTokenArgs, DeployTokenState } from "./deployToken";
export type DeployToken = import("./deployToken").DeployToken;
export const DeployToken: typeof import("./deployToken").DeployToken = null as any;
utilities.lazyLoad(exports, ["DeployToken"], () => require("./deployToken"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetBranchArgs, GetBranchResult, GetBranchOutputArgs } from "./getBranch";
export const getBranch: typeof import("./getBranch").getBranch = null as any;
export const getBranchOutput: typeof import("./getBranch").getBranchOutput = null as any;
utilities.lazyLoad(exports, ["getBranch","getBranchOutput"], () => require("./getBranch"));

export { GetClusterAgentArgs, GetClusterAgentResult, GetClusterAgentOutputArgs } from "./getClusterAgent";
export const getClusterAgent: typeof import("./getClusterAgent").getClusterAgent = null as any;
export const getClusterAgentOutput: typeof import("./getClusterAgent").getClusterAgentOutput = null as any;
utilities.lazyLoad(exports, ["getClusterAgent","getClusterAgentOutput"], () => require("./getClusterAgent"));

export { GetClusterAgentsArgs, GetClusterAgentsResult, GetClusterAgentsOutputArgs } from "./getClusterAgents";
export const getClusterAgents: typeof import("./getClusterAgents").getClusterAgents = null as any;
export const getClusterAgentsOutput: typeof import("./getClusterAgents").getClusterAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterAgents","getClusterAgentsOutput"], () => require("./getClusterAgents"));

export { GetComplianceFrameworkArgs, GetComplianceFrameworkResult, GetComplianceFrameworkOutputArgs } from "./getComplianceFramework";
export const getComplianceFramework: typeof import("./getComplianceFramework").getComplianceFramework = null as any;
export const getComplianceFrameworkOutput: typeof import("./getComplianceFramework").getComplianceFrameworkOutput = null as any;
utilities.lazyLoad(exports, ["getComplianceFramework","getComplianceFrameworkOutput"], () => require("./getComplianceFramework"));

export { GetCurrentUserResult } from "./getCurrentUser";
export const getCurrentUser: typeof import("./getCurrentUser").getCurrentUser = null as any;
export const getCurrentUserOutput: typeof import("./getCurrentUser").getCurrentUserOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentUser","getCurrentUserOutput"], () => require("./getCurrentUser"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupAccessTokensArgs, GetGroupAccessTokensResult, GetGroupAccessTokensOutputArgs } from "./getGroupAccessTokens";
export const getGroupAccessTokens: typeof import("./getGroupAccessTokens").getGroupAccessTokens = null as any;
export const getGroupAccessTokensOutput: typeof import("./getGroupAccessTokens").getGroupAccessTokensOutput = null as any;
utilities.lazyLoad(exports, ["getGroupAccessTokens","getGroupAccessTokensOutput"], () => require("./getGroupAccessTokens"));

export { GetGroupBillableMemberMembershipsArgs, GetGroupBillableMemberMembershipsResult, GetGroupBillableMemberMembershipsOutputArgs } from "./getGroupBillableMemberMemberships";
export const getGroupBillableMemberMemberships: typeof import("./getGroupBillableMemberMemberships").getGroupBillableMemberMemberships = null as any;
export const getGroupBillableMemberMembershipsOutput: typeof import("./getGroupBillableMemberMemberships").getGroupBillableMemberMembershipsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupBillableMemberMemberships","getGroupBillableMemberMembershipsOutput"], () => require("./getGroupBillableMemberMemberships"));

export { GetGroupHookArgs, GetGroupHookResult, GetGroupHookOutputArgs } from "./getGroupHook";
export const getGroupHook: typeof import("./getGroupHook").getGroupHook = null as any;
export const getGroupHookOutput: typeof import("./getGroupHook").getGroupHookOutput = null as any;
utilities.lazyLoad(exports, ["getGroupHook","getGroupHookOutput"], () => require("./getGroupHook"));

export { GetGroupHooksArgs, GetGroupHooksResult, GetGroupHooksOutputArgs } from "./getGroupHooks";
export const getGroupHooks: typeof import("./getGroupHooks").getGroupHooks = null as any;
export const getGroupHooksOutput: typeof import("./getGroupHooks").getGroupHooksOutput = null as any;
utilities.lazyLoad(exports, ["getGroupHooks","getGroupHooksOutput"], () => require("./getGroupHooks"));

export { GetGroupIdsArgs, GetGroupIdsResult, GetGroupIdsOutputArgs } from "./getGroupIds";
export const getGroupIds: typeof import("./getGroupIds").getGroupIds = null as any;
export const getGroupIdsOutput: typeof import("./getGroupIds").getGroupIdsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupIds","getGroupIdsOutput"], () => require("./getGroupIds"));

export { GetGroupMembershipArgs, GetGroupMembershipResult, GetGroupMembershipOutputArgs } from "./getGroupMembership";
export const getGroupMembership: typeof import("./getGroupMembership").getGroupMembership = null as any;
export const getGroupMembershipOutput: typeof import("./getGroupMembership").getGroupMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getGroupMembership","getGroupMembershipOutput"], () => require("./getGroupMembership"));

export { GetGroupProvisionedUsersArgs, GetGroupProvisionedUsersResult, GetGroupProvisionedUsersOutputArgs } from "./getGroupProvisionedUsers";
export const getGroupProvisionedUsers: typeof import("./getGroupProvisionedUsers").getGroupProvisionedUsers = null as any;
export const getGroupProvisionedUsersOutput: typeof import("./getGroupProvisionedUsers").getGroupProvisionedUsersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupProvisionedUsers","getGroupProvisionedUsersOutput"], () => require("./getGroupProvisionedUsers"));

export { GetGroupServiceAccountArgs, GetGroupServiceAccountResult, GetGroupServiceAccountOutputArgs } from "./getGroupServiceAccount";
export const getGroupServiceAccount: typeof import("./getGroupServiceAccount").getGroupServiceAccount = null as any;
export const getGroupServiceAccountOutput: typeof import("./getGroupServiceAccount").getGroupServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getGroupServiceAccount","getGroupServiceAccountOutput"], () => require("./getGroupServiceAccount"));

export { GetGroupSubgroupsArgs, GetGroupSubgroupsResult, GetGroupSubgroupsOutputArgs } from "./getGroupSubgroups";
export const getGroupSubgroups: typeof import("./getGroupSubgroups").getGroupSubgroups = null as any;
export const getGroupSubgroupsOutput: typeof import("./getGroupSubgroups").getGroupSubgroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupSubgroups","getGroupSubgroupsOutput"], () => require("./getGroupSubgroups"));

export { GetGroupVariableArgs, GetGroupVariableResult, GetGroupVariableOutputArgs } from "./getGroupVariable";
export const getGroupVariable: typeof import("./getGroupVariable").getGroupVariable = null as any;
export const getGroupVariableOutput: typeof import("./getGroupVariable").getGroupVariableOutput = null as any;
utilities.lazyLoad(exports, ["getGroupVariable","getGroupVariableOutput"], () => require("./getGroupVariable"));

export { GetGroupVariablesArgs, GetGroupVariablesResult, GetGroupVariablesOutputArgs } from "./getGroupVariables";
export const getGroupVariables: typeof import("./getGroupVariables").getGroupVariables = null as any;
export const getGroupVariablesOutput: typeof import("./getGroupVariables").getGroupVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getGroupVariables","getGroupVariablesOutput"], () => require("./getGroupVariables"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetInstanceDeployKeysArgs, GetInstanceDeployKeysResult, GetInstanceDeployKeysOutputArgs } from "./getInstanceDeployKeys";
export const getInstanceDeployKeys: typeof import("./getInstanceDeployKeys").getInstanceDeployKeys = null as any;
export const getInstanceDeployKeysOutput: typeof import("./getInstanceDeployKeys").getInstanceDeployKeysOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceDeployKeys","getInstanceDeployKeysOutput"], () => require("./getInstanceDeployKeys"));

export { GetInstanceServiceAccountArgs, GetInstanceServiceAccountResult, GetInstanceServiceAccountOutputArgs } from "./getInstanceServiceAccount";
export const getInstanceServiceAccount: typeof import("./getInstanceServiceAccount").getInstanceServiceAccount = null as any;
export const getInstanceServiceAccountOutput: typeof import("./getInstanceServiceAccount").getInstanceServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceServiceAccount","getInstanceServiceAccountOutput"], () => require("./getInstanceServiceAccount"));

export { GetInstanceVariableArgs, GetInstanceVariableResult, GetInstanceVariableOutputArgs } from "./getInstanceVariable";
export const getInstanceVariable: typeof import("./getInstanceVariable").getInstanceVariable = null as any;
export const getInstanceVariableOutput: typeof import("./getInstanceVariable").getInstanceVariableOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceVariable","getInstanceVariableOutput"], () => require("./getInstanceVariable"));

export { GetInstanceVariablesResult } from "./getInstanceVariables";
export const getInstanceVariables: typeof import("./getInstanceVariables").getInstanceVariables = null as any;
export const getInstanceVariablesOutput: typeof import("./getInstanceVariables").getInstanceVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceVariables","getInstanceVariablesOutput"], () => require("./getInstanceVariables"));

export { GetMetadataResult } from "./getMetadata";
export const getMetadata: typeof import("./getMetadata").getMetadata = null as any;
export const getMetadataOutput: typeof import("./getMetadata").getMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getMetadata","getMetadataOutput"], () => require("./getMetadata"));

export { GetPipelineScheduleArgs, GetPipelineScheduleResult, GetPipelineScheduleOutputArgs } from "./getPipelineSchedule";
export const getPipelineSchedule: typeof import("./getPipelineSchedule").getPipelineSchedule = null as any;
export const getPipelineScheduleOutput: typeof import("./getPipelineSchedule").getPipelineScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getPipelineSchedule","getPipelineScheduleOutput"], () => require("./getPipelineSchedule"));

export { GetPipelineSchedulesArgs, GetPipelineSchedulesResult, GetPipelineSchedulesOutputArgs } from "./getPipelineSchedules";
export const getPipelineSchedules: typeof import("./getPipelineSchedules").getPipelineSchedules = null as any;
export const getPipelineSchedulesOutput: typeof import("./getPipelineSchedules").getPipelineSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getPipelineSchedules","getPipelineSchedulesOutput"], () => require("./getPipelineSchedules"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectBranchesArgs, GetProjectBranchesResult, GetProjectBranchesOutputArgs } from "./getProjectBranches";
export const getProjectBranches: typeof import("./getProjectBranches").getProjectBranches = null as any;
export const getProjectBranchesOutput: typeof import("./getProjectBranches").getProjectBranchesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectBranches","getProjectBranchesOutput"], () => require("./getProjectBranches"));

export { GetProjectEnvironmentsArgs, GetProjectEnvironmentsResult, GetProjectEnvironmentsOutputArgs } from "./getProjectEnvironments";
export const getProjectEnvironments: typeof import("./getProjectEnvironments").getProjectEnvironments = null as any;
export const getProjectEnvironmentsOutput: typeof import("./getProjectEnvironments").getProjectEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectEnvironments","getProjectEnvironmentsOutput"], () => require("./getProjectEnvironments"));

export { GetProjectHookArgs, GetProjectHookResult, GetProjectHookOutputArgs } from "./getProjectHook";
export const getProjectHook: typeof import("./getProjectHook").getProjectHook = null as any;
export const getProjectHookOutput: typeof import("./getProjectHook").getProjectHookOutput = null as any;
utilities.lazyLoad(exports, ["getProjectHook","getProjectHookOutput"], () => require("./getProjectHook"));

export { GetProjectHooksArgs, GetProjectHooksResult, GetProjectHooksOutputArgs } from "./getProjectHooks";
export const getProjectHooks: typeof import("./getProjectHooks").getProjectHooks = null as any;
export const getProjectHooksOutput: typeof import("./getProjectHooks").getProjectHooksOutput = null as any;
utilities.lazyLoad(exports, ["getProjectHooks","getProjectHooksOutput"], () => require("./getProjectHooks"));

export { GetProjectIdsArgs, GetProjectIdsResult, GetProjectIdsOutputArgs } from "./getProjectIds";
export const getProjectIds: typeof import("./getProjectIds").getProjectIds = null as any;
export const getProjectIdsOutput: typeof import("./getProjectIds").getProjectIdsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectIds","getProjectIdsOutput"], () => require("./getProjectIds"));

export { GetProjectIssueArgs, GetProjectIssueResult, GetProjectIssueOutputArgs } from "./getProjectIssue";
export const getProjectIssue: typeof import("./getProjectIssue").getProjectIssue = null as any;
export const getProjectIssueOutput: typeof import("./getProjectIssue").getProjectIssueOutput = null as any;
utilities.lazyLoad(exports, ["getProjectIssue","getProjectIssueOutput"], () => require("./getProjectIssue"));

export { GetProjectIssuesArgs, GetProjectIssuesResult, GetProjectIssuesOutputArgs } from "./getProjectIssues";
export const getProjectIssues: typeof import("./getProjectIssues").getProjectIssues = null as any;
export const getProjectIssuesOutput: typeof import("./getProjectIssues").getProjectIssuesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectIssues","getProjectIssuesOutput"], () => require("./getProjectIssues"));

export { GetProjectMembershipArgs, GetProjectMembershipResult, GetProjectMembershipOutputArgs } from "./getProjectMembership";
export const getProjectMembership: typeof import("./getProjectMembership").getProjectMembership = null as any;
export const getProjectMembershipOutput: typeof import("./getProjectMembership").getProjectMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMembership","getProjectMembershipOutput"], () => require("./getProjectMembership"));

export { GetProjectMergeRequestArgs, GetProjectMergeRequestResult, GetProjectMergeRequestOutputArgs } from "./getProjectMergeRequest";
export const getProjectMergeRequest: typeof import("./getProjectMergeRequest").getProjectMergeRequest = null as any;
export const getProjectMergeRequestOutput: typeof import("./getProjectMergeRequest").getProjectMergeRequestOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMergeRequest","getProjectMergeRequestOutput"], () => require("./getProjectMergeRequest"));

export { GetProjectMergeRequestsArgs, GetProjectMergeRequestsResult, GetProjectMergeRequestsOutputArgs } from "./getProjectMergeRequests";
export const getProjectMergeRequests: typeof import("./getProjectMergeRequests").getProjectMergeRequests = null as any;
export const getProjectMergeRequestsOutput: typeof import("./getProjectMergeRequests").getProjectMergeRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMergeRequests","getProjectMergeRequestsOutput"], () => require("./getProjectMergeRequests"));

export { GetProjectMilestoneArgs, GetProjectMilestoneResult, GetProjectMilestoneOutputArgs } from "./getProjectMilestone";
export const getProjectMilestone: typeof import("./getProjectMilestone").getProjectMilestone = null as any;
export const getProjectMilestoneOutput: typeof import("./getProjectMilestone").getProjectMilestoneOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMilestone","getProjectMilestoneOutput"], () => require("./getProjectMilestone"));

export { GetProjectMilestonesArgs, GetProjectMilestonesResult, GetProjectMilestonesOutputArgs } from "./getProjectMilestones";
export const getProjectMilestones: typeof import("./getProjectMilestones").getProjectMilestones = null as any;
export const getProjectMilestonesOutput: typeof import("./getProjectMilestones").getProjectMilestonesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMilestones","getProjectMilestonesOutput"], () => require("./getProjectMilestones"));

export { GetProjectMirrorPublicKeyArgs, GetProjectMirrorPublicKeyResult, GetProjectMirrorPublicKeyOutputArgs } from "./getProjectMirrorPublicKey";
export const getProjectMirrorPublicKey: typeof import("./getProjectMirrorPublicKey").getProjectMirrorPublicKey = null as any;
export const getProjectMirrorPublicKeyOutput: typeof import("./getProjectMirrorPublicKey").getProjectMirrorPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMirrorPublicKey","getProjectMirrorPublicKeyOutput"], () => require("./getProjectMirrorPublicKey"));

export { GetProjectProtectedBranchArgs, GetProjectProtectedBranchResult, GetProjectProtectedBranchOutputArgs } from "./getProjectProtectedBranch";
export const getProjectProtectedBranch: typeof import("./getProjectProtectedBranch").getProjectProtectedBranch = null as any;
export const getProjectProtectedBranchOutput: typeof import("./getProjectProtectedBranch").getProjectProtectedBranchOutput = null as any;
utilities.lazyLoad(exports, ["getProjectProtectedBranch","getProjectProtectedBranchOutput"], () => require("./getProjectProtectedBranch"));

export { GetProjectProtectedBranchesArgs, GetProjectProtectedBranchesResult, GetProjectProtectedBranchesOutputArgs } from "./getProjectProtectedBranches";
export const getProjectProtectedBranches: typeof import("./getProjectProtectedBranches").getProjectProtectedBranches = null as any;
export const getProjectProtectedBranchesOutput: typeof import("./getProjectProtectedBranches").getProjectProtectedBranchesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectProtectedBranches","getProjectProtectedBranchesOutput"], () => require("./getProjectProtectedBranches"));

export { GetProjectProtectedTagArgs, GetProjectProtectedTagResult, GetProjectProtectedTagOutputArgs } from "./getProjectProtectedTag";
export const getProjectProtectedTag: typeof import("./getProjectProtectedTag").getProjectProtectedTag = null as any;
export const getProjectProtectedTagOutput: typeof import("./getProjectProtectedTag").getProjectProtectedTagOutput = null as any;
utilities.lazyLoad(exports, ["getProjectProtectedTag","getProjectProtectedTagOutput"], () => require("./getProjectProtectedTag"));

export { GetProjectProtectedTagsArgs, GetProjectProtectedTagsResult, GetProjectProtectedTagsOutputArgs } from "./getProjectProtectedTags";
export const getProjectProtectedTags: typeof import("./getProjectProtectedTags").getProjectProtectedTags = null as any;
export const getProjectProtectedTagsOutput: typeof import("./getProjectProtectedTags").getProjectProtectedTagsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectProtectedTags","getProjectProtectedTagsOutput"], () => require("./getProjectProtectedTags"));

export { GetProjectTagArgs, GetProjectTagResult, GetProjectTagOutputArgs } from "./getProjectTag";
export const getProjectTag: typeof import("./getProjectTag").getProjectTag = null as any;
export const getProjectTagOutput: typeof import("./getProjectTag").getProjectTagOutput = null as any;
utilities.lazyLoad(exports, ["getProjectTag","getProjectTagOutput"], () => require("./getProjectTag"));

export { GetProjectTagsArgs, GetProjectTagsResult, GetProjectTagsOutputArgs } from "./getProjectTags";
export const getProjectTags: typeof import("./getProjectTags").getProjectTags = null as any;
export const getProjectTagsOutput: typeof import("./getProjectTags").getProjectTagsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectTags","getProjectTagsOutput"], () => require("./getProjectTags"));

export { GetProjectVariableArgs, GetProjectVariableResult, GetProjectVariableOutputArgs } from "./getProjectVariable";
export const getProjectVariable: typeof import("./getProjectVariable").getProjectVariable = null as any;
export const getProjectVariableOutput: typeof import("./getProjectVariable").getProjectVariableOutput = null as any;
utilities.lazyLoad(exports, ["getProjectVariable","getProjectVariableOutput"], () => require("./getProjectVariable"));

export { GetProjectVariablesArgs, GetProjectVariablesResult, GetProjectVariablesOutputArgs } from "./getProjectVariables";
export const getProjectVariables: typeof import("./getProjectVariables").getProjectVariables = null as any;
export const getProjectVariablesOutput: typeof import("./getProjectVariables").getProjectVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectVariables","getProjectVariablesOutput"], () => require("./getProjectVariables"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetReleaseArgs, GetReleaseResult, GetReleaseOutputArgs } from "./getRelease";
export const getRelease: typeof import("./getRelease").getRelease = null as any;
export const getReleaseOutput: typeof import("./getRelease").getReleaseOutput = null as any;
utilities.lazyLoad(exports, ["getRelease","getReleaseOutput"], () => require("./getRelease"));

export { GetReleaseLinkArgs, GetReleaseLinkResult, GetReleaseLinkOutputArgs } from "./getReleaseLink";
export const getReleaseLink: typeof import("./getReleaseLink").getReleaseLink = null as any;
export const getReleaseLinkOutput: typeof import("./getReleaseLink").getReleaseLinkOutput = null as any;
utilities.lazyLoad(exports, ["getReleaseLink","getReleaseLinkOutput"], () => require("./getReleaseLink"));

export { GetReleaseLinksArgs, GetReleaseLinksResult, GetReleaseLinksOutputArgs } from "./getReleaseLinks";
export const getReleaseLinks: typeof import("./getReleaseLinks").getReleaseLinks = null as any;
export const getReleaseLinksOutput: typeof import("./getReleaseLinks").getReleaseLinksOutput = null as any;
utilities.lazyLoad(exports, ["getReleaseLinks","getReleaseLinksOutput"], () => require("./getReleaseLinks"));

export { GetRepositoryFileArgs, GetRepositoryFileResult, GetRepositoryFileOutputArgs } from "./getRepositoryFile";
export const getRepositoryFile: typeof import("./getRepositoryFile").getRepositoryFile = null as any;
export const getRepositoryFileOutput: typeof import("./getRepositoryFile").getRepositoryFileOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryFile","getRepositoryFileOutput"], () => require("./getRepositoryFile"));

export { GetRepositoryTreeArgs, GetRepositoryTreeResult, GetRepositoryTreeOutputArgs } from "./getRepositoryTree";
export const getRepositoryTree: typeof import("./getRepositoryTree").getRepositoryTree = null as any;
export const getRepositoryTreeOutput: typeof import("./getRepositoryTree").getRepositoryTreeOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryTree","getRepositoryTreeOutput"], () => require("./getRepositoryTree"));

export { GetRunnersArgs, GetRunnersResult, GetRunnersOutputArgs } from "./getRunners";
export const getRunners: typeof import("./getRunners").getRunners = null as any;
export const getRunnersOutput: typeof import("./getRunners").getRunnersOutput = null as any;
utilities.lazyLoad(exports, ["getRunners","getRunnersOutput"], () => require("./getRunners"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserSshkeysArgs, GetUserSshkeysResult, GetUserSshkeysOutputArgs } from "./getUserSshkeys";
export const getUserSshkeys: typeof import("./getUserSshkeys").getUserSshkeys = null as any;
export const getUserSshkeysOutput: typeof import("./getUserSshkeys").getUserSshkeysOutput = null as any;
utilities.lazyLoad(exports, ["getUserSshkeys","getUserSshkeysOutput"], () => require("./getUserSshkeys"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GlobalLevelNotificationsArgs, GlobalLevelNotificationsState } from "./globalLevelNotifications";
export type GlobalLevelNotifications = import("./globalLevelNotifications").GlobalLevelNotifications;
export const GlobalLevelNotifications: typeof import("./globalLevelNotifications").GlobalLevelNotifications = null as any;
utilities.lazyLoad(exports, ["GlobalLevelNotifications"], () => require("./globalLevelNotifications"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupAccessTokenArgs, GroupAccessTokenState } from "./groupAccessToken";
export type GroupAccessToken = import("./groupAccessToken").GroupAccessToken;
export const GroupAccessToken: typeof import("./groupAccessToken").GroupAccessToken = null as any;
utilities.lazyLoad(exports, ["GroupAccessToken"], () => require("./groupAccessToken"));

export { GroupBadgeArgs, GroupBadgeState } from "./groupBadge";
export type GroupBadge = import("./groupBadge").GroupBadge;
export const GroupBadge: typeof import("./groupBadge").GroupBadge = null as any;
utilities.lazyLoad(exports, ["GroupBadge"], () => require("./groupBadge"));

export { GroupClusterArgs, GroupClusterState } from "./groupCluster";
export type GroupCluster = import("./groupCluster").GroupCluster;
export const GroupCluster: typeof import("./groupCluster").GroupCluster = null as any;
utilities.lazyLoad(exports, ["GroupCluster"], () => require("./groupCluster"));

export { GroupCustomAttributeArgs, GroupCustomAttributeState } from "./groupCustomAttribute";
export type GroupCustomAttribute = import("./groupCustomAttribute").GroupCustomAttribute;
export const GroupCustomAttribute: typeof import("./groupCustomAttribute").GroupCustomAttribute = null as any;
utilities.lazyLoad(exports, ["GroupCustomAttribute"], () => require("./groupCustomAttribute"));

export { GroupDependencyProxyArgs, GroupDependencyProxyState } from "./groupDependencyProxy";
export type GroupDependencyProxy = import("./groupDependencyProxy").GroupDependencyProxy;
export const GroupDependencyProxy: typeof import("./groupDependencyProxy").GroupDependencyProxy = null as any;
utilities.lazyLoad(exports, ["GroupDependencyProxy"], () => require("./groupDependencyProxy"));

export { GroupEpicBoardArgs, GroupEpicBoardState } from "./groupEpicBoard";
export type GroupEpicBoard = import("./groupEpicBoard").GroupEpicBoard;
export const GroupEpicBoard: typeof import("./groupEpicBoard").GroupEpicBoard = null as any;
utilities.lazyLoad(exports, ["GroupEpicBoard"], () => require("./groupEpicBoard"));

export { GroupHookArgs, GroupHookState } from "./groupHook";
export type GroupHook = import("./groupHook").GroupHook;
export const GroupHook: typeof import("./groupHook").GroupHook = null as any;
utilities.lazyLoad(exports, ["GroupHook"], () => require("./groupHook"));

export { GroupIssueBoardArgs, GroupIssueBoardState } from "./groupIssueBoard";
export type GroupIssueBoard = import("./groupIssueBoard").GroupIssueBoard;
export const GroupIssueBoard: typeof import("./groupIssueBoard").GroupIssueBoard = null as any;
utilities.lazyLoad(exports, ["GroupIssueBoard"], () => require("./groupIssueBoard"));

export { GroupLabelArgs, GroupLabelState } from "./groupLabel";
export type GroupLabel = import("./groupLabel").GroupLabel;
export const GroupLabel: typeof import("./groupLabel").GroupLabel = null as any;
utilities.lazyLoad(exports, ["GroupLabel"], () => require("./groupLabel"));

export { GroupLdapLinkArgs, GroupLdapLinkState } from "./groupLdapLink";
export type GroupLdapLink = import("./groupLdapLink").GroupLdapLink;
export const GroupLdapLink: typeof import("./groupLdapLink").GroupLdapLink = null as any;
utilities.lazyLoad(exports, ["GroupLdapLink"], () => require("./groupLdapLink"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { GroupProjectFileTemplateArgs, GroupProjectFileTemplateState } from "./groupProjectFileTemplate";
export type GroupProjectFileTemplate = import("./groupProjectFileTemplate").GroupProjectFileTemplate;
export const GroupProjectFileTemplate: typeof import("./groupProjectFileTemplate").GroupProjectFileTemplate = null as any;
utilities.lazyLoad(exports, ["GroupProjectFileTemplate"], () => require("./groupProjectFileTemplate"));

export { GroupProtectedEnvironmentArgs, GroupProtectedEnvironmentState } from "./groupProtectedEnvironment";
export type GroupProtectedEnvironment = import("./groupProtectedEnvironment").GroupProtectedEnvironment;
export const GroupProtectedEnvironment: typeof import("./groupProtectedEnvironment").GroupProtectedEnvironment = null as any;
utilities.lazyLoad(exports, ["GroupProtectedEnvironment"], () => require("./groupProtectedEnvironment"));

export { GroupSamlLinkArgs, GroupSamlLinkState } from "./groupSamlLink";
export type GroupSamlLink = import("./groupSamlLink").GroupSamlLink;
export const GroupSamlLink: typeof import("./groupSamlLink").GroupSamlLink = null as any;
utilities.lazyLoad(exports, ["GroupSamlLink"], () => require("./groupSamlLink"));

export { GroupSecurityPolicyAttachmentArgs, GroupSecurityPolicyAttachmentState } from "./groupSecurityPolicyAttachment";
export type GroupSecurityPolicyAttachment = import("./groupSecurityPolicyAttachment").GroupSecurityPolicyAttachment;
export const GroupSecurityPolicyAttachment: typeof import("./groupSecurityPolicyAttachment").GroupSecurityPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["GroupSecurityPolicyAttachment"], () => require("./groupSecurityPolicyAttachment"));

export { GroupServiceAccountArgs, GroupServiceAccountState } from "./groupServiceAccount";
export type GroupServiceAccount = import("./groupServiceAccount").GroupServiceAccount;
export const GroupServiceAccount: typeof import("./groupServiceAccount").GroupServiceAccount = null as any;
utilities.lazyLoad(exports, ["GroupServiceAccount"], () => require("./groupServiceAccount"));

export { GroupServiceAccountAccessTokenArgs, GroupServiceAccountAccessTokenState } from "./groupServiceAccountAccessToken";
export type GroupServiceAccountAccessToken = import("./groupServiceAccountAccessToken").GroupServiceAccountAccessToken;
export const GroupServiceAccountAccessToken: typeof import("./groupServiceAccountAccessToken").GroupServiceAccountAccessToken = null as any;
utilities.lazyLoad(exports, ["GroupServiceAccountAccessToken"], () => require("./groupServiceAccountAccessToken"));

export { GroupShareGroupArgs, GroupShareGroupState } from "./groupShareGroup";
export type GroupShareGroup = import("./groupShareGroup").GroupShareGroup;
export const GroupShareGroup: typeof import("./groupShareGroup").GroupShareGroup = null as any;
utilities.lazyLoad(exports, ["GroupShareGroup"], () => require("./groupShareGroup"));

export { GroupVariableArgs, GroupVariableState } from "./groupVariable";
export type GroupVariable = import("./groupVariable").GroupVariable;
export const GroupVariable: typeof import("./groupVariable").GroupVariable = null as any;
utilities.lazyLoad(exports, ["GroupVariable"], () => require("./groupVariable"));

export { InstanceClusterArgs, InstanceClusterState } from "./instanceCluster";
export type InstanceCluster = import("./instanceCluster").InstanceCluster;
export const InstanceCluster: typeof import("./instanceCluster").InstanceCluster = null as any;
utilities.lazyLoad(exports, ["InstanceCluster"], () => require("./instanceCluster"));

export { InstanceServiceAccountArgs, InstanceServiceAccountState } from "./instanceServiceAccount";
export type InstanceServiceAccount = import("./instanceServiceAccount").InstanceServiceAccount;
export const InstanceServiceAccount: typeof import("./instanceServiceAccount").InstanceServiceAccount = null as any;
utilities.lazyLoad(exports, ["InstanceServiceAccount"], () => require("./instanceServiceAccount"));

export { InstanceVariableArgs, InstanceVariableState } from "./instanceVariable";
export type InstanceVariable = import("./instanceVariable").InstanceVariable;
export const InstanceVariable: typeof import("./instanceVariable").InstanceVariable = null as any;
utilities.lazyLoad(exports, ["InstanceVariable"], () => require("./instanceVariable"));

export { IntegrationCustomIssueTrackerArgs, IntegrationCustomIssueTrackerState } from "./integrationCustomIssueTracker";
export type IntegrationCustomIssueTracker = import("./integrationCustomIssueTracker").IntegrationCustomIssueTracker;
export const IntegrationCustomIssueTracker: typeof import("./integrationCustomIssueTracker").IntegrationCustomIssueTracker = null as any;
utilities.lazyLoad(exports, ["IntegrationCustomIssueTracker"], () => require("./integrationCustomIssueTracker"));

export { IntegrationEmailsOnPushArgs, IntegrationEmailsOnPushState } from "./integrationEmailsOnPush";
export type IntegrationEmailsOnPush = import("./integrationEmailsOnPush").IntegrationEmailsOnPush;
export const IntegrationEmailsOnPush: typeof import("./integrationEmailsOnPush").IntegrationEmailsOnPush = null as any;
utilities.lazyLoad(exports, ["IntegrationEmailsOnPush"], () => require("./integrationEmailsOnPush"));

export { IntegrationExternalWikiArgs, IntegrationExternalWikiState } from "./integrationExternalWiki";
export type IntegrationExternalWiki = import("./integrationExternalWiki").IntegrationExternalWiki;
export const IntegrationExternalWiki: typeof import("./integrationExternalWiki").IntegrationExternalWiki = null as any;
utilities.lazyLoad(exports, ["IntegrationExternalWiki"], () => require("./integrationExternalWiki"));

export { IntegrationGithubArgs, IntegrationGithubState } from "./integrationGithub";
export type IntegrationGithub = import("./integrationGithub").IntegrationGithub;
export const IntegrationGithub: typeof import("./integrationGithub").IntegrationGithub = null as any;
utilities.lazyLoad(exports, ["IntegrationGithub"], () => require("./integrationGithub"));

export { IntegrationHarborArgs, IntegrationHarborState } from "./integrationHarbor";
export type IntegrationHarbor = import("./integrationHarbor").IntegrationHarbor;
export const IntegrationHarbor: typeof import("./integrationHarbor").IntegrationHarbor = null as any;
utilities.lazyLoad(exports, ["IntegrationHarbor"], () => require("./integrationHarbor"));

export { IntegrationJenkinsArgs, IntegrationJenkinsState } from "./integrationJenkins";
export type IntegrationJenkins = import("./integrationJenkins").IntegrationJenkins;
export const IntegrationJenkins: typeof import("./integrationJenkins").IntegrationJenkins = null as any;
utilities.lazyLoad(exports, ["IntegrationJenkins"], () => require("./integrationJenkins"));

export { IntegrationJiraArgs, IntegrationJiraState } from "./integrationJira";
export type IntegrationJira = import("./integrationJira").IntegrationJira;
export const IntegrationJira: typeof import("./integrationJira").IntegrationJira = null as any;
utilities.lazyLoad(exports, ["IntegrationJira"], () => require("./integrationJira"));

export { IntegrationMattermostArgs, IntegrationMattermostState } from "./integrationMattermost";
export type IntegrationMattermost = import("./integrationMattermost").IntegrationMattermost;
export const IntegrationMattermost: typeof import("./integrationMattermost").IntegrationMattermost = null as any;
utilities.lazyLoad(exports, ["IntegrationMattermost"], () => require("./integrationMattermost"));

export { IntegrationMicrosoftTeamsArgs, IntegrationMicrosoftTeamsState } from "./integrationMicrosoftTeams";
export type IntegrationMicrosoftTeams = import("./integrationMicrosoftTeams").IntegrationMicrosoftTeams;
export const IntegrationMicrosoftTeams: typeof import("./integrationMicrosoftTeams").IntegrationMicrosoftTeams = null as any;
utilities.lazyLoad(exports, ["IntegrationMicrosoftTeams"], () => require("./integrationMicrosoftTeams"));

export { IntegrationPipelinesEmailArgs, IntegrationPipelinesEmailState } from "./integrationPipelinesEmail";
export type IntegrationPipelinesEmail = import("./integrationPipelinesEmail").IntegrationPipelinesEmail;
export const IntegrationPipelinesEmail: typeof import("./integrationPipelinesEmail").IntegrationPipelinesEmail = null as any;
utilities.lazyLoad(exports, ["IntegrationPipelinesEmail"], () => require("./integrationPipelinesEmail"));

export { IntegrationRedmineArgs, IntegrationRedmineState } from "./integrationRedmine";
export type IntegrationRedmine = import("./integrationRedmine").IntegrationRedmine;
export const IntegrationRedmine: typeof import("./integrationRedmine").IntegrationRedmine = null as any;
utilities.lazyLoad(exports, ["IntegrationRedmine"], () => require("./integrationRedmine"));

export { IntegrationSlackArgs, IntegrationSlackState } from "./integrationSlack";
export type IntegrationSlack = import("./integrationSlack").IntegrationSlack;
export const IntegrationSlack: typeof import("./integrationSlack").IntegrationSlack = null as any;
utilities.lazyLoad(exports, ["IntegrationSlack"], () => require("./integrationSlack"));

export { IntegrationTelegramArgs, IntegrationTelegramState } from "./integrationTelegram";
export type IntegrationTelegram = import("./integrationTelegram").IntegrationTelegram;
export const IntegrationTelegram: typeof import("./integrationTelegram").IntegrationTelegram = null as any;
utilities.lazyLoad(exports, ["IntegrationTelegram"], () => require("./integrationTelegram"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { MemberRoleArgs, MemberRoleState } from "./memberRole";
export type MemberRole = import("./memberRole").MemberRole;
export const MemberRole: typeof import("./memberRole").MemberRole = null as any;
utilities.lazyLoad(exports, ["MemberRole"], () => require("./memberRole"));

export { PagesDomainArgs, PagesDomainState } from "./pagesDomain";
export type PagesDomain = import("./pagesDomain").PagesDomain;
export const PagesDomain: typeof import("./pagesDomain").PagesDomain = null as any;
utilities.lazyLoad(exports, ["PagesDomain"], () => require("./pagesDomain"));

export { PersonalAccessTokenArgs, PersonalAccessTokenState } from "./personalAccessToken";
export type PersonalAccessToken = import("./personalAccessToken").PersonalAccessToken;
export const PersonalAccessToken: typeof import("./personalAccessToken").PersonalAccessToken = null as any;
utilities.lazyLoad(exports, ["PersonalAccessToken"], () => require("./personalAccessToken"));

export { PipelineScheduleArgs, PipelineScheduleState } from "./pipelineSchedule";
export type PipelineSchedule = import("./pipelineSchedule").PipelineSchedule;
export const PipelineSchedule: typeof import("./pipelineSchedule").PipelineSchedule = null as any;
utilities.lazyLoad(exports, ["PipelineSchedule"], () => require("./pipelineSchedule"));

export { PipelineScheduleVariableArgs, PipelineScheduleVariableState } from "./pipelineScheduleVariable";
export type PipelineScheduleVariable = import("./pipelineScheduleVariable").PipelineScheduleVariable;
export const PipelineScheduleVariable: typeof import("./pipelineScheduleVariable").PipelineScheduleVariable = null as any;
utilities.lazyLoad(exports, ["PipelineScheduleVariable"], () => require("./pipelineScheduleVariable"));

export { PipelineTriggerArgs, PipelineTriggerState } from "./pipelineTrigger";
export type PipelineTrigger = import("./pipelineTrigger").PipelineTrigger;
export const PipelineTrigger: typeof import("./pipelineTrigger").PipelineTrigger = null as any;
utilities.lazyLoad(exports, ["PipelineTrigger"], () => require("./pipelineTrigger"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectAccessTokenArgs, ProjectAccessTokenState } from "./projectAccessToken";
export type ProjectAccessToken = import("./projectAccessToken").ProjectAccessToken;
export const ProjectAccessToken: typeof import("./projectAccessToken").ProjectAccessToken = null as any;
utilities.lazyLoad(exports, ["ProjectAccessToken"], () => require("./projectAccessToken"));

export { ProjectApprovalRuleArgs, ProjectApprovalRuleState } from "./projectApprovalRule";
export type ProjectApprovalRule = import("./projectApprovalRule").ProjectApprovalRule;
export const ProjectApprovalRule: typeof import("./projectApprovalRule").ProjectApprovalRule = null as any;
utilities.lazyLoad(exports, ["ProjectApprovalRule"], () => require("./projectApprovalRule"));

export { ProjectBadgeArgs, ProjectBadgeState } from "./projectBadge";
export type ProjectBadge = import("./projectBadge").ProjectBadge;
export const ProjectBadge: typeof import("./projectBadge").ProjectBadge = null as any;
utilities.lazyLoad(exports, ["ProjectBadge"], () => require("./projectBadge"));

export { ProjectClusterArgs, ProjectClusterState } from "./projectCluster";
export type ProjectCluster = import("./projectCluster").ProjectCluster;
export const ProjectCluster: typeof import("./projectCluster").ProjectCluster = null as any;
utilities.lazyLoad(exports, ["ProjectCluster"], () => require("./projectCluster"));

export { ProjectComplianceFrameworksArgs, ProjectComplianceFrameworksState } from "./projectComplianceFrameworks";
export type ProjectComplianceFrameworks = import("./projectComplianceFrameworks").ProjectComplianceFrameworks;
export const ProjectComplianceFrameworks: typeof import("./projectComplianceFrameworks").ProjectComplianceFrameworks = null as any;
utilities.lazyLoad(exports, ["ProjectComplianceFrameworks"], () => require("./projectComplianceFrameworks"));

export { ProjectCustomAttributeArgs, ProjectCustomAttributeState } from "./projectCustomAttribute";
export type ProjectCustomAttribute = import("./projectCustomAttribute").ProjectCustomAttribute;
export const ProjectCustomAttribute: typeof import("./projectCustomAttribute").ProjectCustomAttribute = null as any;
utilities.lazyLoad(exports, ["ProjectCustomAttribute"], () => require("./projectCustomAttribute"));

export { ProjectEnvironmentArgs, ProjectEnvironmentState } from "./projectEnvironment";
export type ProjectEnvironment = import("./projectEnvironment").ProjectEnvironment;
export const ProjectEnvironment: typeof import("./projectEnvironment").ProjectEnvironment = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironment"], () => require("./projectEnvironment"));

export { ProjectFreezePeriodArgs, ProjectFreezePeriodState } from "./projectFreezePeriod";
export type ProjectFreezePeriod = import("./projectFreezePeriod").ProjectFreezePeriod;
export const ProjectFreezePeriod: typeof import("./projectFreezePeriod").ProjectFreezePeriod = null as any;
utilities.lazyLoad(exports, ["ProjectFreezePeriod"], () => require("./projectFreezePeriod"));

export { ProjectHookArgs, ProjectHookState } from "./projectHook";
export type ProjectHook = import("./projectHook").ProjectHook;
export const ProjectHook: typeof import("./projectHook").ProjectHook = null as any;
utilities.lazyLoad(exports, ["ProjectHook"], () => require("./projectHook"));

export { ProjectIntegrationCustomIssueTrackerArgs, ProjectIntegrationCustomIssueTrackerState } from "./projectIntegrationCustomIssueTracker";
export type ProjectIntegrationCustomIssueTracker = import("./projectIntegrationCustomIssueTracker").ProjectIntegrationCustomIssueTracker;
export const ProjectIntegrationCustomIssueTracker: typeof import("./projectIntegrationCustomIssueTracker").ProjectIntegrationCustomIssueTracker = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationCustomIssueTracker"], () => require("./projectIntegrationCustomIssueTracker"));

export { ProjectIntegrationEmailsOnPushArgs, ProjectIntegrationEmailsOnPushState } from "./projectIntegrationEmailsOnPush";
export type ProjectIntegrationEmailsOnPush = import("./projectIntegrationEmailsOnPush").ProjectIntegrationEmailsOnPush;
export const ProjectIntegrationEmailsOnPush: typeof import("./projectIntegrationEmailsOnPush").ProjectIntegrationEmailsOnPush = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationEmailsOnPush"], () => require("./projectIntegrationEmailsOnPush"));

export { ProjectIntegrationExternalWikiArgs, ProjectIntegrationExternalWikiState } from "./projectIntegrationExternalWiki";
export type ProjectIntegrationExternalWiki = import("./projectIntegrationExternalWiki").ProjectIntegrationExternalWiki;
export const ProjectIntegrationExternalWiki: typeof import("./projectIntegrationExternalWiki").ProjectIntegrationExternalWiki = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationExternalWiki"], () => require("./projectIntegrationExternalWiki"));

export { ProjectIntegrationGithubArgs, ProjectIntegrationGithubState } from "./projectIntegrationGithub";
export type ProjectIntegrationGithub = import("./projectIntegrationGithub").ProjectIntegrationGithub;
export const ProjectIntegrationGithub: typeof import("./projectIntegrationGithub").ProjectIntegrationGithub = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationGithub"], () => require("./projectIntegrationGithub"));

export { ProjectIntegrationHarborArgs, ProjectIntegrationHarborState } from "./projectIntegrationHarbor";
export type ProjectIntegrationHarbor = import("./projectIntegrationHarbor").ProjectIntegrationHarbor;
export const ProjectIntegrationHarbor: typeof import("./projectIntegrationHarbor").ProjectIntegrationHarbor = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationHarbor"], () => require("./projectIntegrationHarbor"));

export { ProjectIntegrationJenkinsArgs, ProjectIntegrationJenkinsState } from "./projectIntegrationJenkins";
export type ProjectIntegrationJenkins = import("./projectIntegrationJenkins").ProjectIntegrationJenkins;
export const ProjectIntegrationJenkins: typeof import("./projectIntegrationJenkins").ProjectIntegrationJenkins = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationJenkins"], () => require("./projectIntegrationJenkins"));

export { ProjectIntegrationJiraArgs, ProjectIntegrationJiraState } from "./projectIntegrationJira";
export type ProjectIntegrationJira = import("./projectIntegrationJira").ProjectIntegrationJira;
export const ProjectIntegrationJira: typeof import("./projectIntegrationJira").ProjectIntegrationJira = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationJira"], () => require("./projectIntegrationJira"));

export { ProjectIntegrationMattermostArgs, ProjectIntegrationMattermostState } from "./projectIntegrationMattermost";
export type ProjectIntegrationMattermost = import("./projectIntegrationMattermost").ProjectIntegrationMattermost;
export const ProjectIntegrationMattermost: typeof import("./projectIntegrationMattermost").ProjectIntegrationMattermost = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationMattermost"], () => require("./projectIntegrationMattermost"));

export { ProjectIntegrationMicrosoftTeamsArgs, ProjectIntegrationMicrosoftTeamsState } from "./projectIntegrationMicrosoftTeams";
export type ProjectIntegrationMicrosoftTeams = import("./projectIntegrationMicrosoftTeams").ProjectIntegrationMicrosoftTeams;
export const ProjectIntegrationMicrosoftTeams: typeof import("./projectIntegrationMicrosoftTeams").ProjectIntegrationMicrosoftTeams = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationMicrosoftTeams"], () => require("./projectIntegrationMicrosoftTeams"));

export { ProjectIntegrationPipelinesEmailArgs, ProjectIntegrationPipelinesEmailState } from "./projectIntegrationPipelinesEmail";
export type ProjectIntegrationPipelinesEmail = import("./projectIntegrationPipelinesEmail").ProjectIntegrationPipelinesEmail;
export const ProjectIntegrationPipelinesEmail: typeof import("./projectIntegrationPipelinesEmail").ProjectIntegrationPipelinesEmail = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationPipelinesEmail"], () => require("./projectIntegrationPipelinesEmail"));

export { ProjectIntegrationRedmineArgs, ProjectIntegrationRedmineState } from "./projectIntegrationRedmine";
export type ProjectIntegrationRedmine = import("./projectIntegrationRedmine").ProjectIntegrationRedmine;
export const ProjectIntegrationRedmine: typeof import("./projectIntegrationRedmine").ProjectIntegrationRedmine = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationRedmine"], () => require("./projectIntegrationRedmine"));

export { ProjectIntegrationTelegramArgs, ProjectIntegrationTelegramState } from "./projectIntegrationTelegram";
export type ProjectIntegrationTelegram = import("./projectIntegrationTelegram").ProjectIntegrationTelegram;
export const ProjectIntegrationTelegram: typeof import("./projectIntegrationTelegram").ProjectIntegrationTelegram = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationTelegram"], () => require("./projectIntegrationTelegram"));

export { ProjectIntegrationYoutrackArgs, ProjectIntegrationYoutrackState } from "./projectIntegrationYoutrack";
export type ProjectIntegrationYoutrack = import("./projectIntegrationYoutrack").ProjectIntegrationYoutrack;
export const ProjectIntegrationYoutrack: typeof import("./projectIntegrationYoutrack").ProjectIntegrationYoutrack = null as any;
utilities.lazyLoad(exports, ["ProjectIntegrationYoutrack"], () => require("./projectIntegrationYoutrack"));

export { ProjectIssueArgs, ProjectIssueState } from "./projectIssue";
export type ProjectIssue = import("./projectIssue").ProjectIssue;
export const ProjectIssue: typeof import("./projectIssue").ProjectIssue = null as any;
utilities.lazyLoad(exports, ["ProjectIssue"], () => require("./projectIssue"));

export { ProjectIssueBoardArgs, ProjectIssueBoardState } from "./projectIssueBoard";
export type ProjectIssueBoard = import("./projectIssueBoard").ProjectIssueBoard;
export const ProjectIssueBoard: typeof import("./projectIssueBoard").ProjectIssueBoard = null as any;
utilities.lazyLoad(exports, ["ProjectIssueBoard"], () => require("./projectIssueBoard"));

export { ProjectJobTokenScopeArgs, ProjectJobTokenScopeState } from "./projectJobTokenScope";
export type ProjectJobTokenScope = import("./projectJobTokenScope").ProjectJobTokenScope;
export const ProjectJobTokenScope: typeof import("./projectJobTokenScope").ProjectJobTokenScope = null as any;
utilities.lazyLoad(exports, ["ProjectJobTokenScope"], () => require("./projectJobTokenScope"));

export { ProjectJobTokenScopesArgs, ProjectJobTokenScopesState } from "./projectJobTokenScopes";
export type ProjectJobTokenScopes = import("./projectJobTokenScopes").ProjectJobTokenScopes;
export const ProjectJobTokenScopes: typeof import("./projectJobTokenScopes").ProjectJobTokenScopes = null as any;
utilities.lazyLoad(exports, ["ProjectJobTokenScopes"], () => require("./projectJobTokenScopes"));

export { ProjectLabelArgs, ProjectLabelState } from "./projectLabel";
export type ProjectLabel = import("./projectLabel").ProjectLabel;
export const ProjectLabel: typeof import("./projectLabel").ProjectLabel = null as any;
utilities.lazyLoad(exports, ["ProjectLabel"], () => require("./projectLabel"));

export { ProjectLevelMrApprovalsArgs, ProjectLevelMrApprovalsState } from "./projectLevelMrApprovals";
export type ProjectLevelMrApprovals = import("./projectLevelMrApprovals").ProjectLevelMrApprovals;
export const ProjectLevelMrApprovals: typeof import("./projectLevelMrApprovals").ProjectLevelMrApprovals = null as any;
utilities.lazyLoad(exports, ["ProjectLevelMrApprovals"], () => require("./projectLevelMrApprovals"));

export { ProjectLevelNotificationsArgs, ProjectLevelNotificationsState } from "./projectLevelNotifications";
export type ProjectLevelNotifications = import("./projectLevelNotifications").ProjectLevelNotifications;
export const ProjectLevelNotifications: typeof import("./projectLevelNotifications").ProjectLevelNotifications = null as any;
utilities.lazyLoad(exports, ["ProjectLevelNotifications"], () => require("./projectLevelNotifications"));

export { ProjectMembershipArgs, ProjectMembershipState } from "./projectMembership";
export type ProjectMembership = import("./projectMembership").ProjectMembership;
export const ProjectMembership: typeof import("./projectMembership").ProjectMembership = null as any;
utilities.lazyLoad(exports, ["ProjectMembership"], () => require("./projectMembership"));

export { ProjectMergeRequestNoteArgs, ProjectMergeRequestNoteState } from "./projectMergeRequestNote";
export type ProjectMergeRequestNote = import("./projectMergeRequestNote").ProjectMergeRequestNote;
export const ProjectMergeRequestNote: typeof import("./projectMergeRequestNote").ProjectMergeRequestNote = null as any;
utilities.lazyLoad(exports, ["ProjectMergeRequestNote"], () => require("./projectMergeRequestNote"));

export { ProjectMilestoneArgs, ProjectMilestoneState } from "./projectMilestone";
export type ProjectMilestone = import("./projectMilestone").ProjectMilestone;
export const ProjectMilestone: typeof import("./projectMilestone").ProjectMilestone = null as any;
utilities.lazyLoad(exports, ["ProjectMilestone"], () => require("./projectMilestone"));

export { ProjectMirrorArgs, ProjectMirrorState } from "./projectMirror";
export type ProjectMirror = import("./projectMirror").ProjectMirror;
export const ProjectMirror: typeof import("./projectMirror").ProjectMirror = null as any;
utilities.lazyLoad(exports, ["ProjectMirror"], () => require("./projectMirror"));

export { ProjectPagesSettingsArgs, ProjectPagesSettingsState } from "./projectPagesSettings";
export type ProjectPagesSettings = import("./projectPagesSettings").ProjectPagesSettings;
export const ProjectPagesSettings: typeof import("./projectPagesSettings").ProjectPagesSettings = null as any;
utilities.lazyLoad(exports, ["ProjectPagesSettings"], () => require("./projectPagesSettings"));

export { ProjectProtectedEnvironmentArgs, ProjectProtectedEnvironmentState } from "./projectProtectedEnvironment";
export type ProjectProtectedEnvironment = import("./projectProtectedEnvironment").ProjectProtectedEnvironment;
export const ProjectProtectedEnvironment: typeof import("./projectProtectedEnvironment").ProjectProtectedEnvironment = null as any;
utilities.lazyLoad(exports, ["ProjectProtectedEnvironment"], () => require("./projectProtectedEnvironment"));

export { ProjectPushRulesArgs, ProjectPushRulesState } from "./projectPushRules";
export type ProjectPushRules = import("./projectPushRules").ProjectPushRules;
export const ProjectPushRules: typeof import("./projectPushRules").ProjectPushRules = null as any;
utilities.lazyLoad(exports, ["ProjectPushRules"], () => require("./projectPushRules"));

export { ProjectRunnerEnablementArgs, ProjectRunnerEnablementState } from "./projectRunnerEnablement";
export type ProjectRunnerEnablement = import("./projectRunnerEnablement").ProjectRunnerEnablement;
export const ProjectRunnerEnablement: typeof import("./projectRunnerEnablement").ProjectRunnerEnablement = null as any;
utilities.lazyLoad(exports, ["ProjectRunnerEnablement"], () => require("./projectRunnerEnablement"));

export { ProjectSecurityPolicyAttachmentArgs, ProjectSecurityPolicyAttachmentState } from "./projectSecurityPolicyAttachment";
export type ProjectSecurityPolicyAttachment = import("./projectSecurityPolicyAttachment").ProjectSecurityPolicyAttachment;
export const ProjectSecurityPolicyAttachment: typeof import("./projectSecurityPolicyAttachment").ProjectSecurityPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["ProjectSecurityPolicyAttachment"], () => require("./projectSecurityPolicyAttachment"));

export { ProjectShareGroupArgs, ProjectShareGroupState } from "./projectShareGroup";
export type ProjectShareGroup = import("./projectShareGroup").ProjectShareGroup;
export const ProjectShareGroup: typeof import("./projectShareGroup").ProjectShareGroup = null as any;
utilities.lazyLoad(exports, ["ProjectShareGroup"], () => require("./projectShareGroup"));

export { ProjectTagArgs, ProjectTagState } from "./projectTag";
export type ProjectTag = import("./projectTag").ProjectTag;
export const ProjectTag: typeof import("./projectTag").ProjectTag = null as any;
utilities.lazyLoad(exports, ["ProjectTag"], () => require("./projectTag"));

export { ProjectTargetBranchRuleArgs, ProjectTargetBranchRuleState } from "./projectTargetBranchRule";
export type ProjectTargetBranchRule = import("./projectTargetBranchRule").ProjectTargetBranchRule;
export const ProjectTargetBranchRule: typeof import("./projectTargetBranchRule").ProjectTargetBranchRule = null as any;
utilities.lazyLoad(exports, ["ProjectTargetBranchRule"], () => require("./projectTargetBranchRule"));

export { ProjectVariableArgs, ProjectVariableState } from "./projectVariable";
export type ProjectVariable = import("./projectVariable").ProjectVariable;
export const ProjectVariable: typeof import("./projectVariable").ProjectVariable = null as any;
utilities.lazyLoad(exports, ["ProjectVariable"], () => require("./projectVariable"));

export { ProjectWikiPageArgs, ProjectWikiPageState } from "./projectWikiPage";
export type ProjectWikiPage = import("./projectWikiPage").ProjectWikiPage;
export const ProjectWikiPage: typeof import("./projectWikiPage").ProjectWikiPage = null as any;
utilities.lazyLoad(exports, ["ProjectWikiPage"], () => require("./projectWikiPage"));

export * from "./provider";
import { Provider } from "./provider";

export { ReleaseArgs, ReleaseState } from "./release";
export type Release = import("./release").Release;
export const Release: typeof import("./release").Release = null as any;
utilities.lazyLoad(exports, ["Release"], () => require("./release"));

export { ReleaseLinkArgs, ReleaseLinkState } from "./releaseLink";
export type ReleaseLink = import("./releaseLink").ReleaseLink;
export const ReleaseLink: typeof import("./releaseLink").ReleaseLink = null as any;
utilities.lazyLoad(exports, ["ReleaseLink"], () => require("./releaseLink"));

export { RepositoryFileArgs, RepositoryFileState } from "./repositoryFile";
export type RepositoryFile = import("./repositoryFile").RepositoryFile;
export const RepositoryFile: typeof import("./repositoryFile").RepositoryFile = null as any;
utilities.lazyLoad(exports, ["RepositoryFile"], () => require("./repositoryFile"));

export { RunnerArgs, RunnerState } from "./runner";
export type Runner = import("./runner").Runner;
export const Runner: typeof import("./runner").Runner = null as any;
utilities.lazyLoad(exports, ["Runner"], () => require("./runner"));

export { SystemHookArgs, SystemHookState } from "./systemHook";
export type SystemHook = import("./systemHook").SystemHook;
export const SystemHook: typeof import("./systemHook").SystemHook = null as any;
utilities.lazyLoad(exports, ["SystemHook"], () => require("./systemHook"));

export { TagProtectionArgs, TagProtectionState } from "./tagProtection";
export type TagProtection = import("./tagProtection").TagProtection;
export const TagProtection: typeof import("./tagProtection").TagProtection = null as any;
utilities.lazyLoad(exports, ["TagProtection"], () => require("./tagProtection"));

export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserCustomAttributeArgs, UserCustomAttributeState } from "./userCustomAttribute";
export type UserCustomAttribute = import("./userCustomAttribute").UserCustomAttribute;
export const UserCustomAttribute: typeof import("./userCustomAttribute").UserCustomAttribute = null as any;
utilities.lazyLoad(exports, ["UserCustomAttribute"], () => require("./userCustomAttribute"));

export { UserGpgKeyArgs, UserGpgKeyState } from "./userGpgKey";
export type UserGpgKey = import("./userGpgKey").UserGpgKey;
export const UserGpgKey: typeof import("./userGpgKey").UserGpgKey = null as any;
utilities.lazyLoad(exports, ["UserGpgKey"], () => require("./userGpgKey"));

export { UserIdentityArgs, UserIdentityState } from "./userIdentity";
export type UserIdentity = import("./userIdentity").UserIdentity;
export const UserIdentity: typeof import("./userIdentity").UserIdentity = null as any;
utilities.lazyLoad(exports, ["UserIdentity"], () => require("./userIdentity"));

export { UserImpersonationTokenArgs, UserImpersonationTokenState } from "./userImpersonationToken";
export type UserImpersonationToken = import("./userImpersonationToken").UserImpersonationToken;
export const UserImpersonationToken: typeof import("./userImpersonationToken").UserImpersonationToken = null as any;
utilities.lazyLoad(exports, ["UserImpersonationToken"], () => require("./userImpersonationToken"));

export { UserRunnerArgs, UserRunnerState } from "./userRunner";
export type UserRunner = import("./userRunner").UserRunner;
export const UserRunner: typeof import("./userRunner").UserRunner = null as any;
utilities.lazyLoad(exports, ["UserRunner"], () => require("./userRunner"));

export { UserSshKeyArgs, UserSshKeyState } from "./userSshKey";
export type UserSshKey = import("./userSshKey").UserSshKey;
export const UserSshKey: typeof import("./userSshKey").UserSshKey = null as any;
utilities.lazyLoad(exports, ["UserSshKey"], () => require("./userSshKey"));

export { ValueStreamAnalyticsArgs, ValueStreamAnalyticsState } from "./valueStreamAnalytics";
export type ValueStreamAnalytics = import("./valueStreamAnalytics").ValueStreamAnalytics;
export const ValueStreamAnalytics: typeof import("./valueStreamAnalytics").ValueStreamAnalytics = null as any;
utilities.lazyLoad(exports, ["ValueStreamAnalytics"], () => require("./valueStreamAnalytics"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gitlab:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "gitlab:index/applicationAppearance:ApplicationAppearance":
                return new ApplicationAppearance(name, <any>undefined, { urn })
            case "gitlab:index/applicationSettings:ApplicationSettings":
                return new ApplicationSettings(name, <any>undefined, { urn })
            case "gitlab:index/branch:Branch":
                return new Branch(name, <any>undefined, { urn })
            case "gitlab:index/branchProtection:BranchProtection":
                return new BranchProtection(name, <any>undefined, { urn })
            case "gitlab:index/clusterAgent:ClusterAgent":
                return new ClusterAgent(name, <any>undefined, { urn })
            case "gitlab:index/clusterAgentToken:ClusterAgentToken":
                return new ClusterAgentToken(name, <any>undefined, { urn })
            case "gitlab:index/complianceFramework:ComplianceFramework":
                return new ComplianceFramework(name, <any>undefined, { urn })
            case "gitlab:index/deployKey:DeployKey":
                return new DeployKey(name, <any>undefined, { urn })
            case "gitlab:index/deployKeyEnable:DeployKeyEnable":
                return new DeployKeyEnable(name, <any>undefined, { urn })
            case "gitlab:index/deployToken:DeployToken":
                return new DeployToken(name, <any>undefined, { urn })
            case "gitlab:index/globalLevelNotifications:GlobalLevelNotifications":
                return new GlobalLevelNotifications(name, <any>undefined, { urn })
            case "gitlab:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "gitlab:index/groupAccessToken:GroupAccessToken":
                return new GroupAccessToken(name, <any>undefined, { urn })
            case "gitlab:index/groupBadge:GroupBadge":
                return new GroupBadge(name, <any>undefined, { urn })
            case "gitlab:index/groupCluster:GroupCluster":
                return new GroupCluster(name, <any>undefined, { urn })
            case "gitlab:index/groupCustomAttribute:GroupCustomAttribute":
                return new GroupCustomAttribute(name, <any>undefined, { urn })
            case "gitlab:index/groupDependencyProxy:GroupDependencyProxy":
                return new GroupDependencyProxy(name, <any>undefined, { urn })
            case "gitlab:index/groupEpicBoard:GroupEpicBoard":
                return new GroupEpicBoard(name, <any>undefined, { urn })
            case "gitlab:index/groupHook:GroupHook":
                return new GroupHook(name, <any>undefined, { urn })
            case "gitlab:index/groupIssueBoard:GroupIssueBoard":
                return new GroupIssueBoard(name, <any>undefined, { urn })
            case "gitlab:index/groupLabel:GroupLabel":
                return new GroupLabel(name, <any>undefined, { urn })
            case "gitlab:index/groupLdapLink:GroupLdapLink":
                return new GroupLdapLink(name, <any>undefined, { urn })
            case "gitlab:index/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "gitlab:index/groupProjectFileTemplate:GroupProjectFileTemplate":
                return new GroupProjectFileTemplate(name, <any>undefined, { urn })
            case "gitlab:index/groupProtectedEnvironment:GroupProtectedEnvironment":
                return new GroupProtectedEnvironment(name, <any>undefined, { urn })
            case "gitlab:index/groupSamlLink:GroupSamlLink":
                return new GroupSamlLink(name, <any>undefined, { urn })
            case "gitlab:index/groupSecurityPolicyAttachment:GroupSecurityPolicyAttachment":
                return new GroupSecurityPolicyAttachment(name, <any>undefined, { urn })
            case "gitlab:index/groupServiceAccount:GroupServiceAccount":
                return new GroupServiceAccount(name, <any>undefined, { urn })
            case "gitlab:index/groupServiceAccountAccessToken:GroupServiceAccountAccessToken":
                return new GroupServiceAccountAccessToken(name, <any>undefined, { urn })
            case "gitlab:index/groupShareGroup:GroupShareGroup":
                return new GroupShareGroup(name, <any>undefined, { urn })
            case "gitlab:index/groupVariable:GroupVariable":
                return new GroupVariable(name, <any>undefined, { urn })
            case "gitlab:index/instanceCluster:InstanceCluster":
                return new InstanceCluster(name, <any>undefined, { urn })
            case "gitlab:index/instanceServiceAccount:InstanceServiceAccount":
                return new InstanceServiceAccount(name, <any>undefined, { urn })
            case "gitlab:index/instanceVariable:InstanceVariable":
                return new InstanceVariable(name, <any>undefined, { urn })
            case "gitlab:index/integrationCustomIssueTracker:IntegrationCustomIssueTracker":
                return new IntegrationCustomIssueTracker(name, <any>undefined, { urn })
            case "gitlab:index/integrationEmailsOnPush:IntegrationEmailsOnPush":
                return new IntegrationEmailsOnPush(name, <any>undefined, { urn })
            case "gitlab:index/integrationExternalWiki:IntegrationExternalWiki":
                return new IntegrationExternalWiki(name, <any>undefined, { urn })
            case "gitlab:index/integrationGithub:IntegrationGithub":
                return new IntegrationGithub(name, <any>undefined, { urn })
            case "gitlab:index/integrationHarbor:IntegrationHarbor":
                return new IntegrationHarbor(name, <any>undefined, { urn })
            case "gitlab:index/integrationJenkins:IntegrationJenkins":
                return new IntegrationJenkins(name, <any>undefined, { urn })
            case "gitlab:index/integrationJira:IntegrationJira":
                return new IntegrationJira(name, <any>undefined, { urn })
            case "gitlab:index/integrationMattermost:IntegrationMattermost":
                return new IntegrationMattermost(name, <any>undefined, { urn })
            case "gitlab:index/integrationMicrosoftTeams:IntegrationMicrosoftTeams":
                return new IntegrationMicrosoftTeams(name, <any>undefined, { urn })
            case "gitlab:index/integrationPipelinesEmail:IntegrationPipelinesEmail":
                return new IntegrationPipelinesEmail(name, <any>undefined, { urn })
            case "gitlab:index/integrationRedmine:IntegrationRedmine":
                return new IntegrationRedmine(name, <any>undefined, { urn })
            case "gitlab:index/integrationSlack:IntegrationSlack":
                return new IntegrationSlack(name, <any>undefined, { urn })
            case "gitlab:index/integrationTelegram:IntegrationTelegram":
                return new IntegrationTelegram(name, <any>undefined, { urn })
            case "gitlab:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "gitlab:index/memberRole:MemberRole":
                return new MemberRole(name, <any>undefined, { urn })
            case "gitlab:index/pagesDomain:PagesDomain":
                return new PagesDomain(name, <any>undefined, { urn })
            case "gitlab:index/personalAccessToken:PersonalAccessToken":
                return new PersonalAccessToken(name, <any>undefined, { urn })
            case "gitlab:index/pipelineSchedule:PipelineSchedule":
                return new PipelineSchedule(name, <any>undefined, { urn })
            case "gitlab:index/pipelineScheduleVariable:PipelineScheduleVariable":
                return new PipelineScheduleVariable(name, <any>undefined, { urn })
            case "gitlab:index/pipelineTrigger:PipelineTrigger":
                return new PipelineTrigger(name, <any>undefined, { urn })
            case "gitlab:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "gitlab:index/projectAccessToken:ProjectAccessToken":
                return new ProjectAccessToken(name, <any>undefined, { urn })
            case "gitlab:index/projectApprovalRule:ProjectApprovalRule":
                return new ProjectApprovalRule(name, <any>undefined, { urn })
            case "gitlab:index/projectBadge:ProjectBadge":
                return new ProjectBadge(name, <any>undefined, { urn })
            case "gitlab:index/projectCluster:ProjectCluster":
                return new ProjectCluster(name, <any>undefined, { urn })
            case "gitlab:index/projectComplianceFrameworks:ProjectComplianceFrameworks":
                return new ProjectComplianceFrameworks(name, <any>undefined, { urn })
            case "gitlab:index/projectCustomAttribute:ProjectCustomAttribute":
                return new ProjectCustomAttribute(name, <any>undefined, { urn })
            case "gitlab:index/projectEnvironment:ProjectEnvironment":
                return new ProjectEnvironment(name, <any>undefined, { urn })
            case "gitlab:index/projectFreezePeriod:ProjectFreezePeriod":
                return new ProjectFreezePeriod(name, <any>undefined, { urn })
            case "gitlab:index/projectHook:ProjectHook":
                return new ProjectHook(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationCustomIssueTracker:ProjectIntegrationCustomIssueTracker":
                return new ProjectIntegrationCustomIssueTracker(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush":
                return new ProjectIntegrationEmailsOnPush(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationExternalWiki:ProjectIntegrationExternalWiki":
                return new ProjectIntegrationExternalWiki(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationGithub:ProjectIntegrationGithub":
                return new ProjectIntegrationGithub(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationHarbor:ProjectIntegrationHarbor":
                return new ProjectIntegrationHarbor(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationJenkins:ProjectIntegrationJenkins":
                return new ProjectIntegrationJenkins(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationJira:ProjectIntegrationJira":
                return new ProjectIntegrationJira(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationMattermost:ProjectIntegrationMattermost":
                return new ProjectIntegrationMattermost(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationMicrosoftTeams:ProjectIntegrationMicrosoftTeams":
                return new ProjectIntegrationMicrosoftTeams(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationPipelinesEmail:ProjectIntegrationPipelinesEmail":
                return new ProjectIntegrationPipelinesEmail(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationRedmine:ProjectIntegrationRedmine":
                return new ProjectIntegrationRedmine(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationTelegram:ProjectIntegrationTelegram":
                return new ProjectIntegrationTelegram(name, <any>undefined, { urn })
            case "gitlab:index/projectIntegrationYoutrack:ProjectIntegrationYoutrack":
                return new ProjectIntegrationYoutrack(name, <any>undefined, { urn })
            case "gitlab:index/projectIssue:ProjectIssue":
                return new ProjectIssue(name, <any>undefined, { urn })
            case "gitlab:index/projectIssueBoard:ProjectIssueBoard":
                return new ProjectIssueBoard(name, <any>undefined, { urn })
            case "gitlab:index/projectJobTokenScope:ProjectJobTokenScope":
                return new ProjectJobTokenScope(name, <any>undefined, { urn })
            case "gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes":
                return new ProjectJobTokenScopes(name, <any>undefined, { urn })
            case "gitlab:index/projectLabel:ProjectLabel":
                return new ProjectLabel(name, <any>undefined, { urn })
            case "gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals":
                return new ProjectLevelMrApprovals(name, <any>undefined, { urn })
            case "gitlab:index/projectLevelNotifications:ProjectLevelNotifications":
                return new ProjectLevelNotifications(name, <any>undefined, { urn })
            case "gitlab:index/projectMembership:ProjectMembership":
                return new ProjectMembership(name, <any>undefined, { urn })
            case "gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote":
                return new ProjectMergeRequestNote(name, <any>undefined, { urn })
            case "gitlab:index/projectMilestone:ProjectMilestone":
                return new ProjectMilestone(name, <any>undefined, { urn })
            case "gitlab:index/projectMirror:ProjectMirror":
                return new ProjectMirror(name, <any>undefined, { urn })
            case "gitlab:index/projectPagesSettings:ProjectPagesSettings":
                return new ProjectPagesSettings(name, <any>undefined, { urn })
            case "gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment":
                return new ProjectProtectedEnvironment(name, <any>undefined, { urn })
            case "gitlab:index/projectPushRules:ProjectPushRules":
                return new ProjectPushRules(name, <any>undefined, { urn })
            case "gitlab:index/projectRunnerEnablement:ProjectRunnerEnablement":
                return new ProjectRunnerEnablement(name, <any>undefined, { urn })
            case "gitlab:index/projectSecurityPolicyAttachment:ProjectSecurityPolicyAttachment":
                return new ProjectSecurityPolicyAttachment(name, <any>undefined, { urn })
            case "gitlab:index/projectShareGroup:ProjectShareGroup":
                return new ProjectShareGroup(name, <any>undefined, { urn })
            case "gitlab:index/projectTag:ProjectTag":
                return new ProjectTag(name, <any>undefined, { urn })
            case "gitlab:index/projectTargetBranchRule:ProjectTargetBranchRule":
                return new ProjectTargetBranchRule(name, <any>undefined, { urn })
            case "gitlab:index/projectVariable:ProjectVariable":
                return new ProjectVariable(name, <any>undefined, { urn })
            case "gitlab:index/projectWikiPage:ProjectWikiPage":
                return new ProjectWikiPage(name, <any>undefined, { urn })
            case "gitlab:index/release:Release":
                return new Release(name, <any>undefined, { urn })
            case "gitlab:index/releaseLink:ReleaseLink":
                return new ReleaseLink(name, <any>undefined, { urn })
            case "gitlab:index/repositoryFile:RepositoryFile":
                return new RepositoryFile(name, <any>undefined, { urn })
            case "gitlab:index/runner:Runner":
                return new Runner(name, <any>undefined, { urn })
            case "gitlab:index/systemHook:SystemHook":
                return new SystemHook(name, <any>undefined, { urn })
            case "gitlab:index/tagProtection:TagProtection":
                return new TagProtection(name, <any>undefined, { urn })
            case "gitlab:index/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            case "gitlab:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "gitlab:index/userCustomAttribute:UserCustomAttribute":
                return new UserCustomAttribute(name, <any>undefined, { urn })
            case "gitlab:index/userGpgKey:UserGpgKey":
                return new UserGpgKey(name, <any>undefined, { urn })
            case "gitlab:index/userIdentity:UserIdentity":
                return new UserIdentity(name, <any>undefined, { urn })
            case "gitlab:index/userImpersonationToken:UserImpersonationToken":
                return new UserImpersonationToken(name, <any>undefined, { urn })
            case "gitlab:index/userRunner:UserRunner":
                return new UserRunner(name, <any>undefined, { urn })
            case "gitlab:index/userSshKey:UserSshKey":
                return new UserSshKey(name, <any>undefined, { urn })
            case "gitlab:index/valueStreamAnalytics:ValueStreamAnalytics":
                return new ValueStreamAnalytics(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gitlab", "index/application", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/applicationAppearance", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/applicationSettings", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/branch", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/branchProtection", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/clusterAgent", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/clusterAgentToken", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/complianceFramework", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/deployKey", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/deployKeyEnable", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/deployToken", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/globalLevelNotifications", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/group", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupAccessToken", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupBadge", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupCluster", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupCustomAttribute", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupDependencyProxy", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupEpicBoard", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupHook", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupIssueBoard", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupLabel", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupLdapLink", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupMembership", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupProjectFileTemplate", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupProtectedEnvironment", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupSamlLink", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupSecurityPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupServiceAccount", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupServiceAccountAccessToken", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupShareGroup", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/groupVariable", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/instanceCluster", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/instanceServiceAccount", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/instanceVariable", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationCustomIssueTracker", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationEmailsOnPush", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationExternalWiki", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationGithub", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationHarbor", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationJenkins", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationJira", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationMattermost", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationMicrosoftTeams", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationPipelinesEmail", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationRedmine", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationSlack", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/integrationTelegram", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/label", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/memberRole", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/pagesDomain", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/personalAccessToken", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/pipelineSchedule", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/pipelineScheduleVariable", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/pipelineTrigger", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/project", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectAccessToken", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectApprovalRule", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectBadge", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectCluster", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectComplianceFrameworks", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectCustomAttribute", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectEnvironment", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectFreezePeriod", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectHook", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationCustomIssueTracker", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationEmailsOnPush", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationExternalWiki", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationGithub", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationHarbor", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationJenkins", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationJira", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationMattermost", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationMicrosoftTeams", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationPipelinesEmail", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationRedmine", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationTelegram", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIntegrationYoutrack", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIssue", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectIssueBoard", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectJobTokenScope", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectJobTokenScopes", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectLabel", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectLevelMrApprovals", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectLevelNotifications", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectMembership", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectMergeRequestNote", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectMilestone", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectMirror", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectPagesSettings", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectProtectedEnvironment", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectPushRules", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectRunnerEnablement", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectSecurityPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectShareGroup", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectTag", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectTargetBranchRule", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectVariable", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/projectWikiPage", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/release", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/releaseLink", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/repositoryFile", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/runner", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/systemHook", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/tagProtection", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/topic", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/user", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/userCustomAttribute", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/userGpgKey", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/userIdentity", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/userImpersonationToken", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/userRunner", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/userSshKey", _module)
pulumi.runtime.registerResourceModule("gitlab", "index/valueStreamAnalytics", _module)
pulumi.runtime.registerResourcePackage("gitlab", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:gitlab") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
