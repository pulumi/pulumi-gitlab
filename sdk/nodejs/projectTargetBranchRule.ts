// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectTargetBranchRule` resource manages default target branch rules when creating merge requests.
 *
 * **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/#mutationprojecttargetbranchrulecreate)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = new gitlab.Project("example", {
 *     name: "example project",
 *     description: "Lorem Ipsum",
 *     visibilityLevel: "public",
 * });
 * // Basic example
 * const rule = new gitlab.ProjectTargetBranchRule("rule", {
 *     project: example.id,
 *     sourceBranchPattern: "develop",
 *     targetBranchName: "release",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_target_branch_rule`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_target_branch_rule.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * A GitLab Project targer branch rule can be imported using a key composed of `<project-id>:<target-branch-rule-id>`, for example:
 *
 * ```sh
 * $ pulumi import gitlab:index/projectTargetBranchRule:ProjectTargetBranchRule example "12345:1"
 * ```
 */
export class ProjectTargetBranchRule extends pulumi.CustomResource {
    /**
     * Get an existing ProjectTargetBranchRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectTargetBranchRuleState, opts?: pulumi.CustomResourceOptions): ProjectTargetBranchRule {
        return new ProjectTargetBranchRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectTargetBranchRule:ProjectTargetBranchRule';

    /**
     * Returns true if the given object is an instance of ProjectTargetBranchRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectTargetBranchRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectTargetBranchRule.__pulumiType;
    }

    /**
     * The ID or URL-encoded path of the project.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * A pattern matching the branch name for which the merge request should have a default target branch configured.
     */
    declare public readonly sourceBranchPattern: pulumi.Output<string>;
    /**
     * The name of the branch to which the merge request should be addressed.
     */
    declare public readonly targetBranchName: pulumi.Output<string>;

    /**
     * Create a ProjectTargetBranchRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectTargetBranchRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectTargetBranchRuleArgs | ProjectTargetBranchRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectTargetBranchRuleState | undefined;
            resourceInputs["project"] = state?.project;
            resourceInputs["sourceBranchPattern"] = state?.sourceBranchPattern;
            resourceInputs["targetBranchName"] = state?.targetBranchName;
        } else {
            const args = argsOrState as ProjectTargetBranchRuleArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.sourceBranchPattern === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceBranchPattern'");
            }
            if (args?.targetBranchName === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetBranchName'");
            }
            resourceInputs["project"] = args?.project;
            resourceInputs["sourceBranchPattern"] = args?.sourceBranchPattern;
            resourceInputs["targetBranchName"] = args?.targetBranchName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectTargetBranchRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectTargetBranchRule resources.
 */
export interface ProjectTargetBranchRuleState {
    /**
     * The ID or URL-encoded path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * A pattern matching the branch name for which the merge request should have a default target branch configured.
     */
    sourceBranchPattern?: pulumi.Input<string>;
    /**
     * The name of the branch to which the merge request should be addressed.
     */
    targetBranchName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectTargetBranchRule resource.
 */
export interface ProjectTargetBranchRuleArgs {
    /**
     * The ID or URL-encoded path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * A pattern matching the branch name for which the merge request should have a default target branch configured.
     */
    sourceBranchPattern: pulumi.Input<string>;
    /**
     * The name of the branch to which the merge request should be addressed.
     */
    targetBranchName: pulumi.Input<string>;
}
