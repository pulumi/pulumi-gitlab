// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.PagesDomain` resource allows connecting custom domains and TLS certificates in GitLab Pages.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pages_domains.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // Example using auto_ssl_enabled, which uses lets encrypt to generate a certificate
 * const thisPagesDomain = new gitlab.PagesDomain("thisPagesDomain", {
 *     project: "123",
 *     domain: "example.com",
 *     autoSslEnabled: true,
 * });
 * // Example using a manually generated certificate and key
 * const thisIndex_pagesDomainPagesDomain = new gitlab.PagesDomain("thisIndex/pagesDomainPagesDomain", {
 *     project: "123",
 *     domain: "example.com",
 *     key: fs.readFileSync(`${path.module}/key.pem`),
 *     certificate: fs.readFileSync(`${path.module}/cert.pem`),
 * });
 * ```
 *
 * ## Import
 *
 * GitLab pages domain can be imported using an id made up of `projectId:domain` _without_ the http protocol, e.g.
 *
 * ```sh
 *  $ pulumi import gitlab:index/pagesDomain:PagesDomain this 123:example.com
 * ```
 */
export class PagesDomain extends pulumi.CustomResource {
    /**
     * Get an existing PagesDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PagesDomainState, opts?: pulumi.CustomResourceOptions): PagesDomain {
        return new PagesDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/pagesDomain:PagesDomain';

    /**
     * Returns true if the given object is an instance of PagesDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PagesDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PagesDomain.__pulumiType;
    }

    /**
     * Enables [automatic generation](https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration.html) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
     */
    public readonly autoSslEnabled!: pulumi.Output<boolean>;
    /**
     * The certificate in PEM format with intermediates following in most specific to least specific order.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * The custom domain indicated by the user.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Whether the certificate is expired.
     */
    public readonly expired!: pulumi.Output<boolean>;
    /**
     * The certificate key in PEM format.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding) owned by the authenticated user.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The URL for the given domain.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The verification code for the domain.
     */
    public /*out*/ readonly verificationCode!: pulumi.Output<string>;
    /**
     * The certificate data.
     */
    public /*out*/ readonly verified!: pulumi.Output<boolean>;

    /**
     * Create a PagesDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PagesDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PagesDomainArgs | PagesDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PagesDomainState | undefined;
            resourceInputs["autoSslEnabled"] = state ? state.autoSslEnabled : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["verificationCode"] = state ? state.verificationCode : undefined;
            resourceInputs["verified"] = state ? state.verified : undefined;
        } else {
            const args = argsOrState as PagesDomainArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["autoSslEnabled"] = args ? args.autoSslEnabled : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["expired"] = args ? args.expired : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["verificationCode"] = undefined /*out*/;
            resourceInputs["verified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["verificationCode"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PagesDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PagesDomain resources.
 */
export interface PagesDomainState {
    /**
     * Enables [automatic generation](https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration.html) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
     */
    autoSslEnabled?: pulumi.Input<boolean>;
    /**
     * The certificate in PEM format with intermediates following in most specific to least specific order.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The custom domain indicated by the user.
     */
    domain?: pulumi.Input<string>;
    /**
     * Whether the certificate is expired.
     */
    expired?: pulumi.Input<boolean>;
    /**
     * The certificate key in PEM format.
     */
    key?: pulumi.Input<string>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding) owned by the authenticated user.
     */
    project?: pulumi.Input<string>;
    /**
     * The URL for the given domain.
     */
    url?: pulumi.Input<string>;
    /**
     * The verification code for the domain.
     */
    verificationCode?: pulumi.Input<string>;
    /**
     * The certificate data.
     */
    verified?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PagesDomain resource.
 */
export interface PagesDomainArgs {
    /**
     * Enables [automatic generation](https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration.html) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
     */
    autoSslEnabled?: pulumi.Input<boolean>;
    /**
     * The certificate in PEM format with intermediates following in most specific to least specific order.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The custom domain indicated by the user.
     */
    domain: pulumi.Input<string>;
    /**
     * Whether the certificate is expired.
     */
    expired?: pulumi.Input<boolean>;
    /**
     * The certificate key in PEM format.
     */
    key?: pulumi.Input<string>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding) owned by the authenticated user.
     */
    project: pulumi.Input<string>;
}
