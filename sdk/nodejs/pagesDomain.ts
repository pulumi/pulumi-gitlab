// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.PagesDomain` resource allows connecting custom domains and TLS certificates in GitLab Pages.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pages_domains/)
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_pages_domain`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_pages_domain.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * GitLab pages domain can be imported using an id made up of `projectId:domain` _without_ the http protocol, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/pagesDomain:PagesDomain this 123:example.com
 * ```
 */
export class PagesDomain extends pulumi.CustomResource {
    /**
     * Get an existing PagesDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PagesDomainState, opts?: pulumi.CustomResourceOptions): PagesDomain {
        return new PagesDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/pagesDomain:PagesDomain';

    /**
     * Returns true if the given object is an instance of PagesDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PagesDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PagesDomain.__pulumiType;
    }

    /**
     * Enables [automatic generation](https://docs.gitlab.com/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration/) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
     */
    declare public readonly autoSslEnabled: pulumi.Output<boolean>;
    /**
     * The certificate in PEM format with intermediates following in most specific to least specific order.
     */
    declare public readonly certificate: pulumi.Output<string>;
    /**
     * The custom domain indicated by the user.
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * Whether the certificate is expired.
     */
    declare public readonly expired: pulumi.Output<boolean>;
    /**
     * The certificate key in PEM format.
     */
    declare public readonly key: pulumi.Output<string | undefined>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding) owned by the authenticated user.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * The URL for the given domain.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;
    /**
     * The verification code for the domain.
     */
    declare public /*out*/ readonly verificationCode: pulumi.Output<string>;
    /**
     * The certificate data.
     */
    declare public /*out*/ readonly verified: pulumi.Output<boolean>;

    /**
     * Create a PagesDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PagesDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PagesDomainArgs | PagesDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PagesDomainState | undefined;
            resourceInputs["autoSslEnabled"] = state?.autoSslEnabled;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["expired"] = state?.expired;
            resourceInputs["key"] = state?.key;
            resourceInputs["project"] = state?.project;
            resourceInputs["url"] = state?.url;
            resourceInputs["verificationCode"] = state?.verificationCode;
            resourceInputs["verified"] = state?.verified;
        } else {
            const args = argsOrState as PagesDomainArgs | undefined;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["autoSslEnabled"] = args?.autoSslEnabled;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["expired"] = args?.expired;
            resourceInputs["key"] = args?.key;
            resourceInputs["project"] = args?.project;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["verificationCode"] = undefined /*out*/;
            resourceInputs["verified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["verificationCode"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PagesDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PagesDomain resources.
 */
export interface PagesDomainState {
    /**
     * Enables [automatic generation](https://docs.gitlab.com/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration/) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
     */
    autoSslEnabled?: pulumi.Input<boolean>;
    /**
     * The certificate in PEM format with intermediates following in most specific to least specific order.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The custom domain indicated by the user.
     */
    domain?: pulumi.Input<string>;
    /**
     * Whether the certificate is expired.
     */
    expired?: pulumi.Input<boolean>;
    /**
     * The certificate key in PEM format.
     */
    key?: pulumi.Input<string>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding) owned by the authenticated user.
     */
    project?: pulumi.Input<string>;
    /**
     * The URL for the given domain.
     */
    url?: pulumi.Input<string>;
    /**
     * The verification code for the domain.
     */
    verificationCode?: pulumi.Input<string>;
    /**
     * The certificate data.
     */
    verified?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PagesDomain resource.
 */
export interface PagesDomainArgs {
    /**
     * Enables [automatic generation](https://docs.gitlab.com/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration/) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
     */
    autoSslEnabled?: pulumi.Input<boolean>;
    /**
     * The certificate in PEM format with intermediates following in most specific to least specific order.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The custom domain indicated by the user.
     */
    domain: pulumi.Input<string>;
    /**
     * Whether the certificate is expired.
     */
    expired?: pulumi.Input<boolean>;
    /**
     * The certificate key in PEM format.
     */
    key?: pulumi.Input<string>;
    /**
     * The ID or [URL-encoded path of the project](https://docs.gitlab.com/api/index/#namespaced-path-encoding) owned by the authenticated user.
     */
    project: pulumi.Input<string>;
}
