// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.ProjectMergeRequestNote` resource manages the lifecycle of a project merge request note.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/notes/#merge-requests)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = new gitlab.Project("example", {
 *     name: "example project",
 *     description: "Lorem Ipsum",
 *     visibilityLevel: "public",
 * });
 * const exampleProjectMergeRequestNote = new gitlab.ProjectMergeRequestNote("example", {
 *     project: example.id,
 *     mergeRequestIid: 456,
 *     body: "Example note",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_merge_request_note`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_project_merge_request_note.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * A GitLab Project Merge Request Note can be imported using a key composed of `<project-id>:<merge-request-iid>:<note-id>`, for example:
 *
 * ```sh
 * $ pulumi import gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote example "12345:1:3"
 * ```
 */
export class ProjectMergeRequestNote extends pulumi.CustomResource {
    /**
     * Get an existing ProjectMergeRequestNote resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectMergeRequestNoteState, opts?: pulumi.CustomResourceOptions): ProjectMergeRequestNote {
        return new ProjectMergeRequestNote(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/projectMergeRequestNote:ProjectMergeRequestNote';

    /**
     * Returns true if the given object is an instance of ProjectMergeRequestNote.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectMergeRequestNote {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectMergeRequestNote.__pulumiType;
    }

    /**
     * The body of the merge request note.
     */
    declare public readonly body: pulumi.Output<string>;
    /**
     * The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
     */
    declare public readonly createdAt: pulumi.Output<string>;
    /**
     * Indicates if the merge request note is internal.
     */
    declare public readonly internal: pulumi.Output<boolean>;
    /**
     * The diff head SHA of the merge request when the note was created.
     */
    declare public readonly mergeRequestDiffHeadSha: pulumi.Output<string | undefined>;
    /**
     * The IID of the merge request to add the note to.
     */
    declare public readonly mergeRequestIid: pulumi.Output<number>;
    /**
     * The ID of the merge request note.
     */
    declare public /*out*/ readonly noteId: pulumi.Output<number>;
    /**
     * The ID or path of the project to add the note to.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * Indicates if the merge request note is resolvable.
     */
    declare public /*out*/ readonly resolvable: pulumi.Output<boolean>;
    /**
     * Indicates if the merge request note is a system note.
     */
    declare public /*out*/ readonly system: pulumi.Output<boolean>;
    /**
     * The last updated date of the merge request note.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a ProjectMergeRequestNote resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectMergeRequestNoteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectMergeRequestNoteArgs | ProjectMergeRequestNoteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectMergeRequestNoteState | undefined;
            resourceInputs["body"] = state?.body;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["internal"] = state?.internal;
            resourceInputs["mergeRequestDiffHeadSha"] = state?.mergeRequestDiffHeadSha;
            resourceInputs["mergeRequestIid"] = state?.mergeRequestIid;
            resourceInputs["noteId"] = state?.noteId;
            resourceInputs["project"] = state?.project;
            resourceInputs["resolvable"] = state?.resolvable;
            resourceInputs["system"] = state?.system;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as ProjectMergeRequestNoteArgs | undefined;
            if (args?.body === undefined && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            if (args?.mergeRequestIid === undefined && !opts.urn) {
                throw new Error("Missing required property 'mergeRequestIid'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["body"] = args?.body;
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["internal"] = args?.internal;
            resourceInputs["mergeRequestDiffHeadSha"] = args?.mergeRequestDiffHeadSha;
            resourceInputs["mergeRequestIid"] = args?.mergeRequestIid;
            resourceInputs["project"] = args?.project;
            resourceInputs["noteId"] = undefined /*out*/;
            resourceInputs["resolvable"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectMergeRequestNote.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectMergeRequestNote resources.
 */
export interface ProjectMergeRequestNoteState {
    /**
     * The body of the merge request note.
     */
    body?: pulumi.Input<string>;
    /**
     * The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates if the merge request note is internal.
     */
    internal?: pulumi.Input<boolean>;
    /**
     * The diff head SHA of the merge request when the note was created.
     */
    mergeRequestDiffHeadSha?: pulumi.Input<string>;
    /**
     * The IID of the merge request to add the note to.
     */
    mergeRequestIid?: pulumi.Input<number>;
    /**
     * The ID of the merge request note.
     */
    noteId?: pulumi.Input<number>;
    /**
     * The ID or path of the project to add the note to.
     */
    project?: pulumi.Input<string>;
    /**
     * Indicates if the merge request note is resolvable.
     */
    resolvable?: pulumi.Input<boolean>;
    /**
     * Indicates if the merge request note is a system note.
     */
    system?: pulumi.Input<boolean>;
    /**
     * The last updated date of the merge request note.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectMergeRequestNote resource.
 */
export interface ProjectMergeRequestNoteArgs {
    /**
     * The body of the merge request note.
     */
    body: pulumi.Input<string>;
    /**
     * The creation date of the merge request note. Using this field requires the token used with the provider to either be an Admin, or hava a Project or Group Owner role.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates if the merge request note is internal.
     */
    internal?: pulumi.Input<boolean>;
    /**
     * The diff head SHA of the merge request when the note was created.
     */
    mergeRequestDiffHeadSha?: pulumi.Input<string>;
    /**
     * The IID of the merge request to add the note to.
     */
    mergeRequestIid: pulumi.Input<number>;
    /**
     * The ID or path of the project to add the note to.
     */
    project: pulumi.Input<string>;
}
