// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.Release` resource allows to manage the lifecycle of releases in gitlab.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/releases/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // Create a project
 * const example = new gitlab.Project("example", {
 *     name: "example",
 *     description: "An example project",
 * });
 * // Create a release
 * const exampleRelease = new gitlab.Release("example", {
 *     project: example.id,
 *     name: "test-release",
 *     tagName: "v1.0.0",
 *     description: "Test release description",
 *     ref: "main",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_release`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_release.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * Gitlab release link can be imported with a key composed of `<project>:<tag_name>`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/release:Release example "12345:test"
 * ```
 */
export class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseState, opts?: pulumi.CustomResourceOptions): Release {
        return new Release(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/release:Release';

    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Release {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }

    /**
     * The release assets.
     */
    declare public readonly assets: pulumi.Output<outputs.ReleaseAssets>;
    /**
     * The author of the release.
     */
    declare public /*out*/ readonly author: pulumi.Output<outputs.ReleaseAuthor>;
    /**
     * The release commit.
     */
    declare public /*out*/ readonly commit: pulumi.Output<outputs.ReleaseCommit>;
    /**
     * The path to the commit
     */
    declare public /*out*/ readonly commitPath: pulumi.Output<string>;
    /**
     * Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the release. You can use Markdown.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * HTML rendered Markdown of the release description.
     */
    declare public /*out*/ readonly descriptionHtml: pulumi.Output<string>;
    /**
     * Links of the release
     */
    declare public /*out*/ readonly links: pulumi.Output<outputs.ReleaseLinks>;
    /**
     * The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
     */
    declare public readonly milestones: pulumi.Output<string[] | undefined>;
    /**
     * The name of the release.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID or full path of the project.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
     */
    declare public readonly ref: pulumi.Output<string>;
    /**
     * Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
     */
    declare public readonly releasedAt: pulumi.Output<string>;
    /**
     * Message to use if creating a new annotated tag.
     */
    declare public readonly tagMessage: pulumi.Output<string | undefined>;
    /**
     * The tag where the release is created from.
     */
    declare public readonly tagName: pulumi.Output<string>;
    /**
     * The path to the tag.
     */
    declare public /*out*/ readonly tagPath: pulumi.Output<string>;
    /**
     * Whether the releaseAt attribute is set to a future date.
     */
    declare public /*out*/ readonly upcomingRelease: pulumi.Output<boolean>;

    /**
     * Create a Release resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseArgs | ReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseState | undefined;
            resourceInputs["assets"] = state?.assets;
            resourceInputs["author"] = state?.author;
            resourceInputs["commit"] = state?.commit;
            resourceInputs["commitPath"] = state?.commitPath;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["descriptionHtml"] = state?.descriptionHtml;
            resourceInputs["links"] = state?.links;
            resourceInputs["milestones"] = state?.milestones;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["ref"] = state?.ref;
            resourceInputs["releasedAt"] = state?.releasedAt;
            resourceInputs["tagMessage"] = state?.tagMessage;
            resourceInputs["tagName"] = state?.tagName;
            resourceInputs["tagPath"] = state?.tagPath;
            resourceInputs["upcomingRelease"] = state?.upcomingRelease;
        } else {
            const args = argsOrState as ReleaseArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.tagName === undefined && !opts.urn) {
                throw new Error("Missing required property 'tagName'");
            }
            resourceInputs["assets"] = args?.assets;
            resourceInputs["description"] = args?.description;
            resourceInputs["milestones"] = args?.milestones;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["ref"] = args?.ref;
            resourceInputs["releasedAt"] = args?.releasedAt;
            resourceInputs["tagMessage"] = args?.tagMessage;
            resourceInputs["tagName"] = args?.tagName;
            resourceInputs["author"] = undefined /*out*/;
            resourceInputs["commit"] = undefined /*out*/;
            resourceInputs["commitPath"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["descriptionHtml"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["tagPath"] = undefined /*out*/;
            resourceInputs["upcomingRelease"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Release.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Release resources.
 */
export interface ReleaseState {
    /**
     * The release assets.
     */
    assets?: pulumi.Input<inputs.ReleaseAssets>;
    /**
     * The author of the release.
     */
    author?: pulumi.Input<inputs.ReleaseAuthor>;
    /**
     * The release commit.
     */
    commit?: pulumi.Input<inputs.ReleaseCommit>;
    /**
     * The path to the commit
     */
    commitPath?: pulumi.Input<string>;
    /**
     * Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the release. You can use Markdown.
     */
    description?: pulumi.Input<string>;
    /**
     * HTML rendered Markdown of the release description.
     */
    descriptionHtml?: pulumi.Input<string>;
    /**
     * Links of the release
     */
    links?: pulumi.Input<inputs.ReleaseLinks>;
    /**
     * The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
     */
    milestones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the release.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
     */
    ref?: pulumi.Input<string>;
    /**
     * Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
     */
    releasedAt?: pulumi.Input<string>;
    /**
     * Message to use if creating a new annotated tag.
     */
    tagMessage?: pulumi.Input<string>;
    /**
     * The tag where the release is created from.
     */
    tagName?: pulumi.Input<string>;
    /**
     * The path to the tag.
     */
    tagPath?: pulumi.Input<string>;
    /**
     * Whether the releaseAt attribute is set to a future date.
     */
    upcomingRelease?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Release resource.
 */
export interface ReleaseArgs {
    /**
     * The release assets.
     */
    assets?: pulumi.Input<inputs.ReleaseAssets>;
    /**
     * The description of the release. You can use Markdown.
     */
    description?: pulumi.Input<string>;
    /**
     * The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
     */
    milestones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the release.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID or full path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * If a tag specified in tag*name doesn't exist, the release is created from ref and tagged with tag*name. It can be a commit SHA, another tag name, or a branch name.
     */
    ref?: pulumi.Input<string>;
    /**
     * Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
     */
    releasedAt?: pulumi.Input<string>;
    /**
     * Message to use if creating a new annotated tag.
     */
    tagMessage?: pulumi.Input<string>;
    /**
     * The tag where the release is created from.
     */
    tagName: pulumi.Input<string>;
}
