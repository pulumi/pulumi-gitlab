// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.GroupCluster` resource allows to manage the lifecycle of a group cluster.
 *
 * > This is deprecated, due for removal in GitLab 19.0.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_clusters/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const foo = new gitlab.Group("foo", {
 *     name: "foo-group",
 *     path: "foo-path",
 * });
 * const bar = new gitlab.GroupCluster("bar", {
 *     group: foo.id,
 *     name: "bar-cluster",
 *     domain: "example.com",
 *     enabled: true,
 *     kubernetesApiUrl: "https://124.124.124",
 *     kubernetesToken: "some-token",
 *     kubernetesCaCert: "some-cert",
 *     kubernetesAuthorizationType: "rbac",
 *     environmentScope: "*",
 *     managementProjectId: "123456",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_cluster`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_group_cluster.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * GitLab group clusters can be imported using an id made up of `groupid:clusterid`, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/groupCluster:GroupCluster bar 123:321
 * ```
 */
export class GroupCluster extends pulumi.CustomResource {
    /**
     * Get an existing GroupCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupClusterState, opts?: pulumi.CustomResourceOptions): GroupCluster {
        return new GroupCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupCluster:GroupCluster';

    /**
     * Returns true if the given object is an instance of GroupCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupCluster.__pulumiType;
    }

    /**
     * Cluster type.
     */
    declare public /*out*/ readonly clusterType: pulumi.Output<string>;
    /**
     * Create time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The base domain of the cluster.
     */
    declare public readonly domain: pulumi.Output<string | undefined>;
    /**
     * Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The associated environment to the cluster. Defaults to `*`.
     */
    declare public readonly environmentScope: pulumi.Output<string | undefined>;
    /**
     * The id of the group to add the cluster to.
     */
    declare public readonly group: pulumi.Output<string>;
    /**
     * The URL to access the Kubernetes API.
     */
    declare public readonly kubernetesApiUrl: pulumi.Output<string>;
    /**
     * The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
     */
    declare public readonly kubernetesAuthorizationType: pulumi.Output<string | undefined>;
    /**
     * TLS certificate (needed if API is using a self-signed TLS certificate).
     */
    declare public readonly kubernetesCaCert: pulumi.Output<string | undefined>;
    /**
     * The token to authenticate against Kubernetes.
     */
    declare public readonly kubernetesToken: pulumi.Output<string>;
    /**
     * Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
     */
    declare public readonly managed: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the management project for the cluster.
     */
    declare public readonly managementProjectId: pulumi.Output<string | undefined>;
    /**
     * The name of cluster.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Platform type.
     */
    declare public /*out*/ readonly platformType: pulumi.Output<string>;
    /**
     * Provider type.
     */
    declare public /*out*/ readonly providerType: pulumi.Output<string>;

    /**
     * Create a GroupCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupClusterArgs | GroupClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupClusterState | undefined;
            resourceInputs["clusterType"] = state?.clusterType;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["environmentScope"] = state?.environmentScope;
            resourceInputs["group"] = state?.group;
            resourceInputs["kubernetesApiUrl"] = state?.kubernetesApiUrl;
            resourceInputs["kubernetesAuthorizationType"] = state?.kubernetesAuthorizationType;
            resourceInputs["kubernetesCaCert"] = state?.kubernetesCaCert;
            resourceInputs["kubernetesToken"] = state?.kubernetesToken;
            resourceInputs["managed"] = state?.managed;
            resourceInputs["managementProjectId"] = state?.managementProjectId;
            resourceInputs["name"] = state?.name;
            resourceInputs["platformType"] = state?.platformType;
            resourceInputs["providerType"] = state?.providerType;
        } else {
            const args = argsOrState as GroupClusterArgs | undefined;
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if (args?.kubernetesApiUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'kubernetesApiUrl'");
            }
            if (args?.kubernetesToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'kubernetesToken'");
            }
            resourceInputs["domain"] = args?.domain;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["environmentScope"] = args?.environmentScope;
            resourceInputs["group"] = args?.group;
            resourceInputs["kubernetesApiUrl"] = args?.kubernetesApiUrl;
            resourceInputs["kubernetesAuthorizationType"] = args?.kubernetesAuthorizationType;
            resourceInputs["kubernetesCaCert"] = args?.kubernetesCaCert;
            resourceInputs["kubernetesToken"] = args?.kubernetesToken ? pulumi.secret(args.kubernetesToken) : undefined;
            resourceInputs["managed"] = args?.managed;
            resourceInputs["managementProjectId"] = args?.managementProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["clusterType"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["platformType"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubernetesToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GroupCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupCluster resources.
 */
export interface GroupClusterState {
    /**
     * Cluster type.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Create time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The base domain of the cluster.
     */
    domain?: pulumi.Input<string>;
    /**
     * Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The associated environment to the cluster. Defaults to `*`.
     */
    environmentScope?: pulumi.Input<string>;
    /**
     * The id of the group to add the cluster to.
     */
    group?: pulumi.Input<string>;
    /**
     * The URL to access the Kubernetes API.
     */
    kubernetesApiUrl?: pulumi.Input<string>;
    /**
     * The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
     */
    kubernetesAuthorizationType?: pulumi.Input<string>;
    /**
     * TLS certificate (needed if API is using a self-signed TLS certificate).
     */
    kubernetesCaCert?: pulumi.Input<string>;
    /**
     * The token to authenticate against Kubernetes.
     */
    kubernetesToken?: pulumi.Input<string>;
    /**
     * Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * The ID of the management project for the cluster.
     */
    managementProjectId?: pulumi.Input<string>;
    /**
     * The name of cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Platform type.
     */
    platformType?: pulumi.Input<string>;
    /**
     * Provider type.
     */
    providerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupCluster resource.
 */
export interface GroupClusterArgs {
    /**
     * The base domain of the cluster.
     */
    domain?: pulumi.Input<string>;
    /**
     * Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The associated environment to the cluster. Defaults to `*`.
     */
    environmentScope?: pulumi.Input<string>;
    /**
     * The id of the group to add the cluster to.
     */
    group: pulumi.Input<string>;
    /**
     * The URL to access the Kubernetes API.
     */
    kubernetesApiUrl: pulumi.Input<string>;
    /**
     * The cluster authorization type. Valid values are `rbac`, `abac`, `unknownAuthorization`. Defaults to `rbac`.
     */
    kubernetesAuthorizationType?: pulumi.Input<string>;
    /**
     * TLS certificate (needed if API is using a self-signed TLS certificate).
     */
    kubernetesCaCert?: pulumi.Input<string>;
    /**
     * The token to authenticate against Kubernetes.
     */
    kubernetesToken: pulumi.Input<string>;
    /**
     * Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * The ID of the management project for the cluster.
     */
    managementProjectId?: pulumi.Input<string>;
    /**
     * The name of cluster.
     */
    name?: pulumi.Input<string>;
}
