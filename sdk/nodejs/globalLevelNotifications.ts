// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.GlobalLevelNotifications` resource allows to manage global notifications.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/notification_settings/#group--project-level-notification-settings)
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_global_level_notifications`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_global_level_notifications.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * Note: You can import a global notification state using "gitlab" as the ID.
 *
 * The ID will always be gitlab, because the global notificatio only exists
 *
 * once per user
 *
 * ```sh
 * $ pulumi import gitlab:index/globalLevelNotifications:GlobalLevelNotifications example gitlab
 * ```
 */
export class GlobalLevelNotifications extends pulumi.CustomResource {
    /**
     * Get an existing GlobalLevelNotifications resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalLevelNotificationsState, opts?: pulumi.CustomResourceOptions): GlobalLevelNotifications {
        return new GlobalLevelNotifications(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/globalLevelNotifications:GlobalLevelNotifications';

    /**
     * Returns true if the given object is an instance of GlobalLevelNotifications.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalLevelNotifications {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalLevelNotifications.__pulumiType;
    }

    /**
     * Enable notifications for closed issues. Can only be used when `level` is `custom`.
     */
    declare public readonly closeIssue: pulumi.Output<boolean>;
    /**
     * Enable notifications for closed merge requests. Can only be used when `level` is `custom`.
     */
    declare public readonly closeMergeRequest: pulumi.Output<boolean>;
    /**
     * Enable notifications for failed pipelines. Can only be used when `level` is `custom`.
     */
    declare public readonly failedPipeline: pulumi.Output<boolean>;
    /**
     * Enable notifications for fixed pipelines. Can only be used when `level` is `custom`.
     */
    declare public readonly fixedPipeline: pulumi.Output<boolean>;
    /**
     * Enable notifications for due issues. Can only be used when `level` is `custom`.
     */
    declare public readonly issueDue: pulumi.Output<boolean>;
    /**
     * The level of the notification. Valid values are: `disabled`, `participating`, `watch`, `global`, `mention`, `custom`.
     */
    declare public readonly level: pulumi.Output<string>;
    /**
     * Enable notifications for merged merge requests. Can only be used when `level` is `custom`.
     */
    declare public readonly mergeMergeRequest: pulumi.Output<boolean>;
    /**
     * Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when `level` is `custom`.
     */
    declare public readonly mergeWhenPipelineSucceeds: pulumi.Output<boolean>;
    /**
     * Enable notifications for moved projects. Can only be used when `level` is `custom`.
     */
    declare public readonly movedProject: pulumi.Output<boolean>;
    /**
     * Enable notifications for new issues. Can only be used when `level` is `custom`.
     */
    declare public readonly newIssue: pulumi.Output<boolean>;
    /**
     * Enable notifications for new merge requests. Can only be used when `level` is `custom`.
     */
    declare public readonly newMergeRequest: pulumi.Output<boolean>;
    /**
     * Enable notifications for new notes on merge requests. Can only be used when `level` is `custom`.
     */
    declare public readonly newNote: pulumi.Output<boolean>;
    /**
     * Enable notifications for push to merge request branches. Can only be used when `level` is `custom`.
     */
    declare public readonly pushToMergeRequest: pulumi.Output<boolean>;
    /**
     * Enable notifications for issue reassignments. Can only be used when `level` is `custom`.
     */
    declare public readonly reassignIssue: pulumi.Output<boolean>;
    /**
     * Enable notifications for merge request reassignments. Can only be used when `level` is `custom`.
     */
    declare public readonly reassignMergeRequest: pulumi.Output<boolean>;
    /**
     * Enable notifications for reopened issues. Can only be used when `level` is `custom`.
     */
    declare public readonly reopenIssue: pulumi.Output<boolean>;
    /**
     * Enable notifications for reopened merge requests. Can only be used when `level` is `custom`.
     */
    declare public readonly reopenMergeRequest: pulumi.Output<boolean>;
    /**
     * Enable notifications for successful pipelines. Can only be used when `level` is `custom`.
     */
    declare public readonly successPipeline: pulumi.Output<boolean>;

    /**
     * Create a GlobalLevelNotifications resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlobalLevelNotificationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalLevelNotificationsArgs | GlobalLevelNotificationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalLevelNotificationsState | undefined;
            resourceInputs["closeIssue"] = state?.closeIssue;
            resourceInputs["closeMergeRequest"] = state?.closeMergeRequest;
            resourceInputs["failedPipeline"] = state?.failedPipeline;
            resourceInputs["fixedPipeline"] = state?.fixedPipeline;
            resourceInputs["issueDue"] = state?.issueDue;
            resourceInputs["level"] = state?.level;
            resourceInputs["mergeMergeRequest"] = state?.mergeMergeRequest;
            resourceInputs["mergeWhenPipelineSucceeds"] = state?.mergeWhenPipelineSucceeds;
            resourceInputs["movedProject"] = state?.movedProject;
            resourceInputs["newIssue"] = state?.newIssue;
            resourceInputs["newMergeRequest"] = state?.newMergeRequest;
            resourceInputs["newNote"] = state?.newNote;
            resourceInputs["pushToMergeRequest"] = state?.pushToMergeRequest;
            resourceInputs["reassignIssue"] = state?.reassignIssue;
            resourceInputs["reassignMergeRequest"] = state?.reassignMergeRequest;
            resourceInputs["reopenIssue"] = state?.reopenIssue;
            resourceInputs["reopenMergeRequest"] = state?.reopenMergeRequest;
            resourceInputs["successPipeline"] = state?.successPipeline;
        } else {
            const args = argsOrState as GlobalLevelNotificationsArgs | undefined;
            resourceInputs["closeIssue"] = args?.closeIssue;
            resourceInputs["closeMergeRequest"] = args?.closeMergeRequest;
            resourceInputs["failedPipeline"] = args?.failedPipeline;
            resourceInputs["fixedPipeline"] = args?.fixedPipeline;
            resourceInputs["issueDue"] = args?.issueDue;
            resourceInputs["level"] = args?.level;
            resourceInputs["mergeMergeRequest"] = args?.mergeMergeRequest;
            resourceInputs["mergeWhenPipelineSucceeds"] = args?.mergeWhenPipelineSucceeds;
            resourceInputs["movedProject"] = args?.movedProject;
            resourceInputs["newIssue"] = args?.newIssue;
            resourceInputs["newMergeRequest"] = args?.newMergeRequest;
            resourceInputs["newNote"] = args?.newNote;
            resourceInputs["pushToMergeRequest"] = args?.pushToMergeRequest;
            resourceInputs["reassignIssue"] = args?.reassignIssue;
            resourceInputs["reassignMergeRequest"] = args?.reassignMergeRequest;
            resourceInputs["reopenIssue"] = args?.reopenIssue;
            resourceInputs["reopenMergeRequest"] = args?.reopenMergeRequest;
            resourceInputs["successPipeline"] = args?.successPipeline;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalLevelNotifications.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalLevelNotifications resources.
 */
export interface GlobalLevelNotificationsState {
    /**
     * Enable notifications for closed issues. Can only be used when `level` is `custom`.
     */
    closeIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for closed merge requests. Can only be used when `level` is `custom`.
     */
    closeMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for failed pipelines. Can only be used when `level` is `custom`.
     */
    failedPipeline?: pulumi.Input<boolean>;
    /**
     * Enable notifications for fixed pipelines. Can only be used when `level` is `custom`.
     */
    fixedPipeline?: pulumi.Input<boolean>;
    /**
     * Enable notifications for due issues. Can only be used when `level` is `custom`.
     */
    issueDue?: pulumi.Input<boolean>;
    /**
     * The level of the notification. Valid values are: `disabled`, `participating`, `watch`, `global`, `mention`, `custom`.
     */
    level?: pulumi.Input<string>;
    /**
     * Enable notifications for merged merge requests. Can only be used when `level` is `custom`.
     */
    mergeMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when `level` is `custom`.
     */
    mergeWhenPipelineSucceeds?: pulumi.Input<boolean>;
    /**
     * Enable notifications for moved projects. Can only be used when `level` is `custom`.
     */
    movedProject?: pulumi.Input<boolean>;
    /**
     * Enable notifications for new issues. Can only be used when `level` is `custom`.
     */
    newIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for new merge requests. Can only be used when `level` is `custom`.
     */
    newMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for new notes on merge requests. Can only be used when `level` is `custom`.
     */
    newNote?: pulumi.Input<boolean>;
    /**
     * Enable notifications for push to merge request branches. Can only be used when `level` is `custom`.
     */
    pushToMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for issue reassignments. Can only be used when `level` is `custom`.
     */
    reassignIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for merge request reassignments. Can only be used when `level` is `custom`.
     */
    reassignMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for reopened issues. Can only be used when `level` is `custom`.
     */
    reopenIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for reopened merge requests. Can only be used when `level` is `custom`.
     */
    reopenMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for successful pipelines. Can only be used when `level` is `custom`.
     */
    successPipeline?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GlobalLevelNotifications resource.
 */
export interface GlobalLevelNotificationsArgs {
    /**
     * Enable notifications for closed issues. Can only be used when `level` is `custom`.
     */
    closeIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for closed merge requests. Can only be used when `level` is `custom`.
     */
    closeMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for failed pipelines. Can only be used when `level` is `custom`.
     */
    failedPipeline?: pulumi.Input<boolean>;
    /**
     * Enable notifications for fixed pipelines. Can only be used when `level` is `custom`.
     */
    fixedPipeline?: pulumi.Input<boolean>;
    /**
     * Enable notifications for due issues. Can only be used when `level` is `custom`.
     */
    issueDue?: pulumi.Input<boolean>;
    /**
     * The level of the notification. Valid values are: `disabled`, `participating`, `watch`, `global`, `mention`, `custom`.
     */
    level?: pulumi.Input<string>;
    /**
     * Enable notifications for merged merge requests. Can only be used when `level` is `custom`.
     */
    mergeMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when `level` is `custom`.
     */
    mergeWhenPipelineSucceeds?: pulumi.Input<boolean>;
    /**
     * Enable notifications for moved projects. Can only be used when `level` is `custom`.
     */
    movedProject?: pulumi.Input<boolean>;
    /**
     * Enable notifications for new issues. Can only be used when `level` is `custom`.
     */
    newIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for new merge requests. Can only be used when `level` is `custom`.
     */
    newMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for new notes on merge requests. Can only be used when `level` is `custom`.
     */
    newNote?: pulumi.Input<boolean>;
    /**
     * Enable notifications for push to merge request branches. Can only be used when `level` is `custom`.
     */
    pushToMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for issue reassignments. Can only be used when `level` is `custom`.
     */
    reassignIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for merge request reassignments. Can only be used when `level` is `custom`.
     */
    reassignMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for reopened issues. Can only be used when `level` is `custom`.
     */
    reopenIssue?: pulumi.Input<boolean>;
    /**
     * Enable notifications for reopened merge requests. Can only be used when `level` is `custom`.
     */
    reopenMergeRequest?: pulumi.Input<boolean>;
    /**
     * Enable notifications for successful pipelines. Can only be used when `level` is `custom`.
     */
    successPipeline?: pulumi.Input<boolean>;
}
