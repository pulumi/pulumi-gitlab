// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const thisUserRunner = new gitlab.UserRunner("this", {
 *     runnerType: "instance_type",
 *     tagLists: [
 *         "tag1",
 *         "tag2",
 *     ],
 * });
 * const _this = gitlab.getRunners({
 *     paused: false,
 *     status: "online",
 *     tagLists: [
 *         "tag1",
 *         "tag2",
 *     ],
 *     type: "instance_type",
 * });
 * ```
 */
export function getRunners(args?: GetRunnersArgs, opts?: pulumi.InvokeOptions): Promise<GetRunnersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getRunners:getRunners", {
        "paused": args.paused,
        "status": args.status,
        "tagLists": args.tagLists,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getRunners.
 */
export interface GetRunnersArgs {
    /**
     * Filters for runners with the given paused value
     */
    paused?: boolean;
    /**
     * Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
     */
    status?: string;
    /**
     * Filters for runners with all of the given tags
     */
    tagLists?: string[];
    /**
     * The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
     */
    type?: string;
}

/**
 * A collection of values returned by getRunners.
 */
export interface GetRunnersResult {
    readonly id: string;
    /**
     * Filters for runners with the given paused value
     */
    readonly paused?: boolean;
    /**
     * The list of runners.
     */
    readonly runners: outputs.GetRunnersRunner[];
    /**
     * Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
     */
    readonly status?: string;
    /**
     * Filters for runners with all of the given tags
     */
    readonly tagLists?: string[];
    /**
     * The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
     */
    readonly type?: string;
}
/**
 * The `gitlab.getRunners` data source retrieves information about all gitlab runners.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const thisUserRunner = new gitlab.UserRunner("this", {
 *     runnerType: "instance_type",
 *     tagLists: [
 *         "tag1",
 *         "tag2",
 *     ],
 * });
 * const _this = gitlab.getRunners({
 *     paused: false,
 *     status: "online",
 *     tagLists: [
 *         "tag1",
 *         "tag2",
 *     ],
 *     type: "instance_type",
 * });
 * ```
 */
export function getRunnersOutput(args?: GetRunnersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRunnersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getRunners:getRunners", {
        "paused": args.paused,
        "status": args.status,
        "tagLists": args.tagLists,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getRunners.
 */
export interface GetRunnersOutputArgs {
    /**
     * Filters for runners with the given paused value
     */
    paused?: pulumi.Input<boolean>;
    /**
     * Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `neverContacted`.
     */
    status?: pulumi.Input<string>;
    /**
     * Filters for runners with all of the given tags
     */
    tagLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of runner to return. Valid values are `instanceType`, `groupType` and `projectType`
     */
    type?: pulumi.Input<string>;
}
