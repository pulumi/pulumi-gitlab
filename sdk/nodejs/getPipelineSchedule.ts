// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_schedules.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = gitlab.getPipelineSchedule({
 *     project: "12345",
 *     pipelineScheduleId: 1,
 * });
 * ```
 */
export function getPipelineSchedule(args: GetPipelineScheduleArgs, opts?: pulumi.InvokeOptions): Promise<GetPipelineScheduleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getPipelineSchedule:getPipelineSchedule", {
        "cronTimezone": args.cronTimezone,
        "pipelineScheduleId": args.pipelineScheduleId,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getPipelineSchedule.
 */
export interface GetPipelineScheduleArgs {
    /**
     * The timezone.
     */
    cronTimezone?: string;
    /**
     * The pipeline schedule id.
     */
    pipelineScheduleId: number;
    /**
     * The name or id of the project to add the schedule to.
     */
    project: string;
}

/**
 * A collection of values returned by getPipelineSchedule.
 */
export interface GetPipelineScheduleResult {
    /**
     * The activation status of pipeline schedule.
     */
    readonly active: boolean;
    /**
     * The datetime of when the schedule was created.
     */
    readonly createdAt: string;
    /**
     * The cron (e.g. `0 1 * * *`).
     */
    readonly cron: string;
    /**
     * The timezone.
     */
    readonly cronTimezone: string;
    /**
     * The description of the pipeline schedule.
     */
    readonly description: string;
    readonly id: string;
    /**
     * The details of the last pipeline run by the schedule.
     */
    readonly lastPipeline: outputs.GetPipelineScheduleLastPipeline;
    /**
     * The datetime of when the schedule will next run.
     */
    readonly nextRunAt: string;
    /**
     * The details of the pipeline schedule owner.
     */
    readonly owner: outputs.GetPipelineScheduleOwner;
    /**
     * The pipeline schedule id.
     */
    readonly pipelineScheduleId: number;
    /**
     * The name or id of the project to add the schedule to.
     */
    readonly project: string;
    /**
     * The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
     */
    readonly ref: string;
    /**
     * The datetime of when the schedule was last updated.
     */
    readonly updatedAt: string;
    /**
     * The list of the pipeline schedule variables.
     */
    readonly variables: outputs.GetPipelineScheduleVariable[];
}
/**
 * The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_schedules.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const example = gitlab.getPipelineSchedule({
 *     project: "12345",
 *     pipelineScheduleId: 1,
 * });
 * ```
 */
export function getPipelineScheduleOutput(args: GetPipelineScheduleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPipelineScheduleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getPipelineSchedule:getPipelineSchedule", {
        "cronTimezone": args.cronTimezone,
        "pipelineScheduleId": args.pipelineScheduleId,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getPipelineSchedule.
 */
export interface GetPipelineScheduleOutputArgs {
    /**
     * The timezone.
     */
    cronTimezone?: pulumi.Input<string>;
    /**
     * The pipeline schedule id.
     */
    pipelineScheduleId: pulumi.Input<number>;
    /**
     * The name or id of the project to add the schedule to.
     */
    project: pulumi.Input<string>;
}
