// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the gitlab package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'gitlab';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
     */
    declare public readonly baseUrl: pulumi.Output<string | undefined>;
    /**
     * This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
     */
    declare public readonly cacertFile: pulumi.Output<string | undefined>;
    /**
     * File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
     */
    declare public readonly clientCert: pulumi.Output<string | undefined>;
    /**
     * File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when `clientCert` is set.
     */
    declare public readonly clientKey: pulumi.Output<string | undefined>;
    /**
     * The path to the configuration file to use. It may be sourced from the `GITLAB_CONFIG_FILE` environment variable.
     */
    declare public readonly configFile: pulumi.Output<string | undefined>;
    /**
     * The context to use for authentication and configuration. The context must exist in the configuration file. It may be sourced from the `GITLAB_CONTEXT` environment variable.
     */
    declare public readonly context: pulumi.Output<string | undefined>;
    /**
     * The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is used in this provider for authentication (using Bearer authorization token). See https://docs.gitlab.com/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.
     */
    declare public readonly token: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["baseUrl"] = args?.baseUrl;
            resourceInputs["cacertFile"] = args?.cacertFile;
            resourceInputs["clientCert"] = args?.clientCert;
            resourceInputs["clientKey"] = args?.clientKey;
            resourceInputs["configFile"] = args?.configFile;
            resourceInputs["context"] = args?.context;
            resourceInputs["earlyAuthCheck"] = pulumi.output(args?.earlyAuthCheck).apply(JSON.stringify);
            resourceInputs["enableAutoCiSupport"] = pulumi.output(args?.enableAutoCiSupport).apply(JSON.stringify);
            resourceInputs["headers"] = pulumi.output(args?.headers).apply(JSON.stringify);
            resourceInputs["insecure"] = pulumi.output(args?.insecure).apply(JSON.stringify);
            resourceInputs["retries"] = pulumi.output(args?.retries).apply(JSON.stringify);
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:gitlab/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from the `GITLAB_BASE_URL` environment variable. The value must end with a slash.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.
     */
    cacertFile?: pulumi.Input<string>;
    /**
     * File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when `clientCert` is set.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The path to the configuration file to use. It may be sourced from the `GITLAB_CONFIG_FILE` environment variable.
     */
    configFile?: pulumi.Input<string>;
    /**
     * The context to use for authentication and configuration. The context must exist in the configuration file. It may be sourced from the `GITLAB_CONTEXT` environment variable.
     */
    context?: pulumi.Input<string>;
    earlyAuthCheck?: pulumi.Input<boolean>;
    /**
     * If automatic CI support should be enabled or not. This only works when not providing a token.
     */
    enableAutoCiSupport?: pulumi.Input<boolean>;
    /**
     * A map of headers to append to all API request to the GitLab instance.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * When set to true this disables SSL verification of the connection to the GitLab instance.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * The number of retries to execute when receiving a 429 Rate Limit error. Each retry will exponentially back off.
     */
    retries?: pulumi.Input<number>;
    /**
     * The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is used in this provider for authentication (using Bearer authorization token). See https://docs.gitlab.com/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.
     */
    token?: pulumi.Input<string>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
