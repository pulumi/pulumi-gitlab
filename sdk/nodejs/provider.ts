// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the gitlab package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'gitlab';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }

    /**
     * The GitLab Base API URL
     */
    public readonly baseUrl!: pulumi.Output<string | undefined>;
    /**
     * A file containing the ca certificate to use in case ssl certificate is not from a standard chain
     */
    public readonly cacertFile!: pulumi.Output<string | undefined>;
    /**
     * File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
     */
    public readonly clientCert!: pulumi.Output<string | undefined>;
    /**
     * File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data.
     */
    public readonly clientKey!: pulumi.Output<string | undefined>;
    /**
     * The OAuth2 token or project/personal access token used to connect to GitLab.
     */
    public readonly token!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.token === undefined) && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            resourceInputs["baseUrl"] = args ? args.baseUrl : undefined;
            resourceInputs["cacertFile"] = args ? args.cacertFile : undefined;
            resourceInputs["clientCert"] = args ? args.clientCert : undefined;
            resourceInputs["clientKey"] = args ? args.clientKey : undefined;
            resourceInputs["insecure"] = pulumi.output(args ? args.insecure : undefined).apply(JSON.stringify);
            resourceInputs["token"] = args ? args.token : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The GitLab Base API URL
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * A file containing the ca certificate to use in case ssl certificate is not from a standard chain
     */
    cacertFile?: pulumi.Input<string>;
    /**
     * File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Disable SSL verification of API calls
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * The OAuth2 token or project/personal access token used to connect to GitLab.
     */
    token: pulumi.Input<string>;
}
