// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getClusterAgents` data source retrieves details of GitLab Agents for Kubernetes in a project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const agents = gitlab.getClusterAgents({
 *     project: "12345",
 * });
 * ```
 */
export function getClusterAgents(args: GetClusterAgentsArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterAgentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getClusterAgents:getClusterAgents", {
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusterAgents.
 */
export interface GetClusterAgentsArgs {
    /**
     * ID or full path of the project maintained by the authenticated user.
     */
    project: string;
}

/**
 * A collection of values returned by getClusterAgents.
 */
export interface GetClusterAgentsResult {
    /**
     * List of the registered agents.
     */
    readonly clusterAgents: outputs.GetClusterAgentsClusterAgent[];
    /**
     * The ID of this data source. In the format \n\n
     */
    readonly id: string;
    /**
     * ID or full path of the project maintained by the authenticated user.
     */
    readonly project: string;
}
/**
 * The `gitlab.getClusterAgents` data source retrieves details of GitLab Agents for Kubernetes in a project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/cluster_agents/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const agents = gitlab.getClusterAgents({
 *     project: "12345",
 * });
 * ```
 */
export function getClusterAgentsOutput(args: GetClusterAgentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterAgentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getClusterAgents:getClusterAgents", {
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusterAgents.
 */
export interface GetClusterAgentsOutputArgs {
    /**
     * ID or full path of the project maintained by the authenticated user.
     */
    project: pulumi.Input<string>;
}
