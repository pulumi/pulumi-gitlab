// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `gitlab.IntegrationRedmine` resource manages the lifecycle of a project integration with Redmine.
 *
 * > Using Redmine requires that GitLab internal issue tracking is disabled for the project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#redmine)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const awesomeProject = new gitlab.Project("awesome_project", {
 *     name: "awesome_project",
 *     description: "My awesome project.",
 *     visibilityLevel: "public",
 * });
 * const redmine = new gitlab.IntegrationRedmine("redmine", {
 *     project: awesomeProject.id,
 *     newIssueUrl: "https://redmine.example.com/issue",
 *     projectUrl: "https://redmine.example.com/project",
 *     issuesUrl: "https://redmine.example.com/issue/:id",
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_integration_redmine`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_integration_redmine.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * ```sh
 * $ pulumi import gitlab:index/integrationRedmine:IntegrationRedmine You can import a gitlab_integration_redmine state using `<resource> <project_id>`:
 * ```
 *
 * ```sh
 * $ pulumi import gitlab:index/integrationRedmine:IntegrationRedmine redmine 1
 * ```
 */
export class IntegrationRedmine extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationRedmine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationRedmineState, opts?: pulumi.CustomResourceOptions): IntegrationRedmine {
        return new IntegrationRedmine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/integrationRedmine:IntegrationRedmine';

    /**
     * Returns true if the given object is an instance of IntegrationRedmine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationRedmine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationRedmine.__pulumiType;
    }

    /**
     * The URL to the Redmine project issue to link to this GitLab project.
     */
    public readonly issuesUrl!: pulumi.Output<string>;
    /**
     * The URL to use to create a new issue in the Redmine project linked to this GitLab project.
     */
    public readonly newIssueUrl!: pulumi.Output<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The URL to the Redmine project to link to this GitLab project.
     */
    public readonly projectUrl!: pulumi.Output<string>;
    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     */
    public readonly useInheritedSettings!: pulumi.Output<boolean>;

    /**
     * Create a IntegrationRedmine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationRedmineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationRedmineArgs | IntegrationRedmineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationRedmineState | undefined;
            resourceInputs["issuesUrl"] = state ? state.issuesUrl : undefined;
            resourceInputs["newIssueUrl"] = state ? state.newIssueUrl : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectUrl"] = state ? state.projectUrl : undefined;
            resourceInputs["useInheritedSettings"] = state ? state.useInheritedSettings : undefined;
        } else {
            const args = argsOrState as IntegrationRedmineArgs | undefined;
            if ((!args || args.issuesUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuesUrl'");
            }
            if ((!args || args.newIssueUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'newIssueUrl'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.projectUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectUrl'");
            }
            resourceInputs["issuesUrl"] = args ? args.issuesUrl : undefined;
            resourceInputs["newIssueUrl"] = args ? args.newIssueUrl : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectUrl"] = args ? args.projectUrl : undefined;
            resourceInputs["useInheritedSettings"] = args ? args.useInheritedSettings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationRedmine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationRedmine resources.
 */
export interface IntegrationRedmineState {
    /**
     * The URL to the Redmine project issue to link to this GitLab project.
     */
    issuesUrl?: pulumi.Input<string>;
    /**
     * The URL to use to create a new issue in the Redmine project linked to this GitLab project.
     */
    newIssueUrl?: pulumi.Input<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    project?: pulumi.Input<string>;
    /**
     * The URL to the Redmine project to link to this GitLab project.
     */
    projectUrl?: pulumi.Input<string>;
    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     */
    useInheritedSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IntegrationRedmine resource.
 */
export interface IntegrationRedmineArgs {
    /**
     * The URL to the Redmine project issue to link to this GitLab project.
     */
    issuesUrl: pulumi.Input<string>;
    /**
     * The URL to use to create a new issue in the Redmine project linked to this GitLab project.
     */
    newIssueUrl: pulumi.Input<string>;
    /**
     * ID of the project you want to activate integration on.
     */
    project: pulumi.Input<string>;
    /**
     * The URL to the Redmine project to link to this GitLab project.
     */
    projectUrl: pulumi.Input<string>;
    /**
     * Indicates whether or not to inherit default settings. Defaults to false.
     */
    useInheritedSettings?: pulumi.Input<boolean>;
}
