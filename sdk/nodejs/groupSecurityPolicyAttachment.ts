// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // This resource can be used to attach a security policy to a pre-existing group
 * const foo = new gitlab.GroupSecurityPolicyAttachment("foo", {
 *     group: "1234",
 *     policyProject: "4567",
 * });
 * // Or Terraform can create a new project, add a policy to that project,
 * // then attach that policy project to other groups.
 * const my_policy_project = new gitlab.Project("my-policy-project", {name: "security-policy-project"});
 * const policy_yml = new gitlab.RepositoryFile("policy-yml", {
 *     project: my_policy_project.id,
 *     filePath: ".gitlab/security-policies/my-policy.yml",
 *     branch: "master",
 *     encoding: "text",
 *     content: `---
 * approval_policy:
 * - name: test
 * description: test
 * enabled: true
 * rules:
 * - type: any_merge_request
 *     branch_type: protected
 *     commits: any
 * approval_settings:
 *     block_branch_modification: true
 *     prevent_pushing_and_force_pushing: true
 *     prevent_approval_by_author: true
 *     prevent_approval_by_commit_author: true
 *     remove_approvals_with_new_commit: true
 *     require_password_to_approve: false
 * fallback_behavior:
 *     fail: closed
 * policy_scope:
 *   compliance_frameworks:
 *   - id: 1010101
 *   - id: 0101010
 * actions:
 * - type: send_bot_message
 *     enabled: true
 * `,
 * });
 * // Multiple policies can be attached to a single project by repeating this resource or using a `for_each`
 * const my_policy = new gitlab.GroupSecurityPolicyAttachment("my-policy", {
 *     group: "1234",
 *     policyProject: my_policy_project.id,
 * });
 * ```
 *
 * ## Import
 *
 * Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_security_policy_attachment`. For example:
 *
 * terraform
 *
 * import {
 *
 *   to = gitlab_group_security_policy_attachment.example
 *
 *   id = "see CLI command below for ID"
 *
 * }
 *
 * Importing using the CLI is supported with the following syntax:
 *
 * GitLab group security policy attachments can be imported using an id made up of `group:policy_project_id` where the policy project ID is the project ID of the policy project, e.g.
 *
 * ```sh
 * $ pulumi import gitlab:index/groupSecurityPolicyAttachment:GroupSecurityPolicyAttachment foo 1:2
 * ```
 */
export class GroupSecurityPolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing GroupSecurityPolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupSecurityPolicyAttachmentState, opts?: pulumi.CustomResourceOptions): GroupSecurityPolicyAttachment {
        return new GroupSecurityPolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/groupSecurityPolicyAttachment:GroupSecurityPolicyAttachment';

    /**
     * Returns true if the given object is an instance of GroupSecurityPolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupSecurityPolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupSecurityPolicyAttachment.__pulumiType;
    }

    /**
     * The ID or Full Path of the group which will have the security policy project assigned to it.
     */
    declare public readonly group: pulumi.Output<string>;
    /**
     * The GraphQL ID of the group to which the security policty project will be attached.
     */
    declare public /*out*/ readonly groupGraphqlId: pulumi.Output<string>;
    /**
     * The ID or Full Path of the security policy project.
     */
    declare public readonly policyProject: pulumi.Output<string>;
    /**
     * The GraphQL ID of the security policy project.
     */
    declare public /*out*/ readonly policyProjectGraphqlId: pulumi.Output<string>;

    /**
     * Create a GroupSecurityPolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupSecurityPolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupSecurityPolicyAttachmentArgs | GroupSecurityPolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupSecurityPolicyAttachmentState | undefined;
            resourceInputs["group"] = state?.group;
            resourceInputs["groupGraphqlId"] = state?.groupGraphqlId;
            resourceInputs["policyProject"] = state?.policyProject;
            resourceInputs["policyProjectGraphqlId"] = state?.policyProjectGraphqlId;
        } else {
            const args = argsOrState as GroupSecurityPolicyAttachmentArgs | undefined;
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if (args?.policyProject === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyProject'");
            }
            resourceInputs["group"] = args?.group;
            resourceInputs["policyProject"] = args?.policyProject;
            resourceInputs["groupGraphqlId"] = undefined /*out*/;
            resourceInputs["policyProjectGraphqlId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupSecurityPolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupSecurityPolicyAttachment resources.
 */
export interface GroupSecurityPolicyAttachmentState {
    /**
     * The ID or Full Path of the group which will have the security policy project assigned to it.
     */
    group?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the group to which the security policty project will be attached.
     */
    groupGraphqlId?: pulumi.Input<string>;
    /**
     * The ID or Full Path of the security policy project.
     */
    policyProject?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the security policy project.
     */
    policyProjectGraphqlId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupSecurityPolicyAttachment resource.
 */
export interface GroupSecurityPolicyAttachmentArgs {
    /**
     * The ID or Full Path of the group which will have the security policy project assigned to it.
     */
    group: pulumi.Input<string>;
    /**
     * The ID or Full Path of the security policy project.
     */
    policyProject: pulumi.Input<string>;
}
