// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
 *
 * > You must be an administrator!
 *
 * > When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
 * the most related match will prioritize an exact match if one is available.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-memberships-for-a-billable-member-of-a-group)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const testUserMembership = gitlab.getGroupBillableMemberMemberships({
 *     userId: 21,
 *     groupId: "42",
 * });
 * ```
 */
export function getGroupBillableMemberMemberships(args: GetGroupBillableMemberMembershipsArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupBillableMemberMembershipsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", {
        "groupId": args.groupId,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupBillableMemberMemberships.
 */
export interface GetGroupBillableMemberMembershipsArgs {
    /**
     * The ID of the group.
     */
    groupId: string;
    /**
     * The ID of the user.
     */
    userId: number;
}

/**
 * A collection of values returned by getGroupBillableMemberMemberships.
 */
export interface GetGroupBillableMemberMembershipsResult {
    /**
     * The ID of the group.
     */
    readonly groupId: string;
    /**
     * The id of the data source. It will always be equal to the user_id
     */
    readonly id: string;
    /**
     * group- and/or project-memberships of the user.
     */
    readonly memberships: outputs.GetGroupBillableMemberMembershipsMembership[];
    /**
     * The ID of the user.
     */
    readonly userId: number;
}
/**
 * The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
 *
 * > You must be an administrator!
 *
 * > When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
 * the most related match will prioritize an exact match if one is available.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-memberships-for-a-billable-member-of-a-group)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const testUserMembership = gitlab.getGroupBillableMemberMemberships({
 *     userId: 21,
 *     groupId: "42",
 * });
 * ```
 */
export function getGroupBillableMemberMembershipsOutput(args: GetGroupBillableMemberMembershipsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupBillableMemberMembershipsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", {
        "groupId": args.groupId,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupBillableMemberMemberships.
 */
export interface GetGroupBillableMemberMembershipsOutputArgs {
    /**
     * The ID of the group.
     */
    groupId: pulumi.Input<string>;
    /**
     * The ID of the user.
     */
    userId: pulumi.Input<number>;
}
