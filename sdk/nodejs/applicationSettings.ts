// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class ApplicationSettings extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationSettingsState, opts?: pulumi.CustomResourceOptions): ApplicationSettings {
        return new ApplicationSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/applicationSettings:ApplicationSettings';

    /**
     * Returns true if the given object is an instance of ApplicationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationSettings.__pulumiType;
    }

    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     */
    declare public readonly abuseNotificationEmail: pulumi.Output<string>;
    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     */
    declare public readonly adminMode: pulumi.Output<boolean>;
    /**
     * Where to redirect users after logout.
     */
    declare public readonly afterSignOutPath: pulumi.Output<string>;
    /**
     * Text shown to the user after signing up.
     */
    declare public readonly afterSignUpText: pulumi.Output<string>;
    /**
     * API key for Akismet spam protection.
     */
    declare public readonly akismetApiKey: pulumi.Output<string>;
    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     */
    declare public readonly akismetEnabled: pulumi.Output<boolean>;
    /**
     * Set to true to allow users to delete their accounts. Premium and Ultimate only.
     */
    declare public readonly allowAccountDeletion: pulumi.Output<boolean>;
    /**
     * Set to true to allow group owners to manage LDAP.
     */
    declare public readonly allowGroupOwnersToManageLdap: pulumi.Output<boolean>;
    /**
     * Allow requests to the local network from system hooks.
     */
    declare public readonly allowLocalRequestsFromSystemHooks: pulumi.Output<boolean>;
    /**
     * Allow requests to the local network from web hooks and services.
     */
    declare public readonly allowLocalRequestsFromWebHooksAndServices: pulumi.Output<boolean>;
    /**
     * Indicates whether users assigned up to the Guest role can create groups and personal projects.
     */
    declare public readonly allowProjectCreationForGuestAndBelow: pulumi.Output<boolean>;
    /**
     * Allow using a registration token to create a runner.
     */
    declare public readonly allowRunnerRegistrationToken: pulumi.Output<boolean>;
    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     */
    declare public readonly archiveBuildsInHumanReadable: pulumi.Output<string>;
    /**
     * Maximum limit of AsciiDoc include directives being processed in any one document. Maximum: 64.
     */
    declare public readonly asciidocMaxIncludes: pulumi.Output<number>;
    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     */
    declare public readonly assetProxyAllowlists: pulumi.Output<string[]>;
    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     */
    declare public readonly assetProxyEnabled: pulumi.Output<boolean>;
    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     */
    declare public readonly assetProxySecretKey: pulumi.Output<string>;
    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     */
    declare public readonly assetProxyUrl: pulumi.Output<string>;
    /**
     * By default, we write to the authorizedKeys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     */
    declare public readonly authorizedKeysEnabled: pulumi.Output<boolean>;
    /**
     * When enabled, users will get automatically banned from the application when they download more than the maximum number of unique projects in the time period specified by max*number*of*repository*downloads and max*number*of*repository*downloads*within*time_period respectively. Self-managed, Ultimate only.
     */
    declare public readonly autoBanUserOnExcessiveProjectsDownload: pulumi.Output<boolean>;
    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     */
    declare public readonly autoDevopsDomain: pulumi.Output<string>;
    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     */
    declare public readonly autoDevopsEnabled: pulumi.Output<boolean>;
    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     */
    declare public readonly automaticPurchasedStorageAllocation: pulumi.Output<boolean>;
    /**
     * Maximum simultaneous Direct Transfer batches to process.
     */
    declare public readonly bulkImportConcurrentPipelineBatchLimit: pulumi.Output<number>;
    /**
     * Enable migrating GitLab groups by direct transfer.
     */
    declare public readonly bulkImportEnabled: pulumi.Output<boolean>;
    /**
     * Maximum download file size when importing from source GitLab instances by direct transfer.
     */
    declare public readonly bulkImportMaxDownloadFileSize: pulumi.Output<number>;
    /**
     * Indicates whether users can create top-level groups.
     */
    declare public readonly canCreateGroup: pulumi.Output<boolean>;
    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     */
    declare public readonly checkNamespacePlan: pulumi.Output<boolean>;
    /**
     * The maximum number of includes per pipeline.
     */
    declare public readonly ciMaxIncludes: pulumi.Output<number>;
    /**
     * The maximum amount of memory, in bytes, that can be allocated for the pipeline configuration, with all included YAML configuration files.
     */
    declare public readonly ciMaxTotalYamlSizeBytes: pulumi.Output<number>;
    /**
     * Custom hostname (for private commit emails).
     */
    declare public readonly commitEmailHostname: pulumi.Output<string>;
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Cloud importer.
     */
    declare public readonly concurrentBitbucketImportJobsLimit: pulumi.Output<number>;
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Server importer.
     */
    declare public readonly concurrentBitbucketServerImportJobsLimit: pulumi.Output<number>;
    /**
     * Maximum number of simultaneous import jobs for the GitHub importer.
     */
    declare public readonly concurrentGithubImportJobsLimit: pulumi.Output<number>;
    /**
     * Enable cleanup policies for all projects.
     */
    declare public readonly containerExpirationPoliciesEnableHistoricEntries: pulumi.Output<boolean>;
    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     */
    declare public readonly containerRegistryCleanupTagsServiceMaxListSize: pulumi.Output<number>;
    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     */
    declare public readonly containerRegistryDeleteTagsServiceTimeout: pulumi.Output<number>;
    /**
     * Caching during the execution of cleanup policies.
     */
    declare public readonly containerRegistryExpirationPoliciesCaching: pulumi.Output<boolean>;
    /**
     * Number of workers for cleanup policies.
     */
    declare public readonly containerRegistryExpirationPoliciesWorkerCapacity: pulumi.Output<number>;
    /**
     * Container Registry token duration in minutes.
     */
    declare public readonly containerRegistryTokenExpireDelay: pulumi.Output<number>;
    /**
     * Enable automatic deactivation of dormant users.
     */
    declare public readonly deactivateDormantUsers: pulumi.Output<boolean>;
    /**
     * Length of time (in days) after which a user is considered dormant.
     */
    declare public readonly deactivateDormantUsersPeriod: pulumi.Output<number>;
    /**
     * Default timeout for decompressing archived files, in seconds. Set to 0 to disable timeouts.
     */
    declare public readonly decompressArchiveFileTimeout: pulumi.Output<number>;
    /**
     * Set the default expiration time for each job’s artifacts.
     */
    declare public readonly defaultArtifactsExpireIn: pulumi.Output<string>;
    /**
     * Instance-level custom initial branch name
     */
    declare public readonly defaultBranchName: pulumi.Output<string>;
    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2. Use `defaultBranchProtectionDefaults` instead. To be removed in 19.0.
     *
     * @deprecated Use `defaultBranchProtectionDefaults` instead. To be removed in 19.0.
     */
    declare public readonly defaultBranchProtection: pulumi.Output<number>;
    /**
     * The default*branch*protection*defaults attribute describes the default branch protection defaults. All parameters are optional.
     */
    declare public readonly defaultBranchProtectionDefaults: pulumi.Output<outputs.ApplicationSettingsDefaultBranchProtectionDefaults>;
    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     */
    declare public readonly defaultCiConfigPath: pulumi.Output<string>;
    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter.
     */
    declare public readonly defaultGroupVisibility: pulumi.Output<string>;
    /**
     * Default preferred language for users who are not logged in.
     */
    declare public readonly defaultPreferredLanguage: pulumi.Output<string>;
    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     */
    declare public readonly defaultProjectCreation: pulumi.Output<number>;
    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter.
     */
    declare public readonly defaultProjectVisibility: pulumi.Output<string>;
    /**
     * Project limit per user.
     */
    declare public readonly defaultProjectsLimit: pulumi.Output<number>;
    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter.
     */
    declare public readonly defaultSnippetVisibility: pulumi.Output<string>;
    /**
     * Default syntax highlighting theme for users who are new or not signed in. See IDs of available themes (https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/themes.rb#L16)
     */
    declare public readonly defaultSyntaxHighlightingTheme: pulumi.Output<number>;
    /**
     * Enable inactive project deletion feature.
     */
    declare public readonly deleteInactiveProjects: pulumi.Output<boolean>;
    /**
     * Specifies whether users who have not confirmed their email should be deleted. When set to true, unconfirmed users are deleted after unconfirmed*users*delete*after*days days. Self-managed, Premium and Ultimate only.
     */
    declare public readonly deleteUnconfirmedUsers: pulumi.Output<boolean>;
    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90.
     */
    declare public readonly deletionAdjournedPeriod: pulumi.Output<number>;
    /**
     * (If enabled, requires diagramsnet_url) Enable Diagrams.net integration.
     */
    declare public readonly diagramsnetEnabled: pulumi.Output<boolean>;
    /**
     * The Diagrams.net instance URL for integration.
     */
    declare public readonly diagramsnetUrl: pulumi.Output<string>;
    /**
     * Maximum files in a diff.
     */
    declare public readonly diffMaxFiles: pulumi.Output<number>;
    /**
     * Maximum lines in a diff.
     */
    declare public readonly diffMaxLines: pulumi.Output<number>;
    /**
     * Maximum diff patch size, in bytes.
     */
    declare public readonly diffMaxPatchBytes: pulumi.Output<number>;
    /**
     * Stops administrators from connecting their GitLab accounts to non-trusted OAuth 2.0 applications that have the api, read*api, read*repository, write*repository, read*registry, write_registry, or sudo scopes.
     */
    declare public readonly disableAdminOauthScopes: pulumi.Output<boolean>;
    /**
     * Disable display of RSS/Atom and calendar feed tokens.
     */
    declare public readonly disableFeedToken: pulumi.Output<boolean>;
    /**
     * Disable personal access tokens. Self-managed, Premium and Ultimate only. There is no method available to enable a personal access token that’s been disabled through the API. This is a known issue.
     */
    declare public readonly disablePersonalAccessTokens: pulumi.Output<boolean>;
    /**
     * Disabled OAuth sign-in sources.
     */
    declare public readonly disabledOauthSignInSources: pulumi.Output<string[]>;
    /**
     * Enforce DNS rebinding attack protection.
     */
    declare public readonly dnsRebindingProtectionEnabled: pulumi.Output<boolean>;
    /**
     * Force people to use only corporate emails for sign-up. Null means there is no restriction.
     */
    declare public readonly domainAllowlists: pulumi.Output<string[]>;
    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     */
    declare public readonly domainDenylistEnabled: pulumi.Output<boolean>;
    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     */
    declare public readonly domainDenylists: pulumi.Output<string[]>;
    /**
     * Maximum downstream pipeline trigger rate.
     */
    declare public readonly downstreamPipelineTriggerLimitPerProjectUserSha: pulumi.Output<number>;
    /**
     * The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
     */
    declare public readonly dsaKeyRestriction: pulumi.Output<number>;
    /**
     * Indicates whether GitLab Duo features are enabled for this instance. Self-managed, Premium and Ultimate only.
     */
    declare public readonly duoFeaturesEnabled: pulumi.Output<boolean>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
     */
    declare public readonly ecdsaKeyRestriction: pulumi.Output<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
     */
    declare public readonly ecdsaSkKeyRestriction: pulumi.Output<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
     */
    declare public readonly ed25519KeyRestriction: pulumi.Output<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
     */
    declare public readonly ed25519SkKeyRestriction: pulumi.Output<number>;
    /**
     * AWS IAM access key ID.
     */
    declare public readonly eksAccessKeyId: pulumi.Output<string>;
    /**
     * Amazon account ID.
     */
    declare public readonly eksAccountId: pulumi.Output<string>;
    /**
     * Enable integration with Amazon EKS.
     */
    declare public readonly eksIntegrationEnabled: pulumi.Output<boolean>;
    /**
     * AWS IAM secret access key.
     */
    declare public readonly eksSecretAccessKey: pulumi.Output<string>;
    /**
     * Enable the use of AWS hosted Elasticsearch.
     */
    declare public readonly elasticsearchAws: pulumi.Output<boolean>;
    /**
     * AWS IAM access key.
     */
    declare public readonly elasticsearchAwsAccessKey: pulumi.Output<string>;
    /**
     * The AWS region the Elasticsearch domain is configured.
     */
    declare public readonly elasticsearchAwsRegion: pulumi.Output<string>;
    /**
     * AWS IAM secret access key.
     */
    declare public readonly elasticsearchAwsSecretAccessKey: pulumi.Output<string>;
    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     */
    declare public readonly elasticsearchIndexedFieldLengthLimit: pulumi.Output<number>;
    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     */
    declare public readonly elasticsearchIndexedFileSizeLimitKb: pulumi.Output<number>;
    /**
     * Enable Elasticsearch indexing.
     */
    declare public readonly elasticsearchIndexing: pulumi.Output<boolean>;
    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     */
    declare public readonly elasticsearchLimitIndexing: pulumi.Output<boolean>;
    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     */
    declare public readonly elasticsearchMaxBulkConcurrency: pulumi.Output<number>;
    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     */
    declare public readonly elasticsearchMaxBulkSizeMb: pulumi.Output<number>;
    /**
     * Maximum concurrency of Elasticsearch code indexing background jobs. This only applies to repository indexing operations. Premium and Ultimate only.
     */
    declare public readonly elasticsearchMaxCodeIndexingConcurrency: pulumi.Output<number>;
    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    declare public readonly elasticsearchNamespaceIds: pulumi.Output<number[]>;
    /**
     * The password of your Elasticsearch instance.
     */
    declare public readonly elasticsearchPassword: pulumi.Output<string>;
    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    declare public readonly elasticsearchProjectIds: pulumi.Output<number[]>;
    /**
     * Enable automatic requeuing of indexing workers. This improves non-code indexing throughput by enqueuing Sidekiq jobs until all documents are processed. Premium and Ultimate only.
     */
    declare public readonly elasticsearchRequeueWorkers: pulumi.Output<boolean>;
    /**
     * Enable Elasticsearch search.
     */
    declare public readonly elasticsearchSearch: pulumi.Output<boolean>;
    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     */
    declare public readonly elasticsearchUrls: pulumi.Output<string[]>;
    /**
     * The username of your Elasticsearch instance.
     */
    declare public readonly elasticsearchUsername: pulumi.Output<string>;
    /**
     * Number of indexing worker shards. This improves non-code indexing throughput by enqueuing more parallel Sidekiq jobs. Premium and Ultimate only.
     */
    declare public readonly elasticsearchWorkerNumberOfShards: pulumi.Output<number>;
    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     */
    declare public readonly emailAdditionalText: pulumi.Output<string>;
    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     */
    declare public readonly emailAuthorInBody: pulumi.Output<boolean>;
    /**
     * Specifies whether users must confirm their email before sign in. Possible values are off, soft, and hard.
     */
    declare public readonly emailConfirmationSetting: pulumi.Output<string>;
    /**
     * Show the external redirect page that warns you about user-generated content in GitLab Pages.
     */
    declare public readonly enableArtifactExternalRedirectWarningPage: pulumi.Output<boolean>;
    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     */
    declare public readonly enabledGitAccessProtocol: pulumi.Output<string>;
    /**
     * Enabling this permits enforcement of namespace storage limits.
     */
    declare public readonly enforceNamespaceStorageLimit: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     */
    declare public readonly enforceTerms: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     */
    declare public readonly externalAuthClientCert: pulumi.Output<string>;
    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     */
    declare public readonly externalAuthClientKey: pulumi.Output<string>;
    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     */
    declare public readonly externalAuthClientKeyPass: pulumi.Output<string>;
    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     */
    declare public readonly externalAuthorizationServiceDefaultLabel: pulumi.Output<string>;
    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     */
    declare public readonly externalAuthorizationServiceEnabled: pulumi.Output<boolean>;
    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     */
    declare public readonly externalAuthorizationServiceTimeout: pulumi.Output<number>;
    /**
     * URL to which authorization requests are directed.
     */
    declare public readonly externalAuthorizationServiceUrl: pulumi.Output<string>;
    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     */
    declare public readonly externalPipelineValidationServiceTimeout: pulumi.Output<number>;
    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     */
    declare public readonly externalPipelineValidationServiceToken: pulumi.Output<string>;
    /**
     * URL to use for pipeline validation requests.
     */
    declare public readonly externalPipelineValidationServiceUrl: pulumi.Output<string>;
    /**
     * Time period in minutes after which the user is unlocked when maximum number of failed sign-in attempts reached.
     */
    declare public readonly failedLoginAttemptsUnlockPeriodInMinutes: pulumi.Output<number>;
    /**
     * The ID of a project to load custom file templates from.
     */
    declare public readonly fileTemplateProjectId: pulumi.Output<number>;
    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
     */
    declare public readonly firstDayOfWeek: pulumi.Output<number>;
    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     */
    declare public readonly geoNodeAllowedIps: pulumi.Output<string>;
    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     */
    declare public readonly geoStatusTimeout: pulumi.Output<number>;
    /**
     * List of user IDs that are emailed when the Git abuse rate limit is exceeded. Maximum: 100 user IDs. Self-managed, Ultimate only.
     */
    declare public readonly gitRateLimitUsersAlertlists: pulumi.Output<number[]>;
    /**
     * List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Self-managed, Ultimate only.
     */
    declare public readonly gitRateLimitUsersAllowlists: pulumi.Output<string[]>;
    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     */
    declare public readonly gitTwoFactorSessionExpiry: pulumi.Output<number>;
    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     */
    declare public readonly gitalyTimeoutDefault: pulumi.Output<number>;
    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     */
    declare public readonly gitalyTimeoutFast: pulumi.Output<number>;
    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     */
    declare public readonly gitalyTimeoutMedium: pulumi.Output<number>;
    /**
     * Indicates whether the instance was provisioned for GitLab Dedicated.
     */
    declare public /*out*/ readonly gitlabDedicatedInstance: pulumi.Output<boolean>;
    /**
     * Indicates whether the instance was provisioned with the GitLab Environment Toolkit for Service Ping reporting.
     */
    declare public /*out*/ readonly gitlabEnvironmentToolkitInstance: pulumi.Output<boolean>;
    /**
     * Maximum number of Git operations per minute a user can perform.
     */
    declare public readonly gitlabShellOperationLimit: pulumi.Output<number>;
    /**
     * Enable Gitpod integration.
     */
    declare public readonly gitpodEnabled: pulumi.Output<boolean>;
    /**
     * The Gitpod instance URL for integration.
     */
    declare public readonly gitpodUrl: pulumi.Output<string>;
    /**
     * Comma-separated list of IP addresses and CIDRs always allowed for inbound traffic. For example, 1.1.1.1, 2.2.2.0/24.
     */
    declare public readonly globallyAllowedIps: pulumi.Output<string>;
    /**
     * Enable Grafana.
     */
    declare public readonly grafanaEnabled: pulumi.Output<boolean>;
    /**
     * Grafana URL.
     */
    declare public readonly grafanaUrl: pulumi.Output<string>;
    /**
     * Enable Gravatar.
     */
    declare public readonly gravatarEnabled: pulumi.Output<boolean>;
    /**
     * Prevent overrides of default branch protection.
     */
    declare public readonly groupOwnersCanManageDefaultBranchProtection: pulumi.Output<boolean>;
    /**
     * Hide marketing-related entries from help.
     */
    declare public readonly helpPageHideCommercialContent: pulumi.Output<boolean>;
    /**
     * Alternate support URL for help page and help dropdown.
     */
    declare public readonly helpPageSupportUrl: pulumi.Output<string>;
    /**
     * Custom text displayed on the help page.
     */
    declare public readonly helpPageText: pulumi.Output<string>;
    /**
     * GitLab server administrator information.
     */
    declare public readonly helpText: pulumi.Output<string>;
    /**
     * Do not display offers from third parties in GitLab.
     */
    declare public readonly hideThirdPartyOffers: pulumi.Output<boolean>;
    /**
     * Redirect to this URL when not logged in.
     */
    declare public readonly homePageUrl: pulumi.Output<string>;
    /**
     * Enable or disable Git housekeeping. If enabled, requires housekeeping*optimize*repository_period.
     */
    declare public readonly housekeepingEnabled: pulumi.Output<boolean>;
    /**
     * Number of Git pushes after which an incremental git-repack is run.
     */
    declare public readonly housekeepingOptimizeRepositoryPeriod: pulumi.Output<number>;
    /**
     * Enable HTML emails.
     */
    declare public readonly htmlEmailsEnabled: pulumi.Output<boolean>;
    /**
     * Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucketServer`, `fogbugz`, `git`, `gitlab.Project`, `gitea`, `manifest`
     */
    declare public readonly importSources: pulumi.Output<string[]>;
    /**
     * Enable in-product marketing emails.
     */
    declare public readonly inProductMarketingEmailsEnabled: pulumi.Output<boolean>;
    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects.
     */
    declare public readonly inactiveProjectsDeleteAfterMonths: pulumi.Output<number>;
    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity.
     */
    declare public readonly inactiveProjectsMinSizeMb: pulumi.Output<number>;
    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive.
     */
    declare public readonly inactiveProjectsSendWarningEmailAfterMonths: pulumi.Output<number>;
    /**
     * Whether or not optional metrics are enabled in Service Ping.
     */
    declare public readonly includeOptionalMetricsInServicePing: pulumi.Output<boolean>;
    /**
     * Enable Invisible CAPTCHA spam detection during sign-up.
     */
    declare public readonly invisibleCaptchaEnabled: pulumi.Output<boolean>;
    /**
     * Max number of issue creation requests per minute per user.
     */
    declare public readonly issuesCreateLimit: pulumi.Output<number>;
    /**
     * ID of the OAuth application used to authenticate with the GitLab for Jira Cloud app.
     */
    declare public readonly jiraConnectApplicationKey: pulumi.Output<string>;
    /**
     * URL of the GitLab instance used as a proxy for the GitLab for Jira Cloud app.
     */
    declare public readonly jiraConnectProxyUrl: pulumi.Output<string>;
    /**
     * Enable public key storage for the GitLab for Jira Cloud app.
     */
    declare public readonly jiraConnectPublicKeyStorageEnabled: pulumi.Output<boolean>;
    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
     */
    declare public readonly keepLatestArtifact: pulumi.Output<boolean>;
    /**
     * Increase this value when any cached Markdown should be invalidated.
     */
    declare public readonly localMarkdownVersion: pulumi.Output<number>;
    /**
     * Indicates whether the GitLab Duo features enabled setting is enforced for all subgroups. Self-managed, Premium and Ultimate only.
     */
    declare public readonly lockDuoFeaturesEnabled: pulumi.Output<boolean>;
    /**
     * Set to true to lock all memberships to LDAP. Premium and Ultimate only.
     */
    declare public readonly lockMembershipsToLdap: pulumi.Output<boolean>;
    /**
     * Enable Mailgun event receiver.
     */
    declare public readonly mailgunEventsEnabled: pulumi.Output<boolean>;
    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     */
    declare public readonly mailgunSigningKey: pulumi.Output<string>;
    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     */
    declare public readonly maintenanceMode: pulumi.Output<boolean>;
    /**
     * Message displayed when instance is in maintenance mode.
     */
    declare public readonly maintenanceModeMessage: pulumi.Output<string>;
    /**
     * Use repo.maven.apache.org as a default remote repository when the package is not found in the GitLab Package Registry for Maven. Premium and Ultimate only.
     */
    declare public readonly mavenPackageRequestsForwarding: pulumi.Output<boolean>;
    /**
     * Maximum artifacts size in MB.
     */
    declare public readonly maxArtifactsSize: pulumi.Output<number>;
    /**
     * Limit attachment size in MB.
     */
    declare public readonly maxAttachmentSize: pulumi.Output<number>;
    /**
     * Maximum decompressed archive size in bytes.
     */
    declare public readonly maxDecompressedArchiveSize: pulumi.Output<number>;
    /**
     * Maximum export size in MB. 0 for unlimited.
     */
    declare public readonly maxExportSize: pulumi.Output<number>;
    /**
     * Maximum remote file size for imports from external object storages.
     */
    declare public readonly maxImportRemoteFileSize: pulumi.Output<number>;
    /**
     * Maximum import size in MB. 0 for unlimited.
     */
    declare public readonly maxImportSize: pulumi.Output<number>;
    /**
     * Maximum number of sign-in attempts before locking out the user.
     */
    declare public readonly maxLoginAttempts: pulumi.Output<number>;
    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories.
     */
    declare public readonly maxNumberOfRepositoryDownloads: pulumi.Output<number>;
    /**
     * Reporting time period (in seconds). Maximum: 864000 seconds (10 days).
     */
    declare public readonly maxNumberOfRepositoryDownloadsWithinTimePeriod: pulumi.Output<number>;
    /**
     * Maximum size of pages repositories in MB.
     */
    declare public readonly maxPagesSize: pulumi.Output<number>;
    /**
     * Maximum allowable lifetime for access tokens in days.
     */
    declare public readonly maxPersonalAccessTokenLifetime: pulumi.Output<number>;
    /**
     * Maximum allowable lifetime for SSH keys in days.
     */
    declare public readonly maxSshKeyLifetime: pulumi.Output<number>;
    declare public readonly maxTerraformStateSizeBytes: pulumi.Output<number>;
    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     */
    declare public readonly metricsMethodCallThreshold: pulumi.Output<number>;
    /**
     * Indicates whether passwords require a minimum length. Premium and Ultimate only.
     */
    declare public readonly minimumPasswordLength: pulumi.Output<number>;
    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     */
    declare public readonly mirrorAvailable: pulumi.Output<boolean>;
    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     */
    declare public readonly mirrorCapacityThreshold: pulumi.Output<number>;
    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     */
    declare public readonly mirrorMaxCapacity: pulumi.Output<number>;
    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     */
    declare public readonly mirrorMaxDelay: pulumi.Output<number>;
    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     */
    declare public readonly npmPackageRequestsForwarding: pulumi.Output<boolean>;
    /**
     * Indicates whether to skip metadata URL validation for the NuGet package.
     */
    declare public readonly nugetSkipMetadataUrlValidation: pulumi.Output<boolean>;
    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     */
    declare public readonly outboundLocalRequestsWhitelists: pulumi.Output<string[]>;
    /**
     * List of package registry metadata to sync. See the list of the available values (https://gitlab.com/gitlab-org/gitlab/-/blob/ace16c20d5da7c4928dd03fb139692638b557fe3/app/models/concerns/enums/package_metadata.rb#L5). Self-managed, Ultimate only.
     */
    declare public readonly packageMetadataPurlTypes: pulumi.Output<number[]>;
    /**
     * Enable to allow anyone to pull from Package Registry visible and changeable.
     */
    declare public readonly packageRegistryAllowAnyoneToPullOption: pulumi.Output<boolean>;
    /**
     * Number of workers assigned to the packages cleanup policies.
     */
    declare public readonly packageRegistryCleanupPoliciesWorkerCapacity: pulumi.Output<number>;
    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     */
    declare public readonly pagesDomainVerificationEnabled: pulumi.Output<boolean>;
    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password.
     */
    declare public readonly passwordAuthenticationEnabledForGit: pulumi.Output<boolean>;
    /**
     * Enable authentication for the web interface via a GitLab account password.
     */
    declare public readonly passwordAuthenticationEnabledForWeb: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one lowercase letter.
     */
    declare public readonly passwordLowercaseRequired: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one number.
     */
    declare public readonly passwordNumberRequired: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one symbol character.
     */
    declare public readonly passwordSymbolRequired: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one uppercase letter.
     */
    declare public readonly passwordUppercaseRequired: pulumi.Output<boolean>;
    /**
     * Path of the group that is allowed to toggle the performance bar.
     */
    declare public readonly performanceBarAllowedGroupPath: pulumi.Output<string>;
    /**
     * Prefix for all generated personal access tokens.
     */
    declare public readonly personalAccessTokenPrefix: pulumi.Output<string>;
    /**
     * Maximum number of pipeline creation requests per minute per user and commit.
     */
    declare public readonly pipelineLimitPerProjectUserSha: pulumi.Output<number>;
    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration.
     */
    declare public readonly plantumlEnabled: pulumi.Output<boolean>;
    /**
     * The PlantUML instance URL for integration.
     */
    declare public readonly plantumlUrl: pulumi.Output<string>;
    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     */
    declare public readonly pollingIntervalMultiplier: pulumi.Output<number>;
    /**
     * Enable project export.
     */
    declare public readonly projectExportEnabled: pulumi.Output<boolean>;
    /**
     * Maximum authenticated requests to /project/:id/jobs per minute.
     */
    declare public readonly projectJobsApiRateLimit: pulumi.Output<number>;
    /**
     * Max number of requests per 10 minutes per IP address for unauthenticated requests to the list all projects API. To disable throttling set to 0.
     */
    declare public readonly projectsApiRateLimitUnauthenticated: pulumi.Output<number>;
    /**
     * Enable Prometheus metrics.
     */
    declare public readonly prometheusMetricsEnabled: pulumi.Output<boolean>;
    /**
     * CI/CD variables are protected by default.
     */
    declare public readonly protectedCiVariables: pulumi.Output<boolean>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     */
    declare public readonly pushEventActivitiesLimit: pulumi.Output<number>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     */
    declare public readonly pushEventHooksLimit: pulumi.Output<number>;
    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     */
    declare public readonly pypiPackageRequestsForwarding: pulumi.Output<boolean>;
    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     */
    declare public readonly rateLimitingResponseText: pulumi.Output<string>;
    /**
     * Max number of requests per minute for each raw path. To disable throttling set to 0.
     */
    declare public readonly rawBlobRequestLimit: pulumi.Output<number>;
    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     */
    declare public readonly recaptchaEnabled: pulumi.Output<boolean>;
    /**
     * Private key for reCAPTCHA.
     */
    declare public readonly recaptchaPrivateKey: pulumi.Output<string>;
    /**
     * Site key for reCAPTCHA.
     */
    declare public readonly recaptchaSiteKey: pulumi.Output<string>;
    /**
     * Maximum push size (MB).
     */
    declare public readonly receiveMaxInputSize: pulumi.Output<number>;
    /**
     * Enable receptive mode for GitLab Agents for Kubernetes.
     */
    declare public readonly receptiveClusterAgentsEnabled: pulumi.Output<boolean>;
    /**
     * Enable Remember me setting.
     */
    declare public readonly rememberMeEnabled: pulumi.Output<boolean>;
    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     */
    declare public readonly repositoryChecksEnabled: pulumi.Output<boolean>;
    /**
     * Size limit per repository (MB).
     */
    declare public readonly repositorySizeLimit: pulumi.Output<number>;
    /**
     * Hash of names taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     */
    declare public readonly repositoryStoragesWeighted: pulumi.Output<{[key: string]: number}>;
    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     */
    declare public readonly requireAdminApprovalAfterUserSignup: pulumi.Output<boolean>;
    /**
     * Allow administrators to require 2FA for all administrators on the instance.
     */
    declare public readonly requireAdminTwoFactorAuthentication: pulumi.Output<boolean>;
    /**
     * When enabled, users must set an expiration date when creating a group or project access token, or a personal access token owned by a non-service account.
     */
    declare public readonly requirePersonalAccessTokenExpiry: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     */
    declare public readonly requireTwoFactorAuthentication: pulumi.Output<boolean>;
    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
     */
    declare public readonly restrictedVisibilityLevels: pulumi.Output<string[]>;
    /**
     * The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
     */
    declare public readonly rsaKeyRestriction: pulumi.Output<number>;
    /**
     * Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
     */
    declare public readonly searchRateLimit: pulumi.Output<number>;
    /**
     * Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
     */
    declare public readonly searchRateLimitUnauthenticated: pulumi.Output<number>;
    /**
     * Maximum number of active merge request approval policies per security policy project. Maximum: 20
     */
    declare public readonly securityApprovalPoliciesLimit: pulumi.Output<number>;
    /**
     * Whether to look up merge request approval policy approval groups globally or within project hierarchies.
     */
    declare public readonly securityPolicyGlobalGroupApproversEnabled: pulumi.Output<boolean>;
    /**
     * Public security contact information.
     */
    declare public readonly securityTxtContent: pulumi.Output<string>;
    /**
     * Send confirmation email on sign-up.
     */
    declare public readonly sendUserConfirmationEmail: pulumi.Output<boolean>;
    /**
     * Flag to indicate if token expiry date can be optional for service account users
     */
    declare public readonly serviceAccessTokensExpirationEnforced: pulumi.Output<boolean>;
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     */
    declare public readonly sessionExpireDelay: pulumi.Output<number>;
    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     */
    declare public readonly sharedRunnersEnabled: pulumi.Output<boolean>;
    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     */
    declare public readonly sharedRunnersMinutes: pulumi.Output<number>;
    /**
     * Shared runners text.
     */
    declare public readonly sharedRunnersText: pulumi.Output<string>;
    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
     */
    declare public readonly sidekiqJobLimiterCompressionThresholdBytes: pulumi.Output<number>;
    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
     */
    declare public readonly sidekiqJobLimiterLimitBytes: pulumi.Output<number>;
    /**
     * track or compress. Sets the behavior for Sidekiq job size limits.
     */
    declare public readonly sidekiqJobLimiterMode: pulumi.Output<string>;
    /**
     * Text on the login page.
     */
    declare public readonly signInText: pulumi.Output<string>;
    /**
     * Enable registration.
     */
    declare public readonly signupEnabled: pulumi.Output<boolean>;
    /**
     * Enable Silent admin exports.
     */
    declare public readonly silentAdminExportsEnabled: pulumi.Output<boolean>;
    /**
     * Enable Silent mode.
     */
    declare public readonly silentModeEnabled: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     */
    declare public readonly slackAppEnabled: pulumi.Output<boolean>;
    /**
     * The app ID of the Slack-app.
     */
    declare public readonly slackAppId: pulumi.Output<string>;
    /**
     * The app secret of the Slack-app.
     */
    declare public readonly slackAppSecret: pulumi.Output<string>;
    /**
     * The signing secret of the Slack-app.
     */
    declare public readonly slackAppSigningSecret: pulumi.Output<string>;
    /**
     * The verification token of the Slack-app.
     */
    declare public readonly slackAppVerificationToken: pulumi.Output<string>;
    /**
     * Max snippet content size in bytes.
     */
    declare public readonly snippetSizeLimit: pulumi.Output<number>;
    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     */
    declare public readonly snowplowAppId: pulumi.Output<string>;
    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     */
    declare public readonly snowplowCollectorHostname: pulumi.Output<string>;
    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     */
    declare public readonly snowplowCookieDomain: pulumi.Output<string>;
    /**
     * The Snowplow collector for database events hostname. (for example, db-snowplow.trx.gitlab.net)
     */
    declare public readonly snowplowDatabaseCollectorHostname: pulumi.Output<string>;
    /**
     * Enable snowplow tracking.
     */
    declare public readonly snowplowEnabled: pulumi.Output<boolean>;
    /**
     * Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
     */
    declare public readonly sourcegraphEnabled: pulumi.Output<boolean>;
    /**
     * Blocks Sourcegraph from being loaded on private and internal projects.
     */
    declare public readonly sourcegraphPublicOnly: pulumi.Output<boolean>;
    /**
     * The Sourcegraph instance URL for integration.
     */
    declare public readonly sourcegraphUrl: pulumi.Output<string>;
    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     */
    declare public readonly spamCheckApiKey: pulumi.Output<string>;
    /**
     * Enables spam checking using external Spam Check API endpoint.
     */
    declare public readonly spamCheckEndpointEnabled: pulumi.Output<boolean>;
    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     */
    declare public readonly spamCheckEndpointUrl: pulumi.Output<string>;
    /**
     * Authentication token for the external storage linked in static*objects*external*storage*url.
     */
    declare public readonly staticObjectsExternalStorageAuthToken: pulumi.Output<string | undefined>;
    /**
     * URL to an external storage for repository static objects.
     */
    declare public readonly staticObjectsExternalStorageUrl: pulumi.Output<string | undefined>;
    /**
     * Enable pipeline suggestion banner.
     */
    declare public readonly suggestPipelineEnabled: pulumi.Output<boolean>;
    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     */
    declare public readonly terminalMaxSessionTime: pulumi.Output<number>;
    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     */
    declare public readonly terms: pulumi.Output<string>;
    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    declare public readonly throttleAuthenticatedApiEnabled: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    declare public readonly throttleAuthenticatedApiPeriodInSeconds: pulumi.Output<number>;
    /**
     * Maximum requests per period per user.
     */
    declare public readonly throttleAuthenticatedApiRequestsPerPeriod: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    declare public readonly throttleAuthenticatedPackagesApiEnabled: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    declare public readonly throttleAuthenticatedPackagesApiPeriodInSeconds: pulumi.Output<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    declare public readonly throttleAuthenticatedPackagesApiRequestsPerPeriod: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    declare public readonly throttleAuthenticatedWebEnabled: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    declare public readonly throttleAuthenticatedWebPeriodInSeconds: pulumi.Output<number>;
    /**
     * Maximum requests per period per user.
     */
    declare public readonly throttleAuthenticatedWebRequestsPerPeriod: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    declare public readonly throttleUnauthenticatedApiEnabled: pulumi.Output<boolean>;
    /**
     * Rate limit period in seconds.
     */
    declare public readonly throttleUnauthenticatedApiPeriodInSeconds: pulumi.Output<number>;
    /**
     * Max requests per period per IP.
     */
    declare public readonly throttleUnauthenticatedApiRequestsPerPeriod: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    declare public readonly throttleUnauthenticatedPackagesApiEnabled: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    declare public readonly throttleUnauthenticatedPackagesApiPeriodInSeconds: pulumi.Output<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    declare public readonly throttleUnauthenticatedPackagesApiRequestsPerPeriod: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    declare public readonly throttleUnauthenticatedWebEnabled: pulumi.Output<boolean>;
    /**
     * Rate limit period in seconds.
     */
    declare public readonly throttleUnauthenticatedWebPeriodInSeconds: pulumi.Output<number>;
    /**
     * Max requests per period per IP.
     */
    declare public readonly throttleUnauthenticatedWebRequestsPerPeriod: pulumi.Output<number>;
    /**
     * Limit display of time tracking units to hours.
     */
    declare public readonly timeTrackingLimitToHours: pulumi.Output<boolean>;
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     */
    declare public readonly twoFactorGracePeriod: pulumi.Output<number>;
    /**
     * Specifies how many days after sign-up to delete users who have not confirmed their email. Only applicable if delete*unconfirmed*users is set to true. Must be 1 or greater. Self-managed, Premium and Ultimate only.
     */
    declare public readonly unconfirmedUsersDeleteAfterDays: pulumi.Output<number>;
    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     */
    declare public readonly uniqueIpsLimitEnabled: pulumi.Output<boolean>;
    /**
     * Maximum number of IPs per user.
     */
    declare public readonly uniqueIpsLimitPerUser: pulumi.Output<number>;
    /**
     * How many seconds an IP is counted towards the limit.
     */
    declare public readonly uniqueIpsLimitTimeWindow: pulumi.Output<number>;
    /**
     * Fetch GitLab Runner release version data from GitLab.com.
     */
    declare public readonly updateRunnerVersionsEnabled: pulumi.Output<boolean>;
    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     */
    declare public readonly usagePingEnabled: pulumi.Output<boolean>;
    /**
     * Enables ClickHouse as a data source for analytics reports. ClickHouse must be configured for this setting to take effect. Available on Premium and Ultimate only.
     */
    declare public readonly useClickhouseForAnalytics: pulumi.Output<boolean>;
    /**
     * Send an email to users upon account deactivation.
     */
    declare public readonly userDeactivationEmailsEnabled: pulumi.Output<boolean>;
    /**
     * Newly registered users are external by default.
     */
    declare public readonly userDefaultExternal: pulumi.Output<boolean>;
    /**
     * Specify an email address regex pattern to identify default internal users.
     */
    declare public readonly userDefaultInternalRegex: pulumi.Output<string>;
    /**
     * Newly created users have private profile by default.
     */
    declare public readonly userDefaultsToPrivateProfile: pulumi.Output<boolean>;
    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     */
    declare public readonly userOauthApplications: pulumi.Output<boolean>;
    /**
     * When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     */
    declare public readonly userShowAddSshKeyMessage: pulumi.Output<boolean>;
    /**
     * List of types which are allowed to register a GitLab Runner. Can be [], ['group'], ['project'] or ['group', 'project'].
     */
    declare public readonly validRunnerRegistrars: pulumi.Output<string[]>;
    /**
     * Let GitLab inform you when an update is available.
     */
    declare public readonly versionCheckEnabled: pulumi.Output<boolean>;
    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     */
    declare public readonly webIdeClientsidePreviewEnabled: pulumi.Output<boolean>;
    /**
     * What's new variant, possible values: all*tiers, current*tier, and disabled.
     */
    declare public readonly whatsNewVariant: pulumi.Output<string>;
    /**
     * Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
     */
    declare public readonly wikiPageMaxContentBytes: pulumi.Output<number>;

    /**
     * Create a ApplicationSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationSettingsArgs | ApplicationSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationSettingsState | undefined;
            resourceInputs["abuseNotificationEmail"] = state?.abuseNotificationEmail;
            resourceInputs["adminMode"] = state?.adminMode;
            resourceInputs["afterSignOutPath"] = state?.afterSignOutPath;
            resourceInputs["afterSignUpText"] = state?.afterSignUpText;
            resourceInputs["akismetApiKey"] = state?.akismetApiKey;
            resourceInputs["akismetEnabled"] = state?.akismetEnabled;
            resourceInputs["allowAccountDeletion"] = state?.allowAccountDeletion;
            resourceInputs["allowGroupOwnersToManageLdap"] = state?.allowGroupOwnersToManageLdap;
            resourceInputs["allowLocalRequestsFromSystemHooks"] = state?.allowLocalRequestsFromSystemHooks;
            resourceInputs["allowLocalRequestsFromWebHooksAndServices"] = state?.allowLocalRequestsFromWebHooksAndServices;
            resourceInputs["allowProjectCreationForGuestAndBelow"] = state?.allowProjectCreationForGuestAndBelow;
            resourceInputs["allowRunnerRegistrationToken"] = state?.allowRunnerRegistrationToken;
            resourceInputs["archiveBuildsInHumanReadable"] = state?.archiveBuildsInHumanReadable;
            resourceInputs["asciidocMaxIncludes"] = state?.asciidocMaxIncludes;
            resourceInputs["assetProxyAllowlists"] = state?.assetProxyAllowlists;
            resourceInputs["assetProxyEnabled"] = state?.assetProxyEnabled;
            resourceInputs["assetProxySecretKey"] = state?.assetProxySecretKey;
            resourceInputs["assetProxyUrl"] = state?.assetProxyUrl;
            resourceInputs["authorizedKeysEnabled"] = state?.authorizedKeysEnabled;
            resourceInputs["autoBanUserOnExcessiveProjectsDownload"] = state?.autoBanUserOnExcessiveProjectsDownload;
            resourceInputs["autoDevopsDomain"] = state?.autoDevopsDomain;
            resourceInputs["autoDevopsEnabled"] = state?.autoDevopsEnabled;
            resourceInputs["automaticPurchasedStorageAllocation"] = state?.automaticPurchasedStorageAllocation;
            resourceInputs["bulkImportConcurrentPipelineBatchLimit"] = state?.bulkImportConcurrentPipelineBatchLimit;
            resourceInputs["bulkImportEnabled"] = state?.bulkImportEnabled;
            resourceInputs["bulkImportMaxDownloadFileSize"] = state?.bulkImportMaxDownloadFileSize;
            resourceInputs["canCreateGroup"] = state?.canCreateGroup;
            resourceInputs["checkNamespacePlan"] = state?.checkNamespacePlan;
            resourceInputs["ciMaxIncludes"] = state?.ciMaxIncludes;
            resourceInputs["ciMaxTotalYamlSizeBytes"] = state?.ciMaxTotalYamlSizeBytes;
            resourceInputs["commitEmailHostname"] = state?.commitEmailHostname;
            resourceInputs["concurrentBitbucketImportJobsLimit"] = state?.concurrentBitbucketImportJobsLimit;
            resourceInputs["concurrentBitbucketServerImportJobsLimit"] = state?.concurrentBitbucketServerImportJobsLimit;
            resourceInputs["concurrentGithubImportJobsLimit"] = state?.concurrentGithubImportJobsLimit;
            resourceInputs["containerExpirationPoliciesEnableHistoricEntries"] = state?.containerExpirationPoliciesEnableHistoricEntries;
            resourceInputs["containerRegistryCleanupTagsServiceMaxListSize"] = state?.containerRegistryCleanupTagsServiceMaxListSize;
            resourceInputs["containerRegistryDeleteTagsServiceTimeout"] = state?.containerRegistryDeleteTagsServiceTimeout;
            resourceInputs["containerRegistryExpirationPoliciesCaching"] = state?.containerRegistryExpirationPoliciesCaching;
            resourceInputs["containerRegistryExpirationPoliciesWorkerCapacity"] = state?.containerRegistryExpirationPoliciesWorkerCapacity;
            resourceInputs["containerRegistryTokenExpireDelay"] = state?.containerRegistryTokenExpireDelay;
            resourceInputs["deactivateDormantUsers"] = state?.deactivateDormantUsers;
            resourceInputs["deactivateDormantUsersPeriod"] = state?.deactivateDormantUsersPeriod;
            resourceInputs["decompressArchiveFileTimeout"] = state?.decompressArchiveFileTimeout;
            resourceInputs["defaultArtifactsExpireIn"] = state?.defaultArtifactsExpireIn;
            resourceInputs["defaultBranchName"] = state?.defaultBranchName;
            resourceInputs["defaultBranchProtection"] = state?.defaultBranchProtection;
            resourceInputs["defaultBranchProtectionDefaults"] = state?.defaultBranchProtectionDefaults;
            resourceInputs["defaultCiConfigPath"] = state?.defaultCiConfigPath;
            resourceInputs["defaultGroupVisibility"] = state?.defaultGroupVisibility;
            resourceInputs["defaultPreferredLanguage"] = state?.defaultPreferredLanguage;
            resourceInputs["defaultProjectCreation"] = state?.defaultProjectCreation;
            resourceInputs["defaultProjectVisibility"] = state?.defaultProjectVisibility;
            resourceInputs["defaultProjectsLimit"] = state?.defaultProjectsLimit;
            resourceInputs["defaultSnippetVisibility"] = state?.defaultSnippetVisibility;
            resourceInputs["defaultSyntaxHighlightingTheme"] = state?.defaultSyntaxHighlightingTheme;
            resourceInputs["deleteInactiveProjects"] = state?.deleteInactiveProjects;
            resourceInputs["deleteUnconfirmedUsers"] = state?.deleteUnconfirmedUsers;
            resourceInputs["deletionAdjournedPeriod"] = state?.deletionAdjournedPeriod;
            resourceInputs["diagramsnetEnabled"] = state?.diagramsnetEnabled;
            resourceInputs["diagramsnetUrl"] = state?.diagramsnetUrl;
            resourceInputs["diffMaxFiles"] = state?.diffMaxFiles;
            resourceInputs["diffMaxLines"] = state?.diffMaxLines;
            resourceInputs["diffMaxPatchBytes"] = state?.diffMaxPatchBytes;
            resourceInputs["disableAdminOauthScopes"] = state?.disableAdminOauthScopes;
            resourceInputs["disableFeedToken"] = state?.disableFeedToken;
            resourceInputs["disablePersonalAccessTokens"] = state?.disablePersonalAccessTokens;
            resourceInputs["disabledOauthSignInSources"] = state?.disabledOauthSignInSources;
            resourceInputs["dnsRebindingProtectionEnabled"] = state?.dnsRebindingProtectionEnabled;
            resourceInputs["domainAllowlists"] = state?.domainAllowlists;
            resourceInputs["domainDenylistEnabled"] = state?.domainDenylistEnabled;
            resourceInputs["domainDenylists"] = state?.domainDenylists;
            resourceInputs["downstreamPipelineTriggerLimitPerProjectUserSha"] = state?.downstreamPipelineTriggerLimitPerProjectUserSha;
            resourceInputs["dsaKeyRestriction"] = state?.dsaKeyRestriction;
            resourceInputs["duoFeaturesEnabled"] = state?.duoFeaturesEnabled;
            resourceInputs["ecdsaKeyRestriction"] = state?.ecdsaKeyRestriction;
            resourceInputs["ecdsaSkKeyRestriction"] = state?.ecdsaSkKeyRestriction;
            resourceInputs["ed25519KeyRestriction"] = state?.ed25519KeyRestriction;
            resourceInputs["ed25519SkKeyRestriction"] = state?.ed25519SkKeyRestriction;
            resourceInputs["eksAccessKeyId"] = state?.eksAccessKeyId;
            resourceInputs["eksAccountId"] = state?.eksAccountId;
            resourceInputs["eksIntegrationEnabled"] = state?.eksIntegrationEnabled;
            resourceInputs["eksSecretAccessKey"] = state?.eksSecretAccessKey;
            resourceInputs["elasticsearchAws"] = state?.elasticsearchAws;
            resourceInputs["elasticsearchAwsAccessKey"] = state?.elasticsearchAwsAccessKey;
            resourceInputs["elasticsearchAwsRegion"] = state?.elasticsearchAwsRegion;
            resourceInputs["elasticsearchAwsSecretAccessKey"] = state?.elasticsearchAwsSecretAccessKey;
            resourceInputs["elasticsearchIndexedFieldLengthLimit"] = state?.elasticsearchIndexedFieldLengthLimit;
            resourceInputs["elasticsearchIndexedFileSizeLimitKb"] = state?.elasticsearchIndexedFileSizeLimitKb;
            resourceInputs["elasticsearchIndexing"] = state?.elasticsearchIndexing;
            resourceInputs["elasticsearchLimitIndexing"] = state?.elasticsearchLimitIndexing;
            resourceInputs["elasticsearchMaxBulkConcurrency"] = state?.elasticsearchMaxBulkConcurrency;
            resourceInputs["elasticsearchMaxBulkSizeMb"] = state?.elasticsearchMaxBulkSizeMb;
            resourceInputs["elasticsearchMaxCodeIndexingConcurrency"] = state?.elasticsearchMaxCodeIndexingConcurrency;
            resourceInputs["elasticsearchNamespaceIds"] = state?.elasticsearchNamespaceIds;
            resourceInputs["elasticsearchPassword"] = state?.elasticsearchPassword;
            resourceInputs["elasticsearchProjectIds"] = state?.elasticsearchProjectIds;
            resourceInputs["elasticsearchRequeueWorkers"] = state?.elasticsearchRequeueWorkers;
            resourceInputs["elasticsearchSearch"] = state?.elasticsearchSearch;
            resourceInputs["elasticsearchUrls"] = state?.elasticsearchUrls;
            resourceInputs["elasticsearchUsername"] = state?.elasticsearchUsername;
            resourceInputs["elasticsearchWorkerNumberOfShards"] = state?.elasticsearchWorkerNumberOfShards;
            resourceInputs["emailAdditionalText"] = state?.emailAdditionalText;
            resourceInputs["emailAuthorInBody"] = state?.emailAuthorInBody;
            resourceInputs["emailConfirmationSetting"] = state?.emailConfirmationSetting;
            resourceInputs["enableArtifactExternalRedirectWarningPage"] = state?.enableArtifactExternalRedirectWarningPage;
            resourceInputs["enabledGitAccessProtocol"] = state?.enabledGitAccessProtocol;
            resourceInputs["enforceNamespaceStorageLimit"] = state?.enforceNamespaceStorageLimit;
            resourceInputs["enforceTerms"] = state?.enforceTerms;
            resourceInputs["externalAuthClientCert"] = state?.externalAuthClientCert;
            resourceInputs["externalAuthClientKey"] = state?.externalAuthClientKey;
            resourceInputs["externalAuthClientKeyPass"] = state?.externalAuthClientKeyPass;
            resourceInputs["externalAuthorizationServiceDefaultLabel"] = state?.externalAuthorizationServiceDefaultLabel;
            resourceInputs["externalAuthorizationServiceEnabled"] = state?.externalAuthorizationServiceEnabled;
            resourceInputs["externalAuthorizationServiceTimeout"] = state?.externalAuthorizationServiceTimeout;
            resourceInputs["externalAuthorizationServiceUrl"] = state?.externalAuthorizationServiceUrl;
            resourceInputs["externalPipelineValidationServiceTimeout"] = state?.externalPipelineValidationServiceTimeout;
            resourceInputs["externalPipelineValidationServiceToken"] = state?.externalPipelineValidationServiceToken;
            resourceInputs["externalPipelineValidationServiceUrl"] = state?.externalPipelineValidationServiceUrl;
            resourceInputs["failedLoginAttemptsUnlockPeriodInMinutes"] = state?.failedLoginAttemptsUnlockPeriodInMinutes;
            resourceInputs["fileTemplateProjectId"] = state?.fileTemplateProjectId;
            resourceInputs["firstDayOfWeek"] = state?.firstDayOfWeek;
            resourceInputs["geoNodeAllowedIps"] = state?.geoNodeAllowedIps;
            resourceInputs["geoStatusTimeout"] = state?.geoStatusTimeout;
            resourceInputs["gitRateLimitUsersAlertlists"] = state?.gitRateLimitUsersAlertlists;
            resourceInputs["gitRateLimitUsersAllowlists"] = state?.gitRateLimitUsersAllowlists;
            resourceInputs["gitTwoFactorSessionExpiry"] = state?.gitTwoFactorSessionExpiry;
            resourceInputs["gitalyTimeoutDefault"] = state?.gitalyTimeoutDefault;
            resourceInputs["gitalyTimeoutFast"] = state?.gitalyTimeoutFast;
            resourceInputs["gitalyTimeoutMedium"] = state?.gitalyTimeoutMedium;
            resourceInputs["gitlabDedicatedInstance"] = state?.gitlabDedicatedInstance;
            resourceInputs["gitlabEnvironmentToolkitInstance"] = state?.gitlabEnvironmentToolkitInstance;
            resourceInputs["gitlabShellOperationLimit"] = state?.gitlabShellOperationLimit;
            resourceInputs["gitpodEnabled"] = state?.gitpodEnabled;
            resourceInputs["gitpodUrl"] = state?.gitpodUrl;
            resourceInputs["globallyAllowedIps"] = state?.globallyAllowedIps;
            resourceInputs["grafanaEnabled"] = state?.grafanaEnabled;
            resourceInputs["grafanaUrl"] = state?.grafanaUrl;
            resourceInputs["gravatarEnabled"] = state?.gravatarEnabled;
            resourceInputs["groupOwnersCanManageDefaultBranchProtection"] = state?.groupOwnersCanManageDefaultBranchProtection;
            resourceInputs["helpPageHideCommercialContent"] = state?.helpPageHideCommercialContent;
            resourceInputs["helpPageSupportUrl"] = state?.helpPageSupportUrl;
            resourceInputs["helpPageText"] = state?.helpPageText;
            resourceInputs["helpText"] = state?.helpText;
            resourceInputs["hideThirdPartyOffers"] = state?.hideThirdPartyOffers;
            resourceInputs["homePageUrl"] = state?.homePageUrl;
            resourceInputs["housekeepingEnabled"] = state?.housekeepingEnabled;
            resourceInputs["housekeepingOptimizeRepositoryPeriod"] = state?.housekeepingOptimizeRepositoryPeriod;
            resourceInputs["htmlEmailsEnabled"] = state?.htmlEmailsEnabled;
            resourceInputs["importSources"] = state?.importSources;
            resourceInputs["inProductMarketingEmailsEnabled"] = state?.inProductMarketingEmailsEnabled;
            resourceInputs["inactiveProjectsDeleteAfterMonths"] = state?.inactiveProjectsDeleteAfterMonths;
            resourceInputs["inactiveProjectsMinSizeMb"] = state?.inactiveProjectsMinSizeMb;
            resourceInputs["inactiveProjectsSendWarningEmailAfterMonths"] = state?.inactiveProjectsSendWarningEmailAfterMonths;
            resourceInputs["includeOptionalMetricsInServicePing"] = state?.includeOptionalMetricsInServicePing;
            resourceInputs["invisibleCaptchaEnabled"] = state?.invisibleCaptchaEnabled;
            resourceInputs["issuesCreateLimit"] = state?.issuesCreateLimit;
            resourceInputs["jiraConnectApplicationKey"] = state?.jiraConnectApplicationKey;
            resourceInputs["jiraConnectProxyUrl"] = state?.jiraConnectProxyUrl;
            resourceInputs["jiraConnectPublicKeyStorageEnabled"] = state?.jiraConnectPublicKeyStorageEnabled;
            resourceInputs["keepLatestArtifact"] = state?.keepLatestArtifact;
            resourceInputs["localMarkdownVersion"] = state?.localMarkdownVersion;
            resourceInputs["lockDuoFeaturesEnabled"] = state?.lockDuoFeaturesEnabled;
            resourceInputs["lockMembershipsToLdap"] = state?.lockMembershipsToLdap;
            resourceInputs["mailgunEventsEnabled"] = state?.mailgunEventsEnabled;
            resourceInputs["mailgunSigningKey"] = state?.mailgunSigningKey;
            resourceInputs["maintenanceMode"] = state?.maintenanceMode;
            resourceInputs["maintenanceModeMessage"] = state?.maintenanceModeMessage;
            resourceInputs["mavenPackageRequestsForwarding"] = state?.mavenPackageRequestsForwarding;
            resourceInputs["maxArtifactsSize"] = state?.maxArtifactsSize;
            resourceInputs["maxAttachmentSize"] = state?.maxAttachmentSize;
            resourceInputs["maxDecompressedArchiveSize"] = state?.maxDecompressedArchiveSize;
            resourceInputs["maxExportSize"] = state?.maxExportSize;
            resourceInputs["maxImportRemoteFileSize"] = state?.maxImportRemoteFileSize;
            resourceInputs["maxImportSize"] = state?.maxImportSize;
            resourceInputs["maxLoginAttempts"] = state?.maxLoginAttempts;
            resourceInputs["maxNumberOfRepositoryDownloads"] = state?.maxNumberOfRepositoryDownloads;
            resourceInputs["maxNumberOfRepositoryDownloadsWithinTimePeriod"] = state?.maxNumberOfRepositoryDownloadsWithinTimePeriod;
            resourceInputs["maxPagesSize"] = state?.maxPagesSize;
            resourceInputs["maxPersonalAccessTokenLifetime"] = state?.maxPersonalAccessTokenLifetime;
            resourceInputs["maxSshKeyLifetime"] = state?.maxSshKeyLifetime;
            resourceInputs["maxTerraformStateSizeBytes"] = state?.maxTerraformStateSizeBytes;
            resourceInputs["metricsMethodCallThreshold"] = state?.metricsMethodCallThreshold;
            resourceInputs["minimumPasswordLength"] = state?.minimumPasswordLength;
            resourceInputs["mirrorAvailable"] = state?.mirrorAvailable;
            resourceInputs["mirrorCapacityThreshold"] = state?.mirrorCapacityThreshold;
            resourceInputs["mirrorMaxCapacity"] = state?.mirrorMaxCapacity;
            resourceInputs["mirrorMaxDelay"] = state?.mirrorMaxDelay;
            resourceInputs["npmPackageRequestsForwarding"] = state?.npmPackageRequestsForwarding;
            resourceInputs["nugetSkipMetadataUrlValidation"] = state?.nugetSkipMetadataUrlValidation;
            resourceInputs["outboundLocalRequestsWhitelists"] = state?.outboundLocalRequestsWhitelists;
            resourceInputs["packageMetadataPurlTypes"] = state?.packageMetadataPurlTypes;
            resourceInputs["packageRegistryAllowAnyoneToPullOption"] = state?.packageRegistryAllowAnyoneToPullOption;
            resourceInputs["packageRegistryCleanupPoliciesWorkerCapacity"] = state?.packageRegistryCleanupPoliciesWorkerCapacity;
            resourceInputs["pagesDomainVerificationEnabled"] = state?.pagesDomainVerificationEnabled;
            resourceInputs["passwordAuthenticationEnabledForGit"] = state?.passwordAuthenticationEnabledForGit;
            resourceInputs["passwordAuthenticationEnabledForWeb"] = state?.passwordAuthenticationEnabledForWeb;
            resourceInputs["passwordLowercaseRequired"] = state?.passwordLowercaseRequired;
            resourceInputs["passwordNumberRequired"] = state?.passwordNumberRequired;
            resourceInputs["passwordSymbolRequired"] = state?.passwordSymbolRequired;
            resourceInputs["passwordUppercaseRequired"] = state?.passwordUppercaseRequired;
            resourceInputs["performanceBarAllowedGroupPath"] = state?.performanceBarAllowedGroupPath;
            resourceInputs["personalAccessTokenPrefix"] = state?.personalAccessTokenPrefix;
            resourceInputs["pipelineLimitPerProjectUserSha"] = state?.pipelineLimitPerProjectUserSha;
            resourceInputs["plantumlEnabled"] = state?.plantumlEnabled;
            resourceInputs["plantumlUrl"] = state?.plantumlUrl;
            resourceInputs["pollingIntervalMultiplier"] = state?.pollingIntervalMultiplier;
            resourceInputs["projectExportEnabled"] = state?.projectExportEnabled;
            resourceInputs["projectJobsApiRateLimit"] = state?.projectJobsApiRateLimit;
            resourceInputs["projectsApiRateLimitUnauthenticated"] = state?.projectsApiRateLimitUnauthenticated;
            resourceInputs["prometheusMetricsEnabled"] = state?.prometheusMetricsEnabled;
            resourceInputs["protectedCiVariables"] = state?.protectedCiVariables;
            resourceInputs["pushEventActivitiesLimit"] = state?.pushEventActivitiesLimit;
            resourceInputs["pushEventHooksLimit"] = state?.pushEventHooksLimit;
            resourceInputs["pypiPackageRequestsForwarding"] = state?.pypiPackageRequestsForwarding;
            resourceInputs["rateLimitingResponseText"] = state?.rateLimitingResponseText;
            resourceInputs["rawBlobRequestLimit"] = state?.rawBlobRequestLimit;
            resourceInputs["recaptchaEnabled"] = state?.recaptchaEnabled;
            resourceInputs["recaptchaPrivateKey"] = state?.recaptchaPrivateKey;
            resourceInputs["recaptchaSiteKey"] = state?.recaptchaSiteKey;
            resourceInputs["receiveMaxInputSize"] = state?.receiveMaxInputSize;
            resourceInputs["receptiveClusterAgentsEnabled"] = state?.receptiveClusterAgentsEnabled;
            resourceInputs["rememberMeEnabled"] = state?.rememberMeEnabled;
            resourceInputs["repositoryChecksEnabled"] = state?.repositoryChecksEnabled;
            resourceInputs["repositorySizeLimit"] = state?.repositorySizeLimit;
            resourceInputs["repositoryStoragesWeighted"] = state?.repositoryStoragesWeighted;
            resourceInputs["requireAdminApprovalAfterUserSignup"] = state?.requireAdminApprovalAfterUserSignup;
            resourceInputs["requireAdminTwoFactorAuthentication"] = state?.requireAdminTwoFactorAuthentication;
            resourceInputs["requirePersonalAccessTokenExpiry"] = state?.requirePersonalAccessTokenExpiry;
            resourceInputs["requireTwoFactorAuthentication"] = state?.requireTwoFactorAuthentication;
            resourceInputs["restrictedVisibilityLevels"] = state?.restrictedVisibilityLevels;
            resourceInputs["rsaKeyRestriction"] = state?.rsaKeyRestriction;
            resourceInputs["searchRateLimit"] = state?.searchRateLimit;
            resourceInputs["searchRateLimitUnauthenticated"] = state?.searchRateLimitUnauthenticated;
            resourceInputs["securityApprovalPoliciesLimit"] = state?.securityApprovalPoliciesLimit;
            resourceInputs["securityPolicyGlobalGroupApproversEnabled"] = state?.securityPolicyGlobalGroupApproversEnabled;
            resourceInputs["securityTxtContent"] = state?.securityTxtContent;
            resourceInputs["sendUserConfirmationEmail"] = state?.sendUserConfirmationEmail;
            resourceInputs["serviceAccessTokensExpirationEnforced"] = state?.serviceAccessTokensExpirationEnforced;
            resourceInputs["sessionExpireDelay"] = state?.sessionExpireDelay;
            resourceInputs["sharedRunnersEnabled"] = state?.sharedRunnersEnabled;
            resourceInputs["sharedRunnersMinutes"] = state?.sharedRunnersMinutes;
            resourceInputs["sharedRunnersText"] = state?.sharedRunnersText;
            resourceInputs["sidekiqJobLimiterCompressionThresholdBytes"] = state?.sidekiqJobLimiterCompressionThresholdBytes;
            resourceInputs["sidekiqJobLimiterLimitBytes"] = state?.sidekiqJobLimiterLimitBytes;
            resourceInputs["sidekiqJobLimiterMode"] = state?.sidekiqJobLimiterMode;
            resourceInputs["signInText"] = state?.signInText;
            resourceInputs["signupEnabled"] = state?.signupEnabled;
            resourceInputs["silentAdminExportsEnabled"] = state?.silentAdminExportsEnabled;
            resourceInputs["silentModeEnabled"] = state?.silentModeEnabled;
            resourceInputs["slackAppEnabled"] = state?.slackAppEnabled;
            resourceInputs["slackAppId"] = state?.slackAppId;
            resourceInputs["slackAppSecret"] = state?.slackAppSecret;
            resourceInputs["slackAppSigningSecret"] = state?.slackAppSigningSecret;
            resourceInputs["slackAppVerificationToken"] = state?.slackAppVerificationToken;
            resourceInputs["snippetSizeLimit"] = state?.snippetSizeLimit;
            resourceInputs["snowplowAppId"] = state?.snowplowAppId;
            resourceInputs["snowplowCollectorHostname"] = state?.snowplowCollectorHostname;
            resourceInputs["snowplowCookieDomain"] = state?.snowplowCookieDomain;
            resourceInputs["snowplowDatabaseCollectorHostname"] = state?.snowplowDatabaseCollectorHostname;
            resourceInputs["snowplowEnabled"] = state?.snowplowEnabled;
            resourceInputs["sourcegraphEnabled"] = state?.sourcegraphEnabled;
            resourceInputs["sourcegraphPublicOnly"] = state?.sourcegraphPublicOnly;
            resourceInputs["sourcegraphUrl"] = state?.sourcegraphUrl;
            resourceInputs["spamCheckApiKey"] = state?.spamCheckApiKey;
            resourceInputs["spamCheckEndpointEnabled"] = state?.spamCheckEndpointEnabled;
            resourceInputs["spamCheckEndpointUrl"] = state?.spamCheckEndpointUrl;
            resourceInputs["staticObjectsExternalStorageAuthToken"] = state?.staticObjectsExternalStorageAuthToken;
            resourceInputs["staticObjectsExternalStorageUrl"] = state?.staticObjectsExternalStorageUrl;
            resourceInputs["suggestPipelineEnabled"] = state?.suggestPipelineEnabled;
            resourceInputs["terminalMaxSessionTime"] = state?.terminalMaxSessionTime;
            resourceInputs["terms"] = state?.terms;
            resourceInputs["throttleAuthenticatedApiEnabled"] = state?.throttleAuthenticatedApiEnabled;
            resourceInputs["throttleAuthenticatedApiPeriodInSeconds"] = state?.throttleAuthenticatedApiPeriodInSeconds;
            resourceInputs["throttleAuthenticatedApiRequestsPerPeriod"] = state?.throttleAuthenticatedApiRequestsPerPeriod;
            resourceInputs["throttleAuthenticatedPackagesApiEnabled"] = state?.throttleAuthenticatedPackagesApiEnabled;
            resourceInputs["throttleAuthenticatedPackagesApiPeriodInSeconds"] = state?.throttleAuthenticatedPackagesApiPeriodInSeconds;
            resourceInputs["throttleAuthenticatedPackagesApiRequestsPerPeriod"] = state?.throttleAuthenticatedPackagesApiRequestsPerPeriod;
            resourceInputs["throttleAuthenticatedWebEnabled"] = state?.throttleAuthenticatedWebEnabled;
            resourceInputs["throttleAuthenticatedWebPeriodInSeconds"] = state?.throttleAuthenticatedWebPeriodInSeconds;
            resourceInputs["throttleAuthenticatedWebRequestsPerPeriod"] = state?.throttleAuthenticatedWebRequestsPerPeriod;
            resourceInputs["throttleUnauthenticatedApiEnabled"] = state?.throttleUnauthenticatedApiEnabled;
            resourceInputs["throttleUnauthenticatedApiPeriodInSeconds"] = state?.throttleUnauthenticatedApiPeriodInSeconds;
            resourceInputs["throttleUnauthenticatedApiRequestsPerPeriod"] = state?.throttleUnauthenticatedApiRequestsPerPeriod;
            resourceInputs["throttleUnauthenticatedPackagesApiEnabled"] = state?.throttleUnauthenticatedPackagesApiEnabled;
            resourceInputs["throttleUnauthenticatedPackagesApiPeriodInSeconds"] = state?.throttleUnauthenticatedPackagesApiPeriodInSeconds;
            resourceInputs["throttleUnauthenticatedPackagesApiRequestsPerPeriod"] = state?.throttleUnauthenticatedPackagesApiRequestsPerPeriod;
            resourceInputs["throttleUnauthenticatedWebEnabled"] = state?.throttleUnauthenticatedWebEnabled;
            resourceInputs["throttleUnauthenticatedWebPeriodInSeconds"] = state?.throttleUnauthenticatedWebPeriodInSeconds;
            resourceInputs["throttleUnauthenticatedWebRequestsPerPeriod"] = state?.throttleUnauthenticatedWebRequestsPerPeriod;
            resourceInputs["timeTrackingLimitToHours"] = state?.timeTrackingLimitToHours;
            resourceInputs["twoFactorGracePeriod"] = state?.twoFactorGracePeriod;
            resourceInputs["unconfirmedUsersDeleteAfterDays"] = state?.unconfirmedUsersDeleteAfterDays;
            resourceInputs["uniqueIpsLimitEnabled"] = state?.uniqueIpsLimitEnabled;
            resourceInputs["uniqueIpsLimitPerUser"] = state?.uniqueIpsLimitPerUser;
            resourceInputs["uniqueIpsLimitTimeWindow"] = state?.uniqueIpsLimitTimeWindow;
            resourceInputs["updateRunnerVersionsEnabled"] = state?.updateRunnerVersionsEnabled;
            resourceInputs["usagePingEnabled"] = state?.usagePingEnabled;
            resourceInputs["useClickhouseForAnalytics"] = state?.useClickhouseForAnalytics;
            resourceInputs["userDeactivationEmailsEnabled"] = state?.userDeactivationEmailsEnabled;
            resourceInputs["userDefaultExternal"] = state?.userDefaultExternal;
            resourceInputs["userDefaultInternalRegex"] = state?.userDefaultInternalRegex;
            resourceInputs["userDefaultsToPrivateProfile"] = state?.userDefaultsToPrivateProfile;
            resourceInputs["userOauthApplications"] = state?.userOauthApplications;
            resourceInputs["userShowAddSshKeyMessage"] = state?.userShowAddSshKeyMessage;
            resourceInputs["validRunnerRegistrars"] = state?.validRunnerRegistrars;
            resourceInputs["versionCheckEnabled"] = state?.versionCheckEnabled;
            resourceInputs["webIdeClientsidePreviewEnabled"] = state?.webIdeClientsidePreviewEnabled;
            resourceInputs["whatsNewVariant"] = state?.whatsNewVariant;
            resourceInputs["wikiPageMaxContentBytes"] = state?.wikiPageMaxContentBytes;
        } else {
            const args = argsOrState as ApplicationSettingsArgs | undefined;
            resourceInputs["abuseNotificationEmail"] = args?.abuseNotificationEmail;
            resourceInputs["adminMode"] = args?.adminMode;
            resourceInputs["afterSignOutPath"] = args?.afterSignOutPath;
            resourceInputs["afterSignUpText"] = args?.afterSignUpText;
            resourceInputs["akismetApiKey"] = args?.akismetApiKey ? pulumi.secret(args.akismetApiKey) : undefined;
            resourceInputs["akismetEnabled"] = args?.akismetEnabled;
            resourceInputs["allowAccountDeletion"] = args?.allowAccountDeletion;
            resourceInputs["allowGroupOwnersToManageLdap"] = args?.allowGroupOwnersToManageLdap;
            resourceInputs["allowLocalRequestsFromSystemHooks"] = args?.allowLocalRequestsFromSystemHooks;
            resourceInputs["allowLocalRequestsFromWebHooksAndServices"] = args?.allowLocalRequestsFromWebHooksAndServices;
            resourceInputs["allowProjectCreationForGuestAndBelow"] = args?.allowProjectCreationForGuestAndBelow;
            resourceInputs["allowRunnerRegistrationToken"] = args?.allowRunnerRegistrationToken;
            resourceInputs["archiveBuildsInHumanReadable"] = args?.archiveBuildsInHumanReadable;
            resourceInputs["asciidocMaxIncludes"] = args?.asciidocMaxIncludes;
            resourceInputs["assetProxyAllowlists"] = args?.assetProxyAllowlists;
            resourceInputs["assetProxyEnabled"] = args?.assetProxyEnabled;
            resourceInputs["assetProxySecretKey"] = args?.assetProxySecretKey ? pulumi.secret(args.assetProxySecretKey) : undefined;
            resourceInputs["assetProxyUrl"] = args?.assetProxyUrl;
            resourceInputs["authorizedKeysEnabled"] = args?.authorizedKeysEnabled;
            resourceInputs["autoBanUserOnExcessiveProjectsDownload"] = args?.autoBanUserOnExcessiveProjectsDownload;
            resourceInputs["autoDevopsDomain"] = args?.autoDevopsDomain;
            resourceInputs["autoDevopsEnabled"] = args?.autoDevopsEnabled;
            resourceInputs["automaticPurchasedStorageAllocation"] = args?.automaticPurchasedStorageAllocation;
            resourceInputs["bulkImportConcurrentPipelineBatchLimit"] = args?.bulkImportConcurrentPipelineBatchLimit;
            resourceInputs["bulkImportEnabled"] = args?.bulkImportEnabled;
            resourceInputs["bulkImportMaxDownloadFileSize"] = args?.bulkImportMaxDownloadFileSize;
            resourceInputs["canCreateGroup"] = args?.canCreateGroup;
            resourceInputs["checkNamespacePlan"] = args?.checkNamespacePlan;
            resourceInputs["ciMaxIncludes"] = args?.ciMaxIncludes;
            resourceInputs["ciMaxTotalYamlSizeBytes"] = args?.ciMaxTotalYamlSizeBytes;
            resourceInputs["commitEmailHostname"] = args?.commitEmailHostname;
            resourceInputs["concurrentBitbucketImportJobsLimit"] = args?.concurrentBitbucketImportJobsLimit;
            resourceInputs["concurrentBitbucketServerImportJobsLimit"] = args?.concurrentBitbucketServerImportJobsLimit;
            resourceInputs["concurrentGithubImportJobsLimit"] = args?.concurrentGithubImportJobsLimit;
            resourceInputs["containerExpirationPoliciesEnableHistoricEntries"] = args?.containerExpirationPoliciesEnableHistoricEntries;
            resourceInputs["containerRegistryCleanupTagsServiceMaxListSize"] = args?.containerRegistryCleanupTagsServiceMaxListSize;
            resourceInputs["containerRegistryDeleteTagsServiceTimeout"] = args?.containerRegistryDeleteTagsServiceTimeout;
            resourceInputs["containerRegistryExpirationPoliciesCaching"] = args?.containerRegistryExpirationPoliciesCaching;
            resourceInputs["containerRegistryExpirationPoliciesWorkerCapacity"] = args?.containerRegistryExpirationPoliciesWorkerCapacity;
            resourceInputs["containerRegistryTokenExpireDelay"] = args?.containerRegistryTokenExpireDelay;
            resourceInputs["deactivateDormantUsers"] = args?.deactivateDormantUsers;
            resourceInputs["deactivateDormantUsersPeriod"] = args?.deactivateDormantUsersPeriod;
            resourceInputs["decompressArchiveFileTimeout"] = args?.decompressArchiveFileTimeout;
            resourceInputs["defaultArtifactsExpireIn"] = args?.defaultArtifactsExpireIn;
            resourceInputs["defaultBranchName"] = args?.defaultBranchName;
            resourceInputs["defaultBranchProtection"] = args?.defaultBranchProtection;
            resourceInputs["defaultBranchProtectionDefaults"] = args?.defaultBranchProtectionDefaults;
            resourceInputs["defaultCiConfigPath"] = args?.defaultCiConfigPath;
            resourceInputs["defaultGroupVisibility"] = args?.defaultGroupVisibility;
            resourceInputs["defaultPreferredLanguage"] = args?.defaultPreferredLanguage;
            resourceInputs["defaultProjectCreation"] = args?.defaultProjectCreation;
            resourceInputs["defaultProjectVisibility"] = args?.defaultProjectVisibility;
            resourceInputs["defaultProjectsLimit"] = args?.defaultProjectsLimit;
            resourceInputs["defaultSnippetVisibility"] = args?.defaultSnippetVisibility;
            resourceInputs["defaultSyntaxHighlightingTheme"] = args?.defaultSyntaxHighlightingTheme;
            resourceInputs["deleteInactiveProjects"] = args?.deleteInactiveProjects;
            resourceInputs["deleteUnconfirmedUsers"] = args?.deleteUnconfirmedUsers;
            resourceInputs["deletionAdjournedPeriod"] = args?.deletionAdjournedPeriod;
            resourceInputs["diagramsnetEnabled"] = args?.diagramsnetEnabled;
            resourceInputs["diagramsnetUrl"] = args?.diagramsnetUrl;
            resourceInputs["diffMaxFiles"] = args?.diffMaxFiles;
            resourceInputs["diffMaxLines"] = args?.diffMaxLines;
            resourceInputs["diffMaxPatchBytes"] = args?.diffMaxPatchBytes;
            resourceInputs["disableAdminOauthScopes"] = args?.disableAdminOauthScopes;
            resourceInputs["disableFeedToken"] = args?.disableFeedToken;
            resourceInputs["disablePersonalAccessTokens"] = args?.disablePersonalAccessTokens;
            resourceInputs["disabledOauthSignInSources"] = args?.disabledOauthSignInSources;
            resourceInputs["dnsRebindingProtectionEnabled"] = args?.dnsRebindingProtectionEnabled;
            resourceInputs["domainAllowlists"] = args?.domainAllowlists;
            resourceInputs["domainDenylistEnabled"] = args?.domainDenylistEnabled;
            resourceInputs["domainDenylists"] = args?.domainDenylists;
            resourceInputs["downstreamPipelineTriggerLimitPerProjectUserSha"] = args?.downstreamPipelineTriggerLimitPerProjectUserSha;
            resourceInputs["dsaKeyRestriction"] = args?.dsaKeyRestriction;
            resourceInputs["duoFeaturesEnabled"] = args?.duoFeaturesEnabled;
            resourceInputs["ecdsaKeyRestriction"] = args?.ecdsaKeyRestriction;
            resourceInputs["ecdsaSkKeyRestriction"] = args?.ecdsaSkKeyRestriction;
            resourceInputs["ed25519KeyRestriction"] = args?.ed25519KeyRestriction;
            resourceInputs["ed25519SkKeyRestriction"] = args?.ed25519SkKeyRestriction;
            resourceInputs["eksAccessKeyId"] = args?.eksAccessKeyId ? pulumi.secret(args.eksAccessKeyId) : undefined;
            resourceInputs["eksAccountId"] = args?.eksAccountId;
            resourceInputs["eksIntegrationEnabled"] = args?.eksIntegrationEnabled;
            resourceInputs["eksSecretAccessKey"] = args?.eksSecretAccessKey ? pulumi.secret(args.eksSecretAccessKey) : undefined;
            resourceInputs["elasticsearchAws"] = args?.elasticsearchAws;
            resourceInputs["elasticsearchAwsAccessKey"] = args?.elasticsearchAwsAccessKey ? pulumi.secret(args.elasticsearchAwsAccessKey) : undefined;
            resourceInputs["elasticsearchAwsRegion"] = args?.elasticsearchAwsRegion;
            resourceInputs["elasticsearchAwsSecretAccessKey"] = args?.elasticsearchAwsSecretAccessKey ? pulumi.secret(args.elasticsearchAwsSecretAccessKey) : undefined;
            resourceInputs["elasticsearchIndexedFieldLengthLimit"] = args?.elasticsearchIndexedFieldLengthLimit;
            resourceInputs["elasticsearchIndexedFileSizeLimitKb"] = args?.elasticsearchIndexedFileSizeLimitKb;
            resourceInputs["elasticsearchIndexing"] = args?.elasticsearchIndexing;
            resourceInputs["elasticsearchLimitIndexing"] = args?.elasticsearchLimitIndexing;
            resourceInputs["elasticsearchMaxBulkConcurrency"] = args?.elasticsearchMaxBulkConcurrency;
            resourceInputs["elasticsearchMaxBulkSizeMb"] = args?.elasticsearchMaxBulkSizeMb;
            resourceInputs["elasticsearchMaxCodeIndexingConcurrency"] = args?.elasticsearchMaxCodeIndexingConcurrency;
            resourceInputs["elasticsearchNamespaceIds"] = args?.elasticsearchNamespaceIds;
            resourceInputs["elasticsearchPassword"] = args?.elasticsearchPassword ? pulumi.secret(args.elasticsearchPassword) : undefined;
            resourceInputs["elasticsearchProjectIds"] = args?.elasticsearchProjectIds;
            resourceInputs["elasticsearchRequeueWorkers"] = args?.elasticsearchRequeueWorkers;
            resourceInputs["elasticsearchSearch"] = args?.elasticsearchSearch;
            resourceInputs["elasticsearchUrls"] = args?.elasticsearchUrls;
            resourceInputs["elasticsearchUsername"] = args?.elasticsearchUsername;
            resourceInputs["elasticsearchWorkerNumberOfShards"] = args?.elasticsearchWorkerNumberOfShards;
            resourceInputs["emailAdditionalText"] = args?.emailAdditionalText;
            resourceInputs["emailAuthorInBody"] = args?.emailAuthorInBody;
            resourceInputs["emailConfirmationSetting"] = args?.emailConfirmationSetting;
            resourceInputs["enableArtifactExternalRedirectWarningPage"] = args?.enableArtifactExternalRedirectWarningPage;
            resourceInputs["enabledGitAccessProtocol"] = args?.enabledGitAccessProtocol;
            resourceInputs["enforceNamespaceStorageLimit"] = args?.enforceNamespaceStorageLimit;
            resourceInputs["enforceTerms"] = args?.enforceTerms;
            resourceInputs["externalAuthClientCert"] = args?.externalAuthClientCert;
            resourceInputs["externalAuthClientKey"] = args?.externalAuthClientKey ? pulumi.secret(args.externalAuthClientKey) : undefined;
            resourceInputs["externalAuthClientKeyPass"] = args?.externalAuthClientKeyPass ? pulumi.secret(args.externalAuthClientKeyPass) : undefined;
            resourceInputs["externalAuthorizationServiceDefaultLabel"] = args?.externalAuthorizationServiceDefaultLabel;
            resourceInputs["externalAuthorizationServiceEnabled"] = args?.externalAuthorizationServiceEnabled;
            resourceInputs["externalAuthorizationServiceTimeout"] = args?.externalAuthorizationServiceTimeout;
            resourceInputs["externalAuthorizationServiceUrl"] = args?.externalAuthorizationServiceUrl;
            resourceInputs["externalPipelineValidationServiceTimeout"] = args?.externalPipelineValidationServiceTimeout;
            resourceInputs["externalPipelineValidationServiceToken"] = args?.externalPipelineValidationServiceToken;
            resourceInputs["externalPipelineValidationServiceUrl"] = args?.externalPipelineValidationServiceUrl;
            resourceInputs["failedLoginAttemptsUnlockPeriodInMinutes"] = args?.failedLoginAttemptsUnlockPeriodInMinutes;
            resourceInputs["fileTemplateProjectId"] = args?.fileTemplateProjectId;
            resourceInputs["firstDayOfWeek"] = args?.firstDayOfWeek;
            resourceInputs["geoNodeAllowedIps"] = args?.geoNodeAllowedIps;
            resourceInputs["geoStatusTimeout"] = args?.geoStatusTimeout;
            resourceInputs["gitRateLimitUsersAlertlists"] = args?.gitRateLimitUsersAlertlists;
            resourceInputs["gitRateLimitUsersAllowlists"] = args?.gitRateLimitUsersAllowlists;
            resourceInputs["gitTwoFactorSessionExpiry"] = args?.gitTwoFactorSessionExpiry;
            resourceInputs["gitalyTimeoutDefault"] = args?.gitalyTimeoutDefault;
            resourceInputs["gitalyTimeoutFast"] = args?.gitalyTimeoutFast;
            resourceInputs["gitalyTimeoutMedium"] = args?.gitalyTimeoutMedium;
            resourceInputs["gitlabShellOperationLimit"] = args?.gitlabShellOperationLimit;
            resourceInputs["gitpodEnabled"] = args?.gitpodEnabled;
            resourceInputs["gitpodUrl"] = args?.gitpodUrl;
            resourceInputs["globallyAllowedIps"] = args?.globallyAllowedIps;
            resourceInputs["grafanaEnabled"] = args?.grafanaEnabled;
            resourceInputs["grafanaUrl"] = args?.grafanaUrl;
            resourceInputs["gravatarEnabled"] = args?.gravatarEnabled;
            resourceInputs["groupOwnersCanManageDefaultBranchProtection"] = args?.groupOwnersCanManageDefaultBranchProtection;
            resourceInputs["helpPageHideCommercialContent"] = args?.helpPageHideCommercialContent;
            resourceInputs["helpPageSupportUrl"] = args?.helpPageSupportUrl;
            resourceInputs["helpPageText"] = args?.helpPageText;
            resourceInputs["helpText"] = args?.helpText;
            resourceInputs["hideThirdPartyOffers"] = args?.hideThirdPartyOffers;
            resourceInputs["homePageUrl"] = args?.homePageUrl;
            resourceInputs["housekeepingEnabled"] = args?.housekeepingEnabled;
            resourceInputs["housekeepingOptimizeRepositoryPeriod"] = args?.housekeepingOptimizeRepositoryPeriod;
            resourceInputs["htmlEmailsEnabled"] = args?.htmlEmailsEnabled;
            resourceInputs["importSources"] = args?.importSources;
            resourceInputs["inProductMarketingEmailsEnabled"] = args?.inProductMarketingEmailsEnabled;
            resourceInputs["inactiveProjectsDeleteAfterMonths"] = args?.inactiveProjectsDeleteAfterMonths;
            resourceInputs["inactiveProjectsMinSizeMb"] = args?.inactiveProjectsMinSizeMb;
            resourceInputs["inactiveProjectsSendWarningEmailAfterMonths"] = args?.inactiveProjectsSendWarningEmailAfterMonths;
            resourceInputs["includeOptionalMetricsInServicePing"] = args?.includeOptionalMetricsInServicePing;
            resourceInputs["invisibleCaptchaEnabled"] = args?.invisibleCaptchaEnabled;
            resourceInputs["issuesCreateLimit"] = args?.issuesCreateLimit;
            resourceInputs["jiraConnectApplicationKey"] = args?.jiraConnectApplicationKey;
            resourceInputs["jiraConnectProxyUrl"] = args?.jiraConnectProxyUrl;
            resourceInputs["jiraConnectPublicKeyStorageEnabled"] = args?.jiraConnectPublicKeyStorageEnabled;
            resourceInputs["keepLatestArtifact"] = args?.keepLatestArtifact;
            resourceInputs["localMarkdownVersion"] = args?.localMarkdownVersion;
            resourceInputs["lockDuoFeaturesEnabled"] = args?.lockDuoFeaturesEnabled;
            resourceInputs["lockMembershipsToLdap"] = args?.lockMembershipsToLdap;
            resourceInputs["mailgunEventsEnabled"] = args?.mailgunEventsEnabled;
            resourceInputs["mailgunSigningKey"] = args?.mailgunSigningKey ? pulumi.secret(args.mailgunSigningKey) : undefined;
            resourceInputs["maintenanceMode"] = args?.maintenanceMode;
            resourceInputs["maintenanceModeMessage"] = args?.maintenanceModeMessage;
            resourceInputs["mavenPackageRequestsForwarding"] = args?.mavenPackageRequestsForwarding;
            resourceInputs["maxArtifactsSize"] = args?.maxArtifactsSize;
            resourceInputs["maxAttachmentSize"] = args?.maxAttachmentSize;
            resourceInputs["maxDecompressedArchiveSize"] = args?.maxDecompressedArchiveSize;
            resourceInputs["maxExportSize"] = args?.maxExportSize;
            resourceInputs["maxImportRemoteFileSize"] = args?.maxImportRemoteFileSize;
            resourceInputs["maxImportSize"] = args?.maxImportSize;
            resourceInputs["maxLoginAttempts"] = args?.maxLoginAttempts;
            resourceInputs["maxNumberOfRepositoryDownloads"] = args?.maxNumberOfRepositoryDownloads;
            resourceInputs["maxNumberOfRepositoryDownloadsWithinTimePeriod"] = args?.maxNumberOfRepositoryDownloadsWithinTimePeriod;
            resourceInputs["maxPagesSize"] = args?.maxPagesSize;
            resourceInputs["maxPersonalAccessTokenLifetime"] = args?.maxPersonalAccessTokenLifetime;
            resourceInputs["maxSshKeyLifetime"] = args?.maxSshKeyLifetime;
            resourceInputs["maxTerraformStateSizeBytes"] = args?.maxTerraformStateSizeBytes;
            resourceInputs["metricsMethodCallThreshold"] = args?.metricsMethodCallThreshold;
            resourceInputs["minimumPasswordLength"] = args?.minimumPasswordLength;
            resourceInputs["mirrorAvailable"] = args?.mirrorAvailable;
            resourceInputs["mirrorCapacityThreshold"] = args?.mirrorCapacityThreshold;
            resourceInputs["mirrorMaxCapacity"] = args?.mirrorMaxCapacity;
            resourceInputs["mirrorMaxDelay"] = args?.mirrorMaxDelay;
            resourceInputs["npmPackageRequestsForwarding"] = args?.npmPackageRequestsForwarding;
            resourceInputs["nugetSkipMetadataUrlValidation"] = args?.nugetSkipMetadataUrlValidation;
            resourceInputs["outboundLocalRequestsWhitelists"] = args?.outboundLocalRequestsWhitelists;
            resourceInputs["packageMetadataPurlTypes"] = args?.packageMetadataPurlTypes;
            resourceInputs["packageRegistryAllowAnyoneToPullOption"] = args?.packageRegistryAllowAnyoneToPullOption;
            resourceInputs["packageRegistryCleanupPoliciesWorkerCapacity"] = args?.packageRegistryCleanupPoliciesWorkerCapacity;
            resourceInputs["pagesDomainVerificationEnabled"] = args?.pagesDomainVerificationEnabled;
            resourceInputs["passwordAuthenticationEnabledForGit"] = args?.passwordAuthenticationEnabledForGit;
            resourceInputs["passwordAuthenticationEnabledForWeb"] = args?.passwordAuthenticationEnabledForWeb;
            resourceInputs["passwordLowercaseRequired"] = args?.passwordLowercaseRequired;
            resourceInputs["passwordNumberRequired"] = args?.passwordNumberRequired;
            resourceInputs["passwordSymbolRequired"] = args?.passwordSymbolRequired;
            resourceInputs["passwordUppercaseRequired"] = args?.passwordUppercaseRequired;
            resourceInputs["performanceBarAllowedGroupPath"] = args?.performanceBarAllowedGroupPath;
            resourceInputs["personalAccessTokenPrefix"] = args?.personalAccessTokenPrefix;
            resourceInputs["pipelineLimitPerProjectUserSha"] = args?.pipelineLimitPerProjectUserSha;
            resourceInputs["plantumlEnabled"] = args?.plantumlEnabled;
            resourceInputs["plantumlUrl"] = args?.plantumlUrl;
            resourceInputs["pollingIntervalMultiplier"] = args?.pollingIntervalMultiplier;
            resourceInputs["projectExportEnabled"] = args?.projectExportEnabled;
            resourceInputs["projectJobsApiRateLimit"] = args?.projectJobsApiRateLimit;
            resourceInputs["projectsApiRateLimitUnauthenticated"] = args?.projectsApiRateLimitUnauthenticated;
            resourceInputs["prometheusMetricsEnabled"] = args?.prometheusMetricsEnabled;
            resourceInputs["protectedCiVariables"] = args?.protectedCiVariables;
            resourceInputs["pushEventActivitiesLimit"] = args?.pushEventActivitiesLimit;
            resourceInputs["pushEventHooksLimit"] = args?.pushEventHooksLimit;
            resourceInputs["pypiPackageRequestsForwarding"] = args?.pypiPackageRequestsForwarding;
            resourceInputs["rateLimitingResponseText"] = args?.rateLimitingResponseText;
            resourceInputs["rawBlobRequestLimit"] = args?.rawBlobRequestLimit;
            resourceInputs["recaptchaEnabled"] = args?.recaptchaEnabled;
            resourceInputs["recaptchaPrivateKey"] = args?.recaptchaPrivateKey ? pulumi.secret(args.recaptchaPrivateKey) : undefined;
            resourceInputs["recaptchaSiteKey"] = args?.recaptchaSiteKey ? pulumi.secret(args.recaptchaSiteKey) : undefined;
            resourceInputs["receiveMaxInputSize"] = args?.receiveMaxInputSize;
            resourceInputs["receptiveClusterAgentsEnabled"] = args?.receptiveClusterAgentsEnabled;
            resourceInputs["rememberMeEnabled"] = args?.rememberMeEnabled;
            resourceInputs["repositoryChecksEnabled"] = args?.repositoryChecksEnabled;
            resourceInputs["repositorySizeLimit"] = args?.repositorySizeLimit;
            resourceInputs["repositoryStoragesWeighted"] = args?.repositoryStoragesWeighted;
            resourceInputs["requireAdminApprovalAfterUserSignup"] = args?.requireAdminApprovalAfterUserSignup;
            resourceInputs["requireAdminTwoFactorAuthentication"] = args?.requireAdminTwoFactorAuthentication;
            resourceInputs["requirePersonalAccessTokenExpiry"] = args?.requirePersonalAccessTokenExpiry;
            resourceInputs["requireTwoFactorAuthentication"] = args?.requireTwoFactorAuthentication;
            resourceInputs["restrictedVisibilityLevels"] = args?.restrictedVisibilityLevels;
            resourceInputs["rsaKeyRestriction"] = args?.rsaKeyRestriction;
            resourceInputs["searchRateLimit"] = args?.searchRateLimit;
            resourceInputs["searchRateLimitUnauthenticated"] = args?.searchRateLimitUnauthenticated;
            resourceInputs["securityApprovalPoliciesLimit"] = args?.securityApprovalPoliciesLimit;
            resourceInputs["securityPolicyGlobalGroupApproversEnabled"] = args?.securityPolicyGlobalGroupApproversEnabled;
            resourceInputs["securityTxtContent"] = args?.securityTxtContent;
            resourceInputs["sendUserConfirmationEmail"] = args?.sendUserConfirmationEmail;
            resourceInputs["serviceAccessTokensExpirationEnforced"] = args?.serviceAccessTokensExpirationEnforced;
            resourceInputs["sessionExpireDelay"] = args?.sessionExpireDelay;
            resourceInputs["sharedRunnersEnabled"] = args?.sharedRunnersEnabled;
            resourceInputs["sharedRunnersMinutes"] = args?.sharedRunnersMinutes;
            resourceInputs["sharedRunnersText"] = args?.sharedRunnersText;
            resourceInputs["sidekiqJobLimiterCompressionThresholdBytes"] = args?.sidekiqJobLimiterCompressionThresholdBytes;
            resourceInputs["sidekiqJobLimiterLimitBytes"] = args?.sidekiqJobLimiterLimitBytes;
            resourceInputs["sidekiqJobLimiterMode"] = args?.sidekiqJobLimiterMode;
            resourceInputs["signInText"] = args?.signInText;
            resourceInputs["signupEnabled"] = args?.signupEnabled;
            resourceInputs["silentAdminExportsEnabled"] = args?.silentAdminExportsEnabled;
            resourceInputs["silentModeEnabled"] = args?.silentModeEnabled;
            resourceInputs["slackAppEnabled"] = args?.slackAppEnabled;
            resourceInputs["slackAppId"] = args?.slackAppId;
            resourceInputs["slackAppSecret"] = args?.slackAppSecret ? pulumi.secret(args.slackAppSecret) : undefined;
            resourceInputs["slackAppSigningSecret"] = args?.slackAppSigningSecret ? pulumi.secret(args.slackAppSigningSecret) : undefined;
            resourceInputs["slackAppVerificationToken"] = args?.slackAppVerificationToken;
            resourceInputs["snippetSizeLimit"] = args?.snippetSizeLimit;
            resourceInputs["snowplowAppId"] = args?.snowplowAppId;
            resourceInputs["snowplowCollectorHostname"] = args?.snowplowCollectorHostname;
            resourceInputs["snowplowCookieDomain"] = args?.snowplowCookieDomain;
            resourceInputs["snowplowDatabaseCollectorHostname"] = args?.snowplowDatabaseCollectorHostname;
            resourceInputs["snowplowEnabled"] = args?.snowplowEnabled;
            resourceInputs["sourcegraphEnabled"] = args?.sourcegraphEnabled;
            resourceInputs["sourcegraphPublicOnly"] = args?.sourcegraphPublicOnly;
            resourceInputs["sourcegraphUrl"] = args?.sourcegraphUrl;
            resourceInputs["spamCheckApiKey"] = args?.spamCheckApiKey ? pulumi.secret(args.spamCheckApiKey) : undefined;
            resourceInputs["spamCheckEndpointEnabled"] = args?.spamCheckEndpointEnabled;
            resourceInputs["spamCheckEndpointUrl"] = args?.spamCheckEndpointUrl;
            resourceInputs["staticObjectsExternalStorageAuthToken"] = args?.staticObjectsExternalStorageAuthToken ? pulumi.secret(args.staticObjectsExternalStorageAuthToken) : undefined;
            resourceInputs["staticObjectsExternalStorageUrl"] = args?.staticObjectsExternalStorageUrl ? pulumi.secret(args.staticObjectsExternalStorageUrl) : undefined;
            resourceInputs["suggestPipelineEnabled"] = args?.suggestPipelineEnabled;
            resourceInputs["terminalMaxSessionTime"] = args?.terminalMaxSessionTime;
            resourceInputs["terms"] = args?.terms;
            resourceInputs["throttleAuthenticatedApiEnabled"] = args?.throttleAuthenticatedApiEnabled;
            resourceInputs["throttleAuthenticatedApiPeriodInSeconds"] = args?.throttleAuthenticatedApiPeriodInSeconds;
            resourceInputs["throttleAuthenticatedApiRequestsPerPeriod"] = args?.throttleAuthenticatedApiRequestsPerPeriod;
            resourceInputs["throttleAuthenticatedPackagesApiEnabled"] = args?.throttleAuthenticatedPackagesApiEnabled;
            resourceInputs["throttleAuthenticatedPackagesApiPeriodInSeconds"] = args?.throttleAuthenticatedPackagesApiPeriodInSeconds;
            resourceInputs["throttleAuthenticatedPackagesApiRequestsPerPeriod"] = args?.throttleAuthenticatedPackagesApiRequestsPerPeriod;
            resourceInputs["throttleAuthenticatedWebEnabled"] = args?.throttleAuthenticatedWebEnabled;
            resourceInputs["throttleAuthenticatedWebPeriodInSeconds"] = args?.throttleAuthenticatedWebPeriodInSeconds;
            resourceInputs["throttleAuthenticatedWebRequestsPerPeriod"] = args?.throttleAuthenticatedWebRequestsPerPeriod;
            resourceInputs["throttleUnauthenticatedApiEnabled"] = args?.throttleUnauthenticatedApiEnabled;
            resourceInputs["throttleUnauthenticatedApiPeriodInSeconds"] = args?.throttleUnauthenticatedApiPeriodInSeconds;
            resourceInputs["throttleUnauthenticatedApiRequestsPerPeriod"] = args?.throttleUnauthenticatedApiRequestsPerPeriod;
            resourceInputs["throttleUnauthenticatedPackagesApiEnabled"] = args?.throttleUnauthenticatedPackagesApiEnabled;
            resourceInputs["throttleUnauthenticatedPackagesApiPeriodInSeconds"] = args?.throttleUnauthenticatedPackagesApiPeriodInSeconds;
            resourceInputs["throttleUnauthenticatedPackagesApiRequestsPerPeriod"] = args?.throttleUnauthenticatedPackagesApiRequestsPerPeriod;
            resourceInputs["throttleUnauthenticatedWebEnabled"] = args?.throttleUnauthenticatedWebEnabled;
            resourceInputs["throttleUnauthenticatedWebPeriodInSeconds"] = args?.throttleUnauthenticatedWebPeriodInSeconds;
            resourceInputs["throttleUnauthenticatedWebRequestsPerPeriod"] = args?.throttleUnauthenticatedWebRequestsPerPeriod;
            resourceInputs["timeTrackingLimitToHours"] = args?.timeTrackingLimitToHours;
            resourceInputs["twoFactorGracePeriod"] = args?.twoFactorGracePeriod;
            resourceInputs["unconfirmedUsersDeleteAfterDays"] = args?.unconfirmedUsersDeleteAfterDays;
            resourceInputs["uniqueIpsLimitEnabled"] = args?.uniqueIpsLimitEnabled;
            resourceInputs["uniqueIpsLimitPerUser"] = args?.uniqueIpsLimitPerUser;
            resourceInputs["uniqueIpsLimitTimeWindow"] = args?.uniqueIpsLimitTimeWindow;
            resourceInputs["updateRunnerVersionsEnabled"] = args?.updateRunnerVersionsEnabled;
            resourceInputs["usagePingEnabled"] = args?.usagePingEnabled;
            resourceInputs["useClickhouseForAnalytics"] = args?.useClickhouseForAnalytics;
            resourceInputs["userDeactivationEmailsEnabled"] = args?.userDeactivationEmailsEnabled;
            resourceInputs["userDefaultExternal"] = args?.userDefaultExternal;
            resourceInputs["userDefaultInternalRegex"] = args?.userDefaultInternalRegex;
            resourceInputs["userDefaultsToPrivateProfile"] = args?.userDefaultsToPrivateProfile;
            resourceInputs["userOauthApplications"] = args?.userOauthApplications;
            resourceInputs["userShowAddSshKeyMessage"] = args?.userShowAddSshKeyMessage;
            resourceInputs["validRunnerRegistrars"] = args?.validRunnerRegistrars;
            resourceInputs["versionCheckEnabled"] = args?.versionCheckEnabled;
            resourceInputs["webIdeClientsidePreviewEnabled"] = args?.webIdeClientsidePreviewEnabled;
            resourceInputs["whatsNewVariant"] = args?.whatsNewVariant;
            resourceInputs["wikiPageMaxContentBytes"] = args?.wikiPageMaxContentBytes;
            resourceInputs["gitlabDedicatedInstance"] = undefined /*out*/;
            resourceInputs["gitlabEnvironmentToolkitInstance"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["akismetApiKey", "assetProxySecretKey", "eksAccessKeyId", "eksSecretAccessKey", "elasticsearchAwsAccessKey", "elasticsearchAwsSecretAccessKey", "elasticsearchPassword", "externalAuthClientKey", "externalAuthClientKeyPass", "mailgunSigningKey", "recaptchaPrivateKey", "recaptchaSiteKey", "slackAppSecret", "slackAppSigningSecret", "spamCheckApiKey", "staticObjectsExternalStorageAuthToken", "staticObjectsExternalStorageUrl"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApplicationSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationSettings resources.
 */
export interface ApplicationSettingsState {
    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     */
    abuseNotificationEmail?: pulumi.Input<string>;
    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     */
    adminMode?: pulumi.Input<boolean>;
    /**
     * Where to redirect users after logout.
     */
    afterSignOutPath?: pulumi.Input<string>;
    /**
     * Text shown to the user after signing up.
     */
    afterSignUpText?: pulumi.Input<string>;
    /**
     * API key for Akismet spam protection.
     */
    akismetApiKey?: pulumi.Input<string>;
    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     */
    akismetEnabled?: pulumi.Input<boolean>;
    /**
     * Set to true to allow users to delete their accounts. Premium and Ultimate only.
     */
    allowAccountDeletion?: pulumi.Input<boolean>;
    /**
     * Set to true to allow group owners to manage LDAP.
     */
    allowGroupOwnersToManageLdap?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from system hooks.
     */
    allowLocalRequestsFromSystemHooks?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from web hooks and services.
     */
    allowLocalRequestsFromWebHooksAndServices?: pulumi.Input<boolean>;
    /**
     * Indicates whether users assigned up to the Guest role can create groups and personal projects.
     */
    allowProjectCreationForGuestAndBelow?: pulumi.Input<boolean>;
    /**
     * Allow using a registration token to create a runner.
     */
    allowRunnerRegistrationToken?: pulumi.Input<boolean>;
    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     */
    archiveBuildsInHumanReadable?: pulumi.Input<string>;
    /**
     * Maximum limit of AsciiDoc include directives being processed in any one document. Maximum: 64.
     */
    asciidocMaxIncludes?: pulumi.Input<number>;
    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     */
    assetProxyAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     */
    assetProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxySecretKey?: pulumi.Input<string>;
    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxyUrl?: pulumi.Input<string>;
    /**
     * By default, we write to the authorizedKeys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     */
    authorizedKeysEnabled?: pulumi.Input<boolean>;
    /**
     * When enabled, users will get automatically banned from the application when they download more than the maximum number of unique projects in the time period specified by max*number*of*repository*downloads and max*number*of*repository*downloads*within*time_period respectively. Self-managed, Ultimate only.
     */
    autoBanUserOnExcessiveProjectsDownload?: pulumi.Input<boolean>;
    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     */
    autoDevopsDomain?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     */
    automaticPurchasedStorageAllocation?: pulumi.Input<boolean>;
    /**
     * Maximum simultaneous Direct Transfer batches to process.
     */
    bulkImportConcurrentPipelineBatchLimit?: pulumi.Input<number>;
    /**
     * Enable migrating GitLab groups by direct transfer.
     */
    bulkImportEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum download file size when importing from source GitLab instances by direct transfer.
     */
    bulkImportMaxDownloadFileSize?: pulumi.Input<number>;
    /**
     * Indicates whether users can create top-level groups.
     */
    canCreateGroup?: pulumi.Input<boolean>;
    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     */
    checkNamespacePlan?: pulumi.Input<boolean>;
    /**
     * The maximum number of includes per pipeline.
     */
    ciMaxIncludes?: pulumi.Input<number>;
    /**
     * The maximum amount of memory, in bytes, that can be allocated for the pipeline configuration, with all included YAML configuration files.
     */
    ciMaxTotalYamlSizeBytes?: pulumi.Input<number>;
    /**
     * Custom hostname (for private commit emails).
     */
    commitEmailHostname?: pulumi.Input<string>;
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Cloud importer.
     */
    concurrentBitbucketImportJobsLimit?: pulumi.Input<number>;
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Server importer.
     */
    concurrentBitbucketServerImportJobsLimit?: pulumi.Input<number>;
    /**
     * Maximum number of simultaneous import jobs for the GitHub importer.
     */
    concurrentGithubImportJobsLimit?: pulumi.Input<number>;
    /**
     * Enable cleanup policies for all projects.
     */
    containerExpirationPoliciesEnableHistoricEntries?: pulumi.Input<boolean>;
    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     */
    containerRegistryCleanupTagsServiceMaxListSize?: pulumi.Input<number>;
    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     */
    containerRegistryDeleteTagsServiceTimeout?: pulumi.Input<number>;
    /**
     * Caching during the execution of cleanup policies.
     */
    containerRegistryExpirationPoliciesCaching?: pulumi.Input<boolean>;
    /**
     * Number of workers for cleanup policies.
     */
    containerRegistryExpirationPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Container Registry token duration in minutes.
     */
    containerRegistryTokenExpireDelay?: pulumi.Input<number>;
    /**
     * Enable automatic deactivation of dormant users.
     */
    deactivateDormantUsers?: pulumi.Input<boolean>;
    /**
     * Length of time (in days) after which a user is considered dormant.
     */
    deactivateDormantUsersPeriod?: pulumi.Input<number>;
    /**
     * Default timeout for decompressing archived files, in seconds. Set to 0 to disable timeouts.
     */
    decompressArchiveFileTimeout?: pulumi.Input<number>;
    /**
     * Set the default expiration time for each job’s artifacts.
     */
    defaultArtifactsExpireIn?: pulumi.Input<string>;
    /**
     * Instance-level custom initial branch name
     */
    defaultBranchName?: pulumi.Input<string>;
    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2. Use `defaultBranchProtectionDefaults` instead. To be removed in 19.0.
     *
     * @deprecated Use `defaultBranchProtectionDefaults` instead. To be removed in 19.0.
     */
    defaultBranchProtection?: pulumi.Input<number>;
    /**
     * The default*branch*protection*defaults attribute describes the default branch protection defaults. All parameters are optional.
     */
    defaultBranchProtectionDefaults?: pulumi.Input<inputs.ApplicationSettingsDefaultBranchProtectionDefaults>;
    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     */
    defaultCiConfigPath?: pulumi.Input<string>;
    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter.
     */
    defaultGroupVisibility?: pulumi.Input<string>;
    /**
     * Default preferred language for users who are not logged in.
     */
    defaultPreferredLanguage?: pulumi.Input<string>;
    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     */
    defaultProjectCreation?: pulumi.Input<number>;
    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter.
     */
    defaultProjectVisibility?: pulumi.Input<string>;
    /**
     * Project limit per user.
     */
    defaultProjectsLimit?: pulumi.Input<number>;
    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter.
     */
    defaultSnippetVisibility?: pulumi.Input<string>;
    /**
     * Default syntax highlighting theme for users who are new or not signed in. See IDs of available themes (https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/themes.rb#L16)
     */
    defaultSyntaxHighlightingTheme?: pulumi.Input<number>;
    /**
     * Enable inactive project deletion feature.
     */
    deleteInactiveProjects?: pulumi.Input<boolean>;
    /**
     * Specifies whether users who have not confirmed their email should be deleted. When set to true, unconfirmed users are deleted after unconfirmed*users*delete*after*days days. Self-managed, Premium and Ultimate only.
     */
    deleteUnconfirmedUsers?: pulumi.Input<boolean>;
    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90.
     */
    deletionAdjournedPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires diagramsnet_url) Enable Diagrams.net integration.
     */
    diagramsnetEnabled?: pulumi.Input<boolean>;
    /**
     * The Diagrams.net instance URL for integration.
     */
    diagramsnetUrl?: pulumi.Input<string>;
    /**
     * Maximum files in a diff.
     */
    diffMaxFiles?: pulumi.Input<number>;
    /**
     * Maximum lines in a diff.
     */
    diffMaxLines?: pulumi.Input<number>;
    /**
     * Maximum diff patch size, in bytes.
     */
    diffMaxPatchBytes?: pulumi.Input<number>;
    /**
     * Stops administrators from connecting their GitLab accounts to non-trusted OAuth 2.0 applications that have the api, read*api, read*repository, write*repository, read*registry, write_registry, or sudo scopes.
     */
    disableAdminOauthScopes?: pulumi.Input<boolean>;
    /**
     * Disable display of RSS/Atom and calendar feed tokens.
     */
    disableFeedToken?: pulumi.Input<boolean>;
    /**
     * Disable personal access tokens. Self-managed, Premium and Ultimate only. There is no method available to enable a personal access token that’s been disabled through the API. This is a known issue.
     */
    disablePersonalAccessTokens?: pulumi.Input<boolean>;
    /**
     * Disabled OAuth sign-in sources.
     */
    disabledOauthSignInSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enforce DNS rebinding attack protection.
     */
    dnsRebindingProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Force people to use only corporate emails for sign-up. Null means there is no restriction.
     */
    domainAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     */
    domainDenylistEnabled?: pulumi.Input<boolean>;
    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     */
    domainDenylists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum downstream pipeline trigger rate.
     */
    downstreamPipelineTriggerLimitPerProjectUserSha?: pulumi.Input<number>;
    /**
     * The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
     */
    dsaKeyRestriction?: pulumi.Input<number>;
    /**
     * Indicates whether GitLab Duo features are enabled for this instance. Self-managed, Premium and Ultimate only.
     */
    duoFeaturesEnabled?: pulumi.Input<boolean>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
     */
    ecdsaKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
     */
    ecdsaSkKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
     */
    ed25519KeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
     */
    ed25519SkKeyRestriction?: pulumi.Input<number>;
    /**
     * AWS IAM access key ID.
     */
    eksAccessKeyId?: pulumi.Input<string>;
    /**
     * Amazon account ID.
     */
    eksAccountId?: pulumi.Input<string>;
    /**
     * Enable integration with Amazon EKS.
     */
    eksIntegrationEnabled?: pulumi.Input<boolean>;
    /**
     * AWS IAM secret access key.
     */
    eksSecretAccessKey?: pulumi.Input<string>;
    /**
     * Enable the use of AWS hosted Elasticsearch.
     */
    elasticsearchAws?: pulumi.Input<boolean>;
    /**
     * AWS IAM access key.
     */
    elasticsearchAwsAccessKey?: pulumi.Input<string>;
    /**
     * The AWS region the Elasticsearch domain is configured.
     */
    elasticsearchAwsRegion?: pulumi.Input<string>;
    /**
     * AWS IAM secret access key.
     */
    elasticsearchAwsSecretAccessKey?: pulumi.Input<string>;
    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     */
    elasticsearchIndexedFieldLengthLimit?: pulumi.Input<number>;
    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     */
    elasticsearchIndexedFileSizeLimitKb?: pulumi.Input<number>;
    /**
     * Enable Elasticsearch indexing.
     */
    elasticsearchIndexing?: pulumi.Input<boolean>;
    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     */
    elasticsearchLimitIndexing?: pulumi.Input<boolean>;
    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkConcurrency?: pulumi.Input<number>;
    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkSizeMb?: pulumi.Input<number>;
    /**
     * Maximum concurrency of Elasticsearch code indexing background jobs. This only applies to repository indexing operations. Premium and Ultimate only.
     */
    elasticsearchMaxCodeIndexingConcurrency?: pulumi.Input<number>;
    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchNamespaceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The password of your Elasticsearch instance.
     */
    elasticsearchPassword?: pulumi.Input<string>;
    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchProjectIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable automatic requeuing of indexing workers. This improves non-code indexing throughput by enqueuing Sidekiq jobs until all documents are processed. Premium and Ultimate only.
     */
    elasticsearchRequeueWorkers?: pulumi.Input<boolean>;
    /**
     * Enable Elasticsearch search.
     */
    elasticsearchSearch?: pulumi.Input<boolean>;
    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     */
    elasticsearchUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username of your Elasticsearch instance.
     */
    elasticsearchUsername?: pulumi.Input<string>;
    /**
     * Number of indexing worker shards. This improves non-code indexing throughput by enqueuing more parallel Sidekiq jobs. Premium and Ultimate only.
     */
    elasticsearchWorkerNumberOfShards?: pulumi.Input<number>;
    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     */
    emailAdditionalText?: pulumi.Input<string>;
    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     */
    emailAuthorInBody?: pulumi.Input<boolean>;
    /**
     * Specifies whether users must confirm their email before sign in. Possible values are off, soft, and hard.
     */
    emailConfirmationSetting?: pulumi.Input<string>;
    /**
     * Show the external redirect page that warns you about user-generated content in GitLab Pages.
     */
    enableArtifactExternalRedirectWarningPage?: pulumi.Input<boolean>;
    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     */
    enabledGitAccessProtocol?: pulumi.Input<string>;
    /**
     * Enabling this permits enforcement of namespace storage limits.
     */
    enforceNamespaceStorageLimit?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     */
    enforceTerms?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     */
    externalAuthClientCert?: pulumi.Input<string>;
    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     */
    externalAuthClientKey?: pulumi.Input<string>;
    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     */
    externalAuthClientKeyPass?: pulumi.Input<string>;
    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     */
    externalAuthorizationServiceDefaultLabel?: pulumi.Input<string>;
    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     */
    externalAuthorizationServiceEnabled?: pulumi.Input<boolean>;
    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     */
    externalAuthorizationServiceTimeout?: pulumi.Input<number>;
    /**
     * URL to which authorization requests are directed.
     */
    externalAuthorizationServiceUrl?: pulumi.Input<string>;
    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     */
    externalPipelineValidationServiceTimeout?: pulumi.Input<number>;
    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     */
    externalPipelineValidationServiceToken?: pulumi.Input<string>;
    /**
     * URL to use for pipeline validation requests.
     */
    externalPipelineValidationServiceUrl?: pulumi.Input<string>;
    /**
     * Time period in minutes after which the user is unlocked when maximum number of failed sign-in attempts reached.
     */
    failedLoginAttemptsUnlockPeriodInMinutes?: pulumi.Input<number>;
    /**
     * The ID of a project to load custom file templates from.
     */
    fileTemplateProjectId?: pulumi.Input<number>;
    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
     */
    firstDayOfWeek?: pulumi.Input<number>;
    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     */
    geoNodeAllowedIps?: pulumi.Input<string>;
    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     */
    geoStatusTimeout?: pulumi.Input<number>;
    /**
     * List of user IDs that are emailed when the Git abuse rate limit is exceeded. Maximum: 100 user IDs. Self-managed, Ultimate only.
     */
    gitRateLimitUsersAlertlists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Self-managed, Ultimate only.
     */
    gitRateLimitUsersAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     */
    gitTwoFactorSessionExpiry?: pulumi.Input<number>;
    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     */
    gitalyTimeoutDefault?: pulumi.Input<number>;
    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     */
    gitalyTimeoutFast?: pulumi.Input<number>;
    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     */
    gitalyTimeoutMedium?: pulumi.Input<number>;
    /**
     * Indicates whether the instance was provisioned for GitLab Dedicated.
     */
    gitlabDedicatedInstance?: pulumi.Input<boolean>;
    /**
     * Indicates whether the instance was provisioned with the GitLab Environment Toolkit for Service Ping reporting.
     */
    gitlabEnvironmentToolkitInstance?: pulumi.Input<boolean>;
    /**
     * Maximum number of Git operations per minute a user can perform.
     */
    gitlabShellOperationLimit?: pulumi.Input<number>;
    /**
     * Enable Gitpod integration.
     */
    gitpodEnabled?: pulumi.Input<boolean>;
    /**
     * The Gitpod instance URL for integration.
     */
    gitpodUrl?: pulumi.Input<string>;
    /**
     * Comma-separated list of IP addresses and CIDRs always allowed for inbound traffic. For example, 1.1.1.1, 2.2.2.0/24.
     */
    globallyAllowedIps?: pulumi.Input<string>;
    /**
     * Enable Grafana.
     */
    grafanaEnabled?: pulumi.Input<boolean>;
    /**
     * Grafana URL.
     */
    grafanaUrl?: pulumi.Input<string>;
    /**
     * Enable Gravatar.
     */
    gravatarEnabled?: pulumi.Input<boolean>;
    /**
     * Prevent overrides of default branch protection.
     */
    groupOwnersCanManageDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Hide marketing-related entries from help.
     */
    helpPageHideCommercialContent?: pulumi.Input<boolean>;
    /**
     * Alternate support URL for help page and help dropdown.
     */
    helpPageSupportUrl?: pulumi.Input<string>;
    /**
     * Custom text displayed on the help page.
     */
    helpPageText?: pulumi.Input<string>;
    /**
     * GitLab server administrator information.
     */
    helpText?: pulumi.Input<string>;
    /**
     * Do not display offers from third parties in GitLab.
     */
    hideThirdPartyOffers?: pulumi.Input<boolean>;
    /**
     * Redirect to this URL when not logged in.
     */
    homePageUrl?: pulumi.Input<string>;
    /**
     * Enable or disable Git housekeeping. If enabled, requires housekeeping*optimize*repository_period.
     */
    housekeepingEnabled?: pulumi.Input<boolean>;
    /**
     * Number of Git pushes after which an incremental git-repack is run.
     */
    housekeepingOptimizeRepositoryPeriod?: pulumi.Input<number>;
    /**
     * Enable HTML emails.
     */
    htmlEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucketServer`, `fogbugz`, `git`, `gitlab.Project`, `gitea`, `manifest`
     */
    importSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable in-product marketing emails.
     */
    inProductMarketingEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects.
     */
    inactiveProjectsDeleteAfterMonths?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity.
     */
    inactiveProjectsMinSizeMb?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive.
     */
    inactiveProjectsSendWarningEmailAfterMonths?: pulumi.Input<number>;
    /**
     * Whether or not optional metrics are enabled in Service Ping.
     */
    includeOptionalMetricsInServicePing?: pulumi.Input<boolean>;
    /**
     * Enable Invisible CAPTCHA spam detection during sign-up.
     */
    invisibleCaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Max number of issue creation requests per minute per user.
     */
    issuesCreateLimit?: pulumi.Input<number>;
    /**
     * ID of the OAuth application used to authenticate with the GitLab for Jira Cloud app.
     */
    jiraConnectApplicationKey?: pulumi.Input<string>;
    /**
     * URL of the GitLab instance used as a proxy for the GitLab for Jira Cloud app.
     */
    jiraConnectProxyUrl?: pulumi.Input<string>;
    /**
     * Enable public key storage for the GitLab for Jira Cloud app.
     */
    jiraConnectPublicKeyStorageEnabled?: pulumi.Input<boolean>;
    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
     */
    keepLatestArtifact?: pulumi.Input<boolean>;
    /**
     * Increase this value when any cached Markdown should be invalidated.
     */
    localMarkdownVersion?: pulumi.Input<number>;
    /**
     * Indicates whether the GitLab Duo features enabled setting is enforced for all subgroups. Self-managed, Premium and Ultimate only.
     */
    lockDuoFeaturesEnabled?: pulumi.Input<boolean>;
    /**
     * Set to true to lock all memberships to LDAP. Premium and Ultimate only.
     */
    lockMembershipsToLdap?: pulumi.Input<boolean>;
    /**
     * Enable Mailgun event receiver.
     */
    mailgunEventsEnabled?: pulumi.Input<boolean>;
    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     */
    mailgunSigningKey?: pulumi.Input<string>;
    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     */
    maintenanceMode?: pulumi.Input<boolean>;
    /**
     * Message displayed when instance is in maintenance mode.
     */
    maintenanceModeMessage?: pulumi.Input<string>;
    /**
     * Use repo.maven.apache.org as a default remote repository when the package is not found in the GitLab Package Registry for Maven. Premium and Ultimate only.
     */
    mavenPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * Maximum artifacts size in MB.
     */
    maxArtifactsSize?: pulumi.Input<number>;
    /**
     * Limit attachment size in MB.
     */
    maxAttachmentSize?: pulumi.Input<number>;
    /**
     * Maximum decompressed archive size in bytes.
     */
    maxDecompressedArchiveSize?: pulumi.Input<number>;
    /**
     * Maximum export size in MB. 0 for unlimited.
     */
    maxExportSize?: pulumi.Input<number>;
    /**
     * Maximum remote file size for imports from external object storages.
     */
    maxImportRemoteFileSize?: pulumi.Input<number>;
    /**
     * Maximum import size in MB. 0 for unlimited.
     */
    maxImportSize?: pulumi.Input<number>;
    /**
     * Maximum number of sign-in attempts before locking out the user.
     */
    maxLoginAttempts?: pulumi.Input<number>;
    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories.
     */
    maxNumberOfRepositoryDownloads?: pulumi.Input<number>;
    /**
     * Reporting time period (in seconds). Maximum: 864000 seconds (10 days).
     */
    maxNumberOfRepositoryDownloadsWithinTimePeriod?: pulumi.Input<number>;
    /**
     * Maximum size of pages repositories in MB.
     */
    maxPagesSize?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for access tokens in days.
     */
    maxPersonalAccessTokenLifetime?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for SSH keys in days.
     */
    maxSshKeyLifetime?: pulumi.Input<number>;
    maxTerraformStateSizeBytes?: pulumi.Input<number>;
    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     */
    metricsMethodCallThreshold?: pulumi.Input<number>;
    /**
     * Indicates whether passwords require a minimum length. Premium and Ultimate only.
     */
    minimumPasswordLength?: pulumi.Input<number>;
    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     */
    mirrorAvailable?: pulumi.Input<boolean>;
    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     */
    mirrorCapacityThreshold?: pulumi.Input<number>;
    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     */
    mirrorMaxCapacity?: pulumi.Input<number>;
    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     */
    mirrorMaxDelay?: pulumi.Input<number>;
    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     */
    npmPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * Indicates whether to skip metadata URL validation for the NuGet package.
     */
    nugetSkipMetadataUrlValidation?: pulumi.Input<boolean>;
    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     */
    outboundLocalRequestsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of package registry metadata to sync. See the list of the available values (https://gitlab.com/gitlab-org/gitlab/-/blob/ace16c20d5da7c4928dd03fb139692638b557fe3/app/models/concerns/enums/package_metadata.rb#L5). Self-managed, Ultimate only.
     */
    packageMetadataPurlTypes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable to allow anyone to pull from Package Registry visible and changeable.
     */
    packageRegistryAllowAnyoneToPullOption?: pulumi.Input<boolean>;
    /**
     * Number of workers assigned to the packages cleanup policies.
     */
    packageRegistryCleanupPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     */
    pagesDomainVerificationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password.
     */
    passwordAuthenticationEnabledForGit?: pulumi.Input<boolean>;
    /**
     * Enable authentication for the web interface via a GitLab account password.
     */
    passwordAuthenticationEnabledForWeb?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one lowercase letter.
     */
    passwordLowercaseRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one number.
     */
    passwordNumberRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one symbol character.
     */
    passwordSymbolRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one uppercase letter.
     */
    passwordUppercaseRequired?: pulumi.Input<boolean>;
    /**
     * Path of the group that is allowed to toggle the performance bar.
     */
    performanceBarAllowedGroupPath?: pulumi.Input<string>;
    /**
     * Prefix for all generated personal access tokens.
     */
    personalAccessTokenPrefix?: pulumi.Input<string>;
    /**
     * Maximum number of pipeline creation requests per minute per user and commit.
     */
    pipelineLimitPerProjectUserSha?: pulumi.Input<number>;
    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration.
     */
    plantumlEnabled?: pulumi.Input<boolean>;
    /**
     * The PlantUML instance URL for integration.
     */
    plantumlUrl?: pulumi.Input<string>;
    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     */
    pollingIntervalMultiplier?: pulumi.Input<number>;
    /**
     * Enable project export.
     */
    projectExportEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum authenticated requests to /project/:id/jobs per minute.
     */
    projectJobsApiRateLimit?: pulumi.Input<number>;
    /**
     * Max number of requests per 10 minutes per IP address for unauthenticated requests to the list all projects API. To disable throttling set to 0.
     */
    projectsApiRateLimitUnauthenticated?: pulumi.Input<number>;
    /**
     * Enable Prometheus metrics.
     */
    prometheusMetricsEnabled?: pulumi.Input<boolean>;
    /**
     * CI/CD variables are protected by default.
     */
    protectedCiVariables?: pulumi.Input<boolean>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     */
    pushEventActivitiesLimit?: pulumi.Input<number>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     */
    pushEventHooksLimit?: pulumi.Input<number>;
    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     */
    pypiPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     */
    rateLimitingResponseText?: pulumi.Input<string>;
    /**
     * Max number of requests per minute for each raw path. To disable throttling set to 0.
     */
    rawBlobRequestLimit?: pulumi.Input<number>;
    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     */
    recaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Private key for reCAPTCHA.
     */
    recaptchaPrivateKey?: pulumi.Input<string>;
    /**
     * Site key for reCAPTCHA.
     */
    recaptchaSiteKey?: pulumi.Input<string>;
    /**
     * Maximum push size (MB).
     */
    receiveMaxInputSize?: pulumi.Input<number>;
    /**
     * Enable receptive mode for GitLab Agents for Kubernetes.
     */
    receptiveClusterAgentsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Remember me setting.
     */
    rememberMeEnabled?: pulumi.Input<boolean>;
    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     */
    repositoryChecksEnabled?: pulumi.Input<boolean>;
    /**
     * Size limit per repository (MB).
     */
    repositorySizeLimit?: pulumi.Input<number>;
    /**
     * Hash of names taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     */
    repositoryStoragesWeighted?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     */
    requireAdminApprovalAfterUserSignup?: pulumi.Input<boolean>;
    /**
     * Allow administrators to require 2FA for all administrators on the instance.
     */
    requireAdminTwoFactorAuthentication?: pulumi.Input<boolean>;
    /**
     * When enabled, users must set an expiration date when creating a group or project access token, or a personal access token owned by a non-service account.
     */
    requirePersonalAccessTokenExpiry?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     */
    requireTwoFactorAuthentication?: pulumi.Input<boolean>;
    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
     */
    restrictedVisibilityLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
     */
    rsaKeyRestriction?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
     */
    searchRateLimit?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
     */
    searchRateLimitUnauthenticated?: pulumi.Input<number>;
    /**
     * Maximum number of active merge request approval policies per security policy project. Maximum: 20
     */
    securityApprovalPoliciesLimit?: pulumi.Input<number>;
    /**
     * Whether to look up merge request approval policy approval groups globally or within project hierarchies.
     */
    securityPolicyGlobalGroupApproversEnabled?: pulumi.Input<boolean>;
    /**
     * Public security contact information.
     */
    securityTxtContent?: pulumi.Input<string>;
    /**
     * Send confirmation email on sign-up.
     */
    sendUserConfirmationEmail?: pulumi.Input<boolean>;
    /**
     * Flag to indicate if token expiry date can be optional for service account users
     */
    serviceAccessTokensExpirationEnforced?: pulumi.Input<boolean>;
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     */
    sessionExpireDelay?: pulumi.Input<number>;
    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     */
    sharedRunnersMinutes?: pulumi.Input<number>;
    /**
     * Shared runners text.
     */
    sharedRunnersText?: pulumi.Input<string>;
    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
     */
    sidekiqJobLimiterCompressionThresholdBytes?: pulumi.Input<number>;
    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
     */
    sidekiqJobLimiterLimitBytes?: pulumi.Input<number>;
    /**
     * track or compress. Sets the behavior for Sidekiq job size limits.
     */
    sidekiqJobLimiterMode?: pulumi.Input<string>;
    /**
     * Text on the login page.
     */
    signInText?: pulumi.Input<string>;
    /**
     * Enable registration.
     */
    signupEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Silent admin exports.
     */
    silentAdminExportsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Silent mode.
     */
    silentModeEnabled?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     */
    slackAppEnabled?: pulumi.Input<boolean>;
    /**
     * The app ID of the Slack-app.
     */
    slackAppId?: pulumi.Input<string>;
    /**
     * The app secret of the Slack-app.
     */
    slackAppSecret?: pulumi.Input<string>;
    /**
     * The signing secret of the Slack-app.
     */
    slackAppSigningSecret?: pulumi.Input<string>;
    /**
     * The verification token of the Slack-app.
     */
    slackAppVerificationToken?: pulumi.Input<string>;
    /**
     * Max snippet content size in bytes.
     */
    snippetSizeLimit?: pulumi.Input<number>;
    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     */
    snowplowAppId?: pulumi.Input<string>;
    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     */
    snowplowCollectorHostname?: pulumi.Input<string>;
    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     */
    snowplowCookieDomain?: pulumi.Input<string>;
    /**
     * The Snowplow collector for database events hostname. (for example, db-snowplow.trx.gitlab.net)
     */
    snowplowDatabaseCollectorHostname?: pulumi.Input<string>;
    /**
     * Enable snowplow tracking.
     */
    snowplowEnabled?: pulumi.Input<boolean>;
    /**
     * Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
     */
    sourcegraphEnabled?: pulumi.Input<boolean>;
    /**
     * Blocks Sourcegraph from being loaded on private and internal projects.
     */
    sourcegraphPublicOnly?: pulumi.Input<boolean>;
    /**
     * The Sourcegraph instance URL for integration.
     */
    sourcegraphUrl?: pulumi.Input<string>;
    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     */
    spamCheckApiKey?: pulumi.Input<string>;
    /**
     * Enables spam checking using external Spam Check API endpoint.
     */
    spamCheckEndpointEnabled?: pulumi.Input<boolean>;
    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     */
    spamCheckEndpointUrl?: pulumi.Input<string>;
    /**
     * Authentication token for the external storage linked in static*objects*external*storage*url.
     */
    staticObjectsExternalStorageAuthToken?: pulumi.Input<string>;
    /**
     * URL to an external storage for repository static objects.
     */
    staticObjectsExternalStorageUrl?: pulumi.Input<string>;
    /**
     * Enable pipeline suggestion banner.
     */
    suggestPipelineEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     */
    terminalMaxSessionTime?: pulumi.Input<number>;
    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     */
    terms?: pulumi.Input<string>;
    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * Limit display of time tracking units to hours.
     */
    timeTrackingLimitToHours?: pulumi.Input<boolean>;
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     */
    twoFactorGracePeriod?: pulumi.Input<number>;
    /**
     * Specifies how many days after sign-up to delete users who have not confirmed their email. Only applicable if delete*unconfirmed*users is set to true. Must be 1 or greater. Self-managed, Premium and Ultimate only.
     */
    unconfirmedUsersDeleteAfterDays?: pulumi.Input<number>;
    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     */
    uniqueIpsLimitEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum number of IPs per user.
     */
    uniqueIpsLimitPerUser?: pulumi.Input<number>;
    /**
     * How many seconds an IP is counted towards the limit.
     */
    uniqueIpsLimitTimeWindow?: pulumi.Input<number>;
    /**
     * Fetch GitLab Runner release version data from GitLab.com.
     */
    updateRunnerVersionsEnabled?: pulumi.Input<boolean>;
    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     */
    usagePingEnabled?: pulumi.Input<boolean>;
    /**
     * Enables ClickHouse as a data source for analytics reports. ClickHouse must be configured for this setting to take effect. Available on Premium and Ultimate only.
     */
    useClickhouseForAnalytics?: pulumi.Input<boolean>;
    /**
     * Send an email to users upon account deactivation.
     */
    userDeactivationEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Newly registered users are external by default.
     */
    userDefaultExternal?: pulumi.Input<boolean>;
    /**
     * Specify an email address regex pattern to identify default internal users.
     */
    userDefaultInternalRegex?: pulumi.Input<string>;
    /**
     * Newly created users have private profile by default.
     */
    userDefaultsToPrivateProfile?: pulumi.Input<boolean>;
    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     */
    userOauthApplications?: pulumi.Input<boolean>;
    /**
     * When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     */
    userShowAddSshKeyMessage?: pulumi.Input<boolean>;
    /**
     * List of types which are allowed to register a GitLab Runner. Can be [], ['group'], ['project'] or ['group', 'project'].
     */
    validRunnerRegistrars?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Let GitLab inform you when an update is available.
     */
    versionCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     */
    webIdeClientsidePreviewEnabled?: pulumi.Input<boolean>;
    /**
     * What's new variant, possible values: all*tiers, current*tier, and disabled.
     */
    whatsNewVariant?: pulumi.Input<string>;
    /**
     * Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
     */
    wikiPageMaxContentBytes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ApplicationSettings resource.
 */
export interface ApplicationSettingsArgs {
    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     */
    abuseNotificationEmail?: pulumi.Input<string>;
    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     */
    adminMode?: pulumi.Input<boolean>;
    /**
     * Where to redirect users after logout.
     */
    afterSignOutPath?: pulumi.Input<string>;
    /**
     * Text shown to the user after signing up.
     */
    afterSignUpText?: pulumi.Input<string>;
    /**
     * API key for Akismet spam protection.
     */
    akismetApiKey?: pulumi.Input<string>;
    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     */
    akismetEnabled?: pulumi.Input<boolean>;
    /**
     * Set to true to allow users to delete their accounts. Premium and Ultimate only.
     */
    allowAccountDeletion?: pulumi.Input<boolean>;
    /**
     * Set to true to allow group owners to manage LDAP.
     */
    allowGroupOwnersToManageLdap?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from system hooks.
     */
    allowLocalRequestsFromSystemHooks?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from web hooks and services.
     */
    allowLocalRequestsFromWebHooksAndServices?: pulumi.Input<boolean>;
    /**
     * Indicates whether users assigned up to the Guest role can create groups and personal projects.
     */
    allowProjectCreationForGuestAndBelow?: pulumi.Input<boolean>;
    /**
     * Allow using a registration token to create a runner.
     */
    allowRunnerRegistrationToken?: pulumi.Input<boolean>;
    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     */
    archiveBuildsInHumanReadable?: pulumi.Input<string>;
    /**
     * Maximum limit of AsciiDoc include directives being processed in any one document. Maximum: 64.
     */
    asciidocMaxIncludes?: pulumi.Input<number>;
    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     */
    assetProxyAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     */
    assetProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxySecretKey?: pulumi.Input<string>;
    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxyUrl?: pulumi.Input<string>;
    /**
     * By default, we write to the authorizedKeys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     */
    authorizedKeysEnabled?: pulumi.Input<boolean>;
    /**
     * When enabled, users will get automatically banned from the application when they download more than the maximum number of unique projects in the time period specified by max*number*of*repository*downloads and max*number*of*repository*downloads*within*time_period respectively. Self-managed, Ultimate only.
     */
    autoBanUserOnExcessiveProjectsDownload?: pulumi.Input<boolean>;
    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     */
    autoDevopsDomain?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     */
    automaticPurchasedStorageAllocation?: pulumi.Input<boolean>;
    /**
     * Maximum simultaneous Direct Transfer batches to process.
     */
    bulkImportConcurrentPipelineBatchLimit?: pulumi.Input<number>;
    /**
     * Enable migrating GitLab groups by direct transfer.
     */
    bulkImportEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum download file size when importing from source GitLab instances by direct transfer.
     */
    bulkImportMaxDownloadFileSize?: pulumi.Input<number>;
    /**
     * Indicates whether users can create top-level groups.
     */
    canCreateGroup?: pulumi.Input<boolean>;
    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     */
    checkNamespacePlan?: pulumi.Input<boolean>;
    /**
     * The maximum number of includes per pipeline.
     */
    ciMaxIncludes?: pulumi.Input<number>;
    /**
     * The maximum amount of memory, in bytes, that can be allocated for the pipeline configuration, with all included YAML configuration files.
     */
    ciMaxTotalYamlSizeBytes?: pulumi.Input<number>;
    /**
     * Custom hostname (for private commit emails).
     */
    commitEmailHostname?: pulumi.Input<string>;
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Cloud importer.
     */
    concurrentBitbucketImportJobsLimit?: pulumi.Input<number>;
    /**
     * Maximum number of simultaneous import jobs for the Bitbucket Server importer.
     */
    concurrentBitbucketServerImportJobsLimit?: pulumi.Input<number>;
    /**
     * Maximum number of simultaneous import jobs for the GitHub importer.
     */
    concurrentGithubImportJobsLimit?: pulumi.Input<number>;
    /**
     * Enable cleanup policies for all projects.
     */
    containerExpirationPoliciesEnableHistoricEntries?: pulumi.Input<boolean>;
    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     */
    containerRegistryCleanupTagsServiceMaxListSize?: pulumi.Input<number>;
    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     */
    containerRegistryDeleteTagsServiceTimeout?: pulumi.Input<number>;
    /**
     * Caching during the execution of cleanup policies.
     */
    containerRegistryExpirationPoliciesCaching?: pulumi.Input<boolean>;
    /**
     * Number of workers for cleanup policies.
     */
    containerRegistryExpirationPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Container Registry token duration in minutes.
     */
    containerRegistryTokenExpireDelay?: pulumi.Input<number>;
    /**
     * Enable automatic deactivation of dormant users.
     */
    deactivateDormantUsers?: pulumi.Input<boolean>;
    /**
     * Length of time (in days) after which a user is considered dormant.
     */
    deactivateDormantUsersPeriod?: pulumi.Input<number>;
    /**
     * Default timeout for decompressing archived files, in seconds. Set to 0 to disable timeouts.
     */
    decompressArchiveFileTimeout?: pulumi.Input<number>;
    /**
     * Set the default expiration time for each job’s artifacts.
     */
    defaultArtifactsExpireIn?: pulumi.Input<string>;
    /**
     * Instance-level custom initial branch name
     */
    defaultBranchName?: pulumi.Input<string>;
    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2. Use `defaultBranchProtectionDefaults` instead. To be removed in 19.0.
     *
     * @deprecated Use `defaultBranchProtectionDefaults` instead. To be removed in 19.0.
     */
    defaultBranchProtection?: pulumi.Input<number>;
    /**
     * The default*branch*protection*defaults attribute describes the default branch protection defaults. All parameters are optional.
     */
    defaultBranchProtectionDefaults?: pulumi.Input<inputs.ApplicationSettingsDefaultBranchProtectionDefaults>;
    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     */
    defaultCiConfigPath?: pulumi.Input<string>;
    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter.
     */
    defaultGroupVisibility?: pulumi.Input<string>;
    /**
     * Default preferred language for users who are not logged in.
     */
    defaultPreferredLanguage?: pulumi.Input<string>;
    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     */
    defaultProjectCreation?: pulumi.Input<number>;
    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter.
     */
    defaultProjectVisibility?: pulumi.Input<string>;
    /**
     * Project limit per user.
     */
    defaultProjectsLimit?: pulumi.Input<number>;
    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter.
     */
    defaultSnippetVisibility?: pulumi.Input<string>;
    /**
     * Default syntax highlighting theme for users who are new or not signed in. See IDs of available themes (https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/themes.rb#L16)
     */
    defaultSyntaxHighlightingTheme?: pulumi.Input<number>;
    /**
     * Enable inactive project deletion feature.
     */
    deleteInactiveProjects?: pulumi.Input<boolean>;
    /**
     * Specifies whether users who have not confirmed their email should be deleted. When set to true, unconfirmed users are deleted after unconfirmed*users*delete*after*days days. Self-managed, Premium and Ultimate only.
     */
    deleteUnconfirmedUsers?: pulumi.Input<boolean>;
    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90.
     */
    deletionAdjournedPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires diagramsnet_url) Enable Diagrams.net integration.
     */
    diagramsnetEnabled?: pulumi.Input<boolean>;
    /**
     * The Diagrams.net instance URL for integration.
     */
    diagramsnetUrl?: pulumi.Input<string>;
    /**
     * Maximum files in a diff.
     */
    diffMaxFiles?: pulumi.Input<number>;
    /**
     * Maximum lines in a diff.
     */
    diffMaxLines?: pulumi.Input<number>;
    /**
     * Maximum diff patch size, in bytes.
     */
    diffMaxPatchBytes?: pulumi.Input<number>;
    /**
     * Stops administrators from connecting their GitLab accounts to non-trusted OAuth 2.0 applications that have the api, read*api, read*repository, write*repository, read*registry, write_registry, or sudo scopes.
     */
    disableAdminOauthScopes?: pulumi.Input<boolean>;
    /**
     * Disable display of RSS/Atom and calendar feed tokens.
     */
    disableFeedToken?: pulumi.Input<boolean>;
    /**
     * Disable personal access tokens. Self-managed, Premium and Ultimate only. There is no method available to enable a personal access token that’s been disabled through the API. This is a known issue.
     */
    disablePersonalAccessTokens?: pulumi.Input<boolean>;
    /**
     * Disabled OAuth sign-in sources.
     */
    disabledOauthSignInSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enforce DNS rebinding attack protection.
     */
    dnsRebindingProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Force people to use only corporate emails for sign-up. Null means there is no restriction.
     */
    domainAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     */
    domainDenylistEnabled?: pulumi.Input<boolean>;
    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     */
    domainDenylists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum downstream pipeline trigger rate.
     */
    downstreamPipelineTriggerLimitPerProjectUserSha?: pulumi.Input<number>;
    /**
     * The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
     */
    dsaKeyRestriction?: pulumi.Input<number>;
    /**
     * Indicates whether GitLab Duo features are enabled for this instance. Self-managed, Premium and Ultimate only.
     */
    duoFeaturesEnabled?: pulumi.Input<boolean>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
     */
    ecdsaKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
     */
    ecdsaSkKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
     */
    ed25519KeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
     */
    ed25519SkKeyRestriction?: pulumi.Input<number>;
    /**
     * AWS IAM access key ID.
     */
    eksAccessKeyId?: pulumi.Input<string>;
    /**
     * Amazon account ID.
     */
    eksAccountId?: pulumi.Input<string>;
    /**
     * Enable integration with Amazon EKS.
     */
    eksIntegrationEnabled?: pulumi.Input<boolean>;
    /**
     * AWS IAM secret access key.
     */
    eksSecretAccessKey?: pulumi.Input<string>;
    /**
     * Enable the use of AWS hosted Elasticsearch.
     */
    elasticsearchAws?: pulumi.Input<boolean>;
    /**
     * AWS IAM access key.
     */
    elasticsearchAwsAccessKey?: pulumi.Input<string>;
    /**
     * The AWS region the Elasticsearch domain is configured.
     */
    elasticsearchAwsRegion?: pulumi.Input<string>;
    /**
     * AWS IAM secret access key.
     */
    elasticsearchAwsSecretAccessKey?: pulumi.Input<string>;
    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     */
    elasticsearchIndexedFieldLengthLimit?: pulumi.Input<number>;
    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     */
    elasticsearchIndexedFileSizeLimitKb?: pulumi.Input<number>;
    /**
     * Enable Elasticsearch indexing.
     */
    elasticsearchIndexing?: pulumi.Input<boolean>;
    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     */
    elasticsearchLimitIndexing?: pulumi.Input<boolean>;
    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkConcurrency?: pulumi.Input<number>;
    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkSizeMb?: pulumi.Input<number>;
    /**
     * Maximum concurrency of Elasticsearch code indexing background jobs. This only applies to repository indexing operations. Premium and Ultimate only.
     */
    elasticsearchMaxCodeIndexingConcurrency?: pulumi.Input<number>;
    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchNamespaceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The password of your Elasticsearch instance.
     */
    elasticsearchPassword?: pulumi.Input<string>;
    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchProjectIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable automatic requeuing of indexing workers. This improves non-code indexing throughput by enqueuing Sidekiq jobs until all documents are processed. Premium and Ultimate only.
     */
    elasticsearchRequeueWorkers?: pulumi.Input<boolean>;
    /**
     * Enable Elasticsearch search.
     */
    elasticsearchSearch?: pulumi.Input<boolean>;
    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     */
    elasticsearchUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username of your Elasticsearch instance.
     */
    elasticsearchUsername?: pulumi.Input<string>;
    /**
     * Number of indexing worker shards. This improves non-code indexing throughput by enqueuing more parallel Sidekiq jobs. Premium and Ultimate only.
     */
    elasticsearchWorkerNumberOfShards?: pulumi.Input<number>;
    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     */
    emailAdditionalText?: pulumi.Input<string>;
    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     */
    emailAuthorInBody?: pulumi.Input<boolean>;
    /**
     * Specifies whether users must confirm their email before sign in. Possible values are off, soft, and hard.
     */
    emailConfirmationSetting?: pulumi.Input<string>;
    /**
     * Show the external redirect page that warns you about user-generated content in GitLab Pages.
     */
    enableArtifactExternalRedirectWarningPage?: pulumi.Input<boolean>;
    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     */
    enabledGitAccessProtocol?: pulumi.Input<string>;
    /**
     * Enabling this permits enforcement of namespace storage limits.
     */
    enforceNamespaceStorageLimit?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     */
    enforceTerms?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     */
    externalAuthClientCert?: pulumi.Input<string>;
    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     */
    externalAuthClientKey?: pulumi.Input<string>;
    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     */
    externalAuthClientKeyPass?: pulumi.Input<string>;
    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     */
    externalAuthorizationServiceDefaultLabel?: pulumi.Input<string>;
    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     */
    externalAuthorizationServiceEnabled?: pulumi.Input<boolean>;
    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     */
    externalAuthorizationServiceTimeout?: pulumi.Input<number>;
    /**
     * URL to which authorization requests are directed.
     */
    externalAuthorizationServiceUrl?: pulumi.Input<string>;
    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     */
    externalPipelineValidationServiceTimeout?: pulumi.Input<number>;
    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     */
    externalPipelineValidationServiceToken?: pulumi.Input<string>;
    /**
     * URL to use for pipeline validation requests.
     */
    externalPipelineValidationServiceUrl?: pulumi.Input<string>;
    /**
     * Time period in minutes after which the user is unlocked when maximum number of failed sign-in attempts reached.
     */
    failedLoginAttemptsUnlockPeriodInMinutes?: pulumi.Input<number>;
    /**
     * The ID of a project to load custom file templates from.
     */
    fileTemplateProjectId?: pulumi.Input<number>;
    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
     */
    firstDayOfWeek?: pulumi.Input<number>;
    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     */
    geoNodeAllowedIps?: pulumi.Input<string>;
    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     */
    geoStatusTimeout?: pulumi.Input<number>;
    /**
     * List of user IDs that are emailed when the Git abuse rate limit is exceeded. Maximum: 100 user IDs. Self-managed, Ultimate only.
     */
    gitRateLimitUsersAlertlists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Self-managed, Ultimate only.
     */
    gitRateLimitUsersAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     */
    gitTwoFactorSessionExpiry?: pulumi.Input<number>;
    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     */
    gitalyTimeoutDefault?: pulumi.Input<number>;
    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     */
    gitalyTimeoutFast?: pulumi.Input<number>;
    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     */
    gitalyTimeoutMedium?: pulumi.Input<number>;
    /**
     * Maximum number of Git operations per minute a user can perform.
     */
    gitlabShellOperationLimit?: pulumi.Input<number>;
    /**
     * Enable Gitpod integration.
     */
    gitpodEnabled?: pulumi.Input<boolean>;
    /**
     * The Gitpod instance URL for integration.
     */
    gitpodUrl?: pulumi.Input<string>;
    /**
     * Comma-separated list of IP addresses and CIDRs always allowed for inbound traffic. For example, 1.1.1.1, 2.2.2.0/24.
     */
    globallyAllowedIps?: pulumi.Input<string>;
    /**
     * Enable Grafana.
     */
    grafanaEnabled?: pulumi.Input<boolean>;
    /**
     * Grafana URL.
     */
    grafanaUrl?: pulumi.Input<string>;
    /**
     * Enable Gravatar.
     */
    gravatarEnabled?: pulumi.Input<boolean>;
    /**
     * Prevent overrides of default branch protection.
     */
    groupOwnersCanManageDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Hide marketing-related entries from help.
     */
    helpPageHideCommercialContent?: pulumi.Input<boolean>;
    /**
     * Alternate support URL for help page and help dropdown.
     */
    helpPageSupportUrl?: pulumi.Input<string>;
    /**
     * Custom text displayed on the help page.
     */
    helpPageText?: pulumi.Input<string>;
    /**
     * GitLab server administrator information.
     */
    helpText?: pulumi.Input<string>;
    /**
     * Do not display offers from third parties in GitLab.
     */
    hideThirdPartyOffers?: pulumi.Input<boolean>;
    /**
     * Redirect to this URL when not logged in.
     */
    homePageUrl?: pulumi.Input<string>;
    /**
     * Enable or disable Git housekeeping. If enabled, requires housekeeping*optimize*repository_period.
     */
    housekeepingEnabled?: pulumi.Input<boolean>;
    /**
     * Number of Git pushes after which an incremental git-repack is run.
     */
    housekeepingOptimizeRepositoryPeriod?: pulumi.Input<number>;
    /**
     * Enable HTML emails.
     */
    htmlEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucketServer`, `fogbugz`, `git`, `gitlab.Project`, `gitea`, `manifest`
     */
    importSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable in-product marketing emails.
     */
    inProductMarketingEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects.
     */
    inactiveProjectsDeleteAfterMonths?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity.
     */
    inactiveProjectsMinSizeMb?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive.
     */
    inactiveProjectsSendWarningEmailAfterMonths?: pulumi.Input<number>;
    /**
     * Whether or not optional metrics are enabled in Service Ping.
     */
    includeOptionalMetricsInServicePing?: pulumi.Input<boolean>;
    /**
     * Enable Invisible CAPTCHA spam detection during sign-up.
     */
    invisibleCaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Max number of issue creation requests per minute per user.
     */
    issuesCreateLimit?: pulumi.Input<number>;
    /**
     * ID of the OAuth application used to authenticate with the GitLab for Jira Cloud app.
     */
    jiraConnectApplicationKey?: pulumi.Input<string>;
    /**
     * URL of the GitLab instance used as a proxy for the GitLab for Jira Cloud app.
     */
    jiraConnectProxyUrl?: pulumi.Input<string>;
    /**
     * Enable public key storage for the GitLab for Jira Cloud app.
     */
    jiraConnectPublicKeyStorageEnabled?: pulumi.Input<boolean>;
    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
     */
    keepLatestArtifact?: pulumi.Input<boolean>;
    /**
     * Increase this value when any cached Markdown should be invalidated.
     */
    localMarkdownVersion?: pulumi.Input<number>;
    /**
     * Indicates whether the GitLab Duo features enabled setting is enforced for all subgroups. Self-managed, Premium and Ultimate only.
     */
    lockDuoFeaturesEnabled?: pulumi.Input<boolean>;
    /**
     * Set to true to lock all memberships to LDAP. Premium and Ultimate only.
     */
    lockMembershipsToLdap?: pulumi.Input<boolean>;
    /**
     * Enable Mailgun event receiver.
     */
    mailgunEventsEnabled?: pulumi.Input<boolean>;
    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     */
    mailgunSigningKey?: pulumi.Input<string>;
    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     */
    maintenanceMode?: pulumi.Input<boolean>;
    /**
     * Message displayed when instance is in maintenance mode.
     */
    maintenanceModeMessage?: pulumi.Input<string>;
    /**
     * Use repo.maven.apache.org as a default remote repository when the package is not found in the GitLab Package Registry for Maven. Premium and Ultimate only.
     */
    mavenPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * Maximum artifacts size in MB.
     */
    maxArtifactsSize?: pulumi.Input<number>;
    /**
     * Limit attachment size in MB.
     */
    maxAttachmentSize?: pulumi.Input<number>;
    /**
     * Maximum decompressed archive size in bytes.
     */
    maxDecompressedArchiveSize?: pulumi.Input<number>;
    /**
     * Maximum export size in MB. 0 for unlimited.
     */
    maxExportSize?: pulumi.Input<number>;
    /**
     * Maximum remote file size for imports from external object storages.
     */
    maxImportRemoteFileSize?: pulumi.Input<number>;
    /**
     * Maximum import size in MB. 0 for unlimited.
     */
    maxImportSize?: pulumi.Input<number>;
    /**
     * Maximum number of sign-in attempts before locking out the user.
     */
    maxLoginAttempts?: pulumi.Input<number>;
    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories.
     */
    maxNumberOfRepositoryDownloads?: pulumi.Input<number>;
    /**
     * Reporting time period (in seconds). Maximum: 864000 seconds (10 days).
     */
    maxNumberOfRepositoryDownloadsWithinTimePeriod?: pulumi.Input<number>;
    /**
     * Maximum size of pages repositories in MB.
     */
    maxPagesSize?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for access tokens in days.
     */
    maxPersonalAccessTokenLifetime?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for SSH keys in days.
     */
    maxSshKeyLifetime?: pulumi.Input<number>;
    maxTerraformStateSizeBytes?: pulumi.Input<number>;
    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     */
    metricsMethodCallThreshold?: pulumi.Input<number>;
    /**
     * Indicates whether passwords require a minimum length. Premium and Ultimate only.
     */
    minimumPasswordLength?: pulumi.Input<number>;
    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     */
    mirrorAvailable?: pulumi.Input<boolean>;
    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     */
    mirrorCapacityThreshold?: pulumi.Input<number>;
    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     */
    mirrorMaxCapacity?: pulumi.Input<number>;
    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     */
    mirrorMaxDelay?: pulumi.Input<number>;
    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     */
    npmPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * Indicates whether to skip metadata URL validation for the NuGet package.
     */
    nugetSkipMetadataUrlValidation?: pulumi.Input<boolean>;
    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     */
    outboundLocalRequestsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of package registry metadata to sync. See the list of the available values (https://gitlab.com/gitlab-org/gitlab/-/blob/ace16c20d5da7c4928dd03fb139692638b557fe3/app/models/concerns/enums/package_metadata.rb#L5). Self-managed, Ultimate only.
     */
    packageMetadataPurlTypes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable to allow anyone to pull from Package Registry visible and changeable.
     */
    packageRegistryAllowAnyoneToPullOption?: pulumi.Input<boolean>;
    /**
     * Number of workers assigned to the packages cleanup policies.
     */
    packageRegistryCleanupPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     */
    pagesDomainVerificationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password.
     */
    passwordAuthenticationEnabledForGit?: pulumi.Input<boolean>;
    /**
     * Enable authentication for the web interface via a GitLab account password.
     */
    passwordAuthenticationEnabledForWeb?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one lowercase letter.
     */
    passwordLowercaseRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one number.
     */
    passwordNumberRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one symbol character.
     */
    passwordSymbolRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one uppercase letter.
     */
    passwordUppercaseRequired?: pulumi.Input<boolean>;
    /**
     * Path of the group that is allowed to toggle the performance bar.
     */
    performanceBarAllowedGroupPath?: pulumi.Input<string>;
    /**
     * Prefix for all generated personal access tokens.
     */
    personalAccessTokenPrefix?: pulumi.Input<string>;
    /**
     * Maximum number of pipeline creation requests per minute per user and commit.
     */
    pipelineLimitPerProjectUserSha?: pulumi.Input<number>;
    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration.
     */
    plantumlEnabled?: pulumi.Input<boolean>;
    /**
     * The PlantUML instance URL for integration.
     */
    plantumlUrl?: pulumi.Input<string>;
    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     */
    pollingIntervalMultiplier?: pulumi.Input<number>;
    /**
     * Enable project export.
     */
    projectExportEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum authenticated requests to /project/:id/jobs per minute.
     */
    projectJobsApiRateLimit?: pulumi.Input<number>;
    /**
     * Max number of requests per 10 minutes per IP address for unauthenticated requests to the list all projects API. To disable throttling set to 0.
     */
    projectsApiRateLimitUnauthenticated?: pulumi.Input<number>;
    /**
     * Enable Prometheus metrics.
     */
    prometheusMetricsEnabled?: pulumi.Input<boolean>;
    /**
     * CI/CD variables are protected by default.
     */
    protectedCiVariables?: pulumi.Input<boolean>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     */
    pushEventActivitiesLimit?: pulumi.Input<number>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     */
    pushEventHooksLimit?: pulumi.Input<number>;
    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     */
    pypiPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     */
    rateLimitingResponseText?: pulumi.Input<string>;
    /**
     * Max number of requests per minute for each raw path. To disable throttling set to 0.
     */
    rawBlobRequestLimit?: pulumi.Input<number>;
    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     */
    recaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Private key for reCAPTCHA.
     */
    recaptchaPrivateKey?: pulumi.Input<string>;
    /**
     * Site key for reCAPTCHA.
     */
    recaptchaSiteKey?: pulumi.Input<string>;
    /**
     * Maximum push size (MB).
     */
    receiveMaxInputSize?: pulumi.Input<number>;
    /**
     * Enable receptive mode for GitLab Agents for Kubernetes.
     */
    receptiveClusterAgentsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Remember me setting.
     */
    rememberMeEnabled?: pulumi.Input<boolean>;
    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     */
    repositoryChecksEnabled?: pulumi.Input<boolean>;
    /**
     * Size limit per repository (MB).
     */
    repositorySizeLimit?: pulumi.Input<number>;
    /**
     * Hash of names taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     */
    repositoryStoragesWeighted?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     */
    requireAdminApprovalAfterUserSignup?: pulumi.Input<boolean>;
    /**
     * Allow administrators to require 2FA for all administrators on the instance.
     */
    requireAdminTwoFactorAuthentication?: pulumi.Input<boolean>;
    /**
     * When enabled, users must set an expiration date when creating a group or project access token, or a personal access token owned by a non-service account.
     */
    requirePersonalAccessTokenExpiry?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     */
    requireTwoFactorAuthentication?: pulumi.Input<boolean>;
    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
     */
    restrictedVisibilityLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
     */
    rsaKeyRestriction?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
     */
    searchRateLimit?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
     */
    searchRateLimitUnauthenticated?: pulumi.Input<number>;
    /**
     * Maximum number of active merge request approval policies per security policy project. Maximum: 20
     */
    securityApprovalPoliciesLimit?: pulumi.Input<number>;
    /**
     * Whether to look up merge request approval policy approval groups globally or within project hierarchies.
     */
    securityPolicyGlobalGroupApproversEnabled?: pulumi.Input<boolean>;
    /**
     * Public security contact information.
     */
    securityTxtContent?: pulumi.Input<string>;
    /**
     * Send confirmation email on sign-up.
     */
    sendUserConfirmationEmail?: pulumi.Input<boolean>;
    /**
     * Flag to indicate if token expiry date can be optional for service account users
     */
    serviceAccessTokensExpirationEnforced?: pulumi.Input<boolean>;
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     */
    sessionExpireDelay?: pulumi.Input<number>;
    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     */
    sharedRunnersMinutes?: pulumi.Input<number>;
    /**
     * Shared runners text.
     */
    sharedRunnersText?: pulumi.Input<string>;
    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
     */
    sidekiqJobLimiterCompressionThresholdBytes?: pulumi.Input<number>;
    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
     */
    sidekiqJobLimiterLimitBytes?: pulumi.Input<number>;
    /**
     * track or compress. Sets the behavior for Sidekiq job size limits.
     */
    sidekiqJobLimiterMode?: pulumi.Input<string>;
    /**
     * Text on the login page.
     */
    signInText?: pulumi.Input<string>;
    /**
     * Enable registration.
     */
    signupEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Silent admin exports.
     */
    silentAdminExportsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Silent mode.
     */
    silentModeEnabled?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     */
    slackAppEnabled?: pulumi.Input<boolean>;
    /**
     * The app ID of the Slack-app.
     */
    slackAppId?: pulumi.Input<string>;
    /**
     * The app secret of the Slack-app.
     */
    slackAppSecret?: pulumi.Input<string>;
    /**
     * The signing secret of the Slack-app.
     */
    slackAppSigningSecret?: pulumi.Input<string>;
    /**
     * The verification token of the Slack-app.
     */
    slackAppVerificationToken?: pulumi.Input<string>;
    /**
     * Max snippet content size in bytes.
     */
    snippetSizeLimit?: pulumi.Input<number>;
    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     */
    snowplowAppId?: pulumi.Input<string>;
    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     */
    snowplowCollectorHostname?: pulumi.Input<string>;
    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     */
    snowplowCookieDomain?: pulumi.Input<string>;
    /**
     * The Snowplow collector for database events hostname. (for example, db-snowplow.trx.gitlab.net)
     */
    snowplowDatabaseCollectorHostname?: pulumi.Input<string>;
    /**
     * Enable snowplow tracking.
     */
    snowplowEnabled?: pulumi.Input<boolean>;
    /**
     * Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
     */
    sourcegraphEnabled?: pulumi.Input<boolean>;
    /**
     * Blocks Sourcegraph from being loaded on private and internal projects.
     */
    sourcegraphPublicOnly?: pulumi.Input<boolean>;
    /**
     * The Sourcegraph instance URL for integration.
     */
    sourcegraphUrl?: pulumi.Input<string>;
    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     */
    spamCheckApiKey?: pulumi.Input<string>;
    /**
     * Enables spam checking using external Spam Check API endpoint.
     */
    spamCheckEndpointEnabled?: pulumi.Input<boolean>;
    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     */
    spamCheckEndpointUrl?: pulumi.Input<string>;
    /**
     * Authentication token for the external storage linked in static*objects*external*storage*url.
     */
    staticObjectsExternalStorageAuthToken?: pulumi.Input<string>;
    /**
     * URL to an external storage for repository static objects.
     */
    staticObjectsExternalStorageUrl?: pulumi.Input<string>;
    /**
     * Enable pipeline suggestion banner.
     */
    suggestPipelineEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     */
    terminalMaxSessionTime?: pulumi.Input<number>;
    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     */
    terms?: pulumi.Input<string>;
    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * Limit display of time tracking units to hours.
     */
    timeTrackingLimitToHours?: pulumi.Input<boolean>;
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     */
    twoFactorGracePeriod?: pulumi.Input<number>;
    /**
     * Specifies how many days after sign-up to delete users who have not confirmed their email. Only applicable if delete*unconfirmed*users is set to true. Must be 1 or greater. Self-managed, Premium and Ultimate only.
     */
    unconfirmedUsersDeleteAfterDays?: pulumi.Input<number>;
    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     */
    uniqueIpsLimitEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum number of IPs per user.
     */
    uniqueIpsLimitPerUser?: pulumi.Input<number>;
    /**
     * How many seconds an IP is counted towards the limit.
     */
    uniqueIpsLimitTimeWindow?: pulumi.Input<number>;
    /**
     * Fetch GitLab Runner release version data from GitLab.com.
     */
    updateRunnerVersionsEnabled?: pulumi.Input<boolean>;
    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     */
    usagePingEnabled?: pulumi.Input<boolean>;
    /**
     * Enables ClickHouse as a data source for analytics reports. ClickHouse must be configured for this setting to take effect. Available on Premium and Ultimate only.
     */
    useClickhouseForAnalytics?: pulumi.Input<boolean>;
    /**
     * Send an email to users upon account deactivation.
     */
    userDeactivationEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Newly registered users are external by default.
     */
    userDefaultExternal?: pulumi.Input<boolean>;
    /**
     * Specify an email address regex pattern to identify default internal users.
     */
    userDefaultInternalRegex?: pulumi.Input<string>;
    /**
     * Newly created users have private profile by default.
     */
    userDefaultsToPrivateProfile?: pulumi.Input<boolean>;
    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     */
    userOauthApplications?: pulumi.Input<boolean>;
    /**
     * When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     */
    userShowAddSshKeyMessage?: pulumi.Input<boolean>;
    /**
     * List of types which are allowed to register a GitLab Runner. Can be [], ['group'], ['project'] or ['group', 'project'].
     */
    validRunnerRegistrars?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Let GitLab inform you when an update is available.
     */
    versionCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     */
    webIdeClientsidePreviewEnabled?: pulumi.Input<boolean>;
    /**
     * What's new variant, possible values: all*tiers, current*tier, and disabled.
     */
    whatsNewVariant?: pulumi.Input<string>;
    /**
     * Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
     */
    wikiPageMaxContentBytes?: pulumi.Input<number>;
}
