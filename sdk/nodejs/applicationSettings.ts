// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * // Set the 2FA settings
 * const _this = new gitlab.ApplicationSettings("this", {
 *     requireTwoFactorAuthentication: true,
 *     twoFactorGracePeriod: 24,
 * });
 * ```
 */
export class ApplicationSettings extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationSettingsState, opts?: pulumi.CustomResourceOptions): ApplicationSettings {
        return new ApplicationSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/applicationSettings:ApplicationSettings';

    /**
     * Returns true if the given object is an instance of ApplicationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationSettings.__pulumiType;
    }

    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     */
    public readonly abuseNotificationEmail!: pulumi.Output<string>;
    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     */
    public readonly adminMode!: pulumi.Output<boolean>;
    /**
     * Where to redirect users after logout.
     */
    public readonly afterSignOutPath!: pulumi.Output<string>;
    /**
     * Text shown to the user after signing up.
     */
    public readonly afterSignUpText!: pulumi.Output<string>;
    /**
     * API key for Akismet spam protection.
     */
    public readonly akismetApiKey!: pulumi.Output<string>;
    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     */
    public readonly akismetEnabled!: pulumi.Output<boolean>;
    /**
     * Set to true to allow group owners to manage LDAP.
     */
    public readonly allowGroupOwnersToManageLdap!: pulumi.Output<boolean>;
    /**
     * Allow requests to the local network from system hooks.
     */
    public readonly allowLocalRequestsFromSystemHooks!: pulumi.Output<boolean>;
    /**
     * Allow requests to the local network from web hooks and services.
     */
    public readonly allowLocalRequestsFromWebHooksAndServices!: pulumi.Output<boolean>;
    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     */
    public readonly archiveBuildsInHumanReadable!: pulumi.Output<string>;
    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     */
    public readonly assetProxyAllowlists!: pulumi.Output<string[]>;
    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     */
    public readonly assetProxyEnabled!: pulumi.Output<boolean>;
    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     */
    public readonly assetProxySecretKey!: pulumi.Output<string>;
    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     */
    public readonly assetProxyUrl!: pulumi.Output<string>;
    /**
     * By default, we write to the authorizedKeys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     */
    public readonly authorizedKeysEnabled!: pulumi.Output<boolean>;
    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     */
    public readonly autoDevopsDomain!: pulumi.Output<string>;
    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     */
    public readonly autoDevopsEnabled!: pulumi.Output<boolean>;
    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     */
    public readonly automaticPurchasedStorageAllocation!: pulumi.Output<boolean>;
    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     */
    public readonly checkNamespacePlan!: pulumi.Output<boolean>;
    /**
     * Custom hostname (for private commit emails).
     */
    public readonly commitEmailHostname!: pulumi.Output<string>;
    /**
     * Enable cleanup policies for all projects.
     */
    public readonly containerExpirationPoliciesEnableHistoricEntries!: pulumi.Output<boolean>;
    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     */
    public readonly containerRegistryCleanupTagsServiceMaxListSize!: pulumi.Output<number>;
    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     */
    public readonly containerRegistryDeleteTagsServiceTimeout!: pulumi.Output<number>;
    /**
     * Caching during the execution of cleanup policies.
     */
    public readonly containerRegistryExpirationPoliciesCaching!: pulumi.Output<boolean>;
    /**
     * Number of workers for cleanup policies.
     */
    public readonly containerRegistryExpirationPoliciesWorkerCapacity!: pulumi.Output<number>;
    /**
     * Container Registry token duration in minutes.
     */
    public readonly containerRegistryTokenExpireDelay!: pulumi.Output<number>;
    /**
     * Enable automatic deactivation of dormant users.
     */
    public readonly deactivateDormantUsers!: pulumi.Output<boolean>;
    /**
     * Set the default expiration time for each job’s artifacts.
     */
    public readonly defaultArtifactsExpireIn!: pulumi.Output<string>;
    /**
     * Instance-level custom initial branch name (introduced in GitLab 13.2).
     */
    public readonly defaultBranchName!: pulumi.Output<string>;
    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
     */
    public readonly defaultBranchProtection!: pulumi.Output<number>;
    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     */
    public readonly defaultCiConfigPath!: pulumi.Output<string>;
    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
     */
    public readonly defaultGroupVisibility!: pulumi.Output<string>;
    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     */
    public readonly defaultProjectCreation!: pulumi.Output<number>;
    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
     */
    public readonly defaultProjectVisibility!: pulumi.Output<string>;
    /**
     * Project limit per user. Default is 100000.
     */
    public readonly defaultProjectsLimit!: pulumi.Output<number>;
    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
     */
    public readonly defaultSnippetVisibility!: pulumi.Output<string>;
    /**
     * Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
     */
    public readonly delayedGroupDeletion!: pulumi.Output<boolean>;
    /**
     * Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
     */
    public readonly delayedProjectDeletion!: pulumi.Output<boolean>;
    /**
     * Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
     */
    public readonly deleteInactiveProjects!: pulumi.Output<boolean>;
    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
     */
    public readonly deletionAdjournedPeriod!: pulumi.Output<number>;
    /**
     * Maximum files in a diff.
     */
    public readonly diffMaxFiles!: pulumi.Output<number>;
    /**
     * Maximum lines in a diff.
     */
    public readonly diffMaxLines!: pulumi.Output<number>;
    /**
     * Maximum diff patch size, in bytes.
     */
    public readonly diffMaxPatchBytes!: pulumi.Output<number>;
    /**
     * Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
     */
    public readonly disableFeedToken!: pulumi.Output<boolean>;
    /**
     * Disabled OAuth sign-in sources.
     */
    public readonly disabledOauthSignInSources!: pulumi.Output<string[]>;
    /**
     * Enforce DNS rebinding attack protection.
     */
    public readonly dnsRebindingProtectionEnabled!: pulumi.Output<boolean>;
    /**
     * Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
     */
    public readonly domainAllowlists!: pulumi.Output<string[]>;
    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     */
    public readonly domainDenylistEnabled!: pulumi.Output<boolean>;
    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     */
    public readonly domainDenylists!: pulumi.Output<string[]>;
    /**
     * The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
     */
    public readonly dsaKeyRestriction!: pulumi.Output<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
     */
    public readonly ecdsaKeyRestriction!: pulumi.Output<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
     */
    public readonly ecdsaSkKeyRestriction!: pulumi.Output<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
     */
    public readonly ed25519KeyRestriction!: pulumi.Output<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
     */
    public readonly ed25519SkKeyRestriction!: pulumi.Output<number>;
    /**
     * AWS IAM access key ID.
     */
    public readonly eksAccessKeyId!: pulumi.Output<string>;
    /**
     * Amazon account ID.
     */
    public readonly eksAccountId!: pulumi.Output<string>;
    /**
     * Enable integration with Amazon EKS.
     */
    public readonly eksIntegrationEnabled!: pulumi.Output<boolean>;
    /**
     * AWS IAM secret access key.
     */
    public readonly eksSecretAccessKey!: pulumi.Output<string>;
    /**
     * Enable the use of AWS hosted Elasticsearch.
     */
    public readonly elasticsearchAws!: pulumi.Output<boolean>;
    /**
     * AWS IAM access key.
     */
    public readonly elasticsearchAwsAccessKey!: pulumi.Output<string>;
    /**
     * The AWS region the Elasticsearch domain is configured.
     */
    public readonly elasticsearchAwsRegion!: pulumi.Output<string>;
    /**
     * AWS IAM secret access key.
     */
    public readonly elasticsearchAwsSecretAccessKey!: pulumi.Output<string>;
    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     */
    public readonly elasticsearchIndexedFieldLengthLimit!: pulumi.Output<number>;
    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     */
    public readonly elasticsearchIndexedFileSizeLimitKb!: pulumi.Output<number>;
    /**
     * Enable Elasticsearch indexing.
     */
    public readonly elasticsearchIndexing!: pulumi.Output<boolean>;
    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     */
    public readonly elasticsearchLimitIndexing!: pulumi.Output<boolean>;
    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     */
    public readonly elasticsearchMaxBulkConcurrency!: pulumi.Output<number>;
    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     */
    public readonly elasticsearchMaxBulkSizeMb!: pulumi.Output<number>;
    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    public readonly elasticsearchNamespaceIds!: pulumi.Output<string[]>;
    /**
     * The password of your Elasticsearch instance.
     */
    public readonly elasticsearchPassword!: pulumi.Output<string>;
    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    public readonly elasticsearchProjectIds!: pulumi.Output<string[]>;
    /**
     * Enable Elasticsearch search.
     */
    public readonly elasticsearchSearch!: pulumi.Output<boolean>;
    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     */
    public readonly elasticsearchUrls!: pulumi.Output<string[]>;
    /**
     * The username of your Elasticsearch instance.
     */
    public readonly elasticsearchUsername!: pulumi.Output<string>;
    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     */
    public readonly emailAdditionalText!: pulumi.Output<string>;
    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     */
    public readonly emailAuthorInBody!: pulumi.Output<boolean>;
    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     */
    public readonly enabledGitAccessProtocol!: pulumi.Output<string>;
    /**
     * Enabling this permits enforcement of namespace storage limits.
     */
    public readonly enforceNamespaceStorageLimit!: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     */
    public readonly enforceTerms!: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     */
    public readonly externalAuthClientCert!: pulumi.Output<string>;
    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     */
    public readonly externalAuthClientKey!: pulumi.Output<string>;
    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     */
    public readonly externalAuthClientKeyPass!: pulumi.Output<string>;
    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     */
    public readonly externalAuthorizationServiceDefaultLabel!: pulumi.Output<string>;
    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     */
    public readonly externalAuthorizationServiceEnabled!: pulumi.Output<boolean>;
    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     */
    public readonly externalAuthorizationServiceTimeout!: pulumi.Output<number>;
    /**
     * URL to which authorization requests are directed.
     */
    public readonly externalAuthorizationServiceUrl!: pulumi.Output<string>;
    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     */
    public readonly externalPipelineValidationServiceTimeout!: pulumi.Output<number>;
    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     */
    public readonly externalPipelineValidationServiceToken!: pulumi.Output<string>;
    /**
     * URL to use for pipeline validation requests.
     */
    public readonly externalPipelineValidationServiceUrl!: pulumi.Output<string>;
    /**
     * The ID of a project to load custom file templates from.
     */
    public readonly fileTemplateProjectId!: pulumi.Output<number>;
    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
     */
    public readonly firstDayOfWeek!: pulumi.Output<number>;
    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     */
    public readonly geoNodeAllowedIps!: pulumi.Output<string>;
    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     */
    public readonly geoStatusTimeout!: pulumi.Output<number>;
    /**
     * List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
     */
    public readonly gitRateLimitUsersAllowlists!: pulumi.Output<string[]>;
    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     */
    public readonly gitTwoFactorSessionExpiry!: pulumi.Output<number>;
    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     */
    public readonly gitalyTimeoutDefault!: pulumi.Output<number>;
    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     */
    public readonly gitalyTimeoutFast!: pulumi.Output<number>;
    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     */
    public readonly gitalyTimeoutMedium!: pulumi.Output<number>;
    /**
     * Enable Grafana.
     */
    public readonly grafanaEnabled!: pulumi.Output<boolean>;
    /**
     * Grafana URL.
     */
    public readonly grafanaUrl!: pulumi.Output<string>;
    /**
     * Enable Gravatar.
     */
    public readonly gravatarEnabled!: pulumi.Output<boolean>;
    /**
     * Prevent overrides of default branch protection.
     */
    public readonly groupOwnersCanManageDefaultBranchProtection!: pulumi.Output<boolean>;
    /**
     * Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
     */
    public readonly hashedStorageEnabled!: pulumi.Output<boolean>;
    /**
     * Hide marketing-related entries from help.
     */
    public readonly helpPageHideCommercialContent!: pulumi.Output<boolean>;
    /**
     * Alternate support URL for help page and help dropdown.
     */
    public readonly helpPageSupportUrl!: pulumi.Output<string>;
    /**
     * Custom text displayed on the help page.
     */
    public readonly helpPageText!: pulumi.Output<string>;
    /**
     * GitLab server administrator information.
     */
    public readonly helpText!: pulumi.Output<string>;
    /**
     * Do not display offers from third parties in GitLab.
     */
    public readonly hideThirdPartyOffers!: pulumi.Output<boolean>;
    /**
     * Redirect to this URL when not logged in.
     */
    public readonly homePageUrl!: pulumi.Output<string>;
    /**
     * (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
     */
    public readonly housekeepingEnabled!: pulumi.Output<boolean>;
    /**
     * Number of Git pushes after which an incremental git repack is run.
     */
    public readonly housekeepingFullRepackPeriod!: pulumi.Output<number>;
    /**
     * Number of Git pushes after which git gc is run.
     */
    public readonly housekeepingGcPeriod!: pulumi.Output<number>;
    /**
     * Number of Git pushes after which an incremental git repack is run.
     */
    public readonly housekeepingIncrementalRepackPeriod!: pulumi.Output<number>;
    /**
     * Enable HTML emails.
     */
    public readonly htmlEmailsEnabled!: pulumi.Output<boolean>;
    /**
     * Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
     */
    public readonly importSources!: pulumi.Output<string[]>;
    /**
     * Enable in-product marketing emails. Enabled by default.
     */
    public readonly inProductMarketingEmailsEnabled!: pulumi.Output<boolean>;
    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    public readonly inactiveProjectsDeleteAfterMonths!: pulumi.Output<number>;
    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    public readonly inactiveProjectsMinSizeMb!: pulumi.Output<number>;
    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    public readonly inactiveProjectsSendWarningEmailAfterMonths!: pulumi.Output<number>;
    /**
     * Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
     */
    public readonly invisibleCaptchaEnabled!: pulumi.Output<boolean>;
    /**
     * Max number of issue creation requests per minute per user. Disabled by default.
     */
    public readonly issuesCreateLimit!: pulumi.Output<number>;
    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
     */
    public readonly keepLatestArtifact!: pulumi.Output<boolean>;
    /**
     * Increase this value when any cached Markdown should be invalidated.
     */
    public readonly localMarkdownVersion!: pulumi.Output<number>;
    /**
     * Enable Mailgun event receiver.
     */
    public readonly mailgunEventsEnabled!: pulumi.Output<boolean>;
    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     */
    public readonly mailgunSigningKey!: pulumi.Output<string>;
    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     */
    public readonly maintenanceMode!: pulumi.Output<boolean>;
    /**
     * Message displayed when instance is in maintenance mode.
     */
    public readonly maintenanceModeMessage!: pulumi.Output<string>;
    /**
     * Maximum artifacts size in MB.
     */
    public readonly maxArtifactsSize!: pulumi.Output<number>;
    /**
     * Limit attachment size in MB.
     */
    public readonly maxAttachmentSize!: pulumi.Output<number>;
    /**
     * Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
     */
    public readonly maxExportSize!: pulumi.Output<number>;
    /**
     * Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
     */
    public readonly maxImportSize!: pulumi.Output<number>;
    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
     */
    public readonly maxNumberOfRepositoryDownloads!: pulumi.Output<number>;
    /**
     * Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
     */
    public readonly maxNumberOfRepositoryDownloadsWithinTimePeriod!: pulumi.Output<number>;
    /**
     * Maximum size of pages repositories in MB.
     */
    public readonly maxPagesSize!: pulumi.Output<number>;
    /**
     * Maximum allowable lifetime for access tokens in days.
     */
    public readonly maxPersonalAccessTokenLifetime!: pulumi.Output<number>;
    /**
     * Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
     */
    public readonly maxSshKeyLifetime!: pulumi.Output<number>;
    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     */
    public readonly metricsMethodCallThreshold!: pulumi.Output<number>;
    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     */
    public readonly mirrorAvailable!: pulumi.Output<boolean>;
    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     */
    public readonly mirrorCapacityThreshold!: pulumi.Output<number>;
    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     */
    public readonly mirrorMaxCapacity!: pulumi.Output<number>;
    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     */
    public readonly mirrorMaxDelay!: pulumi.Output<number>;
    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     */
    public readonly npmPackageRequestsForwarding!: pulumi.Output<boolean>;
    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     */
    public readonly outboundLocalRequestsWhitelists!: pulumi.Output<string[]>;
    /**
     * Number of workers assigned to the packages cleanup policies.
     */
    public readonly packageRegistryCleanupPoliciesWorkerCapacity!: pulumi.Output<number>;
    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     */
    public readonly pagesDomainVerificationEnabled!: pulumi.Output<boolean>;
    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
     */
    public readonly passwordAuthenticationEnabledForGit!: pulumi.Output<boolean>;
    /**
     * Enable authentication for the web interface via a GitLab account password. Default is true.
     */
    public readonly passwordAuthenticationEnabledForWeb!: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
     */
    public readonly passwordLowercaseRequired!: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
     */
    public readonly passwordNumberRequired!: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
     */
    public readonly passwordSymbolRequired!: pulumi.Output<boolean>;
    /**
     * Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
     */
    public readonly passwordUppercaseRequired!: pulumi.Output<boolean>;
    /**
     * Path of the group that is allowed to toggle the performance bar.
     */
    public readonly performanceBarAllowedGroupPath!: pulumi.Output<string>;
    /**
     * Prefix for all generated personal access tokens.
     */
    public readonly personalAccessTokenPrefix!: pulumi.Output<string>;
    /**
     * Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
     */
    public readonly pipelineLimitPerProjectUserSha!: pulumi.Output<number>;
    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
     */
    public readonly plantumlEnabled!: pulumi.Output<boolean>;
    /**
     * The PlantUML instance URL for integration.
     */
    public readonly plantumlUrl!: pulumi.Output<string>;
    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     */
    public readonly pollingIntervalMultiplier!: pulumi.Output<number>;
    /**
     * Enable project export.
     */
    public readonly projectExportEnabled!: pulumi.Output<boolean>;
    /**
     * Enable Prometheus metrics.
     */
    public readonly prometheusMetricsEnabled!: pulumi.Output<boolean>;
    /**
     * CI/CD variables are protected by default.
     */
    public readonly protectedCiVariables!: pulumi.Output<boolean>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     */
    public readonly pushEventActivitiesLimit!: pulumi.Output<number>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     */
    public readonly pushEventHooksLimit!: pulumi.Output<number>;
    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     */
    public readonly pypiPackageRequestsForwarding!: pulumi.Output<boolean>;
    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     */
    public readonly rateLimitingResponseText!: pulumi.Output<string>;
    /**
     * Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
     */
    public readonly rawBlobRequestLimit!: pulumi.Output<number>;
    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     */
    public readonly recaptchaEnabled!: pulumi.Output<boolean>;
    /**
     * Private key for reCAPTCHA.
     */
    public readonly recaptchaPrivateKey!: pulumi.Output<string>;
    /**
     * Site key for reCAPTCHA.
     */
    public readonly recaptchaSiteKey!: pulumi.Output<string>;
    /**
     * Maximum push size (MB).
     */
    public readonly receiveMaxInputSize!: pulumi.Output<number>;
    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     */
    public readonly repositoryChecksEnabled!: pulumi.Output<boolean>;
    /**
     * Size limit per repository (MB).
     */
    public readonly repositorySizeLimit!: pulumi.Output<number>;
    /**
     * (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
     */
    public readonly repositoryStorages!: pulumi.Output<string[]>;
    /**
     * (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     */
    public readonly repositoryStoragesWeighted!: pulumi.Output<{[key: string]: number}>;
    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     */
    public readonly requireAdminApprovalAfterUserSignup!: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     */
    public readonly requireTwoFactorAuthentication!: pulumi.Output<boolean>;
    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
     */
    public readonly restrictedVisibilityLevels!: pulumi.Output<string[]>;
    /**
     * The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
     */
    public readonly rsaKeyRestriction!: pulumi.Output<number>;
    /**
     * Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
     */
    public readonly searchRateLimit!: pulumi.Output<number>;
    /**
     * Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
     */
    public readonly searchRateLimitUnauthenticated!: pulumi.Output<number>;
    /**
     * Send confirmation email on sign-up.
     */
    public readonly sendUserConfirmationEmail!: pulumi.Output<boolean>;
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     */
    public readonly sessionExpireDelay!: pulumi.Output<number>;
    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     */
    public readonly sharedRunnersEnabled!: pulumi.Output<boolean>;
    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     */
    public readonly sharedRunnersMinutes!: pulumi.Output<number>;
    /**
     * Shared runners text.
     */
    public readonly sharedRunnersText!: pulumi.Output<string>;
    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
     */
    public readonly sidekiqJobLimiterCompressionThresholdBytes!: pulumi.Output<number>;
    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
     */
    public readonly sidekiqJobLimiterLimitBytes!: pulumi.Output<number>;
    /**
     * track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
     */
    public readonly sidekiqJobLimiterMode!: pulumi.Output<string>;
    /**
     * Text on the login page.
     */
    public readonly signInText!: pulumi.Output<string>;
    /**
     * Enable registration. Default is true.
     */
    public readonly signupEnabled!: pulumi.Output<boolean>;
    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     */
    public readonly slackAppEnabled!: pulumi.Output<boolean>;
    /**
     * The app ID of the Slack-app.
     */
    public readonly slackAppId!: pulumi.Output<string>;
    /**
     * The app secret of the Slack-app.
     */
    public readonly slackAppSecret!: pulumi.Output<string>;
    /**
     * The signing secret of the Slack-app.
     */
    public readonly slackAppSigningSecret!: pulumi.Output<string>;
    /**
     * The verification token of the Slack-app.
     */
    public readonly slackAppVerificationToken!: pulumi.Output<string>;
    /**
     * Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
     */
    public readonly snippetSizeLimit!: pulumi.Output<number>;
    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     */
    public readonly snowplowAppId!: pulumi.Output<string>;
    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     */
    public readonly snowplowCollectorHostname!: pulumi.Output<string>;
    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     */
    public readonly snowplowCookieDomain!: pulumi.Output<string>;
    /**
     * Enable snowplow tracking.
     */
    public readonly snowplowEnabled!: pulumi.Output<boolean>;
    /**
     * Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
     */
    public readonly sourcegraphEnabled!: pulumi.Output<boolean>;
    /**
     * Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
     */
    public readonly sourcegraphPublicOnly!: pulumi.Output<boolean>;
    /**
     * The Sourcegraph instance URL for integration.
     */
    public readonly sourcegraphUrl!: pulumi.Output<string>;
    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     */
    public readonly spamCheckApiKey!: pulumi.Output<string>;
    /**
     * Enables spam checking using external Spam Check API endpoint. Default is false.
     */
    public readonly spamCheckEndpointEnabled!: pulumi.Output<boolean>;
    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     */
    public readonly spamCheckEndpointUrl!: pulumi.Output<string>;
    /**
     * Enable pipeline suggestion banner.
     */
    public readonly suggestPipelineEnabled!: pulumi.Output<boolean>;
    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     */
    public readonly terminalMaxSessionTime!: pulumi.Output<number>;
    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     */
    public readonly terms!: pulumi.Output<string>;
    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    public readonly throttleAuthenticatedApiEnabled!: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    public readonly throttleAuthenticatedApiPeriodInSeconds!: pulumi.Output<number>;
    /**
     * Maximum requests per period per user.
     */
    public readonly throttleAuthenticatedApiRequestsPerPeriod!: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    public readonly throttleAuthenticatedPackagesApiEnabled!: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    public readonly throttleAuthenticatedPackagesApiPeriodInSeconds!: pulumi.Output<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    public readonly throttleAuthenticatedPackagesApiRequestsPerPeriod!: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    public readonly throttleAuthenticatedWebEnabled!: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    public readonly throttleAuthenticatedWebPeriodInSeconds!: pulumi.Output<number>;
    /**
     * Maximum requests per period per user.
     */
    public readonly throttleAuthenticatedWebRequestsPerPeriod!: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    public readonly throttleUnauthenticatedApiEnabled!: pulumi.Output<boolean>;
    /**
     * Rate limit period in seconds.
     */
    public readonly throttleUnauthenticatedApiPeriodInSeconds!: pulumi.Output<number>;
    /**
     * Max requests per period per IP.
     */
    public readonly throttleUnauthenticatedApiRequestsPerPeriod!: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    public readonly throttleUnauthenticatedPackagesApiEnabled!: pulumi.Output<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    public readonly throttleUnauthenticatedPackagesApiPeriodInSeconds!: pulumi.Output<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    public readonly throttleUnauthenticatedPackagesApiRequestsPerPeriod!: pulumi.Output<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    public readonly throttleUnauthenticatedWebEnabled!: pulumi.Output<boolean>;
    /**
     * Rate limit period in seconds.
     */
    public readonly throttleUnauthenticatedWebPeriodInSeconds!: pulumi.Output<number>;
    /**
     * Max requests per period per IP.
     */
    public readonly throttleUnauthenticatedWebRequestsPerPeriod!: pulumi.Output<number>;
    /**
     * Limit display of time tracking units to hours. Default is false.
     */
    public readonly timeTrackingLimitToHours!: pulumi.Output<boolean>;
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     */
    public readonly twoFactorGracePeriod!: pulumi.Output<number>;
    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     */
    public readonly uniqueIpsLimitEnabled!: pulumi.Output<boolean>;
    /**
     * Maximum number of IPs per user.
     */
    public readonly uniqueIpsLimitPerUser!: pulumi.Output<number>;
    /**
     * How many seconds an IP is counted towards the limit.
     */
    public readonly uniqueIpsLimitTimeWindow!: pulumi.Output<number>;
    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     */
    public readonly usagePingEnabled!: pulumi.Output<boolean>;
    /**
     * Send an email to users upon account deactivation.
     */
    public readonly userDeactivationEmailsEnabled!: pulumi.Output<boolean>;
    /**
     * Newly registered users are external by default.
     */
    public readonly userDefaultExternal!: pulumi.Output<boolean>;
    /**
     * Specify an email address regex pattern to identify default internal users.
     */
    public readonly userDefaultInternalRegex!: pulumi.Output<string>;
    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     */
    public readonly userOauthApplications!: pulumi.Output<boolean>;
    /**
     * When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     */
    public readonly userShowAddSshKeyMessage!: pulumi.Output<boolean>;
    /**
     * Let GitLab inform you when an update is available.
     */
    public readonly versionCheckEnabled!: pulumi.Output<boolean>;
    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     */
    public readonly webIdeClientsidePreviewEnabled!: pulumi.Output<boolean>;
    /**
     * What’s new variant, possible values: all*tiers, current*tier, and disabled.
     */
    public readonly whatsNewVariant!: pulumi.Output<string>;
    /**
     * Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
     */
    public readonly wikiPageMaxContentBytes!: pulumi.Output<number>;

    /**
     * Create a ApplicationSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationSettingsArgs | ApplicationSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationSettingsState | undefined;
            resourceInputs["abuseNotificationEmail"] = state ? state.abuseNotificationEmail : undefined;
            resourceInputs["adminMode"] = state ? state.adminMode : undefined;
            resourceInputs["afterSignOutPath"] = state ? state.afterSignOutPath : undefined;
            resourceInputs["afterSignUpText"] = state ? state.afterSignUpText : undefined;
            resourceInputs["akismetApiKey"] = state ? state.akismetApiKey : undefined;
            resourceInputs["akismetEnabled"] = state ? state.akismetEnabled : undefined;
            resourceInputs["allowGroupOwnersToManageLdap"] = state ? state.allowGroupOwnersToManageLdap : undefined;
            resourceInputs["allowLocalRequestsFromSystemHooks"] = state ? state.allowLocalRequestsFromSystemHooks : undefined;
            resourceInputs["allowLocalRequestsFromWebHooksAndServices"] = state ? state.allowLocalRequestsFromWebHooksAndServices : undefined;
            resourceInputs["archiveBuildsInHumanReadable"] = state ? state.archiveBuildsInHumanReadable : undefined;
            resourceInputs["assetProxyAllowlists"] = state ? state.assetProxyAllowlists : undefined;
            resourceInputs["assetProxyEnabled"] = state ? state.assetProxyEnabled : undefined;
            resourceInputs["assetProxySecretKey"] = state ? state.assetProxySecretKey : undefined;
            resourceInputs["assetProxyUrl"] = state ? state.assetProxyUrl : undefined;
            resourceInputs["authorizedKeysEnabled"] = state ? state.authorizedKeysEnabled : undefined;
            resourceInputs["autoDevopsDomain"] = state ? state.autoDevopsDomain : undefined;
            resourceInputs["autoDevopsEnabled"] = state ? state.autoDevopsEnabled : undefined;
            resourceInputs["automaticPurchasedStorageAllocation"] = state ? state.automaticPurchasedStorageAllocation : undefined;
            resourceInputs["checkNamespacePlan"] = state ? state.checkNamespacePlan : undefined;
            resourceInputs["commitEmailHostname"] = state ? state.commitEmailHostname : undefined;
            resourceInputs["containerExpirationPoliciesEnableHistoricEntries"] = state ? state.containerExpirationPoliciesEnableHistoricEntries : undefined;
            resourceInputs["containerRegistryCleanupTagsServiceMaxListSize"] = state ? state.containerRegistryCleanupTagsServiceMaxListSize : undefined;
            resourceInputs["containerRegistryDeleteTagsServiceTimeout"] = state ? state.containerRegistryDeleteTagsServiceTimeout : undefined;
            resourceInputs["containerRegistryExpirationPoliciesCaching"] = state ? state.containerRegistryExpirationPoliciesCaching : undefined;
            resourceInputs["containerRegistryExpirationPoliciesWorkerCapacity"] = state ? state.containerRegistryExpirationPoliciesWorkerCapacity : undefined;
            resourceInputs["containerRegistryTokenExpireDelay"] = state ? state.containerRegistryTokenExpireDelay : undefined;
            resourceInputs["deactivateDormantUsers"] = state ? state.deactivateDormantUsers : undefined;
            resourceInputs["defaultArtifactsExpireIn"] = state ? state.defaultArtifactsExpireIn : undefined;
            resourceInputs["defaultBranchName"] = state ? state.defaultBranchName : undefined;
            resourceInputs["defaultBranchProtection"] = state ? state.defaultBranchProtection : undefined;
            resourceInputs["defaultCiConfigPath"] = state ? state.defaultCiConfigPath : undefined;
            resourceInputs["defaultGroupVisibility"] = state ? state.defaultGroupVisibility : undefined;
            resourceInputs["defaultProjectCreation"] = state ? state.defaultProjectCreation : undefined;
            resourceInputs["defaultProjectVisibility"] = state ? state.defaultProjectVisibility : undefined;
            resourceInputs["defaultProjectsLimit"] = state ? state.defaultProjectsLimit : undefined;
            resourceInputs["defaultSnippetVisibility"] = state ? state.defaultSnippetVisibility : undefined;
            resourceInputs["delayedGroupDeletion"] = state ? state.delayedGroupDeletion : undefined;
            resourceInputs["delayedProjectDeletion"] = state ? state.delayedProjectDeletion : undefined;
            resourceInputs["deleteInactiveProjects"] = state ? state.deleteInactiveProjects : undefined;
            resourceInputs["deletionAdjournedPeriod"] = state ? state.deletionAdjournedPeriod : undefined;
            resourceInputs["diffMaxFiles"] = state ? state.diffMaxFiles : undefined;
            resourceInputs["diffMaxLines"] = state ? state.diffMaxLines : undefined;
            resourceInputs["diffMaxPatchBytes"] = state ? state.diffMaxPatchBytes : undefined;
            resourceInputs["disableFeedToken"] = state ? state.disableFeedToken : undefined;
            resourceInputs["disabledOauthSignInSources"] = state ? state.disabledOauthSignInSources : undefined;
            resourceInputs["dnsRebindingProtectionEnabled"] = state ? state.dnsRebindingProtectionEnabled : undefined;
            resourceInputs["domainAllowlists"] = state ? state.domainAllowlists : undefined;
            resourceInputs["domainDenylistEnabled"] = state ? state.domainDenylistEnabled : undefined;
            resourceInputs["domainDenylists"] = state ? state.domainDenylists : undefined;
            resourceInputs["dsaKeyRestriction"] = state ? state.dsaKeyRestriction : undefined;
            resourceInputs["ecdsaKeyRestriction"] = state ? state.ecdsaKeyRestriction : undefined;
            resourceInputs["ecdsaSkKeyRestriction"] = state ? state.ecdsaSkKeyRestriction : undefined;
            resourceInputs["ed25519KeyRestriction"] = state ? state.ed25519KeyRestriction : undefined;
            resourceInputs["ed25519SkKeyRestriction"] = state ? state.ed25519SkKeyRestriction : undefined;
            resourceInputs["eksAccessKeyId"] = state ? state.eksAccessKeyId : undefined;
            resourceInputs["eksAccountId"] = state ? state.eksAccountId : undefined;
            resourceInputs["eksIntegrationEnabled"] = state ? state.eksIntegrationEnabled : undefined;
            resourceInputs["eksSecretAccessKey"] = state ? state.eksSecretAccessKey : undefined;
            resourceInputs["elasticsearchAws"] = state ? state.elasticsearchAws : undefined;
            resourceInputs["elasticsearchAwsAccessKey"] = state ? state.elasticsearchAwsAccessKey : undefined;
            resourceInputs["elasticsearchAwsRegion"] = state ? state.elasticsearchAwsRegion : undefined;
            resourceInputs["elasticsearchAwsSecretAccessKey"] = state ? state.elasticsearchAwsSecretAccessKey : undefined;
            resourceInputs["elasticsearchIndexedFieldLengthLimit"] = state ? state.elasticsearchIndexedFieldLengthLimit : undefined;
            resourceInputs["elasticsearchIndexedFileSizeLimitKb"] = state ? state.elasticsearchIndexedFileSizeLimitKb : undefined;
            resourceInputs["elasticsearchIndexing"] = state ? state.elasticsearchIndexing : undefined;
            resourceInputs["elasticsearchLimitIndexing"] = state ? state.elasticsearchLimitIndexing : undefined;
            resourceInputs["elasticsearchMaxBulkConcurrency"] = state ? state.elasticsearchMaxBulkConcurrency : undefined;
            resourceInputs["elasticsearchMaxBulkSizeMb"] = state ? state.elasticsearchMaxBulkSizeMb : undefined;
            resourceInputs["elasticsearchNamespaceIds"] = state ? state.elasticsearchNamespaceIds : undefined;
            resourceInputs["elasticsearchPassword"] = state ? state.elasticsearchPassword : undefined;
            resourceInputs["elasticsearchProjectIds"] = state ? state.elasticsearchProjectIds : undefined;
            resourceInputs["elasticsearchSearch"] = state ? state.elasticsearchSearch : undefined;
            resourceInputs["elasticsearchUrls"] = state ? state.elasticsearchUrls : undefined;
            resourceInputs["elasticsearchUsername"] = state ? state.elasticsearchUsername : undefined;
            resourceInputs["emailAdditionalText"] = state ? state.emailAdditionalText : undefined;
            resourceInputs["emailAuthorInBody"] = state ? state.emailAuthorInBody : undefined;
            resourceInputs["enabledGitAccessProtocol"] = state ? state.enabledGitAccessProtocol : undefined;
            resourceInputs["enforceNamespaceStorageLimit"] = state ? state.enforceNamespaceStorageLimit : undefined;
            resourceInputs["enforceTerms"] = state ? state.enforceTerms : undefined;
            resourceInputs["externalAuthClientCert"] = state ? state.externalAuthClientCert : undefined;
            resourceInputs["externalAuthClientKey"] = state ? state.externalAuthClientKey : undefined;
            resourceInputs["externalAuthClientKeyPass"] = state ? state.externalAuthClientKeyPass : undefined;
            resourceInputs["externalAuthorizationServiceDefaultLabel"] = state ? state.externalAuthorizationServiceDefaultLabel : undefined;
            resourceInputs["externalAuthorizationServiceEnabled"] = state ? state.externalAuthorizationServiceEnabled : undefined;
            resourceInputs["externalAuthorizationServiceTimeout"] = state ? state.externalAuthorizationServiceTimeout : undefined;
            resourceInputs["externalAuthorizationServiceUrl"] = state ? state.externalAuthorizationServiceUrl : undefined;
            resourceInputs["externalPipelineValidationServiceTimeout"] = state ? state.externalPipelineValidationServiceTimeout : undefined;
            resourceInputs["externalPipelineValidationServiceToken"] = state ? state.externalPipelineValidationServiceToken : undefined;
            resourceInputs["externalPipelineValidationServiceUrl"] = state ? state.externalPipelineValidationServiceUrl : undefined;
            resourceInputs["fileTemplateProjectId"] = state ? state.fileTemplateProjectId : undefined;
            resourceInputs["firstDayOfWeek"] = state ? state.firstDayOfWeek : undefined;
            resourceInputs["geoNodeAllowedIps"] = state ? state.geoNodeAllowedIps : undefined;
            resourceInputs["geoStatusTimeout"] = state ? state.geoStatusTimeout : undefined;
            resourceInputs["gitRateLimitUsersAllowlists"] = state ? state.gitRateLimitUsersAllowlists : undefined;
            resourceInputs["gitTwoFactorSessionExpiry"] = state ? state.gitTwoFactorSessionExpiry : undefined;
            resourceInputs["gitalyTimeoutDefault"] = state ? state.gitalyTimeoutDefault : undefined;
            resourceInputs["gitalyTimeoutFast"] = state ? state.gitalyTimeoutFast : undefined;
            resourceInputs["gitalyTimeoutMedium"] = state ? state.gitalyTimeoutMedium : undefined;
            resourceInputs["grafanaEnabled"] = state ? state.grafanaEnabled : undefined;
            resourceInputs["grafanaUrl"] = state ? state.grafanaUrl : undefined;
            resourceInputs["gravatarEnabled"] = state ? state.gravatarEnabled : undefined;
            resourceInputs["groupOwnersCanManageDefaultBranchProtection"] = state ? state.groupOwnersCanManageDefaultBranchProtection : undefined;
            resourceInputs["hashedStorageEnabled"] = state ? state.hashedStorageEnabled : undefined;
            resourceInputs["helpPageHideCommercialContent"] = state ? state.helpPageHideCommercialContent : undefined;
            resourceInputs["helpPageSupportUrl"] = state ? state.helpPageSupportUrl : undefined;
            resourceInputs["helpPageText"] = state ? state.helpPageText : undefined;
            resourceInputs["helpText"] = state ? state.helpText : undefined;
            resourceInputs["hideThirdPartyOffers"] = state ? state.hideThirdPartyOffers : undefined;
            resourceInputs["homePageUrl"] = state ? state.homePageUrl : undefined;
            resourceInputs["housekeepingEnabled"] = state ? state.housekeepingEnabled : undefined;
            resourceInputs["housekeepingFullRepackPeriod"] = state ? state.housekeepingFullRepackPeriod : undefined;
            resourceInputs["housekeepingGcPeriod"] = state ? state.housekeepingGcPeriod : undefined;
            resourceInputs["housekeepingIncrementalRepackPeriod"] = state ? state.housekeepingIncrementalRepackPeriod : undefined;
            resourceInputs["htmlEmailsEnabled"] = state ? state.htmlEmailsEnabled : undefined;
            resourceInputs["importSources"] = state ? state.importSources : undefined;
            resourceInputs["inProductMarketingEmailsEnabled"] = state ? state.inProductMarketingEmailsEnabled : undefined;
            resourceInputs["inactiveProjectsDeleteAfterMonths"] = state ? state.inactiveProjectsDeleteAfterMonths : undefined;
            resourceInputs["inactiveProjectsMinSizeMb"] = state ? state.inactiveProjectsMinSizeMb : undefined;
            resourceInputs["inactiveProjectsSendWarningEmailAfterMonths"] = state ? state.inactiveProjectsSendWarningEmailAfterMonths : undefined;
            resourceInputs["invisibleCaptchaEnabled"] = state ? state.invisibleCaptchaEnabled : undefined;
            resourceInputs["issuesCreateLimit"] = state ? state.issuesCreateLimit : undefined;
            resourceInputs["keepLatestArtifact"] = state ? state.keepLatestArtifact : undefined;
            resourceInputs["localMarkdownVersion"] = state ? state.localMarkdownVersion : undefined;
            resourceInputs["mailgunEventsEnabled"] = state ? state.mailgunEventsEnabled : undefined;
            resourceInputs["mailgunSigningKey"] = state ? state.mailgunSigningKey : undefined;
            resourceInputs["maintenanceMode"] = state ? state.maintenanceMode : undefined;
            resourceInputs["maintenanceModeMessage"] = state ? state.maintenanceModeMessage : undefined;
            resourceInputs["maxArtifactsSize"] = state ? state.maxArtifactsSize : undefined;
            resourceInputs["maxAttachmentSize"] = state ? state.maxAttachmentSize : undefined;
            resourceInputs["maxExportSize"] = state ? state.maxExportSize : undefined;
            resourceInputs["maxImportSize"] = state ? state.maxImportSize : undefined;
            resourceInputs["maxNumberOfRepositoryDownloads"] = state ? state.maxNumberOfRepositoryDownloads : undefined;
            resourceInputs["maxNumberOfRepositoryDownloadsWithinTimePeriod"] = state ? state.maxNumberOfRepositoryDownloadsWithinTimePeriod : undefined;
            resourceInputs["maxPagesSize"] = state ? state.maxPagesSize : undefined;
            resourceInputs["maxPersonalAccessTokenLifetime"] = state ? state.maxPersonalAccessTokenLifetime : undefined;
            resourceInputs["maxSshKeyLifetime"] = state ? state.maxSshKeyLifetime : undefined;
            resourceInputs["metricsMethodCallThreshold"] = state ? state.metricsMethodCallThreshold : undefined;
            resourceInputs["mirrorAvailable"] = state ? state.mirrorAvailable : undefined;
            resourceInputs["mirrorCapacityThreshold"] = state ? state.mirrorCapacityThreshold : undefined;
            resourceInputs["mirrorMaxCapacity"] = state ? state.mirrorMaxCapacity : undefined;
            resourceInputs["mirrorMaxDelay"] = state ? state.mirrorMaxDelay : undefined;
            resourceInputs["npmPackageRequestsForwarding"] = state ? state.npmPackageRequestsForwarding : undefined;
            resourceInputs["outboundLocalRequestsWhitelists"] = state ? state.outboundLocalRequestsWhitelists : undefined;
            resourceInputs["packageRegistryCleanupPoliciesWorkerCapacity"] = state ? state.packageRegistryCleanupPoliciesWorkerCapacity : undefined;
            resourceInputs["pagesDomainVerificationEnabled"] = state ? state.pagesDomainVerificationEnabled : undefined;
            resourceInputs["passwordAuthenticationEnabledForGit"] = state ? state.passwordAuthenticationEnabledForGit : undefined;
            resourceInputs["passwordAuthenticationEnabledForWeb"] = state ? state.passwordAuthenticationEnabledForWeb : undefined;
            resourceInputs["passwordLowercaseRequired"] = state ? state.passwordLowercaseRequired : undefined;
            resourceInputs["passwordNumberRequired"] = state ? state.passwordNumberRequired : undefined;
            resourceInputs["passwordSymbolRequired"] = state ? state.passwordSymbolRequired : undefined;
            resourceInputs["passwordUppercaseRequired"] = state ? state.passwordUppercaseRequired : undefined;
            resourceInputs["performanceBarAllowedGroupPath"] = state ? state.performanceBarAllowedGroupPath : undefined;
            resourceInputs["personalAccessTokenPrefix"] = state ? state.personalAccessTokenPrefix : undefined;
            resourceInputs["pipelineLimitPerProjectUserSha"] = state ? state.pipelineLimitPerProjectUserSha : undefined;
            resourceInputs["plantumlEnabled"] = state ? state.plantumlEnabled : undefined;
            resourceInputs["plantumlUrl"] = state ? state.plantumlUrl : undefined;
            resourceInputs["pollingIntervalMultiplier"] = state ? state.pollingIntervalMultiplier : undefined;
            resourceInputs["projectExportEnabled"] = state ? state.projectExportEnabled : undefined;
            resourceInputs["prometheusMetricsEnabled"] = state ? state.prometheusMetricsEnabled : undefined;
            resourceInputs["protectedCiVariables"] = state ? state.protectedCiVariables : undefined;
            resourceInputs["pushEventActivitiesLimit"] = state ? state.pushEventActivitiesLimit : undefined;
            resourceInputs["pushEventHooksLimit"] = state ? state.pushEventHooksLimit : undefined;
            resourceInputs["pypiPackageRequestsForwarding"] = state ? state.pypiPackageRequestsForwarding : undefined;
            resourceInputs["rateLimitingResponseText"] = state ? state.rateLimitingResponseText : undefined;
            resourceInputs["rawBlobRequestLimit"] = state ? state.rawBlobRequestLimit : undefined;
            resourceInputs["recaptchaEnabled"] = state ? state.recaptchaEnabled : undefined;
            resourceInputs["recaptchaPrivateKey"] = state ? state.recaptchaPrivateKey : undefined;
            resourceInputs["recaptchaSiteKey"] = state ? state.recaptchaSiteKey : undefined;
            resourceInputs["receiveMaxInputSize"] = state ? state.receiveMaxInputSize : undefined;
            resourceInputs["repositoryChecksEnabled"] = state ? state.repositoryChecksEnabled : undefined;
            resourceInputs["repositorySizeLimit"] = state ? state.repositorySizeLimit : undefined;
            resourceInputs["repositoryStorages"] = state ? state.repositoryStorages : undefined;
            resourceInputs["repositoryStoragesWeighted"] = state ? state.repositoryStoragesWeighted : undefined;
            resourceInputs["requireAdminApprovalAfterUserSignup"] = state ? state.requireAdminApprovalAfterUserSignup : undefined;
            resourceInputs["requireTwoFactorAuthentication"] = state ? state.requireTwoFactorAuthentication : undefined;
            resourceInputs["restrictedVisibilityLevels"] = state ? state.restrictedVisibilityLevels : undefined;
            resourceInputs["rsaKeyRestriction"] = state ? state.rsaKeyRestriction : undefined;
            resourceInputs["searchRateLimit"] = state ? state.searchRateLimit : undefined;
            resourceInputs["searchRateLimitUnauthenticated"] = state ? state.searchRateLimitUnauthenticated : undefined;
            resourceInputs["sendUserConfirmationEmail"] = state ? state.sendUserConfirmationEmail : undefined;
            resourceInputs["sessionExpireDelay"] = state ? state.sessionExpireDelay : undefined;
            resourceInputs["sharedRunnersEnabled"] = state ? state.sharedRunnersEnabled : undefined;
            resourceInputs["sharedRunnersMinutes"] = state ? state.sharedRunnersMinutes : undefined;
            resourceInputs["sharedRunnersText"] = state ? state.sharedRunnersText : undefined;
            resourceInputs["sidekiqJobLimiterCompressionThresholdBytes"] = state ? state.sidekiqJobLimiterCompressionThresholdBytes : undefined;
            resourceInputs["sidekiqJobLimiterLimitBytes"] = state ? state.sidekiqJobLimiterLimitBytes : undefined;
            resourceInputs["sidekiqJobLimiterMode"] = state ? state.sidekiqJobLimiterMode : undefined;
            resourceInputs["signInText"] = state ? state.signInText : undefined;
            resourceInputs["signupEnabled"] = state ? state.signupEnabled : undefined;
            resourceInputs["slackAppEnabled"] = state ? state.slackAppEnabled : undefined;
            resourceInputs["slackAppId"] = state ? state.slackAppId : undefined;
            resourceInputs["slackAppSecret"] = state ? state.slackAppSecret : undefined;
            resourceInputs["slackAppSigningSecret"] = state ? state.slackAppSigningSecret : undefined;
            resourceInputs["slackAppVerificationToken"] = state ? state.slackAppVerificationToken : undefined;
            resourceInputs["snippetSizeLimit"] = state ? state.snippetSizeLimit : undefined;
            resourceInputs["snowplowAppId"] = state ? state.snowplowAppId : undefined;
            resourceInputs["snowplowCollectorHostname"] = state ? state.snowplowCollectorHostname : undefined;
            resourceInputs["snowplowCookieDomain"] = state ? state.snowplowCookieDomain : undefined;
            resourceInputs["snowplowEnabled"] = state ? state.snowplowEnabled : undefined;
            resourceInputs["sourcegraphEnabled"] = state ? state.sourcegraphEnabled : undefined;
            resourceInputs["sourcegraphPublicOnly"] = state ? state.sourcegraphPublicOnly : undefined;
            resourceInputs["sourcegraphUrl"] = state ? state.sourcegraphUrl : undefined;
            resourceInputs["spamCheckApiKey"] = state ? state.spamCheckApiKey : undefined;
            resourceInputs["spamCheckEndpointEnabled"] = state ? state.spamCheckEndpointEnabled : undefined;
            resourceInputs["spamCheckEndpointUrl"] = state ? state.spamCheckEndpointUrl : undefined;
            resourceInputs["suggestPipelineEnabled"] = state ? state.suggestPipelineEnabled : undefined;
            resourceInputs["terminalMaxSessionTime"] = state ? state.terminalMaxSessionTime : undefined;
            resourceInputs["terms"] = state ? state.terms : undefined;
            resourceInputs["throttleAuthenticatedApiEnabled"] = state ? state.throttleAuthenticatedApiEnabled : undefined;
            resourceInputs["throttleAuthenticatedApiPeriodInSeconds"] = state ? state.throttleAuthenticatedApiPeriodInSeconds : undefined;
            resourceInputs["throttleAuthenticatedApiRequestsPerPeriod"] = state ? state.throttleAuthenticatedApiRequestsPerPeriod : undefined;
            resourceInputs["throttleAuthenticatedPackagesApiEnabled"] = state ? state.throttleAuthenticatedPackagesApiEnabled : undefined;
            resourceInputs["throttleAuthenticatedPackagesApiPeriodInSeconds"] = state ? state.throttleAuthenticatedPackagesApiPeriodInSeconds : undefined;
            resourceInputs["throttleAuthenticatedPackagesApiRequestsPerPeriod"] = state ? state.throttleAuthenticatedPackagesApiRequestsPerPeriod : undefined;
            resourceInputs["throttleAuthenticatedWebEnabled"] = state ? state.throttleAuthenticatedWebEnabled : undefined;
            resourceInputs["throttleAuthenticatedWebPeriodInSeconds"] = state ? state.throttleAuthenticatedWebPeriodInSeconds : undefined;
            resourceInputs["throttleAuthenticatedWebRequestsPerPeriod"] = state ? state.throttleAuthenticatedWebRequestsPerPeriod : undefined;
            resourceInputs["throttleUnauthenticatedApiEnabled"] = state ? state.throttleUnauthenticatedApiEnabled : undefined;
            resourceInputs["throttleUnauthenticatedApiPeriodInSeconds"] = state ? state.throttleUnauthenticatedApiPeriodInSeconds : undefined;
            resourceInputs["throttleUnauthenticatedApiRequestsPerPeriod"] = state ? state.throttleUnauthenticatedApiRequestsPerPeriod : undefined;
            resourceInputs["throttleUnauthenticatedPackagesApiEnabled"] = state ? state.throttleUnauthenticatedPackagesApiEnabled : undefined;
            resourceInputs["throttleUnauthenticatedPackagesApiPeriodInSeconds"] = state ? state.throttleUnauthenticatedPackagesApiPeriodInSeconds : undefined;
            resourceInputs["throttleUnauthenticatedPackagesApiRequestsPerPeriod"] = state ? state.throttleUnauthenticatedPackagesApiRequestsPerPeriod : undefined;
            resourceInputs["throttleUnauthenticatedWebEnabled"] = state ? state.throttleUnauthenticatedWebEnabled : undefined;
            resourceInputs["throttleUnauthenticatedWebPeriodInSeconds"] = state ? state.throttleUnauthenticatedWebPeriodInSeconds : undefined;
            resourceInputs["throttleUnauthenticatedWebRequestsPerPeriod"] = state ? state.throttleUnauthenticatedWebRequestsPerPeriod : undefined;
            resourceInputs["timeTrackingLimitToHours"] = state ? state.timeTrackingLimitToHours : undefined;
            resourceInputs["twoFactorGracePeriod"] = state ? state.twoFactorGracePeriod : undefined;
            resourceInputs["uniqueIpsLimitEnabled"] = state ? state.uniqueIpsLimitEnabled : undefined;
            resourceInputs["uniqueIpsLimitPerUser"] = state ? state.uniqueIpsLimitPerUser : undefined;
            resourceInputs["uniqueIpsLimitTimeWindow"] = state ? state.uniqueIpsLimitTimeWindow : undefined;
            resourceInputs["usagePingEnabled"] = state ? state.usagePingEnabled : undefined;
            resourceInputs["userDeactivationEmailsEnabled"] = state ? state.userDeactivationEmailsEnabled : undefined;
            resourceInputs["userDefaultExternal"] = state ? state.userDefaultExternal : undefined;
            resourceInputs["userDefaultInternalRegex"] = state ? state.userDefaultInternalRegex : undefined;
            resourceInputs["userOauthApplications"] = state ? state.userOauthApplications : undefined;
            resourceInputs["userShowAddSshKeyMessage"] = state ? state.userShowAddSshKeyMessage : undefined;
            resourceInputs["versionCheckEnabled"] = state ? state.versionCheckEnabled : undefined;
            resourceInputs["webIdeClientsidePreviewEnabled"] = state ? state.webIdeClientsidePreviewEnabled : undefined;
            resourceInputs["whatsNewVariant"] = state ? state.whatsNewVariant : undefined;
            resourceInputs["wikiPageMaxContentBytes"] = state ? state.wikiPageMaxContentBytes : undefined;
        } else {
            const args = argsOrState as ApplicationSettingsArgs | undefined;
            resourceInputs["abuseNotificationEmail"] = args ? args.abuseNotificationEmail : undefined;
            resourceInputs["adminMode"] = args ? args.adminMode : undefined;
            resourceInputs["afterSignOutPath"] = args ? args.afterSignOutPath : undefined;
            resourceInputs["afterSignUpText"] = args ? args.afterSignUpText : undefined;
            resourceInputs["akismetApiKey"] = args?.akismetApiKey ? pulumi.secret(args.akismetApiKey) : undefined;
            resourceInputs["akismetEnabled"] = args ? args.akismetEnabled : undefined;
            resourceInputs["allowGroupOwnersToManageLdap"] = args ? args.allowGroupOwnersToManageLdap : undefined;
            resourceInputs["allowLocalRequestsFromSystemHooks"] = args ? args.allowLocalRequestsFromSystemHooks : undefined;
            resourceInputs["allowLocalRequestsFromWebHooksAndServices"] = args ? args.allowLocalRequestsFromWebHooksAndServices : undefined;
            resourceInputs["archiveBuildsInHumanReadable"] = args ? args.archiveBuildsInHumanReadable : undefined;
            resourceInputs["assetProxyAllowlists"] = args ? args.assetProxyAllowlists : undefined;
            resourceInputs["assetProxyEnabled"] = args ? args.assetProxyEnabled : undefined;
            resourceInputs["assetProxySecretKey"] = args?.assetProxySecretKey ? pulumi.secret(args.assetProxySecretKey) : undefined;
            resourceInputs["assetProxyUrl"] = args ? args.assetProxyUrl : undefined;
            resourceInputs["authorizedKeysEnabled"] = args ? args.authorizedKeysEnabled : undefined;
            resourceInputs["autoDevopsDomain"] = args ? args.autoDevopsDomain : undefined;
            resourceInputs["autoDevopsEnabled"] = args ? args.autoDevopsEnabled : undefined;
            resourceInputs["automaticPurchasedStorageAllocation"] = args ? args.automaticPurchasedStorageAllocation : undefined;
            resourceInputs["checkNamespacePlan"] = args ? args.checkNamespacePlan : undefined;
            resourceInputs["commitEmailHostname"] = args ? args.commitEmailHostname : undefined;
            resourceInputs["containerExpirationPoliciesEnableHistoricEntries"] = args ? args.containerExpirationPoliciesEnableHistoricEntries : undefined;
            resourceInputs["containerRegistryCleanupTagsServiceMaxListSize"] = args ? args.containerRegistryCleanupTagsServiceMaxListSize : undefined;
            resourceInputs["containerRegistryDeleteTagsServiceTimeout"] = args ? args.containerRegistryDeleteTagsServiceTimeout : undefined;
            resourceInputs["containerRegistryExpirationPoliciesCaching"] = args ? args.containerRegistryExpirationPoliciesCaching : undefined;
            resourceInputs["containerRegistryExpirationPoliciesWorkerCapacity"] = args ? args.containerRegistryExpirationPoliciesWorkerCapacity : undefined;
            resourceInputs["containerRegistryTokenExpireDelay"] = args ? args.containerRegistryTokenExpireDelay : undefined;
            resourceInputs["deactivateDormantUsers"] = args ? args.deactivateDormantUsers : undefined;
            resourceInputs["defaultArtifactsExpireIn"] = args ? args.defaultArtifactsExpireIn : undefined;
            resourceInputs["defaultBranchName"] = args ? args.defaultBranchName : undefined;
            resourceInputs["defaultBranchProtection"] = args ? args.defaultBranchProtection : undefined;
            resourceInputs["defaultCiConfigPath"] = args ? args.defaultCiConfigPath : undefined;
            resourceInputs["defaultGroupVisibility"] = args ? args.defaultGroupVisibility : undefined;
            resourceInputs["defaultProjectCreation"] = args ? args.defaultProjectCreation : undefined;
            resourceInputs["defaultProjectVisibility"] = args ? args.defaultProjectVisibility : undefined;
            resourceInputs["defaultProjectsLimit"] = args ? args.defaultProjectsLimit : undefined;
            resourceInputs["defaultSnippetVisibility"] = args ? args.defaultSnippetVisibility : undefined;
            resourceInputs["delayedGroupDeletion"] = args ? args.delayedGroupDeletion : undefined;
            resourceInputs["delayedProjectDeletion"] = args ? args.delayedProjectDeletion : undefined;
            resourceInputs["deleteInactiveProjects"] = args ? args.deleteInactiveProjects : undefined;
            resourceInputs["deletionAdjournedPeriod"] = args ? args.deletionAdjournedPeriod : undefined;
            resourceInputs["diffMaxFiles"] = args ? args.diffMaxFiles : undefined;
            resourceInputs["diffMaxLines"] = args ? args.diffMaxLines : undefined;
            resourceInputs["diffMaxPatchBytes"] = args ? args.diffMaxPatchBytes : undefined;
            resourceInputs["disableFeedToken"] = args ? args.disableFeedToken : undefined;
            resourceInputs["disabledOauthSignInSources"] = args ? args.disabledOauthSignInSources : undefined;
            resourceInputs["dnsRebindingProtectionEnabled"] = args ? args.dnsRebindingProtectionEnabled : undefined;
            resourceInputs["domainAllowlists"] = args ? args.domainAllowlists : undefined;
            resourceInputs["domainDenylistEnabled"] = args ? args.domainDenylistEnabled : undefined;
            resourceInputs["domainDenylists"] = args ? args.domainDenylists : undefined;
            resourceInputs["dsaKeyRestriction"] = args ? args.dsaKeyRestriction : undefined;
            resourceInputs["ecdsaKeyRestriction"] = args ? args.ecdsaKeyRestriction : undefined;
            resourceInputs["ecdsaSkKeyRestriction"] = args ? args.ecdsaSkKeyRestriction : undefined;
            resourceInputs["ed25519KeyRestriction"] = args ? args.ed25519KeyRestriction : undefined;
            resourceInputs["ed25519SkKeyRestriction"] = args ? args.ed25519SkKeyRestriction : undefined;
            resourceInputs["eksAccessKeyId"] = args?.eksAccessKeyId ? pulumi.secret(args.eksAccessKeyId) : undefined;
            resourceInputs["eksAccountId"] = args ? args.eksAccountId : undefined;
            resourceInputs["eksIntegrationEnabled"] = args ? args.eksIntegrationEnabled : undefined;
            resourceInputs["eksSecretAccessKey"] = args?.eksSecretAccessKey ? pulumi.secret(args.eksSecretAccessKey) : undefined;
            resourceInputs["elasticsearchAws"] = args ? args.elasticsearchAws : undefined;
            resourceInputs["elasticsearchAwsAccessKey"] = args?.elasticsearchAwsAccessKey ? pulumi.secret(args.elasticsearchAwsAccessKey) : undefined;
            resourceInputs["elasticsearchAwsRegion"] = args ? args.elasticsearchAwsRegion : undefined;
            resourceInputs["elasticsearchAwsSecretAccessKey"] = args?.elasticsearchAwsSecretAccessKey ? pulumi.secret(args.elasticsearchAwsSecretAccessKey) : undefined;
            resourceInputs["elasticsearchIndexedFieldLengthLimit"] = args ? args.elasticsearchIndexedFieldLengthLimit : undefined;
            resourceInputs["elasticsearchIndexedFileSizeLimitKb"] = args ? args.elasticsearchIndexedFileSizeLimitKb : undefined;
            resourceInputs["elasticsearchIndexing"] = args ? args.elasticsearchIndexing : undefined;
            resourceInputs["elasticsearchLimitIndexing"] = args ? args.elasticsearchLimitIndexing : undefined;
            resourceInputs["elasticsearchMaxBulkConcurrency"] = args ? args.elasticsearchMaxBulkConcurrency : undefined;
            resourceInputs["elasticsearchMaxBulkSizeMb"] = args ? args.elasticsearchMaxBulkSizeMb : undefined;
            resourceInputs["elasticsearchNamespaceIds"] = args ? args.elasticsearchNamespaceIds : undefined;
            resourceInputs["elasticsearchPassword"] = args?.elasticsearchPassword ? pulumi.secret(args.elasticsearchPassword) : undefined;
            resourceInputs["elasticsearchProjectIds"] = args ? args.elasticsearchProjectIds : undefined;
            resourceInputs["elasticsearchSearch"] = args ? args.elasticsearchSearch : undefined;
            resourceInputs["elasticsearchUrls"] = args ? args.elasticsearchUrls : undefined;
            resourceInputs["elasticsearchUsername"] = args ? args.elasticsearchUsername : undefined;
            resourceInputs["emailAdditionalText"] = args ? args.emailAdditionalText : undefined;
            resourceInputs["emailAuthorInBody"] = args ? args.emailAuthorInBody : undefined;
            resourceInputs["enabledGitAccessProtocol"] = args ? args.enabledGitAccessProtocol : undefined;
            resourceInputs["enforceNamespaceStorageLimit"] = args ? args.enforceNamespaceStorageLimit : undefined;
            resourceInputs["enforceTerms"] = args ? args.enforceTerms : undefined;
            resourceInputs["externalAuthClientCert"] = args ? args.externalAuthClientCert : undefined;
            resourceInputs["externalAuthClientKey"] = args?.externalAuthClientKey ? pulumi.secret(args.externalAuthClientKey) : undefined;
            resourceInputs["externalAuthClientKeyPass"] = args?.externalAuthClientKeyPass ? pulumi.secret(args.externalAuthClientKeyPass) : undefined;
            resourceInputs["externalAuthorizationServiceDefaultLabel"] = args ? args.externalAuthorizationServiceDefaultLabel : undefined;
            resourceInputs["externalAuthorizationServiceEnabled"] = args ? args.externalAuthorizationServiceEnabled : undefined;
            resourceInputs["externalAuthorizationServiceTimeout"] = args ? args.externalAuthorizationServiceTimeout : undefined;
            resourceInputs["externalAuthorizationServiceUrl"] = args ? args.externalAuthorizationServiceUrl : undefined;
            resourceInputs["externalPipelineValidationServiceTimeout"] = args ? args.externalPipelineValidationServiceTimeout : undefined;
            resourceInputs["externalPipelineValidationServiceToken"] = args ? args.externalPipelineValidationServiceToken : undefined;
            resourceInputs["externalPipelineValidationServiceUrl"] = args ? args.externalPipelineValidationServiceUrl : undefined;
            resourceInputs["fileTemplateProjectId"] = args ? args.fileTemplateProjectId : undefined;
            resourceInputs["firstDayOfWeek"] = args ? args.firstDayOfWeek : undefined;
            resourceInputs["geoNodeAllowedIps"] = args ? args.geoNodeAllowedIps : undefined;
            resourceInputs["geoStatusTimeout"] = args ? args.geoStatusTimeout : undefined;
            resourceInputs["gitRateLimitUsersAllowlists"] = args ? args.gitRateLimitUsersAllowlists : undefined;
            resourceInputs["gitTwoFactorSessionExpiry"] = args ? args.gitTwoFactorSessionExpiry : undefined;
            resourceInputs["gitalyTimeoutDefault"] = args ? args.gitalyTimeoutDefault : undefined;
            resourceInputs["gitalyTimeoutFast"] = args ? args.gitalyTimeoutFast : undefined;
            resourceInputs["gitalyTimeoutMedium"] = args ? args.gitalyTimeoutMedium : undefined;
            resourceInputs["grafanaEnabled"] = args ? args.grafanaEnabled : undefined;
            resourceInputs["grafanaUrl"] = args ? args.grafanaUrl : undefined;
            resourceInputs["gravatarEnabled"] = args ? args.gravatarEnabled : undefined;
            resourceInputs["groupOwnersCanManageDefaultBranchProtection"] = args ? args.groupOwnersCanManageDefaultBranchProtection : undefined;
            resourceInputs["hashedStorageEnabled"] = args ? args.hashedStorageEnabled : undefined;
            resourceInputs["helpPageHideCommercialContent"] = args ? args.helpPageHideCommercialContent : undefined;
            resourceInputs["helpPageSupportUrl"] = args ? args.helpPageSupportUrl : undefined;
            resourceInputs["helpPageText"] = args ? args.helpPageText : undefined;
            resourceInputs["helpText"] = args ? args.helpText : undefined;
            resourceInputs["hideThirdPartyOffers"] = args ? args.hideThirdPartyOffers : undefined;
            resourceInputs["homePageUrl"] = args ? args.homePageUrl : undefined;
            resourceInputs["housekeepingEnabled"] = args ? args.housekeepingEnabled : undefined;
            resourceInputs["housekeepingFullRepackPeriod"] = args ? args.housekeepingFullRepackPeriod : undefined;
            resourceInputs["housekeepingGcPeriod"] = args ? args.housekeepingGcPeriod : undefined;
            resourceInputs["housekeepingIncrementalRepackPeriod"] = args ? args.housekeepingIncrementalRepackPeriod : undefined;
            resourceInputs["htmlEmailsEnabled"] = args ? args.htmlEmailsEnabled : undefined;
            resourceInputs["importSources"] = args ? args.importSources : undefined;
            resourceInputs["inProductMarketingEmailsEnabled"] = args ? args.inProductMarketingEmailsEnabled : undefined;
            resourceInputs["inactiveProjectsDeleteAfterMonths"] = args ? args.inactiveProjectsDeleteAfterMonths : undefined;
            resourceInputs["inactiveProjectsMinSizeMb"] = args ? args.inactiveProjectsMinSizeMb : undefined;
            resourceInputs["inactiveProjectsSendWarningEmailAfterMonths"] = args ? args.inactiveProjectsSendWarningEmailAfterMonths : undefined;
            resourceInputs["invisibleCaptchaEnabled"] = args ? args.invisibleCaptchaEnabled : undefined;
            resourceInputs["issuesCreateLimit"] = args ? args.issuesCreateLimit : undefined;
            resourceInputs["keepLatestArtifact"] = args ? args.keepLatestArtifact : undefined;
            resourceInputs["localMarkdownVersion"] = args ? args.localMarkdownVersion : undefined;
            resourceInputs["mailgunEventsEnabled"] = args ? args.mailgunEventsEnabled : undefined;
            resourceInputs["mailgunSigningKey"] = args?.mailgunSigningKey ? pulumi.secret(args.mailgunSigningKey) : undefined;
            resourceInputs["maintenanceMode"] = args ? args.maintenanceMode : undefined;
            resourceInputs["maintenanceModeMessage"] = args ? args.maintenanceModeMessage : undefined;
            resourceInputs["maxArtifactsSize"] = args ? args.maxArtifactsSize : undefined;
            resourceInputs["maxAttachmentSize"] = args ? args.maxAttachmentSize : undefined;
            resourceInputs["maxExportSize"] = args ? args.maxExportSize : undefined;
            resourceInputs["maxImportSize"] = args ? args.maxImportSize : undefined;
            resourceInputs["maxNumberOfRepositoryDownloads"] = args ? args.maxNumberOfRepositoryDownloads : undefined;
            resourceInputs["maxNumberOfRepositoryDownloadsWithinTimePeriod"] = args ? args.maxNumberOfRepositoryDownloadsWithinTimePeriod : undefined;
            resourceInputs["maxPagesSize"] = args ? args.maxPagesSize : undefined;
            resourceInputs["maxPersonalAccessTokenLifetime"] = args ? args.maxPersonalAccessTokenLifetime : undefined;
            resourceInputs["maxSshKeyLifetime"] = args ? args.maxSshKeyLifetime : undefined;
            resourceInputs["metricsMethodCallThreshold"] = args ? args.metricsMethodCallThreshold : undefined;
            resourceInputs["mirrorAvailable"] = args ? args.mirrorAvailable : undefined;
            resourceInputs["mirrorCapacityThreshold"] = args ? args.mirrorCapacityThreshold : undefined;
            resourceInputs["mirrorMaxCapacity"] = args ? args.mirrorMaxCapacity : undefined;
            resourceInputs["mirrorMaxDelay"] = args ? args.mirrorMaxDelay : undefined;
            resourceInputs["npmPackageRequestsForwarding"] = args ? args.npmPackageRequestsForwarding : undefined;
            resourceInputs["outboundLocalRequestsWhitelists"] = args ? args.outboundLocalRequestsWhitelists : undefined;
            resourceInputs["packageRegistryCleanupPoliciesWorkerCapacity"] = args ? args.packageRegistryCleanupPoliciesWorkerCapacity : undefined;
            resourceInputs["pagesDomainVerificationEnabled"] = args ? args.pagesDomainVerificationEnabled : undefined;
            resourceInputs["passwordAuthenticationEnabledForGit"] = args ? args.passwordAuthenticationEnabledForGit : undefined;
            resourceInputs["passwordAuthenticationEnabledForWeb"] = args ? args.passwordAuthenticationEnabledForWeb : undefined;
            resourceInputs["passwordLowercaseRequired"] = args ? args.passwordLowercaseRequired : undefined;
            resourceInputs["passwordNumberRequired"] = args ? args.passwordNumberRequired : undefined;
            resourceInputs["passwordSymbolRequired"] = args ? args.passwordSymbolRequired : undefined;
            resourceInputs["passwordUppercaseRequired"] = args ? args.passwordUppercaseRequired : undefined;
            resourceInputs["performanceBarAllowedGroupPath"] = args ? args.performanceBarAllowedGroupPath : undefined;
            resourceInputs["personalAccessTokenPrefix"] = args ? args.personalAccessTokenPrefix : undefined;
            resourceInputs["pipelineLimitPerProjectUserSha"] = args ? args.pipelineLimitPerProjectUserSha : undefined;
            resourceInputs["plantumlEnabled"] = args ? args.plantumlEnabled : undefined;
            resourceInputs["plantumlUrl"] = args ? args.plantumlUrl : undefined;
            resourceInputs["pollingIntervalMultiplier"] = args ? args.pollingIntervalMultiplier : undefined;
            resourceInputs["projectExportEnabled"] = args ? args.projectExportEnabled : undefined;
            resourceInputs["prometheusMetricsEnabled"] = args ? args.prometheusMetricsEnabled : undefined;
            resourceInputs["protectedCiVariables"] = args ? args.protectedCiVariables : undefined;
            resourceInputs["pushEventActivitiesLimit"] = args ? args.pushEventActivitiesLimit : undefined;
            resourceInputs["pushEventHooksLimit"] = args ? args.pushEventHooksLimit : undefined;
            resourceInputs["pypiPackageRequestsForwarding"] = args ? args.pypiPackageRequestsForwarding : undefined;
            resourceInputs["rateLimitingResponseText"] = args ? args.rateLimitingResponseText : undefined;
            resourceInputs["rawBlobRequestLimit"] = args ? args.rawBlobRequestLimit : undefined;
            resourceInputs["recaptchaEnabled"] = args ? args.recaptchaEnabled : undefined;
            resourceInputs["recaptchaPrivateKey"] = args?.recaptchaPrivateKey ? pulumi.secret(args.recaptchaPrivateKey) : undefined;
            resourceInputs["recaptchaSiteKey"] = args?.recaptchaSiteKey ? pulumi.secret(args.recaptchaSiteKey) : undefined;
            resourceInputs["receiveMaxInputSize"] = args ? args.receiveMaxInputSize : undefined;
            resourceInputs["repositoryChecksEnabled"] = args ? args.repositoryChecksEnabled : undefined;
            resourceInputs["repositorySizeLimit"] = args ? args.repositorySizeLimit : undefined;
            resourceInputs["repositoryStorages"] = args ? args.repositoryStorages : undefined;
            resourceInputs["repositoryStoragesWeighted"] = args ? args.repositoryStoragesWeighted : undefined;
            resourceInputs["requireAdminApprovalAfterUserSignup"] = args ? args.requireAdminApprovalAfterUserSignup : undefined;
            resourceInputs["requireTwoFactorAuthentication"] = args ? args.requireTwoFactorAuthentication : undefined;
            resourceInputs["restrictedVisibilityLevels"] = args ? args.restrictedVisibilityLevels : undefined;
            resourceInputs["rsaKeyRestriction"] = args ? args.rsaKeyRestriction : undefined;
            resourceInputs["searchRateLimit"] = args ? args.searchRateLimit : undefined;
            resourceInputs["searchRateLimitUnauthenticated"] = args ? args.searchRateLimitUnauthenticated : undefined;
            resourceInputs["sendUserConfirmationEmail"] = args ? args.sendUserConfirmationEmail : undefined;
            resourceInputs["sessionExpireDelay"] = args ? args.sessionExpireDelay : undefined;
            resourceInputs["sharedRunnersEnabled"] = args ? args.sharedRunnersEnabled : undefined;
            resourceInputs["sharedRunnersMinutes"] = args ? args.sharedRunnersMinutes : undefined;
            resourceInputs["sharedRunnersText"] = args ? args.sharedRunnersText : undefined;
            resourceInputs["sidekiqJobLimiterCompressionThresholdBytes"] = args ? args.sidekiqJobLimiterCompressionThresholdBytes : undefined;
            resourceInputs["sidekiqJobLimiterLimitBytes"] = args ? args.sidekiqJobLimiterLimitBytes : undefined;
            resourceInputs["sidekiqJobLimiterMode"] = args ? args.sidekiqJobLimiterMode : undefined;
            resourceInputs["signInText"] = args ? args.signInText : undefined;
            resourceInputs["signupEnabled"] = args ? args.signupEnabled : undefined;
            resourceInputs["slackAppEnabled"] = args ? args.slackAppEnabled : undefined;
            resourceInputs["slackAppId"] = args ? args.slackAppId : undefined;
            resourceInputs["slackAppSecret"] = args?.slackAppSecret ? pulumi.secret(args.slackAppSecret) : undefined;
            resourceInputs["slackAppSigningSecret"] = args?.slackAppSigningSecret ? pulumi.secret(args.slackAppSigningSecret) : undefined;
            resourceInputs["slackAppVerificationToken"] = args ? args.slackAppVerificationToken : undefined;
            resourceInputs["snippetSizeLimit"] = args ? args.snippetSizeLimit : undefined;
            resourceInputs["snowplowAppId"] = args ? args.snowplowAppId : undefined;
            resourceInputs["snowplowCollectorHostname"] = args ? args.snowplowCollectorHostname : undefined;
            resourceInputs["snowplowCookieDomain"] = args ? args.snowplowCookieDomain : undefined;
            resourceInputs["snowplowEnabled"] = args ? args.snowplowEnabled : undefined;
            resourceInputs["sourcegraphEnabled"] = args ? args.sourcegraphEnabled : undefined;
            resourceInputs["sourcegraphPublicOnly"] = args ? args.sourcegraphPublicOnly : undefined;
            resourceInputs["sourcegraphUrl"] = args ? args.sourcegraphUrl : undefined;
            resourceInputs["spamCheckApiKey"] = args?.spamCheckApiKey ? pulumi.secret(args.spamCheckApiKey) : undefined;
            resourceInputs["spamCheckEndpointEnabled"] = args ? args.spamCheckEndpointEnabled : undefined;
            resourceInputs["spamCheckEndpointUrl"] = args ? args.spamCheckEndpointUrl : undefined;
            resourceInputs["suggestPipelineEnabled"] = args ? args.suggestPipelineEnabled : undefined;
            resourceInputs["terminalMaxSessionTime"] = args ? args.terminalMaxSessionTime : undefined;
            resourceInputs["terms"] = args ? args.terms : undefined;
            resourceInputs["throttleAuthenticatedApiEnabled"] = args ? args.throttleAuthenticatedApiEnabled : undefined;
            resourceInputs["throttleAuthenticatedApiPeriodInSeconds"] = args ? args.throttleAuthenticatedApiPeriodInSeconds : undefined;
            resourceInputs["throttleAuthenticatedApiRequestsPerPeriod"] = args ? args.throttleAuthenticatedApiRequestsPerPeriod : undefined;
            resourceInputs["throttleAuthenticatedPackagesApiEnabled"] = args ? args.throttleAuthenticatedPackagesApiEnabled : undefined;
            resourceInputs["throttleAuthenticatedPackagesApiPeriodInSeconds"] = args ? args.throttleAuthenticatedPackagesApiPeriodInSeconds : undefined;
            resourceInputs["throttleAuthenticatedPackagesApiRequestsPerPeriod"] = args ? args.throttleAuthenticatedPackagesApiRequestsPerPeriod : undefined;
            resourceInputs["throttleAuthenticatedWebEnabled"] = args ? args.throttleAuthenticatedWebEnabled : undefined;
            resourceInputs["throttleAuthenticatedWebPeriodInSeconds"] = args ? args.throttleAuthenticatedWebPeriodInSeconds : undefined;
            resourceInputs["throttleAuthenticatedWebRequestsPerPeriod"] = args ? args.throttleAuthenticatedWebRequestsPerPeriod : undefined;
            resourceInputs["throttleUnauthenticatedApiEnabled"] = args ? args.throttleUnauthenticatedApiEnabled : undefined;
            resourceInputs["throttleUnauthenticatedApiPeriodInSeconds"] = args ? args.throttleUnauthenticatedApiPeriodInSeconds : undefined;
            resourceInputs["throttleUnauthenticatedApiRequestsPerPeriod"] = args ? args.throttleUnauthenticatedApiRequestsPerPeriod : undefined;
            resourceInputs["throttleUnauthenticatedPackagesApiEnabled"] = args ? args.throttleUnauthenticatedPackagesApiEnabled : undefined;
            resourceInputs["throttleUnauthenticatedPackagesApiPeriodInSeconds"] = args ? args.throttleUnauthenticatedPackagesApiPeriodInSeconds : undefined;
            resourceInputs["throttleUnauthenticatedPackagesApiRequestsPerPeriod"] = args ? args.throttleUnauthenticatedPackagesApiRequestsPerPeriod : undefined;
            resourceInputs["throttleUnauthenticatedWebEnabled"] = args ? args.throttleUnauthenticatedWebEnabled : undefined;
            resourceInputs["throttleUnauthenticatedWebPeriodInSeconds"] = args ? args.throttleUnauthenticatedWebPeriodInSeconds : undefined;
            resourceInputs["throttleUnauthenticatedWebRequestsPerPeriod"] = args ? args.throttleUnauthenticatedWebRequestsPerPeriod : undefined;
            resourceInputs["timeTrackingLimitToHours"] = args ? args.timeTrackingLimitToHours : undefined;
            resourceInputs["twoFactorGracePeriod"] = args ? args.twoFactorGracePeriod : undefined;
            resourceInputs["uniqueIpsLimitEnabled"] = args ? args.uniqueIpsLimitEnabled : undefined;
            resourceInputs["uniqueIpsLimitPerUser"] = args ? args.uniqueIpsLimitPerUser : undefined;
            resourceInputs["uniqueIpsLimitTimeWindow"] = args ? args.uniqueIpsLimitTimeWindow : undefined;
            resourceInputs["usagePingEnabled"] = args ? args.usagePingEnabled : undefined;
            resourceInputs["userDeactivationEmailsEnabled"] = args ? args.userDeactivationEmailsEnabled : undefined;
            resourceInputs["userDefaultExternal"] = args ? args.userDefaultExternal : undefined;
            resourceInputs["userDefaultInternalRegex"] = args ? args.userDefaultInternalRegex : undefined;
            resourceInputs["userOauthApplications"] = args ? args.userOauthApplications : undefined;
            resourceInputs["userShowAddSshKeyMessage"] = args ? args.userShowAddSshKeyMessage : undefined;
            resourceInputs["versionCheckEnabled"] = args ? args.versionCheckEnabled : undefined;
            resourceInputs["webIdeClientsidePreviewEnabled"] = args ? args.webIdeClientsidePreviewEnabled : undefined;
            resourceInputs["whatsNewVariant"] = args ? args.whatsNewVariant : undefined;
            resourceInputs["wikiPageMaxContentBytes"] = args ? args.wikiPageMaxContentBytes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["akismetApiKey", "assetProxySecretKey", "eksAccessKeyId", "eksSecretAccessKey", "elasticsearchAwsAccessKey", "elasticsearchAwsSecretAccessKey", "elasticsearchPassword", "externalAuthClientKey", "externalAuthClientKeyPass", "mailgunSigningKey", "recaptchaPrivateKey", "recaptchaSiteKey", "slackAppSecret", "slackAppSigningSecret", "spamCheckApiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApplicationSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationSettings resources.
 */
export interface ApplicationSettingsState {
    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     */
    abuseNotificationEmail?: pulumi.Input<string>;
    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     */
    adminMode?: pulumi.Input<boolean>;
    /**
     * Where to redirect users after logout.
     */
    afterSignOutPath?: pulumi.Input<string>;
    /**
     * Text shown to the user after signing up.
     */
    afterSignUpText?: pulumi.Input<string>;
    /**
     * API key for Akismet spam protection.
     */
    akismetApiKey?: pulumi.Input<string>;
    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     */
    akismetEnabled?: pulumi.Input<boolean>;
    /**
     * Set to true to allow group owners to manage LDAP.
     */
    allowGroupOwnersToManageLdap?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from system hooks.
     */
    allowLocalRequestsFromSystemHooks?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from web hooks and services.
     */
    allowLocalRequestsFromWebHooksAndServices?: pulumi.Input<boolean>;
    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     */
    archiveBuildsInHumanReadable?: pulumi.Input<string>;
    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     */
    assetProxyAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     */
    assetProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxySecretKey?: pulumi.Input<string>;
    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxyUrl?: pulumi.Input<string>;
    /**
     * By default, we write to the authorizedKeys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     */
    authorizedKeysEnabled?: pulumi.Input<boolean>;
    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     */
    autoDevopsDomain?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     */
    automaticPurchasedStorageAllocation?: pulumi.Input<boolean>;
    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     */
    checkNamespacePlan?: pulumi.Input<boolean>;
    /**
     * Custom hostname (for private commit emails).
     */
    commitEmailHostname?: pulumi.Input<string>;
    /**
     * Enable cleanup policies for all projects.
     */
    containerExpirationPoliciesEnableHistoricEntries?: pulumi.Input<boolean>;
    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     */
    containerRegistryCleanupTagsServiceMaxListSize?: pulumi.Input<number>;
    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     */
    containerRegistryDeleteTagsServiceTimeout?: pulumi.Input<number>;
    /**
     * Caching during the execution of cleanup policies.
     */
    containerRegistryExpirationPoliciesCaching?: pulumi.Input<boolean>;
    /**
     * Number of workers for cleanup policies.
     */
    containerRegistryExpirationPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Container Registry token duration in minutes.
     */
    containerRegistryTokenExpireDelay?: pulumi.Input<number>;
    /**
     * Enable automatic deactivation of dormant users.
     */
    deactivateDormantUsers?: pulumi.Input<boolean>;
    /**
     * Set the default expiration time for each job’s artifacts.
     */
    defaultArtifactsExpireIn?: pulumi.Input<string>;
    /**
     * Instance-level custom initial branch name (introduced in GitLab 13.2).
     */
    defaultBranchName?: pulumi.Input<string>;
    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
     */
    defaultBranchProtection?: pulumi.Input<number>;
    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     */
    defaultCiConfigPath?: pulumi.Input<string>;
    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
     */
    defaultGroupVisibility?: pulumi.Input<string>;
    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     */
    defaultProjectCreation?: pulumi.Input<number>;
    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
     */
    defaultProjectVisibility?: pulumi.Input<string>;
    /**
     * Project limit per user. Default is 100000.
     */
    defaultProjectsLimit?: pulumi.Input<number>;
    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
     */
    defaultSnippetVisibility?: pulumi.Input<string>;
    /**
     * Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
     */
    delayedGroupDeletion?: pulumi.Input<boolean>;
    /**
     * Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
     */
    delayedProjectDeletion?: pulumi.Input<boolean>;
    /**
     * Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
     */
    deleteInactiveProjects?: pulumi.Input<boolean>;
    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
     */
    deletionAdjournedPeriod?: pulumi.Input<number>;
    /**
     * Maximum files in a diff.
     */
    diffMaxFiles?: pulumi.Input<number>;
    /**
     * Maximum lines in a diff.
     */
    diffMaxLines?: pulumi.Input<number>;
    /**
     * Maximum diff patch size, in bytes.
     */
    diffMaxPatchBytes?: pulumi.Input<number>;
    /**
     * Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
     */
    disableFeedToken?: pulumi.Input<boolean>;
    /**
     * Disabled OAuth sign-in sources.
     */
    disabledOauthSignInSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enforce DNS rebinding attack protection.
     */
    dnsRebindingProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
     */
    domainAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     */
    domainDenylistEnabled?: pulumi.Input<boolean>;
    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     */
    domainDenylists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
     */
    dsaKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
     */
    ecdsaKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
     */
    ecdsaSkKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
     */
    ed25519KeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
     */
    ed25519SkKeyRestriction?: pulumi.Input<number>;
    /**
     * AWS IAM access key ID.
     */
    eksAccessKeyId?: pulumi.Input<string>;
    /**
     * Amazon account ID.
     */
    eksAccountId?: pulumi.Input<string>;
    /**
     * Enable integration with Amazon EKS.
     */
    eksIntegrationEnabled?: pulumi.Input<boolean>;
    /**
     * AWS IAM secret access key.
     */
    eksSecretAccessKey?: pulumi.Input<string>;
    /**
     * Enable the use of AWS hosted Elasticsearch.
     */
    elasticsearchAws?: pulumi.Input<boolean>;
    /**
     * AWS IAM access key.
     */
    elasticsearchAwsAccessKey?: pulumi.Input<string>;
    /**
     * The AWS region the Elasticsearch domain is configured.
     */
    elasticsearchAwsRegion?: pulumi.Input<string>;
    /**
     * AWS IAM secret access key.
     */
    elasticsearchAwsSecretAccessKey?: pulumi.Input<string>;
    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     */
    elasticsearchIndexedFieldLengthLimit?: pulumi.Input<number>;
    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     */
    elasticsearchIndexedFileSizeLimitKb?: pulumi.Input<number>;
    /**
     * Enable Elasticsearch indexing.
     */
    elasticsearchIndexing?: pulumi.Input<boolean>;
    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     */
    elasticsearchLimitIndexing?: pulumi.Input<boolean>;
    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkConcurrency?: pulumi.Input<number>;
    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkSizeMb?: pulumi.Input<number>;
    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchNamespaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The password of your Elasticsearch instance.
     */
    elasticsearchPassword?: pulumi.Input<string>;
    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchProjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable Elasticsearch search.
     */
    elasticsearchSearch?: pulumi.Input<boolean>;
    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     */
    elasticsearchUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username of your Elasticsearch instance.
     */
    elasticsearchUsername?: pulumi.Input<string>;
    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     */
    emailAdditionalText?: pulumi.Input<string>;
    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     */
    emailAuthorInBody?: pulumi.Input<boolean>;
    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     */
    enabledGitAccessProtocol?: pulumi.Input<string>;
    /**
     * Enabling this permits enforcement of namespace storage limits.
     */
    enforceNamespaceStorageLimit?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     */
    enforceTerms?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     */
    externalAuthClientCert?: pulumi.Input<string>;
    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     */
    externalAuthClientKey?: pulumi.Input<string>;
    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     */
    externalAuthClientKeyPass?: pulumi.Input<string>;
    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     */
    externalAuthorizationServiceDefaultLabel?: pulumi.Input<string>;
    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     */
    externalAuthorizationServiceEnabled?: pulumi.Input<boolean>;
    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     */
    externalAuthorizationServiceTimeout?: pulumi.Input<number>;
    /**
     * URL to which authorization requests are directed.
     */
    externalAuthorizationServiceUrl?: pulumi.Input<string>;
    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     */
    externalPipelineValidationServiceTimeout?: pulumi.Input<number>;
    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     */
    externalPipelineValidationServiceToken?: pulumi.Input<string>;
    /**
     * URL to use for pipeline validation requests.
     */
    externalPipelineValidationServiceUrl?: pulumi.Input<string>;
    /**
     * The ID of a project to load custom file templates from.
     */
    fileTemplateProjectId?: pulumi.Input<number>;
    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
     */
    firstDayOfWeek?: pulumi.Input<number>;
    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     */
    geoNodeAllowedIps?: pulumi.Input<string>;
    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     */
    geoStatusTimeout?: pulumi.Input<number>;
    /**
     * List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
     */
    gitRateLimitUsersAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     */
    gitTwoFactorSessionExpiry?: pulumi.Input<number>;
    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     */
    gitalyTimeoutDefault?: pulumi.Input<number>;
    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     */
    gitalyTimeoutFast?: pulumi.Input<number>;
    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     */
    gitalyTimeoutMedium?: pulumi.Input<number>;
    /**
     * Enable Grafana.
     */
    grafanaEnabled?: pulumi.Input<boolean>;
    /**
     * Grafana URL.
     */
    grafanaUrl?: pulumi.Input<string>;
    /**
     * Enable Gravatar.
     */
    gravatarEnabled?: pulumi.Input<boolean>;
    /**
     * Prevent overrides of default branch protection.
     */
    groupOwnersCanManageDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
     */
    hashedStorageEnabled?: pulumi.Input<boolean>;
    /**
     * Hide marketing-related entries from help.
     */
    helpPageHideCommercialContent?: pulumi.Input<boolean>;
    /**
     * Alternate support URL for help page and help dropdown.
     */
    helpPageSupportUrl?: pulumi.Input<string>;
    /**
     * Custom text displayed on the help page.
     */
    helpPageText?: pulumi.Input<string>;
    /**
     * GitLab server administrator information.
     */
    helpText?: pulumi.Input<string>;
    /**
     * Do not display offers from third parties in GitLab.
     */
    hideThirdPartyOffers?: pulumi.Input<boolean>;
    /**
     * Redirect to this URL when not logged in.
     */
    homePageUrl?: pulumi.Input<string>;
    /**
     * (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
     */
    housekeepingEnabled?: pulumi.Input<boolean>;
    /**
     * Number of Git pushes after which an incremental git repack is run.
     */
    housekeepingFullRepackPeriod?: pulumi.Input<number>;
    /**
     * Number of Git pushes after which git gc is run.
     */
    housekeepingGcPeriod?: pulumi.Input<number>;
    /**
     * Number of Git pushes after which an incremental git repack is run.
     */
    housekeepingIncrementalRepackPeriod?: pulumi.Input<number>;
    /**
     * Enable HTML emails.
     */
    htmlEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
     */
    importSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable in-product marketing emails. Enabled by default.
     */
    inProductMarketingEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    inactiveProjectsDeleteAfterMonths?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    inactiveProjectsMinSizeMb?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    inactiveProjectsSendWarningEmailAfterMonths?: pulumi.Input<number>;
    /**
     * Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
     */
    invisibleCaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Max number of issue creation requests per minute per user. Disabled by default.
     */
    issuesCreateLimit?: pulumi.Input<number>;
    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
     */
    keepLatestArtifact?: pulumi.Input<boolean>;
    /**
     * Increase this value when any cached Markdown should be invalidated.
     */
    localMarkdownVersion?: pulumi.Input<number>;
    /**
     * Enable Mailgun event receiver.
     */
    mailgunEventsEnabled?: pulumi.Input<boolean>;
    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     */
    mailgunSigningKey?: pulumi.Input<string>;
    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     */
    maintenanceMode?: pulumi.Input<boolean>;
    /**
     * Message displayed when instance is in maintenance mode.
     */
    maintenanceModeMessage?: pulumi.Input<string>;
    /**
     * Maximum artifacts size in MB.
     */
    maxArtifactsSize?: pulumi.Input<number>;
    /**
     * Limit attachment size in MB.
     */
    maxAttachmentSize?: pulumi.Input<number>;
    /**
     * Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
     */
    maxExportSize?: pulumi.Input<number>;
    /**
     * Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
     */
    maxImportSize?: pulumi.Input<number>;
    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
     */
    maxNumberOfRepositoryDownloads?: pulumi.Input<number>;
    /**
     * Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
     */
    maxNumberOfRepositoryDownloadsWithinTimePeriod?: pulumi.Input<number>;
    /**
     * Maximum size of pages repositories in MB.
     */
    maxPagesSize?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for access tokens in days.
     */
    maxPersonalAccessTokenLifetime?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
     */
    maxSshKeyLifetime?: pulumi.Input<number>;
    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     */
    metricsMethodCallThreshold?: pulumi.Input<number>;
    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     */
    mirrorAvailable?: pulumi.Input<boolean>;
    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     */
    mirrorCapacityThreshold?: pulumi.Input<number>;
    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     */
    mirrorMaxCapacity?: pulumi.Input<number>;
    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     */
    mirrorMaxDelay?: pulumi.Input<number>;
    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     */
    npmPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     */
    outboundLocalRequestsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of workers assigned to the packages cleanup policies.
     */
    packageRegistryCleanupPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     */
    pagesDomainVerificationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
     */
    passwordAuthenticationEnabledForGit?: pulumi.Input<boolean>;
    /**
     * Enable authentication for the web interface via a GitLab account password. Default is true.
     */
    passwordAuthenticationEnabledForWeb?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
     */
    passwordLowercaseRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
     */
    passwordNumberRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
     */
    passwordSymbolRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
     */
    passwordUppercaseRequired?: pulumi.Input<boolean>;
    /**
     * Path of the group that is allowed to toggle the performance bar.
     */
    performanceBarAllowedGroupPath?: pulumi.Input<string>;
    /**
     * Prefix for all generated personal access tokens.
     */
    personalAccessTokenPrefix?: pulumi.Input<string>;
    /**
     * Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
     */
    pipelineLimitPerProjectUserSha?: pulumi.Input<number>;
    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
     */
    plantumlEnabled?: pulumi.Input<boolean>;
    /**
     * The PlantUML instance URL for integration.
     */
    plantumlUrl?: pulumi.Input<string>;
    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     */
    pollingIntervalMultiplier?: pulumi.Input<number>;
    /**
     * Enable project export.
     */
    projectExportEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Prometheus metrics.
     */
    prometheusMetricsEnabled?: pulumi.Input<boolean>;
    /**
     * CI/CD variables are protected by default.
     */
    protectedCiVariables?: pulumi.Input<boolean>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     */
    pushEventActivitiesLimit?: pulumi.Input<number>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     */
    pushEventHooksLimit?: pulumi.Input<number>;
    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     */
    pypiPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     */
    rateLimitingResponseText?: pulumi.Input<string>;
    /**
     * Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
     */
    rawBlobRequestLimit?: pulumi.Input<number>;
    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     */
    recaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Private key for reCAPTCHA.
     */
    recaptchaPrivateKey?: pulumi.Input<string>;
    /**
     * Site key for reCAPTCHA.
     */
    recaptchaSiteKey?: pulumi.Input<string>;
    /**
     * Maximum push size (MB).
     */
    receiveMaxInputSize?: pulumi.Input<number>;
    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     */
    repositoryChecksEnabled?: pulumi.Input<boolean>;
    /**
     * Size limit per repository (MB).
     */
    repositorySizeLimit?: pulumi.Input<number>;
    /**
     * (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
     */
    repositoryStorages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     */
    repositoryStoragesWeighted?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     */
    requireAdminApprovalAfterUserSignup?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     */
    requireTwoFactorAuthentication?: pulumi.Input<boolean>;
    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
     */
    restrictedVisibilityLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
     */
    rsaKeyRestriction?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
     */
    searchRateLimit?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
     */
    searchRateLimitUnauthenticated?: pulumi.Input<number>;
    /**
     * Send confirmation email on sign-up.
     */
    sendUserConfirmationEmail?: pulumi.Input<boolean>;
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     */
    sessionExpireDelay?: pulumi.Input<number>;
    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     */
    sharedRunnersMinutes?: pulumi.Input<number>;
    /**
     * Shared runners text.
     */
    sharedRunnersText?: pulumi.Input<string>;
    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
     */
    sidekiqJobLimiterCompressionThresholdBytes?: pulumi.Input<number>;
    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
     */
    sidekiqJobLimiterLimitBytes?: pulumi.Input<number>;
    /**
     * track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
     */
    sidekiqJobLimiterMode?: pulumi.Input<string>;
    /**
     * Text on the login page.
     */
    signInText?: pulumi.Input<string>;
    /**
     * Enable registration. Default is true.
     */
    signupEnabled?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     */
    slackAppEnabled?: pulumi.Input<boolean>;
    /**
     * The app ID of the Slack-app.
     */
    slackAppId?: pulumi.Input<string>;
    /**
     * The app secret of the Slack-app.
     */
    slackAppSecret?: pulumi.Input<string>;
    /**
     * The signing secret of the Slack-app.
     */
    slackAppSigningSecret?: pulumi.Input<string>;
    /**
     * The verification token of the Slack-app.
     */
    slackAppVerificationToken?: pulumi.Input<string>;
    /**
     * Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
     */
    snippetSizeLimit?: pulumi.Input<number>;
    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     */
    snowplowAppId?: pulumi.Input<string>;
    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     */
    snowplowCollectorHostname?: pulumi.Input<string>;
    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     */
    snowplowCookieDomain?: pulumi.Input<string>;
    /**
     * Enable snowplow tracking.
     */
    snowplowEnabled?: pulumi.Input<boolean>;
    /**
     * Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
     */
    sourcegraphEnabled?: pulumi.Input<boolean>;
    /**
     * Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
     */
    sourcegraphPublicOnly?: pulumi.Input<boolean>;
    /**
     * The Sourcegraph instance URL for integration.
     */
    sourcegraphUrl?: pulumi.Input<string>;
    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     */
    spamCheckApiKey?: pulumi.Input<string>;
    /**
     * Enables spam checking using external Spam Check API endpoint. Default is false.
     */
    spamCheckEndpointEnabled?: pulumi.Input<boolean>;
    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     */
    spamCheckEndpointUrl?: pulumi.Input<string>;
    /**
     * Enable pipeline suggestion banner.
     */
    suggestPipelineEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     */
    terminalMaxSessionTime?: pulumi.Input<number>;
    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     */
    terms?: pulumi.Input<string>;
    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * Limit display of time tracking units to hours. Default is false.
     */
    timeTrackingLimitToHours?: pulumi.Input<boolean>;
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     */
    twoFactorGracePeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     */
    uniqueIpsLimitEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum number of IPs per user.
     */
    uniqueIpsLimitPerUser?: pulumi.Input<number>;
    /**
     * How many seconds an IP is counted towards the limit.
     */
    uniqueIpsLimitTimeWindow?: pulumi.Input<number>;
    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     */
    usagePingEnabled?: pulumi.Input<boolean>;
    /**
     * Send an email to users upon account deactivation.
     */
    userDeactivationEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Newly registered users are external by default.
     */
    userDefaultExternal?: pulumi.Input<boolean>;
    /**
     * Specify an email address regex pattern to identify default internal users.
     */
    userDefaultInternalRegex?: pulumi.Input<string>;
    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     */
    userOauthApplications?: pulumi.Input<boolean>;
    /**
     * When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     */
    userShowAddSshKeyMessage?: pulumi.Input<boolean>;
    /**
     * Let GitLab inform you when an update is available.
     */
    versionCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     */
    webIdeClientsidePreviewEnabled?: pulumi.Input<boolean>;
    /**
     * What’s new variant, possible values: all*tiers, current*tier, and disabled.
     */
    whatsNewVariant?: pulumi.Input<string>;
    /**
     * Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
     */
    wikiPageMaxContentBytes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ApplicationSettings resource.
 */
export interface ApplicationSettingsArgs {
    /**
     * If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
     */
    abuseNotificationEmail?: pulumi.Input<string>;
    /**
     * Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
     */
    adminMode?: pulumi.Input<boolean>;
    /**
     * Where to redirect users after logout.
     */
    afterSignOutPath?: pulumi.Input<string>;
    /**
     * Text shown to the user after signing up.
     */
    afterSignUpText?: pulumi.Input<string>;
    /**
     * API key for Akismet spam protection.
     */
    akismetApiKey?: pulumi.Input<string>;
    /**
     * (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
     */
    akismetEnabled?: pulumi.Input<boolean>;
    /**
     * Set to true to allow group owners to manage LDAP.
     */
    allowGroupOwnersToManageLdap?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from system hooks.
     */
    allowLocalRequestsFromSystemHooks?: pulumi.Input<boolean>;
    /**
     * Allow requests to the local network from web hooks and services.
     */
    allowLocalRequestsFromWebHooksAndServices?: pulumi.Input<boolean>;
    /**
     * Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
     */
    archiveBuildsInHumanReadable?: pulumi.Input<string>;
    /**
     * Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
     */
    assetProxyAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
     */
    assetProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Shared secret with the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxySecretKey?: pulumi.Input<string>;
    /**
     * URL of the asset proxy server. GitLab restart is required to apply changes.
     */
    assetProxyUrl?: pulumi.Input<string>;
    /**
     * By default, we write to the authorizedKeys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
     */
    authorizedKeysEnabled?: pulumi.Input<boolean>;
    /**
     * Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
     */
    autoDevopsDomain?: pulumi.Input<string>;
    /**
     * Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
     */
    autoDevopsEnabled?: pulumi.Input<boolean>;
    /**
     * Enabling this permits automatic allocation of purchased storage in a namespace.
     */
    automaticPurchasedStorageAllocation?: pulumi.Input<boolean>;
    /**
     * Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
     */
    checkNamespacePlan?: pulumi.Input<boolean>;
    /**
     * Custom hostname (for private commit emails).
     */
    commitEmailHostname?: pulumi.Input<string>;
    /**
     * Enable cleanup policies for all projects.
     */
    containerExpirationPoliciesEnableHistoricEntries?: pulumi.Input<boolean>;
    /**
     * The maximum number of tags that can be deleted in a single execution of cleanup policies.
     */
    containerRegistryCleanupTagsServiceMaxListSize?: pulumi.Input<number>;
    /**
     * The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
     */
    containerRegistryDeleteTagsServiceTimeout?: pulumi.Input<number>;
    /**
     * Caching during the execution of cleanup policies.
     */
    containerRegistryExpirationPoliciesCaching?: pulumi.Input<boolean>;
    /**
     * Number of workers for cleanup policies.
     */
    containerRegistryExpirationPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Container Registry token duration in minutes.
     */
    containerRegistryTokenExpireDelay?: pulumi.Input<number>;
    /**
     * Enable automatic deactivation of dormant users.
     */
    deactivateDormantUsers?: pulumi.Input<boolean>;
    /**
     * Set the default expiration time for each job’s artifacts.
     */
    defaultArtifactsExpireIn?: pulumi.Input<string>;
    /**
     * Instance-level custom initial branch name (introduced in GitLab 13.2).
     */
    defaultBranchName?: pulumi.Input<string>;
    /**
     * Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
     */
    defaultBranchProtection?: pulumi.Input<number>;
    /**
     * Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
     */
    defaultCiConfigPath?: pulumi.Input<string>;
    /**
     * What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
     */
    defaultGroupVisibility?: pulumi.Input<string>;
    /**
     * Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
     */
    defaultProjectCreation?: pulumi.Input<number>;
    /**
     * What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
     */
    defaultProjectVisibility?: pulumi.Input<string>;
    /**
     * Project limit per user. Default is 100000.
     */
    defaultProjectsLimit?: pulumi.Input<number>;
    /**
     * What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
     */
    defaultSnippetVisibility?: pulumi.Input<string>;
    /**
     * Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
     */
    delayedGroupDeletion?: pulumi.Input<boolean>;
    /**
     * Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
     */
    delayedProjectDeletion?: pulumi.Input<boolean>;
    /**
     * Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
     */
    deleteInactiveProjects?: pulumi.Input<boolean>;
    /**
     * The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
     */
    deletionAdjournedPeriod?: pulumi.Input<number>;
    /**
     * Maximum files in a diff.
     */
    diffMaxFiles?: pulumi.Input<number>;
    /**
     * Maximum lines in a diff.
     */
    diffMaxLines?: pulumi.Input<number>;
    /**
     * Maximum diff patch size, in bytes.
     */
    diffMaxPatchBytes?: pulumi.Input<number>;
    /**
     * Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
     */
    disableFeedToken?: pulumi.Input<boolean>;
    /**
     * Disabled OAuth sign-in sources.
     */
    disabledOauthSignInSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enforce DNS rebinding attack protection.
     */
    dnsRebindingProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
     */
    domainAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
     */
    domainDenylistEnabled?: pulumi.Input<boolean>;
    /**
     * Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
     */
    domainDenylists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
     */
    dsaKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
     */
    ecdsaKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
     */
    ecdsaSkKeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
     */
    ed25519KeyRestriction?: pulumi.Input<number>;
    /**
     * The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
     */
    ed25519SkKeyRestriction?: pulumi.Input<number>;
    /**
     * AWS IAM access key ID.
     */
    eksAccessKeyId?: pulumi.Input<string>;
    /**
     * Amazon account ID.
     */
    eksAccountId?: pulumi.Input<string>;
    /**
     * Enable integration with Amazon EKS.
     */
    eksIntegrationEnabled?: pulumi.Input<boolean>;
    /**
     * AWS IAM secret access key.
     */
    eksSecretAccessKey?: pulumi.Input<string>;
    /**
     * Enable the use of AWS hosted Elasticsearch.
     */
    elasticsearchAws?: pulumi.Input<boolean>;
    /**
     * AWS IAM access key.
     */
    elasticsearchAwsAccessKey?: pulumi.Input<string>;
    /**
     * The AWS region the Elasticsearch domain is configured.
     */
    elasticsearchAwsRegion?: pulumi.Input<string>;
    /**
     * AWS IAM secret access key.
     */
    elasticsearchAwsSecretAccessKey?: pulumi.Input<string>;
    /**
     * Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
     */
    elasticsearchIndexedFieldLengthLimit?: pulumi.Input<number>;
    /**
     * Maximum size of repository and wiki files that are indexed by Elasticsearch.
     */
    elasticsearchIndexedFileSizeLimitKb?: pulumi.Input<number>;
    /**
     * Enable Elasticsearch indexing.
     */
    elasticsearchIndexing?: pulumi.Input<boolean>;
    /**
     * Limit Elasticsearch to index certain namespaces and projects.
     */
    elasticsearchLimitIndexing?: pulumi.Input<boolean>;
    /**
     * Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkConcurrency?: pulumi.Input<number>;
    /**
     * Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
     */
    elasticsearchMaxBulkSizeMb?: pulumi.Input<number>;
    /**
     * The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchNamespaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The password of your Elasticsearch instance.
     */
    elasticsearchPassword?: pulumi.Input<string>;
    /**
     * The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
     */
    elasticsearchProjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable Elasticsearch search.
     */
    elasticsearchSearch?: pulumi.Input<boolean>;
    /**
     * The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
     */
    elasticsearchUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username of your Elasticsearch instance.
     */
    elasticsearchUsername?: pulumi.Input<string>;
    /**
     * Additional text added to the bottom of every email for legal/auditing/compliance reasons.
     */
    emailAdditionalText?: pulumi.Input<string>;
    /**
     * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
     */
    emailAuthorInBody?: pulumi.Input<boolean>;
    /**
     * Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
     */
    enabledGitAccessProtocol?: pulumi.Input<string>;
    /**
     * Enabling this permits enforcement of namespace storage limits.
     */
    enforceNamespaceStorageLimit?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: terms) Enforce application ToS to all users.
     */
    enforceTerms?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
     */
    externalAuthClientCert?: pulumi.Input<string>;
    /**
     * Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
     */
    externalAuthClientKey?: pulumi.Input<string>;
    /**
     * Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
     */
    externalAuthClientKeyPass?: pulumi.Input<string>;
    /**
     * The default classification label to use when requesting authorization and no classification label has been specified on the project.
     */
    externalAuthorizationServiceDefaultLabel?: pulumi.Input<string>;
    /**
     * (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
     */
    externalAuthorizationServiceEnabled?: pulumi.Input<boolean>;
    /**
     * The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
     */
    externalAuthorizationServiceTimeout?: pulumi.Input<number>;
    /**
     * URL to which authorization requests are directed.
     */
    externalAuthorizationServiceUrl?: pulumi.Input<string>;
    /**
     * How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
     */
    externalPipelineValidationServiceTimeout?: pulumi.Input<number>;
    /**
     * Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
     */
    externalPipelineValidationServiceToken?: pulumi.Input<string>;
    /**
     * URL to use for pipeline validation requests.
     */
    externalPipelineValidationServiceUrl?: pulumi.Input<string>;
    /**
     * The ID of a project to load custom file templates from.
     */
    fileTemplateProjectId?: pulumi.Input<number>;
    /**
     * Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
     */
    firstDayOfWeek?: pulumi.Input<number>;
    /**
     * Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
     */
    geoNodeAllowedIps?: pulumi.Input<string>;
    /**
     * The amount of seconds after which a request to get a secondary node status times out.
     */
    geoStatusTimeout?: pulumi.Input<number>;
    /**
     * List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
     */
    gitRateLimitUsersAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
     */
    gitTwoFactorSessionExpiry?: pulumi.Input<number>;
    /**
     * Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
     */
    gitalyTimeoutDefault?: pulumi.Input<number>;
    /**
     * Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
     */
    gitalyTimeoutFast?: pulumi.Input<number>;
    /**
     * Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
     */
    gitalyTimeoutMedium?: pulumi.Input<number>;
    /**
     * Enable Grafana.
     */
    grafanaEnabled?: pulumi.Input<boolean>;
    /**
     * Grafana URL.
     */
    grafanaUrl?: pulumi.Input<string>;
    /**
     * Enable Gravatar.
     */
    gravatarEnabled?: pulumi.Input<boolean>;
    /**
     * Prevent overrides of default branch protection.
     */
    groupOwnersCanManageDefaultBranchProtection?: pulumi.Input<boolean>;
    /**
     * Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
     */
    hashedStorageEnabled?: pulumi.Input<boolean>;
    /**
     * Hide marketing-related entries from help.
     */
    helpPageHideCommercialContent?: pulumi.Input<boolean>;
    /**
     * Alternate support URL for help page and help dropdown.
     */
    helpPageSupportUrl?: pulumi.Input<string>;
    /**
     * Custom text displayed on the help page.
     */
    helpPageText?: pulumi.Input<string>;
    /**
     * GitLab server administrator information.
     */
    helpText?: pulumi.Input<string>;
    /**
     * Do not display offers from third parties in GitLab.
     */
    hideThirdPartyOffers?: pulumi.Input<boolean>;
    /**
     * Redirect to this URL when not logged in.
     */
    homePageUrl?: pulumi.Input<string>;
    /**
     * (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
     */
    housekeepingEnabled?: pulumi.Input<boolean>;
    /**
     * Number of Git pushes after which an incremental git repack is run.
     */
    housekeepingFullRepackPeriod?: pulumi.Input<number>;
    /**
     * Number of Git pushes after which git gc is run.
     */
    housekeepingGcPeriod?: pulumi.Input<number>;
    /**
     * Number of Git pushes after which an incremental git repack is run.
     */
    housekeepingIncrementalRepackPeriod?: pulumi.Input<number>;
    /**
     * Enable HTML emails.
     */
    htmlEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
     */
    importSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable in-product marketing emails. Enabled by default.
     */
    inProductMarketingEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    inactiveProjectsDeleteAfterMonths?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    inactiveProjectsMinSizeMb?: pulumi.Input<number>;
    /**
     * If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
     */
    inactiveProjectsSendWarningEmailAfterMonths?: pulumi.Input<number>;
    /**
     * Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
     */
    invisibleCaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Max number of issue creation requests per minute per user. Disabled by default.
     */
    issuesCreateLimit?: pulumi.Input<number>;
    /**
     * Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
     */
    keepLatestArtifact?: pulumi.Input<boolean>;
    /**
     * Increase this value when any cached Markdown should be invalidated.
     */
    localMarkdownVersion?: pulumi.Input<number>;
    /**
     * Enable Mailgun event receiver.
     */
    mailgunEventsEnabled?: pulumi.Input<boolean>;
    /**
     * The Mailgun HTTP webhook signing key for receiving events from webhook.
     */
    mailgunSigningKey?: pulumi.Input<string>;
    /**
     * When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
     */
    maintenanceMode?: pulumi.Input<boolean>;
    /**
     * Message displayed when instance is in maintenance mode.
     */
    maintenanceModeMessage?: pulumi.Input<string>;
    /**
     * Maximum artifacts size in MB.
     */
    maxArtifactsSize?: pulumi.Input<number>;
    /**
     * Limit attachment size in MB.
     */
    maxAttachmentSize?: pulumi.Input<number>;
    /**
     * Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
     */
    maxExportSize?: pulumi.Input<number>;
    /**
     * Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
     */
    maxImportSize?: pulumi.Input<number>;
    /**
     * Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
     */
    maxNumberOfRepositoryDownloads?: pulumi.Input<number>;
    /**
     * Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
     */
    maxNumberOfRepositoryDownloadsWithinTimePeriod?: pulumi.Input<number>;
    /**
     * Maximum size of pages repositories in MB.
     */
    maxPagesSize?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for access tokens in days.
     */
    maxPersonalAccessTokenLifetime?: pulumi.Input<number>;
    /**
     * Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
     */
    maxSshKeyLifetime?: pulumi.Input<number>;
    /**
     * A method call is only tracked when it takes longer than the given amount of milliseconds.
     */
    metricsMethodCallThreshold?: pulumi.Input<number>;
    /**
     * Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
     */
    mirrorAvailable?: pulumi.Input<boolean>;
    /**
     * Minimum capacity to be available before scheduling more mirrors preemptively.
     */
    mirrorCapacityThreshold?: pulumi.Input<number>;
    /**
     * Maximum number of mirrors that can be synchronizing at the same time.
     */
    mirrorMaxCapacity?: pulumi.Input<number>;
    /**
     * Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
     */
    mirrorMaxDelay?: pulumi.Input<number>;
    /**
     * Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
     */
    npmPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
     */
    outboundLocalRequestsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of workers assigned to the packages cleanup policies.
     */
    packageRegistryCleanupPoliciesWorkerCapacity?: pulumi.Input<number>;
    /**
     * Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
     */
    pagesDomainVerificationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
     */
    passwordAuthenticationEnabledForGit?: pulumi.Input<boolean>;
    /**
     * Enable authentication for the web interface via a GitLab account password. Default is true.
     */
    passwordAuthenticationEnabledForWeb?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
     */
    passwordLowercaseRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
     */
    passwordNumberRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
     */
    passwordSymbolRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
     */
    passwordUppercaseRequired?: pulumi.Input<boolean>;
    /**
     * Path of the group that is allowed to toggle the performance bar.
     */
    performanceBarAllowedGroupPath?: pulumi.Input<string>;
    /**
     * Prefix for all generated personal access tokens.
     */
    personalAccessTokenPrefix?: pulumi.Input<string>;
    /**
     * Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
     */
    pipelineLimitPerProjectUserSha?: pulumi.Input<number>;
    /**
     * (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
     */
    plantumlEnabled?: pulumi.Input<boolean>;
    /**
     * The PlantUML instance URL for integration.
     */
    plantumlUrl?: pulumi.Input<string>;
    /**
     * Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
     */
    pollingIntervalMultiplier?: pulumi.Input<number>;
    /**
     * Enable project export.
     */
    projectExportEnabled?: pulumi.Input<boolean>;
    /**
     * Enable Prometheus metrics.
     */
    prometheusMetricsEnabled?: pulumi.Input<boolean>;
    /**
     * CI/CD variables are protected by default.
     */
    protectedCiVariables?: pulumi.Input<boolean>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
     */
    pushEventActivitiesLimit?: pulumi.Input<number>;
    /**
     * Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
     */
    pushEventHooksLimit?: pulumi.Input<number>;
    /**
     * Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
     */
    pypiPackageRequestsForwarding?: pulumi.Input<boolean>;
    /**
     * When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
     */
    rateLimitingResponseText?: pulumi.Input<string>;
    /**
     * Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
     */
    rawBlobRequestLimit?: pulumi.Input<number>;
    /**
     * (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
     */
    recaptchaEnabled?: pulumi.Input<boolean>;
    /**
     * Private key for reCAPTCHA.
     */
    recaptchaPrivateKey?: pulumi.Input<string>;
    /**
     * Site key for reCAPTCHA.
     */
    recaptchaSiteKey?: pulumi.Input<string>;
    /**
     * Maximum push size (MB).
     */
    receiveMaxInputSize?: pulumi.Input<number>;
    /**
     * GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
     */
    repositoryChecksEnabled?: pulumi.Input<boolean>;
    /**
     * Size limit per repository (MB).
     */
    repositorySizeLimit?: pulumi.Input<number>;
    /**
     * (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
     */
    repositoryStorages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
     */
    repositoryStoragesWeighted?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
     */
    requireAdminApprovalAfterUserSignup?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
     */
    requireTwoFactorAuthentication?: pulumi.Input<boolean>;
    /**
     * Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
     */
    restrictedVisibilityLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
     */
    rsaKeyRestriction?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
     */
    searchRateLimit?: pulumi.Input<number>;
    /**
     * Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
     */
    searchRateLimitUnauthenticated?: pulumi.Input<number>;
    /**
     * Send confirmation email on sign-up.
     */
    sendUserConfirmationEmail?: pulumi.Input<boolean>;
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     */
    sessionExpireDelay?: pulumi.Input<number>;
    /**
     * (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
     */
    sharedRunnersEnabled?: pulumi.Input<boolean>;
    /**
     * Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
     */
    sharedRunnersMinutes?: pulumi.Input<number>;
    /**
     * Shared runners text.
     */
    sharedRunnersText?: pulumi.Input<string>;
    /**
     * The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
     */
    sidekiqJobLimiterCompressionThresholdBytes?: pulumi.Input<number>;
    /**
     * The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
     */
    sidekiqJobLimiterLimitBytes?: pulumi.Input<number>;
    /**
     * track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
     */
    sidekiqJobLimiterMode?: pulumi.Input<string>;
    /**
     * Text on the login page.
     */
    signInText?: pulumi.Input<string>;
    /**
     * Enable registration. Default is true.
     */
    signupEnabled?: pulumi.Input<boolean>;
    /**
     * (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
     */
    slackAppEnabled?: pulumi.Input<boolean>;
    /**
     * The app ID of the Slack-app.
     */
    slackAppId?: pulumi.Input<string>;
    /**
     * The app secret of the Slack-app.
     */
    slackAppSecret?: pulumi.Input<string>;
    /**
     * The signing secret of the Slack-app.
     */
    slackAppSigningSecret?: pulumi.Input<string>;
    /**
     * The verification token of the Slack-app.
     */
    slackAppVerificationToken?: pulumi.Input<string>;
    /**
     * Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
     */
    snippetSizeLimit?: pulumi.Input<number>;
    /**
     * The Snowplow site name / application ID. (for example, gitlab)
     */
    snowplowAppId?: pulumi.Input<string>;
    /**
     * The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
     */
    snowplowCollectorHostname?: pulumi.Input<string>;
    /**
     * The Snowplow cookie domain. (for example, .gitlab.com)
     */
    snowplowCookieDomain?: pulumi.Input<string>;
    /**
     * Enable snowplow tracking.
     */
    snowplowEnabled?: pulumi.Input<boolean>;
    /**
     * Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
     */
    sourcegraphEnabled?: pulumi.Input<boolean>;
    /**
     * Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
     */
    sourcegraphPublicOnly?: pulumi.Input<boolean>;
    /**
     * The Sourcegraph instance URL for integration.
     */
    sourcegraphUrl?: pulumi.Input<string>;
    /**
     * API key used by GitLab for accessing the Spam Check service endpoint.
     */
    spamCheckApiKey?: pulumi.Input<string>;
    /**
     * Enables spam checking using external Spam Check API endpoint. Default is false.
     */
    spamCheckEndpointEnabled?: pulumi.Input<boolean>;
    /**
     * URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
     */
    spamCheckEndpointUrl?: pulumi.Input<string>;
    /**
     * Enable pipeline suggestion banner.
     */
    suggestPipelineEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
     */
    terminalMaxSessionTime?: pulumi.Input<number>;
    /**
     * (Required by: enforce_terms) Markdown content for the ToS.
     */
    terms?: pulumi.Input<string>;
    /**
     * (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleAuthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleAuthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds).
     */
    throttleAuthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user.
     */
    throttleAuthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period (in seconds). View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Maximum requests per period per user. View Package Registry rate limits for more details.
     */
    throttleUnauthenticatedPackagesApiRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
     */
    throttleUnauthenticatedWebEnabled?: pulumi.Input<boolean>;
    /**
     * Rate limit period in seconds.
     */
    throttleUnauthenticatedWebPeriodInSeconds?: pulumi.Input<number>;
    /**
     * Max requests per period per IP.
     */
    throttleUnauthenticatedWebRequestsPerPeriod?: pulumi.Input<number>;
    /**
     * Limit display of time tracking units to hours. Default is false.
     */
    timeTrackingLimitToHours?: pulumi.Input<boolean>;
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
     */
    twoFactorGracePeriod?: pulumi.Input<number>;
    /**
     * (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
     */
    uniqueIpsLimitEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum number of IPs per user.
     */
    uniqueIpsLimitPerUser?: pulumi.Input<number>;
    /**
     * How many seconds an IP is counted towards the limit.
     */
    uniqueIpsLimitTimeWindow?: pulumi.Input<number>;
    /**
     * Every week GitLab reports license usage back to GitLab, Inc.
     */
    usagePingEnabled?: pulumi.Input<boolean>;
    /**
     * Send an email to users upon account deactivation.
     */
    userDeactivationEmailsEnabled?: pulumi.Input<boolean>;
    /**
     * Newly registered users are external by default.
     */
    userDefaultExternal?: pulumi.Input<boolean>;
    /**
     * Specify an email address regex pattern to identify default internal users.
     */
    userDefaultInternalRegex?: pulumi.Input<string>;
    /**
     * Allow users to register any application to use GitLab as an OAuth provider.
     */
    userOauthApplications?: pulumi.Input<boolean>;
    /**
     * When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
     */
    userShowAddSshKeyMessage?: pulumi.Input<boolean>;
    /**
     * Let GitLab inform you when an update is available.
     */
    versionCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
     */
    webIdeClientsidePreviewEnabled?: pulumi.Input<boolean>;
    /**
     * What’s new variant, possible values: all*tiers, current*tier, and disabled.
     */
    whatsNewVariant?: pulumi.Input<string>;
    /**
     * Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
     */
    wikiPageMaxContentBytes?: pulumi.Input<number>;
}
