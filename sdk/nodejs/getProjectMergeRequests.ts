// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `gitlab.getProjectMergeRequests` data source retrieves
 * information about a list of merge requests related to a specific project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const exampleOne = gitlab.getProjectMergeRequests({
 *     project: "123",
 *     targetBranch: "main",
 *     wip: "yes",
 * });
 * const exampleTwo = gitlab.getProjectMergeRequests({
 *     project: "company/group/project1",
 *     authorId: 5,
 *     createdAfter: "2024-07-25T12:00:00Z",
 * });
 * ```
 */
export function getProjectMergeRequests(args: GetProjectMergeRequestsArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectMergeRequestsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", {
        "authorId": args.authorId,
        "authorUsername": args.authorUsername,
        "createdAfter": args.createdAfter,
        "createdBefore": args.createdBefore,
        "iids": args.iids,
        "milestone": args.milestone,
        "myReactionEmoji": args.myReactionEmoji,
        "orderBy": args.orderBy,
        "project": args.project,
        "reviewerUsername": args.reviewerUsername,
        "scope": args.scope,
        "search": args.search,
        "sort": args.sort,
        "sourceBranch": args.sourceBranch,
        "state": args.state,
        "targetBranch": args.targetBranch,
        "updatedAfter": args.updatedAfter,
        "updatedBefore": args.updatedBefore,
        "wip": args.wip,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectMergeRequests.
 */
export interface GetProjectMergeRequestsArgs {
    /**
     * Return merge requests created by the given user ID.
     */
    authorId?: number;
    /**
     * Return merge requests created by the given username.
     */
    authorUsername?: string;
    /**
     * Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    createdAfter?: string;
    /**
     * Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    createdBefore?: string;
    /**
     * The unique internal IDs of the merge requests.
     */
    iids?: number[];
    /**
     * Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
     */
    milestone?: string;
    /**
     * Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
     */
    myReactionEmoji?: string;
    /**
     * Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
     */
    orderBy?: string;
    /**
     * The ID or path of the project.
     */
    project: string;
    /**
     * Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
     */
    reviewerUsername?: string;
    /**
     * Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
     */
    scope?: string;
    /**
     * Search merge requests against their `title` or `description`.
     */
    search?: string;
    /**
     * Return requests sorted in `asc` or `desc` order. Default is `desc`.
     */
    sort?: string;
    /**
     * Return merge requests with the given source branch.
     */
    sourceBranch?: string;
    /**
     * Return all merge requests (all) or just those that are opened, closed, locked, or merged.
     */
    state?: string;
    /**
     * Return merge requests with the given target branch.
     */
    targetBranch?: string;
    /**
     * Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    updatedAfter?: string;
    /**
     * Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    updatedBefore?: string;
    /**
     * Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
     */
    wip?: string;
}

/**
 * A collection of values returned by getProjectMergeRequests.
 */
export interface GetProjectMergeRequestsResult {
    /**
     * Return merge requests created by the given user ID.
     */
    readonly authorId?: number;
    /**
     * Return merge requests created by the given username.
     */
    readonly authorUsername?: string;
    /**
     * Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    readonly createdAfter?: string;
    /**
     * Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    readonly createdBefore?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The unique internal IDs of the merge requests.
     */
    readonly iids?: number[];
    /**
     * The list of merge requests.
     */
    readonly mergeRequests: outputs.GetProjectMergeRequestsMergeRequest[];
    /**
     * Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
     */
    readonly milestone?: string;
    /**
     * Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
     */
    readonly myReactionEmoji?: string;
    /**
     * Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
     */
    readonly orderBy?: string;
    /**
     * The ID or path of the project.
     */
    readonly project: string;
    /**
     * Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
     */
    readonly reviewerUsername?: string;
    /**
     * Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
     */
    readonly scope?: string;
    /**
     * Search merge requests against their `title` or `description`.
     */
    readonly search?: string;
    /**
     * Return requests sorted in `asc` or `desc` order. Default is `desc`.
     */
    readonly sort?: string;
    /**
     * Return merge requests with the given source branch.
     */
    readonly sourceBranch?: string;
    /**
     * Return all merge requests (all) or just those that are opened, closed, locked, or merged.
     */
    readonly state?: string;
    /**
     * Return merge requests with the given target branch.
     */
    readonly targetBranch?: string;
    /**
     * Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    readonly updatedAfter?: string;
    /**
     * Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    readonly updatedBefore?: string;
    /**
     * Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
     */
    readonly wip?: string;
}
/**
 * The `gitlab.getProjectMergeRequests` data source retrieves
 * information about a list of merge requests related to a specific project.
 *
 * **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gitlab from "@pulumi/gitlab";
 *
 * const exampleOne = gitlab.getProjectMergeRequests({
 *     project: "123",
 *     targetBranch: "main",
 *     wip: "yes",
 * });
 * const exampleTwo = gitlab.getProjectMergeRequests({
 *     project: "company/group/project1",
 *     authorId: 5,
 *     createdAfter: "2024-07-25T12:00:00Z",
 * });
 * ```
 */
export function getProjectMergeRequestsOutput(args: GetProjectMergeRequestsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectMergeRequestsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", {
        "authorId": args.authorId,
        "authorUsername": args.authorUsername,
        "createdAfter": args.createdAfter,
        "createdBefore": args.createdBefore,
        "iids": args.iids,
        "milestone": args.milestone,
        "myReactionEmoji": args.myReactionEmoji,
        "orderBy": args.orderBy,
        "project": args.project,
        "reviewerUsername": args.reviewerUsername,
        "scope": args.scope,
        "search": args.search,
        "sort": args.sort,
        "sourceBranch": args.sourceBranch,
        "state": args.state,
        "targetBranch": args.targetBranch,
        "updatedAfter": args.updatedAfter,
        "updatedBefore": args.updatedBefore,
        "wip": args.wip,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjectMergeRequests.
 */
export interface GetProjectMergeRequestsOutputArgs {
    /**
     * Return merge requests created by the given user ID.
     */
    authorId?: pulumi.Input<number>;
    /**
     * Return merge requests created by the given username.
     */
    authorUsername?: pulumi.Input<string>;
    /**
     * Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    createdAfter?: pulumi.Input<string>;
    /**
     * Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    createdBefore?: pulumi.Input<string>;
    /**
     * The unique internal IDs of the merge requests.
     */
    iids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
     */
    milestone?: pulumi.Input<string>;
    /**
     * Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
     */
    myReactionEmoji?: pulumi.Input<string>;
    /**
     * Return requests ordered by `createdAt`, `title` or `updatedAt`. Default is `createdAt`.
     */
    orderBy?: pulumi.Input<string>;
    /**
     * The ID or path of the project.
     */
    project: pulumi.Input<string>;
    /**
     * Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
     */
    reviewerUsername?: pulumi.Input<string>;
    /**
     * Return merge requests for the given scope: `createdByMe`, `assignedToMe`, or `all`.
     */
    scope?: pulumi.Input<string>;
    /**
     * Search merge requests against their `title` or `description`.
     */
    search?: pulumi.Input<string>;
    /**
     * Return requests sorted in `asc` or `desc` order. Default is `desc`.
     */
    sort?: pulumi.Input<string>;
    /**
     * Return merge requests with the given source branch.
     */
    sourceBranch?: pulumi.Input<string>;
    /**
     * Return all merge requests (all) or just those that are opened, closed, locked, or merged.
     */
    state?: pulumi.Input<string>;
    /**
     * Return merge requests with the given target branch.
     */
    targetBranch?: pulumi.Input<string>;
    /**
     * Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    updatedAfter?: pulumi.Input<string>;
    /**
     * Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
     */
    updatedBefore?: pulumi.Input<string>;
    /**
     * Filter merge requests against their wip status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
     */
    wip?: pulumi.Input<string>;
}
