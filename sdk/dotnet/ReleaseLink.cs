// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ReleaseLink` resource allows to manage the lifecycle of a release link.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a project
    ///     var exampleProject = new GitLab.Project("exampleProject", new()
    ///     {
    ///         Description = "An example project",
    ///     });
    /// 
    ///     // Can create release link only to a tag associated with a release
    ///     var exampleReleaseLink = new GitLab.ReleaseLink("exampleReleaseLink", new()
    ///     {
    ///         Project = exampleProject.Id,
    ///         TagName = "tag_name_associated_with_release",
    ///         Url = "https://test/",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Gitlab release link can be imported with a key composed of `&lt;project&gt;:&lt;tag_name&gt;:&lt;link_id&gt;`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/releaseLink:ReleaseLink example "12345:test:2"
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/releaseLink:ReleaseLink")]
    public partial class ReleaseLink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Full path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
        /// </summary>
        [Output("directAssetUrl")]
        public Output<string> DirectAssetUrl { get; private set; } = null!;

        /// <summary>
        /// External or internal link.
        /// </summary>
        [Output("external")]
        public Output<bool> External { get; private set; } = null!;

        /// <summary>
        /// Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
        /// </summary>
        [Output("filepath")]
        public Output<string?> Filepath { get; private set; } = null!;

        /// <summary>
        /// The ID of the link.
        /// </summary>
        [Output("linkId")]
        public Output<int> LinkId { get; private set; } = null!;

        /// <summary>
        /// The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
        /// </summary>
        [Output("linkType")]
        public Output<string?> LinkType { get; private set; } = null!;

        /// <summary>
        /// The name of the link. Link names must be unique within the release.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The tag associated with the Release.
        /// </summary>
        [Output("tagName")]
        public Output<string> TagName { get; private set; } = null!;

        /// <summary>
        /// The URL of the link. Link URLs must be unique within the release.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a ReleaseLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReleaseLink(string name, ReleaseLinkArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/releaseLink:ReleaseLink", name, args ?? new ReleaseLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReleaseLink(string name, Input<string> id, ReleaseLinkState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/releaseLink:ReleaseLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReleaseLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReleaseLink Get(string name, Input<string> id, ReleaseLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new ReleaseLink(name, id, state, options);
        }
    }

    public sealed class ReleaseLinkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
        /// </summary>
        [Input("filepath")]
        public Input<string>? Filepath { get; set; }

        /// <summary>
        /// The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
        /// </summary>
        [Input("linkType")]
        public Input<string>? LinkType { get; set; }

        /// <summary>
        /// The name of the link. Link names must be unique within the release.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// The tag associated with the Release.
        /// </summary>
        [Input("tagName", required: true)]
        public Input<string> TagName { get; set; } = null!;

        /// <summary>
        /// The URL of the link. Link URLs must be unique within the release.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public ReleaseLinkArgs()
        {
        }
        public static new ReleaseLinkArgs Empty => new ReleaseLinkArgs();
    }

    public sealed class ReleaseLinkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Full path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
        /// </summary>
        [Input("directAssetUrl")]
        public Input<string>? DirectAssetUrl { get; set; }

        /// <summary>
        /// External or internal link.
        /// </summary>
        [Input("external")]
        public Input<bool>? External { get; set; }

        /// <summary>
        /// Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).
        /// </summary>
        [Input("filepath")]
        public Input<string>? Filepath { get; set; }

        /// <summary>
        /// The ID of the link.
        /// </summary>
        [Input("linkId")]
        public Input<int>? LinkId { get; set; }

        /// <summary>
        /// The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.
        /// </summary>
        [Input("linkType")]
        public Input<string>? LinkType { get; set; }

        /// <summary>
        /// The name of the link. Link names must be unique within the release.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The tag associated with the Release.
        /// </summary>
        [Input("tagName")]
        public Input<string>? TagName { get; set; }

        /// <summary>
        /// The URL of the link. Link URLs must be unique within the release.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ReleaseLinkState()
        {
        }
        public static new ReleaseLinkState Empty => new ReleaseLinkState();
    }
}
