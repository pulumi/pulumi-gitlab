// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetGroupSubgroups
    {
        /// <summary>
        /// The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subgroupsGroupSubgroups = GitLab.GetGroupSubgroups.Invoke(new()
        ///     {
        ///         GroupId = 123456,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["subgroups"] = subgroupsGroupSubgroups,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupSubgroupsResult> InvokeAsync(GetGroupSubgroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupSubgroupsResult>("gitlab:index/getGroupSubgroups:getGroupSubgroups", args ?? new GetGroupSubgroupsArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getGroupSubgroups` data source allows to get subgroups of a group.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subgroupsGroupSubgroups = GitLab.GetGroupSubgroups.Invoke(new()
        ///     {
        ///         GroupId = 123456,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["subgroups"] = subgroupsGroupSubgroups,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupSubgroupsResult> Invoke(GetGroupSubgroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupSubgroupsResult>("gitlab:index/getGroupSubgroups:getGroupSubgroups", args ?? new GetGroupSubgroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupSubgroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Show all the groups you have access to.
        /// </summary>
        [Input("allAvailable")]
        public bool? AllAvailable { get; set; }

        /// <summary>
        /// The ID of the group.
        /// </summary>
        [Input("groupId", required: true)]
        public int GroupId { get; set; }

        /// <summary>
        /// Limit to groups where current user has at least this access level.
        /// </summary>
        [Input("minAccessLevel")]
        public string? MinAccessLevel { get; set; }

        /// <summary>
        /// Order groups by name, path or id.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// Limit to groups explicitly owned by the current user.
        /// </summary>
        [Input("owned")]
        public bool? Owned { get; set; }

        /// <summary>
        /// Return the list of authorized groups matching the search criteria.
        /// </summary>
        [Input("search")]
        public string? Search { get; set; }

        [Input("skipGroups")]
        private List<int>? _skipGroups;

        /// <summary>
        /// Skip the group IDs passed.
        /// </summary>
        public List<int> SkipGroups
        {
            get => _skipGroups ?? (_skipGroups = new List<int>());
            set => _skipGroups = value;
        }

        /// <summary>
        /// Order groups in asc or desc order.
        /// </summary>
        [Input("sort")]
        public string? Sort { get; set; }

        /// <summary>
        /// Include group statistics (administrators only).
        /// </summary>
        [Input("statistics")]
        public bool? Statistics { get; set; }

        /// <summary>
        /// Include custom attributes in response (administrators only).
        /// </summary>
        [Input("withCustomAttributes")]
        public bool? WithCustomAttributes { get; set; }

        public GetGroupSubgroupsArgs()
        {
        }
        public static new GetGroupSubgroupsArgs Empty => new GetGroupSubgroupsArgs();
    }

    public sealed class GetGroupSubgroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Show all the groups you have access to.
        /// </summary>
        [Input("allAvailable")]
        public Input<bool>? AllAvailable { get; set; }

        /// <summary>
        /// The ID of the group.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<int> GroupId { get; set; } = null!;

        /// <summary>
        /// Limit to groups where current user has at least this access level.
        /// </summary>
        [Input("minAccessLevel")]
        public Input<string>? MinAccessLevel { get; set; }

        /// <summary>
        /// Order groups by name, path or id.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// Limit to groups explicitly owned by the current user.
        /// </summary>
        [Input("owned")]
        public Input<bool>? Owned { get; set; }

        /// <summary>
        /// Return the list of authorized groups matching the search criteria.
        /// </summary>
        [Input("search")]
        public Input<string>? Search { get; set; }

        [Input("skipGroups")]
        private InputList<int>? _skipGroups;

        /// <summary>
        /// Skip the group IDs passed.
        /// </summary>
        public InputList<int> SkipGroups
        {
            get => _skipGroups ?? (_skipGroups = new InputList<int>());
            set => _skipGroups = value;
        }

        /// <summary>
        /// Order groups in asc or desc order.
        /// </summary>
        [Input("sort")]
        public Input<string>? Sort { get; set; }

        /// <summary>
        /// Include group statistics (administrators only).
        /// </summary>
        [Input("statistics")]
        public Input<bool>? Statistics { get; set; }

        /// <summary>
        /// Include custom attributes in response (administrators only).
        /// </summary>
        [Input("withCustomAttributes")]
        public Input<bool>? WithCustomAttributes { get; set; }

        public GetGroupSubgroupsInvokeArgs()
        {
        }
        public static new GetGroupSubgroupsInvokeArgs Empty => new GetGroupSubgroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupSubgroupsResult
    {
        /// <summary>
        /// Show all the groups you have access to.
        /// </summary>
        public readonly bool AllAvailable;
        /// <summary>
        /// The ID of the group.
        /// </summary>
        public readonly int GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Limit to groups where current user has at least this access level.
        /// </summary>
        public readonly string MinAccessLevel;
        /// <summary>
        /// Order groups by name, path or id.
        /// </summary>
        public readonly string OrderBy;
        /// <summary>
        /// Limit to groups explicitly owned by the current user.
        /// </summary>
        public readonly bool Owned;
        /// <summary>
        /// Return the list of authorized groups matching the search criteria.
        /// </summary>
        public readonly string Search;
        /// <summary>
        /// Skip the group IDs passed.
        /// </summary>
        public readonly ImmutableArray<int> SkipGroups;
        /// <summary>
        /// Order groups in asc or desc order.
        /// </summary>
        public readonly string Sort;
        /// <summary>
        /// Include group statistics (administrators only).
        /// </summary>
        public readonly bool Statistics;
        /// <summary>
        /// Subgroups of the parent group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGroupSubgroupsSubgroupResult> Subgroups;
        /// <summary>
        /// Include custom attributes in response (administrators only).
        /// </summary>
        public readonly bool WithCustomAttributes;

        [OutputConstructor]
        private GetGroupSubgroupsResult(
            bool allAvailable,

            int groupId,

            string id,

            string minAccessLevel,

            string orderBy,

            bool owned,

            string search,

            ImmutableArray<int> skipGroups,

            string sort,

            bool statistics,

            ImmutableArray<Outputs.GetGroupSubgroupsSubgroupResult> subgroups,

            bool withCustomAttributes)
        {
            AllAvailable = allAvailable;
            GroupId = groupId;
            Id = id;
            MinAccessLevel = minAccessLevel;
            OrderBy = orderBy;
            Owned = owned;
            Search = search;
            SkipGroups = skipGroups;
            Sort = sort;
            Statistics = statistics;
            Subgroups = subgroups;
            WithCustomAttributes = withCustomAttributes;
        }
    }
}
