// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_group_level_mr_approvals`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_group_level_mr_approvals.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals You can import an approval configuration state using `&lt;resource&gt; &lt;group_id&gt;`.
    /// ```
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals foo 1234
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals")]
    public partial class GroupLevelMrApprovals : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or prevent authors from self approving merge requests; `True` means authors can self approve.
        /// </summary>
        [Output("allowAuthorApproval")]
        public Output<bool> AllowAuthorApproval { get; private set; } = null!;

        /// <summary>
        /// Allow or prevent committers from self approving merge requests.
        /// </summary>
        [Output("allowCommitterApproval")]
        public Output<bool> AllowCommitterApproval { get; private set; } = null!;

        /// <summary>
        /// Allow or prevent overriding approvers per merge request.
        /// </summary>
        [Output("allowOverridesToApproverListPerMergeRequest")]
        public Output<bool> AllowOverridesToApproverListPerMergeRequest { get; private set; } = null!;

        /// <summary>
        /// The ID or URL-encoded path of the group.
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        [Output("keepSettingsOnDestroy")]
        public Output<bool> KeepSettingsOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Require approver to authenticate before adding the approval.
        /// </summary>
        [Output("requireReauthenticationToApprove")]
        public Output<bool> RequireReauthenticationToApprove { get; private set; } = null!;

        /// <summary>
        /// Retain approval count on a new push.
        /// </summary>
        [Output("retainApprovalsOnPush")]
        public Output<bool> RetainApprovalsOnPush { get; private set; } = null!;


        /// <summary>
        /// Create a GroupLevelMrApprovals resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupLevelMrApprovals(string name, GroupLevelMrApprovalsArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals", name, args ?? new GroupLevelMrApprovalsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupLevelMrApprovals(string name, Input<string> id, GroupLevelMrApprovalsState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/groupLevelMrApprovals:GroupLevelMrApprovals", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupLevelMrApprovals resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupLevelMrApprovals Get(string name, Input<string> id, GroupLevelMrApprovalsState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupLevelMrApprovals(name, id, state, options);
        }
    }

    public sealed class GroupLevelMrApprovalsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or prevent authors from self approving merge requests; `True` means authors can self approve.
        /// </summary>
        [Input("allowAuthorApproval")]
        public Input<bool>? AllowAuthorApproval { get; set; }

        /// <summary>
        /// Allow or prevent committers from self approving merge requests.
        /// </summary>
        [Input("allowCommitterApproval")]
        public Input<bool>? AllowCommitterApproval { get; set; }

        /// <summary>
        /// Allow or prevent overriding approvers per merge request.
        /// </summary>
        [Input("allowOverridesToApproverListPerMergeRequest")]
        public Input<bool>? AllowOverridesToApproverListPerMergeRequest { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the group.
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        [Input("keepSettingsOnDestroy")]
        public Input<bool>? KeepSettingsOnDestroy { get; set; }

        /// <summary>
        /// Require approver to authenticate before adding the approval.
        /// </summary>
        [Input("requireReauthenticationToApprove")]
        public Input<bool>? RequireReauthenticationToApprove { get; set; }

        /// <summary>
        /// Retain approval count on a new push.
        /// </summary>
        [Input("retainApprovalsOnPush")]
        public Input<bool>? RetainApprovalsOnPush { get; set; }

        public GroupLevelMrApprovalsArgs()
        {
        }
        public static new GroupLevelMrApprovalsArgs Empty => new GroupLevelMrApprovalsArgs();
    }

    public sealed class GroupLevelMrApprovalsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or prevent authors from self approving merge requests; `True` means authors can self approve.
        /// </summary>
        [Input("allowAuthorApproval")]
        public Input<bool>? AllowAuthorApproval { get; set; }

        /// <summary>
        /// Allow or prevent committers from self approving merge requests.
        /// </summary>
        [Input("allowCommitterApproval")]
        public Input<bool>? AllowCommitterApproval { get; set; }

        /// <summary>
        /// Allow or prevent overriding approvers per merge request.
        /// </summary>
        [Input("allowOverridesToApproverListPerMergeRequest")]
        public Input<bool>? AllowOverridesToApproverListPerMergeRequest { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the group.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("keepSettingsOnDestroy")]
        public Input<bool>? KeepSettingsOnDestroy { get; set; }

        /// <summary>
        /// Require approver to authenticate before adding the approval.
        /// </summary>
        [Input("requireReauthenticationToApprove")]
        public Input<bool>? RequireReauthenticationToApprove { get; set; }

        /// <summary>
        /// Retain approval count on a new push.
        /// </summary>
        [Input("retainApprovalsOnPush")]
        public Input<bool>? RetainApprovalsOnPush { get; set; }

        public GroupLevelMrApprovalsState()
        {
        }
        public static new GroupLevelMrApprovalsState Empty => new GroupLevelMrApprovalsState();
    }
}
