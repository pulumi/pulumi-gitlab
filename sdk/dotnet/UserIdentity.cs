// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.UserIdentity` resource is for managing the lifecycle of a user's external identity.
    /// 
    /// &gt; the provider needs to be configured with admin-level access for this resource to work.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new GitLab.User("example", new()
    ///     {
    ///         Name = "Example Foo",
    ///         Username = "example",
    ///         Email = "gitlab@user.create",
    ///         IsAdmin = true,
    ///         ProjectsLimit = 4,
    ///         CanCreateGroup = false,
    ///         IsExternal = true,
    ///     });
    /// 
    ///     var exampleUserIdentity = new GitLab.UserIdentity("example", new()
    ///     {
    ///         UserId = example.Id,
    ///         ExternalProvider = "google",
    ///         ExternalUid = "1234567890",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_user_identity`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_user_identity.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/userIdentity:UserIdentity You can import a user identity to terraform state using `&lt;resource&gt; &lt;id&gt;`.
    /// ```
    /// 
    /// The `id` must be a string for the id of the user and identity provider you want to import,
    /// 
    /// for example:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/userIdentity:UserIdentity example "42:google"
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/userIdentity:UserIdentity")]
    public partial class UserIdentity : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The external provider name.
        /// </summary>
        [Output("externalProvider")]
        public Output<string> ExternalProvider { get; private set; } = null!;

        /// <summary>
        /// A specific external authentication provider UID.
        /// </summary>
        [Output("externalUid")]
        public Output<string> ExternalUid { get; private set; } = null!;

        /// <summary>
        /// The GitLab ID of the user.
        /// </summary>
        [Output("userId")]
        public Output<int> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a UserIdentity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserIdentity(string name, UserIdentityArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/userIdentity:UserIdentity", name, args ?? new UserIdentityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserIdentity(string name, Input<string> id, UserIdentityState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/userIdentity:UserIdentity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserIdentity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserIdentity Get(string name, Input<string> id, UserIdentityState? state = null, CustomResourceOptions? options = null)
        {
            return new UserIdentity(name, id, state, options);
        }
    }

    public sealed class UserIdentityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The external provider name.
        /// </summary>
        [Input("externalProvider", required: true)]
        public Input<string> ExternalProvider { get; set; } = null!;

        /// <summary>
        /// A specific external authentication provider UID.
        /// </summary>
        [Input("externalUid", required: true)]
        public Input<string> ExternalUid { get; set; } = null!;

        /// <summary>
        /// The GitLab ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<int> UserId { get; set; } = null!;

        public UserIdentityArgs()
        {
        }
        public static new UserIdentityArgs Empty => new UserIdentityArgs();
    }

    public sealed class UserIdentityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The external provider name.
        /// </summary>
        [Input("externalProvider")]
        public Input<string>? ExternalProvider { get; set; }

        /// <summary>
        /// A specific external authentication provider UID.
        /// </summary>
        [Input("externalUid")]
        public Input<string>? ExternalUid { get; set; }

        /// <summary>
        /// The GitLab ID of the user.
        /// </summary>
        [Input("userId")]
        public Input<int>? UserId { get; set; }

        public UserIdentityState()
        {
        }
        public static new UserIdentityState Empty => new UserIdentityState();
    }
}
