// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectMergeRequests
    {
        /// <summary>
        /// The `gitlab.getProjectMergeRequests` data source retrieves
        /// information about a list of merge requests related to a specific project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleOne = GitLab.GetProjectMergeRequests.Invoke(new()
        ///     {
        ///         Project = "123",
        ///         TargetBranch = "main",
        ///         Wip = "yes",
        ///     });
        /// 
        ///     var exampleTwo = GitLab.GetProjectMergeRequests.Invoke(new()
        ///     {
        ///         Project = "company/group/project1",
        ///         AuthorId = 5,
        ///         CreatedAfter = "2024-07-25T12:00:00Z",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectMergeRequestsResult> InvokeAsync(GetProjectMergeRequestsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectMergeRequestsResult>("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", args ?? new GetProjectMergeRequestsArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectMergeRequests` data source retrieves
        /// information about a list of merge requests related to a specific project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleOne = GitLab.GetProjectMergeRequests.Invoke(new()
        ///     {
        ///         Project = "123",
        ///         TargetBranch = "main",
        ///         Wip = "yes",
        ///     });
        /// 
        ///     var exampleTwo = GitLab.GetProjectMergeRequests.Invoke(new()
        ///     {
        ///         Project = "company/group/project1",
        ///         AuthorId = 5,
        ///         CreatedAfter = "2024-07-25T12:00:00Z",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectMergeRequestsResult> Invoke(GetProjectMergeRequestsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectMergeRequestsResult>("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", args ?? new GetProjectMergeRequestsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectMergeRequests` data source retrieves
        /// information about a list of merge requests related to a specific project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#list-project-merge-requests)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleOne = GitLab.GetProjectMergeRequests.Invoke(new()
        ///     {
        ///         Project = "123",
        ///         TargetBranch = "main",
        ///         Wip = "yes",
        ///     });
        /// 
        ///     var exampleTwo = GitLab.GetProjectMergeRequests.Invoke(new()
        ///     {
        ///         Project = "company/group/project1",
        ///         AuthorId = 5,
        ///         CreatedAfter = "2024-07-25T12:00:00Z",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectMergeRequestsResult> Invoke(GetProjectMergeRequestsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectMergeRequestsResult>("gitlab:index/getProjectMergeRequests:getProjectMergeRequests", args ?? new GetProjectMergeRequestsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectMergeRequestsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Return merge requests created by the given user ID.
        /// </summary>
        [Input("authorId")]
        public int? AuthorId { get; set; }

        /// <summary>
        /// Return merge requests created by the given username.
        /// </summary>
        [Input("authorUsername")]
        public string? AuthorUsername { get; set; }

        /// <summary>
        /// Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("createdAfter")]
        public string? CreatedAfter { get; set; }

        /// <summary>
        /// Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("createdBefore")]
        public string? CreatedBefore { get; set; }

        [Input("iids")]
        private List<int>? _iids;

        /// <summary>
        /// The unique internal IDs of the merge requests.
        /// </summary>
        public List<int> Iids
        {
            get => _iids ?? (_iids = new List<int>());
            set => _iids = value;
        }

        /// <summary>
        /// Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
        /// </summary>
        [Input("milestone")]
        public string? Milestone { get; set; }

        /// <summary>
        /// Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
        /// </summary>
        [Input("myReactionEmoji")]
        public string? MyReactionEmoji { get; set; }

        /// <summary>
        /// Return requests ordered by `CreatedAt`, `Title` or `UpdatedAt`. Default is `CreatedAt`.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// The ID or path of the project.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
        /// </summary>
        [Input("reviewerUsername")]
        public string? ReviewerUsername { get; set; }

        /// <summary>
        /// Return merge requests for the given scope: `CreatedByMe`, `AssignedToMe`, or `All`.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// Search merge requests against their `Title` or `Description`.
        /// </summary>
        [Input("search")]
        public string? Search { get; set; }

        /// <summary>
        /// Return requests sorted in `Asc` or `Desc` order. Default is `Desc`.
        /// </summary>
        [Input("sort")]
        public string? Sort { get; set; }

        /// <summary>
        /// Return merge requests with the given source branch.
        /// </summary>
        [Input("sourceBranch")]
        public string? SourceBranch { get; set; }

        /// <summary>
        /// Return all merge requests (all) or just those that are opened, closed, locked, or merged.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Return merge requests with the given target branch.
        /// </summary>
        [Input("targetBranch")]
        public string? TargetBranch { get; set; }

        /// <summary>
        /// Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("updatedAfter")]
        public string? UpdatedAfter { get; set; }

        /// <summary>
        /// Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("updatedBefore")]
        public string? UpdatedBefore { get; set; }

        /// <summary>
        /// Filter merge requests against their wip status. `Yes` to return only draft merge requests, `No` to return non-draft merge requests.
        /// </summary>
        [Input("wip")]
        public string? Wip { get; set; }

        public GetProjectMergeRequestsArgs()
        {
        }
        public static new GetProjectMergeRequestsArgs Empty => new GetProjectMergeRequestsArgs();
    }

    public sealed class GetProjectMergeRequestsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Return merge requests created by the given user ID.
        /// </summary>
        [Input("authorId")]
        public Input<int>? AuthorId { get; set; }

        /// <summary>
        /// Return merge requests created by the given username.
        /// </summary>
        [Input("authorUsername")]
        public Input<string>? AuthorUsername { get; set; }

        /// <summary>
        /// Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("createdAfter")]
        public Input<string>? CreatedAfter { get; set; }

        /// <summary>
        /// Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("createdBefore")]
        public Input<string>? CreatedBefore { get; set; }

        [Input("iids")]
        private InputList<int>? _iids;

        /// <summary>
        /// The unique internal IDs of the merge requests.
        /// </summary>
        public InputList<int> Iids
        {
            get => _iids ?? (_iids = new InputList<int>());
            set => _iids = value;
        }

        /// <summary>
        /// Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
        /// </summary>
        [Input("milestone")]
        public Input<string>? Milestone { get; set; }

        /// <summary>
        /// Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
        /// </summary>
        [Input("myReactionEmoji")]
        public Input<string>? MyReactionEmoji { get; set; }

        /// <summary>
        /// Return requests ordered by `CreatedAt`, `Title` or `UpdatedAt`. Default is `CreatedAt`.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// The ID or path of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
        /// </summary>
        [Input("reviewerUsername")]
        public Input<string>? ReviewerUsername { get; set; }

        /// <summary>
        /// Return merge requests for the given scope: `CreatedByMe`, `AssignedToMe`, or `All`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Search merge requests against their `Title` or `Description`.
        /// </summary>
        [Input("search")]
        public Input<string>? Search { get; set; }

        /// <summary>
        /// Return requests sorted in `Asc` or `Desc` order. Default is `Desc`.
        /// </summary>
        [Input("sort")]
        public Input<string>? Sort { get; set; }

        /// <summary>
        /// Return merge requests with the given source branch.
        /// </summary>
        [Input("sourceBranch")]
        public Input<string>? SourceBranch { get; set; }

        /// <summary>
        /// Return all merge requests (all) or just those that are opened, closed, locked, or merged.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Return merge requests with the given target branch.
        /// </summary>
        [Input("targetBranch")]
        public Input<string>? TargetBranch { get; set; }

        /// <summary>
        /// Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("updatedAfter")]
        public Input<string>? UpdatedAfter { get; set; }

        /// <summary>
        /// Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        [Input("updatedBefore")]
        public Input<string>? UpdatedBefore { get; set; }

        /// <summary>
        /// Filter merge requests against their wip status. `Yes` to return only draft merge requests, `No` to return non-draft merge requests.
        /// </summary>
        [Input("wip")]
        public Input<string>? Wip { get; set; }

        public GetProjectMergeRequestsInvokeArgs()
        {
        }
        public static new GetProjectMergeRequestsInvokeArgs Empty => new GetProjectMergeRequestsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectMergeRequestsResult
    {
        /// <summary>
        /// Return merge requests created by the given user ID.
        /// </summary>
        public readonly int? AuthorId;
        /// <summary>
        /// Return merge requests created by the given username.
        /// </summary>
        public readonly string? AuthorUsername;
        /// <summary>
        /// Return merge requests created after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        public readonly string? CreatedAfter;
        /// <summary>
        /// Return merge requests created before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        public readonly string? CreatedBefore;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The unique internal IDs of the merge requests.
        /// </summary>
        public readonly ImmutableArray<int> Iids;
        /// <summary>
        /// The list of merge requests.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectMergeRequestsMergeRequestResult> MergeRequests;
        /// <summary>
        /// Return only merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
        /// </summary>
        public readonly string? Milestone;
        /// <summary>
        /// Return merge requests reacted to by the authenticated user with the given emoji. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
        /// </summary>
        public readonly string? MyReactionEmoji;
        /// <summary>
        /// Return requests ordered by `CreatedAt`, `Title` or `UpdatedAt`. Default is `CreatedAt`.
        /// </summary>
        public readonly string? OrderBy;
        /// <summary>
        /// The ID or path of the project.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Return merge requests reviewed by the given username. `None` returns merge requests with no reviews. `Any` returns merge requests with any reviewer.
        /// </summary>
        public readonly string? ReviewerUsername;
        /// <summary>
        /// Return merge requests for the given scope: `CreatedByMe`, `AssignedToMe`, or `All`.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// Search merge requests against their `Title` or `Description`.
        /// </summary>
        public readonly string? Search;
        /// <summary>
        /// Return requests sorted in `Asc` or `Desc` order. Default is `Desc`.
        /// </summary>
        public readonly string? Sort;
        /// <summary>
        /// Return merge requests with the given source branch.
        /// </summary>
        public readonly string? SourceBranch;
        /// <summary>
        /// Return all merge requests (all) or just those that are opened, closed, locked, or merged.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Return merge requests with the given target branch.
        /// </summary>
        public readonly string? TargetBranch;
        /// <summary>
        /// Return merge requests updated after the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        public readonly string? UpdatedAfter;
        /// <summary>
        /// Return merge requests updated before the given time. Expected in RFC3339 format (2006-01-02T15:04:05Z).
        /// </summary>
        public readonly string? UpdatedBefore;
        /// <summary>
        /// Filter merge requests against their wip status. `Yes` to return only draft merge requests, `No` to return non-draft merge requests.
        /// </summary>
        public readonly string? Wip;

        [OutputConstructor]
        private GetProjectMergeRequestsResult(
            int? authorId,

            string? authorUsername,

            string? createdAfter,

            string? createdBefore,

            string id,

            ImmutableArray<int> iids,

            ImmutableArray<Outputs.GetProjectMergeRequestsMergeRequestResult> mergeRequests,

            string? milestone,

            string? myReactionEmoji,

            string? orderBy,

            string project,

            string? reviewerUsername,

            string? scope,

            string? search,

            string? sort,

            string? sourceBranch,

            string? state,

            string? targetBranch,

            string? updatedAfter,

            string? updatedBefore,

            string? wip)
        {
            AuthorId = authorId;
            AuthorUsername = authorUsername;
            CreatedAfter = createdAfter;
            CreatedBefore = createdBefore;
            Id = id;
            Iids = iids;
            MergeRequests = mergeRequests;
            Milestone = milestone;
            MyReactionEmoji = myReactionEmoji;
            OrderBy = orderBy;
            Project = project;
            ReviewerUsername = reviewerUsername;
            Scope = scope;
            Search = search;
            Sort = sort;
            SourceBranch = sourceBranch;
            State = state;
            TargetBranch = targetBranch;
            UpdatedAfter = updatedAfter;
            UpdatedBefore = updatedBefore;
            Wip = wip;
        }
    }
}
