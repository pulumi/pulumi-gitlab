// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.InstanceServiceAccount` resource allows creating a GitLab instance service account.
    /// 
    /// &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_instance_service_account`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_instance_service_account.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/instanceServiceAccount:InstanceServiceAccount You can import a group service account using `&lt;resource&gt; &lt;id&gt;`. The
    /// ```
    /// 
    /// `id` is the id of the service account
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/instanceServiceAccount:InstanceServiceAccount example example
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/instanceServiceAccount:InstanceServiceAccount")]
    public partial class InstanceServiceAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the user. If not specified, the default Service account user name is used.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The service account id.
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string> ServiceAccountId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.InstanceServiceAccountTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The username of the user. If not specified, it’s automatically generated.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceServiceAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceServiceAccount(string name, InstanceServiceAccountArgs? args = null, CustomResourceOptions? options = null)
            : base("gitlab:index/instanceServiceAccount:InstanceServiceAccount", name, args ?? new InstanceServiceAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceServiceAccount(string name, Input<string> id, InstanceServiceAccountState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/instanceServiceAccount:InstanceServiceAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceServiceAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceServiceAccount Get(string name, Input<string> id, InstanceServiceAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceServiceAccount(name, id, state, options);
        }
    }

    public sealed class InstanceServiceAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the user. If not specified, the default Service account user name is used.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("timeouts")]
        public Input<Inputs.InstanceServiceAccountTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The username of the user. If not specified, it’s automatically generated.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public InstanceServiceAccountArgs()
        {
        }
        public static new InstanceServiceAccountArgs Empty => new InstanceServiceAccountArgs();
    }

    public sealed class InstanceServiceAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the user. If not specified, the default Service account user name is used.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The service account id.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.InstanceServiceAccountTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The username of the user. If not specified, it’s automatically generated.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public InstanceServiceAccountState()
        {
        }
        public static new InstanceServiceAccountState Empty => new InstanceServiceAccountState();
    }
}
