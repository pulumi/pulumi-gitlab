// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetRepositoryFile
    {
        /// <summary>
        /// The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetRepositoryFile.InvokeAsync(new GitLab.GetRepositoryFileArgs
        ///         {
        ///             FilePath = "README.md",
        ///             Project = "example",
        ///             Ref = "main",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoryFileResult> InvokeAsync(GetRepositoryFileArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryFileResult>("gitlab:index/getRepositoryFile:getRepositoryFile", args ?? new GetRepositoryFileArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetRepositoryFile.InvokeAsync(new GitLab.GetRepositoryFileArgs
        ///         {
        ///             FilePath = "README.md",
        ///             Project = "example",
        ///             Ref = "main",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoryFileResult> Invoke(GetRepositoryFileInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRepositoryFileResult>("gitlab:index/getRepositoryFile:getRepositoryFile", args ?? new GetRepositoryFileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryFileArgs : Pulumi.InvokeArgs
    {
        [Input("filePath", required: true)]
        public string FilePath { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("ref", required: true)]
        public string Ref { get; set; } = null!;

        public GetRepositoryFileArgs()
        {
        }
    }

    public sealed class GetRepositoryFileInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("filePath", required: true)]
        public Input<string> FilePath { get; set; } = null!;

        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("ref", required: true)]
        public Input<string> Ref { get; set; } = null!;

        public GetRepositoryFileInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRepositoryFileResult
    {
        public readonly string BlobId;
        public readonly string CommitId;
        public readonly string Content;
        public readonly string ContentSha256;
        public readonly string Encoding;
        public readonly string FileName;
        public readonly string FilePath;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LastCommitId;
        public readonly string Project;
        public readonly string Ref;
        public readonly int Size;

        [OutputConstructor]
        private GetRepositoryFileResult(
            string blobId,

            string commitId,

            string content,

            string contentSha256,

            string encoding,

            string fileName,

            string filePath,

            string id,

            string lastCommitId,

            string project,

            string @ref,

            int size)
        {
            BlobId = blobId;
            CommitId = commitId;
            Content = content;
            ContentSha256 = contentSha256;
            Encoding = encoding;
            FileName = fileName;
            FilePath = filePath;
            Id = id;
            LastCommitId = lastCommitId;
            Project = project;
            Ref = @ref;
            Size = size;
        }
    }
}
