// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjects
    {
        /// <summary>
        /// ## # gitlab\_projects
        /// 
        /// Provide details about a list of projects in the Gitlab provider. Listing all projects and group projects with [project filtering](https://docs.gitlab.com/ee/api/projects.html#list-user-projects) or [group project filtering](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects) is supported.
        /// 
        /// &gt; **NOTE**: This data source supports all available filters exposed by the `xanzy/go-gitlab` package, which might not expose all available filters exposed by the Gitlab APIs.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### List projects within a group tree
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mygroup = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs
        ///         {
        ///             FullPath = "mygroup",
        ///         }));
        ///         var groupProjects = mygroup.Apply(mygroup =&gt; Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs
        ///         {
        ///             GroupId = mygroup.Id,
        ///             OrderBy = "name",
        ///             IncludeSubgroups = true,
        ///             WithShared = false,
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### List projects using the search syntax
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var projects = Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs
        ///         {
        ///             Search = "postgresql",
        ///             Visibility = "private",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectsResult> InvokeAsync(GetProjectsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectsResult>("gitlab:index/getProjects:getProjects", args ?? new GetProjectsArgs(), options.WithDefaults());

        /// <summary>
        /// ## # gitlab\_projects
        /// 
        /// Provide details about a list of projects in the Gitlab provider. Listing all projects and group projects with [project filtering](https://docs.gitlab.com/ee/api/projects.html#list-user-projects) or [group project filtering](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects) is supported.
        /// 
        /// &gt; **NOTE**: This data source supports all available filters exposed by the `xanzy/go-gitlab` package, which might not expose all available filters exposed by the Gitlab APIs.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### List projects within a group tree
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mygroup = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs
        ///         {
        ///             FullPath = "mygroup",
        ///         }));
        ///         var groupProjects = mygroup.Apply(mygroup =&gt; Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs
        ///         {
        ///             GroupId = mygroup.Id,
        ///             OrderBy = "name",
        ///             IncludeSubgroups = true,
        ///             WithShared = false,
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### List projects using the search syntax
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var projects = Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs
        ///         {
        ///             Search = "postgresql",
        ///             Visibility = "private",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProjectsResult> Invoke(GetProjectsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetProjectsResult>("gitlab:index/getProjects:getProjects", args ?? new GetProjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Limit by archived status.
        /// </summary>
        [Input("archived")]
        public bool? Archived { get; set; }

        /// <summary>
        /// The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.
        /// </summary>
        [Input("groupId")]
        public int? GroupId { get; set; }

        /// <summary>
        /// Include projects in subgroups of this group. Default is `false`. Needs `group_id`.
        /// </summary>
        [Input("includeSubgroups")]
        public bool? IncludeSubgroups { get; set; }

        /// <summary>
        /// Prevents overloading your Gitlab instance in case of a misconfiguration. Default is `10`.
        /// </summary>
        [Input("maxQueryablePages")]
        public int? MaxQueryablePages { get; set; }

        /// <summary>
        /// Limit by projects that the current user is a member of.
        /// </summary>
        [Input("membership")]
        public bool? Membership { get; set; }

        /// <summary>
        /// Limit to projects where current user has at least this access level, refer to the [official documentation](https://docs.gitlab.com/ee/api/members.html) for values. Cannot be used with `group_id`.
        /// </summary>
        [Input("minAccessLevel")]
        public int? MinAccessLevel { get; set; }

        /// <summary>
        /// Return projects ordered by `id`, `name`, `path`, `created_at`, `updated_at`, or `last_activity_at` fields. Default is `created_at`.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// Limit by projects owned by the current user.
        /// </summary>
        [Input("owned")]
        public bool? Owned { get; set; }

        [Input("page")]
        public int? Page { get; set; }

        [Input("perPage")]
        public int? PerPage { get; set; }

        /// <summary>
        /// Return list of authorized projects matching the search criteria.
        /// </summary>
        [Input("search")]
        public string? Search { get; set; }

        /// <summary>
        /// Return only the ID, URL, name, and path of each project.
        /// </summary>
        [Input("simple")]
        public bool? Simple { get; set; }

        /// <summary>
        /// Return projects sorted in `asc` or `desc` order. Default is `desc`.
        /// </summary>
        [Input("sort")]
        public string? Sort { get; set; }

        /// <summary>
        /// Limit by projects starred by the current user.
        /// </summary>
        [Input("starred")]
        public bool? Starred { get; set; }

        /// <summary>
        /// Include project statistics. Cannot be used with `group_id`.
        /// </summary>
        [Input("statistics")]
        public bool? Statistics { get; set; }

        /// <summary>
        /// Limit by visibility `public`, `internal`, or `private`.
        /// </summary>
        [Input("visibility")]
        public string? Visibility { get; set; }

        /// <summary>
        /// Include custom attributes in response _(admins only)_.
        /// </summary>
        [Input("withCustomAttributes")]
        public bool? WithCustomAttributes { get; set; }

        /// <summary>
        /// Limit by projects with issues feature enabled. Default is `false`.
        /// </summary>
        [Input("withIssuesEnabled")]
        public bool? WithIssuesEnabled { get; set; }

        /// <summary>
        /// Limit by projects with merge requests feature enabled. Default is `false`.
        /// </summary>
        [Input("withMergeRequestsEnabled")]
        public bool? WithMergeRequestsEnabled { get; set; }

        /// <summary>
        /// Limit by projects which use the given programming language. Cannot be used with `group_id`.
        /// </summary>
        [Input("withProgrammingLanguage")]
        public string? WithProgrammingLanguage { get; set; }

        /// <summary>
        /// Include projects shared to this group. Default is `true`. Needs `group_id`.
        /// </summary>
        [Input("withShared")]
        public bool? WithShared { get; set; }

        public GetProjectsArgs()
        {
        }
    }

    public sealed class GetProjectsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Limit by archived status.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.
        /// </summary>
        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        /// <summary>
        /// Include projects in subgroups of this group. Default is `false`. Needs `group_id`.
        /// </summary>
        [Input("includeSubgroups")]
        public Input<bool>? IncludeSubgroups { get; set; }

        /// <summary>
        /// Prevents overloading your Gitlab instance in case of a misconfiguration. Default is `10`.
        /// </summary>
        [Input("maxQueryablePages")]
        public Input<int>? MaxQueryablePages { get; set; }

        /// <summary>
        /// Limit by projects that the current user is a member of.
        /// </summary>
        [Input("membership")]
        public Input<bool>? Membership { get; set; }

        /// <summary>
        /// Limit to projects where current user has at least this access level, refer to the [official documentation](https://docs.gitlab.com/ee/api/members.html) for values. Cannot be used with `group_id`.
        /// </summary>
        [Input("minAccessLevel")]
        public Input<int>? MinAccessLevel { get; set; }

        /// <summary>
        /// Return projects ordered by `id`, `name`, `path`, `created_at`, `updated_at`, or `last_activity_at` fields. Default is `created_at`.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// Limit by projects owned by the current user.
        /// </summary>
        [Input("owned")]
        public Input<bool>? Owned { get; set; }

        [Input("page")]
        public Input<int>? Page { get; set; }

        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        /// <summary>
        /// Return list of authorized projects matching the search criteria.
        /// </summary>
        [Input("search")]
        public Input<string>? Search { get; set; }

        /// <summary>
        /// Return only the ID, URL, name, and path of each project.
        /// </summary>
        [Input("simple")]
        public Input<bool>? Simple { get; set; }

        /// <summary>
        /// Return projects sorted in `asc` or `desc` order. Default is `desc`.
        /// </summary>
        [Input("sort")]
        public Input<string>? Sort { get; set; }

        /// <summary>
        /// Limit by projects starred by the current user.
        /// </summary>
        [Input("starred")]
        public Input<bool>? Starred { get; set; }

        /// <summary>
        /// Include project statistics. Cannot be used with `group_id`.
        /// </summary>
        [Input("statistics")]
        public Input<bool>? Statistics { get; set; }

        /// <summary>
        /// Limit by visibility `public`, `internal`, or `private`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        /// <summary>
        /// Include custom attributes in response _(admins only)_.
        /// </summary>
        [Input("withCustomAttributes")]
        public Input<bool>? WithCustomAttributes { get; set; }

        /// <summary>
        /// Limit by projects with issues feature enabled. Default is `false`.
        /// </summary>
        [Input("withIssuesEnabled")]
        public Input<bool>? WithIssuesEnabled { get; set; }

        /// <summary>
        /// Limit by projects with merge requests feature enabled. Default is `false`.
        /// </summary>
        [Input("withMergeRequestsEnabled")]
        public Input<bool>? WithMergeRequestsEnabled { get; set; }

        /// <summary>
        /// Limit by projects which use the given programming language. Cannot be used with `group_id`.
        /// </summary>
        [Input("withProgrammingLanguage")]
        public Input<string>? WithProgrammingLanguage { get; set; }

        /// <summary>
        /// Include projects shared to this group. Default is `true`. Needs `group_id`.
        /// </summary>
        [Input("withShared")]
        public Input<bool>? WithShared { get; set; }

        public GetProjectsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectsResult
    {
        public readonly bool? Archived;
        public readonly int? GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeSubgroups;
        public readonly int? MaxQueryablePages;
        public readonly bool? Membership;
        public readonly int? MinAccessLevel;
        public readonly string? OrderBy;
        public readonly bool? Owned;
        public readonly int? Page;
        public readonly int? PerPage;
        /// <summary>
        /// A list containing the projects matching the supplied arguments
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectResult> Projects;
        public readonly string? Search;
        public readonly bool? Simple;
        public readonly string? Sort;
        public readonly bool? Starred;
        public readonly bool? Statistics;
        /// <summary>
        /// The visibility of the project.
        /// </summary>
        public readonly string? Visibility;
        public readonly bool? WithCustomAttributes;
        public readonly bool? WithIssuesEnabled;
        public readonly bool? WithMergeRequestsEnabled;
        public readonly string? WithProgrammingLanguage;
        public readonly bool? WithShared;

        [OutputConstructor]
        private GetProjectsResult(
            bool? archived,

            int? groupId,

            string id,

            bool? includeSubgroups,

            int? maxQueryablePages,

            bool? membership,

            int? minAccessLevel,

            string? orderBy,

            bool? owned,

            int? page,

            int? perPage,

            ImmutableArray<Outputs.GetProjectsProjectResult> projects,

            string? search,

            bool? simple,

            string? sort,

            bool? starred,

            bool? statistics,

            string? visibility,

            bool? withCustomAttributes,

            bool? withIssuesEnabled,

            bool? withMergeRequestsEnabled,

            string? withProgrammingLanguage,

            bool? withShared)
        {
            Archived = archived;
            GroupId = groupId;
            Id = id;
            IncludeSubgroups = includeSubgroups;
            MaxQueryablePages = maxQueryablePages;
            Membership = membership;
            MinAccessLevel = minAccessLevel;
            OrderBy = orderBy;
            Owned = owned;
            Page = page;
            PerPage = perPage;
            Projects = projects;
            Search = search;
            Simple = simple;
            Sort = sort;
            Starred = starred;
            Statistics = statistics;
            Visibility = visibility;
            WithCustomAttributes = withCustomAttributes;
            WithIssuesEnabled = withIssuesEnabled;
            WithMergeRequestsEnabled = withMergeRequestsEnabled;
            WithProgrammingLanguage = withProgrammingLanguage;
            WithShared = withShared;
        }
    }
}
