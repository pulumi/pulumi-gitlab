// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectMergeRequest
    {
        /// <summary>
        /// The `gitlab.getProjectMergeRequest` data source retrieves
        /// information about a single merge request related to a specific project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byProjectId = GitLab.GetProjectMergeRequest.Invoke(new()
        ///     {
        ///         Project = "123",
        ///         Iid = 456,
        ///     });
        /// 
        ///     var byProjectName = GitLab.GetProjectMergeRequest.Invoke(new()
        ///     {
        ///         Project = "company/group/project1",
        ///         Iid = 3,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectMergeRequestResult> InvokeAsync(GetProjectMergeRequestArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectMergeRequestResult>("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", args ?? new GetProjectMergeRequestArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectMergeRequest` data source retrieves
        /// information about a single merge request related to a specific project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byProjectId = GitLab.GetProjectMergeRequest.Invoke(new()
        ///     {
        ///         Project = "123",
        ///         Iid = 456,
        ///     });
        /// 
        ///     var byProjectName = GitLab.GetProjectMergeRequest.Invoke(new()
        ///     {
        ///         Project = "company/group/project1",
        ///         Iid = 3,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectMergeRequestResult> Invoke(GetProjectMergeRequestInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectMergeRequestResult>("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", args ?? new GetProjectMergeRequestInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectMergeRequest` data source retrieves
        /// information about a single merge request related to a specific project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_requests/#get-single-mr)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byProjectId = GitLab.GetProjectMergeRequest.Invoke(new()
        ///     {
        ///         Project = "123",
        ///         Iid = 456,
        ///     });
        /// 
        ///     var byProjectName = GitLab.GetProjectMergeRequest.Invoke(new()
        ///     {
        ///         Project = "company/group/project1",
        ///         Iid = 3,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectMergeRequestResult> Invoke(GetProjectMergeRequestInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectMergeRequestResult>("gitlab:index/getProjectMergeRequest:getProjectMergeRequest", args ?? new GetProjectMergeRequestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectMergeRequestArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique project level ID of the merge request.
        /// </summary>
        [Input("iid", required: true)]
        public int Iid { get; set; }

        /// <summary>
        /// The ID or path of the project.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetProjectMergeRequestArgs()
        {
        }
        public static new GetProjectMergeRequestArgs Empty => new GetProjectMergeRequestArgs();
    }

    public sealed class GetProjectMergeRequestInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique project level ID of the merge request.
        /// </summary>
        [Input("iid", required: true)]
        public Input<int> Iid { get; set; } = null!;

        /// <summary>
        /// The ID or path of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetProjectMergeRequestInvokeArgs()
        {
        }
        public static new GetProjectMergeRequestInvokeArgs Empty => new GetProjectMergeRequestInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectMergeRequestResult
    {
        /// <summary>
        /// First assignee of the merge request.
        /// </summary>
        public readonly Outputs.GetProjectMergeRequestAssigneeResult Assignee;
        /// <summary>
        /// Assignees of the merge request.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectMergeRequestAssigneeResult> Assignees;
        /// <summary>
        /// User who created this merge request.
        /// </summary>
        public readonly Outputs.GetProjectMergeRequestAuthorResult Author;
        /// <summary>
        /// Indicates if all discussions are resolved only if all are
        /// required before merge request can be merged.
        /// </summary>
        public readonly bool BlockingDiscussionsResolved;
        /// <summary>
        /// Number of changes made on the merge request. Empty when the
        /// merge request is created, and populates asynchronously.
        /// </summary>
        public readonly string ChangesCount;
        /// <summary>
        /// Timestamp of when the merge request was closed.
        /// </summary>
        public readonly string ClosedAt;
        /// <summary>
        /// User who closed this merge request.
        /// </summary>
        public readonly Outputs.GetProjectMergeRequestClosedByResult ClosedBy;
        /// <summary>
        /// Timestamp of when the merge request was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The unique instance level ID of the merge request.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The unique project level ID of the merge request.
        /// </summary>
        public readonly int Iid;
        /// <summary>
        /// The ID or path of the project.
        /// </summary>
        public readonly string Project;

        [OutputConstructor]
        private GetProjectMergeRequestResult(
            Outputs.GetProjectMergeRequestAssigneeResult assignee,

            ImmutableArray<Outputs.GetProjectMergeRequestAssigneeResult> assignees,

            Outputs.GetProjectMergeRequestAuthorResult author,

            bool blockingDiscussionsResolved,

            string changesCount,

            string closedAt,

            Outputs.GetProjectMergeRequestClosedByResult closedBy,

            string createdAt,

            int id,

            int iid,

            string project)
        {
            Assignee = assignee;
            Assignees = assignees;
            Author = author;
            BlockingDiscussionsResolved = blockingDiscussionsResolved;
            ChangesCount = changesCount;
            ClosedAt = closedAt;
            ClosedBy = closedBy;
            CreatedAt = createdAt;
            Id = id;
            Iid = iid;
            Project = project;
        }
    }
}
