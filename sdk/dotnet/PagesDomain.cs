// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.PagesDomain` resource allows connecting custom domains and TLS certificates in GitLab Pages.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pages_domains.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example using auto_ssl_enabled, which uses lets encrypt to generate a certificate
    ///     var thisPagesDomain = new GitLab.PagesDomain("thisPagesDomain", new()
    ///     {
    ///         Project = "123",
    ///         Domain = "example.com",
    ///         AutoSslEnabled = true,
    ///     });
    /// 
    ///     // Example using a manually generated certificate and key
    ///     var thisIndex_pagesDomainPagesDomain = new GitLab.PagesDomain("thisIndex/pagesDomainPagesDomain", new()
    ///     {
    ///         Project = "123",
    ///         Domain = "example.com",
    ///         Key = File.ReadAllText($"{path.Module}/key.pem"),
    ///         Certificate = File.ReadAllText($"{path.Module}/cert.pem"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GitLab pages domain can be imported using an id made up of `projectId:domain` _without_ the http protocol, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/pagesDomain:PagesDomain this 123:example.com
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/pagesDomain:PagesDomain")]
    public partial class PagesDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enables [automatic generation](https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration.html) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
        /// </summary>
        [Output("autoSslEnabled")]
        public Output<bool> AutoSslEnabled { get; private set; } = null!;

        /// <summary>
        /// The certificate in PEM format with intermediates following in most specific to least specific order.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// The custom domain indicated by the user.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Whether the certificate is expired.
        /// </summary>
        [Output("expired")]
        public Output<bool> Expired { get; private set; } = null!;

        /// <summary>
        /// The certificate key in PEM format.
        /// </summary>
        [Output("key")]
        public Output<string?> Key { get; private set; } = null!;

        /// <summary>
        /// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding) owned by the authenticated user.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The URL for the given domain.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// The verification code for the domain.
        /// </summary>
        [Output("verificationCode")]
        public Output<string> VerificationCode { get; private set; } = null!;

        /// <summary>
        /// The certificate data.
        /// </summary>
        [Output("verified")]
        public Output<bool> Verified { get; private set; } = null!;


        /// <summary>
        /// Create a PagesDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PagesDomain(string name, PagesDomainArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/pagesDomain:PagesDomain", name, args ?? new PagesDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PagesDomain(string name, Input<string> id, PagesDomainState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/pagesDomain:PagesDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "verificationCode",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PagesDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PagesDomain Get(string name, Input<string> id, PagesDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new PagesDomain(name, id, state, options);
        }
    }

    public sealed class PagesDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables [automatic generation](https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration.html) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
        /// </summary>
        [Input("autoSslEnabled")]
        public Input<bool>? AutoSslEnabled { get; set; }

        /// <summary>
        /// The certificate in PEM format with intermediates following in most specific to least specific order.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// The custom domain indicated by the user.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Whether the certificate is expired.
        /// </summary>
        [Input("expired")]
        public Input<bool>? Expired { get; set; }

        /// <summary>
        /// The certificate key in PEM format.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding) owned by the authenticated user.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public PagesDomainArgs()
        {
        }
        public static new PagesDomainArgs Empty => new PagesDomainArgs();
    }

    public sealed class PagesDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables [automatic generation](https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration.html) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
        /// </summary>
        [Input("autoSslEnabled")]
        public Input<bool>? AutoSslEnabled { get; set; }

        /// <summary>
        /// The certificate in PEM format with intermediates following in most specific to least specific order.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// The custom domain indicated by the user.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Whether the certificate is expired.
        /// </summary>
        [Input("expired")]
        public Input<bool>? Expired { get; set; }

        /// <summary>
        /// The certificate key in PEM format.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding) owned by the authenticated user.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The URL for the given domain.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("verificationCode")]
        private Input<string>? _verificationCode;

        /// <summary>
        /// The verification code for the domain.
        /// </summary>
        public Input<string>? VerificationCode
        {
            get => _verificationCode;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _verificationCode = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The certificate data.
        /// </summary>
        [Input("verified")]
        public Input<bool>? Verified { get; set; }

        public PagesDomainState()
        {
        }
        public static new PagesDomainState Empty => new PagesDomainState();
    }
}
