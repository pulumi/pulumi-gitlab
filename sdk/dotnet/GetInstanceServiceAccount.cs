// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetInstanceServiceAccount
    {
        /// <summary>
        /// The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
        /// 
        /// &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetInstanceServiceAccount.Invoke(new()
        ///     {
        ///         ServiceAccountId = "123",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceServiceAccountResult> InvokeAsync(GetInstanceServiceAccountArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceServiceAccountResult>("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", args ?? new GetInstanceServiceAccountArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
        /// 
        /// &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetInstanceServiceAccount.Invoke(new()
        ///     {
        ///         ServiceAccountId = "123",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceServiceAccountResult> Invoke(GetInstanceServiceAccountInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceServiceAccountResult>("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", args ?? new GetInstanceServiceAccountInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.InstanceServiceAccount` data source retrieves information about a gitlab service account.
        /// 
        /// &gt; In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on `gitlab.com`
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/user_service_accounts/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetInstanceServiceAccount.Invoke(new()
        ///     {
        ///         ServiceAccountId = "123",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceServiceAccountResult> Invoke(GetInstanceServiceAccountInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceServiceAccountResult>("gitlab:index/getInstanceServiceAccount:getInstanceServiceAccount", args ?? new GetInstanceServiceAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceServiceAccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The service account id.
        /// </summary>
        [Input("serviceAccountId", required: true)]
        public string ServiceAccountId { get; set; } = null!;

        public GetInstanceServiceAccountArgs()
        {
        }
        public static new GetInstanceServiceAccountArgs Empty => new GetInstanceServiceAccountArgs();
    }

    public sealed class GetInstanceServiceAccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The service account id.
        /// </summary>
        [Input("serviceAccountId", required: true)]
        public Input<string> ServiceAccountId { get; set; } = null!;

        public GetInstanceServiceAccountInvokeArgs()
        {
        }
        public static new GetInstanceServiceAccountInvokeArgs Empty => new GetInstanceServiceAccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceServiceAccountResult
    {
        public readonly string Id;
        /// <summary>
        /// The name of the user.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The service account id.
        /// </summary>
        public readonly string ServiceAccountId;
        /// <summary>
        /// The username of the user.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetInstanceServiceAccountResult(
            string id,

            string name,

            string serviceAccountId,

            string username)
        {
            Id = id;
            Name = name;
            ServiceAccountId = serviceAccountId;
            Username = username;
        }
    }
}
