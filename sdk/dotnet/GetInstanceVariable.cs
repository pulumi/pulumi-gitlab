// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetInstanceVariable
    {
        /// <summary>
        /// The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = GitLab.GetInstanceVariable.Invoke(new()
        ///     {
        ///         Key = "foo",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceVariableResult> InvokeAsync(GetInstanceVariableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceVariableResult>("gitlab:index/getInstanceVariable:getInstanceVariable", args ?? new GetInstanceVariableArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = GitLab.GetInstanceVariable.Invoke(new()
        ///     {
        ///         Key = "foo",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceVariableResult> Invoke(GetInstanceVariableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceVariableResult>("gitlab:index/getInstanceVariable:getInstanceVariable", args ?? new GetInstanceVariableInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.InstanceVariable` data source retrieves details about an instance-level CI/CD variable.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = GitLab.GetInstanceVariable.Invoke(new()
        ///     {
        ///         Key = "foo",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceVariableResult> Invoke(GetInstanceVariableInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceVariableResult>("gitlab:index/getInstanceVariable:getInstanceVariable", args ?? new GetInstanceVariableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceVariableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the variable.
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        public GetInstanceVariableArgs()
        {
        }
        public static new GetInstanceVariableArgs Empty => new GetInstanceVariableArgs();
    }

    public sealed class GetInstanceVariableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the variable.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public GetInstanceVariableInvokeArgs()
        {
        }
        public static new GetInstanceVariableInvokeArgs Empty => new GetInstanceVariableInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceVariableResult
    {
        /// <summary>
        /// The description of the variable. Maximum of 255 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of this datasource. In the format `&lt;key&gt;`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the variable.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// If set to `True`, the value of the variable will be hidden in job logs.
        /// </summary>
        public readonly bool Masked;
        /// <summary>
        /// If set to `True`, the variable will be passed only to pipelines running on protected branches and tags.
        /// </summary>
        public readonly bool Protected;
        /// <summary>
        /// If set to `True`, the variable will be treated as a raw string.
        /// </summary>
        public readonly bool Raw;
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public readonly string Value;
        /// <summary>
        /// The type of the variable, either `EnvVar` or `File`.
        /// </summary>
        public readonly string VariableType;

        [OutputConstructor]
        private GetInstanceVariableResult(
            string description,

            string id,

            string key,

            bool masked,

            bool @protected,

            bool raw,

            string value,

            string variableType)
        {
            Description = description;
            Id = id;
            Key = key;
            Masked = masked;
            Protected = @protected;
            Raw = raw;
            Value = value;
            VariableType = variableType;
        }
    }
}
