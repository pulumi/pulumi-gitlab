// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetInstanceVariables
    {
        /// <summary>
        /// The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vars = GitLab.GetInstanceVariables.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceVariablesResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceVariablesResult>("gitlab:index/getInstanceVariables:getInstanceVariables", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vars = GitLab.GetInstanceVariables.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceVariablesResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceVariablesResult>("gitlab:index/getInstanceVariables:getInstanceVariables", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// The `gitlab.getInstanceVariables` data source retrieves all instance-level CI/CD variables.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/instance_level_ci_variables/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vars = GitLab.GetInstanceVariables.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceVariablesResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceVariablesResult>("gitlab:index/getInstanceVariables:getInstanceVariables", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetInstanceVariablesResult
    {
        /// <summary>
        /// The ID of this datasource. In the hardcoded format `InstanceVariables`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of variables returned by the search.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceVariablesVariableResult> Variables;

        [OutputConstructor]
        private GetInstanceVariablesResult(
            string id,

            ImmutableArray<Outputs.GetInstanceVariablesVariableResult> variables)
        {
            Id = id;
            Variables = variables;
        }
    }
}
