// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.GroupIssueBoard` resource allows to manage the lifecycle of a issue board in a group.
    /// 
    /// &gt; Multiple issue boards on one group requires a GitLab Premium or above License.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/group_boards/)
    /// </summary>
    [GitLabResourceType("gitlab:index/groupIssueBoard:GroupIssueBoard")]
    public partial class GroupIssueBoard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID or URL-encoded path of the group owned by the authenticated user.
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// The list of label names which the board should be scoped to.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The list of issue board lists.
        /// </summary>
        [Output("lists")]
        public Output<ImmutableArray<Outputs.GroupIssueBoardList>> Lists { get; private set; } = null!;

        /// <summary>
        /// The milestone the board should be scoped to.
        /// </summary>
        [Output("milestoneId")]
        public Output<int?> MilestoneId { get; private set; } = null!;

        /// <summary>
        /// The name of the board.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a GroupIssueBoard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupIssueBoard(string name, GroupIssueBoardArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/groupIssueBoard:GroupIssueBoard", name, args ?? new GroupIssueBoardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupIssueBoard(string name, Input<string> id, GroupIssueBoardState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/groupIssueBoard:GroupIssueBoard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupIssueBoard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupIssueBoard Get(string name, Input<string> id, GroupIssueBoardState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupIssueBoard(name, id, state, options);
        }
    }

    public sealed class GroupIssueBoardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID or URL-encoded path of the group owned by the authenticated user.
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// The list of label names which the board should be scoped to.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        [Input("lists")]
        private InputList<Inputs.GroupIssueBoardListArgs>? _lists;

        /// <summary>
        /// The list of issue board lists.
        /// </summary>
        public InputList<Inputs.GroupIssueBoardListArgs> Lists
        {
            get => _lists ?? (_lists = new InputList<Inputs.GroupIssueBoardListArgs>());
            set => _lists = value;
        }

        /// <summary>
        /// The milestone the board should be scoped to.
        /// </summary>
        [Input("milestoneId")]
        public Input<int>? MilestoneId { get; set; }

        /// <summary>
        /// The name of the board.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GroupIssueBoardArgs()
        {
        }
        public static new GroupIssueBoardArgs Empty => new GroupIssueBoardArgs();
    }

    public sealed class GroupIssueBoardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID or URL-encoded path of the group owned by the authenticated user.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// The list of label names which the board should be scoped to.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        [Input("lists")]
        private InputList<Inputs.GroupIssueBoardListGetArgs>? _lists;

        /// <summary>
        /// The list of issue board lists.
        /// </summary>
        public InputList<Inputs.GroupIssueBoardListGetArgs> Lists
        {
            get => _lists ?? (_lists = new InputList<Inputs.GroupIssueBoardListGetArgs>());
            set => _lists = value;
        }

        /// <summary>
        /// The milestone the board should be scoped to.
        /// </summary>
        [Input("milestoneId")]
        public Input<int>? MilestoneId { get; set; }

        /// <summary>
        /// The name of the board.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GroupIssueBoardState()
        {
        }
        public static new GroupIssueBoardState Empty => new GroupIssueBoardState();
    }
}
