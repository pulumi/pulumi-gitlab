// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectWikiPage` resource allows managing the lifecycle of a project wiki page.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/wikis/)
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_wiki_page`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_wiki_page.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// You can import gitlab_project_wiki_page state using the project ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectWikiPage:ProjectWikiPage test 12345:my-wiki-page
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectWikiPage:ProjectWikiPage")]
    public partial class ProjectWikiPage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Content of the wiki page. Must be at least 1 character long.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The encoding used for the wiki page content.
        /// </summary>
        [Output("encoding")]
        public Output<string> Encoding { get; private set; } = null!;

        /// <summary>
        /// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
        /// </summary>
        [Output("format")]
        public Output<string> Format { get; private set; } = null!;

        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Slug of the wiki page.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Title of the wiki page.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectWikiPage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectWikiPage(string name, ProjectWikiPageArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectWikiPage:ProjectWikiPage", name, args ?? new ProjectWikiPageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectWikiPage(string name, Input<string> id, ProjectWikiPageState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectWikiPage:ProjectWikiPage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectWikiPage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectWikiPage Get(string name, Input<string> id, ProjectWikiPageState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectWikiPage(name, id, state, options);
        }
    }

    public sealed class ProjectWikiPageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Content of the wiki page. Must be at least 1 character long.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Title of the wiki page.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public ProjectWikiPageArgs()
        {
        }
        public static new ProjectWikiPageArgs Empty => new ProjectWikiPageArgs();
    }

    public sealed class ProjectWikiPageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Content of the wiki page. Must be at least 1 character long.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The encoding used for the wiki page content.
        /// </summary>
        [Input("encoding")]
        public Input<string>? Encoding { get; set; }

        /// <summary>
        /// Format of the wiki page (auto-generated if not provided). Valid values are: `markdown`, `rdoc`, `asciidoc`, `org`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Slug of the wiki page.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Title of the wiki page.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public ProjectWikiPageState()
        {
        }
        public static new ProjectWikiPageState Empty => new ProjectWikiPageState();
    }
}
