// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/project:Project You can import a project state using `&lt;resource&gt; &lt;id&gt;`. The
    /// ```
    /// 
    /// `id` can be whatever the [get single project api][get_single_project] takes for
    /// 
    /// its `:id` value, so for example:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/project:Project example richardc/example
    /// ```
    /// 
    /// NOTE: the `import_url_username` and `import_url_password` cannot be imported.
    /// </summary>
    [GitLabResourceType("gitlab:index/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set to true if you want to treat skipped pipelines as if they finished with success.
        /// </summary>
        [Output("allowMergeOnSkippedPipeline")]
        public Output<bool> AllowMergeOnSkippedPipeline { get; private set; } = null!;

        /// <summary>
        /// Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
        /// </summary>
        [Output("allowPipelineTriggerApproveDeployment")]
        public Output<bool> AllowPipelineTriggerApproveDeployment { get; private set; } = null!;

        /// <summary>
        /// Set the analytics access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("analyticsAccessLevel")]
        public Output<string> AnalyticsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Number of merge request approvals required for merging. Default is 0. This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource. We recommend you do not use this deprecated field and use `gitlab.ProjectApprovalRule` instead. To be removed in 19.0.
        /// </summary>
        [Output("approvalsBeforeMerge")]
        public Output<int?> ApprovalsBeforeMerge { get; private set; } = null!;

        /// <summary>
        /// Set to `True` to archive the project instead of deleting on destroy. If set to `True` it will entire omit the `DELETE` operation.
        /// </summary>
        [Output("archiveOnDestroy")]
        public Output<bool?> ArchiveOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
        /// </summary>
        [Output("archived")]
        public Output<bool?> Archived { get; private set; } = null!;

        /// <summary>
        /// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
        /// </summary>
        [Output("autoCancelPendingPipelines")]
        public Output<string> AutoCancelPendingPipelines { get; private set; } = null!;

        /// <summary>
        /// Auto Deploy strategy. Valid values are `Continuous`, `Manual`, `TimedIncremental`.
        /// </summary>
        [Output("autoDevopsDeployStrategy")]
        public Output<string> AutoDevopsDeployStrategy { get; private set; } = null!;

        /// <summary>
        /// Enable Auto DevOps for this project.
        /// </summary>
        [Output("autoDevopsEnabled")]
        public Output<bool> AutoDevopsEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
        /// </summary>
        [Output("autoDuoCodeReviewEnabled")]
        public Output<bool> AutoDuoCodeReviewEnabled { get; private set; } = null!;

        /// <summary>
        /// Set whether auto-closing referenced issues on default branch.
        /// </summary>
        [Output("autocloseReferencedIssues")]
        public Output<bool> AutocloseReferencedIssues { get; private set; } = null!;

        /// <summary>
        /// A local path to the avatar image to upload. **Note**: not available for imported resources.
        /// </summary>
        [Output("avatar")]
        public Output<string?> Avatar { get; private set; } = null!;

        /// <summary>
        /// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
        /// </summary>
        [Output("avatarHash")]
        public Output<string> AvatarHash { get; private set; } = null!;

        /// <summary>
        /// The URL of the avatar image.
        /// </summary>
        [Output("avatarUrl")]
        public Output<string> AvatarUrl { get; private set; } = null!;

        /// <summary>
        /// Branches to fork (empty for all branches).
        /// </summary>
        [Output("branches")]
        public Output<string?> Branches { get; private set; } = null!;

        /// <summary>
        /// The Git strategy. Defaults to fetch. Valid values are `Clone`, `Fetch`.
        /// </summary>
        [Output("buildGitStrategy")]
        public Output<string> BuildGitStrategy { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of time, in seconds, that a job can run.
        /// </summary>
        [Output("buildTimeout")]
        public Output<int> BuildTimeout { get; private set; } = null!;

        /// <summary>
        /// Set the builds access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("buildsAccessLevel")]
        public Output<string> BuildsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Custom Path to CI config file.
        /// </summary>
        [Output("ciConfigPath")]
        public Output<string?> CiConfigPath { get; private set; } = null!;

        /// <summary>
        /// Default number of revisions for shallow cloning.
        /// </summary>
        [Output("ciDefaultGitDepth")]
        public Output<int> CiDefaultGitDepth { get; private set; } = null!;

        /// <summary>
        /// Pipelines older than the configured time are deleted.
        /// </summary>
        [Output("ciDeletePipelinesInSeconds")]
        public Output<int> CiDeletePipelinesInSeconds { get; private set; } = null!;

        /// <summary>
        /// When a new deployment job starts, skip older deployment jobs that are still pending.
        /// </summary>
        [Output("ciForwardDeploymentEnabled")]
        public Output<bool> CiForwardDeploymentEnabled { get; private set; } = null!;

        /// <summary>
        /// Allow job retries even if the deployment job is outdated.
        /// </summary>
        [Output("ciForwardDeploymentRollbackAllowed")]
        public Output<bool> CiForwardDeploymentRollbackAllowed { get; private set; } = null!;

        /// <summary>
        /// Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to ["project*path", "ref*type", "ref"]. Introduced in GitLab 17.10.
        /// </summary>
        [Output("ciIdTokenSubClaimComponents")]
        public Output<ImmutableArray<string>> CiIdTokenSubClaimComponents { get; private set; } = null!;

        /// <summary>
        /// The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `Developer`, `Maintainer`, `Owner`, `NoOneAllowed`
        /// </summary>
        [Output("ciPipelineVariablesMinimumOverrideRole")]
        public Output<string> CiPipelineVariablesMinimumOverrideRole { get; private set; } = null!;

        /// <summary>
        /// Allow Git push requests to your project repository that are authenticated with a CI/CD job token.
        /// </summary>
        [Output("ciPushRepositoryForJobTokenAllowed")]
        public Output<bool> CiPushRepositoryForJobTokenAllowed { get; private set; } = null!;

        /// <summary>
        /// The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `Developer`, `Maintainer`, `no one`
        /// </summary>
        [Output("ciRestrictPipelineCancellationRole")]
        public Output<string> CiRestrictPipelineCancellationRole { get; private set; } = null!;

        /// <summary>
        /// Use separate caches for protected branches.
        /// </summary>
        [Output("ciSeparatedCaches")]
        public Output<bool> CiSeparatedCaches { get; private set; } = null!;

        /// <summary>
        /// Set the image cleanup policy for this project. **Note**: this field is sometimes named `ContainerExpirationPolicyAttributes` in the GitLab Upstream API.
        /// </summary>
        [Output("containerExpirationPolicy")]
        public Output<Outputs.ProjectContainerExpirationPolicy> ContainerExpirationPolicy { get; private set; } = null!;

        /// <summary>
        /// Set visibility of container registry, for this project. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("containerRegistryAccessLevel")]
        public Output<string> ContainerRegistryAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable container registry for the project. Use `ContainerRegistryAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Output("containerRegistryEnabled")]
        public Output<bool> ContainerRegistryEnabled { get; private set; } = null!;

        /// <summary>
        /// The default branch for the project.
        /// </summary>
        [Output("defaultBranch")]
        public Output<string> DefaultBranch { get; private set; } = null!;

        /// <summary>
        /// A description of the project.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable email notifications.
        /// </summary>
        [Output("emailsEnabled")]
        public Output<bool> EmailsEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether the project is empty.
        /// </summary>
        [Output("emptyRepo")]
        public Output<bool> EmptyRepo { get; private set; } = null!;

        /// <summary>
        /// Set the environments access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("environmentsAccessLevel")]
        public Output<string> EnvironmentsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The classification label for the project.
        /// </summary>
        [Output("externalAuthorizationClassificationLabel")]
        public Output<string?> ExternalAuthorizationClassificationLabel { get; private set; } = null!;

        /// <summary>
        /// Set the feature flags access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("featureFlagsAccessLevel")]
        public Output<string> FeatureFlagsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
        /// </summary>
        [Output("forkedFromProjectId")]
        public Output<int?> ForkedFromProjectId { get; private set; } = null!;

        /// <summary>
        /// Set the forking access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("forkingAccessLevel")]
        public Output<string> ForkingAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable group runners for this project.
        /// </summary>
        [Output("groupRunnersEnabled")]
        public Output<bool> GroupRunnersEnabled { get; private set; } = null!;

        /// <summary>
        /// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
        /// </summary>
        [Output("groupWithProjectTemplatesId")]
        public Output<int?> GroupWithProjectTemplatesId { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Output("httpUrlToRepo")]
        public Output<string> HttpUrlToRepo { get; private set; } = null!;

        /// <summary>
        /// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `ForkedFromProjectId` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `ImportUrlUsername` and `ImportUrlPassword`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
        /// </summary>
        [Output("importUrl")]
        public Output<string?> ImportUrl { get; private set; } = null!;

        /// <summary>
        /// The password for the `ImportUrl`. The value of this field is used to construct a valid `ImportUrl` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
        /// </summary>
        [Output("importUrlPassword")]
        public Output<string?> ImportUrlPassword { get; private set; } = null!;

        /// <summary>
        /// The username for the `ImportUrl`. The value of this field is used to construct a valid `ImportUrl` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
        /// </summary>
        [Output("importUrlUsername")]
        public Output<string?> ImportUrlUsername { get; private set; } = null!;

        /// <summary>
        /// Set the infrastructure access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("infrastructureAccessLevel")]
        public Output<string> InfrastructureAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Create main branch with first commit containing a README.md file. Must be set to `True` if importing an uninitialized project with a different `DefaultBranch`.
        /// </summary>
        [Output("initializeWithReadme")]
        public Output<bool?> InitializeWithReadme { get; private set; } = null!;

        /// <summary>
        /// Set the issues access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("issuesAccessLevel")]
        public Output<string> IssuesAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable issue tracking for the project. Use `IssuesAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Output("issuesEnabled")]
        public Output<bool> IssuesEnabled { get; private set; } = null!;

        /// <summary>
        /// Sets the template for new issues in the project.
        /// </summary>
        [Output("issuesTemplate")]
        public Output<string?> IssuesTemplate { get; private set; } = null!;

        /// <summary>
        /// Disable or enable the ability to keep the latest artifact for this project.
        /// </summary>
        [Output("keepLatestArtifact")]
        public Output<bool> KeepLatestArtifact { get; private set; } = null!;

        /// <summary>
        /// Enable LFS for the project.
        /// </summary>
        [Output("lfsEnabled")]
        public Output<bool> LfsEnabled { get; private set; } = null!;

        /// <summary>
        /// Template used to create merge commit message in merge requests.
        /// </summary>
        [Output("mergeCommitTemplate")]
        public Output<string?> MergeCommitTemplate { get; private set; } = null!;

        /// <summary>
        /// Set the merge method. Valid values are `Merge`, `RebaseMerge`, `Ff`.
        /// </summary>
        [Output("mergeMethod")]
        public Output<string> MergeMethod { get; private set; } = null!;

        /// <summary>
        /// Enable or disable merge pipelines.
        /// </summary>
        [Output("mergePipelinesEnabled")]
        public Output<bool> MergePipelinesEnabled { get; private set; } = null!;

        /// <summary>
        /// Set the merge requests access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("mergeRequestsAccessLevel")]
        public Output<string> MergeRequestsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable merge requests for the project. Use `MergeRequestsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Output("mergeRequestsEnabled")]
        public Output<bool> MergeRequestsEnabled { get; private set; } = null!;

        /// <summary>
        /// Sets the template for new merge requests in the project.
        /// </summary>
        [Output("mergeRequestsTemplate")]
        public Output<string?> MergeRequestsTemplate { get; private set; } = null!;

        /// <summary>
        /// Enable or disable merge trains. Requires `MergePipelinesEnabled` to be set to `True` to take effect.
        /// </summary>
        [Output("mergeTrainsEnabled")]
        public Output<bool> MergeTrainsEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable project pull mirror.
        /// </summary>
        [Output("mirror")]
        public Output<bool?> Mirror { get; private set; } = null!;

        /// <summary>
        /// Enable overwrite diverged branches for a mirrored project.
        /// </summary>
        [Output("mirrorOverwritesDivergedBranches")]
        public Output<bool> MirrorOverwritesDivergedBranches { get; private set; } = null!;

        /// <summary>
        /// Enable trigger builds on pushes for a mirrored project.
        /// </summary>
        [Output("mirrorTriggerBuilds")]
        public Output<bool> MirrorTriggerBuilds { get; private set; } = null!;

        /// <summary>
        /// Set visibility of machine learning model experiments. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("modelExperimentsAccessLevel")]
        public Output<string> ModelExperimentsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Set visibility of machine learning model registry. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("modelRegistryAccessLevel")]
        public Output<string> ModelRegistryAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Set the monitor access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("monitorAccessLevel")]
        public Output<string> MonitorAccessLevel { get; private set; } = null!;

        /// <summary>
        /// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
        /// </summary>
        [Output("mrDefaultTargetSelf")]
        public Output<bool?> MrDefaultTargetSelf { get; private set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace (group or user) of the project. Defaults to your user.
        /// </summary>
        [Output("namespaceId")]
        public Output<int> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// Set to true if you want allow merges only if all discussions are resolved.
        /// </summary>
        [Output("onlyAllowMergeIfAllDiscussionsAreResolved")]
        public Output<bool> OnlyAllowMergeIfAllDiscussionsAreResolved { get; private set; } = null!;

        /// <summary>
        /// Set to true if you want allow merges only if a pipeline succeeds.
        /// </summary>
        [Output("onlyAllowMergeIfPipelineSucceeds")]
        public Output<bool> OnlyAllowMergeIfPipelineSucceeds { get; private set; } = null!;

        /// <summary>
        /// Enable only mirror protected branches for a mirrored project.
        /// </summary>
        [Output("onlyMirrorProtectedBranches")]
        public Output<bool> OnlyMirrorProtectedBranches { get; private set; } = null!;

        /// <summary>
        /// Enable packages repository for the project.
        /// </summary>
        [Output("packagesEnabled")]
        public Output<bool> PackagesEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable pages access control. Valid values are `Public`, `Private`, `Enabled`, `Disabled`.
        /// </summary>
        [Output("pagesAccessLevel")]
        public Output<string> PagesAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The path of the repository.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// The path of the repository with namespace.
        /// </summary>
        [Output("pathWithNamespace")]
        public Output<string> PathWithNamespace { get; private set; } = null!;

        /// <summary>
        /// Set to `True` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
        /// </summary>
        [Output("permanentlyDeleteOnDestroy")]
        public Output<bool?> PermanentlyDeleteOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Enable pipelines for the project. The `PipelinesEnabled` field is being sent as `JobsEnabled` in the GitLab API calls. Use `BuildsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Output("pipelinesEnabled")]
        public Output<bool> PipelinesEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
        /// </summary>
        [Output("preReceiveSecretDetectionEnabled")]
        public Output<bool> PreReceiveSecretDetectionEnabled { get; private set; } = null!;

        /// <summary>
        /// Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
        /// </summary>
        [Output("preventMergeWithoutJiraIssue")]
        public Output<bool> PreventMergeWithoutJiraIssue { get; private set; } = null!;

        /// <summary>
        /// Show link to create/view merge request when pushing from the command line
        /// </summary>
        [Output("printingMergeRequestLinkEnabled")]
        public Output<bool> PrintingMergeRequestLinkEnabled { get; private set; } = null!;

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Output("publicBuilds")]
        public Output<bool> PublicBuilds { get; private set; } = null!;

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Output("publicJobs")]
        public Output<bool> PublicJobs { get; private set; } = null!;

        /// <summary>
        /// Push rules for the project.
        /// </summary>
        [Output("pushRules")]
        public Output<Outputs.ProjectPushRules> PushRules { get; private set; } = null!;

        /// <summary>
        /// Set the releases access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("releasesAccessLevel")]
        public Output<string> ReleasesAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable `Delete source branch` option by default for all new merge requests.
        /// </summary>
        [Output("removeSourceBranchAfterMerge")]
        public Output<bool> RemoveSourceBranchAfterMerge { get; private set; } = null!;

        /// <summary>
        /// Set the repository access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("repositoryAccessLevel")]
        public Output<string> RepositoryAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Which storage shard the repository is on. (administrator only)
        /// </summary>
        [Output("repositoryStorage")]
        public Output<string> RepositoryStorage { get; private set; } = null!;

        /// <summary>
        /// Allow users to request member access.
        /// </summary>
        [Output("requestAccessEnabled")]
        public Output<bool> RequestAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// Set the requirements access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("requirementsAccessLevel")]
        public Output<string> RequirementsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Automatically resolve merge request diffs discussions on lines changed with a push.
        /// </summary>
        [Output("resolveOutdatedDiffDiscussions")]
        public Output<bool?> ResolveOutdatedDiffDiscussions { get; private set; } = null!;

        /// <summary>
        /// The default resource group process mode for the project.
        /// </summary>
        [Output("resourceGroupDefaultProcessMode")]
        public Output<string> ResourceGroupDefaultProcessMode { get; private set; } = null!;

        /// <summary>
        /// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline. Use `CiPipelineVariablesMinimumOverrideRole` instead. To be removed in 19.0.
        /// </summary>
        [Output("restrictUserDefinedVariables")]
        public Output<bool> RestrictUserDefinedVariables { get; private set; } = null!;

        /// <summary>
        /// Registration token to use during runner setup.
        /// </summary>
        [Output("runnersToken")]
        public Output<string> RunnersToken { get; private set; } = null!;

        /// <summary>
        /// Set the security and compliance access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("securityAndComplianceAccessLevel")]
        public Output<string> SecurityAndComplianceAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable shared runners for this project.
        /// </summary>
        [Output("sharedRunnersEnabled")]
        public Output<bool> SharedRunnersEnabled { get; private set; } = null!;

        /// <summary>
        /// If `True`, the default behavior to wait for the default branch protection to be created is skipped.
        /// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
        /// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
        /// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
        /// </summary>
        [Output("skipWaitForDefaultBranchProtection")]
        public Output<bool?> SkipWaitForDefaultBranchProtection { get; private set; } = null!;

        /// <summary>
        /// Set the snippets access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("snippetsAccessLevel")]
        public Output<string> SnippetsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable snippets for the project. Use `SnippetsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Output("snippetsEnabled")]
        public Output<bool> SnippetsEnabled { get; private set; } = null!;

        /// <summary>
        /// Template used to create squash commit message in merge requests.
        /// </summary>
        [Output("squashCommitTemplate")]
        public Output<string?> SquashCommitTemplate { get; private set; } = null!;

        /// <summary>
        /// Squash commits when merge request is merged. Valid values are `Never` (Do not allow), `Always` (Require), `DefaultOn` (Encourage), or `DefaultOff` (Allow). The default value is `DefaultOff` (Allow).
        /// </summary>
        [Output("squashOption")]
        public Output<string> SquashOption { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Output("sshUrlToRepo")]
        public Output<string> SshUrlToRepo { get; private set; } = null!;

        /// <summary>
        /// The commit message used to apply merge request suggestions.
        /// </summary>
        [Output("suggestionCommitMessage")]
        public Output<string?> SuggestionCommitMessage { get; private set; } = null!;

        /// <summary>
        /// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use `Topics` instead. To be removed in 19.0.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `TemplateProjectId`.
        /// </summary>
        [Output("templateName")]
        public Output<string?> TemplateName { get; private set; } = null!;

        /// <summary>
        /// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `TemplateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
        /// </summary>
        [Output("templateProjectId")]
        public Output<int?> TemplateProjectId { get; private set; } = null!;

        /// <summary>
        /// The list of topics for the project.
        /// </summary>
        [Output("topics")]
        public Output<ImmutableArray<string>> Topics { get; private set; } = null!;

        /// <summary>
        /// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
        /// 	&gt; When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
        /// </summary>
        [Output("useCustomTemplate")]
        public Output<bool?> UseCustomTemplate { get; private set; } = null!;

        /// <summary>
        /// Set to `Public` to create a public project. Valid values are `Private`, `Internal`, `Public`.
        /// </summary>
        [Output("visibilityLevel")]
        public Output<string> VisibilityLevel { get; private set; } = null!;

        /// <summary>
        /// URL that can be used to find the project in a browser.
        /// </summary>
        [Output("webUrl")]
        public Output<string> WebUrl { get; private set; } = null!;

        /// <summary>
        /// Set the wiki access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Output("wikiAccessLevel")]
        public Output<string> WikiAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable wiki for the project. Use `WikiAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Output("wikiEnabled")]
        public Output<bool> WikiEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs? args = null, CustomResourceOptions? options = null)
            : base("gitlab:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "importUrlPassword",
                    "runnersToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to true if you want to treat skipped pipelines as if they finished with success.
        /// </summary>
        [Input("allowMergeOnSkippedPipeline")]
        public Input<bool>? AllowMergeOnSkippedPipeline { get; set; }

        /// <summary>
        /// Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
        /// </summary>
        [Input("allowPipelineTriggerApproveDeployment")]
        public Input<bool>? AllowPipelineTriggerApproveDeployment { get; set; }

        /// <summary>
        /// Set the analytics access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("analyticsAccessLevel")]
        public Input<string>? AnalyticsAccessLevel { get; set; }

        /// <summary>
        /// Number of merge request approvals required for merging. Default is 0. This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource. We recommend you do not use this deprecated field and use `gitlab.ProjectApprovalRule` instead. To be removed in 19.0.
        /// </summary>
        [Input("approvalsBeforeMerge")]
        public Input<int>? ApprovalsBeforeMerge { get; set; }

        /// <summary>
        /// Set to `True` to archive the project instead of deleting on destroy. If set to `True` it will entire omit the `DELETE` operation.
        /// </summary>
        [Input("archiveOnDestroy")]
        public Input<bool>? ArchiveOnDestroy { get; set; }

        /// <summary>
        /// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
        /// </summary>
        [Input("autoCancelPendingPipelines")]
        public Input<string>? AutoCancelPendingPipelines { get; set; }

        /// <summary>
        /// Auto Deploy strategy. Valid values are `Continuous`, `Manual`, `TimedIncremental`.
        /// </summary>
        [Input("autoDevopsDeployStrategy")]
        public Input<string>? AutoDevopsDeployStrategy { get; set; }

        /// <summary>
        /// Enable Auto DevOps for this project.
        /// </summary>
        [Input("autoDevopsEnabled")]
        public Input<bool>? AutoDevopsEnabled { get; set; }

        /// <summary>
        /// Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
        /// </summary>
        [Input("autoDuoCodeReviewEnabled")]
        public Input<bool>? AutoDuoCodeReviewEnabled { get; set; }

        /// <summary>
        /// Set whether auto-closing referenced issues on default branch.
        /// </summary>
        [Input("autocloseReferencedIssues")]
        public Input<bool>? AutocloseReferencedIssues { get; set; }

        /// <summary>
        /// A local path to the avatar image to upload. **Note**: not available for imported resources.
        /// </summary>
        [Input("avatar")]
        public Input<string>? Avatar { get; set; }

        /// <summary>
        /// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
        /// </summary>
        [Input("avatarHash")]
        public Input<string>? AvatarHash { get; set; }

        /// <summary>
        /// Branches to fork (empty for all branches).
        /// </summary>
        [Input("branches")]
        public Input<string>? Branches { get; set; }

        /// <summary>
        /// The Git strategy. Defaults to fetch. Valid values are `Clone`, `Fetch`.
        /// </summary>
        [Input("buildGitStrategy")]
        public Input<string>? BuildGitStrategy { get; set; }

        /// <summary>
        /// The maximum amount of time, in seconds, that a job can run.
        /// </summary>
        [Input("buildTimeout")]
        public Input<int>? BuildTimeout { get; set; }

        /// <summary>
        /// Set the builds access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("buildsAccessLevel")]
        public Input<string>? BuildsAccessLevel { get; set; }

        /// <summary>
        /// Custom Path to CI config file.
        /// </summary>
        [Input("ciConfigPath")]
        public Input<string>? CiConfigPath { get; set; }

        /// <summary>
        /// Default number of revisions for shallow cloning.
        /// </summary>
        [Input("ciDefaultGitDepth")]
        public Input<int>? CiDefaultGitDepth { get; set; }

        /// <summary>
        /// Pipelines older than the configured time are deleted.
        /// </summary>
        [Input("ciDeletePipelinesInSeconds")]
        public Input<int>? CiDeletePipelinesInSeconds { get; set; }

        /// <summary>
        /// When a new deployment job starts, skip older deployment jobs that are still pending.
        /// </summary>
        [Input("ciForwardDeploymentEnabled")]
        public Input<bool>? CiForwardDeploymentEnabled { get; set; }

        /// <summary>
        /// Allow job retries even if the deployment job is outdated.
        /// </summary>
        [Input("ciForwardDeploymentRollbackAllowed")]
        public Input<bool>? CiForwardDeploymentRollbackAllowed { get; set; }

        [Input("ciIdTokenSubClaimComponents")]
        private InputList<string>? _ciIdTokenSubClaimComponents;

        /// <summary>
        /// Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to ["project*path", "ref*type", "ref"]. Introduced in GitLab 17.10.
        /// </summary>
        public InputList<string> CiIdTokenSubClaimComponents
        {
            get => _ciIdTokenSubClaimComponents ?? (_ciIdTokenSubClaimComponents = new InputList<string>());
            set => _ciIdTokenSubClaimComponents = value;
        }

        /// <summary>
        /// The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `Developer`, `Maintainer`, `Owner`, `NoOneAllowed`
        /// </summary>
        [Input("ciPipelineVariablesMinimumOverrideRole")]
        public Input<string>? CiPipelineVariablesMinimumOverrideRole { get; set; }

        /// <summary>
        /// Allow Git push requests to your project repository that are authenticated with a CI/CD job token.
        /// </summary>
        [Input("ciPushRepositoryForJobTokenAllowed")]
        public Input<bool>? CiPushRepositoryForJobTokenAllowed { get; set; }

        /// <summary>
        /// The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `Developer`, `Maintainer`, `no one`
        /// </summary>
        [Input("ciRestrictPipelineCancellationRole")]
        public Input<string>? CiRestrictPipelineCancellationRole { get; set; }

        /// <summary>
        /// Use separate caches for protected branches.
        /// </summary>
        [Input("ciSeparatedCaches")]
        public Input<bool>? CiSeparatedCaches { get; set; }

        /// <summary>
        /// Set the image cleanup policy for this project. **Note**: this field is sometimes named `ContainerExpirationPolicyAttributes` in the GitLab Upstream API.
        /// </summary>
        [Input("containerExpirationPolicy")]
        public Input<Inputs.ProjectContainerExpirationPolicyArgs>? ContainerExpirationPolicy { get; set; }

        /// <summary>
        /// Set visibility of container registry, for this project. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("containerRegistryAccessLevel")]
        public Input<string>? ContainerRegistryAccessLevel { get; set; }

        /// <summary>
        /// Enable container registry for the project. Use `ContainerRegistryAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("containerRegistryEnabled")]
        public Input<bool>? ContainerRegistryEnabled { get; set; }

        /// <summary>
        /// The default branch for the project.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// A description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable email notifications.
        /// </summary>
        [Input("emailsEnabled")]
        public Input<bool>? EmailsEnabled { get; set; }

        /// <summary>
        /// Set the environments access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("environmentsAccessLevel")]
        public Input<string>? EnvironmentsAccessLevel { get; set; }

        /// <summary>
        /// The classification label for the project.
        /// </summary>
        [Input("externalAuthorizationClassificationLabel")]
        public Input<string>? ExternalAuthorizationClassificationLabel { get; set; }

        /// <summary>
        /// Set the feature flags access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("featureFlagsAccessLevel")]
        public Input<string>? FeatureFlagsAccessLevel { get; set; }

        /// <summary>
        /// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
        /// </summary>
        [Input("forkedFromProjectId")]
        public Input<int>? ForkedFromProjectId { get; set; }

        /// <summary>
        /// Set the forking access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("forkingAccessLevel")]
        public Input<string>? ForkingAccessLevel { get; set; }

        /// <summary>
        /// Enable group runners for this project.
        /// </summary>
        [Input("groupRunnersEnabled")]
        public Input<bool>? GroupRunnersEnabled { get; set; }

        /// <summary>
        /// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
        /// </summary>
        [Input("groupWithProjectTemplatesId")]
        public Input<int>? GroupWithProjectTemplatesId { get; set; }

        /// <summary>
        /// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `ForkedFromProjectId` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `ImportUrlUsername` and `ImportUrlPassword`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
        /// </summary>
        [Input("importUrl")]
        public Input<string>? ImportUrl { get; set; }

        [Input("importUrlPassword")]
        private Input<string>? _importUrlPassword;

        /// <summary>
        /// The password for the `ImportUrl`. The value of this field is used to construct a valid `ImportUrl` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
        /// </summary>
        public Input<string>? ImportUrlPassword
        {
            get => _importUrlPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _importUrlPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the `ImportUrl`. The value of this field is used to construct a valid `ImportUrl` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
        /// </summary>
        [Input("importUrlUsername")]
        public Input<string>? ImportUrlUsername { get; set; }

        /// <summary>
        /// Set the infrastructure access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("infrastructureAccessLevel")]
        public Input<string>? InfrastructureAccessLevel { get; set; }

        /// <summary>
        /// Create main branch with first commit containing a README.md file. Must be set to `True` if importing an uninitialized project with a different `DefaultBranch`.
        /// </summary>
        [Input("initializeWithReadme")]
        public Input<bool>? InitializeWithReadme { get; set; }

        /// <summary>
        /// Set the issues access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("issuesAccessLevel")]
        public Input<string>? IssuesAccessLevel { get; set; }

        /// <summary>
        /// Enable issue tracking for the project. Use `IssuesAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("issuesEnabled")]
        public Input<bool>? IssuesEnabled { get; set; }

        /// <summary>
        /// Sets the template for new issues in the project.
        /// </summary>
        [Input("issuesTemplate")]
        public Input<string>? IssuesTemplate { get; set; }

        /// <summary>
        /// Disable or enable the ability to keep the latest artifact for this project.
        /// </summary>
        [Input("keepLatestArtifact")]
        public Input<bool>? KeepLatestArtifact { get; set; }

        /// <summary>
        /// Enable LFS for the project.
        /// </summary>
        [Input("lfsEnabled")]
        public Input<bool>? LfsEnabled { get; set; }

        /// <summary>
        /// Template used to create merge commit message in merge requests.
        /// </summary>
        [Input("mergeCommitTemplate")]
        public Input<string>? MergeCommitTemplate { get; set; }

        /// <summary>
        /// Set the merge method. Valid values are `Merge`, `RebaseMerge`, `Ff`.
        /// </summary>
        [Input("mergeMethod")]
        public Input<string>? MergeMethod { get; set; }

        /// <summary>
        /// Enable or disable merge pipelines.
        /// </summary>
        [Input("mergePipelinesEnabled")]
        public Input<bool>? MergePipelinesEnabled { get; set; }

        /// <summary>
        /// Set the merge requests access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("mergeRequestsAccessLevel")]
        public Input<string>? MergeRequestsAccessLevel { get; set; }

        /// <summary>
        /// Enable merge requests for the project. Use `MergeRequestsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("mergeRequestsEnabled")]
        public Input<bool>? MergeRequestsEnabled { get; set; }

        /// <summary>
        /// Sets the template for new merge requests in the project.
        /// </summary>
        [Input("mergeRequestsTemplate")]
        public Input<string>? MergeRequestsTemplate { get; set; }

        /// <summary>
        /// Enable or disable merge trains. Requires `MergePipelinesEnabled` to be set to `True` to take effect.
        /// </summary>
        [Input("mergeTrainsEnabled")]
        public Input<bool>? MergeTrainsEnabled { get; set; }

        /// <summary>
        /// Enable project pull mirror.
        /// </summary>
        [Input("mirror")]
        public Input<bool>? Mirror { get; set; }

        /// <summary>
        /// Enable overwrite diverged branches for a mirrored project.
        /// </summary>
        [Input("mirrorOverwritesDivergedBranches")]
        public Input<bool>? MirrorOverwritesDivergedBranches { get; set; }

        /// <summary>
        /// Enable trigger builds on pushes for a mirrored project.
        /// </summary>
        [Input("mirrorTriggerBuilds")]
        public Input<bool>? MirrorTriggerBuilds { get; set; }

        /// <summary>
        /// Set visibility of machine learning model experiments. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("modelExperimentsAccessLevel")]
        public Input<string>? ModelExperimentsAccessLevel { get; set; }

        /// <summary>
        /// Set visibility of machine learning model registry. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("modelRegistryAccessLevel")]
        public Input<string>? ModelRegistryAccessLevel { get; set; }

        /// <summary>
        /// Set the monitor access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("monitorAccessLevel")]
        public Input<string>? MonitorAccessLevel { get; set; }

        /// <summary>
        /// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
        /// </summary>
        [Input("mrDefaultTargetSelf")]
        public Input<bool>? MrDefaultTargetSelf { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace (group or user) of the project. Defaults to your user.
        /// </summary>
        [Input("namespaceId")]
        public Input<int>? NamespaceId { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if all discussions are resolved.
        /// </summary>
        [Input("onlyAllowMergeIfAllDiscussionsAreResolved")]
        public Input<bool>? OnlyAllowMergeIfAllDiscussionsAreResolved { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if a pipeline succeeds.
        /// </summary>
        [Input("onlyAllowMergeIfPipelineSucceeds")]
        public Input<bool>? OnlyAllowMergeIfPipelineSucceeds { get; set; }

        /// <summary>
        /// Enable only mirror protected branches for a mirrored project.
        /// </summary>
        [Input("onlyMirrorProtectedBranches")]
        public Input<bool>? OnlyMirrorProtectedBranches { get; set; }

        /// <summary>
        /// Enable packages repository for the project.
        /// </summary>
        [Input("packagesEnabled")]
        public Input<bool>? PackagesEnabled { get; set; }

        /// <summary>
        /// Enable pages access control. Valid values are `Public`, `Private`, `Enabled`, `Disabled`.
        /// </summary>
        [Input("pagesAccessLevel")]
        public Input<string>? PagesAccessLevel { get; set; }

        /// <summary>
        /// The path of the repository.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Set to `True` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
        /// </summary>
        [Input("permanentlyDeleteOnDestroy")]
        public Input<bool>? PermanentlyDeleteOnDestroy { get; set; }

        /// <summary>
        /// Enable pipelines for the project. The `PipelinesEnabled` field is being sent as `JobsEnabled` in the GitLab API calls. Use `BuildsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("pipelinesEnabled")]
        public Input<bool>? PipelinesEnabled { get; set; }

        /// <summary>
        /// Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
        /// </summary>
        [Input("preReceiveSecretDetectionEnabled")]
        public Input<bool>? PreReceiveSecretDetectionEnabled { get; set; }

        /// <summary>
        /// Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
        /// </summary>
        [Input("preventMergeWithoutJiraIssue")]
        public Input<bool>? PreventMergeWithoutJiraIssue { get; set; }

        /// <summary>
        /// Show link to create/view merge request when pushing from the command line
        /// </summary>
        [Input("printingMergeRequestLinkEnabled")]
        public Input<bool>? PrintingMergeRequestLinkEnabled { get; set; }

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Input("publicBuilds")]
        public Input<bool>? PublicBuilds { get; set; }

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Input("publicJobs")]
        public Input<bool>? PublicJobs { get; set; }

        /// <summary>
        /// Push rules for the project.
        /// </summary>
        [Input("pushRules")]
        public Input<Inputs.ProjectPushRulesArgs>? PushRules { get; set; }

        /// <summary>
        /// Set the releases access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("releasesAccessLevel")]
        public Input<string>? ReleasesAccessLevel { get; set; }

        /// <summary>
        /// Enable `Delete source branch` option by default for all new merge requests.
        /// </summary>
        [Input("removeSourceBranchAfterMerge")]
        public Input<bool>? RemoveSourceBranchAfterMerge { get; set; }

        /// <summary>
        /// Set the repository access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("repositoryAccessLevel")]
        public Input<string>? RepositoryAccessLevel { get; set; }

        /// <summary>
        /// Which storage shard the repository is on. (administrator only)
        /// </summary>
        [Input("repositoryStorage")]
        public Input<string>? RepositoryStorage { get; set; }

        /// <summary>
        /// Allow users to request member access.
        /// </summary>
        [Input("requestAccessEnabled")]
        public Input<bool>? RequestAccessEnabled { get; set; }

        /// <summary>
        /// Set the requirements access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("requirementsAccessLevel")]
        public Input<string>? RequirementsAccessLevel { get; set; }

        /// <summary>
        /// Automatically resolve merge request diffs discussions on lines changed with a push.
        /// </summary>
        [Input("resolveOutdatedDiffDiscussions")]
        public Input<bool>? ResolveOutdatedDiffDiscussions { get; set; }

        /// <summary>
        /// The default resource group process mode for the project.
        /// </summary>
        [Input("resourceGroupDefaultProcessMode")]
        public Input<string>? ResourceGroupDefaultProcessMode { get; set; }

        /// <summary>
        /// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline. Use `CiPipelineVariablesMinimumOverrideRole` instead. To be removed in 19.0.
        /// </summary>
        [Input("restrictUserDefinedVariables")]
        public Input<bool>? RestrictUserDefinedVariables { get; set; }

        /// <summary>
        /// Set the security and compliance access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("securityAndComplianceAccessLevel")]
        public Input<string>? SecurityAndComplianceAccessLevel { get; set; }

        /// <summary>
        /// Enable shared runners for this project.
        /// </summary>
        [Input("sharedRunnersEnabled")]
        public Input<bool>? SharedRunnersEnabled { get; set; }

        /// <summary>
        /// If `True`, the default behavior to wait for the default branch protection to be created is skipped.
        /// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
        /// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
        /// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
        /// </summary>
        [Input("skipWaitForDefaultBranchProtection")]
        public Input<bool>? SkipWaitForDefaultBranchProtection { get; set; }

        /// <summary>
        /// Set the snippets access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("snippetsAccessLevel")]
        public Input<string>? SnippetsAccessLevel { get; set; }

        /// <summary>
        /// Enable snippets for the project. Use `SnippetsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("snippetsEnabled")]
        public Input<bool>? SnippetsEnabled { get; set; }

        /// <summary>
        /// Template used to create squash commit message in merge requests.
        /// </summary>
        [Input("squashCommitTemplate")]
        public Input<string>? SquashCommitTemplate { get; set; }

        /// <summary>
        /// Squash commits when merge request is merged. Valid values are `Never` (Do not allow), `Always` (Require), `DefaultOn` (Encourage), or `DefaultOff` (Allow). The default value is `DefaultOff` (Allow).
        /// </summary>
        [Input("squashOption")]
        public Input<string>? SquashOption { get; set; }

        /// <summary>
        /// The commit message used to apply merge request suggestions.
        /// </summary>
        [Input("suggestionCommitMessage")]
        public Input<string>? SuggestionCommitMessage { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use `Topics` instead. To be removed in 19.0.
        /// </summary>
        [Obsolete(@"Use `Topics` instead. To be removed in 19.0.")]
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `TemplateProjectId`.
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `TemplateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
        /// </summary>
        [Input("templateProjectId")]
        public Input<int>? TemplateProjectId { get; set; }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// The list of topics for the project.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
        /// 	&gt; When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
        /// </summary>
        [Input("useCustomTemplate")]
        public Input<bool>? UseCustomTemplate { get; set; }

        /// <summary>
        /// Set to `Public` to create a public project. Valid values are `Private`, `Internal`, `Public`.
        /// </summary>
        [Input("visibilityLevel")]
        public Input<string>? VisibilityLevel { get; set; }

        /// <summary>
        /// Set the wiki access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("wikiAccessLevel")]
        public Input<string>? WikiAccessLevel { get; set; }

        /// <summary>
        /// Enable wiki for the project. Use `WikiAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("wikiEnabled")]
        public Input<bool>? WikiEnabled { get; set; }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to true if you want to treat skipped pipelines as if they finished with success.
        /// </summary>
        [Input("allowMergeOnSkippedPipeline")]
        public Input<bool>? AllowMergeOnSkippedPipeline { get; set; }

        /// <summary>
        /// Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
        /// </summary>
        [Input("allowPipelineTriggerApproveDeployment")]
        public Input<bool>? AllowPipelineTriggerApproveDeployment { get; set; }

        /// <summary>
        /// Set the analytics access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("analyticsAccessLevel")]
        public Input<string>? AnalyticsAccessLevel { get; set; }

        /// <summary>
        /// Number of merge request approvals required for merging. Default is 0. This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource. We recommend you do not use this deprecated field and use `gitlab.ProjectApprovalRule` instead. To be removed in 19.0.
        /// </summary>
        [Input("approvalsBeforeMerge")]
        public Input<int>? ApprovalsBeforeMerge { get; set; }

        /// <summary>
        /// Set to `True` to archive the project instead of deleting on destroy. If set to `True` it will entire omit the `DELETE` operation.
        /// </summary>
        [Input("archiveOnDestroy")]
        public Input<bool>? ArchiveOnDestroy { get; set; }

        /// <summary>
        /// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
        /// </summary>
        [Input("autoCancelPendingPipelines")]
        public Input<string>? AutoCancelPendingPipelines { get; set; }

        /// <summary>
        /// Auto Deploy strategy. Valid values are `Continuous`, `Manual`, `TimedIncremental`.
        /// </summary>
        [Input("autoDevopsDeployStrategy")]
        public Input<string>? AutoDevopsDeployStrategy { get; set; }

        /// <summary>
        /// Enable Auto DevOps for this project.
        /// </summary>
        [Input("autoDevopsEnabled")]
        public Input<bool>? AutoDevopsEnabled { get; set; }

        /// <summary>
        /// Enable automatic reviews by GitLab Duo on merge requests. Ultimate only. Automatic reviews only work with the GitLab Duo Enterprise add-on.
        /// </summary>
        [Input("autoDuoCodeReviewEnabled")]
        public Input<bool>? AutoDuoCodeReviewEnabled { get; set; }

        /// <summary>
        /// Set whether auto-closing referenced issues on default branch.
        /// </summary>
        [Input("autocloseReferencedIssues")]
        public Input<bool>? AutocloseReferencedIssues { get; set; }

        /// <summary>
        /// A local path to the avatar image to upload. **Note**: not available for imported resources.
        /// </summary>
        [Input("avatar")]
        public Input<string>? Avatar { get; set; }

        /// <summary>
        /// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
        /// </summary>
        [Input("avatarHash")]
        public Input<string>? AvatarHash { get; set; }

        /// <summary>
        /// The URL of the avatar image.
        /// </summary>
        [Input("avatarUrl")]
        public Input<string>? AvatarUrl { get; set; }

        /// <summary>
        /// Branches to fork (empty for all branches).
        /// </summary>
        [Input("branches")]
        public Input<string>? Branches { get; set; }

        /// <summary>
        /// The Git strategy. Defaults to fetch. Valid values are `Clone`, `Fetch`.
        /// </summary>
        [Input("buildGitStrategy")]
        public Input<string>? BuildGitStrategy { get; set; }

        /// <summary>
        /// The maximum amount of time, in seconds, that a job can run.
        /// </summary>
        [Input("buildTimeout")]
        public Input<int>? BuildTimeout { get; set; }

        /// <summary>
        /// Set the builds access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("buildsAccessLevel")]
        public Input<string>? BuildsAccessLevel { get; set; }

        /// <summary>
        /// Custom Path to CI config file.
        /// </summary>
        [Input("ciConfigPath")]
        public Input<string>? CiConfigPath { get; set; }

        /// <summary>
        /// Default number of revisions for shallow cloning.
        /// </summary>
        [Input("ciDefaultGitDepth")]
        public Input<int>? CiDefaultGitDepth { get; set; }

        /// <summary>
        /// Pipelines older than the configured time are deleted.
        /// </summary>
        [Input("ciDeletePipelinesInSeconds")]
        public Input<int>? CiDeletePipelinesInSeconds { get; set; }

        /// <summary>
        /// When a new deployment job starts, skip older deployment jobs that are still pending.
        /// </summary>
        [Input("ciForwardDeploymentEnabled")]
        public Input<bool>? CiForwardDeploymentEnabled { get; set; }

        /// <summary>
        /// Allow job retries even if the deployment job is outdated.
        /// </summary>
        [Input("ciForwardDeploymentRollbackAllowed")]
        public Input<bool>? CiForwardDeploymentRollbackAllowed { get; set; }

        [Input("ciIdTokenSubClaimComponents")]
        private InputList<string>? _ciIdTokenSubClaimComponents;

        /// <summary>
        /// Fields included in the sub claim of the ID Token. Accepts an array starting with project*path. The array might also include ref*type and ref. Defaults to ["project*path", "ref*type", "ref"]. Introduced in GitLab 17.10.
        /// </summary>
        public InputList<string> CiIdTokenSubClaimComponents
        {
            get => _ciIdTokenSubClaimComponents ?? (_ciIdTokenSubClaimComponents = new InputList<string>());
            set => _ciIdTokenSubClaimComponents = value;
        }

        /// <summary>
        /// The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `Developer`, `Maintainer`, `Owner`, `NoOneAllowed`
        /// </summary>
        [Input("ciPipelineVariablesMinimumOverrideRole")]
        public Input<string>? CiPipelineVariablesMinimumOverrideRole { get; set; }

        /// <summary>
        /// Allow Git push requests to your project repository that are authenticated with a CI/CD job token.
        /// </summary>
        [Input("ciPushRepositoryForJobTokenAllowed")]
        public Input<bool>? CiPushRepositoryForJobTokenAllowed { get; set; }

        /// <summary>
        /// The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `Developer`, `Maintainer`, `no one`
        /// </summary>
        [Input("ciRestrictPipelineCancellationRole")]
        public Input<string>? CiRestrictPipelineCancellationRole { get; set; }

        /// <summary>
        /// Use separate caches for protected branches.
        /// </summary>
        [Input("ciSeparatedCaches")]
        public Input<bool>? CiSeparatedCaches { get; set; }

        /// <summary>
        /// Set the image cleanup policy for this project. **Note**: this field is sometimes named `ContainerExpirationPolicyAttributes` in the GitLab Upstream API.
        /// </summary>
        [Input("containerExpirationPolicy")]
        public Input<Inputs.ProjectContainerExpirationPolicyGetArgs>? ContainerExpirationPolicy { get; set; }

        /// <summary>
        /// Set visibility of container registry, for this project. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("containerRegistryAccessLevel")]
        public Input<string>? ContainerRegistryAccessLevel { get; set; }

        /// <summary>
        /// Enable container registry for the project. Use `ContainerRegistryAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("containerRegistryEnabled")]
        public Input<bool>? ContainerRegistryEnabled { get; set; }

        /// <summary>
        /// The default branch for the project.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// A description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable email notifications.
        /// </summary>
        [Input("emailsEnabled")]
        public Input<bool>? EmailsEnabled { get; set; }

        /// <summary>
        /// Whether the project is empty.
        /// </summary>
        [Input("emptyRepo")]
        public Input<bool>? EmptyRepo { get; set; }

        /// <summary>
        /// Set the environments access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("environmentsAccessLevel")]
        public Input<string>? EnvironmentsAccessLevel { get; set; }

        /// <summary>
        /// The classification label for the project.
        /// </summary>
        [Input("externalAuthorizationClassificationLabel")]
        public Input<string>? ExternalAuthorizationClassificationLabel { get; set; }

        /// <summary>
        /// Set the feature flags access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("featureFlagsAccessLevel")]
        public Input<string>? FeatureFlagsAccessLevel { get; set; }

        /// <summary>
        /// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
        /// </summary>
        [Input("forkedFromProjectId")]
        public Input<int>? ForkedFromProjectId { get; set; }

        /// <summary>
        /// Set the forking access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("forkingAccessLevel")]
        public Input<string>? ForkingAccessLevel { get; set; }

        /// <summary>
        /// Enable group runners for this project.
        /// </summary>
        [Input("groupRunnersEnabled")]
        public Input<bool>? GroupRunnersEnabled { get; set; }

        /// <summary>
        /// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
        /// </summary>
        [Input("groupWithProjectTemplatesId")]
        public Input<int>? GroupWithProjectTemplatesId { get; set; }

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Input("httpUrlToRepo")]
        public Input<string>? HttpUrlToRepo { get; set; }

        /// <summary>
        /// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `ForkedFromProjectId` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `ImportUrlUsername` and `ImportUrlPassword`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `pulumi import`. See the examples section for how to properly use it.
        /// </summary>
        [Input("importUrl")]
        public Input<string>? ImportUrl { get; set; }

        [Input("importUrlPassword")]
        private Input<string>? _importUrlPassword;

        /// <summary>
        /// The password for the `ImportUrl`. The value of this field is used to construct a valid `ImportUrl` and is only related to the provider. This field cannot be imported using `pulumi import`. See the examples section for how to properly use it.
        /// </summary>
        public Input<string>? ImportUrlPassword
        {
            get => _importUrlPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _importUrlPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the `ImportUrl`. The value of this field is used to construct a valid `ImportUrl` and is only related to the provider. This field cannot be imported using `pulumi import`.  See the examples section for how to properly use it.
        /// </summary>
        [Input("importUrlUsername")]
        public Input<string>? ImportUrlUsername { get; set; }

        /// <summary>
        /// Set the infrastructure access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("infrastructureAccessLevel")]
        public Input<string>? InfrastructureAccessLevel { get; set; }

        /// <summary>
        /// Create main branch with first commit containing a README.md file. Must be set to `True` if importing an uninitialized project with a different `DefaultBranch`.
        /// </summary>
        [Input("initializeWithReadme")]
        public Input<bool>? InitializeWithReadme { get; set; }

        /// <summary>
        /// Set the issues access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("issuesAccessLevel")]
        public Input<string>? IssuesAccessLevel { get; set; }

        /// <summary>
        /// Enable issue tracking for the project. Use `IssuesAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("issuesEnabled")]
        public Input<bool>? IssuesEnabled { get; set; }

        /// <summary>
        /// Sets the template for new issues in the project.
        /// </summary>
        [Input("issuesTemplate")]
        public Input<string>? IssuesTemplate { get; set; }

        /// <summary>
        /// Disable or enable the ability to keep the latest artifact for this project.
        /// </summary>
        [Input("keepLatestArtifact")]
        public Input<bool>? KeepLatestArtifact { get; set; }

        /// <summary>
        /// Enable LFS for the project.
        /// </summary>
        [Input("lfsEnabled")]
        public Input<bool>? LfsEnabled { get; set; }

        /// <summary>
        /// Template used to create merge commit message in merge requests.
        /// </summary>
        [Input("mergeCommitTemplate")]
        public Input<string>? MergeCommitTemplate { get; set; }

        /// <summary>
        /// Set the merge method. Valid values are `Merge`, `RebaseMerge`, `Ff`.
        /// </summary>
        [Input("mergeMethod")]
        public Input<string>? MergeMethod { get; set; }

        /// <summary>
        /// Enable or disable merge pipelines.
        /// </summary>
        [Input("mergePipelinesEnabled")]
        public Input<bool>? MergePipelinesEnabled { get; set; }

        /// <summary>
        /// Set the merge requests access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("mergeRequestsAccessLevel")]
        public Input<string>? MergeRequestsAccessLevel { get; set; }

        /// <summary>
        /// Enable merge requests for the project. Use `MergeRequestsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("mergeRequestsEnabled")]
        public Input<bool>? MergeRequestsEnabled { get; set; }

        /// <summary>
        /// Sets the template for new merge requests in the project.
        /// </summary>
        [Input("mergeRequestsTemplate")]
        public Input<string>? MergeRequestsTemplate { get; set; }

        /// <summary>
        /// Enable or disable merge trains. Requires `MergePipelinesEnabled` to be set to `True` to take effect.
        /// </summary>
        [Input("mergeTrainsEnabled")]
        public Input<bool>? MergeTrainsEnabled { get; set; }

        /// <summary>
        /// Enable project pull mirror.
        /// </summary>
        [Input("mirror")]
        public Input<bool>? Mirror { get; set; }

        /// <summary>
        /// Enable overwrite diverged branches for a mirrored project.
        /// </summary>
        [Input("mirrorOverwritesDivergedBranches")]
        public Input<bool>? MirrorOverwritesDivergedBranches { get; set; }

        /// <summary>
        /// Enable trigger builds on pushes for a mirrored project.
        /// </summary>
        [Input("mirrorTriggerBuilds")]
        public Input<bool>? MirrorTriggerBuilds { get; set; }

        /// <summary>
        /// Set visibility of machine learning model experiments. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("modelExperimentsAccessLevel")]
        public Input<string>? ModelExperimentsAccessLevel { get; set; }

        /// <summary>
        /// Set visibility of machine learning model registry. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("modelRegistryAccessLevel")]
        public Input<string>? ModelRegistryAccessLevel { get; set; }

        /// <summary>
        /// Set the monitor access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("monitorAccessLevel")]
        public Input<string>? MonitorAccessLevel { get; set; }

        /// <summary>
        /// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
        /// </summary>
        [Input("mrDefaultTargetSelf")]
        public Input<bool>? MrDefaultTargetSelf { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace (group or user) of the project. Defaults to your user.
        /// </summary>
        [Input("namespaceId")]
        public Input<int>? NamespaceId { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if all discussions are resolved.
        /// </summary>
        [Input("onlyAllowMergeIfAllDiscussionsAreResolved")]
        public Input<bool>? OnlyAllowMergeIfAllDiscussionsAreResolved { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if a pipeline succeeds.
        /// </summary>
        [Input("onlyAllowMergeIfPipelineSucceeds")]
        public Input<bool>? OnlyAllowMergeIfPipelineSucceeds { get; set; }

        /// <summary>
        /// Enable only mirror protected branches for a mirrored project.
        /// </summary>
        [Input("onlyMirrorProtectedBranches")]
        public Input<bool>? OnlyMirrorProtectedBranches { get; set; }

        /// <summary>
        /// Enable packages repository for the project.
        /// </summary>
        [Input("packagesEnabled")]
        public Input<bool>? PackagesEnabled { get; set; }

        /// <summary>
        /// Enable pages access control. Valid values are `Public`, `Private`, `Enabled`, `Disabled`.
        /// </summary>
        [Input("pagesAccessLevel")]
        public Input<string>? PagesAccessLevel { get; set; }

        /// <summary>
        /// The path of the repository.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The path of the repository with namespace.
        /// </summary>
        [Input("pathWithNamespace")]
        public Input<string>? PathWithNamespace { get; set; }

        /// <summary>
        /// Set to `True` to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
        /// </summary>
        [Input("permanentlyDeleteOnDestroy")]
        public Input<bool>? PermanentlyDeleteOnDestroy { get; set; }

        /// <summary>
        /// Enable pipelines for the project. The `PipelinesEnabled` field is being sent as `JobsEnabled` in the GitLab API calls. Use `BuildsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("pipelinesEnabled")]
        public Input<bool>? PipelinesEnabled { get; set; }

        /// <summary>
        /// Whether Secret Push Detection is enabled. Requires GitLab Ultimate.
        /// </summary>
        [Input("preReceiveSecretDetectionEnabled")]
        public Input<bool>? PreReceiveSecretDetectionEnabled { get; set; }

        /// <summary>
        /// Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
        /// </summary>
        [Input("preventMergeWithoutJiraIssue")]
        public Input<bool>? PreventMergeWithoutJiraIssue { get; set; }

        /// <summary>
        /// Show link to create/view merge request when pushing from the command line
        /// </summary>
        [Input("printingMergeRequestLinkEnabled")]
        public Input<bool>? PrintingMergeRequestLinkEnabled { get; set; }

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Input("publicBuilds")]
        public Input<bool>? PublicBuilds { get; set; }

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Input("publicJobs")]
        public Input<bool>? PublicJobs { get; set; }

        /// <summary>
        /// Push rules for the project.
        /// </summary>
        [Input("pushRules")]
        public Input<Inputs.ProjectPushRulesGetArgs>? PushRules { get; set; }

        /// <summary>
        /// Set the releases access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("releasesAccessLevel")]
        public Input<string>? ReleasesAccessLevel { get; set; }

        /// <summary>
        /// Enable `Delete source branch` option by default for all new merge requests.
        /// </summary>
        [Input("removeSourceBranchAfterMerge")]
        public Input<bool>? RemoveSourceBranchAfterMerge { get; set; }

        /// <summary>
        /// Set the repository access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("repositoryAccessLevel")]
        public Input<string>? RepositoryAccessLevel { get; set; }

        /// <summary>
        /// Which storage shard the repository is on. (administrator only)
        /// </summary>
        [Input("repositoryStorage")]
        public Input<string>? RepositoryStorage { get; set; }

        /// <summary>
        /// Allow users to request member access.
        /// </summary>
        [Input("requestAccessEnabled")]
        public Input<bool>? RequestAccessEnabled { get; set; }

        /// <summary>
        /// Set the requirements access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("requirementsAccessLevel")]
        public Input<string>? RequirementsAccessLevel { get; set; }

        /// <summary>
        /// Automatically resolve merge request diffs discussions on lines changed with a push.
        /// </summary>
        [Input("resolveOutdatedDiffDiscussions")]
        public Input<bool>? ResolveOutdatedDiffDiscussions { get; set; }

        /// <summary>
        /// The default resource group process mode for the project.
        /// </summary>
        [Input("resourceGroupDefaultProcessMode")]
        public Input<string>? ResourceGroupDefaultProcessMode { get; set; }

        /// <summary>
        /// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline. Use `CiPipelineVariablesMinimumOverrideRole` instead. To be removed in 19.0.
        /// </summary>
        [Input("restrictUserDefinedVariables")]
        public Input<bool>? RestrictUserDefinedVariables { get; set; }

        [Input("runnersToken")]
        private Input<string>? _runnersToken;

        /// <summary>
        /// Registration token to use during runner setup.
        /// </summary>
        public Input<string>? RunnersToken
        {
            get => _runnersToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _runnersToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Set the security and compliance access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("securityAndComplianceAccessLevel")]
        public Input<string>? SecurityAndComplianceAccessLevel { get; set; }

        /// <summary>
        /// Enable shared runners for this project.
        /// </summary>
        [Input("sharedRunnersEnabled")]
        public Input<bool>? SharedRunnersEnabled { get; set; }

        /// <summary>
        /// If `True`, the default behavior to wait for the default branch protection to be created is skipped.
        /// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
        /// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
        /// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
        /// </summary>
        [Input("skipWaitForDefaultBranchProtection")]
        public Input<bool>? SkipWaitForDefaultBranchProtection { get; set; }

        /// <summary>
        /// Set the snippets access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("snippetsAccessLevel")]
        public Input<string>? SnippetsAccessLevel { get; set; }

        /// <summary>
        /// Enable snippets for the project. Use `SnippetsAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("snippetsEnabled")]
        public Input<bool>? SnippetsEnabled { get; set; }

        /// <summary>
        /// Template used to create squash commit message in merge requests.
        /// </summary>
        [Input("squashCommitTemplate")]
        public Input<string>? SquashCommitTemplate { get; set; }

        /// <summary>
        /// Squash commits when merge request is merged. Valid values are `Never` (Do not allow), `Always` (Require), `DefaultOn` (Encourage), or `DefaultOff` (Allow). The default value is `DefaultOff` (Allow).
        /// </summary>
        [Input("squashOption")]
        public Input<string>? SquashOption { get; set; }

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Input("sshUrlToRepo")]
        public Input<string>? SshUrlToRepo { get; set; }

        /// <summary>
        /// The commit message used to apply merge request suggestions.
        /// </summary>
        [Input("suggestionCommitMessage")]
        public Input<string>? SuggestionCommitMessage { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use `Topics` instead. To be removed in 19.0.
        /// </summary>
        [Obsolete(@"Use `Topics` instead. To be removed in 19.0.")]
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `TemplateProjectId`.
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `TemplateName`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
        /// </summary>
        [Input("templateProjectId")]
        public Input<int>? TemplateProjectId { get; set; }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// The list of topics for the project.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
        /// 	&gt; When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting/#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
        /// </summary>
        [Input("useCustomTemplate")]
        public Input<bool>? UseCustomTemplate { get; set; }

        /// <summary>
        /// Set to `Public` to create a public project. Valid values are `Private`, `Internal`, `Public`.
        /// </summary>
        [Input("visibilityLevel")]
        public Input<string>? VisibilityLevel { get; set; }

        /// <summary>
        /// URL that can be used to find the project in a browser.
        /// </summary>
        [Input("webUrl")]
        public Input<string>? WebUrl { get; set; }

        /// <summary>
        /// Set the wiki access level. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        [Input("wikiAccessLevel")]
        public Input<string>? WikiAccessLevel { get; set; }

        /// <summary>
        /// Enable wiki for the project. Use `WikiAccessLevel` instead. To be removed in 19.0.
        /// </summary>
        [Input("wikiEnabled")]
        public Input<bool>? WikiEnabled { get; set; }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
