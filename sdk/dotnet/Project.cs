// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new GitLab.Project("example", new()
    ///     {
    ///         Description = "My awesome codebase",
    ///         VisibilityLevel = "public",
    ///     });
    /// 
    ///     // Project with custom push rules
    ///     var example_two = new GitLab.Project("example-two", new()
    ///     {
    ///         PushRules = new GitLab.Inputs.ProjectPushRulesArgs
    ///         {
    ///             AuthorEmailRegex = "@example\\.com$",
    ///             CommitCommitterCheck = true,
    ///             MemberCheck = true,
    ///             PreventSecrets = true,
    ///         },
    ///     });
    /// 
    ///     var peterParker = GitLab.GetUser.Invoke(new()
    ///     {
    ///         Username = "peter_parker",
    ///     });
    /// 
    ///     var petersRepo = new GitLab.Project("petersRepo", new()
    ///     {
    ///         Description = "This is a description",
    ///         NamespaceId = peterParker.Apply(getUserResult =&gt; getUserResult.NamespaceId),
    ///     });
    /// 
    ///     // Fork a project
    ///     var forkProject = new GitLab.Project("forkProject", new()
    ///     {
    ///         Description = "This is a fork",
    ///         ForkedFromProjectId = example.Id,
    ///     });
    /// 
    ///     // Fork a project and setup a pull mirror
    ///     var forkIndex_projectProject = new GitLab.Project("forkIndex/projectProject", new()
    ///     {
    ///         Description = "This is a fork",
    ///         ForkedFromProjectId = example.Id,
    ///         ImportUrl = example.HttpUrlToRepo,
    ///         Mirror = true,
    ///     });
    /// 
    ///     // Create a project by importing it from a public project
    ///     var importPublic = new GitLab.Project("importPublic", new()
    ///     {
    ///         ImportUrl = "https://gitlab.example.com/repo.git",
    ///     });
    /// 
    ///     // Create a project by importing it from a public project and setup the pull mirror
    ///     var importPublicWithMirror = new GitLab.Project("importPublicWithMirror", new()
    ///     {
    ///         ImportUrl = "https://gitlab.example.com/repo.git",
    ///         Mirror = true,
    ///     });
    /// 
    ///     // Create a project by importing it from a private project
    ///     var importPrivateProject = new GitLab.Project("importPrivateProject", new()
    ///     {
    ///         ImportUrl = "https://gitlab.example.com/repo.git",
    ///         ImportUrlUsername = "user",
    ///         ImportUrlPassword = "pass",
    ///     });
    /// 
    ///     // Create a project by importing it from a private project and setup the pull mirror
    ///     var importPrivateWithMirror = new GitLab.Project("importPrivateWithMirror", new()
    ///     {
    ///         ImportUrl = "https://gitlab.example.com/repo.git",
    ///         ImportUrlUsername = "user",
    ///         ImportUrlPassword = "pass",
    ///         Mirror = true,
    ///     });
    /// 
    ///     // Create a project by importing it from a private project and provide credentials in `import_url`
    ///     // NOTE: only use this if you really must, use `import_url_username` and `import_url_password` whenever possible
    ///     //       GitLab API will always return the `import_url` without credentials, therefore you must ignore the `import_url` for changes:
    ///     var importPrivateIndex_projectProject = new GitLab.Project("importPrivateIndex/projectProject", new()
    ///     {
    ///         ImportUrl = "https://user:pass@gitlab.example.com/repo.git",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/project:Project You can import a project state using `&lt;resource&gt; &lt;id&gt;`. The
    /// ```
    /// 
    ///  `id` can be whatever the [get single project api][get_single_project] takes for its `:id` value, so for example
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/project:Project example richardc/example
    /// ```
    /// 
    ///  NOTEthe `import_url_username` and `import_url_password` cannot be imported.
    /// </summary>
    [GitLabResourceType("gitlab:index/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set to true if you want to treat skipped pipelines as if they finished with success.
        /// </summary>
        [Output("allowMergeOnSkippedPipeline")]
        public Output<bool> AllowMergeOnSkippedPipeline { get; private set; } = null!;

        /// <summary>
        /// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("analyticsAccessLevel")]
        public Output<string> AnalyticsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Number of merge request approvals required for merging. Default is 0.
        /// This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
        /// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
        /// In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
        /// </summary>
        [Output("approvalsBeforeMerge")]
        public Output<int?> ApprovalsBeforeMerge { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
        /// </summary>
        [Output("archiveOnDestroy")]
        public Output<bool?> ArchiveOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
        /// </summary>
        [Output("archived")]
        public Output<bool?> Archived { get; private set; } = null!;

        /// <summary>
        /// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
        /// </summary>
        [Output("autoCancelPendingPipelines")]
        public Output<string> AutoCancelPendingPipelines { get; private set; } = null!;

        /// <summary>
        /// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
        /// </summary>
        [Output("autoDevopsDeployStrategy")]
        public Output<string> AutoDevopsDeployStrategy { get; private set; } = null!;

        /// <summary>
        /// Enable Auto DevOps for this project.
        /// </summary>
        [Output("autoDevopsEnabled")]
        public Output<bool> AutoDevopsEnabled { get; private set; } = null!;

        /// <summary>
        /// Set whether auto-closing referenced issues on default branch.
        /// </summary>
        [Output("autocloseReferencedIssues")]
        public Output<bool> AutocloseReferencedIssues { get; private set; } = null!;

        /// <summary>
        /// A local path to the avatar image to upload. **Note**: not available for imported resources.
        /// </summary>
        [Output("avatar")]
        public Output<string?> Avatar { get; private set; } = null!;

        /// <summary>
        /// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
        /// </summary>
        [Output("avatarHash")]
        public Output<string> AvatarHash { get; private set; } = null!;

        /// <summary>
        /// The URL of the avatar image.
        /// </summary>
        [Output("avatarUrl")]
        public Output<string> AvatarUrl { get; private set; } = null!;

        /// <summary>
        /// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
        /// </summary>
        [Output("buildCoverageRegex")]
        public Output<string?> BuildCoverageRegex { get; private set; } = null!;

        /// <summary>
        /// The Git strategy. Defaults to fetch.
        /// </summary>
        [Output("buildGitStrategy")]
        public Output<string> BuildGitStrategy { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of time, in seconds, that a job can run.
        /// </summary>
        [Output("buildTimeout")]
        public Output<int> BuildTimeout { get; private set; } = null!;

        /// <summary>
        /// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("buildsAccessLevel")]
        public Output<string> BuildsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Custom Path to CI config file.
        /// </summary>
        [Output("ciConfigPath")]
        public Output<string?> CiConfigPath { get; private set; } = null!;

        /// <summary>
        /// Default number of revisions for shallow cloning.
        /// </summary>
        [Output("ciDefaultGitDepth")]
        public Output<int> CiDefaultGitDepth { get; private set; } = null!;

        /// <summary>
        /// When a new deployment job starts, skip older deployment jobs that are still pending.
        /// </summary>
        [Output("ciForwardDeploymentEnabled")]
        public Output<bool> CiForwardDeploymentEnabled { get; private set; } = null!;

        /// <summary>
        /// Use separate caches for protected branches.
        /// </summary>
        [Output("ciSeparatedCaches")]
        public Output<bool> CiSeparatedCaches { get; private set; } = null!;

        /// <summary>
        /// Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
        /// </summary>
        [Output("containerExpirationPolicy")]
        public Output<Outputs.ProjectContainerExpirationPolicy> ContainerExpirationPolicy { get; private set; } = null!;

        /// <summary>
        /// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("containerRegistryAccessLevel")]
        public Output<string> ContainerRegistryAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable container registry for the project.
        /// </summary>
        [Output("containerRegistryEnabled")]
        public Output<bool> ContainerRegistryEnabled { get; private set; } = null!;

        /// <summary>
        /// The default branch for the project.
        /// </summary>
        [Output("defaultBranch")]
        public Output<string> DefaultBranch { get; private set; } = null!;

        /// <summary>
        /// A description of the project.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Disable email notifications.
        /// </summary>
        [Output("emailsDisabled")]
        public Output<bool?> EmailsDisabled { get; private set; } = null!;

        /// <summary>
        /// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("environmentsAccessLevel")]
        public Output<string> EnvironmentsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The classification label for the project.
        /// </summary>
        [Output("externalAuthorizationClassificationLabel")]
        public Output<string?> ExternalAuthorizationClassificationLabel { get; private set; } = null!;

        /// <summary>
        /// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("featureFlagsAccessLevel")]
        public Output<string> FeatureFlagsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
        /// </summary>
        [Output("forkedFromProjectId")]
        public Output<int?> ForkedFromProjectId { get; private set; } = null!;

        /// <summary>
        /// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("forkingAccessLevel")]
        public Output<string> ForkingAccessLevel { get; private set; } = null!;

        /// <summary>
        /// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
        /// </summary>
        [Output("groupWithProjectTemplatesId")]
        public Output<int?> GroupWithProjectTemplatesId { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Output("httpUrlToRepo")]
        public Output<string> HttpUrlToRepo { get; private set; } = null!;

        /// <summary>
        /// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used
        /// together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import.
        /// Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the
        /// credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using
        /// `terraform import`. See the examples section for how to properly use it.
        /// </summary>
        [Output("importUrl")]
        public Output<string?> ImportUrl { get; private set; } = null!;

        /// <summary>
        /// The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related
        /// to the provider. This field cannot be imported using `terraform import`. See the examples section for how to properly
        /// use it.
        /// </summary>
        [Output("importUrlPassword")]
        public Output<string?> ImportUrlPassword { get; private set; } = null!;

        /// <summary>
        /// The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related
        /// to the provider. This field cannot be imported using `terraform import`. See the examples section for how to properly
        /// use it.
        /// </summary>
        [Output("importUrlUsername")]
        public Output<string?> ImportUrlUsername { get; private set; } = null!;

        /// <summary>
        /// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("infrastructureAccessLevel")]
        public Output<string> InfrastructureAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Create main branch with first commit containing a README.md file.
        /// </summary>
        [Output("initializeWithReadme")]
        public Output<bool?> InitializeWithReadme { get; private set; } = null!;

        /// <summary>
        /// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("issuesAccessLevel")]
        public Output<string> IssuesAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable issue tracking for the project.
        /// </summary>
        [Output("issuesEnabled")]
        public Output<bool> IssuesEnabled { get; private set; } = null!;

        /// <summary>
        /// Sets the template for new issues in the project.
        /// </summary>
        [Output("issuesTemplate")]
        public Output<string?> IssuesTemplate { get; private set; } = null!;

        /// <summary>
        /// Disable or enable the ability to keep the latest artifact for this project.
        /// </summary>
        [Output("keepLatestArtifact")]
        public Output<bool> KeepLatestArtifact { get; private set; } = null!;

        /// <summary>
        /// Enable LFS for the project.
        /// </summary>
        [Output("lfsEnabled")]
        public Output<bool> LfsEnabled { get; private set; } = null!;

        /// <summary>
        /// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
        /// </summary>
        [Output("mergeCommitTemplate")]
        public Output<string?> MergeCommitTemplate { get; private set; } = null!;

        /// <summary>
        /// Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
        /// </summary>
        [Output("mergeMethod")]
        public Output<string> MergeMethod { get; private set; } = null!;

        /// <summary>
        /// Enable or disable merge pipelines.
        /// </summary>
        [Output("mergePipelinesEnabled")]
        public Output<bool> MergePipelinesEnabled { get; private set; } = null!;

        /// <summary>
        /// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("mergeRequestsAccessLevel")]
        public Output<string> MergeRequestsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable merge requests for the project.
        /// </summary>
        [Output("mergeRequestsEnabled")]
        public Output<bool> MergeRequestsEnabled { get; private set; } = null!;

        /// <summary>
        /// Sets the template for new merge requests in the project.
        /// </summary>
        [Output("mergeRequestsTemplate")]
        public Output<string?> MergeRequestsTemplate { get; private set; } = null!;

        /// <summary>
        /// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
        /// </summary>
        [Output("mergeTrainsEnabled")]
        public Output<bool> MergeTrainsEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable project pull mirror.
        /// </summary>
        [Output("mirror")]
        public Output<bool?> Mirror { get; private set; } = null!;

        /// <summary>
        /// Enable overwrite diverged branches for a mirrored project.
        /// </summary>
        [Output("mirrorOverwritesDivergedBranches")]
        public Output<bool> MirrorOverwritesDivergedBranches { get; private set; } = null!;

        /// <summary>
        /// Enable trigger builds on pushes for a mirrored project.
        /// </summary>
        [Output("mirrorTriggerBuilds")]
        public Output<bool> MirrorTriggerBuilds { get; private set; } = null!;

        /// <summary>
        /// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("monitorAccessLevel")]
        public Output<string> MonitorAccessLevel { get; private set; } = null!;

        /// <summary>
        /// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
        /// </summary>
        [Output("mrDefaultTargetSelf")]
        public Output<bool?> MrDefaultTargetSelf { get; private set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace (group or user) of the project. Defaults to your user.
        /// </summary>
        [Output("namespaceId")]
        public Output<int> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// Set to true if you want allow merges only if all discussions are resolved.
        /// </summary>
        [Output("onlyAllowMergeIfAllDiscussionsAreResolved")]
        public Output<bool> OnlyAllowMergeIfAllDiscussionsAreResolved { get; private set; } = null!;

        /// <summary>
        /// Set to true if you want allow merges only if a pipeline succeeds.
        /// </summary>
        [Output("onlyAllowMergeIfPipelineSucceeds")]
        public Output<bool> OnlyAllowMergeIfPipelineSucceeds { get; private set; } = null!;

        /// <summary>
        /// Enable only mirror protected branches for a mirrored project.
        /// </summary>
        [Output("onlyMirrorProtectedBranches")]
        public Output<bool> OnlyMirrorProtectedBranches { get; private set; } = null!;

        /// <summary>
        /// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("operationsAccessLevel")]
        public Output<string> OperationsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable packages repository for the project.
        /// </summary>
        [Output("packagesEnabled")]
        public Output<bool> PackagesEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable pages access control
        /// </summary>
        [Output("pagesAccessLevel")]
        public Output<string> PagesAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The path of the repository.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// The path of the repository with namespace.
        /// </summary>
        [Output("pathWithNamespace")]
        public Output<string> PathWithNamespace { get; private set; } = null!;

        /// <summary>
        /// Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
        /// </summary>
        [Output("pipelinesEnabled")]
        public Output<bool> PipelinesEnabled { get; private set; } = null!;

        /// <summary>
        /// Show link to create/view merge request when pushing from the command line
        /// </summary>
        [Output("printingMergeRequestLinkEnabled")]
        public Output<bool> PrintingMergeRequestLinkEnabled { get; private set; } = null!;

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Output("publicBuilds")]
        public Output<bool> PublicBuilds { get; private set; } = null!;

        /// <summary>
        /// Push rules for the project.
        /// </summary>
        [Output("pushRules")]
        public Output<Outputs.ProjectPushRules> PushRules { get; private set; } = null!;

        /// <summary>
        /// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("releasesAccessLevel")]
        public Output<string> ReleasesAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable `Delete source branch` option by default for all new merge requests.
        /// </summary>
        [Output("removeSourceBranchAfterMerge")]
        public Output<bool> RemoveSourceBranchAfterMerge { get; private set; } = null!;

        /// <summary>
        /// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("repositoryAccessLevel")]
        public Output<string> RepositoryAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Which storage shard the repository is on. (administrator only)
        /// </summary>
        [Output("repositoryStorage")]
        public Output<string> RepositoryStorage { get; private set; } = null!;

        /// <summary>
        /// Allow users to request member access.
        /// </summary>
        [Output("requestAccessEnabled")]
        public Output<bool> RequestAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("requirementsAccessLevel")]
        public Output<string> RequirementsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Automatically resolve merge request diffs discussions on lines changed with a push.
        /// </summary>
        [Output("resolveOutdatedDiffDiscussions")]
        public Output<bool?> ResolveOutdatedDiffDiscussions { get; private set; } = null!;

        /// <summary>
        /// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
        /// </summary>
        [Output("restrictUserDefinedVariables")]
        public Output<bool?> RestrictUserDefinedVariables { get; private set; } = null!;

        /// <summary>
        /// Registration token to use during runner setup.
        /// </summary>
        [Output("runnersToken")]
        public Output<string> RunnersToken { get; private set; } = null!;

        /// <summary>
        /// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("securityAndComplianceAccessLevel")]
        public Output<string> SecurityAndComplianceAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable shared runners for this project.
        /// </summary>
        [Output("sharedRunnersEnabled")]
        public Output<bool> SharedRunnersEnabled { get; private set; } = null!;

        /// <summary>
        /// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
        /// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
        /// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
        /// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
        /// </summary>
        [Output("skipWaitForDefaultBranchProtection")]
        public Output<bool?> SkipWaitForDefaultBranchProtection { get; private set; } = null!;

        /// <summary>
        /// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("snippetsAccessLevel")]
        public Output<string> SnippetsAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable snippets for the project.
        /// </summary>
        [Output("snippetsEnabled")]
        public Output<bool> SnippetsEnabled { get; private set; } = null!;

        /// <summary>
        /// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
        /// </summary>
        [Output("squashCommitTemplate")]
        public Output<string?> SquashCommitTemplate { get; private set; } = null!;

        /// <summary>
        /// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab &gt;= 14.1]
        /// </summary>
        [Output("squashOption")]
        public Output<string> SquashOption { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Output("sshUrlToRepo")]
        public Output<string> SshUrlToRepo { get; private set; } = null!;

        /// <summary>
        /// The commit message used to apply merge request suggestions.
        /// </summary>
        [Output("suggestionCommitMessage")]
        public Output<string?> SuggestionCommitMessage { get; private set; } = null!;

        /// <summary>
        /// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
        /// </summary>
        [Output("templateName")]
        public Output<string?> TemplateName { get; private set; } = null!;

        /// <summary>
        /// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
        /// </summary>
        [Output("templateProjectId")]
        public Output<int?> TemplateProjectId { get; private set; } = null!;

        /// <summary>
        /// The list of topics for the project.
        /// </summary>
        [Output("topics")]
        public Output<ImmutableArray<string>> Topics { get; private set; } = null!;

        /// <summary>
        /// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
        /// 	&gt; When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting.html#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
        /// </summary>
        [Output("useCustomTemplate")]
        public Output<bool?> UseCustomTemplate { get; private set; } = null!;

        /// <summary>
        /// Set to `public` to create a public project.
        /// </summary>
        [Output("visibilityLevel")]
        public Output<string> VisibilityLevel { get; private set; } = null!;

        /// <summary>
        /// URL that can be used to find the project in a browser.
        /// </summary>
        [Output("webUrl")]
        public Output<string> WebUrl { get; private set; } = null!;

        /// <summary>
        /// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Output("wikiAccessLevel")]
        public Output<string> WikiAccessLevel { get; private set; } = null!;

        /// <summary>
        /// Enable wiki for the project.
        /// </summary>
        [Output("wikiEnabled")]
        public Output<bool> WikiEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs? args = null, CustomResourceOptions? options = null)
            : base("gitlab:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "importUrlPassword",
                    "runnersToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to true if you want to treat skipped pipelines as if they finished with success.
        /// </summary>
        [Input("allowMergeOnSkippedPipeline")]
        public Input<bool>? AllowMergeOnSkippedPipeline { get; set; }

        /// <summary>
        /// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("analyticsAccessLevel")]
        public Input<string>? AnalyticsAccessLevel { get; set; }

        /// <summary>
        /// Number of merge request approvals required for merging. Default is 0.
        /// This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
        /// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
        /// In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
        /// </summary>
        [Input("approvalsBeforeMerge")]
        public Input<int>? ApprovalsBeforeMerge { get; set; }

        /// <summary>
        /// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
        /// </summary>
        [Input("archiveOnDestroy")]
        public Input<bool>? ArchiveOnDestroy { get; set; }

        /// <summary>
        /// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
        /// </summary>
        [Input("autoCancelPendingPipelines")]
        public Input<string>? AutoCancelPendingPipelines { get; set; }

        /// <summary>
        /// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
        /// </summary>
        [Input("autoDevopsDeployStrategy")]
        public Input<string>? AutoDevopsDeployStrategy { get; set; }

        /// <summary>
        /// Enable Auto DevOps for this project.
        /// </summary>
        [Input("autoDevopsEnabled")]
        public Input<bool>? AutoDevopsEnabled { get; set; }

        /// <summary>
        /// Set whether auto-closing referenced issues on default branch.
        /// </summary>
        [Input("autocloseReferencedIssues")]
        public Input<bool>? AutocloseReferencedIssues { get; set; }

        /// <summary>
        /// A local path to the avatar image to upload. **Note**: not available for imported resources.
        /// </summary>
        [Input("avatar")]
        public Input<string>? Avatar { get; set; }

        /// <summary>
        /// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
        /// </summary>
        [Input("avatarHash")]
        public Input<string>? AvatarHash { get; set; }

        /// <summary>
        /// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
        /// </summary>
        [Input("buildCoverageRegex")]
        public Input<string>? BuildCoverageRegex { get; set; }

        /// <summary>
        /// The Git strategy. Defaults to fetch.
        /// </summary>
        [Input("buildGitStrategy")]
        public Input<string>? BuildGitStrategy { get; set; }

        /// <summary>
        /// The maximum amount of time, in seconds, that a job can run.
        /// </summary>
        [Input("buildTimeout")]
        public Input<int>? BuildTimeout { get; set; }

        /// <summary>
        /// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("buildsAccessLevel")]
        public Input<string>? BuildsAccessLevel { get; set; }

        /// <summary>
        /// Custom Path to CI config file.
        /// </summary>
        [Input("ciConfigPath")]
        public Input<string>? CiConfigPath { get; set; }

        /// <summary>
        /// Default number of revisions for shallow cloning.
        /// </summary>
        [Input("ciDefaultGitDepth")]
        public Input<int>? CiDefaultGitDepth { get; set; }

        /// <summary>
        /// When a new deployment job starts, skip older deployment jobs that are still pending.
        /// </summary>
        [Input("ciForwardDeploymentEnabled")]
        public Input<bool>? CiForwardDeploymentEnabled { get; set; }

        /// <summary>
        /// Use separate caches for protected branches.
        /// </summary>
        [Input("ciSeparatedCaches")]
        public Input<bool>? CiSeparatedCaches { get; set; }

        /// <summary>
        /// Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
        /// </summary>
        [Input("containerExpirationPolicy")]
        public Input<Inputs.ProjectContainerExpirationPolicyArgs>? ContainerExpirationPolicy { get; set; }

        /// <summary>
        /// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("containerRegistryAccessLevel")]
        public Input<string>? ContainerRegistryAccessLevel { get; set; }

        /// <summary>
        /// Enable container registry for the project.
        /// </summary>
        [Input("containerRegistryEnabled")]
        public Input<bool>? ContainerRegistryEnabled { get; set; }

        /// <summary>
        /// The default branch for the project.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// A description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Disable email notifications.
        /// </summary>
        [Input("emailsDisabled")]
        public Input<bool>? EmailsDisabled { get; set; }

        /// <summary>
        /// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("environmentsAccessLevel")]
        public Input<string>? EnvironmentsAccessLevel { get; set; }

        /// <summary>
        /// The classification label for the project.
        /// </summary>
        [Input("externalAuthorizationClassificationLabel")]
        public Input<string>? ExternalAuthorizationClassificationLabel { get; set; }

        /// <summary>
        /// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("featureFlagsAccessLevel")]
        public Input<string>? FeatureFlagsAccessLevel { get; set; }

        /// <summary>
        /// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
        /// </summary>
        [Input("forkedFromProjectId")]
        public Input<int>? ForkedFromProjectId { get; set; }

        /// <summary>
        /// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("forkingAccessLevel")]
        public Input<string>? ForkingAccessLevel { get; set; }

        /// <summary>
        /// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
        /// </summary>
        [Input("groupWithProjectTemplatesId")]
        public Input<int>? GroupWithProjectTemplatesId { get; set; }

        /// <summary>
        /// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used
        /// together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import.
        /// Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the
        /// credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using
        /// `terraform import`. See the examples section for how to properly use it.
        /// </summary>
        [Input("importUrl")]
        public Input<string>? ImportUrl { get; set; }

        [Input("importUrlPassword")]
        private Input<string>? _importUrlPassword;

        /// <summary>
        /// The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related
        /// to the provider. This field cannot be imported using `terraform import`. See the examples section for how to properly
        /// use it.
        /// </summary>
        public Input<string>? ImportUrlPassword
        {
            get => _importUrlPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _importUrlPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related
        /// to the provider. This field cannot be imported using `terraform import`. See the examples section for how to properly
        /// use it.
        /// </summary>
        [Input("importUrlUsername")]
        public Input<string>? ImportUrlUsername { get; set; }

        /// <summary>
        /// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("infrastructureAccessLevel")]
        public Input<string>? InfrastructureAccessLevel { get; set; }

        /// <summary>
        /// Create main branch with first commit containing a README.md file.
        /// </summary>
        [Input("initializeWithReadme")]
        public Input<bool>? InitializeWithReadme { get; set; }

        /// <summary>
        /// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("issuesAccessLevel")]
        public Input<string>? IssuesAccessLevel { get; set; }

        /// <summary>
        /// Enable issue tracking for the project.
        /// </summary>
        [Input("issuesEnabled")]
        public Input<bool>? IssuesEnabled { get; set; }

        /// <summary>
        /// Sets the template for new issues in the project.
        /// </summary>
        [Input("issuesTemplate")]
        public Input<string>? IssuesTemplate { get; set; }

        /// <summary>
        /// Disable or enable the ability to keep the latest artifact for this project.
        /// </summary>
        [Input("keepLatestArtifact")]
        public Input<bool>? KeepLatestArtifact { get; set; }

        /// <summary>
        /// Enable LFS for the project.
        /// </summary>
        [Input("lfsEnabled")]
        public Input<bool>? LfsEnabled { get; set; }

        /// <summary>
        /// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
        /// </summary>
        [Input("mergeCommitTemplate")]
        public Input<string>? MergeCommitTemplate { get; set; }

        /// <summary>
        /// Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
        /// </summary>
        [Input("mergeMethod")]
        public Input<string>? MergeMethod { get; set; }

        /// <summary>
        /// Enable or disable merge pipelines.
        /// </summary>
        [Input("mergePipelinesEnabled")]
        public Input<bool>? MergePipelinesEnabled { get; set; }

        /// <summary>
        /// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("mergeRequestsAccessLevel")]
        public Input<string>? MergeRequestsAccessLevel { get; set; }

        /// <summary>
        /// Enable merge requests for the project.
        /// </summary>
        [Input("mergeRequestsEnabled")]
        public Input<bool>? MergeRequestsEnabled { get; set; }

        /// <summary>
        /// Sets the template for new merge requests in the project.
        /// </summary>
        [Input("mergeRequestsTemplate")]
        public Input<string>? MergeRequestsTemplate { get; set; }

        /// <summary>
        /// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
        /// </summary>
        [Input("mergeTrainsEnabled")]
        public Input<bool>? MergeTrainsEnabled { get; set; }

        /// <summary>
        /// Enable project pull mirror.
        /// </summary>
        [Input("mirror")]
        public Input<bool>? Mirror { get; set; }

        /// <summary>
        /// Enable overwrite diverged branches for a mirrored project.
        /// </summary>
        [Input("mirrorOverwritesDivergedBranches")]
        public Input<bool>? MirrorOverwritesDivergedBranches { get; set; }

        /// <summary>
        /// Enable trigger builds on pushes for a mirrored project.
        /// </summary>
        [Input("mirrorTriggerBuilds")]
        public Input<bool>? MirrorTriggerBuilds { get; set; }

        /// <summary>
        /// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("monitorAccessLevel")]
        public Input<string>? MonitorAccessLevel { get; set; }

        /// <summary>
        /// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
        /// </summary>
        [Input("mrDefaultTargetSelf")]
        public Input<bool>? MrDefaultTargetSelf { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace (group or user) of the project. Defaults to your user.
        /// </summary>
        [Input("namespaceId")]
        public Input<int>? NamespaceId { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if all discussions are resolved.
        /// </summary>
        [Input("onlyAllowMergeIfAllDiscussionsAreResolved")]
        public Input<bool>? OnlyAllowMergeIfAllDiscussionsAreResolved { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if a pipeline succeeds.
        /// </summary>
        [Input("onlyAllowMergeIfPipelineSucceeds")]
        public Input<bool>? OnlyAllowMergeIfPipelineSucceeds { get; set; }

        /// <summary>
        /// Enable only mirror protected branches for a mirrored project.
        /// </summary>
        [Input("onlyMirrorProtectedBranches")]
        public Input<bool>? OnlyMirrorProtectedBranches { get; set; }

        /// <summary>
        /// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("operationsAccessLevel")]
        public Input<string>? OperationsAccessLevel { get; set; }

        /// <summary>
        /// Enable packages repository for the project.
        /// </summary>
        [Input("packagesEnabled")]
        public Input<bool>? PackagesEnabled { get; set; }

        /// <summary>
        /// Enable pages access control
        /// </summary>
        [Input("pagesAccessLevel")]
        public Input<string>? PagesAccessLevel { get; set; }

        /// <summary>
        /// The path of the repository.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
        /// </summary>
        [Input("pipelinesEnabled")]
        public Input<bool>? PipelinesEnabled { get; set; }

        /// <summary>
        /// Show link to create/view merge request when pushing from the command line
        /// </summary>
        [Input("printingMergeRequestLinkEnabled")]
        public Input<bool>? PrintingMergeRequestLinkEnabled { get; set; }

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Input("publicBuilds")]
        public Input<bool>? PublicBuilds { get; set; }

        /// <summary>
        /// Push rules for the project.
        /// </summary>
        [Input("pushRules")]
        public Input<Inputs.ProjectPushRulesArgs>? PushRules { get; set; }

        /// <summary>
        /// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("releasesAccessLevel")]
        public Input<string>? ReleasesAccessLevel { get; set; }

        /// <summary>
        /// Enable `Delete source branch` option by default for all new merge requests.
        /// </summary>
        [Input("removeSourceBranchAfterMerge")]
        public Input<bool>? RemoveSourceBranchAfterMerge { get; set; }

        /// <summary>
        /// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("repositoryAccessLevel")]
        public Input<string>? RepositoryAccessLevel { get; set; }

        /// <summary>
        /// Which storage shard the repository is on. (administrator only)
        /// </summary>
        [Input("repositoryStorage")]
        public Input<string>? RepositoryStorage { get; set; }

        /// <summary>
        /// Allow users to request member access.
        /// </summary>
        [Input("requestAccessEnabled")]
        public Input<bool>? RequestAccessEnabled { get; set; }

        /// <summary>
        /// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("requirementsAccessLevel")]
        public Input<string>? RequirementsAccessLevel { get; set; }

        /// <summary>
        /// Automatically resolve merge request diffs discussions on lines changed with a push.
        /// </summary>
        [Input("resolveOutdatedDiffDiscussions")]
        public Input<bool>? ResolveOutdatedDiffDiscussions { get; set; }

        /// <summary>
        /// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
        /// </summary>
        [Input("restrictUserDefinedVariables")]
        public Input<bool>? RestrictUserDefinedVariables { get; set; }

        /// <summary>
        /// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("securityAndComplianceAccessLevel")]
        public Input<string>? SecurityAndComplianceAccessLevel { get; set; }

        /// <summary>
        /// Enable shared runners for this project.
        /// </summary>
        [Input("sharedRunnersEnabled")]
        public Input<bool>? SharedRunnersEnabled { get; set; }

        /// <summary>
        /// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
        /// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
        /// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
        /// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
        /// </summary>
        [Input("skipWaitForDefaultBranchProtection")]
        public Input<bool>? SkipWaitForDefaultBranchProtection { get; set; }

        /// <summary>
        /// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("snippetsAccessLevel")]
        public Input<string>? SnippetsAccessLevel { get; set; }

        /// <summary>
        /// Enable snippets for the project.
        /// </summary>
        [Input("snippetsEnabled")]
        public Input<bool>? SnippetsEnabled { get; set; }

        /// <summary>
        /// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
        /// </summary>
        [Input("squashCommitTemplate")]
        public Input<string>? SquashCommitTemplate { get; set; }

        /// <summary>
        /// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab &gt;= 14.1]
        /// </summary>
        [Input("squashOption")]
        public Input<string>? SquashOption { get; set; }

        /// <summary>
        /// The commit message used to apply merge request suggestions.
        /// </summary>
        [Input("suggestionCommitMessage")]
        public Input<string>? SuggestionCommitMessage { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
        /// </summary>
        [Input("templateProjectId")]
        public Input<int>? TemplateProjectId { get; set; }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// The list of topics for the project.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
        /// 	&gt; When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting.html#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
        /// </summary>
        [Input("useCustomTemplate")]
        public Input<bool>? UseCustomTemplate { get; set; }

        /// <summary>
        /// Set to `public` to create a public project.
        /// </summary>
        [Input("visibilityLevel")]
        public Input<string>? VisibilityLevel { get; set; }

        /// <summary>
        /// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("wikiAccessLevel")]
        public Input<string>? WikiAccessLevel { get; set; }

        /// <summary>
        /// Enable wiki for the project.
        /// </summary>
        [Input("wikiEnabled")]
        public Input<bool>? WikiEnabled { get; set; }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to true if you want to treat skipped pipelines as if they finished with success.
        /// </summary>
        [Input("allowMergeOnSkippedPipeline")]
        public Input<bool>? AllowMergeOnSkippedPipeline { get; set; }

        /// <summary>
        /// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("analyticsAccessLevel")]
        public Input<string>? AnalyticsAccessLevel { get; set; }

        /// <summary>
        /// Number of merge request approvals required for merging. Default is 0.
        /// This field **does not** work well in combination with the `gitlab.ProjectApprovalRule` resource
        /// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
        /// In the meantime we recommend against using this attribute and use `gitlab.ProjectApprovalRule` instead.
        /// </summary>
        [Input("approvalsBeforeMerge")]
        public Input<int>? ApprovalsBeforeMerge { get; set; }

        /// <summary>
        /// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
        /// </summary>
        [Input("archiveOnDestroy")]
        public Input<bool>? ArchiveOnDestroy { get; set; }

        /// <summary>
        /// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
        /// </summary>
        [Input("autoCancelPendingPipelines")]
        public Input<string>? AutoCancelPendingPipelines { get; set; }

        /// <summary>
        /// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
        /// </summary>
        [Input("autoDevopsDeployStrategy")]
        public Input<string>? AutoDevopsDeployStrategy { get; set; }

        /// <summary>
        /// Enable Auto DevOps for this project.
        /// </summary>
        [Input("autoDevopsEnabled")]
        public Input<bool>? AutoDevopsEnabled { get; set; }

        /// <summary>
        /// Set whether auto-closing referenced issues on default branch.
        /// </summary>
        [Input("autocloseReferencedIssues")]
        public Input<bool>? AutocloseReferencedIssues { get; set; }

        /// <summary>
        /// A local path to the avatar image to upload. **Note**: not available for imported resources.
        /// </summary>
        [Input("avatar")]
        public Input<string>? Avatar { get; set; }

        /// <summary>
        /// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
        /// </summary>
        [Input("avatarHash")]
        public Input<string>? AvatarHash { get; set; }

        /// <summary>
        /// The URL of the avatar image.
        /// </summary>
        [Input("avatarUrl")]
        public Input<string>? AvatarUrl { get; set; }

        /// <summary>
        /// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
        /// </summary>
        [Input("buildCoverageRegex")]
        public Input<string>? BuildCoverageRegex { get; set; }

        /// <summary>
        /// The Git strategy. Defaults to fetch.
        /// </summary>
        [Input("buildGitStrategy")]
        public Input<string>? BuildGitStrategy { get; set; }

        /// <summary>
        /// The maximum amount of time, in seconds, that a job can run.
        /// </summary>
        [Input("buildTimeout")]
        public Input<int>? BuildTimeout { get; set; }

        /// <summary>
        /// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("buildsAccessLevel")]
        public Input<string>? BuildsAccessLevel { get; set; }

        /// <summary>
        /// Custom Path to CI config file.
        /// </summary>
        [Input("ciConfigPath")]
        public Input<string>? CiConfigPath { get; set; }

        /// <summary>
        /// Default number of revisions for shallow cloning.
        /// </summary>
        [Input("ciDefaultGitDepth")]
        public Input<int>? CiDefaultGitDepth { get; set; }

        /// <summary>
        /// When a new deployment job starts, skip older deployment jobs that are still pending.
        /// </summary>
        [Input("ciForwardDeploymentEnabled")]
        public Input<bool>? CiForwardDeploymentEnabled { get; set; }

        /// <summary>
        /// Use separate caches for protected branches.
        /// </summary>
        [Input("ciSeparatedCaches")]
        public Input<bool>? CiSeparatedCaches { get; set; }

        /// <summary>
        /// Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
        /// </summary>
        [Input("containerExpirationPolicy")]
        public Input<Inputs.ProjectContainerExpirationPolicyGetArgs>? ContainerExpirationPolicy { get; set; }

        /// <summary>
        /// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("containerRegistryAccessLevel")]
        public Input<string>? ContainerRegistryAccessLevel { get; set; }

        /// <summary>
        /// Enable container registry for the project.
        /// </summary>
        [Input("containerRegistryEnabled")]
        public Input<bool>? ContainerRegistryEnabled { get; set; }

        /// <summary>
        /// The default branch for the project.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// A description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Disable email notifications.
        /// </summary>
        [Input("emailsDisabled")]
        public Input<bool>? EmailsDisabled { get; set; }

        /// <summary>
        /// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("environmentsAccessLevel")]
        public Input<string>? EnvironmentsAccessLevel { get; set; }

        /// <summary>
        /// The classification label for the project.
        /// </summary>
        [Input("externalAuthorizationClassificationLabel")]
        public Input<string>? ExternalAuthorizationClassificationLabel { get; set; }

        /// <summary>
        /// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("featureFlagsAccessLevel")]
        public Input<string>? FeatureFlagsAccessLevel { get; set; }

        /// <summary>
        /// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
        /// </summary>
        [Input("forkedFromProjectId")]
        public Input<int>? ForkedFromProjectId { get; set; }

        /// <summary>
        /// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("forkingAccessLevel")]
        public Input<string>? ForkingAccessLevel { get; set; }

        /// <summary>
        /// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).
        /// </summary>
        [Input("groupWithProjectTemplatesId")]
        public Input<int>? GroupWithProjectTemplatesId { get; set; }

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Input("httpUrlToRepo")]
        public Input<string>? HttpUrlToRepo { get; set; }

        /// <summary>
        /// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used
        /// together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import.
        /// Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the
        /// credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using
        /// `terraform import`. See the examples section for how to properly use it.
        /// </summary>
        [Input("importUrl")]
        public Input<string>? ImportUrl { get; set; }

        [Input("importUrlPassword")]
        private Input<string>? _importUrlPassword;

        /// <summary>
        /// The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related
        /// to the provider. This field cannot be imported using `terraform import`. See the examples section for how to properly
        /// use it.
        /// </summary>
        public Input<string>? ImportUrlPassword
        {
            get => _importUrlPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _importUrlPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related
        /// to the provider. This field cannot be imported using `terraform import`. See the examples section for how to properly
        /// use it.
        /// </summary>
        [Input("importUrlUsername")]
        public Input<string>? ImportUrlUsername { get; set; }

        /// <summary>
        /// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("infrastructureAccessLevel")]
        public Input<string>? InfrastructureAccessLevel { get; set; }

        /// <summary>
        /// Create main branch with first commit containing a README.md file.
        /// </summary>
        [Input("initializeWithReadme")]
        public Input<bool>? InitializeWithReadme { get; set; }

        /// <summary>
        /// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("issuesAccessLevel")]
        public Input<string>? IssuesAccessLevel { get; set; }

        /// <summary>
        /// Enable issue tracking for the project.
        /// </summary>
        [Input("issuesEnabled")]
        public Input<bool>? IssuesEnabled { get; set; }

        /// <summary>
        /// Sets the template for new issues in the project.
        /// </summary>
        [Input("issuesTemplate")]
        public Input<string>? IssuesTemplate { get; set; }

        /// <summary>
        /// Disable or enable the ability to keep the latest artifact for this project.
        /// </summary>
        [Input("keepLatestArtifact")]
        public Input<bool>? KeepLatestArtifact { get; set; }

        /// <summary>
        /// Enable LFS for the project.
        /// </summary>
        [Input("lfsEnabled")]
        public Input<bool>? LfsEnabled { get; set; }

        /// <summary>
        /// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
        /// </summary>
        [Input("mergeCommitTemplate")]
        public Input<string>? MergeCommitTemplate { get; set; }

        /// <summary>
        /// Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
        /// </summary>
        [Input("mergeMethod")]
        public Input<string>? MergeMethod { get; set; }

        /// <summary>
        /// Enable or disable merge pipelines.
        /// </summary>
        [Input("mergePipelinesEnabled")]
        public Input<bool>? MergePipelinesEnabled { get; set; }

        /// <summary>
        /// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("mergeRequestsAccessLevel")]
        public Input<string>? MergeRequestsAccessLevel { get; set; }

        /// <summary>
        /// Enable merge requests for the project.
        /// </summary>
        [Input("mergeRequestsEnabled")]
        public Input<bool>? MergeRequestsEnabled { get; set; }

        /// <summary>
        /// Sets the template for new merge requests in the project.
        /// </summary>
        [Input("mergeRequestsTemplate")]
        public Input<string>? MergeRequestsTemplate { get; set; }

        /// <summary>
        /// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
        /// </summary>
        [Input("mergeTrainsEnabled")]
        public Input<bool>? MergeTrainsEnabled { get; set; }

        /// <summary>
        /// Enable project pull mirror.
        /// </summary>
        [Input("mirror")]
        public Input<bool>? Mirror { get; set; }

        /// <summary>
        /// Enable overwrite diverged branches for a mirrored project.
        /// </summary>
        [Input("mirrorOverwritesDivergedBranches")]
        public Input<bool>? MirrorOverwritesDivergedBranches { get; set; }

        /// <summary>
        /// Enable trigger builds on pushes for a mirrored project.
        /// </summary>
        [Input("mirrorTriggerBuilds")]
        public Input<bool>? MirrorTriggerBuilds { get; set; }

        /// <summary>
        /// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("monitorAccessLevel")]
        public Input<string>? MonitorAccessLevel { get; set; }

        /// <summary>
        /// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
        /// </summary>
        [Input("mrDefaultTargetSelf")]
        public Input<bool>? MrDefaultTargetSelf { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace (group or user) of the project. Defaults to your user.
        /// </summary>
        [Input("namespaceId")]
        public Input<int>? NamespaceId { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if all discussions are resolved.
        /// </summary>
        [Input("onlyAllowMergeIfAllDiscussionsAreResolved")]
        public Input<bool>? OnlyAllowMergeIfAllDiscussionsAreResolved { get; set; }

        /// <summary>
        /// Set to true if you want allow merges only if a pipeline succeeds.
        /// </summary>
        [Input("onlyAllowMergeIfPipelineSucceeds")]
        public Input<bool>? OnlyAllowMergeIfPipelineSucceeds { get; set; }

        /// <summary>
        /// Enable only mirror protected branches for a mirrored project.
        /// </summary>
        [Input("onlyMirrorProtectedBranches")]
        public Input<bool>? OnlyMirrorProtectedBranches { get; set; }

        /// <summary>
        /// Set the operations access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("operationsAccessLevel")]
        public Input<string>? OperationsAccessLevel { get; set; }

        /// <summary>
        /// Enable packages repository for the project.
        /// </summary>
        [Input("packagesEnabled")]
        public Input<bool>? PackagesEnabled { get; set; }

        /// <summary>
        /// Enable pages access control
        /// </summary>
        [Input("pagesAccessLevel")]
        public Input<string>? PagesAccessLevel { get; set; }

        /// <summary>
        /// The path of the repository.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The path of the repository with namespace.
        /// </summary>
        [Input("pathWithNamespace")]
        public Input<string>? PathWithNamespace { get; set; }

        /// <summary>
        /// Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
        /// </summary>
        [Input("pipelinesEnabled")]
        public Input<bool>? PipelinesEnabled { get; set; }

        /// <summary>
        /// Show link to create/view merge request when pushing from the command line
        /// </summary>
        [Input("printingMergeRequestLinkEnabled")]
        public Input<bool>? PrintingMergeRequestLinkEnabled { get; set; }

        /// <summary>
        /// If true, jobs can be viewed by non-project members.
        /// </summary>
        [Input("publicBuilds")]
        public Input<bool>? PublicBuilds { get; set; }

        /// <summary>
        /// Push rules for the project.
        /// </summary>
        [Input("pushRules")]
        public Input<Inputs.ProjectPushRulesGetArgs>? PushRules { get; set; }

        /// <summary>
        /// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("releasesAccessLevel")]
        public Input<string>? ReleasesAccessLevel { get; set; }

        /// <summary>
        /// Enable `Delete source branch` option by default for all new merge requests.
        /// </summary>
        [Input("removeSourceBranchAfterMerge")]
        public Input<bool>? RemoveSourceBranchAfterMerge { get; set; }

        /// <summary>
        /// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("repositoryAccessLevel")]
        public Input<string>? RepositoryAccessLevel { get; set; }

        /// <summary>
        /// Which storage shard the repository is on. (administrator only)
        /// </summary>
        [Input("repositoryStorage")]
        public Input<string>? RepositoryStorage { get; set; }

        /// <summary>
        /// Allow users to request member access.
        /// </summary>
        [Input("requestAccessEnabled")]
        public Input<bool>? RequestAccessEnabled { get; set; }

        /// <summary>
        /// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("requirementsAccessLevel")]
        public Input<string>? RequirementsAccessLevel { get; set; }

        /// <summary>
        /// Automatically resolve merge request diffs discussions on lines changed with a push.
        /// </summary>
        [Input("resolveOutdatedDiffDiscussions")]
        public Input<bool>? ResolveOutdatedDiffDiscussions { get; set; }

        /// <summary>
        /// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
        /// </summary>
        [Input("restrictUserDefinedVariables")]
        public Input<bool>? RestrictUserDefinedVariables { get; set; }

        [Input("runnersToken")]
        private Input<string>? _runnersToken;

        /// <summary>
        /// Registration token to use during runner setup.
        /// </summary>
        public Input<string>? RunnersToken
        {
            get => _runnersToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _runnersToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("securityAndComplianceAccessLevel")]
        public Input<string>? SecurityAndComplianceAccessLevel { get; set; }

        /// <summary>
        /// Enable shared runners for this project.
        /// </summary>
        [Input("sharedRunnersEnabled")]
        public Input<bool>? SharedRunnersEnabled { get; set; }

        /// <summary>
        /// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
        /// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
        /// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
        /// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
        /// </summary>
        [Input("skipWaitForDefaultBranchProtection")]
        public Input<bool>? SkipWaitForDefaultBranchProtection { get; set; }

        /// <summary>
        /// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("snippetsAccessLevel")]
        public Input<string>? SnippetsAccessLevel { get; set; }

        /// <summary>
        /// Enable snippets for the project.
        /// </summary>
        [Input("snippetsEnabled")]
        public Input<bool>? SnippetsEnabled { get; set; }

        /// <summary>
        /// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
        /// </summary>
        [Input("squashCommitTemplate")]
        public Input<string>? SquashCommitTemplate { get; set; }

        /// <summary>
        /// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab &gt;= 14.1]
        /// </summary>
        [Input("squashOption")]
        public Input<string>? SquashOption { get; set; }

        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// </summary>
        [Input("sshUrlToRepo")]
        public Input<string>? SshUrlToRepo { get; set; }

        /// <summary>
        /// The commit message used to apply merge request suggestions.
        /// </summary>
        [Input("suggestionCommitMessage")]
        public Input<string>? SuggestionCommitMessage { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab.GroupProjectFileTemplate` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
        /// </summary>
        [Input("templateProjectId")]
        public Input<int>? TemplateProjectId { get; set; }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// The list of topics for the project.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).
        /// 	&gt; When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting.html#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
        /// </summary>
        [Input("useCustomTemplate")]
        public Input<bool>? UseCustomTemplate { get; set; }

        /// <summary>
        /// Set to `public` to create a public project.
        /// </summary>
        [Input("visibilityLevel")]
        public Input<string>? VisibilityLevel { get; set; }

        /// <summary>
        /// URL that can be used to find the project in a browser.
        /// </summary>
        [Input("webUrl")]
        public Input<string>? WebUrl { get; set; }

        /// <summary>
        /// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        [Input("wikiAccessLevel")]
        public Input<string>? WikiAccessLevel { get; set; }

        /// <summary>
        /// Enable wiki for the project.
        /// </summary>
        [Input("wikiEnabled")]
        public Input<bool>? WikiEnabled { get; set; }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
