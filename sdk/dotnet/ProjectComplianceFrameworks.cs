// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectComplianceFrameworks` resource allows to manage the lifecycle of compliance frameworks on a project.
    /// 
    /// &gt; This resource requires a GitLab Enterprise instance with a Premium license to set the compliance frameworks on a project.
    /// 
    /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/#mutationprojectupdatecomplianceframeworks)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alpha = new GitLab.ComplianceFramework("alpha", new()
    ///     {
    ///         NamespacePath = "top-level-group",
    ///         Name = "HIPAA",
    ///         Description = "A HIPAA Compliance Framework",
    ///         Color = "#87BEEF",
    ///         Default = false,
    ///     });
    /// 
    ///     var beta = new GitLab.ComplianceFramework("beta", new()
    ///     {
    ///         NamespacePath = "top-level-group",
    ///         Name = "SOC",
    ///         Description = "A SOC Compliance Framework",
    ///         Color = "#223344",
    ///         Default = false,
    ///     });
    /// 
    ///     var sample = new GitLab.ProjectComplianceFrameworks("sample", new()
    ///     {
    ///         ComplianceFrameworkIds = new[]
    ///         {
    ///             alpha.FrameworkId,
    ///             beta.FrameworkId,
    ///         },
    ///         Project = "12345678",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_compliance_frameworks`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_compliance_frameworks.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// Gitlab project compliance frameworks can be imported with a key composed of `&lt;project_id&gt;`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectComplianceFrameworks:ProjectComplianceFrameworks sample "42"
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectComplianceFrameworks:ProjectComplianceFrameworks")]
    public partial class ProjectComplianceFrameworks : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Globally unique IDs of the compliance frameworks to assign to the project.
        /// </summary>
        [Output("complianceFrameworkIds")]
        public Output<ImmutableArray<string>> ComplianceFrameworkIds { get; private set; } = null!;

        /// <summary>
        /// The ID or full path of the project to change the compliance frameworks of.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectComplianceFrameworks resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectComplianceFrameworks(string name, ProjectComplianceFrameworksArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectComplianceFrameworks:ProjectComplianceFrameworks", name, args ?? new ProjectComplianceFrameworksArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectComplianceFrameworks(string name, Input<string> id, ProjectComplianceFrameworksState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectComplianceFrameworks:ProjectComplianceFrameworks", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectComplianceFrameworks resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectComplianceFrameworks Get(string name, Input<string> id, ProjectComplianceFrameworksState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectComplianceFrameworks(name, id, state, options);
        }
    }

    public sealed class ProjectComplianceFrameworksArgs : global::Pulumi.ResourceArgs
    {
        [Input("complianceFrameworkIds", required: true)]
        private InputList<string>? _complianceFrameworkIds;

        /// <summary>
        /// Globally unique IDs of the compliance frameworks to assign to the project.
        /// </summary>
        public InputList<string> ComplianceFrameworkIds
        {
            get => _complianceFrameworkIds ?? (_complianceFrameworkIds = new InputList<string>());
            set => _complianceFrameworkIds = value;
        }

        /// <summary>
        /// The ID or full path of the project to change the compliance frameworks of.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public ProjectComplianceFrameworksArgs()
        {
        }
        public static new ProjectComplianceFrameworksArgs Empty => new ProjectComplianceFrameworksArgs();
    }

    public sealed class ProjectComplianceFrameworksState : global::Pulumi.ResourceArgs
    {
        [Input("complianceFrameworkIds")]
        private InputList<string>? _complianceFrameworkIds;

        /// <summary>
        /// Globally unique IDs of the compliance frameworks to assign to the project.
        /// </summary>
        public InputList<string> ComplianceFrameworkIds
        {
            get => _complianceFrameworkIds ?? (_complianceFrameworkIds = new InputList<string>());
            set => _complianceFrameworkIds = value;
        }

        /// <summary>
        /// The ID or full path of the project to change the compliance frameworks of.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ProjectComplianceFrameworksState()
        {
        }
        public static new ProjectComplianceFrameworksState Empty => new ProjectComplianceFrameworksState();
    }
}
