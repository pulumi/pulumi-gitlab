// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectDeployToken` resource allows you to manage the lifecycle of deploy tokens on a project.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/deploy_tokens/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example Usage
    ///     var example = new GitLab.ProjectDeployToken("example", new()
    ///     {
    ///         Project = "example/deploying",
    ///         Name = "Example project deploy token",
    ///         Username = "example-username",
    ///         ExpiresAt = "2020-03-14T00:00:00.000Z",
    ///         Scopes = new[]
    ///         {
    ///             "read_repository",
    ///             "read_registry",
    ///         },
    ///     });
    /// 
    ///     var example_two = new GitLab.ProjectDeployToken("example-two", new()
    ///     {
    ///         Project = "12345678",
    ///         Name = "Example project deploy token expires in 24h",
    ///         ExpiresAt = Std.Timestamp.Invoke().Apply(invoke =&gt; Std.Timeadd.Invoke(new()
    ///         {
    ///             Duration = invoke.Result,
    ///             Timestamp = "24h",
    ///         })).Apply(invoke =&gt; invoke.Result),
    ///         Scopes = new[]
    ///         {
    ///             "read_repository",
    ///             "read_registry",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_deploy_token`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_deploy_token.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// GitLab project deploy tokens can be imported using an id made up of `{project_id}:{deploy_token_id}`.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectDeployToken:ProjectDeployToken project_token 1:4
    /// ```
    /// 
    /// Note: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    /// </summary>
    [GitLabResourceType("gitlab:index/projectDeployToken:ProjectDeployToken")]
    public partial class ProjectDeployToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// True if the token is expired.
        /// </summary>
        [Output("expired")]
        public Output<bool> Expired { get; private set; } = null!;

        /// <summary>
        /// Time the token expires in RFC3339 format. Not set by default.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// A name to describe the deploy token with.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Id or full path of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// True if the token is revoked.
        /// </summary>
        [Output("revoked")]
        public Output<bool> Revoked { get; private set; } = null!;

        /// <summary>
        /// The scopes of the project deploy token. Valid values are: `ReadRepository`, `ReadRegistry`, `WriteRegistry`, `ReadVirtualRegistry`, `WriteVirtualRegistry`, `ReadPackageRegistry`, `WritePackageRegistry`
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectDeployToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectDeployToken(string name, ProjectDeployTokenArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectDeployToken:ProjectDeployToken", name, args ?? new ProjectDeployTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectDeployToken(string name, Input<string> id, ProjectDeployTokenState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectDeployToken:ProjectDeployToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectDeployToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectDeployToken Get(string name, Input<string> id, ProjectDeployTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectDeployToken(name, id, state, options);
        }
    }

    public sealed class ProjectDeployTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time the token expires in RFC3339 format. Not set by default.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// A name to describe the deploy token with.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Id or full path of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// The scopes of the project deploy token. Valid values are: `ReadRepository`, `ReadRegistry`, `WriteRegistry`, `ReadVirtualRegistry`, `WriteVirtualRegistry`, `ReadPackageRegistry`, `WritePackageRegistry`
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProjectDeployTokenArgs()
        {
        }
        public static new ProjectDeployTokenArgs Empty => new ProjectDeployTokenArgs();
    }

    public sealed class ProjectDeployTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// True if the token is expired.
        /// </summary>
        [Input("expired")]
        public Input<bool>? Expired { get; set; }

        /// <summary>
        /// Time the token expires in RFC3339 format. Not set by default.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// A name to describe the deploy token with.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Id or full path of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// True if the token is revoked.
        /// </summary>
        [Input("revoked")]
        public Input<bool>? Revoked { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// The scopes of the project deploy token. Valid values are: `ReadRepository`, `ReadRegistry`, `WriteRegistry`, `ReadVirtualRegistry`, `WriteVirtualRegistry`, `ReadPackageRegistry`, `WritePackageRegistry`
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A username for the deploy token. Default is `gitlab+deploy-token-{n}`.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProjectDeployTokenState()
        {
        }
        public static new ProjectDeployTokenState Empty => new ProjectDeployTokenState();
    }
}
