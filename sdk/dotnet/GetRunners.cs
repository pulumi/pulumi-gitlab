// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetRunners
    {
        /// <summary>
        /// The `gitlab.getRunners` data source retrieves information about all gitlab runners.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var thisUserRunner = new GitLab.UserRunner("this", new()
        ///     {
        ///         RunnerType = "instance_type",
        ///         TagLists = new[]
        ///         {
        ///             "tag1",
        ///             "tag2",
        ///         },
        ///     });
        /// 
        ///     var @this = GitLab.GetRunners.Invoke(new()
        ///     {
        ///         Paused = false,
        ///         Status = "online",
        ///         TagLists = new[]
        ///         {
        ///             "tag1",
        ///             "tag2",
        ///         },
        ///         Type = "instance_type",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRunnersResult> InvokeAsync(GetRunnersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRunnersResult>("gitlab:index/getRunners:getRunners", args ?? new GetRunnersArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getRunners` data source retrieves information about all gitlab runners.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var thisUserRunner = new GitLab.UserRunner("this", new()
        ///     {
        ///         RunnerType = "instance_type",
        ///         TagLists = new[]
        ///         {
        ///             "tag1",
        ///             "tag2",
        ///         },
        ///     });
        /// 
        ///     var @this = GitLab.GetRunners.Invoke(new()
        ///     {
        ///         Paused = false,
        ///         Status = "online",
        ///         TagLists = new[]
        ///         {
        ///             "tag1",
        ///             "tag2",
        ///         },
        ///         Type = "instance_type",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRunnersResult> Invoke(GetRunnersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunnersResult>("gitlab:index/getRunners:getRunners", args ?? new GetRunnersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getRunners` data source retrieves information about all gitlab runners.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/runners/#list-all-runners)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var thisUserRunner = new GitLab.UserRunner("this", new()
        ///     {
        ///         RunnerType = "instance_type",
        ///         TagLists = new[]
        ///         {
        ///             "tag1",
        ///             "tag2",
        ///         },
        ///     });
        /// 
        ///     var @this = GitLab.GetRunners.Invoke(new()
        ///     {
        ///         Paused = false,
        ///         Status = "online",
        ///         TagLists = new[]
        ///         {
        ///             "tag1",
        ///             "tag2",
        ///         },
        ///         Type = "instance_type",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRunnersResult> Invoke(GetRunnersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunnersResult>("gitlab:index/getRunners:getRunners", args ?? new GetRunnersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRunnersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for runners with the given paused value
        /// </summary>
        [Input("paused")]
        public bool? Paused { get; set; }

        /// <summary>
        /// Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `never_contacted`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tagLists")]
        private List<string>? _tagLists;

        /// <summary>
        /// Filters for runners with all of the given tags
        /// </summary>
        public List<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new List<string>());
            set => _tagLists = value;
        }

        /// <summary>
        /// The type of runner to return. Valid values are `instance_type`, `group_type` and `project_type`
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRunnersArgs()
        {
        }
        public static new GetRunnersArgs Empty => new GetRunnersArgs();
    }

    public sealed class GetRunnersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for runners with the given paused value
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `never_contacted`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Filters for runners with all of the given tags
        /// </summary>
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        /// <summary>
        /// The type of runner to return. Valid values are `instance_type`, `group_type` and `project_type`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRunnersInvokeArgs()
        {
        }
        public static new GetRunnersInvokeArgs Empty => new GetRunnersInvokeArgs();
    }


    [OutputType]
    public sealed class GetRunnersResult
    {
        public readonly string Id;
        /// <summary>
        /// Filters for runners with the given paused value
        /// </summary>
        public readonly bool? Paused;
        /// <summary>
        /// The list of runners.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRunnersRunnerResult> Runners;
        /// <summary>
        /// Filters for runners with the given status. Valid Values are `online`, `offline`, `stale`, and `never_contacted`.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Filters for runners with all of the given tags
        /// </summary>
        public readonly ImmutableArray<string> TagLists;
        /// <summary>
        /// The type of runner to return. Valid values are `instance_type`, `group_type` and `project_type`
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetRunnersResult(
            string id,

            bool? paused,

            ImmutableArray<Outputs.GetRunnersRunnerResult> runners,

            string? status,

            ImmutableArray<string> tagLists,

            string? type)
        {
            Id = id;
            Paused = paused;
            Runners = runners;
            Status = status;
            TagLists = tagLists;
            Type = type;
        }
    }
}
