// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectMilestone` resource allows to manage the lifecycle of a project milestone.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a project for the milestone to use
    ///     var exampleProject = new GitLab.Project("exampleProject", new()
    ///     {
    ///         Description = "An example project",
    ///         NamespaceId = gitlab_group.Example.Id,
    ///     });
    /// 
    ///     var exampleProjectMilestone = new GitLab.ProjectMilestone("exampleProjectMilestone", new()
    ///     {
    ///         Project = exampleProject.Id,
    ///         Title = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Gitlab project milestone can be imported with a key composed of `&lt;project&gt;:&lt;milestone_id&gt;`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/projectMilestone:ProjectMilestone example "12345:11"
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectMilestone:ProjectMilestone")]
    public partial class ProjectMilestone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the milestone.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
        /// </summary>
        [Output("dueDate")]
        public Output<string?> DueDate { get; private set; } = null!;

        /// <summary>
        /// Bool, true if milestore expired.
        /// </summary>
        [Output("expired")]
        public Output<bool> Expired { get; private set; } = null!;

        /// <summary>
        /// The ID of the project's milestone.
        /// </summary>
        [Output("iid")]
        public Output<int> Iid { get; private set; } = null!;

        /// <summary>
        /// The instance-wide ID of the project’s milestone.
        /// </summary>
        [Output("milestoneId")]
        public Output<int> MilestoneId { get; private set; } = null!;

        /// <summary>
        /// The ID or URL-encoded path of the project owned by the authenticated user.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The project ID of milestone.
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
        /// </summary>
        [Output("startDate")]
        public Output<string?> StartDate { get; private set; } = null!;

        /// <summary>
        /// The state of the milestone. Valid values are: `active`, `closed`.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// The title of a milestone.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The web URL of the milestone.
        /// </summary>
        [Output("webUrl")]
        public Output<string> WebUrl { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectMilestone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectMilestone(string name, ProjectMilestoneArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectMilestone:ProjectMilestone", name, args ?? new ProjectMilestoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectMilestone(string name, Input<string> id, ProjectMilestoneState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectMilestone:ProjectMilestone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectMilestone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectMilestone Get(string name, Input<string> id, ProjectMilestoneState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectMilestone(name, id, state, options);
        }
    }

    public sealed class ProjectMilestoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the milestone.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
        /// </summary>
        [Input("dueDate")]
        public Input<string>? DueDate { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the project owned by the authenticated user.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The state of the milestone. Valid values are: `active`, `closed`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The title of a milestone.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public ProjectMilestoneArgs()
        {
        }
        public static new ProjectMilestoneArgs Empty => new ProjectMilestoneArgs();
    }

    public sealed class ProjectMilestoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the milestone.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
        /// </summary>
        [Input("dueDate")]
        public Input<string>? DueDate { get; set; }

        /// <summary>
        /// Bool, true if milestore expired.
        /// </summary>
        [Input("expired")]
        public Input<bool>? Expired { get; set; }

        /// <summary>
        /// The ID of the project's milestone.
        /// </summary>
        [Input("iid")]
        public Input<int>? Iid { get; set; }

        /// <summary>
        /// The instance-wide ID of the project’s milestone.
        /// </summary>
        [Input("milestoneId")]
        public Input<int>? MilestoneId { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the project owned by the authenticated user.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The project ID of milestone.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The state of the milestone. Valid values are: `active`, `closed`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The title of a milestone.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The web URL of the milestone.
        /// </summary>
        [Input("webUrl")]
        public Input<string>? WebUrl { get; set; }

        public ProjectMilestoneState()
        {
        }
        public static new ProjectMilestoneState Empty => new ProjectMilestoneState();
    }
}
