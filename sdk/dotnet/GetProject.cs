// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static partial class Invokes
    {
        /// <summary>
        /// Provides details about a specific project in the gitlab provider. The results include the name of the project, path, description, default branch, etc.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/d/project.html.markdown.
        /// </summary>
        public static Task<GetProjectResult> GetProject(GetProjectArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("gitlab:index/getProject:getProject", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetProjectArgs : Pulumi.ResourceArgs
    {
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("httpUrlToRepo")]
        public Input<string>? HttpUrlToRepo { get; set; }

        /// <summary>
        /// The integer that uniquely identifies the project within the gitlab install.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        [Input("issuesEnabled")]
        public Input<bool>? IssuesEnabled { get; set; }

        [Input("lfsEnabled")]
        public Input<bool>? LfsEnabled { get; set; }

        [Input("mergeRequestsEnabled")]
        public Input<bool>? MergeRequestsEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaceId")]
        public Input<int>? NamespaceId { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("pipelinesEnabled")]
        public Input<bool>? PipelinesEnabled { get; set; }

        [Input("requestAccessEnabled")]
        public Input<bool>? RequestAccessEnabled { get; set; }

        [Input("runnersToken")]
        public Input<string>? RunnersToken { get; set; }

        [Input("snippetsEnabled")]
        public Input<bool>? SnippetsEnabled { get; set; }

        [Input("sshUrlToRepo")]
        public Input<string>? SshUrlToRepo { get; set; }

        [Input("visibilityLevel")]
        public Input<string>? VisibilityLevel { get; set; }

        [Input("webUrl")]
        public Input<string>? WebUrl { get; set; }

        [Input("wikiEnabled")]
        public Input<bool>? WikiEnabled { get; set; }

        public GetProjectArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetProjectResult
    {
        /// <summary>
        /// Whether the project is in read-only mode (archived).
        /// </summary>
        public readonly bool Archived;
        /// <summary>
        /// The default branch for the project.
        /// </summary>
        public readonly string DefaultBranch;
        /// <summary>
        /// A description of the project.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// repository via HTTP.
        /// </summary>
        public readonly string HttpUrlToRepo;
        /// <summary>
        /// Integer that uniquely identifies the project within the gitlab install.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// Enable issue tracking for the project.
        /// </summary>
        public readonly bool IssuesEnabled;
        /// <summary>
        /// Enable LFS for the project.
        /// </summary>
        public readonly bool LfsEnabled;
        /// <summary>
        /// Enable merge requests for the project.
        /// </summary>
        public readonly bool MergeRequestsEnabled;
        public readonly string Name;
        /// <summary>
        /// The namespace (group or user) of the project. Defaults to your user.
        /// See `gitlab..Group` for an example.
        /// </summary>
        public readonly int NamespaceId;
        /// <summary>
        /// The path of the repository.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Enable pipelines for the project.
        /// </summary>
        public readonly bool PipelinesEnabled;
        /// <summary>
        /// Allow users to request member access.
        /// </summary>
        public readonly bool RequestAccessEnabled;
        /// <summary>
        /// Registration token to use during runner setup.
        /// </summary>
        public readonly string RunnersToken;
        /// <summary>
        /// Enable snippets for the project.
        /// </summary>
        public readonly bool SnippetsEnabled;
        /// <summary>
        /// URL that can be provided to `git clone` to clone the
        /// repository via SSH.
        /// </summary>
        public readonly string SshUrlToRepo;
        /// <summary>
        /// Repositories are created as private by default.
        /// </summary>
        public readonly string VisibilityLevel;
        /// <summary>
        /// URL that can be used to find the project in a browser.
        /// </summary>
        public readonly string WebUrl;
        /// <summary>
        /// Enable wiki for the project.
        /// </summary>
        public readonly bool WikiEnabled;

        [OutputConstructor]
        private GetProjectResult(
            bool archived,
            string defaultBranch,
            string description,
            string httpUrlToRepo,
            int id,
            bool issuesEnabled,
            bool lfsEnabled,
            bool mergeRequestsEnabled,
            string name,
            int namespaceId,
            string path,
            bool pipelinesEnabled,
            bool requestAccessEnabled,
            string runnersToken,
            bool snippetsEnabled,
            string sshUrlToRepo,
            string visibilityLevel,
            string webUrl,
            bool wikiEnabled)
        {
            Archived = archived;
            DefaultBranch = defaultBranch;
            Description = description;
            HttpUrlToRepo = httpUrlToRepo;
            Id = id;
            IssuesEnabled = issuesEnabled;
            LfsEnabled = lfsEnabled;
            MergeRequestsEnabled = mergeRequestsEnabled;
            Name = name;
            NamespaceId = namespaceId;
            Path = path;
            PipelinesEnabled = pipelinesEnabled;
            RequestAccessEnabled = requestAccessEnabled;
            RunnersToken = runnersToken;
            SnippetsEnabled = snippetsEnabled;
            SshUrlToRepo = sshUrlToRepo;
            VisibilityLevel = visibilityLevel;
            WebUrl = webUrl;
            WikiEnabled = wikiEnabled;
        }
    }
}
