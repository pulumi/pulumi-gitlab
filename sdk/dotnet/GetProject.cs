// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProject
    {
        /// <summary>
        /// The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs
        ///         {
        ///             Id = "foo/bar/baz",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectResult> InvokeAsync(GetProjectArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("gitlab:index/getProject:getProject", args ?? new GetProjectArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs
        ///         {
        ///             Id = "foo/bar/baz",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProjectResult> Invoke(GetProjectInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetProjectResult>("gitlab:index/getProject:getProject", args ?? new GetProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("pathWithNamespace")]
        public string? PathWithNamespace { get; set; }

        [Input("publicBuilds")]
        public bool? PublicBuilds { get; set; }

        public GetProjectArgs()
        {
        }
    }

    public sealed class GetProjectInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("pathWithNamespace")]
        public Input<string>? PathWithNamespace { get; set; }

        [Input("publicBuilds")]
        public Input<bool>? PublicBuilds { get; set; }

        public GetProjectInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectResult
    {
        public readonly string AnalyticsAccessLevel;
        public readonly bool Archived;
        public readonly string AutoCancelPendingPipelines;
        public readonly string AutoDevopsDeployStrategy;
        public readonly bool AutoDevopsEnabled;
        public readonly bool AutocloseReferencedIssues;
        public readonly string BuildGitStrategy;
        public readonly int BuildTimeout;
        public readonly string BuildsAccessLevel;
        public readonly ImmutableArray<Outputs.GetProjectContainerExpirationPolicyResult> ContainerExpirationPolicies;
        public readonly string ContainerRegistryAccessLevel;
        public readonly string DefaultBranch;
        public readonly string Description;
        public readonly bool EmailsDisabled;
        public readonly string ExternalAuthorizationClassificationLabel;
        public readonly string ForkingAccessLevel;
        public readonly string HttpUrlToRepo;
        public readonly string Id;
        public readonly string IssuesAccessLevel;
        public readonly bool IssuesEnabled;
        public readonly bool LfsEnabled;
        public readonly string MergeCommitTemplate;
        public readonly bool MergePipelinesEnabled;
        public readonly string MergeRequestsAccessLevel;
        public readonly bool MergeRequestsEnabled;
        public readonly bool MergeTrainsEnabled;
        public readonly string Name;
        public readonly int NamespaceId;
        public readonly string OperationsAccessLevel;
        public readonly string Path;
        public readonly string PathWithNamespace;
        public readonly bool PipelinesEnabled;
        public readonly bool PrintingMergeRequestLinkEnabled;
        public readonly bool? PublicBuilds;
        public readonly Outputs.GetProjectPushRulesResult PushRules;
        public readonly bool RemoveSourceBranchAfterMerge;
        public readonly string RepositoryAccessLevel;
        public readonly string RepositoryStorage;
        public readonly bool RequestAccessEnabled;
        public readonly string RequirementsAccessLevel;
        public readonly bool ResolveOutdatedDiffDiscussions;
        public readonly string RunnersToken;
        public readonly string SecurityAndComplianceAccessLevel;
        public readonly string SnippetsAccessLevel;
        public readonly bool SnippetsEnabled;
        public readonly string SquashCommitTemplate;
        public readonly string SshUrlToRepo;
        public readonly ImmutableArray<string> Topics;
        public readonly string VisibilityLevel;
        public readonly string WebUrl;
        public readonly string WikiAccessLevel;
        public readonly bool WikiEnabled;

        [OutputConstructor]
        private GetProjectResult(
            string analyticsAccessLevel,

            bool archived,

            string autoCancelPendingPipelines,

            string autoDevopsDeployStrategy,

            bool autoDevopsEnabled,

            bool autocloseReferencedIssues,

            string buildGitStrategy,

            int buildTimeout,

            string buildsAccessLevel,

            ImmutableArray<Outputs.GetProjectContainerExpirationPolicyResult> containerExpirationPolicies,

            string containerRegistryAccessLevel,

            string defaultBranch,

            string description,

            bool emailsDisabled,

            string externalAuthorizationClassificationLabel,

            string forkingAccessLevel,

            string httpUrlToRepo,

            string id,

            string issuesAccessLevel,

            bool issuesEnabled,

            bool lfsEnabled,

            string mergeCommitTemplate,

            bool mergePipelinesEnabled,

            string mergeRequestsAccessLevel,

            bool mergeRequestsEnabled,

            bool mergeTrainsEnabled,

            string name,

            int namespaceId,

            string operationsAccessLevel,

            string path,

            string pathWithNamespace,

            bool pipelinesEnabled,

            bool printingMergeRequestLinkEnabled,

            bool? publicBuilds,

            Outputs.GetProjectPushRulesResult pushRules,

            bool removeSourceBranchAfterMerge,

            string repositoryAccessLevel,

            string repositoryStorage,

            bool requestAccessEnabled,

            string requirementsAccessLevel,

            bool resolveOutdatedDiffDiscussions,

            string runnersToken,

            string securityAndComplianceAccessLevel,

            string snippetsAccessLevel,

            bool snippetsEnabled,

            string squashCommitTemplate,

            string sshUrlToRepo,

            ImmutableArray<string> topics,

            string visibilityLevel,

            string webUrl,

            string wikiAccessLevel,

            bool wikiEnabled)
        {
            AnalyticsAccessLevel = analyticsAccessLevel;
            Archived = archived;
            AutoCancelPendingPipelines = autoCancelPendingPipelines;
            AutoDevopsDeployStrategy = autoDevopsDeployStrategy;
            AutoDevopsEnabled = autoDevopsEnabled;
            AutocloseReferencedIssues = autocloseReferencedIssues;
            BuildGitStrategy = buildGitStrategy;
            BuildTimeout = buildTimeout;
            BuildsAccessLevel = buildsAccessLevel;
            ContainerExpirationPolicies = containerExpirationPolicies;
            ContainerRegistryAccessLevel = containerRegistryAccessLevel;
            DefaultBranch = defaultBranch;
            Description = description;
            EmailsDisabled = emailsDisabled;
            ExternalAuthorizationClassificationLabel = externalAuthorizationClassificationLabel;
            ForkingAccessLevel = forkingAccessLevel;
            HttpUrlToRepo = httpUrlToRepo;
            Id = id;
            IssuesAccessLevel = issuesAccessLevel;
            IssuesEnabled = issuesEnabled;
            LfsEnabled = lfsEnabled;
            MergeCommitTemplate = mergeCommitTemplate;
            MergePipelinesEnabled = mergePipelinesEnabled;
            MergeRequestsAccessLevel = mergeRequestsAccessLevel;
            MergeRequestsEnabled = mergeRequestsEnabled;
            MergeTrainsEnabled = mergeTrainsEnabled;
            Name = name;
            NamespaceId = namespaceId;
            OperationsAccessLevel = operationsAccessLevel;
            Path = path;
            PathWithNamespace = pathWithNamespace;
            PipelinesEnabled = pipelinesEnabled;
            PrintingMergeRequestLinkEnabled = printingMergeRequestLinkEnabled;
            PublicBuilds = publicBuilds;
            PushRules = pushRules;
            RemoveSourceBranchAfterMerge = removeSourceBranchAfterMerge;
            RepositoryAccessLevel = repositoryAccessLevel;
            RepositoryStorage = repositoryStorage;
            RequestAccessEnabled = requestAccessEnabled;
            RequirementsAccessLevel = requirementsAccessLevel;
            ResolveOutdatedDiffDiscussions = resolveOutdatedDiffDiscussions;
            RunnersToken = runnersToken;
            SecurityAndComplianceAccessLevel = securityAndComplianceAccessLevel;
            SnippetsAccessLevel = snippetsAccessLevel;
            SnippetsEnabled = snippetsEnabled;
            SquashCommitTemplate = squashCommitTemplate;
            SshUrlToRepo = sshUrlToRepo;
            Topics = topics;
            VisibilityLevel = visibilityLevel;
            WebUrl = webUrl;
            WikiAccessLevel = wikiAccessLevel;
            WikiEnabled = wikiEnabled;
        }
    }
}
