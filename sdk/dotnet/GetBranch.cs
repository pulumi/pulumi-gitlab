// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetBranch
    {
        /// <summary>
        /// The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetBranch.InvokeAsync(new GitLab.GetBranchArgs
        ///         {
        ///             Name = "example",
        ///             Project = "foo/bar",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBranchResult> InvokeAsync(GetBranchArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBranchResult>("gitlab:index/getBranch:getBranch", args ?? new GetBranchArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetBranch.InvokeAsync(new GitLab.GetBranchArgs
        ///         {
        ///             Name = "example",
        ///             Project = "foo/bar",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBranchResult> Invoke(GetBranchInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBranchResult>("gitlab:index/getBranch:getBranch", args ?? new GetBranchInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBranchArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetBranchArgs()
        {
        }
    }

    public sealed class GetBranchInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetBranchInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBranchResult
    {
        public readonly bool CanPush;
        public readonly ImmutableArray<Outputs.GetBranchCommitResult> Commits;
        public readonly bool Default;
        public readonly bool DeveloperCanMerge;
        public readonly bool DeveloperCanPush;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool Merged;
        public readonly string Name;
        public readonly string Project;
        public readonly bool Protected;
        public readonly string WebUrl;

        [OutputConstructor]
        private GetBranchResult(
            bool canPush,

            ImmutableArray<Outputs.GetBranchCommitResult> commits,

            bool @default,

            bool developerCanMerge,

            bool developerCanPush,

            string id,

            bool merged,

            string name,

            string project,

            bool @protected,

            string webUrl)
        {
            CanPush = canPush;
            Commits = commits;
            Default = @default;
            DeveloperCanMerge = developerCanMerge;
            DeveloperCanPush = developerCanPush;
            Id = id;
            Merged = merged;
            Name = name;
            Project = project;
            Protected = @protected;
            WebUrl = webUrl;
        }
    }
}
