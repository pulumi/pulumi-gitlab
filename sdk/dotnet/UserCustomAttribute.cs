// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.UserCustomAttribute` resource allows to manage custom attributes for a user.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var attr = new GitLab.UserCustomAttribute("attr", new()
    ///     {
    ///         Key = "location",
    ///         User = 42,
    ///         Value = "Greenland",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import a user custom attribute using an id made up of `{user-id}:{key}`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/userCustomAttribute:UserCustomAttribute attr 42:location
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/userCustomAttribute:UserCustomAttribute")]
    public partial class UserCustomAttribute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Key for the Custom Attribute.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The id of the user.
        /// </summary>
        [Output("user")]
        public Output<int> User { get; private set; } = null!;

        /// <summary>
        /// Value for the Custom Attribute.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a UserCustomAttribute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserCustomAttribute(string name, UserCustomAttributeArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/userCustomAttribute:UserCustomAttribute", name, args ?? new UserCustomAttributeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserCustomAttribute(string name, Input<string> id, UserCustomAttributeState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/userCustomAttribute:UserCustomAttribute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserCustomAttribute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserCustomAttribute Get(string name, Input<string> id, UserCustomAttributeState? state = null, CustomResourceOptions? options = null)
        {
            return new UserCustomAttribute(name, id, state, options);
        }
    }

    public sealed class UserCustomAttributeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key for the Custom Attribute.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The id of the user.
        /// </summary>
        [Input("user", required: true)]
        public Input<int> User { get; set; } = null!;

        /// <summary>
        /// Value for the Custom Attribute.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public UserCustomAttributeArgs()
        {
        }
        public static new UserCustomAttributeArgs Empty => new UserCustomAttributeArgs();
    }

    public sealed class UserCustomAttributeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key for the Custom Attribute.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The id of the user.
        /// </summary>
        [Input("user")]
        public Input<int>? User { get; set; }

        /// <summary>
        /// Value for the Custom Attribute.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public UserCustomAttributeState()
        {
        }
        public static new UserCustomAttributeState Empty => new UserCustomAttributeState();
    }
}
