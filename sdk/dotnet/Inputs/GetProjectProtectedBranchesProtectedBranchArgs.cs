// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Inputs
{

    public sealed class GetProjectProtectedBranchesProtectedBranchInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether force push is allowed.
        /// </summary>
        [Input("allowForcePush", required: true)]
        public Input<bool> AllowForcePush { get; set; } = null!;

        /// <summary>
        /// Reject code pushes that change files listed in the CODEOWNERS file.
        /// </summary>
        [Input("codeOwnerApprovalRequired", required: true)]
        public Input<bool> CodeOwnerApprovalRequired { get; set; } = null!;

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        [Input("mergeAccessLevels")]
        private InputList<Inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInputArgs>? _mergeAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
        /// </summary>
        public InputList<Inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInputArgs> MergeAccessLevels
        {
            get => _mergeAccessLevels ?? (_mergeAccessLevels = new InputList<Inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevelInputArgs>());
            set => _mergeAccessLevels = value;
        }

        /// <summary>
        /// The name of the protected branch.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("pushAccessLevels")]
        private InputList<Inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevelInputArgs>? _pushAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to push to protected branch.
        /// </summary>
        public InputList<Inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevelInputArgs> PushAccessLevels
        {
            get => _pushAccessLevels ?? (_pushAccessLevels = new InputList<Inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevelInputArgs>());
            set => _pushAccessLevels = value;
        }

        public GetProjectProtectedBranchesProtectedBranchInputArgs()
        {
        }
        public static new GetProjectProtectedBranchesProtectedBranchInputArgs Empty => new GetProjectProtectedBranchesProtectedBranchInputArgs();
    }
}
