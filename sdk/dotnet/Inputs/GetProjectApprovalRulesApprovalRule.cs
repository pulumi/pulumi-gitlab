// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Inputs
{

    public sealed class GetProjectApprovalRulesApprovalRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// If true, applies the rule to all protected branches, ignoring the protected branches attribute.
        /// </summary>
        [Input("appliesToAllProtectedBranches", required: true)]
        public bool AppliesToAllProtectedBranches { get; set; }

        /// <summary>
        /// The number of approvals required for this rule.
        /// </summary>
        [Input("approvalsRequired", required: true)]
        public int ApprovalsRequired { get; set; }

        [Input("eligibleApproverIds", required: true)]
        private List<int>? _eligibleApproverIds;

        /// <summary>
        /// List of all approver IDs that are eligible to approve this rule.
        /// </summary>
        public List<int> EligibleApproverIds
        {
            get => _eligibleApproverIds ?? (_eligibleApproverIds = new List<int>());
            set => _eligibleApproverIds = value;
        }

        [Input("groupIds", required: true)]
        private List<int>? _groupIds;

        /// <summary>
        /// List of group IDs that are eligible to approve this rule.
        /// </summary>
        public List<int> GroupIds
        {
            get => _groupIds ?? (_groupIds = new List<int>());
            set => _groupIds = value;
        }

        /// <summary>
        /// The ID of the approval rule.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the approval rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("protectedBranchIds", required: true)]
        private List<int>? _protectedBranchIds;

        /// <summary>
        /// List of protected branch IDs that this rule applies to.
        /// </summary>
        public List<int> ProtectedBranchIds
        {
            get => _protectedBranchIds ?? (_protectedBranchIds = new List<int>());
            set => _protectedBranchIds = value;
        }

        /// <summary>
        /// The report type. Required when the rule type is `ReportApprover`. The supported report types are `LicenseScanning` and `CodeCoverage`.
        /// </summary>
        [Input("reportType", required: true)]
        public string ReportType { get; set; } = null!;

        /// <summary>
        /// The type of the approval rule. Can be `AnyApprover`, `Regular` or `ReportApprover`.
        /// </summary>
        [Input("ruleType", required: true)]
        public string RuleType { get; set; } = null!;

        [Input("userIds", required: true)]
        private List<int>? _userIds;

        /// <summary>
        /// List of user IDs that are eligible to approve this rule.
        /// </summary>
        public List<int> UserIds
        {
            get => _userIds ?? (_userIds = new List<int>());
            set => _userIds = value;
        }

        public GetProjectApprovalRulesApprovalRuleArgs()
        {
        }
        public static new GetProjectApprovalRulesApprovalRuleArgs Empty => new GetProjectApprovalRulesApprovalRuleArgs();
    }
}
