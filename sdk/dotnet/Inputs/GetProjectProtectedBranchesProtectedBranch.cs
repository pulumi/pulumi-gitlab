// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Inputs
{

    public sealed class GetProjectProtectedBranchesProtectedBranchArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether force push is allowed.
        /// </summary>
        [Input("allowForcePush", required: true)]
        public bool AllowForcePush { get; set; }

        /// <summary>
        /// Reject code pushes that change files listed in the CODEOWNERS file.
        /// </summary>
        [Input("codeOwnerApprovalRequired", required: true)]
        public bool CodeOwnerApprovalRequired { get; set; }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        [Input("mergeAccessLevels")]
        private List<Inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs>? _mergeAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
        /// </summary>
        public List<Inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs> MergeAccessLevels
        {
            get => _mergeAccessLevels ?? (_mergeAccessLevels = new List<Inputs.GetProjectProtectedBranchesProtectedBranchMergeAccessLevelArgs>());
            set => _mergeAccessLevels = value;
        }

        /// <summary>
        /// The name of the protected branch.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("pushAccessLevels")]
        private List<Inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs>? _pushAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to push to protected branch.
        /// </summary>
        public List<Inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs> PushAccessLevels
        {
            get => _pushAccessLevels ?? (_pushAccessLevels = new List<Inputs.GetProjectProtectedBranchesProtectedBranchPushAccessLevelArgs>());
            set => _pushAccessLevels = value;
        }

        public GetProjectProtectedBranchesProtectedBranchArgs()
        {
        }
        public static new GetProjectProtectedBranchesProtectedBranchArgs Empty => new GetProjectProtectedBranchesProtectedBranchArgs();
    }
}
