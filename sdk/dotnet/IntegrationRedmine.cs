// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.IntegrationRedmine` resource manages the lifecycle of a project integration with Redmine.
    /// 
    /// &gt; Using Redmine requires that GitLab internal issue tracking is disabled for the project.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#redmine)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var awesomeProject = new GitLab.Project("awesome_project", new()
    ///     {
    ///         Name = "awesome_project",
    ///         Description = "My awesome project.",
    ///         VisibilityLevel = "public",
    ///     });
    /// 
    ///     var redmine = new GitLab.IntegrationRedmine("redmine", new()
    ///     {
    ///         Project = awesomeProject.Id,
    ///         NewIssueUrl = "https://redmine.example.com/issue",
    ///         ProjectUrl = "https://redmine.example.com/project",
    ///         IssuesUrl = "https://redmine.example.com/issue/:id",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_integration_redmine`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_integration_redmine.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/integrationRedmine:IntegrationRedmine You can import a gitlab_integration_redmine state using `&lt;resource&gt; &lt;project_id&gt;`:
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/integrationRedmine:IntegrationRedmine redmine 1
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/integrationRedmine:IntegrationRedmine")]
    public partial class IntegrationRedmine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URL to the Redmine project issue to link to this GitLab project.
        /// </summary>
        [Output("issuesUrl")]
        public Output<string> IssuesUrl { get; private set; } = null!;

        /// <summary>
        /// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
        /// </summary>
        [Output("newIssueUrl")]
        public Output<string> NewIssueUrl { get; private set; } = null!;

        /// <summary>
        /// ID of the project you want to activate integration on.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The URL to the Redmine project to link to this GitLab project.
        /// </summary>
        [Output("projectUrl")]
        public Output<string> ProjectUrl { get; private set; } = null!;

        /// <summary>
        /// Indicates whether or not to inherit default settings. Defaults to false.
        /// </summary>
        [Output("useInheritedSettings")]
        public Output<bool> UseInheritedSettings { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationRedmine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationRedmine(string name, IntegrationRedmineArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/integrationRedmine:IntegrationRedmine", name, args ?? new IntegrationRedmineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationRedmine(string name, Input<string> id, IntegrationRedmineState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/integrationRedmine:IntegrationRedmine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationRedmine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationRedmine Get(string name, Input<string> id, IntegrationRedmineState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationRedmine(name, id, state, options);
        }
    }

    public sealed class IntegrationRedmineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL to the Redmine project issue to link to this GitLab project.
        /// </summary>
        [Input("issuesUrl", required: true)]
        public Input<string> IssuesUrl { get; set; } = null!;

        /// <summary>
        /// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
        /// </summary>
        [Input("newIssueUrl", required: true)]
        public Input<string> NewIssueUrl { get; set; } = null!;

        /// <summary>
        /// ID of the project you want to activate integration on.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// The URL to the Redmine project to link to this GitLab project.
        /// </summary>
        [Input("projectUrl", required: true)]
        public Input<string> ProjectUrl { get; set; } = null!;

        /// <summary>
        /// Indicates whether or not to inherit default settings. Defaults to false.
        /// </summary>
        [Input("useInheritedSettings")]
        public Input<bool>? UseInheritedSettings { get; set; }

        public IntegrationRedmineArgs()
        {
        }
        public static new IntegrationRedmineArgs Empty => new IntegrationRedmineArgs();
    }

    public sealed class IntegrationRedmineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL to the Redmine project issue to link to this GitLab project.
        /// </summary>
        [Input("issuesUrl")]
        public Input<string>? IssuesUrl { get; set; }

        /// <summary>
        /// The URL to use to create a new issue in the Redmine project linked to this GitLab project.
        /// </summary>
        [Input("newIssueUrl")]
        public Input<string>? NewIssueUrl { get; set; }

        /// <summary>
        /// ID of the project you want to activate integration on.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The URL to the Redmine project to link to this GitLab project.
        /// </summary>
        [Input("projectUrl")]
        public Input<string>? ProjectUrl { get; set; }

        /// <summary>
        /// Indicates whether or not to inherit default settings. Defaults to false.
        /// </summary>
        [Input("useInheritedSettings")]
        public Input<bool>? UseInheritedSettings { get; set; }

        public IntegrationRedmineState()
        {
        }
        public static new IntegrationRedmineState Empty => new IntegrationRedmineState();
    }
}
