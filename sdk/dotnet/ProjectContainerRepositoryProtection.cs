// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectContainerRepositoryProtection` resource allows managing the lifecycle of a container repository protection rule.
    /// 
    /// You can use a wildcard (*) to protect multiple container repositories with the same container protection rule.
    /// You can apply several protection rules to the same container repository. A container repository is protected if at least one protection rule matches.
    /// 
    /// **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/container_repository_protection_rules/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new GitLab.ProjectContainerRepositoryProtection("this", new()
    ///     {
    ///         Project = "123",
    ///         RepositoryPathPattern = "my_namespace/project*",
    ///         MinimumAccessLevelForPush = "owner",
    ///         MinimumAccessLevelForDelete = "admin",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_container_repository_protection`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_container_repository_protection.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// GitLab project container repository protection rules can be imported using an id made up of `&lt;project_id&gt;:&lt;protection_rule_id&gt;`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection this 123:321
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection")]
    public partial class ProjectContainerRepositoryProtection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
        /// </summary>
        [Output("minimumAccessLevelForDelete")]
        public Output<string?> MinimumAccessLevelForDelete { get; private set; } = null!;

        /// <summary>
        /// Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
        /// </summary>
        [Output("minimumAccessLevelForPush")]
        public Output<string?> MinimumAccessLevelForPush { get; private set; } = null!;

        /// <summary>
        /// ID or URL-encoded path of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Unique ID of the protection rule.
        /// </summary>
        [Output("protectionRuleId")]
        public Output<int> ProtectionRuleId { get; private set; } = null!;

        /// <summary>
        /// Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project's full path
        /// </summary>
        [Output("repositoryPathPattern")]
        public Output<string> RepositoryPathPattern { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectContainerRepositoryProtection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectContainerRepositoryProtection(string name, ProjectContainerRepositoryProtectionArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection", name, args ?? new ProjectContainerRepositoryProtectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectContainerRepositoryProtection(string name, Input<string> id, ProjectContainerRepositoryProtectionState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectContainerRepositoryProtection:ProjectContainerRepositoryProtection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectContainerRepositoryProtection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectContainerRepositoryProtection Get(string name, Input<string> id, ProjectContainerRepositoryProtectionState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectContainerRepositoryProtection(name, id, state, options);
        }
    }

    public sealed class ProjectContainerRepositoryProtectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
        /// </summary>
        [Input("minimumAccessLevelForDelete")]
        public Input<string>? MinimumAccessLevelForDelete { get; set; }

        /// <summary>
        /// Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
        /// </summary>
        [Input("minimumAccessLevelForPush")]
        public Input<string>? MinimumAccessLevelForPush { get; set; }

        /// <summary>
        /// ID or URL-encoded path of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project's full path
        /// </summary>
        [Input("repositoryPathPattern", required: true)]
        public Input<string> RepositoryPathPattern { get; set; } = null!;

        public ProjectContainerRepositoryProtectionArgs()
        {
        }
        public static new ProjectContainerRepositoryProtectionArgs Empty => new ProjectContainerRepositoryProtectionArgs();
    }

    public sealed class ProjectContainerRepositoryProtectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Minimum GitLab access level required to delete container images in the container registry. For example maintainer, owner, admin. Must be provided when `minimum_access_level_for_push` is not set.
        /// </summary>
        [Input("minimumAccessLevelForDelete")]
        public Input<string>? MinimumAccessLevelForDelete { get; set; }

        /// <summary>
        /// Minimum GitLab access level required to push container images to the container registry. For example maintainer, owner or admin. Must be provided when `minimum_access_level_for_delete` is not set.
        /// </summary>
        [Input("minimumAccessLevelForPush")]
        public Input<string>? MinimumAccessLevelForPush { get; set; }

        /// <summary>
        /// ID or URL-encoded path of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Unique ID of the protection rule.
        /// </summary>
        [Input("protectionRuleId")]
        public Input<int>? ProtectionRuleId { get; set; }

        /// <summary>
        /// Container repository path pattern protected by the protection rule. Wildcard character * allowed. Repository path pattern should start with the project's full path
        /// </summary>
        [Input("repositoryPathPattern")]
        public Input<string>? RepositoryPathPattern { get; set; }

        public ProjectContainerRepositoryProtectionState()
        {
        }
        public static new ProjectContainerRepositoryProtectionState Empty => new ProjectContainerRepositoryProtectionState();
    }
}
