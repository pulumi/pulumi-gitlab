// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectProtectedEnvironment` resource allows to manage the lifecycle of a protected environment in a project.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_environments.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var thisGroup = new GitLab.Group("thisGroup", new GitLab.GroupArgs
    ///         {
    ///             Path = "example",
    ///             Description = "An example group",
    ///         });
    ///         var thisProject = new GitLab.Project("thisProject", new GitLab.ProjectArgs
    ///         {
    ///             NamespaceId = thisGroup.Id,
    ///             InitializeWithReadme = true,
    ///         });
    ///         var thisProjectEnvironment = new GitLab.ProjectEnvironment("thisProjectEnvironment", new GitLab.ProjectEnvironmentArgs
    ///         {
    ///             Project = thisProject.Id,
    ///             ExternalUrl = "www.example.com",
    ///         });
    ///         var thisProjectProtectedEnvironment = new GitLab.ProjectProtectedEnvironment("thisProjectProtectedEnvironment", new GitLab.ProjectProtectedEnvironmentArgs
    ///         {
    ///             Project = thisProject.Id,
    ///             Environment = thisProjectEnvironment.Name,
    ///             DeployAccessLevels = new GitLab.Inputs.ProjectProtectedEnvironmentDeployAccessLevelsArgs
    ///             {
    ///                 AccessLevel = "developer",
    ///             },
    ///         });
    ///         var thisIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new GitLab.ProjectProtectedEnvironment("thisIndex/projectProtectedEnvironmentProjectProtectedEnvironment", new GitLab.ProjectProtectedEnvironmentArgs
    ///         {
    ///             Project = thisProject.Id,
    ///             Environment = thisProjectEnvironment.Name,
    ///             DeployAccessLevels = new GitLab.Inputs.ProjectProtectedEnvironmentDeployAccessLevelsArgs
    ///             {
    ///                 GroupId = gitlab_group.Test.Id,
    ///             },
    ///         });
    ///         var thisGitlabIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new GitLab.ProjectProtectedEnvironment("thisGitlabIndex/projectProtectedEnvironmentProjectProtectedEnvironment", new GitLab.ProjectProtectedEnvironmentArgs
    ///         {
    ///             Project = thisProject.Id,
    ///             Environment = thisProjectEnvironment.Name,
    ///             DeployAccessLevels = new GitLab.Inputs.ProjectProtectedEnvironmentDeployAccessLevelsArgs
    ///             {
    ///                 UserId = gitlab_user.Test.Id,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// # GitLab protected environments can be imported using an id made up of `projectId:environmentName`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment bar 123:production
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment")]
    public partial class ProjectProtectedEnvironment : Pulumi.CustomResource
    {
        /// <summary>
        /// Array of access levels allowed to deploy, with each described by a hash.
        /// </summary>
        [Output("deployAccessLevels")]
        public Output<Outputs.ProjectProtectedEnvironmentDeployAccessLevels> DeployAccessLevels { get; private set; } = null!;

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The ID or full path of the project which the protected environment is created against.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectProtectedEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectProtectedEnvironment(string name, ProjectProtectedEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment", name, args ?? new ProjectProtectedEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectProtectedEnvironment(string name, Input<string> id, ProjectProtectedEnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectProtectedEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectProtectedEnvironment Get(string name, Input<string> id, ProjectProtectedEnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectProtectedEnvironment(name, id, state, options);
        }
    }

    public sealed class ProjectProtectedEnvironmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Array of access levels allowed to deploy, with each described by a hash.
        /// </summary>
        [Input("deployAccessLevels", required: true)]
        public Input<Inputs.ProjectProtectedEnvironmentDeployAccessLevelsArgs> DeployAccessLevels { get; set; } = null!;

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The ID or full path of the project which the protected environment is created against.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public ProjectProtectedEnvironmentArgs()
        {
        }
    }

    public sealed class ProjectProtectedEnvironmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Array of access levels allowed to deploy, with each described by a hash.
        /// </summary>
        [Input("deployAccessLevels")]
        public Input<Inputs.ProjectProtectedEnvironmentDeployAccessLevelsGetArgs>? DeployAccessLevels { get; set; }

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The ID or full path of the project which the protected environment is created against.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ProjectProtectedEnvironmentState()
        {
        }
    }
}
