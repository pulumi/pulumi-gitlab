// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectIntegrationEmailsOnPush` resource manages the lifecycle of a project integration with the Emails on Push Service.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#emails-on-push)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var awesomeProject = new GitLab.Project("awesome_project", new()
    ///     {
    ///         Name = "awesome_project",
    ///         Description = "My awesome project.",
    ///         VisibilityLevel = "public",
    ///     });
    /// 
    ///     var emails = new GitLab.ProjectIntegrationEmailsOnPush("emails", new()
    ///     {
    ///         Project = awesomeProject.Id,
    ///         Recipients = "myrecipient@example.com myotherrecipient@example.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_integration_emails_on_push`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_integration_emails_on_push.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// You can import a gitlab_project_integration_emails_on_push state using the project ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush emails 1
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush")]
    public partial class ProjectIntegrationEmailsOnPush : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the integration is active.
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// Branches to send notifications for. Valid options are `All`, `Default`, `Protected`, `DefaultAndProtected`. Notifications are always fired for tag pushes.
        /// </summary>
        [Output("branchesToBeNotified")]
        public Output<string?> BranchesToBeNotified { get; private set; } = null!;

        /// <summary>
        /// The ISO8601 date/time that this integration was activated at in UTC.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Disable code diffs.
        /// </summary>
        [Output("disableDiffs")]
        public Output<bool?> DisableDiffs { get; private set; } = null!;

        /// <summary>
        /// ID or full-path of the project you want to activate integration on.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for push events.
        /// </summary>
        [Output("pushEvents")]
        public Output<bool?> PushEvents { get; private set; } = null!;

        /// <summary>
        /// Emails separated by whitespace.
        /// </summary>
        [Output("recipients")]
        public Output<string> Recipients { get; private set; } = null!;

        /// <summary>
        /// Send from committer.
        /// </summary>
        [Output("sendFromCommitterEmail")]
        public Output<bool?> SendFromCommitterEmail { get; private set; } = null!;

        /// <summary>
        /// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for tag push events.
        /// </summary>
        [Output("tagPushEvents")]
        public Output<bool?> TagPushEvents { get; private set; } = null!;

        /// <summary>
        /// Title of the integration.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The ISO8601 date/time that this integration was last updated at in UTC.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectIntegrationEmailsOnPush resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectIntegrationEmailsOnPush(string name, ProjectIntegrationEmailsOnPushArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush", name, args ?? new ProjectIntegrationEmailsOnPushArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectIntegrationEmailsOnPush(string name, Input<string> id, ProjectIntegrationEmailsOnPushState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectIntegrationEmailsOnPush:ProjectIntegrationEmailsOnPush", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectIntegrationEmailsOnPush resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectIntegrationEmailsOnPush Get(string name, Input<string> id, ProjectIntegrationEmailsOnPushState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectIntegrationEmailsOnPush(name, id, state, options);
        }
    }

    public sealed class ProjectIntegrationEmailsOnPushArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Branches to send notifications for. Valid options are `All`, `Default`, `Protected`, `DefaultAndProtected`. Notifications are always fired for tag pushes.
        /// </summary>
        [Input("branchesToBeNotified")]
        public Input<string>? BranchesToBeNotified { get; set; }

        /// <summary>
        /// Disable code diffs.
        /// </summary>
        [Input("disableDiffs")]
        public Input<bool>? DisableDiffs { get; set; }

        /// <summary>
        /// ID or full-path of the project you want to activate integration on.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Enable notifications for push events.
        /// </summary>
        [Input("pushEvents")]
        public Input<bool>? PushEvents { get; set; }

        /// <summary>
        /// Emails separated by whitespace.
        /// </summary>
        [Input("recipients", required: true)]
        public Input<string> Recipients { get; set; } = null!;

        /// <summary>
        /// Send from committer.
        /// </summary>
        [Input("sendFromCommitterEmail")]
        public Input<bool>? SendFromCommitterEmail { get; set; }

        /// <summary>
        /// Enable notifications for tag push events.
        /// </summary>
        [Input("tagPushEvents")]
        public Input<bool>? TagPushEvents { get; set; }

        public ProjectIntegrationEmailsOnPushArgs()
        {
        }
        public static new ProjectIntegrationEmailsOnPushArgs Empty => new ProjectIntegrationEmailsOnPushArgs();
    }

    public sealed class ProjectIntegrationEmailsOnPushState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the integration is active.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Branches to send notifications for. Valid options are `All`, `Default`, `Protected`, `DefaultAndProtected`. Notifications are always fired for tag pushes.
        /// </summary>
        [Input("branchesToBeNotified")]
        public Input<string>? BranchesToBeNotified { get; set; }

        /// <summary>
        /// The ISO8601 date/time that this integration was activated at in UTC.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Disable code diffs.
        /// </summary>
        [Input("disableDiffs")]
        public Input<bool>? DisableDiffs { get; set; }

        /// <summary>
        /// ID or full-path of the project you want to activate integration on.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Enable notifications for push events.
        /// </summary>
        [Input("pushEvents")]
        public Input<bool>? PushEvents { get; set; }

        /// <summary>
        /// Emails separated by whitespace.
        /// </summary>
        [Input("recipients")]
        public Input<string>? Recipients { get; set; }

        /// <summary>
        /// Send from committer.
        /// </summary>
        [Input("sendFromCommitterEmail")]
        public Input<bool>? SendFromCommitterEmail { get; set; }

        /// <summary>
        /// The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Enable notifications for tag push events.
        /// </summary>
        [Input("tagPushEvents")]
        public Input<bool>? TagPushEvents { get; set; }

        /// <summary>
        /// Title of the integration.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The ISO8601 date/time that this integration was last updated at in UTC.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public ProjectIntegrationEmailsOnPushState()
        {
        }
        public static new ProjectIntegrationEmailsOnPushState Empty => new ProjectIntegrationEmailsOnPushState();
    }
}
