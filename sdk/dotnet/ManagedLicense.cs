// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ManagedLicense` resource allows to manage the lifecycle of a managed license.
    /// 
    /// &gt; This resource requires a GitLab Enterprise instance.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/managed_licenses.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new GitLab.Project("foo", new()
    ///     {
    ///         Description = "Lorem Ipsum",
    ///         VisibilityLevel = "public",
    ///     });
    /// 
    ///     var mit = new GitLab.ManagedLicense("mit", new()
    ///     {
    ///         Project = foo.Id,
    ///         ApprovalStatus = "allowed",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import this resource with an id made up of `{project-id}:{license-id}`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/managedLicense:ManagedLicense foo 1:2
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/managedLicense:ManagedLicense")]
    public partial class ManagedLicense : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. "approved" and "blacklisted"
        /// 			have been deprecated in favor of "allowed" and "denied"; use "allowed" and "denied" for GitLab versions 15.0 and higher.
        /// 			Prior to version 15.0 and after 14.6, the values are equivalent.
        /// </summary>
        [Output("approvalStatus")]
        public Output<string> ApprovalStatus { get; private set; } = null!;

        /// <summary>
        /// The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project under which the managed license will be created.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedLicense resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedLicense(string name, ManagedLicenseArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/managedLicense:ManagedLicense", name, args ?? new ManagedLicenseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedLicense(string name, Input<string> id, ManagedLicenseState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/managedLicense:ManagedLicense", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedLicense resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedLicense Get(string name, Input<string> id, ManagedLicenseState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedLicense(name, id, state, options);
        }
    }

    public sealed class ManagedLicenseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. "approved" and "blacklisted"
        /// 			have been deprecated in favor of "allowed" and "denied"; use "allowed" and "denied" for GitLab versions 15.0 and higher.
        /// 			Prior to version 15.0 and after 14.6, the values are equivalent.
        /// </summary>
        [Input("approvalStatus", required: true)]
        public Input<string> ApprovalStatus { get; set; } = null!;

        /// <summary>
        /// The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project under which the managed license will be created.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public ManagedLicenseArgs()
        {
        }
        public static new ManagedLicenseArgs Empty => new ManagedLicenseArgs();
    }

    public sealed class ManagedLicenseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. "approved" and "blacklisted"
        /// 			have been deprecated in favor of "allowed" and "denied"; use "allowed" and "denied" for GitLab versions 15.0 and higher.
        /// 			Prior to version 15.0 and after 14.6, the values are equivalent.
        /// </summary>
        [Input("approvalStatus")]
        public Input<string>? ApprovalStatus { get; set; }

        /// <summary>
        /// The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project under which the managed license will be created.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ManagedLicenseState()
        {
        }
        public static new ManagedLicenseState Empty => new ManagedLicenseState();
    }
}
