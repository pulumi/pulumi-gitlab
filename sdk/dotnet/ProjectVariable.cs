// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectVariable` resource allows creating and managing a GitLab project level variable.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_level_variables/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new GitLab.ProjectVariable("example", new()
    ///     {
    ///         Project = "12345",
    ///         Key = "project_variable_key",
    ///         Value = "project_variable_value",
    ///         Protected = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_variable`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_variable.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// GitLab project variables can be imported using an id made up of `project:key:environment_scope`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectVariable:ProjectVariable example '12345:project_variable_key:*'
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectVariable:ProjectVariable")]
    public partial class ProjectVariable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the variable.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
        /// </summary>
        [Output("environmentScope")]
        public Output<string> EnvironmentScope { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the value of the variable will be hidden in the CI/CD User Interface. The value must meet the [hidden requirements](https://docs.gitlab.com/ci/variables/#hide-a-cicd-variable).
        /// </summary>
        [Output("hidden")]
        public Output<bool> Hidden { get; private set; } = null!;

        /// <summary>
        /// The name of the variable.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the value of the variable will be masked in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#mask-a-cicd-variable).
        /// </summary>
        [Output("masked")]
        public Output<bool> Masked { get; private set; } = null!;

        /// <summary>
        /// The name or id of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags.
        /// </summary>
        [Output("protected")]
        public Output<bool> Protected { get; private set; } = null!;

        /// <summary>
        /// Whether the variable is treated as a raw string. When true, variables in the value are not expanded.
        /// </summary>
        [Output("raw")]
        public Output<bool> Raw { get; private set; } = null!;

        /// <summary>
        /// The value of the variable.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// The type of a variable. Valid values are: `env_var`, `file`.
        /// </summary>
        [Output("variableType")]
        public Output<string> VariableType { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectVariable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectVariable(string name, ProjectVariableArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectVariable:ProjectVariable", name, args ?? new ProjectVariableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectVariable(string name, Input<string> id, ProjectVariableState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectVariable:ProjectVariable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectVariable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectVariable Get(string name, Input<string> id, ProjectVariableState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectVariable(name, id, state, options);
        }
    }

    public sealed class ProjectVariableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the variable.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
        /// </summary>
        [Input("environmentScope")]
        public Input<string>? EnvironmentScope { get; set; }

        /// <summary>
        /// If set to `true`, the value of the variable will be hidden in the CI/CD User Interface. The value must meet the [hidden requirements](https://docs.gitlab.com/ci/variables/#hide-a-cicd-variable).
        /// </summary>
        [Input("hidden")]
        public Input<bool>? Hidden { get; set; }

        /// <summary>
        /// The name of the variable.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// If set to `true`, the value of the variable will be masked in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#mask-a-cicd-variable).
        /// </summary>
        [Input("masked")]
        public Input<bool>? Masked { get; set; }

        /// <summary>
        /// The name or id of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags.
        /// </summary>
        [Input("protected")]
        public Input<bool>? Protected { get; set; }

        /// <summary>
        /// Whether the variable is treated as a raw string. When true, variables in the value are not expanded.
        /// </summary>
        [Input("raw")]
        public Input<bool>? Raw { get; set; }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        /// <summary>
        /// The type of a variable. Valid values are: `env_var`, `file`.
        /// </summary>
        [Input("variableType")]
        public Input<string>? VariableType { get; set; }

        public ProjectVariableArgs()
        {
        }
        public static new ProjectVariableArgs Empty => new ProjectVariableArgs();
    }

    public sealed class ProjectVariableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the variable.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.
        /// </summary>
        [Input("environmentScope")]
        public Input<string>? EnvironmentScope { get; set; }

        /// <summary>
        /// If set to `true`, the value of the variable will be hidden in the CI/CD User Interface. The value must meet the [hidden requirements](https://docs.gitlab.com/ci/variables/#hide-a-cicd-variable).
        /// </summary>
        [Input("hidden")]
        public Input<bool>? Hidden { get; set; }

        /// <summary>
        /// The name of the variable.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// If set to `true`, the value of the variable will be masked in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#mask-a-cicd-variable).
        /// </summary>
        [Input("masked")]
        public Input<bool>? Masked { get; set; }

        /// <summary>
        /// The name or id of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// If set to `true`, the variable will be passed only to pipelines running on protected branches and tags.
        /// </summary>
        [Input("protected")]
        public Input<bool>? Protected { get; set; }

        /// <summary>
        /// Whether the variable is treated as a raw string. When true, variables in the value are not expanded.
        /// </summary>
        [Input("raw")]
        public Input<bool>? Raw { get; set; }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The type of a variable. Valid values are: `env_var`, `file`.
        /// </summary>
        [Input("variableType")]
        public Input<string>? VariableType { get; set; }

        public ProjectVariableState()
        {
        }
        public static new ProjectVariableState Empty => new ProjectVariableState();
    }
}
