// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetUser
    {
        /// <summary>
        /// The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
        /// 
        /// &gt; Some attributes might not be returned depending on if you're an admin or not.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("gitlab:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.
        /// 
        /// &gt; Some attributes might not be returned depending on if you're an admin or not.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUserResult>("gitlab:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : Pulumi.InvokeArgs
    {
        [Input("email")]
        public string? Email { get; set; }

        [Input("userId")]
        public int? UserId { get; set; }

        [Input("username")]
        public string? Username { get; set; }

        public GetUserArgs()
        {
        }
    }

    public sealed class GetUserInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("userId")]
        public Input<int>? UserId { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public GetUserInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly string AvatarUrl;
        public readonly string Bio;
        public readonly bool CanCreateGroup;
        public readonly bool CanCreateProject;
        public readonly int ColorSchemeId;
        public readonly string CreatedAt;
        public readonly string CurrentSignInAt;
        public readonly string Email;
        public readonly string ExternUid;
        public readonly bool External;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsAdmin;
        public readonly string LastSignInAt;
        public readonly string Linkedin;
        public readonly string Location;
        public readonly string Name;
        public readonly string Note;
        public readonly string Organization;
        public readonly int ProjectsLimit;
        public readonly string Skype;
        public readonly string State;
        public readonly int ThemeId;
        public readonly string Twitter;
        public readonly bool TwoFactorEnabled;
        public readonly int UserId;
        public readonly string UserProvider;
        public readonly string Username;
        public readonly string WebsiteUrl;

        [OutputConstructor]
        private GetUserResult(
            string avatarUrl,

            string bio,

            bool canCreateGroup,

            bool canCreateProject,

            int colorSchemeId,

            string createdAt,

            string currentSignInAt,

            string email,

            string externUid,

            bool external,

            string id,

            bool isAdmin,

            string lastSignInAt,

            string linkedin,

            string location,

            string name,

            string note,

            string organization,

            int projectsLimit,

            string skype,

            string state,

            int themeId,

            string twitter,

            bool twoFactorEnabled,

            int userId,

            string userProvider,

            string username,

            string websiteUrl)
        {
            AvatarUrl = avatarUrl;
            Bio = bio;
            CanCreateGroup = canCreateGroup;
            CanCreateProject = canCreateProject;
            ColorSchemeId = colorSchemeId;
            CreatedAt = createdAt;
            CurrentSignInAt = currentSignInAt;
            Email = email;
            ExternUid = externUid;
            External = external;
            Id = id;
            IsAdmin = isAdmin;
            LastSignInAt = lastSignInAt;
            Linkedin = linkedin;
            Location = location;
            Name = name;
            Note = note;
            Organization = organization;
            ProjectsLimit = projectsLimit;
            Skype = skype;
            State = state;
            ThemeId = themeId;
            Twitter = twitter;
            TwoFactorEnabled = twoFactorEnabled;
            UserId = userId;
            UserProvider = userProvider;
            Username = username;
            WebsiteUrl = websiteUrl;
        }
    }
}
