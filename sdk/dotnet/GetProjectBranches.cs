// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectBranches
    {
        /// <summary>
        /// The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetProjectBranches.Invoke(new()
        ///     {
        ///         Project = "foo/bar/baz",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectBranchesResult> InvokeAsync(GetProjectBranchesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectBranchesResult>("gitlab:index/getProjectBranches:getProjectBranches", args ?? new GetProjectBranchesArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectBranches` data source allows details of the branches of a given project to be retrieved.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetProjectBranches.Invoke(new()
        ///     {
        ///         Project = "foo/bar/baz",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProjectBranchesResult> Invoke(GetProjectBranchesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectBranchesResult>("gitlab:index/getProjectBranches:getProjectBranches", args ?? new GetProjectBranchesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectBranchesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID or URL-encoded path of the project owned by the authenticated user.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetProjectBranchesArgs()
        {
        }
        public static new GetProjectBranchesArgs Empty => new GetProjectBranchesArgs();
    }

    public sealed class GetProjectBranchesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID or URL-encoded path of the project owned by the authenticated user.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetProjectBranchesInvokeArgs()
        {
        }
        public static new GetProjectBranchesInvokeArgs Empty => new GetProjectBranchesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectBranchesResult
    {
        /// <summary>
        /// The list of branches of the project, as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectBranchesBranchResult> Branches;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID or URL-encoded path of the project owned by the authenticated user.
        /// </summary>
        public readonly string Project;

        [OutputConstructor]
        private GetProjectBranchesResult(
            ImmutableArray<Outputs.GetProjectBranchesBranchResult> branches,

            string id,

            string project)
        {
            Branches = branches;
            Id = id;
            Project = project;
        }
    }
}
