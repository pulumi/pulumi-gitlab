// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectIds
    {
        /// <summary>
        /// The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
        /// 
        /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var newProject = new GitLab.Project("new_project", new()
        ///     {
        ///         Name = "project",
        ///     });
        /// 
        ///     // use project IDs to get additional information, such as the GraphQL ID
        ///     // for other resources
        ///     var foo = GitLab.GetProjectIds.Invoke(new()
        ///     {
        ///         Project = "gitlab_project.new_project.id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["graphQLId"] = foo.Apply(getProjectIdsResult =&gt; getProjectIdsResult.ProjectGraphqlId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectIdsResult> InvokeAsync(GetProjectIdsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectIdsResult>("gitlab:index/getProjectIds:getProjectIds", args ?? new GetProjectIdsArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
        /// 
        /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var newProject = new GitLab.Project("new_project", new()
        ///     {
        ///         Name = "project",
        ///     });
        /// 
        ///     // use project IDs to get additional information, such as the GraphQL ID
        ///     // for other resources
        ///     var foo = GitLab.GetProjectIds.Invoke(new()
        ///     {
        ///         Project = "gitlab_project.new_project.id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["graphQLId"] = foo.Apply(getProjectIdsResult =&gt; getProjectIdsResult.ProjectGraphqlId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectIdsResult> Invoke(GetProjectIdsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectIdsResult>("gitlab:index/getProjectIds:getProjectIds", args ?? new GetProjectIdsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectIds` data source identification information for a given project, allowing a user to translate a full path or ID into the GraphQL ID of the project.
        /// 
        /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#queryproject)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var newProject = new GitLab.Project("new_project", new()
        ///     {
        ///         Name = "project",
        ///     });
        /// 
        ///     // use project IDs to get additional information, such as the GraphQL ID
        ///     // for other resources
        ///     var foo = GitLab.GetProjectIds.Invoke(new()
        ///     {
        ///         Project = "gitlab_project.new_project.id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["graphQLId"] = foo.Apply(getProjectIdsResult =&gt; getProjectIdsResult.ProjectGraphqlId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectIdsResult> Invoke(GetProjectIdsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectIdsResult>("gitlab:index/getProjectIds:getProjectIds", args ?? new GetProjectIdsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectIdsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetProjectIdsArgs()
        {
        }
        public static new GetProjectIdsArgs Empty => new GetProjectIdsArgs();
    }

    public sealed class GetProjectIdsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetProjectIdsInvokeArgs()
        {
        }
        public static new GetProjectIdsInvokeArgs Empty => new GetProjectIdsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectIdsResult
    {
        public readonly string Id;
        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// The full path of the project.
        /// </summary>
        public readonly string ProjectFullPath;
        /// <summary>
        /// The GraphQL ID of the project.
        /// </summary>
        public readonly string ProjectGraphqlId;
        /// <summary>
        /// The ID of the project.
        /// </summary>
        public readonly string ProjectId;

        [OutputConstructor]
        private GetProjectIdsResult(
            string id,

            string project,

            string projectFullPath,

            string projectGraphqlId,

            string projectId)
        {
            Id = id;
            Project = project;
            ProjectFullPath = projectFullPath;
            ProjectGraphqlId = projectGraphqlId;
            ProjectId = projectId;
        }
    }
}
