// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.UserRunner` resource allows creating a GitLab runner using the new [GitLab Runner Registration Flow](https://docs.gitlab.com/ci/runners/new_creation_workflow/).
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/users/#create-a-runner)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a project runner
    ///     var projectRunner = new GitLab.UserRunner("project_runner", new()
    ///     {
    ///         RunnerType = "project_type",
    ///         ProjectId = 123456,
    ///         Description = "A runner created using a user access token instead of a registration token",
    ///         TagLists = new[]
    ///         {
    ///             "a-tag",
    ///             "other-tag",
    ///         },
    ///         Untagged = true,
    ///     });
    /// 
    ///     // Create a group runner
    ///     var groupRunner = new GitLab.UserRunner("group_runner", new()
    ///     {
    ///         RunnerType = "group_type",
    ///         GroupId = 123456,
    ///     });
    /// 
    ///     // Create a instance runner
    ///     var instanceRunner = new GitLab.UserRunner("instance_runner", new()
    ///     {
    ///         RunnerType = "instance_type",
    ///     });
    /// 
    ///     var configToml = groupRunner.Token.Apply(token =&gt; @$"concurrent = 1
    /// check_interval = 0
    /// 
    /// [session_server]
    ///   session_timeout = 1800
    /// 
    /// [[runners]]
    ///   name = ""my_gitlab_runner""
    ///   url = ""https://example.gitlab.com""
    ///   token = ""{token}""
    ///   executor = ""docker""
    /// 
    ///   [runners.custom_build_dir]
    ///   [runners.cache]
    ///     [runners.cache.s3]
    ///     [runners.cache.gcs]
    ///     [runners.cache.azure]
    ///   [runners.docker]
    ///     tls_verify = false
    ///     image = ""ubuntu""
    ///     privileged = true
    ///     disable_entrypoint_overwrite = false
    ///     oom_kill_disable = false
    ///     disable_cache = false
    ///     volumes = [""/cache"", ""/certs/client""]
    ///     shm_size = 0
    /// ");
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_user_runner`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_user_runner.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// You can import a gitlab runner using its ID
    /// 
    /// Note: Importing a runner will not provide access to the `token` attribute
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/userRunner:UserRunner example 12345
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/userRunner:UserRunner")]
    public partial class UserRunner : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access level of the runner. Valid values are: `not_protected`, `ref_protected`.
        /// </summary>
        [Output("accessLevel")]
        public Output<string> AccessLevel { get; private set; } = null!;

        /// <summary>
        /// Description of the runner.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the group that the runner is created in. Required if runner*type is group*type.
        /// </summary>
        [Output("groupId")]
        public Output<int?> GroupId { get; private set; } = null!;

        /// <summary>
        /// Specifies if the runner should be locked for the current project.
        /// </summary>
        [Output("locked")]
        public Output<bool> Locked { get; private set; } = null!;

        /// <summary>
        /// Free-form maintenance notes for the runner (1024 characters)
        /// </summary>
        [Output("maintenanceNote")]
        public Output<string> MaintenanceNote { get; private set; } = null!;

        /// <summary>
        /// Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
        /// </summary>
        [Output("maximumTimeout")]
        public Output<int> MaximumTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies if the runner should ignore new jobs.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// The ID of the project that the runner is created in. Required if runner*type is project*type.
        /// </summary>
        [Output("projectId")]
        public Output<int?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The scope of the runner. Valid values are: `instance_type`, `group_type`, `project_type`.
        /// </summary>
        [Output("runnerType")]
        public Output<string> RunnerType { get; private set; } = null!;

        /// <summary>
        /// A list of runner tags.
        /// </summary>
        [Output("tagLists")]
        public Output<ImmutableArray<string>> TagLists { get; private set; } = null!;

        /// <summary>
        /// The authentication token to use when setting up a new runner with this configuration. This value cannot be imported.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Specifies if the runner should handle untagged jobs.
        /// </summary>
        [Output("untagged")]
        public Output<bool> Untagged { get; private set; } = null!;


        /// <summary>
        /// Create a UserRunner resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserRunner(string name, UserRunnerArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/userRunner:UserRunner", name, args ?? new UserRunnerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserRunner(string name, Input<string> id, UserRunnerState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/userRunner:UserRunner", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserRunner resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserRunner Get(string name, Input<string> id, UserRunnerState? state = null, CustomResourceOptions? options = null)
        {
            return new UserRunner(name, id, state, options);
        }
    }

    public sealed class UserRunnerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access level of the runner. Valid values are: `not_protected`, `ref_protected`.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// Description of the runner.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the group that the runner is created in. Required if runner*type is group*type.
        /// </summary>
        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        /// <summary>
        /// Specifies if the runner should be locked for the current project.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Free-form maintenance notes for the runner (1024 characters)
        /// </summary>
        [Input("maintenanceNote")]
        public Input<string>? MaintenanceNote { get; set; }

        /// <summary>
        /// Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
        /// </summary>
        [Input("maximumTimeout")]
        public Input<int>? MaximumTimeout { get; set; }

        /// <summary>
        /// Specifies if the runner should ignore new jobs.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// The ID of the project that the runner is created in. Required if runner*type is project*type.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The scope of the runner. Valid values are: `instance_type`, `group_type`, `project_type`.
        /// </summary>
        [Input("runnerType", required: true)]
        public Input<string> RunnerType { get; set; } = null!;

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// A list of runner tags.
        /// </summary>
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        /// <summary>
        /// Specifies if the runner should handle untagged jobs.
        /// </summary>
        [Input("untagged")]
        public Input<bool>? Untagged { get; set; }

        public UserRunnerArgs()
        {
        }
        public static new UserRunnerArgs Empty => new UserRunnerArgs();
    }

    public sealed class UserRunnerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access level of the runner. Valid values are: `not_protected`, `ref_protected`.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// Description of the runner.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the group that the runner is created in. Required if runner*type is group*type.
        /// </summary>
        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        /// <summary>
        /// Specifies if the runner should be locked for the current project.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Free-form maintenance notes for the runner (1024 characters)
        /// </summary>
        [Input("maintenanceNote")]
        public Input<string>? MaintenanceNote { get; set; }

        /// <summary>
        /// Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
        /// </summary>
        [Input("maximumTimeout")]
        public Input<int>? MaximumTimeout { get; set; }

        /// <summary>
        /// Specifies if the runner should ignore new jobs.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// The ID of the project that the runner is created in. Required if runner*type is project*type.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The scope of the runner. Valid values are: `instance_type`, `group_type`, `project_type`.
        /// </summary>
        [Input("runnerType")]
        public Input<string>? RunnerType { get; set; }

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// A list of runner tags.
        /// </summary>
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The authentication token to use when setting up a new runner with this configuration. This value cannot be imported.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies if the runner should handle untagged jobs.
        /// </summary>
        [Input("untagged")]
        public Input<bool>? Untagged { get; set; }

        public UserRunnerState()
        {
        }
        public static new UserRunnerState Empty => new UserRunnerState();
    }
}
