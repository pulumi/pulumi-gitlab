// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectApprovalRules
    {
        /// <summary>
        /// The `gitlab.getProjectApprovalRules` data source retrieves all approval rules of a given project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_request_approvals/#list-all-approval-rules-for-a-project)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byProjectId = GitLab.GetProjectApprovalRules.Invoke(new()
        ///     {
        ///         Project = "12345",
        ///     });
        /// 
        ///     var byProjectPath = GitLab.GetProjectApprovalRules.Invoke(new()
        ///     {
        ///         Project = "my-group/my-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectApprovalRulesResult> InvokeAsync(GetProjectApprovalRulesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectApprovalRulesResult>("gitlab:index/getProjectApprovalRules:getProjectApprovalRules", args ?? new GetProjectApprovalRulesArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectApprovalRules` data source retrieves all approval rules of a given project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_request_approvals/#list-all-approval-rules-for-a-project)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byProjectId = GitLab.GetProjectApprovalRules.Invoke(new()
        ///     {
        ///         Project = "12345",
        ///     });
        /// 
        ///     var byProjectPath = GitLab.GetProjectApprovalRules.Invoke(new()
        ///     {
        ///         Project = "my-group/my-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectApprovalRulesResult> Invoke(GetProjectApprovalRulesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectApprovalRulesResult>("gitlab:index/getProjectApprovalRules:getProjectApprovalRules", args ?? new GetProjectApprovalRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectApprovalRules` data source retrieves all approval rules of a given project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/merge_request_approvals/#list-all-approval-rules-for-a-project)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byProjectId = GitLab.GetProjectApprovalRules.Invoke(new()
        ///     {
        ///         Project = "12345",
        ///     });
        /// 
        ///     var byProjectPath = GitLab.GetProjectApprovalRules.Invoke(new()
        ///     {
        ///         Project = "my-group/my-project",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectApprovalRulesResult> Invoke(GetProjectApprovalRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectApprovalRulesResult>("gitlab:index/getProjectApprovalRules:getProjectApprovalRules", args ?? new GetProjectApprovalRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectApprovalRulesArgs : global::Pulumi.InvokeArgs
    {
        [Input("approvalRules")]
        private List<Inputs.GetProjectApprovalRulesApprovalRuleArgs>? _approvalRules;

        /// <summary>
        /// A list of project approval rules, as defined below.
        /// </summary>
        public List<Inputs.GetProjectApprovalRulesApprovalRuleArgs> ApprovalRules
        {
            get => _approvalRules ?? (_approvalRules = new List<Inputs.GetProjectApprovalRulesApprovalRuleArgs>());
            set => _approvalRules = value;
        }

        /// <summary>
        /// The ID or path with namespace that identifies the project.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetProjectApprovalRulesArgs()
        {
        }
        public static new GetProjectApprovalRulesArgs Empty => new GetProjectApprovalRulesArgs();
    }

    public sealed class GetProjectApprovalRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("approvalRules")]
        private InputList<Inputs.GetProjectApprovalRulesApprovalRuleInputArgs>? _approvalRules;

        /// <summary>
        /// A list of project approval rules, as defined below.
        /// </summary>
        public InputList<Inputs.GetProjectApprovalRulesApprovalRuleInputArgs> ApprovalRules
        {
            get => _approvalRules ?? (_approvalRules = new InputList<Inputs.GetProjectApprovalRulesApprovalRuleInputArgs>());
            set => _approvalRules = value;
        }

        /// <summary>
        /// The ID or path with namespace that identifies the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetProjectApprovalRulesInvokeArgs()
        {
        }
        public static new GetProjectApprovalRulesInvokeArgs Empty => new GetProjectApprovalRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectApprovalRulesResult
    {
        /// <summary>
        /// A list of project approval rules, as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectApprovalRulesApprovalRuleResult> ApprovalRules;
        public readonly string Id;
        /// <summary>
        /// The ID or path with namespace that identifies the project.
        /// </summary>
        public readonly string Project;

        [OutputConstructor]
        private GetProjectApprovalRulesResult(
            ImmutableArray<Outputs.GetProjectApprovalRulesApprovalRuleResult> approvalRules,

            string id,

            string project)
        {
            ApprovalRules = approvalRules;
            Id = id;
            Project = project;
        }
    }
}
