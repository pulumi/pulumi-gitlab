// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.GroupDependencyProxy` resource allows managing the group docker dependency proxy. More than one dependency proxy per group will conflict with each other.
    /// 
    /// If you're looking to manage the project-level package dependency proxy, see the `gitlab_project_package_registry_proxy` resource instead.
    /// 
    /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/api/graphql/reference/#mutationupdatedependencyproxysettings)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new GitLab.GroupDependencyProxy("foo", new()
    ///     {
    ///         Group = "1234",
    ///         Enabled = true,
    ///         Identity = "newidentity",
    ///         Secret = "somesecret",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_group_dependency_proxy`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_group_dependency_proxy.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// You can import a group dependency proxy using the group id. e.g. `{group-id}`
    /// 
    /// "secret" will not populate when importing the dependency proxy, but will still
    /// 
    /// be required in the configuration.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/groupDependencyProxy:GroupDependencyProxy foo 42
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/groupDependencyProxy:GroupDependencyProxy")]
    public partial class GroupDependencyProxy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether the proxy is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID or URL-encoded path of the group.
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
        /// </summary>
        [Output("identity")]
        public Output<string> Identity { get; private set; } = null!;

        /// <summary>
        /// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;


        /// <summary>
        /// Create a GroupDependencyProxy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupDependencyProxy(string name, GroupDependencyProxyArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/groupDependencyProxy:GroupDependencyProxy", name, args ?? new GroupDependencyProxyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupDependencyProxy(string name, Input<string> id, GroupDependencyProxyState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/groupDependencyProxy:GroupDependencyProxy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupDependencyProxy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupDependencyProxy Get(string name, Input<string> id, GroupDependencyProxyState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupDependencyProxy(name, id, state, options);
        }
    }

    public sealed class GroupDependencyProxyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the proxy is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the group.
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        /// <summary>
        /// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
        /// </summary>
        [Input("identity")]
        public Input<string>? Identity { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GroupDependencyProxyArgs()
        {
        }
        public static new GroupDependencyProxyArgs Empty => new GroupDependencyProxyArgs();
    }

    public sealed class GroupDependencyProxyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the proxy is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID or URL-encoded path of the group.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
        /// </summary>
        [Input("identity")]
        public Input<string>? Identity { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GroupDependencyProxyState()
        {
        }
        public static new GroupDependencyProxyState Empty => new GroupDependencyProxyState();
    }
}
