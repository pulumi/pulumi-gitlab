// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Set the 2FA settings
    ///     var @this = new GitLab.ApplicationSettings("this", new()
    ///     {
    ///         RequireTwoFactorAuthentication = true,
    ///         TwoFactorGracePeriod = 24,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/applicationSettings:ApplicationSettings")]
    public partial class ApplicationSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        /// </summary>
        [Output("abuseNotificationEmail")]
        public Output<string> AbuseNotificationEmail { get; private set; } = null!;

        /// <summary>
        /// Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        /// </summary>
        [Output("adminMode")]
        public Output<bool> AdminMode { get; private set; } = null!;

        /// <summary>
        /// Where to redirect users after logout.
        /// </summary>
        [Output("afterSignOutPath")]
        public Output<string> AfterSignOutPath { get; private set; } = null!;

        /// <summary>
        /// Text shown to the user after signing up.
        /// </summary>
        [Output("afterSignUpText")]
        public Output<string> AfterSignUpText { get; private set; } = null!;

        /// <summary>
        /// API key for Akismet spam protection.
        /// </summary>
        [Output("akismetApiKey")]
        public Output<string> AkismetApiKey { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        /// </summary>
        [Output("akismetEnabled")]
        public Output<bool> AkismetEnabled { get; private set; } = null!;

        /// <summary>
        /// Set to true to allow group owners to manage LDAP.
        /// </summary>
        [Output("allowGroupOwnersToManageLdap")]
        public Output<bool> AllowGroupOwnersToManageLdap { get; private set; } = null!;

        /// <summary>
        /// Allow requests to the local network from system hooks.
        /// </summary>
        [Output("allowLocalRequestsFromSystemHooks")]
        public Output<bool> AllowLocalRequestsFromSystemHooks { get; private set; } = null!;

        /// <summary>
        /// Allow requests to the local network from web hooks and services.
        /// </summary>
        [Output("allowLocalRequestsFromWebHooksAndServices")]
        public Output<bool> AllowLocalRequestsFromWebHooksAndServices { get; private set; } = null!;

        /// <summary>
        /// Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        /// </summary>
        [Output("archiveBuildsInHumanReadable")]
        public Output<string> ArchiveBuildsInHumanReadable { get; private set; } = null!;

        /// <summary>
        /// Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        /// </summary>
        [Output("assetProxyAllowlists")]
        public Output<ImmutableArray<string>> AssetProxyAllowlists { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        /// </summary>
        [Output("assetProxyEnabled")]
        public Output<bool> AssetProxyEnabled { get; private set; } = null!;

        /// <summary>
        /// Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        /// </summary>
        [Output("assetProxySecretKey")]
        public Output<string> AssetProxySecretKey { get; private set; } = null!;

        /// <summary>
        /// URL of the asset proxy server. GitLab restart is required to apply changes.
        /// </summary>
        [Output("assetProxyUrl")]
        public Output<string> AssetProxyUrl { get; private set; } = null!;

        /// <summary>
        /// By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        /// </summary>
        [Output("authorizedKeysEnabled")]
        public Output<bool> AuthorizedKeysEnabled { get; private set; } = null!;

        /// <summary>
        /// Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        /// </summary>
        [Output("autoDevopsDomain")]
        public Output<string> AutoDevopsDomain { get; private set; } = null!;

        /// <summary>
        /// Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        /// </summary>
        [Output("autoDevopsEnabled")]
        public Output<bool> AutoDevopsEnabled { get; private set; } = null!;

        /// <summary>
        /// Enabling this permits automatic allocation of purchased storage in a namespace.
        /// </summary>
        [Output("automaticPurchasedStorageAllocation")]
        public Output<bool> AutomaticPurchasedStorageAllocation { get; private set; } = null!;

        /// <summary>
        /// Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        /// </summary>
        [Output("checkNamespacePlan")]
        public Output<bool> CheckNamespacePlan { get; private set; } = null!;

        /// <summary>
        /// Custom hostname (for private commit emails).
        /// </summary>
        [Output("commitEmailHostname")]
        public Output<string> CommitEmailHostname { get; private set; } = null!;

        /// <summary>
        /// Enable cleanup policies for all projects.
        /// </summary>
        [Output("containerExpirationPoliciesEnableHistoricEntries")]
        public Output<bool> ContainerExpirationPoliciesEnableHistoricEntries { get; private set; } = null!;

        /// <summary>
        /// The maximum number of tags that can be deleted in a single execution of cleanup policies.
        /// </summary>
        [Output("containerRegistryCleanupTagsServiceMaxListSize")]
        public Output<int> ContainerRegistryCleanupTagsServiceMaxListSize { get; private set; } = null!;

        /// <summary>
        /// The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        /// </summary>
        [Output("containerRegistryDeleteTagsServiceTimeout")]
        public Output<int> ContainerRegistryDeleteTagsServiceTimeout { get; private set; } = null!;

        /// <summary>
        /// Caching during the execution of cleanup policies.
        /// </summary>
        [Output("containerRegistryExpirationPoliciesCaching")]
        public Output<bool> ContainerRegistryExpirationPoliciesCaching { get; private set; } = null!;

        /// <summary>
        /// Number of workers for cleanup policies.
        /// </summary>
        [Output("containerRegistryExpirationPoliciesWorkerCapacity")]
        public Output<int> ContainerRegistryExpirationPoliciesWorkerCapacity { get; private set; } = null!;

        /// <summary>
        /// Container Registry token duration in minutes.
        /// </summary>
        [Output("containerRegistryTokenExpireDelay")]
        public Output<int> ContainerRegistryTokenExpireDelay { get; private set; } = null!;

        /// <summary>
        /// Enable automatic deactivation of dormant users.
        /// </summary>
        [Output("deactivateDormantUsers")]
        public Output<bool> DeactivateDormantUsers { get; private set; } = null!;

        /// <summary>
        /// Set the default expiration time for each job’s artifacts.
        /// </summary>
        [Output("defaultArtifactsExpireIn")]
        public Output<string> DefaultArtifactsExpireIn { get; private set; } = null!;

        /// <summary>
        /// Instance-level custom initial branch name (introduced in GitLab 13.2).
        /// </summary>
        [Output("defaultBranchName")]
        public Output<string> DefaultBranchName { get; private set; } = null!;

        /// <summary>
        /// Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        /// </summary>
        [Output("defaultBranchProtection")]
        public Output<int> DefaultBranchProtection { get; private set; } = null!;

        /// <summary>
        /// Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        /// </summary>
        [Output("defaultCiConfigPath")]
        public Output<string> DefaultCiConfigPath { get; private set; } = null!;

        /// <summary>
        /// What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Output("defaultGroupVisibility")]
        public Output<string> DefaultGroupVisibility { get; private set; } = null!;

        /// <summary>
        /// Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        /// </summary>
        [Output("defaultProjectCreation")]
        public Output<int> DefaultProjectCreation { get; private set; } = null!;

        /// <summary>
        /// What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Output("defaultProjectVisibility")]
        public Output<string> DefaultProjectVisibility { get; private set; } = null!;

        /// <summary>
        /// Project limit per user. Default is 100000.
        /// </summary>
        [Output("defaultProjectsLimit")]
        public Output<int> DefaultProjectsLimit { get; private set; } = null!;

        /// <summary>
        /// What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Output("defaultSnippetVisibility")]
        public Output<string> DefaultSnippetVisibility { get; private set; } = null!;

        /// <summary>
        /// Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        /// </summary>
        [Output("delayedGroupDeletion")]
        public Output<bool> DelayedGroupDeletion { get; private set; } = null!;

        /// <summary>
        /// Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        /// </summary>
        [Output("delayedProjectDeletion")]
        public Output<bool> DelayedProjectDeletion { get; private set; } = null!;

        /// <summary>
        /// Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
        /// </summary>
        [Output("deleteInactiveProjects")]
        public Output<bool> DeleteInactiveProjects { get; private set; } = null!;

        /// <summary>
        /// The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        /// </summary>
        [Output("deletionAdjournedPeriod")]
        public Output<int> DeletionAdjournedPeriod { get; private set; } = null!;

        /// <summary>
        /// Maximum files in a diff.
        /// </summary>
        [Output("diffMaxFiles")]
        public Output<int> DiffMaxFiles { get; private set; } = null!;

        /// <summary>
        /// Maximum lines in a diff.
        /// </summary>
        [Output("diffMaxLines")]
        public Output<int> DiffMaxLines { get; private set; } = null!;

        /// <summary>
        /// Maximum diff patch size, in bytes.
        /// </summary>
        [Output("diffMaxPatchBytes")]
        public Output<int> DiffMaxPatchBytes { get; private set; } = null!;

        /// <summary>
        /// Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        /// </summary>
        [Output("disableFeedToken")]
        public Output<bool> DisableFeedToken { get; private set; } = null!;

        /// <summary>
        /// Disabled OAuth sign-in sources.
        /// </summary>
        [Output("disabledOauthSignInSources")]
        public Output<ImmutableArray<string>> DisabledOauthSignInSources { get; private set; } = null!;

        /// <summary>
        /// Enforce DNS rebinding attack protection.
        /// </summary>
        [Output("dnsRebindingProtectionEnabled")]
        public Output<bool> DnsRebindingProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
        /// </summary>
        [Output("domainAllowlists")]
        public Output<ImmutableArray<string>> DomainAllowlists { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        /// </summary>
        [Output("domainDenylistEnabled")]
        public Output<bool> DomainDenylistEnabled { get; private set; } = null!;

        /// <summary>
        /// Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        /// </summary>
        [Output("domainDenylists")]
        public Output<ImmutableArray<string>> DomainDenylists { get; private set; } = null!;

        /// <summary>
        /// The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
        /// </summary>
        [Output("dsaKeyRestriction")]
        public Output<int> DsaKeyRestriction { get; private set; } = null!;

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
        /// </summary>
        [Output("ecdsaKeyRestriction")]
        public Output<int> EcdsaKeyRestriction { get; private set; } = null!;

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
        /// </summary>
        [Output("ecdsaSkKeyRestriction")]
        public Output<int> EcdsaSkKeyRestriction { get; private set; } = null!;

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
        /// </summary>
        [Output("ed25519KeyRestriction")]
        public Output<int> Ed25519KeyRestriction { get; private set; } = null!;

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
        /// </summary>
        [Output("ed25519SkKeyRestriction")]
        public Output<int> Ed25519SkKeyRestriction { get; private set; } = null!;

        /// <summary>
        /// AWS IAM access key ID.
        /// </summary>
        [Output("eksAccessKeyId")]
        public Output<string> EksAccessKeyId { get; private set; } = null!;

        /// <summary>
        /// Amazon account ID.
        /// </summary>
        [Output("eksAccountId")]
        public Output<string> EksAccountId { get; private set; } = null!;

        /// <summary>
        /// Enable integration with Amazon EKS.
        /// </summary>
        [Output("eksIntegrationEnabled")]
        public Output<bool> EksIntegrationEnabled { get; private set; } = null!;

        /// <summary>
        /// AWS IAM secret access key.
        /// </summary>
        [Output("eksSecretAccessKey")]
        public Output<string> EksSecretAccessKey { get; private set; } = null!;

        /// <summary>
        /// Enable the use of AWS hosted Elasticsearch.
        /// </summary>
        [Output("elasticsearchAws")]
        public Output<bool> ElasticsearchAws { get; private set; } = null!;

        /// <summary>
        /// AWS IAM access key.
        /// </summary>
        [Output("elasticsearchAwsAccessKey")]
        public Output<string> ElasticsearchAwsAccessKey { get; private set; } = null!;

        /// <summary>
        /// The AWS region the Elasticsearch domain is configured.
        /// </summary>
        [Output("elasticsearchAwsRegion")]
        public Output<string> ElasticsearchAwsRegion { get; private set; } = null!;

        /// <summary>
        /// AWS IAM secret access key.
        /// </summary>
        [Output("elasticsearchAwsSecretAccessKey")]
        public Output<string> ElasticsearchAwsSecretAccessKey { get; private set; } = null!;

        /// <summary>
        /// Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        /// </summary>
        [Output("elasticsearchIndexedFieldLengthLimit")]
        public Output<int> ElasticsearchIndexedFieldLengthLimit { get; private set; } = null!;

        /// <summary>
        /// Maximum size of repository and wiki files that are indexed by Elasticsearch.
        /// </summary>
        [Output("elasticsearchIndexedFileSizeLimitKb")]
        public Output<int> ElasticsearchIndexedFileSizeLimitKb { get; private set; } = null!;

        /// <summary>
        /// Enable Elasticsearch indexing.
        /// </summary>
        [Output("elasticsearchIndexing")]
        public Output<bool> ElasticsearchIndexing { get; private set; } = null!;

        /// <summary>
        /// Limit Elasticsearch to index certain namespaces and projects.
        /// </summary>
        [Output("elasticsearchLimitIndexing")]
        public Output<bool> ElasticsearchLimitIndexing { get; private set; } = null!;

        /// <summary>
        /// Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        /// </summary>
        [Output("elasticsearchMaxBulkConcurrency")]
        public Output<int> ElasticsearchMaxBulkConcurrency { get; private set; } = null!;

        /// <summary>
        /// Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        /// </summary>
        [Output("elasticsearchMaxBulkSizeMb")]
        public Output<int> ElasticsearchMaxBulkSizeMb { get; private set; } = null!;

        /// <summary>
        /// The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        /// </summary>
        [Output("elasticsearchNamespaceIds")]
        public Output<ImmutableArray<string>> ElasticsearchNamespaceIds { get; private set; } = null!;

        /// <summary>
        /// The password of your Elasticsearch instance.
        /// </summary>
        [Output("elasticsearchPassword")]
        public Output<string> ElasticsearchPassword { get; private set; } = null!;

        /// <summary>
        /// The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        /// </summary>
        [Output("elasticsearchProjectIds")]
        public Output<ImmutableArray<string>> ElasticsearchProjectIds { get; private set; } = null!;

        /// <summary>
        /// Enable Elasticsearch search.
        /// </summary>
        [Output("elasticsearchSearch")]
        public Output<bool> ElasticsearchSearch { get; private set; } = null!;

        /// <summary>
        /// The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        /// </summary>
        [Output("elasticsearchUrls")]
        public Output<ImmutableArray<string>> ElasticsearchUrls { get; private set; } = null!;

        /// <summary>
        /// The username of your Elasticsearch instance.
        /// </summary>
        [Output("elasticsearchUsername")]
        public Output<string> ElasticsearchUsername { get; private set; } = null!;

        /// <summary>
        /// Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        /// </summary>
        [Output("emailAdditionalText")]
        public Output<string> EmailAdditionalText { get; private set; } = null!;

        /// <summary>
        /// Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        /// </summary>
        [Output("emailAuthorInBody")]
        public Output<bool> EmailAuthorInBody { get; private set; } = null!;

        /// <summary>
        /// Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        /// </summary>
        [Output("enabledGitAccessProtocol")]
        public Output<string> EnabledGitAccessProtocol { get; private set; } = null!;

        /// <summary>
        /// Enabling this permits enforcement of namespace storage limits.
        /// </summary>
        [Output("enforceNamespaceStorageLimit")]
        public Output<bool> EnforceNamespaceStorageLimit { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: terms) Enforce application ToS to all users.
        /// </summary>
        [Output("enforceTerms")]
        public Output<bool> EnforceTerms { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        /// </summary>
        [Output("externalAuthClientCert")]
        public Output<string> ExternalAuthClientCert { get; private set; } = null!;

        /// <summary>
        /// Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        /// </summary>
        [Output("externalAuthClientKey")]
        public Output<string> ExternalAuthClientKey { get; private set; } = null!;

        /// <summary>
        /// Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        /// </summary>
        [Output("externalAuthClientKeyPass")]
        public Output<string> ExternalAuthClientKeyPass { get; private set; } = null!;

        /// <summary>
        /// The default classification label to use when requesting authorization and no classification label has been specified on the project.
        /// </summary>
        [Output("externalAuthorizationServiceDefaultLabel")]
        public Output<string> ExternalAuthorizationServiceDefaultLabel { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        /// </summary>
        [Output("externalAuthorizationServiceEnabled")]
        public Output<bool> ExternalAuthorizationServiceEnabled { get; private set; } = null!;

        /// <summary>
        /// The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        /// </summary>
        [Output("externalAuthorizationServiceTimeout")]
        public Output<double> ExternalAuthorizationServiceTimeout { get; private set; } = null!;

        /// <summary>
        /// URL to which authorization requests are directed.
        /// </summary>
        [Output("externalAuthorizationServiceUrl")]
        public Output<string> ExternalAuthorizationServiceUrl { get; private set; } = null!;

        /// <summary>
        /// How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        /// </summary>
        [Output("externalPipelineValidationServiceTimeout")]
        public Output<int> ExternalPipelineValidationServiceTimeout { get; private set; } = null!;

        /// <summary>
        /// Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        /// </summary>
        [Output("externalPipelineValidationServiceToken")]
        public Output<string> ExternalPipelineValidationServiceToken { get; private set; } = null!;

        /// <summary>
        /// URL to use for pipeline validation requests.
        /// </summary>
        [Output("externalPipelineValidationServiceUrl")]
        public Output<string> ExternalPipelineValidationServiceUrl { get; private set; } = null!;

        /// <summary>
        /// The ID of a project to load custom file templates from.
        /// </summary>
        [Output("fileTemplateProjectId")]
        public Output<int> FileTemplateProjectId { get; private set; } = null!;

        /// <summary>
        /// Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
        /// </summary>
        [Output("firstDayOfWeek")]
        public Output<int> FirstDayOfWeek { get; private set; } = null!;

        /// <summary>
        /// Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        /// </summary>
        [Output("geoNodeAllowedIps")]
        public Output<string> GeoNodeAllowedIps { get; private set; } = null!;

        /// <summary>
        /// The amount of seconds after which a request to get a secondary node status times out.
        /// </summary>
        [Output("geoStatusTimeout")]
        public Output<int> GeoStatusTimeout { get; private set; } = null!;

        /// <summary>
        /// List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
        /// </summary>
        [Output("gitRateLimitUsersAllowlists")]
        public Output<ImmutableArray<string>> GitRateLimitUsersAllowlists { get; private set; } = null!;

        /// <summary>
        /// Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        /// </summary>
        [Output("gitTwoFactorSessionExpiry")]
        public Output<int> GitTwoFactorSessionExpiry { get; private set; } = null!;

        /// <summary>
        /// Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        /// </summary>
        [Output("gitalyTimeoutDefault")]
        public Output<int> GitalyTimeoutDefault { get; private set; } = null!;

        /// <summary>
        /// Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        /// </summary>
        [Output("gitalyTimeoutFast")]
        public Output<int> GitalyTimeoutFast { get; private set; } = null!;

        /// <summary>
        /// Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        /// </summary>
        [Output("gitalyTimeoutMedium")]
        public Output<int> GitalyTimeoutMedium { get; private set; } = null!;

        /// <summary>
        /// Enable Grafana.
        /// </summary>
        [Output("grafanaEnabled")]
        public Output<bool> GrafanaEnabled { get; private set; } = null!;

        /// <summary>
        /// Grafana URL.
        /// </summary>
        [Output("grafanaUrl")]
        public Output<string> GrafanaUrl { get; private set; } = null!;

        /// <summary>
        /// Enable Gravatar.
        /// </summary>
        [Output("gravatarEnabled")]
        public Output<bool> GravatarEnabled { get; private set; } = null!;

        /// <summary>
        /// Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        /// </summary>
        [Output("hashedStorageEnabled")]
        public Output<bool> HashedStorageEnabled { get; private set; } = null!;

        /// <summary>
        /// Hide marketing-related entries from help.
        /// </summary>
        [Output("helpPageHideCommercialContent")]
        public Output<bool> HelpPageHideCommercialContent { get; private set; } = null!;

        /// <summary>
        /// Alternate support URL for help page and help dropdown.
        /// </summary>
        [Output("helpPageSupportUrl")]
        public Output<string> HelpPageSupportUrl { get; private set; } = null!;

        /// <summary>
        /// Custom text displayed on the help page.
        /// </summary>
        [Output("helpPageText")]
        public Output<string> HelpPageText { get; private set; } = null!;

        /// <summary>
        /// GitLab server administrator information.
        /// </summary>
        [Output("helpText")]
        public Output<string> HelpText { get; private set; } = null!;

        /// <summary>
        /// Do not display offers from third parties in GitLab.
        /// </summary>
        [Output("hideThirdPartyOffers")]
        public Output<bool> HideThirdPartyOffers { get; private set; } = null!;

        /// <summary>
        /// Redirect to this URL when not logged in.
        /// </summary>
        [Output("homePageUrl")]
        public Output<string> HomePageUrl { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        /// </summary>
        [Output("housekeepingEnabled")]
        public Output<bool> HousekeepingEnabled { get; private set; } = null!;

        /// <summary>
        /// Number of Git pushes after which an incremental git repack is run.
        /// </summary>
        [Output("housekeepingFullRepackPeriod")]
        public Output<int> HousekeepingFullRepackPeriod { get; private set; } = null!;

        /// <summary>
        /// Number of Git pushes after which git gc is run.
        /// </summary>
        [Output("housekeepingGcPeriod")]
        public Output<int> HousekeepingGcPeriod { get; private set; } = null!;

        /// <summary>
        /// Number of Git pushes after which an incremental git repack is run.
        /// </summary>
        [Output("housekeepingIncrementalRepackPeriod")]
        public Output<int> HousekeepingIncrementalRepackPeriod { get; private set; } = null!;

        /// <summary>
        /// Enable HTML emails.
        /// </summary>
        [Output("htmlEmailsEnabled")]
        public Output<bool> HtmlEmailsEnabled { get; private set; } = null!;

        /// <summary>
        /// Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
        /// </summary>
        [Output("importSources")]
        public Output<ImmutableArray<string>> ImportSources { get; private set; } = null!;

        /// <summary>
        /// Enable in-product marketing emails. Enabled by default.
        /// </summary>
        [Output("inProductMarketingEmailsEnabled")]
        public Output<bool> InProductMarketingEmailsEnabled { get; private set; } = null!;

        /// <summary>
        /// If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Output("inactiveProjectsDeleteAfterMonths")]
        public Output<int> InactiveProjectsDeleteAfterMonths { get; private set; } = null!;

        /// <summary>
        /// If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Output("inactiveProjectsMinSizeMb")]
        public Output<int> InactiveProjectsMinSizeMb { get; private set; } = null!;

        /// <summary>
        /// If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Output("inactiveProjectsSendWarningEmailAfterMonths")]
        public Output<int> InactiveProjectsSendWarningEmailAfterMonths { get; private set; } = null!;

        /// <summary>
        /// Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
        /// </summary>
        [Output("invisibleCaptchaEnabled")]
        public Output<bool> InvisibleCaptchaEnabled { get; private set; } = null!;

        /// <summary>
        /// Max number of issue creation requests per minute per user. Disabled by default.
        /// </summary>
        [Output("issuesCreateLimit")]
        public Output<int> IssuesCreateLimit { get; private set; } = null!;

        /// <summary>
        /// Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
        /// </summary>
        [Output("keepLatestArtifact")]
        public Output<bool> KeepLatestArtifact { get; private set; } = null!;

        /// <summary>
        /// Increase this value when any cached Markdown should be invalidated.
        /// </summary>
        [Output("localMarkdownVersion")]
        public Output<int> LocalMarkdownVersion { get; private set; } = null!;

        /// <summary>
        /// Enable Mailgun event receiver.
        /// </summary>
        [Output("mailgunEventsEnabled")]
        public Output<bool> MailgunEventsEnabled { get; private set; } = null!;

        /// <summary>
        /// The Mailgun HTTP webhook signing key for receiving events from webhook.
        /// </summary>
        [Output("mailgunSigningKey")]
        public Output<string> MailgunSigningKey { get; private set; } = null!;

        /// <summary>
        /// When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        /// </summary>
        [Output("maintenanceMode")]
        public Output<bool> MaintenanceMode { get; private set; } = null!;

        /// <summary>
        /// Message displayed when instance is in maintenance mode.
        /// </summary>
        [Output("maintenanceModeMessage")]
        public Output<string> MaintenanceModeMessage { get; private set; } = null!;

        /// <summary>
        /// Maximum artifacts size in MB.
        /// </summary>
        [Output("maxArtifactsSize")]
        public Output<int> MaxArtifactsSize { get; private set; } = null!;

        /// <summary>
        /// Limit attachment size in MB.
        /// </summary>
        [Output("maxAttachmentSize")]
        public Output<int> MaxAttachmentSize { get; private set; } = null!;

        /// <summary>
        /// Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
        /// </summary>
        [Output("maxExportSize")]
        public Output<int> MaxExportSize { get; private set; } = null!;

        /// <summary>
        /// Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
        /// </summary>
        [Output("maxImportSize")]
        public Output<int> MaxImportSize { get; private set; } = null!;

        /// <summary>
        /// Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        /// </summary>
        [Output("maxNumberOfRepositoryDownloads")]
        public Output<int> MaxNumberOfRepositoryDownloads { get; private set; } = null!;

        /// <summary>
        /// Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        /// </summary>
        [Output("maxNumberOfRepositoryDownloadsWithinTimePeriod")]
        public Output<int> MaxNumberOfRepositoryDownloadsWithinTimePeriod { get; private set; } = null!;

        /// <summary>
        /// Maximum size of pages repositories in MB.
        /// </summary>
        [Output("maxPagesSize")]
        public Output<int> MaxPagesSize { get; private set; } = null!;

        /// <summary>
        /// Maximum allowable lifetime for access tokens in days.
        /// </summary>
        [Output("maxPersonalAccessTokenLifetime")]
        public Output<int> MaxPersonalAccessTokenLifetime { get; private set; } = null!;

        /// <summary>
        /// Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        /// </summary>
        [Output("maxSshKeyLifetime")]
        public Output<int> MaxSshKeyLifetime { get; private set; } = null!;

        /// <summary>
        /// A method call is only tracked when it takes longer than the given amount of milliseconds.
        /// </summary>
        [Output("metricsMethodCallThreshold")]
        public Output<int> MetricsMethodCallThreshold { get; private set; } = null!;

        /// <summary>
        /// Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        /// </summary>
        [Output("mirrorAvailable")]
        public Output<bool> MirrorAvailable { get; private set; } = null!;

        /// <summary>
        /// Minimum capacity to be available before scheduling more mirrors preemptively.
        /// </summary>
        [Output("mirrorCapacityThreshold")]
        public Output<int> MirrorCapacityThreshold { get; private set; } = null!;

        /// <summary>
        /// Maximum number of mirrors that can be synchronizing at the same time.
        /// </summary>
        [Output("mirrorMaxCapacity")]
        public Output<int> MirrorMaxCapacity { get; private set; } = null!;

        /// <summary>
        /// Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        /// </summary>
        [Output("mirrorMaxDelay")]
        public Output<int> MirrorMaxDelay { get; private set; } = null!;

        /// <summary>
        /// Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        /// </summary>
        [Output("npmPackageRequestsForwarding")]
        public Output<bool> NpmPackageRequestsForwarding { get; private set; } = null!;

        /// <summary>
        /// Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        /// </summary>
        [Output("outboundLocalRequestsWhitelists")]
        public Output<ImmutableArray<string>> OutboundLocalRequestsWhitelists { get; private set; } = null!;

        /// <summary>
        /// Number of workers assigned to the packages cleanup policies.
        /// </summary>
        [Output("packageRegistryCleanupPoliciesWorkerCapacity")]
        public Output<int> PackageRegistryCleanupPoliciesWorkerCapacity { get; private set; } = null!;

        /// <summary>
        /// Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        /// </summary>
        [Output("pagesDomainVerificationEnabled")]
        public Output<bool> PagesDomainVerificationEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
        /// </summary>
        [Output("passwordAuthenticationEnabledForGit")]
        public Output<bool> PasswordAuthenticationEnabledForGit { get; private set; } = null!;

        /// <summary>
        /// Enable authentication for the web interface via a GitLab account password. Default is true.
        /// </summary>
        [Output("passwordAuthenticationEnabledForWeb")]
        public Output<bool> PasswordAuthenticationEnabledForWeb { get; private set; } = null!;

        /// <summary>
        /// Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        /// </summary>
        [Output("passwordLowercaseRequired")]
        public Output<bool> PasswordLowercaseRequired { get; private set; } = null!;

        /// <summary>
        /// Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        /// </summary>
        [Output("passwordNumberRequired")]
        public Output<bool> PasswordNumberRequired { get; private set; } = null!;

        /// <summary>
        /// Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        /// </summary>
        [Output("passwordSymbolRequired")]
        public Output<bool> PasswordSymbolRequired { get; private set; } = null!;

        /// <summary>
        /// Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        /// </summary>
        [Output("passwordUppercaseRequired")]
        public Output<bool> PasswordUppercaseRequired { get; private set; } = null!;

        /// <summary>
        /// Path of the group that is allowed to toggle the performance bar.
        /// </summary>
        [Output("performanceBarAllowedGroupPath")]
        public Output<string> PerformanceBarAllowedGroupPath { get; private set; } = null!;

        /// <summary>
        /// Prefix for all generated personal access tokens.
        /// </summary>
        [Output("personalAccessTokenPrefix")]
        public Output<string> PersonalAccessTokenPrefix { get; private set; } = null!;

        /// <summary>
        /// Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
        /// </summary>
        [Output("pipelineLimitPerProjectUserSha")]
        public Output<int> PipelineLimitPerProjectUserSha { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
        /// </summary>
        [Output("plantumlEnabled")]
        public Output<bool> PlantumlEnabled { get; private set; } = null!;

        /// <summary>
        /// The PlantUML instance URL for integration.
        /// </summary>
        [Output("plantumlUrl")]
        public Output<string> PlantumlUrl { get; private set; } = null!;

        /// <summary>
        /// Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        /// </summary>
        [Output("pollingIntervalMultiplier")]
        public Output<double> PollingIntervalMultiplier { get; private set; } = null!;

        /// <summary>
        /// Enable project export.
        /// </summary>
        [Output("projectExportEnabled")]
        public Output<bool> ProjectExportEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable Prometheus metrics.
        /// </summary>
        [Output("prometheusMetricsEnabled")]
        public Output<bool> PrometheusMetricsEnabled { get; private set; } = null!;

        /// <summary>
        /// CI/CD variables are protected by default.
        /// </summary>
        [Output("protectedCiVariables")]
        public Output<bool> ProtectedCiVariables { get; private set; } = null!;

        /// <summary>
        /// Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        /// </summary>
        [Output("pushEventActivitiesLimit")]
        public Output<int> PushEventActivitiesLimit { get; private set; } = null!;

        /// <summary>
        /// Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        /// </summary>
        [Output("pushEventHooksLimit")]
        public Output<int> PushEventHooksLimit { get; private set; } = null!;

        /// <summary>
        /// Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        /// </summary>
        [Output("pypiPackageRequestsForwarding")]
        public Output<bool> PypiPackageRequestsForwarding { get; private set; } = null!;

        /// <summary>
        /// When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        /// </summary>
        [Output("rateLimitingResponseText")]
        public Output<string> RateLimitingResponseText { get; private set; } = null!;

        /// <summary>
        /// Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
        /// </summary>
        [Output("rawBlobRequestLimit")]
        public Output<int> RawBlobRequestLimit { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        /// </summary>
        [Output("recaptchaEnabled")]
        public Output<bool> RecaptchaEnabled { get; private set; } = null!;

        /// <summary>
        /// Private key for reCAPTCHA.
        /// </summary>
        [Output("recaptchaPrivateKey")]
        public Output<string> RecaptchaPrivateKey { get; private set; } = null!;

        /// <summary>
        /// Site key for reCAPTCHA.
        /// </summary>
        [Output("recaptchaSiteKey")]
        public Output<string> RecaptchaSiteKey { get; private set; } = null!;

        /// <summary>
        /// Maximum push size (MB).
        /// </summary>
        [Output("receiveMaxInputSize")]
        public Output<int> ReceiveMaxInputSize { get; private set; } = null!;

        /// <summary>
        /// GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        /// </summary>
        [Output("repositoryChecksEnabled")]
        public Output<bool> RepositoryChecksEnabled { get; private set; } = null!;

        /// <summary>
        /// Size limit per repository (MB).
        /// </summary>
        [Output("repositorySizeLimit")]
        public Output<int> RepositorySizeLimit { get; private set; } = null!;

        /// <summary>
        /// (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        /// </summary>
        [Output("repositoryStorages")]
        public Output<ImmutableArray<string>> RepositoryStorages { get; private set; } = null!;

        /// <summary>
        /// (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        /// </summary>
        [Output("repositoryStoragesWeighted")]
        public Output<ImmutableDictionary<string, int>> RepositoryStoragesWeighted { get; private set; } = null!;

        /// <summary>
        /// When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        /// </summary>
        [Output("requireAdminApprovalAfterUserSignup")]
        public Output<bool> RequireAdminApprovalAfterUserSignup { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        /// </summary>
        [Output("requireTwoFactorAuthentication")]
        public Output<bool> RequireTwoFactorAuthentication { get; private set; } = null!;

        /// <summary>
        /// Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
        /// </summary>
        [Output("restrictedVisibilityLevels")]
        public Output<ImmutableArray<string>> RestrictedVisibilityLevels { get; private set; } = null!;

        /// <summary>
        /// The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
        /// </summary>
        [Output("rsaKeyRestriction")]
        public Output<int> RsaKeyRestriction { get; private set; } = null!;

        /// <summary>
        /// Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
        /// </summary>
        [Output("searchRateLimit")]
        public Output<int> SearchRateLimit { get; private set; } = null!;

        /// <summary>
        /// Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
        /// </summary>
        [Output("searchRateLimitUnauthenticated")]
        public Output<int> SearchRateLimitUnauthenticated { get; private set; } = null!;

        /// <summary>
        /// Send confirmation email on sign-up.
        /// </summary>
        [Output("sendUserConfirmationEmail")]
        public Output<bool> SendUserConfirmationEmail { get; private set; } = null!;

        /// <summary>
        /// Session duration in minutes. GitLab restart is required to apply changes.
        /// </summary>
        [Output("sessionExpireDelay")]
        public Output<int> SessionExpireDelay { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        /// </summary>
        [Output("sharedRunnersEnabled")]
        public Output<bool> SharedRunnersEnabled { get; private set; } = null!;

        /// <summary>
        /// Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        /// </summary>
        [Output("sharedRunnersMinutes")]
        public Output<int> SharedRunnersMinutes { get; private set; } = null!;

        /// <summary>
        /// Shared runners text.
        /// </summary>
        [Output("sharedRunnersText")]
        public Output<string> SharedRunnersText { get; private set; } = null!;

        /// <summary>
        /// The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
        /// </summary>
        [Output("sidekiqJobLimiterCompressionThresholdBytes")]
        public Output<int> SidekiqJobLimiterCompressionThresholdBytes { get; private set; } = null!;

        /// <summary>
        /// The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
        /// </summary>
        [Output("sidekiqJobLimiterLimitBytes")]
        public Output<int> SidekiqJobLimiterLimitBytes { get; private set; } = null!;

        /// <summary>
        /// track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
        /// </summary>
        [Output("sidekiqJobLimiterMode")]
        public Output<string> SidekiqJobLimiterMode { get; private set; } = null!;

        /// <summary>
        /// Text on the login page.
        /// </summary>
        [Output("signInText")]
        public Output<string> SignInText { get; private set; } = null!;

        /// <summary>
        /// Enable registration. Default is true.
        /// </summary>
        [Output("signupEnabled")]
        public Output<bool> SignupEnabled { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        /// </summary>
        [Output("slackAppEnabled")]
        public Output<bool> SlackAppEnabled { get; private set; } = null!;

        /// <summary>
        /// The app ID of the Slack-app.
        /// </summary>
        [Output("slackAppId")]
        public Output<string> SlackAppId { get; private set; } = null!;

        /// <summary>
        /// The app secret of the Slack-app.
        /// </summary>
        [Output("slackAppSecret")]
        public Output<string> SlackAppSecret { get; private set; } = null!;

        /// <summary>
        /// The signing secret of the Slack-app.
        /// </summary>
        [Output("slackAppSigningSecret")]
        public Output<string> SlackAppSigningSecret { get; private set; } = null!;

        /// <summary>
        /// The verification token of the Slack-app.
        /// </summary>
        [Output("slackAppVerificationToken")]
        public Output<string> SlackAppVerificationToken { get; private set; } = null!;

        /// <summary>
        /// Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
        /// </summary>
        [Output("snippetSizeLimit")]
        public Output<int> SnippetSizeLimit { get; private set; } = null!;

        /// <summary>
        /// The Snowplow site name / application ID. (for example, gitlab)
        /// </summary>
        [Output("snowplowAppId")]
        public Output<string> SnowplowAppId { get; private set; } = null!;

        /// <summary>
        /// The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        /// </summary>
        [Output("snowplowCollectorHostname")]
        public Output<string> SnowplowCollectorHostname { get; private set; } = null!;

        /// <summary>
        /// The Snowplow cookie domain. (for example, .gitlab.com)
        /// </summary>
        [Output("snowplowCookieDomain")]
        public Output<string> SnowplowCookieDomain { get; private set; } = null!;

        /// <summary>
        /// Enable snowplow tracking.
        /// </summary>
        [Output("snowplowEnabled")]
        public Output<bool> SnowplowEnabled { get; private set; } = null!;

        /// <summary>
        /// Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
        /// </summary>
        [Output("sourcegraphEnabled")]
        public Output<bool> SourcegraphEnabled { get; private set; } = null!;

        /// <summary>
        /// Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
        /// </summary>
        [Output("sourcegraphPublicOnly")]
        public Output<bool> SourcegraphPublicOnly { get; private set; } = null!;

        /// <summary>
        /// The Sourcegraph instance URL for integration.
        /// </summary>
        [Output("sourcegraphUrl")]
        public Output<string> SourcegraphUrl { get; private set; } = null!;

        /// <summary>
        /// API key used by GitLab for accessing the Spam Check service endpoint.
        /// </summary>
        [Output("spamCheckApiKey")]
        public Output<string> SpamCheckApiKey { get; private set; } = null!;

        /// <summary>
        /// Enables spam checking using external Spam Check API endpoint. Default is false.
        /// </summary>
        [Output("spamCheckEndpointEnabled")]
        public Output<bool> SpamCheckEndpointEnabled { get; private set; } = null!;

        /// <summary>
        /// URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        /// </summary>
        [Output("spamCheckEndpointUrl")]
        public Output<string> SpamCheckEndpointUrl { get; private set; } = null!;

        /// <summary>
        /// Enable pipeline suggestion banner.
        /// </summary>
        [Output("suggestPipelineEnabled")]
        public Output<bool> SuggestPipelineEnabled { get; private set; } = null!;

        /// <summary>
        /// Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        /// </summary>
        [Output("terminalMaxSessionTime")]
        public Output<int> TerminalMaxSessionTime { get; private set; } = null!;

        /// <summary>
        /// (Required by: enforce_terms) Markdown content for the ToS.
        /// </summary>
        [Output("terms")]
        public Output<string> Terms { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Output("throttleAuthenticatedApiEnabled")]
        public Output<bool> ThrottleAuthenticatedApiEnabled { get; private set; } = null!;

        /// <summary>
        /// Rate limit period (in seconds).
        /// </summary>
        [Output("throttleAuthenticatedApiPeriodInSeconds")]
        public Output<int> ThrottleAuthenticatedApiPeriodInSeconds { get; private set; } = null!;

        /// <summary>
        /// Maximum requests per period per user.
        /// </summary>
        [Output("throttleAuthenticatedApiRequestsPerPeriod")]
        public Output<int> ThrottleAuthenticatedApiRequestsPerPeriod { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        /// </summary>
        [Output("throttleAuthenticatedPackagesApiEnabled")]
        public Output<bool> ThrottleAuthenticatedPackagesApiEnabled { get; private set; } = null!;

        /// <summary>
        /// Rate limit period (in seconds). View Package Registry rate limits for more details.
        /// </summary>
        [Output("throttleAuthenticatedPackagesApiPeriodInSeconds")]
        public Output<int> ThrottleAuthenticatedPackagesApiPeriodInSeconds { get; private set; } = null!;

        /// <summary>
        /// Maximum requests per period per user. View Package Registry rate limits for more details.
        /// </summary>
        [Output("throttleAuthenticatedPackagesApiRequestsPerPeriod")]
        public Output<int> ThrottleAuthenticatedPackagesApiRequestsPerPeriod { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Output("throttleAuthenticatedWebEnabled")]
        public Output<bool> ThrottleAuthenticatedWebEnabled { get; private set; } = null!;

        /// <summary>
        /// Rate limit period (in seconds).
        /// </summary>
        [Output("throttleAuthenticatedWebPeriodInSeconds")]
        public Output<int> ThrottleAuthenticatedWebPeriodInSeconds { get; private set; } = null!;

        /// <summary>
        /// Maximum requests per period per user.
        /// </summary>
        [Output("throttleAuthenticatedWebRequestsPerPeriod")]
        public Output<int> ThrottleAuthenticatedWebRequestsPerPeriod { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Output("throttleUnauthenticatedApiEnabled")]
        public Output<bool> ThrottleUnauthenticatedApiEnabled { get; private set; } = null!;

        /// <summary>
        /// Rate limit period in seconds.
        /// </summary>
        [Output("throttleUnauthenticatedApiPeriodInSeconds")]
        public Output<int> ThrottleUnauthenticatedApiPeriodInSeconds { get; private set; } = null!;

        /// <summary>
        /// Max requests per period per IP.
        /// </summary>
        [Output("throttleUnauthenticatedApiRequestsPerPeriod")]
        public Output<int> ThrottleUnauthenticatedApiRequestsPerPeriod { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        /// </summary>
        [Output("throttleUnauthenticatedPackagesApiEnabled")]
        public Output<bool> ThrottleUnauthenticatedPackagesApiEnabled { get; private set; } = null!;

        /// <summary>
        /// Rate limit period (in seconds). View Package Registry rate limits for more details.
        /// </summary>
        [Output("throttleUnauthenticatedPackagesApiPeriodInSeconds")]
        public Output<int> ThrottleUnauthenticatedPackagesApiPeriodInSeconds { get; private set; } = null!;

        /// <summary>
        /// Maximum requests per period per user. View Package Registry rate limits for more details.
        /// </summary>
        [Output("throttleUnauthenticatedPackagesApiRequestsPerPeriod")]
        public Output<int> ThrottleUnauthenticatedPackagesApiRequestsPerPeriod { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Output("throttleUnauthenticatedWebEnabled")]
        public Output<bool> ThrottleUnauthenticatedWebEnabled { get; private set; } = null!;

        /// <summary>
        /// Rate limit period in seconds.
        /// </summary>
        [Output("throttleUnauthenticatedWebPeriodInSeconds")]
        public Output<int> ThrottleUnauthenticatedWebPeriodInSeconds { get; private set; } = null!;

        /// <summary>
        /// Max requests per period per IP.
        /// </summary>
        [Output("throttleUnauthenticatedWebRequestsPerPeriod")]
        public Output<int> ThrottleUnauthenticatedWebRequestsPerPeriod { get; private set; } = null!;

        /// <summary>
        /// Limit display of time tracking units to hours. Default is false.
        /// </summary>
        [Output("timeTrackingLimitToHours")]
        public Output<bool> TimeTrackingLimitToHours { get; private set; } = null!;

        /// <summary>
        /// Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        /// </summary>
        [Output("twoFactorGracePeriod")]
        public Output<int> TwoFactorGracePeriod { get; private set; } = null!;

        /// <summary>
        /// (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        /// </summary>
        [Output("uniqueIpsLimitEnabled")]
        public Output<bool> UniqueIpsLimitEnabled { get; private set; } = null!;

        /// <summary>
        /// Maximum number of IPs per user.
        /// </summary>
        [Output("uniqueIpsLimitPerUser")]
        public Output<int> UniqueIpsLimitPerUser { get; private set; } = null!;

        /// <summary>
        /// How many seconds an IP is counted towards the limit.
        /// </summary>
        [Output("uniqueIpsLimitTimeWindow")]
        public Output<int> UniqueIpsLimitTimeWindow { get; private set; } = null!;

        /// <summary>
        /// Every week GitLab reports license usage back to GitLab, Inc.
        /// </summary>
        [Output("usagePingEnabled")]
        public Output<bool> UsagePingEnabled { get; private set; } = null!;

        /// <summary>
        /// Send an email to users upon account deactivation.
        /// </summary>
        [Output("userDeactivationEmailsEnabled")]
        public Output<bool> UserDeactivationEmailsEnabled { get; private set; } = null!;

        /// <summary>
        /// Newly registered users are external by default.
        /// </summary>
        [Output("userDefaultExternal")]
        public Output<bool> UserDefaultExternal { get; private set; } = null!;

        /// <summary>
        /// Specify an email address regex pattern to identify default internal users.
        /// </summary>
        [Output("userDefaultInternalRegex")]
        public Output<string> UserDefaultInternalRegex { get; private set; } = null!;

        /// <summary>
        /// Allow users to register any application to use GitLab as an OAuth provider.
        /// </summary>
        [Output("userOauthApplications")]
        public Output<bool> UserOauthApplications { get; private set; } = null!;

        /// <summary>
        /// When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        /// </summary>
        [Output("userShowAddSshKeyMessage")]
        public Output<bool> UserShowAddSshKeyMessage { get; private set; } = null!;

        /// <summary>
        /// Let GitLab inform you when an update is available.
        /// </summary>
        [Output("versionCheckEnabled")]
        public Output<bool> VersionCheckEnabled { get; private set; } = null!;

        /// <summary>
        /// Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        /// </summary>
        [Output("webIdeClientsidePreviewEnabled")]
        public Output<bool> WebIdeClientsidePreviewEnabled { get; private set; } = null!;

        /// <summary>
        /// What’s new variant, possible values: all*tiers, current*tier, and disabled.
        /// </summary>
        [Output("whatsNewVariant")]
        public Output<string> WhatsNewVariant { get; private set; } = null!;

        /// <summary>
        /// Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
        /// </summary>
        [Output("wikiPageMaxContentBytes")]
        public Output<int> WikiPageMaxContentBytes { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationSettings(string name, ApplicationSettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("gitlab:index/applicationSettings:ApplicationSettings", name, args ?? new ApplicationSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationSettings(string name, Input<string> id, ApplicationSettingsState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/applicationSettings:ApplicationSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "akismetApiKey",
                    "assetProxySecretKey",
                    "eksAccessKeyId",
                    "eksSecretAccessKey",
                    "elasticsearchAwsAccessKey",
                    "elasticsearchAwsSecretAccessKey",
                    "elasticsearchPassword",
                    "externalAuthClientKey",
                    "externalAuthClientKeyPass",
                    "mailgunSigningKey",
                    "recaptchaPrivateKey",
                    "recaptchaSiteKey",
                    "slackAppSecret",
                    "slackAppSigningSecret",
                    "spamCheckApiKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationSettings Get(string name, Input<string> id, ApplicationSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationSettings(name, id, state, options);
        }
    }

    public sealed class ApplicationSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        /// </summary>
        [Input("abuseNotificationEmail")]
        public Input<string>? AbuseNotificationEmail { get; set; }

        /// <summary>
        /// Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        /// </summary>
        [Input("adminMode")]
        public Input<bool>? AdminMode { get; set; }

        /// <summary>
        /// Where to redirect users after logout.
        /// </summary>
        [Input("afterSignOutPath")]
        public Input<string>? AfterSignOutPath { get; set; }

        /// <summary>
        /// Text shown to the user after signing up.
        /// </summary>
        [Input("afterSignUpText")]
        public Input<string>? AfterSignUpText { get; set; }

        [Input("akismetApiKey")]
        private Input<string>? _akismetApiKey;

        /// <summary>
        /// API key for Akismet spam protection.
        /// </summary>
        public Input<string>? AkismetApiKey
        {
            get => _akismetApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _akismetApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        /// </summary>
        [Input("akismetEnabled")]
        public Input<bool>? AkismetEnabled { get; set; }

        /// <summary>
        /// Set to true to allow group owners to manage LDAP.
        /// </summary>
        [Input("allowGroupOwnersToManageLdap")]
        public Input<bool>? AllowGroupOwnersToManageLdap { get; set; }

        /// <summary>
        /// Allow requests to the local network from system hooks.
        /// </summary>
        [Input("allowLocalRequestsFromSystemHooks")]
        public Input<bool>? AllowLocalRequestsFromSystemHooks { get; set; }

        /// <summary>
        /// Allow requests to the local network from web hooks and services.
        /// </summary>
        [Input("allowLocalRequestsFromWebHooksAndServices")]
        public Input<bool>? AllowLocalRequestsFromWebHooksAndServices { get; set; }

        /// <summary>
        /// Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        /// </summary>
        [Input("archiveBuildsInHumanReadable")]
        public Input<string>? ArchiveBuildsInHumanReadable { get; set; }

        [Input("assetProxyAllowlists")]
        private InputList<string>? _assetProxyAllowlists;

        /// <summary>
        /// Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        /// </summary>
        public InputList<string> AssetProxyAllowlists
        {
            get => _assetProxyAllowlists ?? (_assetProxyAllowlists = new InputList<string>());
            set => _assetProxyAllowlists = value;
        }

        /// <summary>
        /// (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        /// </summary>
        [Input("assetProxyEnabled")]
        public Input<bool>? AssetProxyEnabled { get; set; }

        [Input("assetProxySecretKey")]
        private Input<string>? _assetProxySecretKey;

        /// <summary>
        /// Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        /// </summary>
        public Input<string>? AssetProxySecretKey
        {
            get => _assetProxySecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _assetProxySecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// URL of the asset proxy server. GitLab restart is required to apply changes.
        /// </summary>
        [Input("assetProxyUrl")]
        public Input<string>? AssetProxyUrl { get; set; }

        /// <summary>
        /// By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        /// </summary>
        [Input("authorizedKeysEnabled")]
        public Input<bool>? AuthorizedKeysEnabled { get; set; }

        /// <summary>
        /// Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        /// </summary>
        [Input("autoDevopsDomain")]
        public Input<string>? AutoDevopsDomain { get; set; }

        /// <summary>
        /// Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        /// </summary>
        [Input("autoDevopsEnabled")]
        public Input<bool>? AutoDevopsEnabled { get; set; }

        /// <summary>
        /// Enabling this permits automatic allocation of purchased storage in a namespace.
        /// </summary>
        [Input("automaticPurchasedStorageAllocation")]
        public Input<bool>? AutomaticPurchasedStorageAllocation { get; set; }

        /// <summary>
        /// Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        /// </summary>
        [Input("checkNamespacePlan")]
        public Input<bool>? CheckNamespacePlan { get; set; }

        /// <summary>
        /// Custom hostname (for private commit emails).
        /// </summary>
        [Input("commitEmailHostname")]
        public Input<string>? CommitEmailHostname { get; set; }

        /// <summary>
        /// Enable cleanup policies for all projects.
        /// </summary>
        [Input("containerExpirationPoliciesEnableHistoricEntries")]
        public Input<bool>? ContainerExpirationPoliciesEnableHistoricEntries { get; set; }

        /// <summary>
        /// The maximum number of tags that can be deleted in a single execution of cleanup policies.
        /// </summary>
        [Input("containerRegistryCleanupTagsServiceMaxListSize")]
        public Input<int>? ContainerRegistryCleanupTagsServiceMaxListSize { get; set; }

        /// <summary>
        /// The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        /// </summary>
        [Input("containerRegistryDeleteTagsServiceTimeout")]
        public Input<int>? ContainerRegistryDeleteTagsServiceTimeout { get; set; }

        /// <summary>
        /// Caching during the execution of cleanup policies.
        /// </summary>
        [Input("containerRegistryExpirationPoliciesCaching")]
        public Input<bool>? ContainerRegistryExpirationPoliciesCaching { get; set; }

        /// <summary>
        /// Number of workers for cleanup policies.
        /// </summary>
        [Input("containerRegistryExpirationPoliciesWorkerCapacity")]
        public Input<int>? ContainerRegistryExpirationPoliciesWorkerCapacity { get; set; }

        /// <summary>
        /// Container Registry token duration in minutes.
        /// </summary>
        [Input("containerRegistryTokenExpireDelay")]
        public Input<int>? ContainerRegistryTokenExpireDelay { get; set; }

        /// <summary>
        /// Enable automatic deactivation of dormant users.
        /// </summary>
        [Input("deactivateDormantUsers")]
        public Input<bool>? DeactivateDormantUsers { get; set; }

        /// <summary>
        /// Set the default expiration time for each job’s artifacts.
        /// </summary>
        [Input("defaultArtifactsExpireIn")]
        public Input<string>? DefaultArtifactsExpireIn { get; set; }

        /// <summary>
        /// Instance-level custom initial branch name (introduced in GitLab 13.2).
        /// </summary>
        [Input("defaultBranchName")]
        public Input<string>? DefaultBranchName { get; set; }

        /// <summary>
        /// Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        /// </summary>
        [Input("defaultBranchProtection")]
        public Input<int>? DefaultBranchProtection { get; set; }

        /// <summary>
        /// Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        /// </summary>
        [Input("defaultCiConfigPath")]
        public Input<string>? DefaultCiConfigPath { get; set; }

        /// <summary>
        /// What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Input("defaultGroupVisibility")]
        public Input<string>? DefaultGroupVisibility { get; set; }

        /// <summary>
        /// Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        /// </summary>
        [Input("defaultProjectCreation")]
        public Input<int>? DefaultProjectCreation { get; set; }

        /// <summary>
        /// What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Input("defaultProjectVisibility")]
        public Input<string>? DefaultProjectVisibility { get; set; }

        /// <summary>
        /// Project limit per user. Default is 100000.
        /// </summary>
        [Input("defaultProjectsLimit")]
        public Input<int>? DefaultProjectsLimit { get; set; }

        /// <summary>
        /// What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Input("defaultSnippetVisibility")]
        public Input<string>? DefaultSnippetVisibility { get; set; }

        /// <summary>
        /// Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        /// </summary>
        [Input("delayedGroupDeletion")]
        public Input<bool>? DelayedGroupDeletion { get; set; }

        /// <summary>
        /// Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        /// </summary>
        [Input("delayedProjectDeletion")]
        public Input<bool>? DelayedProjectDeletion { get; set; }

        /// <summary>
        /// Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
        /// </summary>
        [Input("deleteInactiveProjects")]
        public Input<bool>? DeleteInactiveProjects { get; set; }

        /// <summary>
        /// The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        /// </summary>
        [Input("deletionAdjournedPeriod")]
        public Input<int>? DeletionAdjournedPeriod { get; set; }

        /// <summary>
        /// Maximum files in a diff.
        /// </summary>
        [Input("diffMaxFiles")]
        public Input<int>? DiffMaxFiles { get; set; }

        /// <summary>
        /// Maximum lines in a diff.
        /// </summary>
        [Input("diffMaxLines")]
        public Input<int>? DiffMaxLines { get; set; }

        /// <summary>
        /// Maximum diff patch size, in bytes.
        /// </summary>
        [Input("diffMaxPatchBytes")]
        public Input<int>? DiffMaxPatchBytes { get; set; }

        /// <summary>
        /// Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        /// </summary>
        [Input("disableFeedToken")]
        public Input<bool>? DisableFeedToken { get; set; }

        [Input("disabledOauthSignInSources")]
        private InputList<string>? _disabledOauthSignInSources;

        /// <summary>
        /// Disabled OAuth sign-in sources.
        /// </summary>
        public InputList<string> DisabledOauthSignInSources
        {
            get => _disabledOauthSignInSources ?? (_disabledOauthSignInSources = new InputList<string>());
            set => _disabledOauthSignInSources = value;
        }

        /// <summary>
        /// Enforce DNS rebinding attack protection.
        /// </summary>
        [Input("dnsRebindingProtectionEnabled")]
        public Input<bool>? DnsRebindingProtectionEnabled { get; set; }

        [Input("domainAllowlists")]
        private InputList<string>? _domainAllowlists;

        /// <summary>
        /// Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
        /// </summary>
        public InputList<string> DomainAllowlists
        {
            get => _domainAllowlists ?? (_domainAllowlists = new InputList<string>());
            set => _domainAllowlists = value;
        }

        /// <summary>
        /// (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        /// </summary>
        [Input("domainDenylistEnabled")]
        public Input<bool>? DomainDenylistEnabled { get; set; }

        [Input("domainDenylists")]
        private InputList<string>? _domainDenylists;

        /// <summary>
        /// Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        /// </summary>
        public InputList<string> DomainDenylists
        {
            get => _domainDenylists ?? (_domainDenylists = new InputList<string>());
            set => _domainDenylists = value;
        }

        /// <summary>
        /// The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
        /// </summary>
        [Input("dsaKeyRestriction")]
        public Input<int>? DsaKeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
        /// </summary>
        [Input("ecdsaKeyRestriction")]
        public Input<int>? EcdsaKeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
        /// </summary>
        [Input("ecdsaSkKeyRestriction")]
        public Input<int>? EcdsaSkKeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
        /// </summary>
        [Input("ed25519KeyRestriction")]
        public Input<int>? Ed25519KeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
        /// </summary>
        [Input("ed25519SkKeyRestriction")]
        public Input<int>? Ed25519SkKeyRestriction { get; set; }

        [Input("eksAccessKeyId")]
        private Input<string>? _eksAccessKeyId;

        /// <summary>
        /// AWS IAM access key ID.
        /// </summary>
        public Input<string>? EksAccessKeyId
        {
            get => _eksAccessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _eksAccessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Amazon account ID.
        /// </summary>
        [Input("eksAccountId")]
        public Input<string>? EksAccountId { get; set; }

        /// <summary>
        /// Enable integration with Amazon EKS.
        /// </summary>
        [Input("eksIntegrationEnabled")]
        public Input<bool>? EksIntegrationEnabled { get; set; }

        [Input("eksSecretAccessKey")]
        private Input<string>? _eksSecretAccessKey;

        /// <summary>
        /// AWS IAM secret access key.
        /// </summary>
        public Input<string>? EksSecretAccessKey
        {
            get => _eksSecretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _eksSecretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable the use of AWS hosted Elasticsearch.
        /// </summary>
        [Input("elasticsearchAws")]
        public Input<bool>? ElasticsearchAws { get; set; }

        [Input("elasticsearchAwsAccessKey")]
        private Input<string>? _elasticsearchAwsAccessKey;

        /// <summary>
        /// AWS IAM access key.
        /// </summary>
        public Input<string>? ElasticsearchAwsAccessKey
        {
            get => _elasticsearchAwsAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _elasticsearchAwsAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The AWS region the Elasticsearch domain is configured.
        /// </summary>
        [Input("elasticsearchAwsRegion")]
        public Input<string>? ElasticsearchAwsRegion { get; set; }

        [Input("elasticsearchAwsSecretAccessKey")]
        private Input<string>? _elasticsearchAwsSecretAccessKey;

        /// <summary>
        /// AWS IAM secret access key.
        /// </summary>
        public Input<string>? ElasticsearchAwsSecretAccessKey
        {
            get => _elasticsearchAwsSecretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _elasticsearchAwsSecretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        /// </summary>
        [Input("elasticsearchIndexedFieldLengthLimit")]
        public Input<int>? ElasticsearchIndexedFieldLengthLimit { get; set; }

        /// <summary>
        /// Maximum size of repository and wiki files that are indexed by Elasticsearch.
        /// </summary>
        [Input("elasticsearchIndexedFileSizeLimitKb")]
        public Input<int>? ElasticsearchIndexedFileSizeLimitKb { get; set; }

        /// <summary>
        /// Enable Elasticsearch indexing.
        /// </summary>
        [Input("elasticsearchIndexing")]
        public Input<bool>? ElasticsearchIndexing { get; set; }

        /// <summary>
        /// Limit Elasticsearch to index certain namespaces and projects.
        /// </summary>
        [Input("elasticsearchLimitIndexing")]
        public Input<bool>? ElasticsearchLimitIndexing { get; set; }

        /// <summary>
        /// Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        /// </summary>
        [Input("elasticsearchMaxBulkConcurrency")]
        public Input<int>? ElasticsearchMaxBulkConcurrency { get; set; }

        /// <summary>
        /// Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        /// </summary>
        [Input("elasticsearchMaxBulkSizeMb")]
        public Input<int>? ElasticsearchMaxBulkSizeMb { get; set; }

        [Input("elasticsearchNamespaceIds")]
        private InputList<string>? _elasticsearchNamespaceIds;

        /// <summary>
        /// The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        /// </summary>
        public InputList<string> ElasticsearchNamespaceIds
        {
            get => _elasticsearchNamespaceIds ?? (_elasticsearchNamespaceIds = new InputList<string>());
            set => _elasticsearchNamespaceIds = value;
        }

        [Input("elasticsearchPassword")]
        private Input<string>? _elasticsearchPassword;

        /// <summary>
        /// The password of your Elasticsearch instance.
        /// </summary>
        public Input<string>? ElasticsearchPassword
        {
            get => _elasticsearchPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _elasticsearchPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("elasticsearchProjectIds")]
        private InputList<string>? _elasticsearchProjectIds;

        /// <summary>
        /// The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        /// </summary>
        public InputList<string> ElasticsearchProjectIds
        {
            get => _elasticsearchProjectIds ?? (_elasticsearchProjectIds = new InputList<string>());
            set => _elasticsearchProjectIds = value;
        }

        /// <summary>
        /// Enable Elasticsearch search.
        /// </summary>
        [Input("elasticsearchSearch")]
        public Input<bool>? ElasticsearchSearch { get; set; }

        [Input("elasticsearchUrls")]
        private InputList<string>? _elasticsearchUrls;

        /// <summary>
        /// The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        /// </summary>
        public InputList<string> ElasticsearchUrls
        {
            get => _elasticsearchUrls ?? (_elasticsearchUrls = new InputList<string>());
            set => _elasticsearchUrls = value;
        }

        /// <summary>
        /// The username of your Elasticsearch instance.
        /// </summary>
        [Input("elasticsearchUsername")]
        public Input<string>? ElasticsearchUsername { get; set; }

        /// <summary>
        /// Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        /// </summary>
        [Input("emailAdditionalText")]
        public Input<string>? EmailAdditionalText { get; set; }

        /// <summary>
        /// Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        /// </summary>
        [Input("emailAuthorInBody")]
        public Input<bool>? EmailAuthorInBody { get; set; }

        /// <summary>
        /// Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        /// </summary>
        [Input("enabledGitAccessProtocol")]
        public Input<string>? EnabledGitAccessProtocol { get; set; }

        /// <summary>
        /// Enabling this permits enforcement of namespace storage limits.
        /// </summary>
        [Input("enforceNamespaceStorageLimit")]
        public Input<bool>? EnforceNamespaceStorageLimit { get; set; }

        /// <summary>
        /// (If enabled, requires: terms) Enforce application ToS to all users.
        /// </summary>
        [Input("enforceTerms")]
        public Input<bool>? EnforceTerms { get; set; }

        /// <summary>
        /// (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        /// </summary>
        [Input("externalAuthClientCert")]
        public Input<string>? ExternalAuthClientCert { get; set; }

        [Input("externalAuthClientKey")]
        private Input<string>? _externalAuthClientKey;

        /// <summary>
        /// Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        /// </summary>
        public Input<string>? ExternalAuthClientKey
        {
            get => _externalAuthClientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _externalAuthClientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("externalAuthClientKeyPass")]
        private Input<string>? _externalAuthClientKeyPass;

        /// <summary>
        /// Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        /// </summary>
        public Input<string>? ExternalAuthClientKeyPass
        {
            get => _externalAuthClientKeyPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _externalAuthClientKeyPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The default classification label to use when requesting authorization and no classification label has been specified on the project.
        /// </summary>
        [Input("externalAuthorizationServiceDefaultLabel")]
        public Input<string>? ExternalAuthorizationServiceDefaultLabel { get; set; }

        /// <summary>
        /// (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        /// </summary>
        [Input("externalAuthorizationServiceEnabled")]
        public Input<bool>? ExternalAuthorizationServiceEnabled { get; set; }

        /// <summary>
        /// The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        /// </summary>
        [Input("externalAuthorizationServiceTimeout")]
        public Input<double>? ExternalAuthorizationServiceTimeout { get; set; }

        /// <summary>
        /// URL to which authorization requests are directed.
        /// </summary>
        [Input("externalAuthorizationServiceUrl")]
        public Input<string>? ExternalAuthorizationServiceUrl { get; set; }

        /// <summary>
        /// How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        /// </summary>
        [Input("externalPipelineValidationServiceTimeout")]
        public Input<int>? ExternalPipelineValidationServiceTimeout { get; set; }

        /// <summary>
        /// Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        /// </summary>
        [Input("externalPipelineValidationServiceToken")]
        public Input<string>? ExternalPipelineValidationServiceToken { get; set; }

        /// <summary>
        /// URL to use for pipeline validation requests.
        /// </summary>
        [Input("externalPipelineValidationServiceUrl")]
        public Input<string>? ExternalPipelineValidationServiceUrl { get; set; }

        /// <summary>
        /// The ID of a project to load custom file templates from.
        /// </summary>
        [Input("fileTemplateProjectId")]
        public Input<int>? FileTemplateProjectId { get; set; }

        /// <summary>
        /// Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
        /// </summary>
        [Input("firstDayOfWeek")]
        public Input<int>? FirstDayOfWeek { get; set; }

        /// <summary>
        /// Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        /// </summary>
        [Input("geoNodeAllowedIps")]
        public Input<string>? GeoNodeAllowedIps { get; set; }

        /// <summary>
        /// The amount of seconds after which a request to get a secondary node status times out.
        /// </summary>
        [Input("geoStatusTimeout")]
        public Input<int>? GeoStatusTimeout { get; set; }

        [Input("gitRateLimitUsersAllowlists")]
        private InputList<string>? _gitRateLimitUsersAllowlists;

        /// <summary>
        /// List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
        /// </summary>
        public InputList<string> GitRateLimitUsersAllowlists
        {
            get => _gitRateLimitUsersAllowlists ?? (_gitRateLimitUsersAllowlists = new InputList<string>());
            set => _gitRateLimitUsersAllowlists = value;
        }

        /// <summary>
        /// Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        /// </summary>
        [Input("gitTwoFactorSessionExpiry")]
        public Input<int>? GitTwoFactorSessionExpiry { get; set; }

        /// <summary>
        /// Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        /// </summary>
        [Input("gitalyTimeoutDefault")]
        public Input<int>? GitalyTimeoutDefault { get; set; }

        /// <summary>
        /// Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        /// </summary>
        [Input("gitalyTimeoutFast")]
        public Input<int>? GitalyTimeoutFast { get; set; }

        /// <summary>
        /// Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        /// </summary>
        [Input("gitalyTimeoutMedium")]
        public Input<int>? GitalyTimeoutMedium { get; set; }

        /// <summary>
        /// Enable Grafana.
        /// </summary>
        [Input("grafanaEnabled")]
        public Input<bool>? GrafanaEnabled { get; set; }

        /// <summary>
        /// Grafana URL.
        /// </summary>
        [Input("grafanaUrl")]
        public Input<string>? GrafanaUrl { get; set; }

        /// <summary>
        /// Enable Gravatar.
        /// </summary>
        [Input("gravatarEnabled")]
        public Input<bool>? GravatarEnabled { get; set; }

        /// <summary>
        /// Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        /// </summary>
        [Input("hashedStorageEnabled")]
        public Input<bool>? HashedStorageEnabled { get; set; }

        /// <summary>
        /// Hide marketing-related entries from help.
        /// </summary>
        [Input("helpPageHideCommercialContent")]
        public Input<bool>? HelpPageHideCommercialContent { get; set; }

        /// <summary>
        /// Alternate support URL for help page and help dropdown.
        /// </summary>
        [Input("helpPageSupportUrl")]
        public Input<string>? HelpPageSupportUrl { get; set; }

        /// <summary>
        /// Custom text displayed on the help page.
        /// </summary>
        [Input("helpPageText")]
        public Input<string>? HelpPageText { get; set; }

        /// <summary>
        /// GitLab server administrator information.
        /// </summary>
        [Input("helpText")]
        public Input<string>? HelpText { get; set; }

        /// <summary>
        /// Do not display offers from third parties in GitLab.
        /// </summary>
        [Input("hideThirdPartyOffers")]
        public Input<bool>? HideThirdPartyOffers { get; set; }

        /// <summary>
        /// Redirect to this URL when not logged in.
        /// </summary>
        [Input("homePageUrl")]
        public Input<string>? HomePageUrl { get; set; }

        /// <summary>
        /// (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        /// </summary>
        [Input("housekeepingEnabled")]
        public Input<bool>? HousekeepingEnabled { get; set; }

        /// <summary>
        /// Number of Git pushes after which an incremental git repack is run.
        /// </summary>
        [Input("housekeepingFullRepackPeriod")]
        public Input<int>? HousekeepingFullRepackPeriod { get; set; }

        /// <summary>
        /// Number of Git pushes after which git gc is run.
        /// </summary>
        [Input("housekeepingGcPeriod")]
        public Input<int>? HousekeepingGcPeriod { get; set; }

        /// <summary>
        /// Number of Git pushes after which an incremental git repack is run.
        /// </summary>
        [Input("housekeepingIncrementalRepackPeriod")]
        public Input<int>? HousekeepingIncrementalRepackPeriod { get; set; }

        /// <summary>
        /// Enable HTML emails.
        /// </summary>
        [Input("htmlEmailsEnabled")]
        public Input<bool>? HtmlEmailsEnabled { get; set; }

        [Input("importSources")]
        private InputList<string>? _importSources;

        /// <summary>
        /// Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
        /// </summary>
        public InputList<string> ImportSources
        {
            get => _importSources ?? (_importSources = new InputList<string>());
            set => _importSources = value;
        }

        /// <summary>
        /// Enable in-product marketing emails. Enabled by default.
        /// </summary>
        [Input("inProductMarketingEmailsEnabled")]
        public Input<bool>? InProductMarketingEmailsEnabled { get; set; }

        /// <summary>
        /// If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Input("inactiveProjectsDeleteAfterMonths")]
        public Input<int>? InactiveProjectsDeleteAfterMonths { get; set; }

        /// <summary>
        /// If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Input("inactiveProjectsMinSizeMb")]
        public Input<int>? InactiveProjectsMinSizeMb { get; set; }

        /// <summary>
        /// If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Input("inactiveProjectsSendWarningEmailAfterMonths")]
        public Input<int>? InactiveProjectsSendWarningEmailAfterMonths { get; set; }

        /// <summary>
        /// Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
        /// </summary>
        [Input("invisibleCaptchaEnabled")]
        public Input<bool>? InvisibleCaptchaEnabled { get; set; }

        /// <summary>
        /// Max number of issue creation requests per minute per user. Disabled by default.
        /// </summary>
        [Input("issuesCreateLimit")]
        public Input<int>? IssuesCreateLimit { get; set; }

        /// <summary>
        /// Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
        /// </summary>
        [Input("keepLatestArtifact")]
        public Input<bool>? KeepLatestArtifact { get; set; }

        /// <summary>
        /// Increase this value when any cached Markdown should be invalidated.
        /// </summary>
        [Input("localMarkdownVersion")]
        public Input<int>? LocalMarkdownVersion { get; set; }

        /// <summary>
        /// Enable Mailgun event receiver.
        /// </summary>
        [Input("mailgunEventsEnabled")]
        public Input<bool>? MailgunEventsEnabled { get; set; }

        [Input("mailgunSigningKey")]
        private Input<string>? _mailgunSigningKey;

        /// <summary>
        /// The Mailgun HTTP webhook signing key for receiving events from webhook.
        /// </summary>
        public Input<string>? MailgunSigningKey
        {
            get => _mailgunSigningKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _mailgunSigningKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        /// </summary>
        [Input("maintenanceMode")]
        public Input<bool>? MaintenanceMode { get; set; }

        /// <summary>
        /// Message displayed when instance is in maintenance mode.
        /// </summary>
        [Input("maintenanceModeMessage")]
        public Input<string>? MaintenanceModeMessage { get; set; }

        /// <summary>
        /// Maximum artifacts size in MB.
        /// </summary>
        [Input("maxArtifactsSize")]
        public Input<int>? MaxArtifactsSize { get; set; }

        /// <summary>
        /// Limit attachment size in MB.
        /// </summary>
        [Input("maxAttachmentSize")]
        public Input<int>? MaxAttachmentSize { get; set; }

        /// <summary>
        /// Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
        /// </summary>
        [Input("maxExportSize")]
        public Input<int>? MaxExportSize { get; set; }

        /// <summary>
        /// Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
        /// </summary>
        [Input("maxImportSize")]
        public Input<int>? MaxImportSize { get; set; }

        /// <summary>
        /// Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        /// </summary>
        [Input("maxNumberOfRepositoryDownloads")]
        public Input<int>? MaxNumberOfRepositoryDownloads { get; set; }

        /// <summary>
        /// Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        /// </summary>
        [Input("maxNumberOfRepositoryDownloadsWithinTimePeriod")]
        public Input<int>? MaxNumberOfRepositoryDownloadsWithinTimePeriod { get; set; }

        /// <summary>
        /// Maximum size of pages repositories in MB.
        /// </summary>
        [Input("maxPagesSize")]
        public Input<int>? MaxPagesSize { get; set; }

        /// <summary>
        /// Maximum allowable lifetime for access tokens in days.
        /// </summary>
        [Input("maxPersonalAccessTokenLifetime")]
        public Input<int>? MaxPersonalAccessTokenLifetime { get; set; }

        /// <summary>
        /// Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        /// </summary>
        [Input("maxSshKeyLifetime")]
        public Input<int>? MaxSshKeyLifetime { get; set; }

        /// <summary>
        /// A method call is only tracked when it takes longer than the given amount of milliseconds.
        /// </summary>
        [Input("metricsMethodCallThreshold")]
        public Input<int>? MetricsMethodCallThreshold { get; set; }

        /// <summary>
        /// Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        /// </summary>
        [Input("mirrorAvailable")]
        public Input<bool>? MirrorAvailable { get; set; }

        /// <summary>
        /// Minimum capacity to be available before scheduling more mirrors preemptively.
        /// </summary>
        [Input("mirrorCapacityThreshold")]
        public Input<int>? MirrorCapacityThreshold { get; set; }

        /// <summary>
        /// Maximum number of mirrors that can be synchronizing at the same time.
        /// </summary>
        [Input("mirrorMaxCapacity")]
        public Input<int>? MirrorMaxCapacity { get; set; }

        /// <summary>
        /// Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        /// </summary>
        [Input("mirrorMaxDelay")]
        public Input<int>? MirrorMaxDelay { get; set; }

        /// <summary>
        /// Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        /// </summary>
        [Input("npmPackageRequestsForwarding")]
        public Input<bool>? NpmPackageRequestsForwarding { get; set; }

        [Input("outboundLocalRequestsWhitelists")]
        private InputList<string>? _outboundLocalRequestsWhitelists;

        /// <summary>
        /// Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        /// </summary>
        public InputList<string> OutboundLocalRequestsWhitelists
        {
            get => _outboundLocalRequestsWhitelists ?? (_outboundLocalRequestsWhitelists = new InputList<string>());
            set => _outboundLocalRequestsWhitelists = value;
        }

        /// <summary>
        /// Number of workers assigned to the packages cleanup policies.
        /// </summary>
        [Input("packageRegistryCleanupPoliciesWorkerCapacity")]
        public Input<int>? PackageRegistryCleanupPoliciesWorkerCapacity { get; set; }

        /// <summary>
        /// Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        /// </summary>
        [Input("pagesDomainVerificationEnabled")]
        public Input<bool>? PagesDomainVerificationEnabled { get; set; }

        /// <summary>
        /// Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
        /// </summary>
        [Input("passwordAuthenticationEnabledForGit")]
        public Input<bool>? PasswordAuthenticationEnabledForGit { get; set; }

        /// <summary>
        /// Enable authentication for the web interface via a GitLab account password. Default is true.
        /// </summary>
        [Input("passwordAuthenticationEnabledForWeb")]
        public Input<bool>? PasswordAuthenticationEnabledForWeb { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordLowercaseRequired")]
        public Input<bool>? PasswordLowercaseRequired { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordNumberRequired")]
        public Input<bool>? PasswordNumberRequired { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordSymbolRequired")]
        public Input<bool>? PasswordSymbolRequired { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordUppercaseRequired")]
        public Input<bool>? PasswordUppercaseRequired { get; set; }

        /// <summary>
        /// Path of the group that is allowed to toggle the performance bar.
        /// </summary>
        [Input("performanceBarAllowedGroupPath")]
        public Input<string>? PerformanceBarAllowedGroupPath { get; set; }

        /// <summary>
        /// Prefix for all generated personal access tokens.
        /// </summary>
        [Input("personalAccessTokenPrefix")]
        public Input<string>? PersonalAccessTokenPrefix { get; set; }

        /// <summary>
        /// Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
        /// </summary>
        [Input("pipelineLimitPerProjectUserSha")]
        public Input<int>? PipelineLimitPerProjectUserSha { get; set; }

        /// <summary>
        /// (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
        /// </summary>
        [Input("plantumlEnabled")]
        public Input<bool>? PlantumlEnabled { get; set; }

        /// <summary>
        /// The PlantUML instance URL for integration.
        /// </summary>
        [Input("plantumlUrl")]
        public Input<string>? PlantumlUrl { get; set; }

        /// <summary>
        /// Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        /// </summary>
        [Input("pollingIntervalMultiplier")]
        public Input<double>? PollingIntervalMultiplier { get; set; }

        /// <summary>
        /// Enable project export.
        /// </summary>
        [Input("projectExportEnabled")]
        public Input<bool>? ProjectExportEnabled { get; set; }

        /// <summary>
        /// Enable Prometheus metrics.
        /// </summary>
        [Input("prometheusMetricsEnabled")]
        public Input<bool>? PrometheusMetricsEnabled { get; set; }

        /// <summary>
        /// CI/CD variables are protected by default.
        /// </summary>
        [Input("protectedCiVariables")]
        public Input<bool>? ProtectedCiVariables { get; set; }

        /// <summary>
        /// Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        /// </summary>
        [Input("pushEventActivitiesLimit")]
        public Input<int>? PushEventActivitiesLimit { get; set; }

        /// <summary>
        /// Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        /// </summary>
        [Input("pushEventHooksLimit")]
        public Input<int>? PushEventHooksLimit { get; set; }

        /// <summary>
        /// Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        /// </summary>
        [Input("pypiPackageRequestsForwarding")]
        public Input<bool>? PypiPackageRequestsForwarding { get; set; }

        /// <summary>
        /// When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        /// </summary>
        [Input("rateLimitingResponseText")]
        public Input<string>? RateLimitingResponseText { get; set; }

        /// <summary>
        /// Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
        /// </summary>
        [Input("rawBlobRequestLimit")]
        public Input<int>? RawBlobRequestLimit { get; set; }

        /// <summary>
        /// (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        /// </summary>
        [Input("recaptchaEnabled")]
        public Input<bool>? RecaptchaEnabled { get; set; }

        [Input("recaptchaPrivateKey")]
        private Input<string>? _recaptchaPrivateKey;

        /// <summary>
        /// Private key for reCAPTCHA.
        /// </summary>
        public Input<string>? RecaptchaPrivateKey
        {
            get => _recaptchaPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recaptchaPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("recaptchaSiteKey")]
        private Input<string>? _recaptchaSiteKey;

        /// <summary>
        /// Site key for reCAPTCHA.
        /// </summary>
        public Input<string>? RecaptchaSiteKey
        {
            get => _recaptchaSiteKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recaptchaSiteKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Maximum push size (MB).
        /// </summary>
        [Input("receiveMaxInputSize")]
        public Input<int>? ReceiveMaxInputSize { get; set; }

        /// <summary>
        /// GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        /// </summary>
        [Input("repositoryChecksEnabled")]
        public Input<bool>? RepositoryChecksEnabled { get; set; }

        /// <summary>
        /// Size limit per repository (MB).
        /// </summary>
        [Input("repositorySizeLimit")]
        public Input<int>? RepositorySizeLimit { get; set; }

        [Input("repositoryStorages")]
        private InputList<string>? _repositoryStorages;

        /// <summary>
        /// (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        /// </summary>
        public InputList<string> RepositoryStorages
        {
            get => _repositoryStorages ?? (_repositoryStorages = new InputList<string>());
            set => _repositoryStorages = value;
        }

        [Input("repositoryStoragesWeighted")]
        private InputMap<int>? _repositoryStoragesWeighted;

        /// <summary>
        /// (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        /// </summary>
        public InputMap<int> RepositoryStoragesWeighted
        {
            get => _repositoryStoragesWeighted ?? (_repositoryStoragesWeighted = new InputMap<int>());
            set => _repositoryStoragesWeighted = value;
        }

        /// <summary>
        /// When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        /// </summary>
        [Input("requireAdminApprovalAfterUserSignup")]
        public Input<bool>? RequireAdminApprovalAfterUserSignup { get; set; }

        /// <summary>
        /// (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        /// </summary>
        [Input("requireTwoFactorAuthentication")]
        public Input<bool>? RequireTwoFactorAuthentication { get; set; }

        [Input("restrictedVisibilityLevels")]
        private InputList<string>? _restrictedVisibilityLevels;

        /// <summary>
        /// Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
        /// </summary>
        public InputList<string> RestrictedVisibilityLevels
        {
            get => _restrictedVisibilityLevels ?? (_restrictedVisibilityLevels = new InputList<string>());
            set => _restrictedVisibilityLevels = value;
        }

        /// <summary>
        /// The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
        /// </summary>
        [Input("rsaKeyRestriction")]
        public Input<int>? RsaKeyRestriction { get; set; }

        /// <summary>
        /// Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
        /// </summary>
        [Input("searchRateLimit")]
        public Input<int>? SearchRateLimit { get; set; }

        /// <summary>
        /// Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
        /// </summary>
        [Input("searchRateLimitUnauthenticated")]
        public Input<int>? SearchRateLimitUnauthenticated { get; set; }

        /// <summary>
        /// Send confirmation email on sign-up.
        /// </summary>
        [Input("sendUserConfirmationEmail")]
        public Input<bool>? SendUserConfirmationEmail { get; set; }

        /// <summary>
        /// Session duration in minutes. GitLab restart is required to apply changes.
        /// </summary>
        [Input("sessionExpireDelay")]
        public Input<int>? SessionExpireDelay { get; set; }

        /// <summary>
        /// (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        /// </summary>
        [Input("sharedRunnersEnabled")]
        public Input<bool>? SharedRunnersEnabled { get; set; }

        /// <summary>
        /// Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        /// </summary>
        [Input("sharedRunnersMinutes")]
        public Input<int>? SharedRunnersMinutes { get; set; }

        /// <summary>
        /// Shared runners text.
        /// </summary>
        [Input("sharedRunnersText")]
        public Input<string>? SharedRunnersText { get; set; }

        /// <summary>
        /// The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
        /// </summary>
        [Input("sidekiqJobLimiterCompressionThresholdBytes")]
        public Input<int>? SidekiqJobLimiterCompressionThresholdBytes { get; set; }

        /// <summary>
        /// The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
        /// </summary>
        [Input("sidekiqJobLimiterLimitBytes")]
        public Input<int>? SidekiqJobLimiterLimitBytes { get; set; }

        /// <summary>
        /// track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
        /// </summary>
        [Input("sidekiqJobLimiterMode")]
        public Input<string>? SidekiqJobLimiterMode { get; set; }

        /// <summary>
        /// Text on the login page.
        /// </summary>
        [Input("signInText")]
        public Input<string>? SignInText { get; set; }

        /// <summary>
        /// Enable registration. Default is true.
        /// </summary>
        [Input("signupEnabled")]
        public Input<bool>? SignupEnabled { get; set; }

        /// <summary>
        /// (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        /// </summary>
        [Input("slackAppEnabled")]
        public Input<bool>? SlackAppEnabled { get; set; }

        /// <summary>
        /// The app ID of the Slack-app.
        /// </summary>
        [Input("slackAppId")]
        public Input<string>? SlackAppId { get; set; }

        [Input("slackAppSecret")]
        private Input<string>? _slackAppSecret;

        /// <summary>
        /// The app secret of the Slack-app.
        /// </summary>
        public Input<string>? SlackAppSecret
        {
            get => _slackAppSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _slackAppSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("slackAppSigningSecret")]
        private Input<string>? _slackAppSigningSecret;

        /// <summary>
        /// The signing secret of the Slack-app.
        /// </summary>
        public Input<string>? SlackAppSigningSecret
        {
            get => _slackAppSigningSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _slackAppSigningSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The verification token of the Slack-app.
        /// </summary>
        [Input("slackAppVerificationToken")]
        public Input<string>? SlackAppVerificationToken { get; set; }

        /// <summary>
        /// Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
        /// </summary>
        [Input("snippetSizeLimit")]
        public Input<int>? SnippetSizeLimit { get; set; }

        /// <summary>
        /// The Snowplow site name / application ID. (for example, gitlab)
        /// </summary>
        [Input("snowplowAppId")]
        public Input<string>? SnowplowAppId { get; set; }

        /// <summary>
        /// The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        /// </summary>
        [Input("snowplowCollectorHostname")]
        public Input<string>? SnowplowCollectorHostname { get; set; }

        /// <summary>
        /// The Snowplow cookie domain. (for example, .gitlab.com)
        /// </summary>
        [Input("snowplowCookieDomain")]
        public Input<string>? SnowplowCookieDomain { get; set; }

        /// <summary>
        /// Enable snowplow tracking.
        /// </summary>
        [Input("snowplowEnabled")]
        public Input<bool>? SnowplowEnabled { get; set; }

        /// <summary>
        /// Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
        /// </summary>
        [Input("sourcegraphEnabled")]
        public Input<bool>? SourcegraphEnabled { get; set; }

        /// <summary>
        /// Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
        /// </summary>
        [Input("sourcegraphPublicOnly")]
        public Input<bool>? SourcegraphPublicOnly { get; set; }

        /// <summary>
        /// The Sourcegraph instance URL for integration.
        /// </summary>
        [Input("sourcegraphUrl")]
        public Input<string>? SourcegraphUrl { get; set; }

        [Input("spamCheckApiKey")]
        private Input<string>? _spamCheckApiKey;

        /// <summary>
        /// API key used by GitLab for accessing the Spam Check service endpoint.
        /// </summary>
        public Input<string>? SpamCheckApiKey
        {
            get => _spamCheckApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _spamCheckApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enables spam checking using external Spam Check API endpoint. Default is false.
        /// </summary>
        [Input("spamCheckEndpointEnabled")]
        public Input<bool>? SpamCheckEndpointEnabled { get; set; }

        /// <summary>
        /// URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        /// </summary>
        [Input("spamCheckEndpointUrl")]
        public Input<string>? SpamCheckEndpointUrl { get; set; }

        /// <summary>
        /// Enable pipeline suggestion banner.
        /// </summary>
        [Input("suggestPipelineEnabled")]
        public Input<bool>? SuggestPipelineEnabled { get; set; }

        /// <summary>
        /// Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        /// </summary>
        [Input("terminalMaxSessionTime")]
        public Input<int>? TerminalMaxSessionTime { get; set; }

        /// <summary>
        /// (Required by: enforce_terms) Markdown content for the ToS.
        /// </summary>
        [Input("terms")]
        public Input<string>? Terms { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleAuthenticatedApiEnabled")]
        public Input<bool>? ThrottleAuthenticatedApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds).
        /// </summary>
        [Input("throttleAuthenticatedApiPeriodInSeconds")]
        public Input<int>? ThrottleAuthenticatedApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user.
        /// </summary>
        [Input("throttleAuthenticatedApiRequestsPerPeriod")]
        public Input<int>? ThrottleAuthenticatedApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleAuthenticatedPackagesApiEnabled")]
        public Input<bool>? ThrottleAuthenticatedPackagesApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleAuthenticatedPackagesApiPeriodInSeconds")]
        public Input<int>? ThrottleAuthenticatedPackagesApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user. View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleAuthenticatedPackagesApiRequestsPerPeriod")]
        public Input<int>? ThrottleAuthenticatedPackagesApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleAuthenticatedWebEnabled")]
        public Input<bool>? ThrottleAuthenticatedWebEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds).
        /// </summary>
        [Input("throttleAuthenticatedWebPeriodInSeconds")]
        public Input<int>? ThrottleAuthenticatedWebPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user.
        /// </summary>
        [Input("throttleAuthenticatedWebRequestsPerPeriod")]
        public Input<int>? ThrottleAuthenticatedWebRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleUnauthenticatedApiEnabled")]
        public Input<bool>? ThrottleUnauthenticatedApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period in seconds.
        /// </summary>
        [Input("throttleUnauthenticatedApiPeriodInSeconds")]
        public Input<int>? ThrottleUnauthenticatedApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Max requests per period per IP.
        /// </summary>
        [Input("throttleUnauthenticatedApiRequestsPerPeriod")]
        public Input<int>? ThrottleUnauthenticatedApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleUnauthenticatedPackagesApiEnabled")]
        public Input<bool>? ThrottleUnauthenticatedPackagesApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleUnauthenticatedPackagesApiPeriodInSeconds")]
        public Input<int>? ThrottleUnauthenticatedPackagesApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user. View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleUnauthenticatedPackagesApiRequestsPerPeriod")]
        public Input<int>? ThrottleUnauthenticatedPackagesApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleUnauthenticatedWebEnabled")]
        public Input<bool>? ThrottleUnauthenticatedWebEnabled { get; set; }

        /// <summary>
        /// Rate limit period in seconds.
        /// </summary>
        [Input("throttleUnauthenticatedWebPeriodInSeconds")]
        public Input<int>? ThrottleUnauthenticatedWebPeriodInSeconds { get; set; }

        /// <summary>
        /// Max requests per period per IP.
        /// </summary>
        [Input("throttleUnauthenticatedWebRequestsPerPeriod")]
        public Input<int>? ThrottleUnauthenticatedWebRequestsPerPeriod { get; set; }

        /// <summary>
        /// Limit display of time tracking units to hours. Default is false.
        /// </summary>
        [Input("timeTrackingLimitToHours")]
        public Input<bool>? TimeTrackingLimitToHours { get; set; }

        /// <summary>
        /// Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        /// </summary>
        [Input("twoFactorGracePeriod")]
        public Input<int>? TwoFactorGracePeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        /// </summary>
        [Input("uniqueIpsLimitEnabled")]
        public Input<bool>? UniqueIpsLimitEnabled { get; set; }

        /// <summary>
        /// Maximum number of IPs per user.
        /// </summary>
        [Input("uniqueIpsLimitPerUser")]
        public Input<int>? UniqueIpsLimitPerUser { get; set; }

        /// <summary>
        /// How many seconds an IP is counted towards the limit.
        /// </summary>
        [Input("uniqueIpsLimitTimeWindow")]
        public Input<int>? UniqueIpsLimitTimeWindow { get; set; }

        /// <summary>
        /// Every week GitLab reports license usage back to GitLab, Inc.
        /// </summary>
        [Input("usagePingEnabled")]
        public Input<bool>? UsagePingEnabled { get; set; }

        /// <summary>
        /// Send an email to users upon account deactivation.
        /// </summary>
        [Input("userDeactivationEmailsEnabled")]
        public Input<bool>? UserDeactivationEmailsEnabled { get; set; }

        /// <summary>
        /// Newly registered users are external by default.
        /// </summary>
        [Input("userDefaultExternal")]
        public Input<bool>? UserDefaultExternal { get; set; }

        /// <summary>
        /// Specify an email address regex pattern to identify default internal users.
        /// </summary>
        [Input("userDefaultInternalRegex")]
        public Input<string>? UserDefaultInternalRegex { get; set; }

        /// <summary>
        /// Allow users to register any application to use GitLab as an OAuth provider.
        /// </summary>
        [Input("userOauthApplications")]
        public Input<bool>? UserOauthApplications { get; set; }

        /// <summary>
        /// When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        /// </summary>
        [Input("userShowAddSshKeyMessage")]
        public Input<bool>? UserShowAddSshKeyMessage { get; set; }

        /// <summary>
        /// Let GitLab inform you when an update is available.
        /// </summary>
        [Input("versionCheckEnabled")]
        public Input<bool>? VersionCheckEnabled { get; set; }

        /// <summary>
        /// Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        /// </summary>
        [Input("webIdeClientsidePreviewEnabled")]
        public Input<bool>? WebIdeClientsidePreviewEnabled { get; set; }

        /// <summary>
        /// What’s new variant, possible values: all*tiers, current*tier, and disabled.
        /// </summary>
        [Input("whatsNewVariant")]
        public Input<string>? WhatsNewVariant { get; set; }

        /// <summary>
        /// Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
        /// </summary>
        [Input("wikiPageMaxContentBytes")]
        public Input<int>? WikiPageMaxContentBytes { get; set; }

        public ApplicationSettingsArgs()
        {
        }
        public static new ApplicationSettingsArgs Empty => new ApplicationSettingsArgs();
    }

    public sealed class ApplicationSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        /// </summary>
        [Input("abuseNotificationEmail")]
        public Input<string>? AbuseNotificationEmail { get; set; }

        /// <summary>
        /// Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        /// </summary>
        [Input("adminMode")]
        public Input<bool>? AdminMode { get; set; }

        /// <summary>
        /// Where to redirect users after logout.
        /// </summary>
        [Input("afterSignOutPath")]
        public Input<string>? AfterSignOutPath { get; set; }

        /// <summary>
        /// Text shown to the user after signing up.
        /// </summary>
        [Input("afterSignUpText")]
        public Input<string>? AfterSignUpText { get; set; }

        [Input("akismetApiKey")]
        private Input<string>? _akismetApiKey;

        /// <summary>
        /// API key for Akismet spam protection.
        /// </summary>
        public Input<string>? AkismetApiKey
        {
            get => _akismetApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _akismetApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        /// </summary>
        [Input("akismetEnabled")]
        public Input<bool>? AkismetEnabled { get; set; }

        /// <summary>
        /// Set to true to allow group owners to manage LDAP.
        /// </summary>
        [Input("allowGroupOwnersToManageLdap")]
        public Input<bool>? AllowGroupOwnersToManageLdap { get; set; }

        /// <summary>
        /// Allow requests to the local network from system hooks.
        /// </summary>
        [Input("allowLocalRequestsFromSystemHooks")]
        public Input<bool>? AllowLocalRequestsFromSystemHooks { get; set; }

        /// <summary>
        /// Allow requests to the local network from web hooks and services.
        /// </summary>
        [Input("allowLocalRequestsFromWebHooksAndServices")]
        public Input<bool>? AllowLocalRequestsFromWebHooksAndServices { get; set; }

        /// <summary>
        /// Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        /// </summary>
        [Input("archiveBuildsInHumanReadable")]
        public Input<string>? ArchiveBuildsInHumanReadable { get; set; }

        [Input("assetProxyAllowlists")]
        private InputList<string>? _assetProxyAllowlists;

        /// <summary>
        /// Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        /// </summary>
        public InputList<string> AssetProxyAllowlists
        {
            get => _assetProxyAllowlists ?? (_assetProxyAllowlists = new InputList<string>());
            set => _assetProxyAllowlists = value;
        }

        /// <summary>
        /// (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        /// </summary>
        [Input("assetProxyEnabled")]
        public Input<bool>? AssetProxyEnabled { get; set; }

        [Input("assetProxySecretKey")]
        private Input<string>? _assetProxySecretKey;

        /// <summary>
        /// Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        /// </summary>
        public Input<string>? AssetProxySecretKey
        {
            get => _assetProxySecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _assetProxySecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// URL of the asset proxy server. GitLab restart is required to apply changes.
        /// </summary>
        [Input("assetProxyUrl")]
        public Input<string>? AssetProxyUrl { get; set; }

        /// <summary>
        /// By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        /// </summary>
        [Input("authorizedKeysEnabled")]
        public Input<bool>? AuthorizedKeysEnabled { get; set; }

        /// <summary>
        /// Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        /// </summary>
        [Input("autoDevopsDomain")]
        public Input<string>? AutoDevopsDomain { get; set; }

        /// <summary>
        /// Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        /// </summary>
        [Input("autoDevopsEnabled")]
        public Input<bool>? AutoDevopsEnabled { get; set; }

        /// <summary>
        /// Enabling this permits automatic allocation of purchased storage in a namespace.
        /// </summary>
        [Input("automaticPurchasedStorageAllocation")]
        public Input<bool>? AutomaticPurchasedStorageAllocation { get; set; }

        /// <summary>
        /// Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        /// </summary>
        [Input("checkNamespacePlan")]
        public Input<bool>? CheckNamespacePlan { get; set; }

        /// <summary>
        /// Custom hostname (for private commit emails).
        /// </summary>
        [Input("commitEmailHostname")]
        public Input<string>? CommitEmailHostname { get; set; }

        /// <summary>
        /// Enable cleanup policies for all projects.
        /// </summary>
        [Input("containerExpirationPoliciesEnableHistoricEntries")]
        public Input<bool>? ContainerExpirationPoliciesEnableHistoricEntries { get; set; }

        /// <summary>
        /// The maximum number of tags that can be deleted in a single execution of cleanup policies.
        /// </summary>
        [Input("containerRegistryCleanupTagsServiceMaxListSize")]
        public Input<int>? ContainerRegistryCleanupTagsServiceMaxListSize { get; set; }

        /// <summary>
        /// The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        /// </summary>
        [Input("containerRegistryDeleteTagsServiceTimeout")]
        public Input<int>? ContainerRegistryDeleteTagsServiceTimeout { get; set; }

        /// <summary>
        /// Caching during the execution of cleanup policies.
        /// </summary>
        [Input("containerRegistryExpirationPoliciesCaching")]
        public Input<bool>? ContainerRegistryExpirationPoliciesCaching { get; set; }

        /// <summary>
        /// Number of workers for cleanup policies.
        /// </summary>
        [Input("containerRegistryExpirationPoliciesWorkerCapacity")]
        public Input<int>? ContainerRegistryExpirationPoliciesWorkerCapacity { get; set; }

        /// <summary>
        /// Container Registry token duration in minutes.
        /// </summary>
        [Input("containerRegistryTokenExpireDelay")]
        public Input<int>? ContainerRegistryTokenExpireDelay { get; set; }

        /// <summary>
        /// Enable automatic deactivation of dormant users.
        /// </summary>
        [Input("deactivateDormantUsers")]
        public Input<bool>? DeactivateDormantUsers { get; set; }

        /// <summary>
        /// Set the default expiration time for each job’s artifacts.
        /// </summary>
        [Input("defaultArtifactsExpireIn")]
        public Input<string>? DefaultArtifactsExpireIn { get; set; }

        /// <summary>
        /// Instance-level custom initial branch name (introduced in GitLab 13.2).
        /// </summary>
        [Input("defaultBranchName")]
        public Input<string>? DefaultBranchName { get; set; }

        /// <summary>
        /// Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        /// </summary>
        [Input("defaultBranchProtection")]
        public Input<int>? DefaultBranchProtection { get; set; }

        /// <summary>
        /// Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        /// </summary>
        [Input("defaultCiConfigPath")]
        public Input<string>? DefaultCiConfigPath { get; set; }

        /// <summary>
        /// What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Input("defaultGroupVisibility")]
        public Input<string>? DefaultGroupVisibility { get; set; }

        /// <summary>
        /// Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        /// </summary>
        [Input("defaultProjectCreation")]
        public Input<int>? DefaultProjectCreation { get; set; }

        /// <summary>
        /// What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Input("defaultProjectVisibility")]
        public Input<string>? DefaultProjectVisibility { get; set; }

        /// <summary>
        /// Project limit per user. Default is 100000.
        /// </summary>
        [Input("defaultProjectsLimit")]
        public Input<int>? DefaultProjectsLimit { get; set; }

        /// <summary>
        /// What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.
        /// </summary>
        [Input("defaultSnippetVisibility")]
        public Input<string>? DefaultSnippetVisibility { get; set; }

        /// <summary>
        /// Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        /// </summary>
        [Input("delayedGroupDeletion")]
        public Input<bool>? DelayedGroupDeletion { get; set; }

        /// <summary>
        /// Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        /// </summary>
        [Input("delayedProjectDeletion")]
        public Input<bool>? DelayedProjectDeletion { get; set; }

        /// <summary>
        /// Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion, disabled by default).
        /// </summary>
        [Input("deleteInactiveProjects")]
        public Input<bool>? DeleteInactiveProjects { get; set; }

        /// <summary>
        /// The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        /// </summary>
        [Input("deletionAdjournedPeriod")]
        public Input<int>? DeletionAdjournedPeriod { get; set; }

        /// <summary>
        /// Maximum files in a diff.
        /// </summary>
        [Input("diffMaxFiles")]
        public Input<int>? DiffMaxFiles { get; set; }

        /// <summary>
        /// Maximum lines in a diff.
        /// </summary>
        [Input("diffMaxLines")]
        public Input<int>? DiffMaxLines { get; set; }

        /// <summary>
        /// Maximum diff patch size, in bytes.
        /// </summary>
        [Input("diffMaxPatchBytes")]
        public Input<int>? DiffMaxPatchBytes { get; set; }

        /// <summary>
        /// Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        /// </summary>
        [Input("disableFeedToken")]
        public Input<bool>? DisableFeedToken { get; set; }

        [Input("disabledOauthSignInSources")]
        private InputList<string>? _disabledOauthSignInSources;

        /// <summary>
        /// Disabled OAuth sign-in sources.
        /// </summary>
        public InputList<string> DisabledOauthSignInSources
        {
            get => _disabledOauthSignInSources ?? (_disabledOauthSignInSources = new InputList<string>());
            set => _disabledOauthSignInSources = value;
        }

        /// <summary>
        /// Enforce DNS rebinding attack protection.
        /// </summary>
        [Input("dnsRebindingProtectionEnabled")]
        public Input<bool>? DnsRebindingProtectionEnabled { get; set; }

        [Input("domainAllowlists")]
        private InputList<string>? _domainAllowlists;

        /// <summary>
        /// Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.
        /// </summary>
        public InputList<string> DomainAllowlists
        {
            get => _domainAllowlists ?? (_domainAllowlists = new InputList<string>());
            set => _domainAllowlists = value;
        }

        /// <summary>
        /// (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        /// </summary>
        [Input("domainDenylistEnabled")]
        public Input<bool>? DomainDenylistEnabled { get; set; }

        [Input("domainDenylists")]
        private InputList<string>? _domainDenylists;

        /// <summary>
        /// Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        /// </summary>
        public InputList<string> DomainDenylists
        {
            get => _domainDenylists ?? (_domainDenylists = new InputList<string>());
            set => _domainDenylists = value;
        }

        /// <summary>
        /// The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.
        /// </summary>
        [Input("dsaKeyRestriction")]
        public Input<int>? DsaKeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.
        /// </summary>
        [Input("ecdsaKeyRestriction")]
        public Input<int>? EcdsaKeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. Default is 0 (no restriction). -1 disables ECDSA*SK keys.
        /// </summary>
        [Input("ecdsaSkKeyRestriction")]
        public Input<int>? EcdsaSkKeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.
        /// </summary>
        [Input("ed25519KeyRestriction")]
        public Input<int>? Ed25519KeyRestriction { get; set; }

        /// <summary>
        /// The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. Default is 0 (no restriction). -1 disables ED25519*SK keys.
        /// </summary>
        [Input("ed25519SkKeyRestriction")]
        public Input<int>? Ed25519SkKeyRestriction { get; set; }

        [Input("eksAccessKeyId")]
        private Input<string>? _eksAccessKeyId;

        /// <summary>
        /// AWS IAM access key ID.
        /// </summary>
        public Input<string>? EksAccessKeyId
        {
            get => _eksAccessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _eksAccessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Amazon account ID.
        /// </summary>
        [Input("eksAccountId")]
        public Input<string>? EksAccountId { get; set; }

        /// <summary>
        /// Enable integration with Amazon EKS.
        /// </summary>
        [Input("eksIntegrationEnabled")]
        public Input<bool>? EksIntegrationEnabled { get; set; }

        [Input("eksSecretAccessKey")]
        private Input<string>? _eksSecretAccessKey;

        /// <summary>
        /// AWS IAM secret access key.
        /// </summary>
        public Input<string>? EksSecretAccessKey
        {
            get => _eksSecretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _eksSecretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable the use of AWS hosted Elasticsearch.
        /// </summary>
        [Input("elasticsearchAws")]
        public Input<bool>? ElasticsearchAws { get; set; }

        [Input("elasticsearchAwsAccessKey")]
        private Input<string>? _elasticsearchAwsAccessKey;

        /// <summary>
        /// AWS IAM access key.
        /// </summary>
        public Input<string>? ElasticsearchAwsAccessKey
        {
            get => _elasticsearchAwsAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _elasticsearchAwsAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The AWS region the Elasticsearch domain is configured.
        /// </summary>
        [Input("elasticsearchAwsRegion")]
        public Input<string>? ElasticsearchAwsRegion { get; set; }

        [Input("elasticsearchAwsSecretAccessKey")]
        private Input<string>? _elasticsearchAwsSecretAccessKey;

        /// <summary>
        /// AWS IAM secret access key.
        /// </summary>
        public Input<string>? ElasticsearchAwsSecretAccessKey
        {
            get => _elasticsearchAwsSecretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _elasticsearchAwsSecretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        /// </summary>
        [Input("elasticsearchIndexedFieldLengthLimit")]
        public Input<int>? ElasticsearchIndexedFieldLengthLimit { get; set; }

        /// <summary>
        /// Maximum size of repository and wiki files that are indexed by Elasticsearch.
        /// </summary>
        [Input("elasticsearchIndexedFileSizeLimitKb")]
        public Input<int>? ElasticsearchIndexedFileSizeLimitKb { get; set; }

        /// <summary>
        /// Enable Elasticsearch indexing.
        /// </summary>
        [Input("elasticsearchIndexing")]
        public Input<bool>? ElasticsearchIndexing { get; set; }

        /// <summary>
        /// Limit Elasticsearch to index certain namespaces and projects.
        /// </summary>
        [Input("elasticsearchLimitIndexing")]
        public Input<bool>? ElasticsearchLimitIndexing { get; set; }

        /// <summary>
        /// Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        /// </summary>
        [Input("elasticsearchMaxBulkConcurrency")]
        public Input<int>? ElasticsearchMaxBulkConcurrency { get; set; }

        /// <summary>
        /// Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        /// </summary>
        [Input("elasticsearchMaxBulkSizeMb")]
        public Input<int>? ElasticsearchMaxBulkSizeMb { get; set; }

        [Input("elasticsearchNamespaceIds")]
        private InputList<string>? _elasticsearchNamespaceIds;

        /// <summary>
        /// The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        /// </summary>
        public InputList<string> ElasticsearchNamespaceIds
        {
            get => _elasticsearchNamespaceIds ?? (_elasticsearchNamespaceIds = new InputList<string>());
            set => _elasticsearchNamespaceIds = value;
        }

        [Input("elasticsearchPassword")]
        private Input<string>? _elasticsearchPassword;

        /// <summary>
        /// The password of your Elasticsearch instance.
        /// </summary>
        public Input<string>? ElasticsearchPassword
        {
            get => _elasticsearchPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _elasticsearchPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("elasticsearchProjectIds")]
        private InputList<string>? _elasticsearchProjectIds;

        /// <summary>
        /// The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        /// </summary>
        public InputList<string> ElasticsearchProjectIds
        {
            get => _elasticsearchProjectIds ?? (_elasticsearchProjectIds = new InputList<string>());
            set => _elasticsearchProjectIds = value;
        }

        /// <summary>
        /// Enable Elasticsearch search.
        /// </summary>
        [Input("elasticsearchSearch")]
        public Input<bool>? ElasticsearchSearch { get; set; }

        [Input("elasticsearchUrls")]
        private InputList<string>? _elasticsearchUrls;

        /// <summary>
        /// The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        /// </summary>
        public InputList<string> ElasticsearchUrls
        {
            get => _elasticsearchUrls ?? (_elasticsearchUrls = new InputList<string>());
            set => _elasticsearchUrls = value;
        }

        /// <summary>
        /// The username of your Elasticsearch instance.
        /// </summary>
        [Input("elasticsearchUsername")]
        public Input<string>? ElasticsearchUsername { get; set; }

        /// <summary>
        /// Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        /// </summary>
        [Input("emailAdditionalText")]
        public Input<string>? EmailAdditionalText { get; set; }

        /// <summary>
        /// Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        /// </summary>
        [Input("emailAuthorInBody")]
        public Input<bool>? EmailAuthorInBody { get; set; }

        /// <summary>
        /// Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        /// </summary>
        [Input("enabledGitAccessProtocol")]
        public Input<string>? EnabledGitAccessProtocol { get; set; }

        /// <summary>
        /// Enabling this permits enforcement of namespace storage limits.
        /// </summary>
        [Input("enforceNamespaceStorageLimit")]
        public Input<bool>? EnforceNamespaceStorageLimit { get; set; }

        /// <summary>
        /// (If enabled, requires: terms) Enforce application ToS to all users.
        /// </summary>
        [Input("enforceTerms")]
        public Input<bool>? EnforceTerms { get; set; }

        /// <summary>
        /// (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        /// </summary>
        [Input("externalAuthClientCert")]
        public Input<string>? ExternalAuthClientCert { get; set; }

        [Input("externalAuthClientKey")]
        private Input<string>? _externalAuthClientKey;

        /// <summary>
        /// Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        /// </summary>
        public Input<string>? ExternalAuthClientKey
        {
            get => _externalAuthClientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _externalAuthClientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("externalAuthClientKeyPass")]
        private Input<string>? _externalAuthClientKeyPass;

        /// <summary>
        /// Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        /// </summary>
        public Input<string>? ExternalAuthClientKeyPass
        {
            get => _externalAuthClientKeyPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _externalAuthClientKeyPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The default classification label to use when requesting authorization and no classification label has been specified on the project.
        /// </summary>
        [Input("externalAuthorizationServiceDefaultLabel")]
        public Input<string>? ExternalAuthorizationServiceDefaultLabel { get; set; }

        /// <summary>
        /// (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        /// </summary>
        [Input("externalAuthorizationServiceEnabled")]
        public Input<bool>? ExternalAuthorizationServiceEnabled { get; set; }

        /// <summary>
        /// The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        /// </summary>
        [Input("externalAuthorizationServiceTimeout")]
        public Input<double>? ExternalAuthorizationServiceTimeout { get; set; }

        /// <summary>
        /// URL to which authorization requests are directed.
        /// </summary>
        [Input("externalAuthorizationServiceUrl")]
        public Input<string>? ExternalAuthorizationServiceUrl { get; set; }

        /// <summary>
        /// How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        /// </summary>
        [Input("externalPipelineValidationServiceTimeout")]
        public Input<int>? ExternalPipelineValidationServiceTimeout { get; set; }

        /// <summary>
        /// Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        /// </summary>
        [Input("externalPipelineValidationServiceToken")]
        public Input<string>? ExternalPipelineValidationServiceToken { get; set; }

        /// <summary>
        /// URL to use for pipeline validation requests.
        /// </summary>
        [Input("externalPipelineValidationServiceUrl")]
        public Input<string>? ExternalPipelineValidationServiceUrl { get; set; }

        /// <summary>
        /// The ID of a project to load custom file templates from.
        /// </summary>
        [Input("fileTemplateProjectId")]
        public Input<int>? FileTemplateProjectId { get; set; }

        /// <summary>
        /// Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.
        /// </summary>
        [Input("firstDayOfWeek")]
        public Input<int>? FirstDayOfWeek { get; set; }

        /// <summary>
        /// Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        /// </summary>
        [Input("geoNodeAllowedIps")]
        public Input<string>? GeoNodeAllowedIps { get; set; }

        /// <summary>
        /// The amount of seconds after which a request to get a secondary node status times out.
        /// </summary>
        [Input("geoStatusTimeout")]
        public Input<int>? GeoStatusTimeout { get; set; }

        [Input("gitRateLimitUsersAllowlists")]
        private InputList<string>? _gitRateLimitUsersAllowlists;

        /// <summary>
        /// List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.
        /// </summary>
        public InputList<string> GitRateLimitUsersAllowlists
        {
            get => _gitRateLimitUsersAllowlists ?? (_gitRateLimitUsersAllowlists = new InputList<string>());
            set => _gitRateLimitUsersAllowlists = value;
        }

        /// <summary>
        /// Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        /// </summary>
        [Input("gitTwoFactorSessionExpiry")]
        public Input<int>? GitTwoFactorSessionExpiry { get; set; }

        /// <summary>
        /// Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        /// </summary>
        [Input("gitalyTimeoutDefault")]
        public Input<int>? GitalyTimeoutDefault { get; set; }

        /// <summary>
        /// Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        /// </summary>
        [Input("gitalyTimeoutFast")]
        public Input<int>? GitalyTimeoutFast { get; set; }

        /// <summary>
        /// Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        /// </summary>
        [Input("gitalyTimeoutMedium")]
        public Input<int>? GitalyTimeoutMedium { get; set; }

        /// <summary>
        /// Enable Grafana.
        /// </summary>
        [Input("grafanaEnabled")]
        public Input<bool>? GrafanaEnabled { get; set; }

        /// <summary>
        /// Grafana URL.
        /// </summary>
        [Input("grafanaUrl")]
        public Input<string>? GrafanaUrl { get; set; }

        /// <summary>
        /// Enable Gravatar.
        /// </summary>
        [Input("gravatarEnabled")]
        public Input<bool>? GravatarEnabled { get; set; }

        /// <summary>
        /// Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        /// </summary>
        [Input("hashedStorageEnabled")]
        public Input<bool>? HashedStorageEnabled { get; set; }

        /// <summary>
        /// Hide marketing-related entries from help.
        /// </summary>
        [Input("helpPageHideCommercialContent")]
        public Input<bool>? HelpPageHideCommercialContent { get; set; }

        /// <summary>
        /// Alternate support URL for help page and help dropdown.
        /// </summary>
        [Input("helpPageSupportUrl")]
        public Input<string>? HelpPageSupportUrl { get; set; }

        /// <summary>
        /// Custom text displayed on the help page.
        /// </summary>
        [Input("helpPageText")]
        public Input<string>? HelpPageText { get; set; }

        /// <summary>
        /// GitLab server administrator information.
        /// </summary>
        [Input("helpText")]
        public Input<string>? HelpText { get; set; }

        /// <summary>
        /// Do not display offers from third parties in GitLab.
        /// </summary>
        [Input("hideThirdPartyOffers")]
        public Input<bool>? HideThirdPartyOffers { get; set; }

        /// <summary>
        /// Redirect to this URL when not logged in.
        /// </summary>
        [Input("homePageUrl")]
        public Input<string>? HomePageUrl { get; set; }

        /// <summary>
        /// (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        /// </summary>
        [Input("housekeepingEnabled")]
        public Input<bool>? HousekeepingEnabled { get; set; }

        /// <summary>
        /// Number of Git pushes after which an incremental git repack is run.
        /// </summary>
        [Input("housekeepingFullRepackPeriod")]
        public Input<int>? HousekeepingFullRepackPeriod { get; set; }

        /// <summary>
        /// Number of Git pushes after which git gc is run.
        /// </summary>
        [Input("housekeepingGcPeriod")]
        public Input<int>? HousekeepingGcPeriod { get; set; }

        /// <summary>
        /// Number of Git pushes after which an incremental git repack is run.
        /// </summary>
        [Input("housekeepingIncrementalRepackPeriod")]
        public Input<int>? HousekeepingIncrementalRepackPeriod { get; set; }

        /// <summary>
        /// Enable HTML emails.
        /// </summary>
        [Input("htmlEmailsEnabled")]
        public Input<bool>? HtmlEmailsEnabled { get; set; }

        [Input("importSources")]
        private InputList<string>? _importSources;

        /// <summary>
        /// Sources to allow project import from, possible values: github, bitbucket, bitbucket*server, gitlab, fogbugz, git, gitlab*project, gitea, manifest, and phabricator.
        /// </summary>
        public InputList<string> ImportSources
        {
            get => _importSources ?? (_importSources = new InputList<string>());
            set => _importSources = value;
        }

        /// <summary>
        /// Enable in-product marketing emails. Enabled by default.
        /// </summary>
        [Input("inProductMarketingEmailsEnabled")]
        public Input<bool>? InProductMarketingEmailsEnabled { get; set; }

        /// <summary>
        /// If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Input("inactiveProjectsDeleteAfterMonths")]
        public Input<int>? InactiveProjectsDeleteAfterMonths { get; set; }

        /// <summary>
        /// If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Input("inactiveProjectsMinSizeMb")]
        public Input<int>? InactiveProjectsMinSizeMb { get; set; }

        /// <summary>
        /// If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        /// </summary>
        [Input("inactiveProjectsSendWarningEmailAfterMonths")]
        public Input<int>? InactiveProjectsSendWarningEmailAfterMonths { get; set; }

        /// <summary>
        /// Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.
        /// </summary>
        [Input("invisibleCaptchaEnabled")]
        public Input<bool>? InvisibleCaptchaEnabled { get; set; }

        /// <summary>
        /// Max number of issue creation requests per minute per user. Disabled by default.
        /// </summary>
        [Input("issuesCreateLimit")]
        public Input<int>? IssuesCreateLimit { get; set; }

        /// <summary>
        /// Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.
        /// </summary>
        [Input("keepLatestArtifact")]
        public Input<bool>? KeepLatestArtifact { get; set; }

        /// <summary>
        /// Increase this value when any cached Markdown should be invalidated.
        /// </summary>
        [Input("localMarkdownVersion")]
        public Input<int>? LocalMarkdownVersion { get; set; }

        /// <summary>
        /// Enable Mailgun event receiver.
        /// </summary>
        [Input("mailgunEventsEnabled")]
        public Input<bool>? MailgunEventsEnabled { get; set; }

        [Input("mailgunSigningKey")]
        private Input<string>? _mailgunSigningKey;

        /// <summary>
        /// The Mailgun HTTP webhook signing key for receiving events from webhook.
        /// </summary>
        public Input<string>? MailgunSigningKey
        {
            get => _mailgunSigningKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _mailgunSigningKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        /// </summary>
        [Input("maintenanceMode")]
        public Input<bool>? MaintenanceMode { get; set; }

        /// <summary>
        /// Message displayed when instance is in maintenance mode.
        /// </summary>
        [Input("maintenanceModeMessage")]
        public Input<string>? MaintenanceModeMessage { get; set; }

        /// <summary>
        /// Maximum artifacts size in MB.
        /// </summary>
        [Input("maxArtifactsSize")]
        public Input<int>? MaxArtifactsSize { get; set; }

        /// <summary>
        /// Limit attachment size in MB.
        /// </summary>
        [Input("maxAttachmentSize")]
        public Input<int>? MaxAttachmentSize { get; set; }

        /// <summary>
        /// Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).
        /// </summary>
        [Input("maxExportSize")]
        public Input<int>? MaxExportSize { get; set; }

        /// <summary>
        /// Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.
        /// </summary>
        [Input("maxImportSize")]
        public Input<int>? MaxImportSize { get; set; }

        /// <summary>
        /// Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        /// </summary>
        [Input("maxNumberOfRepositoryDownloads")]
        public Input<int>? MaxNumberOfRepositoryDownloads { get; set; }

        /// <summary>
        /// Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        /// </summary>
        [Input("maxNumberOfRepositoryDownloadsWithinTimePeriod")]
        public Input<int>? MaxNumberOfRepositoryDownloadsWithinTimePeriod { get; set; }

        /// <summary>
        /// Maximum size of pages repositories in MB.
        /// </summary>
        [Input("maxPagesSize")]
        public Input<int>? MaxPagesSize { get; set; }

        /// <summary>
        /// Maximum allowable lifetime for access tokens in days.
        /// </summary>
        [Input("maxPersonalAccessTokenLifetime")]
        public Input<int>? MaxPersonalAccessTokenLifetime { get; set; }

        /// <summary>
        /// Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        /// </summary>
        [Input("maxSshKeyLifetime")]
        public Input<int>? MaxSshKeyLifetime { get; set; }

        /// <summary>
        /// A method call is only tracked when it takes longer than the given amount of milliseconds.
        /// </summary>
        [Input("metricsMethodCallThreshold")]
        public Input<int>? MetricsMethodCallThreshold { get; set; }

        /// <summary>
        /// Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        /// </summary>
        [Input("mirrorAvailable")]
        public Input<bool>? MirrorAvailable { get; set; }

        /// <summary>
        /// Minimum capacity to be available before scheduling more mirrors preemptively.
        /// </summary>
        [Input("mirrorCapacityThreshold")]
        public Input<int>? MirrorCapacityThreshold { get; set; }

        /// <summary>
        /// Maximum number of mirrors that can be synchronizing at the same time.
        /// </summary>
        [Input("mirrorMaxCapacity")]
        public Input<int>? MirrorMaxCapacity { get; set; }

        /// <summary>
        /// Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        /// </summary>
        [Input("mirrorMaxDelay")]
        public Input<int>? MirrorMaxDelay { get; set; }

        /// <summary>
        /// Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        /// </summary>
        [Input("npmPackageRequestsForwarding")]
        public Input<bool>? NpmPackageRequestsForwarding { get; set; }

        [Input("outboundLocalRequestsWhitelists")]
        private InputList<string>? _outboundLocalRequestsWhitelists;

        /// <summary>
        /// Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        /// </summary>
        public InputList<string> OutboundLocalRequestsWhitelists
        {
            get => _outboundLocalRequestsWhitelists ?? (_outboundLocalRequestsWhitelists = new InputList<string>());
            set => _outboundLocalRequestsWhitelists = value;
        }

        /// <summary>
        /// Number of workers assigned to the packages cleanup policies.
        /// </summary>
        [Input("packageRegistryCleanupPoliciesWorkerCapacity")]
        public Input<int>? PackageRegistryCleanupPoliciesWorkerCapacity { get; set; }

        /// <summary>
        /// Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        /// </summary>
        [Input("pagesDomainVerificationEnabled")]
        public Input<bool>? PagesDomainVerificationEnabled { get; set; }

        /// <summary>
        /// Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.
        /// </summary>
        [Input("passwordAuthenticationEnabledForGit")]
        public Input<bool>? PasswordAuthenticationEnabledForGit { get; set; }

        /// <summary>
        /// Enable authentication for the web interface via a GitLab account password. Default is true.
        /// </summary>
        [Input("passwordAuthenticationEnabledForWeb")]
        public Input<bool>? PasswordAuthenticationEnabledForWeb { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordLowercaseRequired")]
        public Input<bool>? PasswordLowercaseRequired { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordNumberRequired")]
        public Input<bool>? PasswordNumberRequired { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordSymbolRequired")]
        public Input<bool>? PasswordSymbolRequired { get; set; }

        /// <summary>
        /// Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        /// </summary>
        [Input("passwordUppercaseRequired")]
        public Input<bool>? PasswordUppercaseRequired { get; set; }

        /// <summary>
        /// Path of the group that is allowed to toggle the performance bar.
        /// </summary>
        [Input("performanceBarAllowedGroupPath")]
        public Input<string>? PerformanceBarAllowedGroupPath { get; set; }

        /// <summary>
        /// Prefix for all generated personal access tokens.
        /// </summary>
        [Input("personalAccessTokenPrefix")]
        public Input<string>? PersonalAccessTokenPrefix { get; set; }

        /// <summary>
        /// Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.
        /// </summary>
        [Input("pipelineLimitPerProjectUserSha")]
        public Input<int>? PipelineLimitPerProjectUserSha { get; set; }

        /// <summary>
        /// (If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.
        /// </summary>
        [Input("plantumlEnabled")]
        public Input<bool>? PlantumlEnabled { get; set; }

        /// <summary>
        /// The PlantUML instance URL for integration.
        /// </summary>
        [Input("plantumlUrl")]
        public Input<string>? PlantumlUrl { get; set; }

        /// <summary>
        /// Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        /// </summary>
        [Input("pollingIntervalMultiplier")]
        public Input<double>? PollingIntervalMultiplier { get; set; }

        /// <summary>
        /// Enable project export.
        /// </summary>
        [Input("projectExportEnabled")]
        public Input<bool>? ProjectExportEnabled { get; set; }

        /// <summary>
        /// Enable Prometheus metrics.
        /// </summary>
        [Input("prometheusMetricsEnabled")]
        public Input<bool>? PrometheusMetricsEnabled { get; set; }

        /// <summary>
        /// CI/CD variables are protected by default.
        /// </summary>
        [Input("protectedCiVariables")]
        public Input<bool>? ProtectedCiVariables { get; set; }

        /// <summary>
        /// Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        /// </summary>
        [Input("pushEventActivitiesLimit")]
        public Input<int>? PushEventActivitiesLimit { get; set; }

        /// <summary>
        /// Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        /// </summary>
        [Input("pushEventHooksLimit")]
        public Input<int>? PushEventHooksLimit { get; set; }

        /// <summary>
        /// Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        /// </summary>
        [Input("pypiPackageRequestsForwarding")]
        public Input<bool>? PypiPackageRequestsForwarding { get; set; }

        /// <summary>
        /// When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        /// </summary>
        [Input("rateLimitingResponseText")]
        public Input<string>? RateLimitingResponseText { get; set; }

        /// <summary>
        /// Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.
        /// </summary>
        [Input("rawBlobRequestLimit")]
        public Input<int>? RawBlobRequestLimit { get; set; }

        /// <summary>
        /// (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        /// </summary>
        [Input("recaptchaEnabled")]
        public Input<bool>? RecaptchaEnabled { get; set; }

        [Input("recaptchaPrivateKey")]
        private Input<string>? _recaptchaPrivateKey;

        /// <summary>
        /// Private key for reCAPTCHA.
        /// </summary>
        public Input<string>? RecaptchaPrivateKey
        {
            get => _recaptchaPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recaptchaPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("recaptchaSiteKey")]
        private Input<string>? _recaptchaSiteKey;

        /// <summary>
        /// Site key for reCAPTCHA.
        /// </summary>
        public Input<string>? RecaptchaSiteKey
        {
            get => _recaptchaSiteKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recaptchaSiteKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Maximum push size (MB).
        /// </summary>
        [Input("receiveMaxInputSize")]
        public Input<int>? ReceiveMaxInputSize { get; set; }

        /// <summary>
        /// GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        /// </summary>
        [Input("repositoryChecksEnabled")]
        public Input<bool>? RepositoryChecksEnabled { get; set; }

        /// <summary>
        /// Size limit per repository (MB).
        /// </summary>
        [Input("repositorySizeLimit")]
        public Input<int>? RepositorySizeLimit { get; set; }

        [Input("repositoryStorages")]
        private InputList<string>? _repositoryStorages;

        /// <summary>
        /// (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        /// </summary>
        public InputList<string> RepositoryStorages
        {
            get => _repositoryStorages ?? (_repositoryStorages = new InputList<string>());
            set => _repositoryStorages = value;
        }

        [Input("repositoryStoragesWeighted")]
        private InputMap<int>? _repositoryStoragesWeighted;

        /// <summary>
        /// (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        /// </summary>
        public InputMap<int> RepositoryStoragesWeighted
        {
            get => _repositoryStoragesWeighted ?? (_repositoryStoragesWeighted = new InputMap<int>());
            set => _repositoryStoragesWeighted = value;
        }

        /// <summary>
        /// When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        /// </summary>
        [Input("requireAdminApprovalAfterUserSignup")]
        public Input<bool>? RequireAdminApprovalAfterUserSignup { get; set; }

        /// <summary>
        /// (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        /// </summary>
        [Input("requireTwoFactorAuthentication")]
        public Input<bool>? RequireTwoFactorAuthentication { get; set; }

        [Input("restrictedVisibilityLevels")]
        private InputList<string>? _restrictedVisibilityLevels;

        /// <summary>
        /// Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.
        /// </summary>
        public InputList<string> RestrictedVisibilityLevels
        {
            get => _restrictedVisibilityLevels ?? (_restrictedVisibilityLevels = new InputList<string>());
            set => _restrictedVisibilityLevels = value;
        }

        /// <summary>
        /// The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.
        /// </summary>
        [Input("rsaKeyRestriction")]
        public Input<int>? RsaKeyRestriction { get; set; }

        /// <summary>
        /// Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.
        /// </summary>
        [Input("searchRateLimit")]
        public Input<int>? SearchRateLimit { get; set; }

        /// <summary>
        /// Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.
        /// </summary>
        [Input("searchRateLimitUnauthenticated")]
        public Input<int>? SearchRateLimitUnauthenticated { get; set; }

        /// <summary>
        /// Send confirmation email on sign-up.
        /// </summary>
        [Input("sendUserConfirmationEmail")]
        public Input<bool>? SendUserConfirmationEmail { get; set; }

        /// <summary>
        /// Session duration in minutes. GitLab restart is required to apply changes.
        /// </summary>
        [Input("sessionExpireDelay")]
        public Input<int>? SessionExpireDelay { get; set; }

        /// <summary>
        /// (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        /// </summary>
        [Input("sharedRunnersEnabled")]
        public Input<bool>? SharedRunnersEnabled { get; set; }

        /// <summary>
        /// Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        /// </summary>
        [Input("sharedRunnersMinutes")]
        public Input<int>? SharedRunnersMinutes { get; set; }

        /// <summary>
        /// Shared runners text.
        /// </summary>
        [Input("sharedRunnersText")]
        public Input<string>? SharedRunnersText { get; set; }

        /// <summary>
        /// The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).
        /// </summary>
        [Input("sidekiqJobLimiterCompressionThresholdBytes")]
        public Input<int>? SidekiqJobLimiterCompressionThresholdBytes { get; set; }

        /// <summary>
        /// The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).
        /// </summary>
        [Input("sidekiqJobLimiterLimitBytes")]
        public Input<int>? SidekiqJobLimiterLimitBytes { get; set; }

        /// <summary>
        /// track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.
        /// </summary>
        [Input("sidekiqJobLimiterMode")]
        public Input<string>? SidekiqJobLimiterMode { get; set; }

        /// <summary>
        /// Text on the login page.
        /// </summary>
        [Input("signInText")]
        public Input<string>? SignInText { get; set; }

        /// <summary>
        /// Enable registration. Default is true.
        /// </summary>
        [Input("signupEnabled")]
        public Input<bool>? SignupEnabled { get; set; }

        /// <summary>
        /// (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        /// </summary>
        [Input("slackAppEnabled")]
        public Input<bool>? SlackAppEnabled { get; set; }

        /// <summary>
        /// The app ID of the Slack-app.
        /// </summary>
        [Input("slackAppId")]
        public Input<string>? SlackAppId { get; set; }

        [Input("slackAppSecret")]
        private Input<string>? _slackAppSecret;

        /// <summary>
        /// The app secret of the Slack-app.
        /// </summary>
        public Input<string>? SlackAppSecret
        {
            get => _slackAppSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _slackAppSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("slackAppSigningSecret")]
        private Input<string>? _slackAppSigningSecret;

        /// <summary>
        /// The signing secret of the Slack-app.
        /// </summary>
        public Input<string>? SlackAppSigningSecret
        {
            get => _slackAppSigningSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _slackAppSigningSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The verification token of the Slack-app.
        /// </summary>
        [Input("slackAppVerificationToken")]
        public Input<string>? SlackAppVerificationToken { get; set; }

        /// <summary>
        /// Max snippet content size in bytes. Default: 52428800 Bytes (50MB).
        /// </summary>
        [Input("snippetSizeLimit")]
        public Input<int>? SnippetSizeLimit { get; set; }

        /// <summary>
        /// The Snowplow site name / application ID. (for example, gitlab)
        /// </summary>
        [Input("snowplowAppId")]
        public Input<string>? SnowplowAppId { get; set; }

        /// <summary>
        /// The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        /// </summary>
        [Input("snowplowCollectorHostname")]
        public Input<string>? SnowplowCollectorHostname { get; set; }

        /// <summary>
        /// The Snowplow cookie domain. (for example, .gitlab.com)
        /// </summary>
        [Input("snowplowCookieDomain")]
        public Input<string>? SnowplowCookieDomain { get; set; }

        /// <summary>
        /// Enable snowplow tracking.
        /// </summary>
        [Input("snowplowEnabled")]
        public Input<bool>? SnowplowEnabled { get; set; }

        /// <summary>
        /// Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.
        /// </summary>
        [Input("sourcegraphEnabled")]
        public Input<bool>? SourcegraphEnabled { get; set; }

        /// <summary>
        /// Blocks Sourcegraph from being loaded on private and internal projects. Default is true.
        /// </summary>
        [Input("sourcegraphPublicOnly")]
        public Input<bool>? SourcegraphPublicOnly { get; set; }

        /// <summary>
        /// The Sourcegraph instance URL for integration.
        /// </summary>
        [Input("sourcegraphUrl")]
        public Input<string>? SourcegraphUrl { get; set; }

        [Input("spamCheckApiKey")]
        private Input<string>? _spamCheckApiKey;

        /// <summary>
        /// API key used by GitLab for accessing the Spam Check service endpoint.
        /// </summary>
        public Input<string>? SpamCheckApiKey
        {
            get => _spamCheckApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _spamCheckApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enables spam checking using external Spam Check API endpoint. Default is false.
        /// </summary>
        [Input("spamCheckEndpointEnabled")]
        public Input<bool>? SpamCheckEndpointEnabled { get; set; }

        /// <summary>
        /// URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        /// </summary>
        [Input("spamCheckEndpointUrl")]
        public Input<string>? SpamCheckEndpointUrl { get; set; }

        /// <summary>
        /// Enable pipeline suggestion banner.
        /// </summary>
        [Input("suggestPipelineEnabled")]
        public Input<bool>? SuggestPipelineEnabled { get; set; }

        /// <summary>
        /// Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        /// </summary>
        [Input("terminalMaxSessionTime")]
        public Input<int>? TerminalMaxSessionTime { get; set; }

        /// <summary>
        /// (Required by: enforce_terms) Markdown content for the ToS.
        /// </summary>
        [Input("terms")]
        public Input<string>? Terms { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleAuthenticatedApiEnabled")]
        public Input<bool>? ThrottleAuthenticatedApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds).
        /// </summary>
        [Input("throttleAuthenticatedApiPeriodInSeconds")]
        public Input<int>? ThrottleAuthenticatedApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user.
        /// </summary>
        [Input("throttleAuthenticatedApiRequestsPerPeriod")]
        public Input<int>? ThrottleAuthenticatedApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleAuthenticatedPackagesApiEnabled")]
        public Input<bool>? ThrottleAuthenticatedPackagesApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleAuthenticatedPackagesApiPeriodInSeconds")]
        public Input<int>? ThrottleAuthenticatedPackagesApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user. View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleAuthenticatedPackagesApiRequestsPerPeriod")]
        public Input<int>? ThrottleAuthenticatedPackagesApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleAuthenticatedWebEnabled")]
        public Input<bool>? ThrottleAuthenticatedWebEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds).
        /// </summary>
        [Input("throttleAuthenticatedWebPeriodInSeconds")]
        public Input<int>? ThrottleAuthenticatedWebPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user.
        /// </summary>
        [Input("throttleAuthenticatedWebRequestsPerPeriod")]
        public Input<int>? ThrottleAuthenticatedWebRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleUnauthenticatedApiEnabled")]
        public Input<bool>? ThrottleUnauthenticatedApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period in seconds.
        /// </summary>
        [Input("throttleUnauthenticatedApiPeriodInSeconds")]
        public Input<int>? ThrottleUnauthenticatedApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Max requests per period per IP.
        /// </summary>
        [Input("throttleUnauthenticatedApiRequestsPerPeriod")]
        public Input<int>? ThrottleUnauthenticatedApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleUnauthenticatedPackagesApiEnabled")]
        public Input<bool>? ThrottleUnauthenticatedPackagesApiEnabled { get; set; }

        /// <summary>
        /// Rate limit period (in seconds). View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleUnauthenticatedPackagesApiPeriodInSeconds")]
        public Input<int>? ThrottleUnauthenticatedPackagesApiPeriodInSeconds { get; set; }

        /// <summary>
        /// Maximum requests per period per user. View Package Registry rate limits for more details.
        /// </summary>
        [Input("throttleUnauthenticatedPackagesApiRequestsPerPeriod")]
        public Input<int>? ThrottleUnauthenticatedPackagesApiRequestsPerPeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        /// </summary>
        [Input("throttleUnauthenticatedWebEnabled")]
        public Input<bool>? ThrottleUnauthenticatedWebEnabled { get; set; }

        /// <summary>
        /// Rate limit period in seconds.
        /// </summary>
        [Input("throttleUnauthenticatedWebPeriodInSeconds")]
        public Input<int>? ThrottleUnauthenticatedWebPeriodInSeconds { get; set; }

        /// <summary>
        /// Max requests per period per IP.
        /// </summary>
        [Input("throttleUnauthenticatedWebRequestsPerPeriod")]
        public Input<int>? ThrottleUnauthenticatedWebRequestsPerPeriod { get; set; }

        /// <summary>
        /// Limit display of time tracking units to hours. Default is false.
        /// </summary>
        [Input("timeTrackingLimitToHours")]
        public Input<bool>? TimeTrackingLimitToHours { get; set; }

        /// <summary>
        /// Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        /// </summary>
        [Input("twoFactorGracePeriod")]
        public Input<int>? TwoFactorGracePeriod { get; set; }

        /// <summary>
        /// (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        /// </summary>
        [Input("uniqueIpsLimitEnabled")]
        public Input<bool>? UniqueIpsLimitEnabled { get; set; }

        /// <summary>
        /// Maximum number of IPs per user.
        /// </summary>
        [Input("uniqueIpsLimitPerUser")]
        public Input<int>? UniqueIpsLimitPerUser { get; set; }

        /// <summary>
        /// How many seconds an IP is counted towards the limit.
        /// </summary>
        [Input("uniqueIpsLimitTimeWindow")]
        public Input<int>? UniqueIpsLimitTimeWindow { get; set; }

        /// <summary>
        /// Every week GitLab reports license usage back to GitLab, Inc.
        /// </summary>
        [Input("usagePingEnabled")]
        public Input<bool>? UsagePingEnabled { get; set; }

        /// <summary>
        /// Send an email to users upon account deactivation.
        /// </summary>
        [Input("userDeactivationEmailsEnabled")]
        public Input<bool>? UserDeactivationEmailsEnabled { get; set; }

        /// <summary>
        /// Newly registered users are external by default.
        /// </summary>
        [Input("userDefaultExternal")]
        public Input<bool>? UserDefaultExternal { get; set; }

        /// <summary>
        /// Specify an email address regex pattern to identify default internal users.
        /// </summary>
        [Input("userDefaultInternalRegex")]
        public Input<string>? UserDefaultInternalRegex { get; set; }

        /// <summary>
        /// Allow users to register any application to use GitLab as an OAuth provider.
        /// </summary>
        [Input("userOauthApplications")]
        public Input<bool>? UserOauthApplications { get; set; }

        /// <summary>
        /// When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        /// </summary>
        [Input("userShowAddSshKeyMessage")]
        public Input<bool>? UserShowAddSshKeyMessage { get; set; }

        /// <summary>
        /// Let GitLab inform you when an update is available.
        /// </summary>
        [Input("versionCheckEnabled")]
        public Input<bool>? VersionCheckEnabled { get; set; }

        /// <summary>
        /// Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        /// </summary>
        [Input("webIdeClientsidePreviewEnabled")]
        public Input<bool>? WebIdeClientsidePreviewEnabled { get; set; }

        /// <summary>
        /// What’s new variant, possible values: all*tiers, current*tier, and disabled.
        /// </summary>
        [Input("whatsNewVariant")]
        public Input<string>? WhatsNewVariant { get; set; }

        /// <summary>
        /// Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.
        /// </summary>
        [Input("wikiPageMaxContentBytes")]
        public Input<int>? WikiPageMaxContentBytes { get; set; }

        public ApplicationSettingsState()
        {
        }
        public static new ApplicationSettingsState Empty => new ApplicationSettingsState();
    }
}
