// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.IntegrationPipelinesEmail` resource manages the lifecycle of a project integration with the Pipeline Emails Service.
    /// 
    /// &gt; This resource is deprecated and will be removed in 19.0. Use `gitlab.ProjectIntegrationPipelinesEmail`instead!
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_integrations/#pipeline-status-emails)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var awesomeProject = new GitLab.Project("awesome_project", new()
    ///     {
    ///         Name = "awesome_project",
    ///         Description = "My awesome project.",
    ///         VisibilityLevel = "public",
    ///     });
    /// 
    ///     var email = new GitLab.IntegrationPipelinesEmail("email", new()
    ///     {
    ///         Project = awesomeProject.Id,
    ///         Recipients = new[]
    ///         {
    ///             "gitlab@user.create",
    ///         },
    ///         NotifyOnlyBrokenPipelines = true,
    ///         BranchesToBeNotified = "all",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_integration_pipelines_email`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_integration_pipelines_email.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// You can import a gitlab_integration_pipelines_email state using the project ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/integrationPipelinesEmail:IntegrationPipelinesEmail email 1
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/integrationPipelinesEmail:IntegrationPipelinesEmail")]
    public partial class IntegrationPipelinesEmail : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Branches to send notifications for. Valid options are `All`, `Default`, `Protected`, and `DefaultAndProtected`. Default is `Default`
        /// </summary>
        [Output("branchesToBeNotified")]
        public Output<string?> BranchesToBeNotified { get; private set; } = null!;

        /// <summary>
        /// Notify only broken pipelines. Default is true.
        /// </summary>
        [Output("notifyOnlyBrokenPipelines")]
        public Output<bool?> NotifyOnlyBrokenPipelines { get; private set; } = null!;

        /// <summary>
        /// ID of the project you want to activate integration on.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// ) email addresses where notifications are sent.
        /// </summary>
        [Output("recipients")]
        public Output<ImmutableArray<string>> Recipients { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationPipelinesEmail resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationPipelinesEmail(string name, IntegrationPipelinesEmailArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/integrationPipelinesEmail:IntegrationPipelinesEmail", name, args ?? new IntegrationPipelinesEmailArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationPipelinesEmail(string name, Input<string> id, IntegrationPipelinesEmailState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/integrationPipelinesEmail:IntegrationPipelinesEmail", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationPipelinesEmail resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationPipelinesEmail Get(string name, Input<string> id, IntegrationPipelinesEmailState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationPipelinesEmail(name, id, state, options);
        }
    }

    public sealed class IntegrationPipelinesEmailArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Branches to send notifications for. Valid options are `All`, `Default`, `Protected`, and `DefaultAndProtected`. Default is `Default`
        /// </summary>
        [Input("branchesToBeNotified")]
        public Input<string>? BranchesToBeNotified { get; set; }

        /// <summary>
        /// Notify only broken pipelines. Default is true.
        /// </summary>
        [Input("notifyOnlyBrokenPipelines")]
        public Input<bool>? NotifyOnlyBrokenPipelines { get; set; }

        /// <summary>
        /// ID of the project you want to activate integration on.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("recipients", required: true)]
        private InputList<string>? _recipients;

        /// <summary>
        /// ) email addresses where notifications are sent.
        /// </summary>
        public InputList<string> Recipients
        {
            get => _recipients ?? (_recipients = new InputList<string>());
            set => _recipients = value;
        }

        public IntegrationPipelinesEmailArgs()
        {
        }
        public static new IntegrationPipelinesEmailArgs Empty => new IntegrationPipelinesEmailArgs();
    }

    public sealed class IntegrationPipelinesEmailState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Branches to send notifications for. Valid options are `All`, `Default`, `Protected`, and `DefaultAndProtected`. Default is `Default`
        /// </summary>
        [Input("branchesToBeNotified")]
        public Input<string>? BranchesToBeNotified { get; set; }

        /// <summary>
        /// Notify only broken pipelines. Default is true.
        /// </summary>
        [Input("notifyOnlyBrokenPipelines")]
        public Input<bool>? NotifyOnlyBrokenPipelines { get; set; }

        /// <summary>
        /// ID of the project you want to activate integration on.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("recipients")]
        private InputList<string>? _recipients;

        /// <summary>
        /// ) email addresses where notifications are sent.
        /// </summary>
        public InputList<string> Recipients
        {
            get => _recipients ?? (_recipients = new InputList<string>());
            set => _recipients = value;
        }

        public IntegrationPipelinesEmailState()
        {
        }
        public static new IntegrationPipelinesEmailState Empty => new IntegrationPipelinesEmailState();
    }
}
