// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectCustomAttribute` resource allows to manage custom attributes for a project.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var attr = new GitLab.ProjectCustomAttribute("attr", new()
    ///     {
    ///         Key = "location",
    ///         Project = 42,
    ///         Value = "Greenland",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import a project custom attribute using an id made up of `{project-id}:{key}`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/projectCustomAttribute:ProjectCustomAttribute attr 42:location
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectCustomAttribute:ProjectCustomAttribute")]
    public partial class ProjectCustomAttribute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Key for the Custom Attribute.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The id of the project.
        /// </summary>
        [Output("project")]
        public Output<int> Project { get; private set; } = null!;

        /// <summary>
        /// Value for the Custom Attribute.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectCustomAttribute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectCustomAttribute(string name, ProjectCustomAttributeArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectCustomAttribute:ProjectCustomAttribute", name, args ?? new ProjectCustomAttributeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectCustomAttribute(string name, Input<string> id, ProjectCustomAttributeState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectCustomAttribute:ProjectCustomAttribute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectCustomAttribute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectCustomAttribute Get(string name, Input<string> id, ProjectCustomAttributeState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectCustomAttribute(name, id, state, options);
        }
    }

    public sealed class ProjectCustomAttributeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key for the Custom Attribute.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The id of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<int> Project { get; set; } = null!;

        /// <summary>
        /// Value for the Custom Attribute.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ProjectCustomAttributeArgs()
        {
        }
        public static new ProjectCustomAttributeArgs Empty => new ProjectCustomAttributeArgs();
    }

    public sealed class ProjectCustomAttributeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key for the Custom Attribute.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The id of the project.
        /// </summary>
        [Input("project")]
        public Input<int>? Project { get; set; }

        /// <summary>
        /// Value for the Custom Attribute.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public ProjectCustomAttributeState()
        {
        }
        public static new ProjectCustomAttributeState Empty => new ProjectCustomAttributeState();
    }
}
