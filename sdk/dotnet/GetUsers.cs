// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static partial class Invokes
    {
        /// <summary>
        /// Provides details about a list of users in the gitlab provider. The results include id, username, email, name and more about the requested users. Users can also be sorted and filtered using several options.
        /// 
        /// **NOTE**: Some of the available options require administrator privileges. Please visit [Gitlab API documentation][users_for_admins] for more information.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/d/users.html.markdown.
        /// </summary>
        public static Task<GetUsersResult> GetUsers(GetUsersArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("gitlab:index/getUsers:getUsers", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetUsersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Filter users that are active.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Filter users that are blocked.
        /// </summary>
        [Input("blocked")]
        public Input<bool>? Blocked { get; set; }

        /// <summary>
        /// Search for users created after a specific date. (Requires administrator privileges)
        /// </summary>
        [Input("createdAfter")]
        public Input<string>? CreatedAfter { get; set; }

        /// <summary>
        /// Search for users created before a specific date. (Requires administrator privileges)
        /// </summary>
        [Input("createdBefore")]
        public Input<string>? CreatedBefore { get; set; }

        /// <summary>
        /// Lookup users by external provider. (Requires administrator privileges)
        /// </summary>
        [Input("externProvider")]
        public Input<string>? ExternProvider { get; set; }

        /// <summary>
        /// Lookup users by external UID. (Requires administrator privileges)
        /// </summary>
        [Input("externUid")]
        public Input<string>? ExternUid { get; set; }

        /// <summary>
        /// Order the users' list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// Search users by username, name or email.
        /// </summary>
        [Input("search")]
        public Input<string>? Search { get; set; }

        /// <summary>
        /// Sort users' list in asc or desc order. (Requires administrator privileges)
        /// </summary>
        [Input("sort")]
        public Input<string>? Sort { get; set; }

        public GetUsersArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetUsersResult
    {
        public readonly bool? Active;
        public readonly bool? Blocked;
        public readonly string? CreatedAfter;
        public readonly string? CreatedBefore;
        public readonly string? ExternProvider;
        /// <summary>
        /// The external UID of the user.
        /// </summary>
        public readonly string? ExternUid;
        public readonly string? OrderBy;
        public readonly string? Search;
        public readonly string? Sort;
        /// <summary>
        /// The list of users.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUsersResult> Users;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetUsersResult(
            bool? active,
            bool? blocked,
            string? createdAfter,
            string? createdBefore,
            string? externProvider,
            string? externUid,
            string? orderBy,
            string? search,
            string? sort,
            ImmutableArray<Outputs.GetUsersUsersResult> users,
            string id)
        {
            Active = active;
            Blocked = blocked;
            CreatedAfter = createdAfter;
            CreatedBefore = createdBefore;
            ExternProvider = externProvider;
            ExternUid = externUid;
            OrderBy = orderBy;
            Search = search;
            Sort = sort;
            Users = users;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetUsersUsersResult
    {
        /// <summary>
        /// The avatar URL of the user.
        /// </summary>
        public readonly string AvatarUrl;
        /// <summary>
        /// The bio of the user.
        /// </summary>
        public readonly string Bio;
        /// <summary>
        /// Whether the user can create groups.
        /// </summary>
        public readonly bool CanCreateGroup;
        /// <summary>
        /// Whether the user can create projects.
        /// </summary>
        public readonly bool CanCreateProject;
        /// <summary>
        /// User's color scheme ID.
        /// </summary>
        public readonly int ColorSchemeId;
        /// <summary>
        /// Date the user was created at.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Current user's sign-in date.
        /// </summary>
        public readonly string CurrentSignInAt;
        /// <summary>
        /// The e-mail address of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Lookup users by external UID. (Requires administrator privileges)
        /// </summary>
        public readonly string ExternUid;
        /// <summary>
        /// Whether the user is external.
        /// </summary>
        public readonly bool External;
        /// <summary>
        /// The unique id assigned to the user by the gitlab server.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// Whether the user is an admin.
        /// </summary>
        public readonly bool IsAdmin;
        /// <summary>
        /// Last user's sign-in date.
        /// </summary>
        public readonly string LastSignInAt;
        /// <summary>
        /// Linkedin profile of the user.
        /// </summary>
        public readonly string Linkedin;
        /// <summary>
        /// The location of the user.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the user.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization of the user.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// Number of projects the user can create.
        /// </summary>
        public readonly int ProjectsLimit;
        /// <summary>
        /// The UID provider of the user.
        /// </summary>
        public readonly string Provider;
        /// <summary>
        /// Skype username of the user.
        /// </summary>
        public readonly string Skype;
        /// <summary>
        /// Whether the user is active or blocked.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// User's theme ID.
        /// </summary>
        public readonly int ThemeId;
        /// <summary>
        /// Twitter username of the user.
        /// </summary>
        public readonly string Twitter;
        /// <summary>
        /// Whether user's two factor auth is enabled.
        /// </summary>
        public readonly bool TwoFactorEnabled;
        /// <summary>
        /// The username of the user.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// User's website URL.
        /// </summary>
        public readonly string WebsiteUrl;

        [OutputConstructor]
        private GetUsersUsersResult(
            string avatarUrl,
            string bio,
            bool canCreateGroup,
            bool canCreateProject,
            int colorSchemeId,
            string createdAt,
            string currentSignInAt,
            string email,
            string externUid,
            bool external,
            int id,
            bool isAdmin,
            string lastSignInAt,
            string linkedin,
            string location,
            string name,
            string organization,
            int projectsLimit,
            string provider,
            string skype,
            string state,
            int themeId,
            string twitter,
            bool twoFactorEnabled,
            string username,
            string websiteUrl)
        {
            AvatarUrl = avatarUrl;
            Bio = bio;
            CanCreateGroup = canCreateGroup;
            CanCreateProject = canCreateProject;
            ColorSchemeId = colorSchemeId;
            CreatedAt = createdAt;
            CurrentSignInAt = currentSignInAt;
            Email = email;
            ExternUid = externUid;
            External = external;
            Id = id;
            IsAdmin = isAdmin;
            LastSignInAt = lastSignInAt;
            Linkedin = linkedin;
            Location = location;
            Name = name;
            Organization = organization;
            ProjectsLimit = projectsLimit;
            Provider = provider;
            Skype = skype;
            State = state;
            ThemeId = themeId;
            Twitter = twitter;
            TwoFactorEnabled = twoFactorEnabled;
            Username = username;
            WebsiteUrl = websiteUrl;
        }
    }
    }
}
