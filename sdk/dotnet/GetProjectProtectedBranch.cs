// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectProtectedBranch
    {
        /// <summary>
        /// The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetProjectProtectedBranch.InvokeAsync(new GitLab.GetProjectProtectedBranchArgs
        ///         {
        ///             Name = "main",
        ///             ProjectId = "foo/bar/baz",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectProtectedBranchResult> InvokeAsync(GetProjectProtectedBranchArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectProtectedBranchResult>("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", args ?? new GetProjectProtectedBranchArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(GitLab.GetProjectProtectedBranch.InvokeAsync(new GitLab.GetProjectProtectedBranchArgs
        ///         {
        ///             Name = "main",
        ///             ProjectId = "foo/bar/baz",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProjectProtectedBranchResult> Invoke(GetProjectProtectedBranchInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetProjectProtectedBranchResult>("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", args ?? new GetProjectProtectedBranchInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectProtectedBranchArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetProjectProtectedBranchArgs()
        {
        }
    }

    public sealed class GetProjectProtectedBranchInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetProjectProtectedBranchInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectProtectedBranchResult
    {
        public readonly bool AllowForcePush;
        public readonly bool CodeOwnerApprovalRequired;
        public readonly int Id;
        public readonly ImmutableArray<Outputs.GetProjectProtectedBranchMergeAccessLevelResult> MergeAccessLevels;
        public readonly string Name;
        public readonly string ProjectId;
        public readonly ImmutableArray<Outputs.GetProjectProtectedBranchPushAccessLevelResult> PushAccessLevels;

        [OutputConstructor]
        private GetProjectProtectedBranchResult(
            bool allowForcePush,

            bool codeOwnerApprovalRequired,

            int id,

            ImmutableArray<Outputs.GetProjectProtectedBranchMergeAccessLevelResult> mergeAccessLevels,

            string name,

            string projectId,

            ImmutableArray<Outputs.GetProjectProtectedBranchPushAccessLevelResult> pushAccessLevels)
        {
            AllowForcePush = allowForcePush;
            CodeOwnerApprovalRequired = codeOwnerApprovalRequired;
            Id = id;
            MergeAccessLevels = mergeAccessLevels;
            Name = name;
            ProjectId = projectId;
            PushAccessLevels = pushAccessLevels;
        }
    }
}
