// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectProtectedBranch
    {
        /// <summary>
        /// The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
        /// </summary>
        public static Task<GetProjectProtectedBranchResult> InvokeAsync(GetProjectProtectedBranchArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectProtectedBranchResult>("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", args ?? new GetProjectProtectedBranchArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
        /// </summary>
        public static Output<GetProjectProtectedBranchResult> Invoke(GetProjectProtectedBranchInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectProtectedBranchResult>("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", args ?? new GetProjectProtectedBranchInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectProtectedBranch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/protected_branches/#get-a-single-protected-branch-or-wildcard-protected-branch)
        /// </summary>
        public static Output<GetProjectProtectedBranchResult> Invoke(GetProjectProtectedBranchInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectProtectedBranchResult>("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", args ?? new GetProjectProtectedBranchInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectProtectedBranchArgs : global::Pulumi.InvokeArgs
    {
        [Input("mergeAccessLevels")]
        private List<Inputs.GetProjectProtectedBranchMergeAccessLevelArgs>? _mergeAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
        /// </summary>
        public List<Inputs.GetProjectProtectedBranchMergeAccessLevelArgs> MergeAccessLevels
        {
            get => _mergeAccessLevels ?? (_mergeAccessLevels = new List<Inputs.GetProjectProtectedBranchMergeAccessLevelArgs>());
            set => _mergeAccessLevels = value;
        }

        /// <summary>
        /// The name of the protected branch.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The integer or path with namespace that uniquely identifies the project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        [Input("pushAccessLevels")]
        private List<Inputs.GetProjectProtectedBranchPushAccessLevelArgs>? _pushAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to push to protected branch.
        /// </summary>
        public List<Inputs.GetProjectProtectedBranchPushAccessLevelArgs> PushAccessLevels
        {
            get => _pushAccessLevels ?? (_pushAccessLevels = new List<Inputs.GetProjectProtectedBranchPushAccessLevelArgs>());
            set => _pushAccessLevels = value;
        }

        public GetProjectProtectedBranchArgs()
        {
        }
        public static new GetProjectProtectedBranchArgs Empty => new GetProjectProtectedBranchArgs();
    }

    public sealed class GetProjectProtectedBranchInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("mergeAccessLevels")]
        private InputList<Inputs.GetProjectProtectedBranchMergeAccessLevelInputArgs>? _mergeAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
        /// </summary>
        public InputList<Inputs.GetProjectProtectedBranchMergeAccessLevelInputArgs> MergeAccessLevels
        {
            get => _mergeAccessLevels ?? (_mergeAccessLevels = new InputList<Inputs.GetProjectProtectedBranchMergeAccessLevelInputArgs>());
            set => _mergeAccessLevels = value;
        }

        /// <summary>
        /// The name of the protected branch.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The integer or path with namespace that uniquely identifies the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("pushAccessLevels")]
        private InputList<Inputs.GetProjectProtectedBranchPushAccessLevelInputArgs>? _pushAccessLevels;

        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to push to protected branch.
        /// </summary>
        public InputList<Inputs.GetProjectProtectedBranchPushAccessLevelInputArgs> PushAccessLevels
        {
            get => _pushAccessLevels ?? (_pushAccessLevels = new InputList<Inputs.GetProjectProtectedBranchPushAccessLevelInputArgs>());
            set => _pushAccessLevels = value;
        }

        public GetProjectProtectedBranchInvokeArgs()
        {
        }
        public static new GetProjectProtectedBranchInvokeArgs Empty => new GetProjectProtectedBranchInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectProtectedBranchResult
    {
        /// <summary>
        /// Whether force push is allowed.
        /// </summary>
        public readonly bool AllowForcePush;
        /// <summary>
        /// Reject code pushes that change files listed in the CODEOWNERS file.
        /// </summary>
        public readonly bool CodeOwnerApprovalRequired;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to merge to protected branch.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectProtectedBranchMergeAccessLevelResult> MergeAccessLevels;
        /// <summary>
        /// The name of the protected branch.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The integer or path with namespace that uniquely identifies the project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Array of access levels and user(s)/group(s) allowed to push to protected branch.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectProtectedBranchPushAccessLevelResult> PushAccessLevels;

        [OutputConstructor]
        private GetProjectProtectedBranchResult(
            bool allowForcePush,

            bool codeOwnerApprovalRequired,

            int id,

            ImmutableArray<Outputs.GetProjectProtectedBranchMergeAccessLevelResult> mergeAccessLevels,

            string name,

            string projectId,

            ImmutableArray<Outputs.GetProjectProtectedBranchPushAccessLevelResult> pushAccessLevels)
        {
            AllowForcePush = allowForcePush;
            CodeOwnerApprovalRequired = codeOwnerApprovalRequired;
            Id = id;
            MergeAccessLevels = mergeAccessLevels;
            Name = name;
            ProjectId = projectId;
            PushAccessLevels = pushAccessLevels;
        }
    }
}
