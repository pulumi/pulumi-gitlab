// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetProjectAccessTokens
    {
        /// <summary>
        /// The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
        /// </summary>
        public static Task<GetProjectAccessTokensResult> InvokeAsync(GetProjectAccessTokensArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectAccessTokensResult>("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", args ?? new GetProjectAccessTokensArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
        /// </summary>
        public static Output<GetProjectAccessTokensResult> Invoke(GetProjectAccessTokensInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectAccessTokensResult>("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", args ?? new GetProjectAccessTokensInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getProjectAccessTokens` data source allows to retrieve all project access tokens for a given project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_access_tokens/)
        /// </summary>
        public static Output<GetProjectAccessTokensResult> Invoke(GetProjectAccessTokensInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectAccessTokensResult>("gitlab:index/getProjectAccessTokens:getProjectAccessTokens", args ?? new GetProjectAccessTokensInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectAccessTokensArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name or id of the project.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        /// <summary>
        /// List all project access token that match the specified state. Valid values are `Active`, `Inactive`. Returns all project access token if not set.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetProjectAccessTokensArgs()
        {
        }
        public static new GetProjectAccessTokensArgs Empty => new GetProjectAccessTokensArgs();
    }

    public sealed class GetProjectAccessTokensInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name or id of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// List all project access token that match the specified state. Valid values are `Active`, `Inactive`. Returns all project access token if not set.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetProjectAccessTokensInvokeArgs()
        {
        }
        public static new GetProjectAccessTokensInvokeArgs Empty => new GetProjectAccessTokensInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectAccessTokensResult
    {
        /// <summary>
        /// The list of access tokens returned by the search
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectAccessTokensAccessTokenResult> AccessTokens;
        public readonly string Id;
        /// <summary>
        /// The name or id of the project.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// List all project access token that match the specified state. Valid values are `Active`, `Inactive`. Returns all project access token if not set.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetProjectAccessTokensResult(
            ImmutableArray<Outputs.GetProjectAccessTokensAccessTokenResult> accessTokens,

            string id,

            string project,

            string? state)
        {
            AccessTokens = accessTokens;
            Id = id;
            Project = project;
            State = state;
        }
    }
}
