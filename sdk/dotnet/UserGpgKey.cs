// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.UserGpgKey` resource allows to manage the lifecycle of a GPG key assigned to the current user or a specific user.
    /// 
    /// &gt; Managing GPG keys for arbitrary users requires admin privileges.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#get-a-specific-gpg-key)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleUser = GitLab.GetUser.Invoke(new()
    ///     {
    ///         Username = "example-user",
    ///     });
    /// 
    ///     // Manages a GPG key for the specified user. An admin token is required if `user_id` is specified.
    ///     var exampleUserGpgKey = new GitLab.UserGpgKey("exampleUserGpgKey", new()
    ///     {
    ///         UserId = exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///         Key = @"-----BEGIN PGP PUBLIC KEY BLOCK-----
    /// ...
    /// -----END PGP PUBLIC KEY BLOCK-----",
    ///     });
    /// 
    ///     // Manages a GPG key for the current user
    ///     var exampleUserUserGpgKey = new GitLab.UserGpgKey("exampleUserUserGpgKey", new()
    ///     {
    ///         Key = @"-----BEGIN PGP PUBLIC KEY BLOCK-----
    /// ...
    /// -----END PGP PUBLIC KEY BLOCK-----",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import a GPG key for a specific user using an id made up of `{user-id}:{key}`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/userGpgKey:UserGpgKey example 42:1
    /// ```
    /// 
    ///  Alternatively, you can import a GPG key for the current user using an id made up of `{key}`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gitlab:index/userGpgKey:UserGpgKey example_user 1
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/userGpgKey:UserGpgKey")]
    public partial class UserGpgKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time when this key was created in GitLab.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The armored GPG public key.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The ID of the GPG key.
        /// </summary>
        [Output("keyId")]
        public Output<int> KeyId { get; private set; } = null!;

        /// <summary>
        /// The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
        /// </summary>
        [Output("userId")]
        public Output<int?> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a UserGpgKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserGpgKey(string name, UserGpgKeyArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/userGpgKey:UserGpgKey", name, args ?? new UserGpgKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserGpgKey(string name, Input<string> id, UserGpgKeyState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/userGpgKey:UserGpgKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserGpgKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserGpgKey Get(string name, Input<string> id, UserGpgKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new UserGpgKey(name, id, state, options);
        }
    }

    public sealed class UserGpgKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The armored GPG public key.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
        /// </summary>
        [Input("userId")]
        public Input<int>? UserId { get; set; }

        public UserGpgKeyArgs()
        {
        }
        public static new UserGpgKeyArgs Empty => new UserGpgKeyArgs();
    }

    public sealed class UserGpgKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time when this key was created in GitLab.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The armored GPG public key.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The ID of the GPG key.
        /// </summary>
        [Input("keyId")]
        public Input<int>? KeyId { get; set; }

        /// <summary>
        /// The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
        /// </summary>
        [Input("userId")]
        public Input<int>? UserId { get; set; }

        public UserGpgKeyState()
        {
        }
        public static new UserGpgKeyState Empty => new UserGpgKeyState();
    }
}
