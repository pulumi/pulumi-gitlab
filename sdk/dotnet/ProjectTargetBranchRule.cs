// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectTargetBranchRule` resource allows to configure default target branch rules when creating a merge request.
    /// 
    /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/#mutationprojecttargetbranchrulecreate)
    /// </summary>
    [GitLabResourceType("gitlab:index/projectTargetBranchRule:ProjectTargetBranchRule")]
    public partial class ProjectTargetBranchRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A pattern matching the branch name for which the merge request should have a default target branch configured.
        /// </summary>
        [Output("sourceBranchPattern")]
        public Output<string> SourceBranchPattern { get; private set; } = null!;

        /// <summary>
        /// The name of the branch to which the merge request should be addressed.
        /// </summary>
        [Output("targetBranchName")]
        public Output<string> TargetBranchName { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectTargetBranchRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectTargetBranchRule(string name, ProjectTargetBranchRuleArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectTargetBranchRule:ProjectTargetBranchRule", name, args ?? new ProjectTargetBranchRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectTargetBranchRule(string name, Input<string> id, ProjectTargetBranchRuleState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectTargetBranchRule:ProjectTargetBranchRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectTargetBranchRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectTargetBranchRule Get(string name, Input<string> id, ProjectTargetBranchRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectTargetBranchRule(name, id, state, options);
        }
    }

    public sealed class ProjectTargetBranchRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// A pattern matching the branch name for which the merge request should have a default target branch configured.
        /// </summary>
        [Input("sourceBranchPattern", required: true)]
        public Input<string> SourceBranchPattern { get; set; } = null!;

        /// <summary>
        /// The name of the branch to which the merge request should be addressed.
        /// </summary>
        [Input("targetBranchName", required: true)]
        public Input<string> TargetBranchName { get; set; } = null!;

        public ProjectTargetBranchRuleArgs()
        {
        }
        public static new ProjectTargetBranchRuleArgs Empty => new ProjectTargetBranchRuleArgs();
    }

    public sealed class ProjectTargetBranchRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID or URL-encoded path of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A pattern matching the branch name for which the merge request should have a default target branch configured.
        /// </summary>
        [Input("sourceBranchPattern")]
        public Input<string>? SourceBranchPattern { get; set; }

        /// <summary>
        /// The name of the branch to which the merge request should be addressed.
        /// </summary>
        [Input("targetBranchName")]
        public Input<string>? TargetBranchName { get; set; }

        public ProjectTargetBranchRuleState()
        {
        }
        public static new ProjectTargetBranchRuleState Empty => new ProjectTargetBranchRuleState();
    }
}
