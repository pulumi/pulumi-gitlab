// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectJobTokenScopes` resource allows to manage the CI/CD Job Token scopes in a project.
    /// Any project or group not within the defined set of `target_project_ids` or `target_group_ids`, respectively, will be removed,
    /// which allows this resource to be used as an explicit deny.
    /// 
    /// &gt; Conflicts with the use of `gitlab.ProjectJobTokenScope` when used on the same project. Use one or the other to ensure the desired state.
    /// 
    /// &gt; If the `enabled` property is false, any project or group will be allowed regardless of the given allowlist attributes.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/project_job_token_scopes/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var allowedSingleProject = new GitLab.ProjectJobTokenScopes("allowed_single_project", new()
    ///     {
    ///         Project = "111",
    ///         TargetProjectIds = new[]
    ///         {
    ///             123,
    ///         },
    ///     });
    /// 
    ///     var allowedMultipleProject = new GitLab.ProjectJobTokenScopes("allowed_multiple_project", new()
    ///     {
    ///         Project = "111",
    ///         TargetProjectIds = new[]
    ///         {
    ///             123,
    ///             456,
    ///             789,
    ///         },
    ///     });
    /// 
    ///     var allowedMultipleGroups = new GitLab.ProjectJobTokenScopes("allowed_multiple_groups", new()
    ///     {
    ///         ProjectId = 111,
    ///         TargetProjectIds = new[] {},
    ///         TargetGroupIds = new[]
    ///         {
    ///             321,
    ///             654,
    ///         },
    ///     });
    /// 
    ///     // This will remove all job token scopes, even if added outside of TF.
    ///     var explicitDeny = new GitLab.ProjectJobTokenScopes("explicit_deny", new()
    ///     {
    ///         Project = "111",
    ///         TargetProjectIds = new[] {},
    ///     });
    /// 
    ///     // This shows the explicit behavior of the enabled flag with a list of projects and groups.
    ///     var allowProjectsAndGroups = new GitLab.ProjectJobTokenScopes("allow_projects_and_groups", new()
    ///     {
    ///         Project = "111",
    ///         Enabled = true,
    ///         TargetProjectIds = new[]
    ///         {
    ///             123,
    ///             456,
    ///             789,
    ///         },
    ///         TargetGroupIds = new[]
    ///         {
    ///             321,
    ///             654,
    ///         },
    ///     });
    /// 
    ///     // This allows all projects and groups (disabling the CI Job Token scope protection)
    ///     var allowAll = new GitLab.ProjectJobTokenScopes("allow_all", new()
    ///     {
    ///         Project = "111",
    ///         Enabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0 you can use an import block to import `gitlab_project_job_token_scopes`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_job_token_scopes.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Import using the CLI is supported using the following syntax:
    /// 
    /// GitLab project job token scopes can be imported using an id made up of just the `project_id`
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes bar 123
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes")]
    public partial class ProjectJobTokenScopes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `target_project_ids` or `target_group_ids`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID or full path of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A set of group IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        [Output("targetGroupIds")]
        public Output<ImmutableArray<int>> TargetGroupIds { get; private set; } = null!;

        /// <summary>
        /// A set of project IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        [Output("targetProjectIds")]
        public Output<ImmutableArray<int>> TargetProjectIds { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectJobTokenScopes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectJobTokenScopes(string name, ProjectJobTokenScopesArgs? args = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, args ?? new ProjectJobTokenScopesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectJobTokenScopes(string name, Input<string> id, ProjectJobTokenScopesState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectJobTokenScopes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectJobTokenScopes Get(string name, Input<string> id, ProjectJobTokenScopesState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectJobTokenScopes(name, id, state, options);
        }
    }

    public sealed class ProjectJobTokenScopesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `target_project_ids` or `target_group_ids`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID or full path of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("targetGroupIds")]
        private InputList<int>? _targetGroupIds;

        /// <summary>
        /// A set of group IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        public InputList<int> TargetGroupIds
        {
            get => _targetGroupIds ?? (_targetGroupIds = new InputList<int>());
            set => _targetGroupIds = value;
        }

        [Input("targetProjectIds")]
        private InputList<int>? _targetProjectIds;

        /// <summary>
        /// A set of project IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        public InputList<int> TargetProjectIds
        {
            get => _targetProjectIds ?? (_targetProjectIds = new InputList<int>());
            set => _targetProjectIds = value;
        }

        public ProjectJobTokenScopesArgs()
        {
        }
        public static new ProjectJobTokenScopesArgs Empty => new ProjectJobTokenScopesArgs();
    }

    public sealed class ProjectJobTokenScopesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in `target_project_ids` or `target_group_ids`. Deleting the associated `gitlab.ProjectJobTokenScopes` resource will reset `Enabled` on the group to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID or full path of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("targetGroupIds")]
        private InputList<int>? _targetGroupIds;

        /// <summary>
        /// A set of group IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        public InputList<int> TargetGroupIds
        {
            get => _targetGroupIds ?? (_targetGroupIds = new InputList<int>());
            set => _targetGroupIds = value;
        }

        [Input("targetProjectIds")]
        private InputList<int>? _targetProjectIds;

        /// <summary>
        /// A set of project IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        public InputList<int> TargetProjectIds
        {
            get => _targetProjectIds ?? (_targetProjectIds = new InputList<int>());
            set => _targetProjectIds = value;
        }

        public ProjectJobTokenScopesState()
        {
        }
        public static new ProjectJobTokenScopesState Empty => new ProjectJobTokenScopesState();
    }
}
