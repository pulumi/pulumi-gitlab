// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectJobTokenScopes` resource allows to manage the CI/CD Job Token scopes in a project.
    /// Any project not within the defined set in this attribute will be removed, which allows this resource to be used as an explicit deny.
    /// 
    /// &gt; Conflicts with the use of `gitlab.ProjectJobTokenScope` when used on the same project. Use one or the other to ensure the desired state.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_job_token_scopes.html)
    /// 
    /// ## Import
    /// 
    /// GitLab project job token scopes can be imported using an id made up of just the `project_id` as an integer
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes bar 123
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes")]
    public partial class ProjectJobTokenScopes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A set of project IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        [Output("targetProjectIds")]
        public Output<ImmutableArray<int>> TargetProjectIds { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectJobTokenScopes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectJobTokenScopes(string name, ProjectJobTokenScopesArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, args ?? new ProjectJobTokenScopesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectJobTokenScopes(string name, Input<string> id, ProjectJobTokenScopesState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectJobTokenScopes:ProjectJobTokenScopes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectJobTokenScopes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectJobTokenScopes Get(string name, Input<string> id, ProjectJobTokenScopesState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectJobTokenScopes(name, id, state, options);
        }
    }

    public sealed class ProjectJobTokenScopesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        [Input("targetProjectIds", required: true)]
        private InputList<int>? _targetProjectIds;

        /// <summary>
        /// A set of project IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        public InputList<int> TargetProjectIds
        {
            get => _targetProjectIds ?? (_targetProjectIds = new InputList<int>());
            set => _targetProjectIds = value;
        }

        public ProjectJobTokenScopesArgs()
        {
        }
        public static new ProjectJobTokenScopesArgs Empty => new ProjectJobTokenScopesArgs();
    }

    public sealed class ProjectJobTokenScopesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("targetProjectIds")]
        private InputList<int>? _targetProjectIds;

        /// <summary>
        /// A set of project IDs that are in the CI/CD job token inbound allowlist.
        /// </summary>
        public InputList<int> TargetProjectIds
        {
            get => _targetProjectIds ?? (_targetProjectIds = new InputList<int>());
            set => _targetProjectIds = value;
        }

        public ProjectJobTokenScopesState()
        {
        }
        public static new ProjectJobTokenScopesState Empty => new ProjectJobTokenScopesState();
    }
}
