// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetGroup
    {
        /// <summary>
        /// The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs
        ///         {
        ///             FullPath = "foo/bar",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("gitlab:index/getGroup:getGroup", args ?? new GetGroupArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs
        ///         {
        ///             FullPath = "foo/bar",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGroupResult>("gitlab:index/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupArgs : Pulumi.InvokeArgs
    {
        [Input("fullPath")]
        public string? FullPath { get; set; }

        [Input("groupId")]
        public int? GroupId { get; set; }

        public GetGroupArgs()
        {
        }
    }

    public sealed class GetGroupInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("fullPath")]
        public Input<string>? FullPath { get; set; }

        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        public GetGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        public readonly int DefaultBranchProtection;
        public readonly string Description;
        public readonly string FullName;
        public readonly string FullPath;
        public readonly int GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool LfsEnabled;
        public readonly string Name;
        public readonly int ParentId;
        public readonly string Path;
        public readonly bool PreventForkingOutsideGroup;
        public readonly bool RequestAccessEnabled;
        public readonly string RunnersToken;
        public readonly string VisibilityLevel;
        public readonly string WebUrl;

        [OutputConstructor]
        private GetGroupResult(
            int defaultBranchProtection,

            string description,

            string fullName,

            string fullPath,

            int groupId,

            string id,

            bool lfsEnabled,

            string name,

            int parentId,

            string path,

            bool preventForkingOutsideGroup,

            bool requestAccessEnabled,

            string runnersToken,

            string visibilityLevel,

            string webUrl)
        {
            DefaultBranchProtection = defaultBranchProtection;
            Description = description;
            FullName = fullName;
            FullPath = fullPath;
            GroupId = groupId;
            Id = id;
            LfsEnabled = lfsEnabled;
            Name = name;
            ParentId = parentId;
            Path = path;
            PreventForkingOutsideGroup = preventForkingOutsideGroup;
            RequestAccessEnabled = requestAccessEnabled;
            RunnersToken = runnersToken;
            VisibilityLevel = visibilityLevel;
            WebUrl = webUrl;
        }
    }
}
