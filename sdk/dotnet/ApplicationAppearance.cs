// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_application_appearance`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_application_appearance.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// Gitlab application appearance can be imported with the hard-coded key `gitlab`, for example:
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/applicationAppearance:ApplicationAppearance example "gitlab"
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/applicationAppearance:ApplicationAppearance")]
    public partial class ApplicationAppearance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Markdown text shown on the sign-in and sign-up page.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Add header and footer to all outgoing emails if enabled.
        /// </summary>
        [Output("emailHeaderAndFooterEnabled")]
        public Output<bool> EmailHeaderAndFooterEnabled { get; private set; } = null!;

        /// <summary>
        /// Message in the system footer bar.
        /// </summary>
        [Output("footerMessage")]
        public Output<string> FooterMessage { get; private set; } = null!;

        /// <summary>
        /// Message in the system header bar.
        /// </summary>
        [Output("headerMessage")]
        public Output<string> HeaderMessage { get; private set; } = null!;

        [Output("keepSettingsOnDestroy")]
        public Output<bool> KeepSettingsOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Markdown text shown on the group or project member page for users with permission to change members.
        /// </summary>
        [Output("memberGuidelines")]
        public Output<string> MemberGuidelines { get; private set; } = null!;

        /// <summary>
        /// Background color for the system header or footer bar, in CSS hex notation.
        /// </summary>
        [Output("messageBackgroundColor")]
        public Output<string> MessageBackgroundColor { get; private set; } = null!;

        /// <summary>
        /// Font color for the system header or footer bar, in CSS hex notation.
        /// </summary>
        [Output("messageFontColor")]
        public Output<string> MessageFontColor { get; private set; } = null!;

        /// <summary>
        /// Markdown text shown on the new project page.
        /// </summary>
        [Output("newProjectGuidelines")]
        public Output<string> NewProjectGuidelines { get; private set; } = null!;

        /// <summary>
        /// Markdown text shown on the profile page below the Public Avatar.
        /// </summary>
        [Output("profileImageGuidelines")]
        public Output<string> ProfileImageGuidelines { get; private set; } = null!;

        /// <summary>
        /// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        /// </summary>
        [Output("pwaDescription")]
        public Output<string> PwaDescription { get; private set; } = null!;

        /// <summary>
        /// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        /// </summary>
        [Output("pwaName")]
        public Output<string> PwaName { get; private set; } = null!;

        /// <summary>
        /// Short name for Progressive Web App.
        /// </summary>
        [Output("pwaShortName")]
        public Output<string> PwaShortName { get; private set; } = null!;

        /// <summary>
        /// Application title on the sign-in and sign-up page.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationAppearance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationAppearance(string name, ApplicationAppearanceArgs? args = null, CustomResourceOptions? options = null)
            : base("gitlab:index/applicationAppearance:ApplicationAppearance", name, args ?? new ApplicationAppearanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationAppearance(string name, Input<string> id, ApplicationAppearanceState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/applicationAppearance:ApplicationAppearance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationAppearance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationAppearance Get(string name, Input<string> id, ApplicationAppearanceState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationAppearance(name, id, state, options);
        }
    }

    public sealed class ApplicationAppearanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Markdown text shown on the sign-in and sign-up page.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Add header and footer to all outgoing emails if enabled.
        /// </summary>
        [Input("emailHeaderAndFooterEnabled")]
        public Input<bool>? EmailHeaderAndFooterEnabled { get; set; }

        /// <summary>
        /// Message in the system footer bar.
        /// </summary>
        [Input("footerMessage")]
        public Input<string>? FooterMessage { get; set; }

        /// <summary>
        /// Message in the system header bar.
        /// </summary>
        [Input("headerMessage")]
        public Input<string>? HeaderMessage { get; set; }

        [Input("keepSettingsOnDestroy")]
        public Input<bool>? KeepSettingsOnDestroy { get; set; }

        /// <summary>
        /// Markdown text shown on the group or project member page for users with permission to change members.
        /// </summary>
        [Input("memberGuidelines")]
        public Input<string>? MemberGuidelines { get; set; }

        /// <summary>
        /// Background color for the system header or footer bar, in CSS hex notation.
        /// </summary>
        [Input("messageBackgroundColor")]
        public Input<string>? MessageBackgroundColor { get; set; }

        /// <summary>
        /// Font color for the system header or footer bar, in CSS hex notation.
        /// </summary>
        [Input("messageFontColor")]
        public Input<string>? MessageFontColor { get; set; }

        /// <summary>
        /// Markdown text shown on the new project page.
        /// </summary>
        [Input("newProjectGuidelines")]
        public Input<string>? NewProjectGuidelines { get; set; }

        /// <summary>
        /// Markdown text shown on the profile page below the Public Avatar.
        /// </summary>
        [Input("profileImageGuidelines")]
        public Input<string>? ProfileImageGuidelines { get; set; }

        /// <summary>
        /// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        /// </summary>
        [Input("pwaDescription")]
        public Input<string>? PwaDescription { get; set; }

        /// <summary>
        /// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        /// </summary>
        [Input("pwaName")]
        public Input<string>? PwaName { get; set; }

        /// <summary>
        /// Short name for Progressive Web App.
        /// </summary>
        [Input("pwaShortName")]
        public Input<string>? PwaShortName { get; set; }

        /// <summary>
        /// Application title on the sign-in and sign-up page.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public ApplicationAppearanceArgs()
        {
        }
        public static new ApplicationAppearanceArgs Empty => new ApplicationAppearanceArgs();
    }

    public sealed class ApplicationAppearanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Markdown text shown on the sign-in and sign-up page.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Add header and footer to all outgoing emails if enabled.
        /// </summary>
        [Input("emailHeaderAndFooterEnabled")]
        public Input<bool>? EmailHeaderAndFooterEnabled { get; set; }

        /// <summary>
        /// Message in the system footer bar.
        /// </summary>
        [Input("footerMessage")]
        public Input<string>? FooterMessage { get; set; }

        /// <summary>
        /// Message in the system header bar.
        /// </summary>
        [Input("headerMessage")]
        public Input<string>? HeaderMessage { get; set; }

        [Input("keepSettingsOnDestroy")]
        public Input<bool>? KeepSettingsOnDestroy { get; set; }

        /// <summary>
        /// Markdown text shown on the group or project member page for users with permission to change members.
        /// </summary>
        [Input("memberGuidelines")]
        public Input<string>? MemberGuidelines { get; set; }

        /// <summary>
        /// Background color for the system header or footer bar, in CSS hex notation.
        /// </summary>
        [Input("messageBackgroundColor")]
        public Input<string>? MessageBackgroundColor { get; set; }

        /// <summary>
        /// Font color for the system header or footer bar, in CSS hex notation.
        /// </summary>
        [Input("messageFontColor")]
        public Input<string>? MessageFontColor { get; set; }

        /// <summary>
        /// Markdown text shown on the new project page.
        /// </summary>
        [Input("newProjectGuidelines")]
        public Input<string>? NewProjectGuidelines { get; set; }

        /// <summary>
        /// Markdown text shown on the profile page below the Public Avatar.
        /// </summary>
        [Input("profileImageGuidelines")]
        public Input<string>? ProfileImageGuidelines { get; set; }

        /// <summary>
        /// An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        /// </summary>
        [Input("pwaDescription")]
        public Input<string>? PwaDescription { get; set; }

        /// <summary>
        /// Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        /// </summary>
        [Input("pwaName")]
        public Input<string>? PwaName { get; set; }

        /// <summary>
        /// Short name for Progressive Web App.
        /// </summary>
        [Input("pwaShortName")]
        public Input<string>? PwaShortName { get; set; }

        /// <summary>
        /// Application title on the sign-in and sign-up page.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public ApplicationAppearanceState()
        {
        }
        public static new ApplicationAppearanceState Empty => new ApplicationAppearanceState();
    }
}
