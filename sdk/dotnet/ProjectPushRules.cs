// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// This resource allows you to create and manage push rules for your GitLab projects.
    /// For further information on push rules, consult the [gitlab
    /// documentation](https://docs.gitlab.com/ce/push_rules/push_rules.html#push-rules).
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-gitlab/blob/master/website/docs/r/project_push_rules.html.markdown.
    /// </summary>
    public partial class ProjectPushRules : Pulumi.CustomResource
    {
        /// <summary>
        /// All commit author emails must match this regex, e.g. "@my-company.com$"
        /// </summary>
        [Output("authorEmailRegex")]
        public Output<string?> AuthorEmailRegex { get; private set; } = null!;

        /// <summary>
        /// All branch names must match this regex, e.g. "(feature|hotfix)\/*"
        /// </summary>
        [Output("branchNameRegex")]
        public Output<string?> BranchNameRegex { get; private set; } = null!;

        /// <summary>
        /// All commit messages must match this regex, e.g. "Fixed \d+\..*"
        /// </summary>
        [Output("commitMessageRegex")]
        public Output<string?> CommitMessageRegex { get; private set; } = null!;

        /// <summary>
        /// Deny deleting a tag
        /// </summary>
        [Output("denyDeleteTag")]
        public Output<bool?> DenyDeleteTag { get; private set; } = null!;

        /// <summary>
        /// All commited filenames must not match this regex, e.g. "(jar|exe)$"
        /// </summary>
        [Output("fileNameRegex")]
        public Output<string?> FileNameRegex { get; private set; } = null!;

        /// <summary>
        /// Maximum file size (MB)
        /// </summary>
        [Output("maxFileSize")]
        public Output<int?> MaxFileSize { get; private set; } = null!;

        /// <summary>
        /// Restrict commits by author (email) to existing GitLab users
        /// </summary>
        [Output("memberCheck")]
        public Output<bool?> MemberCheck { get; private set; } = null!;

        /// <summary>
        /// GitLab will reject any files that are likely to contain secrets
        /// </summary>
        [Output("preventSecrets")]
        public Output<bool?> PreventSecrets { get; private set; } = null!;

        /// <summary>
        /// The name or id of the project to add the push rules to.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectPushRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectPushRules(string name, ProjectPushRulesArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectPushRules:ProjectPushRules", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ProjectPushRules(string name, Input<string> id, ProjectPushRulesState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectPushRules:ProjectPushRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectPushRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectPushRules Get(string name, Input<string> id, ProjectPushRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectPushRules(name, id, state, options);
        }
    }

    public sealed class ProjectPushRulesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// All commit author emails must match this regex, e.g. "@my-company.com$"
        /// </summary>
        [Input("authorEmailRegex")]
        public Input<string>? AuthorEmailRegex { get; set; }

        /// <summary>
        /// All branch names must match this regex, e.g. "(feature|hotfix)\/*"
        /// </summary>
        [Input("branchNameRegex")]
        public Input<string>? BranchNameRegex { get; set; }

        /// <summary>
        /// All commit messages must match this regex, e.g. "Fixed \d+\..*"
        /// </summary>
        [Input("commitMessageRegex")]
        public Input<string>? CommitMessageRegex { get; set; }

        /// <summary>
        /// Deny deleting a tag
        /// </summary>
        [Input("denyDeleteTag")]
        public Input<bool>? DenyDeleteTag { get; set; }

        /// <summary>
        /// All commited filenames must not match this regex, e.g. "(jar|exe)$"
        /// </summary>
        [Input("fileNameRegex")]
        public Input<string>? FileNameRegex { get; set; }

        /// <summary>
        /// Maximum file size (MB)
        /// </summary>
        [Input("maxFileSize")]
        public Input<int>? MaxFileSize { get; set; }

        /// <summary>
        /// Restrict commits by author (email) to existing GitLab users
        /// </summary>
        [Input("memberCheck")]
        public Input<bool>? MemberCheck { get; set; }

        /// <summary>
        /// GitLab will reject any files that are likely to contain secrets
        /// </summary>
        [Input("preventSecrets")]
        public Input<bool>? PreventSecrets { get; set; }

        /// <summary>
        /// The name or id of the project to add the push rules to.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public ProjectPushRulesArgs()
        {
        }
    }

    public sealed class ProjectPushRulesState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// All commit author emails must match this regex, e.g. "@my-company.com$"
        /// </summary>
        [Input("authorEmailRegex")]
        public Input<string>? AuthorEmailRegex { get; set; }

        /// <summary>
        /// All branch names must match this regex, e.g. "(feature|hotfix)\/*"
        /// </summary>
        [Input("branchNameRegex")]
        public Input<string>? BranchNameRegex { get; set; }

        /// <summary>
        /// All commit messages must match this regex, e.g. "Fixed \d+\..*"
        /// </summary>
        [Input("commitMessageRegex")]
        public Input<string>? CommitMessageRegex { get; set; }

        /// <summary>
        /// Deny deleting a tag
        /// </summary>
        [Input("denyDeleteTag")]
        public Input<bool>? DenyDeleteTag { get; set; }

        /// <summary>
        /// All commited filenames must not match this regex, e.g. "(jar|exe)$"
        /// </summary>
        [Input("fileNameRegex")]
        public Input<string>? FileNameRegex { get; set; }

        /// <summary>
        /// Maximum file size (MB)
        /// </summary>
        [Input("maxFileSize")]
        public Input<int>? MaxFileSize { get; set; }

        /// <summary>
        /// Restrict commits by author (email) to existing GitLab users
        /// </summary>
        [Input("memberCheck")]
        public Input<bool>? MemberCheck { get; set; }

        /// <summary>
        /// GitLab will reject any files that are likely to contain secrets
        /// </summary>
        [Input("preventSecrets")]
        public Input<bool>? PreventSecrets { get; set; }

        /// <summary>
        /// The name or id of the project to add the push rules to.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public ProjectPushRulesState()
        {
        }
    }
}
