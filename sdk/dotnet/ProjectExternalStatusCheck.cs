// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.ProjectExternalStatusCheck` resource allows you to manage the lifecycle of an external status check service on a project.
    /// 
    /// &gt; This resource requires a GitLab Enterprise instance with an Ultimate license.
    /// 
    /// **Upstream API**: [GitLab API docs](https://docs.gitlab.com/api/status_checks/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new GitLab.ProjectExternalStatusCheck("foo", new()
    ///     {
    ///         ProjectId = 123,
    ///         Name = "foo",
    ///         ExternalUrl = "https://example.gitlab.com",
    ///     });
    /// 
    ///     var bar = new GitLab.ProjectExternalStatusCheck("bar", new()
    ///     {
    ///         ProjectId = 456,
    ///         Name = "bar",
    ///         ExternalUrl = "https://example.gitlab.com",
    ///         SharedSecret = "secret",
    ///         ProtectedBranchIds = new[]
    ///         {
    ///             6,
    ///             28,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Starting in Terraform v1.5.0, you can use an import block to import `gitlab_project_external_status_check`. For example:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   to = gitlab_project_external_status_check.example
    /// 
    ///   id = "see CLI command below for ID"
    /// 
    /// }
    /// 
    /// Importing using the CLI is supported with the following syntax:
    /// 
    /// GitLab project external status checks can be imported using an id made up of `&lt;project-id&gt;:&lt;external-check-id&gt;`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck foo "123:42"
    /// ```
    /// 
    /// NOTE: the `shared_secret` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    /// </summary>
    [GitLabResourceType("gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck")]
    public partial class ProjectExternalStatusCheck : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URL of the external status check service.
        /// </summary>
        [Output("externalUrl")]
        public Output<string> ExternalUrl { get; private set; } = null!;

        /// <summary>
        /// True if the external status check uses an HMAC secret.
        /// </summary>
        [Output("hmac")]
        public Output<bool> Hmac { get; private set; } = null!;

        /// <summary>
        /// The display name of the external status check service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The list of IDs of protected branches to scope the rule by.
        /// </summary>
        [Output("protectedBranchIds")]
        public Output<ImmutableArray<int>> ProtectedBranchIds { get; private set; } = null!;

        /// <summary>
        /// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
        /// </summary>
        [Output("sharedSecret")]
        public Output<string?> SharedSecret { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectExternalStatusCheck resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectExternalStatusCheck(string name, ProjectExternalStatusCheckArgs args, CustomResourceOptions? options = null)
            : base("gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck", name, args ?? new ProjectExternalStatusCheckArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectExternalStatusCheck(string name, Input<string> id, ProjectExternalStatusCheckState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/projectExternalStatusCheck:ProjectExternalStatusCheck", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sharedSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectExternalStatusCheck resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectExternalStatusCheck Get(string name, Input<string> id, ProjectExternalStatusCheckState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectExternalStatusCheck(name, id, state, options);
        }
    }

    public sealed class ProjectExternalStatusCheckArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the external status check service.
        /// </summary>
        [Input("externalUrl", required: true)]
        public Input<string> ExternalUrl { get; set; } = null!;

        /// <summary>
        /// The display name of the external status check service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        [Input("protectedBranchIds")]
        private InputList<int>? _protectedBranchIds;

        /// <summary>
        /// The list of IDs of protected branches to scope the rule by.
        /// </summary>
        public InputList<int> ProtectedBranchIds
        {
            get => _protectedBranchIds ?? (_protectedBranchIds = new InputList<int>());
            set => _protectedBranchIds = value;
        }

        [Input("sharedSecret")]
        private Input<string>? _sharedSecret;

        /// <summary>
        /// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
        /// </summary>
        public Input<string>? SharedSecret
        {
            get => _sharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ProjectExternalStatusCheckArgs()
        {
        }
        public static new ProjectExternalStatusCheckArgs Empty => new ProjectExternalStatusCheckArgs();
    }

    public sealed class ProjectExternalStatusCheckState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the external status check service.
        /// </summary>
        [Input("externalUrl")]
        public Input<string>? ExternalUrl { get; set; }

        /// <summary>
        /// True if the external status check uses an HMAC secret.
        /// </summary>
        [Input("hmac")]
        public Input<bool>? Hmac { get; set; }

        /// <summary>
        /// The display name of the external status check service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("protectedBranchIds")]
        private InputList<int>? _protectedBranchIds;

        /// <summary>
        /// The list of IDs of protected branches to scope the rule by.
        /// </summary>
        public InputList<int> ProtectedBranchIds
        {
            get => _protectedBranchIds ?? (_protectedBranchIds = new InputList<int>());
            set => _protectedBranchIds = value;
        }

        [Input("sharedSecret")]
        private Input<string>? _sharedSecret;

        /// <summary>
        /// The HMAC secret for the external status check.  If this is set, then removed from the config, the value will get set to empty in the state.
        /// </summary>
        public Input<string>? SharedSecret
        {
            get => _sharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ProjectExternalStatusCheckState()
        {
        }
        public static new ProjectExternalStatusCheckState Empty => new ProjectExternalStatusCheckState();
    }
}
