// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetComplianceFramework
    {
        /// <summary>
        /// The `gitlab.ComplianceFramework` data source allows details of a compliance framework to be retrieved by its name and the namespace it belongs to.
        /// 
        /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/#querynamespace)
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetComplianceFramework.Invoke(new()
        ///     {
        ///         Name = "HIPAA",
        ///         NamespacePath = "top-level-group",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetComplianceFrameworkResult> InvokeAsync(GetComplianceFrameworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComplianceFrameworkResult>("gitlab:index/getComplianceFramework:getComplianceFramework", args ?? new GetComplianceFrameworkArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.ComplianceFramework` data source allows details of a compliance framework to be retrieved by its name and the namespace it belongs to.
        /// 
        /// **Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/#querynamespace)
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetComplianceFramework.Invoke(new()
        ///     {
        ///         Name = "HIPAA",
        ///         NamespacePath = "top-level-group",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetComplianceFrameworkResult> Invoke(GetComplianceFrameworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComplianceFrameworkResult>("gitlab:index/getComplianceFramework:getComplianceFramework", args ?? new GetComplianceFrameworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComplianceFrameworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the compliance framework.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Full path of the namespace to where the compliance framework is.
        /// </summary>
        [Input("namespacePath", required: true)]
        public string NamespacePath { get; set; } = null!;

        public GetComplianceFrameworkArgs()
        {
        }
        public static new GetComplianceFrameworkArgs Empty => new GetComplianceFrameworkArgs();
    }

    public sealed class GetComplianceFrameworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the compliance framework.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Full path of the namespace to where the compliance framework is.
        /// </summary>
        [Input("namespacePath", required: true)]
        public Input<string> NamespacePath { get; set; } = null!;

        public GetComplianceFrameworkInvokeArgs()
        {
        }
        public static new GetComplianceFrameworkInvokeArgs Empty => new GetComplianceFrameworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetComplianceFrameworkResult
    {
        /// <summary>
        /// Color representation of the compliance framework in hex format. e.g. #FCA121.
        /// </summary>
        public readonly string Color;
        /// <summary>
        /// Is the compliance framework the default framework for the group.
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// Description for the compliance framework.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Globally unique ID of the compliance framework.
        /// </summary>
        public readonly string FrameworkId;
        public readonly string Id;
        /// <summary>
        /// Name for the compliance framework.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Full path of the namespace to where the compliance framework is.
        /// </summary>
        public readonly string NamespacePath;
        /// <summary>
        /// Full path of the compliance pipeline configuration stored in a project repository, such as `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa`. Format: `path/file.y[a]ml@group-name/project-name` **Note**: Ultimate license required.
        /// </summary>
        public readonly string PipelineConfigurationFullPath;

        [OutputConstructor]
        private GetComplianceFrameworkResult(
            string color,

            bool @default,

            string description,

            string frameworkId,

            string id,

            string name,

            string namespacePath,

            string pipelineConfigurationFullPath)
        {
            Color = color;
            Default = @default;
            Description = description;
            FrameworkId = frameworkId;
            Id = id;
            Name = name;
            NamespacePath = namespacePath;
            PipelineConfigurationFullPath = pipelineConfigurationFullPath;
        }
    }
}
