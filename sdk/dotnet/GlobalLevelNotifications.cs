// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    /// <summary>
    /// The `gitlab.GlobalLevelNotifications` resource allows to manage global notifications.
    /// 
    /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/notification_settings.html#group--project-level-notification-settings)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using GitLab = Pulumi.GitLab;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create Custom global level notification
    ///     var foo = new GitLab.GlobalLevelNotifications("foo", new()
    ///     {
    ///         Level = "custom",
    ///         NewMergeRequest = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Note: You can import a global notification state using "gitlab" as the ID.
    /// 
    /// The ID will always be gitlab, because the global notificatio only exists
    /// 
    /// once per user
    /// 
    /// ```sh
    /// $ pulumi import gitlab:index/globalLevelNotifications:GlobalLevelNotifications example gitlab
    /// ```
    /// </summary>
    [GitLabResourceType("gitlab:index/globalLevelNotifications:GlobalLevelNotifications")]
    public partial class GlobalLevelNotifications : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable notifications for closed issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("closeIssue")]
        public Output<bool> CloseIssue { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for closed merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("closeMergeRequest")]
        public Output<bool> CloseMergeRequest { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for failed pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("failedPipeline")]
        public Output<bool> FailedPipeline { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for fixed pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("fixedPipeline")]
        public Output<bool> FixedPipeline { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for due issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("issueDue")]
        public Output<bool> IssueDue { get; private set; } = null!;

        /// <summary>
        /// The level of the notification. Valid values are: `disabled`, `participating`, `watch`, `global`, `mention`, `custom`.
        /// </summary>
        [Output("level")]
        public Output<string> Level { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for merged merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("mergeMergeRequest")]
        public Output<bool> MergeMergeRequest { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("mergeWhenPipelineSucceeds")]
        public Output<bool> MergeWhenPipelineSucceeds { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for moved projects. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("movedProject")]
        public Output<bool> MovedProject { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for new issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("newIssue")]
        public Output<bool> NewIssue { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for new merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("newMergeRequest")]
        public Output<bool> NewMergeRequest { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for new notes on merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("newNote")]
        public Output<bool> NewNote { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for push to merge request branches. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("pushToMergeRequest")]
        public Output<bool> PushToMergeRequest { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for issue reassignments. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("reassignIssue")]
        public Output<bool> ReassignIssue { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for merge request reassignments. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("reassignMergeRequest")]
        public Output<bool> ReassignMergeRequest { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for reopened issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("reopenIssue")]
        public Output<bool> ReopenIssue { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for reopened merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("reopenMergeRequest")]
        public Output<bool> ReopenMergeRequest { get; private set; } = null!;

        /// <summary>
        /// Enable notifications for successful pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Output("successPipeline")]
        public Output<bool> SuccessPipeline { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalLevelNotifications resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalLevelNotifications(string name, GlobalLevelNotificationsArgs? args = null, CustomResourceOptions? options = null)
            : base("gitlab:index/globalLevelNotifications:GlobalLevelNotifications", name, args ?? new GlobalLevelNotificationsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalLevelNotifications(string name, Input<string> id, GlobalLevelNotificationsState? state = null, CustomResourceOptions? options = null)
            : base("gitlab:index/globalLevelNotifications:GlobalLevelNotifications", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalLevelNotifications resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalLevelNotifications Get(string name, Input<string> id, GlobalLevelNotificationsState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalLevelNotifications(name, id, state, options);
        }
    }

    public sealed class GlobalLevelNotificationsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable notifications for closed issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("closeIssue")]
        public Input<bool>? CloseIssue { get; set; }

        /// <summary>
        /// Enable notifications for closed merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("closeMergeRequest")]
        public Input<bool>? CloseMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for failed pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("failedPipeline")]
        public Input<bool>? FailedPipeline { get; set; }

        /// <summary>
        /// Enable notifications for fixed pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("fixedPipeline")]
        public Input<bool>? FixedPipeline { get; set; }

        /// <summary>
        /// Enable notifications for due issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("issueDue")]
        public Input<bool>? IssueDue { get; set; }

        /// <summary>
        /// The level of the notification. Valid values are: `disabled`, `participating`, `watch`, `global`, `mention`, `custom`.
        /// </summary>
        [Input("level")]
        public Input<string>? Level { get; set; }

        /// <summary>
        /// Enable notifications for merged merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("mergeMergeRequest")]
        public Input<bool>? MergeMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("mergeWhenPipelineSucceeds")]
        public Input<bool>? MergeWhenPipelineSucceeds { get; set; }

        /// <summary>
        /// Enable notifications for moved projects. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("movedProject")]
        public Input<bool>? MovedProject { get; set; }

        /// <summary>
        /// Enable notifications for new issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("newIssue")]
        public Input<bool>? NewIssue { get; set; }

        /// <summary>
        /// Enable notifications for new merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("newMergeRequest")]
        public Input<bool>? NewMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for new notes on merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("newNote")]
        public Input<bool>? NewNote { get; set; }

        /// <summary>
        /// Enable notifications for push to merge request branches. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("pushToMergeRequest")]
        public Input<bool>? PushToMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for issue reassignments. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reassignIssue")]
        public Input<bool>? ReassignIssue { get; set; }

        /// <summary>
        /// Enable notifications for merge request reassignments. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reassignMergeRequest")]
        public Input<bool>? ReassignMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for reopened issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reopenIssue")]
        public Input<bool>? ReopenIssue { get; set; }

        /// <summary>
        /// Enable notifications for reopened merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reopenMergeRequest")]
        public Input<bool>? ReopenMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for successful pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("successPipeline")]
        public Input<bool>? SuccessPipeline { get; set; }

        public GlobalLevelNotificationsArgs()
        {
        }
        public static new GlobalLevelNotificationsArgs Empty => new GlobalLevelNotificationsArgs();
    }

    public sealed class GlobalLevelNotificationsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable notifications for closed issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("closeIssue")]
        public Input<bool>? CloseIssue { get; set; }

        /// <summary>
        /// Enable notifications for closed merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("closeMergeRequest")]
        public Input<bool>? CloseMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for failed pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("failedPipeline")]
        public Input<bool>? FailedPipeline { get; set; }

        /// <summary>
        /// Enable notifications for fixed pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("fixedPipeline")]
        public Input<bool>? FixedPipeline { get; set; }

        /// <summary>
        /// Enable notifications for due issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("issueDue")]
        public Input<bool>? IssueDue { get; set; }

        /// <summary>
        /// The level of the notification. Valid values are: `disabled`, `participating`, `watch`, `global`, `mention`, `custom`.
        /// </summary>
        [Input("level")]
        public Input<string>? Level { get; set; }

        /// <summary>
        /// Enable notifications for merged merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("mergeMergeRequest")]
        public Input<bool>? MergeMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("mergeWhenPipelineSucceeds")]
        public Input<bool>? MergeWhenPipelineSucceeds { get; set; }

        /// <summary>
        /// Enable notifications for moved projects. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("movedProject")]
        public Input<bool>? MovedProject { get; set; }

        /// <summary>
        /// Enable notifications for new issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("newIssue")]
        public Input<bool>? NewIssue { get; set; }

        /// <summary>
        /// Enable notifications for new merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("newMergeRequest")]
        public Input<bool>? NewMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for new notes on merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("newNote")]
        public Input<bool>? NewNote { get; set; }

        /// <summary>
        /// Enable notifications for push to merge request branches. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("pushToMergeRequest")]
        public Input<bool>? PushToMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for issue reassignments. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reassignIssue")]
        public Input<bool>? ReassignIssue { get; set; }

        /// <summary>
        /// Enable notifications for merge request reassignments. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reassignMergeRequest")]
        public Input<bool>? ReassignMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for reopened issues. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reopenIssue")]
        public Input<bool>? ReopenIssue { get; set; }

        /// <summary>
        /// Enable notifications for reopened merge requests. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("reopenMergeRequest")]
        public Input<bool>? ReopenMergeRequest { get; set; }

        /// <summary>
        /// Enable notifications for successful pipelines. Can only be used when `level` is `custom`.
        /// </summary>
        [Input("successPipeline")]
        public Input<bool>? SuccessPipeline { get; set; }

        public GlobalLevelNotificationsState()
        {
        }
        public static new GlobalLevelNotificationsState Empty => new GlobalLevelNotificationsState();
    }
}
