// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetPipelineSchedule
    {
        /// <summary>
        /// The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetPipelineSchedule.Invoke(new()
        ///     {
        ///         Project = "12345",
        ///         PipelineScheduleId = 1,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPipelineScheduleResult> InvokeAsync(GetPipelineScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPipelineScheduleResult>("gitlab:index/getPipelineSchedule:getPipelineSchedule", args ?? new GetPipelineScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetPipelineSchedule.Invoke(new()
        ///     {
        ///         Project = "12345",
        ///         PipelineScheduleId = 1,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPipelineScheduleResult> Invoke(GetPipelineScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPipelineScheduleResult>("gitlab:index/getPipelineSchedule:getPipelineSchedule", args ?? new GetPipelineScheduleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.PipelineSchedule` data source retrieves information about a gitlab pipeline schedule for a project.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/pipeline_schedules/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = GitLab.GetPipelineSchedule.Invoke(new()
        ///     {
        ///         Project = "12345",
        ///         PipelineScheduleId = 1,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPipelineScheduleResult> Invoke(GetPipelineScheduleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPipelineScheduleResult>("gitlab:index/getPipelineSchedule:getPipelineSchedule", args ?? new GetPipelineScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPipelineScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The timezone.
        /// </summary>
        [Input("cronTimezone")]
        public string? CronTimezone { get; set; }

        /// <summary>
        /// The pipeline schedule id.
        /// </summary>
        [Input("pipelineScheduleId", required: true)]
        public int PipelineScheduleId { get; set; }

        /// <summary>
        /// The name or id of the project to add the schedule to.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetPipelineScheduleArgs()
        {
        }
        public static new GetPipelineScheduleArgs Empty => new GetPipelineScheduleArgs();
    }

    public sealed class GetPipelineScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The timezone.
        /// </summary>
        [Input("cronTimezone")]
        public Input<string>? CronTimezone { get; set; }

        /// <summary>
        /// The pipeline schedule id.
        /// </summary>
        [Input("pipelineScheduleId", required: true)]
        public Input<int> PipelineScheduleId { get; set; } = null!;

        /// <summary>
        /// The name or id of the project to add the schedule to.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetPipelineScheduleInvokeArgs()
        {
        }
        public static new GetPipelineScheduleInvokeArgs Empty => new GetPipelineScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetPipelineScheduleResult
    {
        /// <summary>
        /// The activation status of pipeline schedule.
        /// </summary>
        public readonly bool Active;
        /// <summary>
        /// The datetime of when the schedule was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The cron (e.g. `0 1 * * *`).
        /// </summary>
        public readonly string Cron;
        /// <summary>
        /// The timezone.
        /// </summary>
        public readonly string CronTimezone;
        /// <summary>
        /// The description of the pipeline schedule.
        /// </summary>
        public readonly string Description;
        public readonly string Id;
        /// <summary>
        /// The details of the last pipeline run by the schedule.
        /// </summary>
        public readonly Outputs.GetPipelineScheduleLastPipelineResult LastPipeline;
        /// <summary>
        /// The datetime of when the schedule will next run.
        /// </summary>
        public readonly string NextRunAt;
        /// <summary>
        /// The details of the pipeline schedule owner.
        /// </summary>
        public readonly Outputs.GetPipelineScheduleOwnerResult Owner;
        /// <summary>
        /// The pipeline schedule id.
        /// </summary>
        public readonly int PipelineScheduleId;
        /// <summary>
        /// The name or id of the project to add the schedule to.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// The branch/tag name to be triggered. This will be the full branch reference, for example: `refs/heads/main`, not `main`.
        /// </summary>
        public readonly string Ref;
        /// <summary>
        /// The datetime of when the schedule was last updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The list of the pipeline schedule variables.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPipelineScheduleVariableResult> Variables;

        [OutputConstructor]
        private GetPipelineScheduleResult(
            bool active,

            string createdAt,

            string cron,

            string cronTimezone,

            string description,

            string id,

            Outputs.GetPipelineScheduleLastPipelineResult lastPipeline,

            string nextRunAt,

            Outputs.GetPipelineScheduleOwnerResult owner,

            int pipelineScheduleId,

            string project,

            string @ref,

            string updatedAt,

            ImmutableArray<Outputs.GetPipelineScheduleVariableResult> variables)
        {
            Active = active;
            CreatedAt = createdAt;
            Cron = cron;
            CronTimezone = cronTimezone;
            Description = description;
            Id = id;
            LastPipeline = lastPipeline;
            NextRunAt = nextRunAt;
            Owner = owner;
            PipelineScheduleId = pipelineScheduleId;
            Project = project;
            Ref = @ref;
            UpdatedAt = updatedAt;
            Variables = variables;
        }
    }
}
