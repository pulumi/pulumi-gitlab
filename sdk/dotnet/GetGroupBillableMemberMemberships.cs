// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab
{
    public static class GetGroupBillableMemberMemberships
    {
        /// <summary>
        /// The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
        /// 
        /// &gt; You must be an administrator!
        /// 
        /// &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
        /// the most related match will prioritize an exact match if one is available.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-memberships-for-a-billable-member-of-a-group)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserMembership = GitLab.GetGroupBillableMemberMemberships.Invoke(new()
        ///     {
        ///         UserId = 21,
        ///         GroupId = "42",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGroupBillableMemberMembershipsResult> InvokeAsync(GetGroupBillableMemberMembershipsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupBillableMemberMembershipsResult>("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", args ?? new GetGroupBillableMemberMembershipsArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
        /// 
        /// &gt; You must be an administrator!
        /// 
        /// &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
        /// the most related match will prioritize an exact match if one is available.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-memberships-for-a-billable-member-of-a-group)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserMembership = GitLab.GetGroupBillableMemberMemberships.Invoke(new()
        ///     {
        ///         UserId = 21,
        ///         GroupId = "42",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupBillableMemberMembershipsResult> Invoke(GetGroupBillableMemberMembershipsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupBillableMemberMembershipsResult>("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", args ?? new GetGroupBillableMemberMembershipsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `gitlab.getGroupBillableMemberMemberships` data source allows (sub)group- and project-memberships of a billable member of a group to be retrieved by either the user ID, username or email address.
        /// 
        /// &gt; You must be an administrator!
        /// 
        /// &gt; When using the `email` attribute, an exact match is not guaranteed. The most related match will be returned. Starting with GitLab 16.6,
        /// the most related match will prioritize an exact match if one is available.
        /// 
        /// **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-memberships-for-a-billable-member-of-a-group)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using GitLab = Pulumi.GitLab;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserMembership = GitLab.GetGroupBillableMemberMemberships.Invoke(new()
        ///     {
        ///         UserId = 21,
        ///         GroupId = "42",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupBillableMemberMembershipsResult> Invoke(GetGroupBillableMemberMembershipsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupBillableMemberMembershipsResult>("gitlab:index/getGroupBillableMemberMemberships:getGroupBillableMemberMemberships", args ?? new GetGroupBillableMemberMembershipsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupBillableMemberMembershipsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the group.
        /// </summary>
        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        /// <summary>
        /// The ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public int UserId { get; set; }

        public GetGroupBillableMemberMembershipsArgs()
        {
        }
        public static new GetGroupBillableMemberMembershipsArgs Empty => new GetGroupBillableMemberMembershipsArgs();
    }

    public sealed class GetGroupBillableMemberMembershipsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the group.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<int> UserId { get; set; } = null!;

        public GetGroupBillableMemberMembershipsInvokeArgs()
        {
        }
        public static new GetGroupBillableMemberMembershipsInvokeArgs Empty => new GetGroupBillableMemberMembershipsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupBillableMemberMembershipsResult
    {
        /// <summary>
        /// The ID of the group.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The id of the data source. It will always be equal to the user_id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// group- and/or project-memberships of the user.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGroupBillableMemberMembershipsMembershipResult> Memberships;
        /// <summary>
        /// The ID of the user.
        /// </summary>
        public readonly int UserId;

        [OutputConstructor]
        private GetGroupBillableMemberMembershipsResult(
            string groupId,

            string id,

            ImmutableArray<Outputs.GetGroupBillableMemberMembershipsMembershipResult> memberships,

            int userId)
        {
            GroupId = groupId;
            Id = id;
            Memberships = memberships;
            UserId = userId;
        }
    }
}
