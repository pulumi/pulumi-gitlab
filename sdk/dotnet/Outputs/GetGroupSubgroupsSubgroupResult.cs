// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Outputs
{

    [OutputType]
    public sealed class GetGroupSubgroupsSubgroupResult
    {
        /// <summary>
        /// A list of email address domains to allow group access.
        /// </summary>
        public readonly string AllowedEmailDomainsList;
        /// <summary>
        /// Default to Auto DevOps pipeline for all projects within this group.
        /// </summary>
        public readonly bool AutoDevopsEnabled;
        /// <summary>
        /// The URL of the avatar image.
        /// </summary>
        public readonly string AvatarUrl;
        /// <summary>
        /// Group created at date.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Whether developers and maintainers can push to the applicable default branch.
        /// </summary>
        public readonly int DefaultBranchProtection;
        /// <summary>
        /// The description of the group.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enable email notifications.
        /// </summary>
        public readonly bool EmailsEnabled;
        /// <summary>
        /// The ID of the project that will be used for file templates.
        /// </summary>
        public readonly int FileTemplateProjectId;
        /// <summary>
        /// The full name of the group.
        /// </summary>
        public readonly string FullName;
        /// <summary>
        /// The full path of the group.
        /// </summary>
        public readonly string FullPath;
        /// <summary>
        /// The ID of the group.
        /// </summary>
        public readonly int GroupId;
        /// <summary>
        /// A list of IP addresses or subnet masks to restrict group access.
        /// </summary>
        public readonly string IpRestrictionRanges;
        /// <summary>
        /// Is LFS enabled for projects in this group.
        /// </summary>
        public readonly bool LfsEnabled;
        /// <summary>
        /// Disable the capability of a group from getting mentioned.
        /// </summary>
        public readonly bool MentionsDisabled;
        /// <summary>
        /// The name of this group.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of the parent group.
        /// </summary>
        public readonly int ParentId;
        /// <summary>
        /// The path of the group.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Determine if developers can create projects in the group. Valid values are: `Noone`, `Owner`, `Maintainer`, `Developer`, `Administrator`
        /// </summary>
        public readonly string ProjectCreationLevel;
        /// <summary>
        /// Is request for access enabled to the group.
        /// </summary>
        public readonly bool RequestAccessEnabled;
        /// <summary>
        /// Require all users in this group to setup Two-factor authentication.
        /// </summary>
        public readonly bool RequireTwoFactorAuthentication;
        /// <summary>
        /// Prevent sharing a project with another group within this group.
        /// </summary>
        public readonly bool ShareWithGroupLock;
        /// <summary>
        /// Enable or disable shared runners for a group's subgroups and projects. Valid values are: `Enabled`, `DisabledAndOverridable`, `DisabledAndUnoverridable`, `DisabledWithOverride`.
        /// </summary>
        public readonly string SharedRunnersSetting;
        /// <summary>
        /// Group statistics.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Statistics;
        /// <summary>
        /// Allowed to create subgroups. Valid values are: `Owner`, `Maintainer`.
        /// </summary>
        public readonly string SubgroupCreationLevel;
        /// <summary>
        /// Time before Two-factor authentication is enforced (in hours).
        /// </summary>
        public readonly int TwoFactorGracePeriod;
        /// <summary>
        /// Limited by visibility `Public`, `Internal`, or `Private`.
        /// </summary>
        public readonly string Visibility;
        /// <summary>
        /// Web URL of the group.
        /// </summary>
        public readonly string WebUrl;
        /// <summary>
        /// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        public readonly string WikiAccessLevel;

        [OutputConstructor]
        private GetGroupSubgroupsSubgroupResult(
            string allowedEmailDomainsList,

            bool autoDevopsEnabled,

            string avatarUrl,

            string createdAt,

            int defaultBranchProtection,

            string description,

            bool emailsEnabled,

            int fileTemplateProjectId,

            string fullName,

            string fullPath,

            int groupId,

            string ipRestrictionRanges,

            bool lfsEnabled,

            bool mentionsDisabled,

            string name,

            int parentId,

            string path,

            string projectCreationLevel,

            bool requestAccessEnabled,

            bool requireTwoFactorAuthentication,

            bool shareWithGroupLock,

            string sharedRunnersSetting,

            ImmutableDictionary<string, string> statistics,

            string subgroupCreationLevel,

            int twoFactorGracePeriod,

            string visibility,

            string webUrl,

            string wikiAccessLevel)
        {
            AllowedEmailDomainsList = allowedEmailDomainsList;
            AutoDevopsEnabled = autoDevopsEnabled;
            AvatarUrl = avatarUrl;
            CreatedAt = createdAt;
            DefaultBranchProtection = defaultBranchProtection;
            Description = description;
            EmailsEnabled = emailsEnabled;
            FileTemplateProjectId = fileTemplateProjectId;
            FullName = fullName;
            FullPath = fullPath;
            GroupId = groupId;
            IpRestrictionRanges = ipRestrictionRanges;
            LfsEnabled = lfsEnabled;
            MentionsDisabled = mentionsDisabled;
            Name = name;
            ParentId = parentId;
            Path = path;
            ProjectCreationLevel = projectCreationLevel;
            RequestAccessEnabled = requestAccessEnabled;
            RequireTwoFactorAuthentication = requireTwoFactorAuthentication;
            ShareWithGroupLock = shareWithGroupLock;
            SharedRunnersSetting = sharedRunnersSetting;
            Statistics = statistics;
            SubgroupCreationLevel = subgroupCreationLevel;
            TwoFactorGracePeriod = twoFactorGracePeriod;
            Visibility = visibility;
            WebUrl = webUrl;
            WikiAccessLevel = wikiAccessLevel;
        }
    }
}
