// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Outputs
{

    [OutputType]
    public sealed class GetProjectMergeRequestsMergeRequestResult
    {
        /// <summary>
        /// First assignee of the merge request.
        /// </summary>
        public readonly Outputs.GetProjectMergeRequestsMergeRequestAssigneeResult Assignee;
        /// <summary>
        /// Assignees of the merge request.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectMergeRequestsMergeRequestAssigneeResult> Assignees;
        /// <summary>
        /// User who created this merge request.
        /// </summary>
        public readonly Outputs.GetProjectMergeRequestsMergeRequestAuthorResult Author;
        /// <summary>
        /// Indicates if all discussions are resolved only if all are
        /// required before merge request can be merged.
        /// </summary>
        public readonly bool BlockingDiscussionsResolved;
        /// <summary>
        /// Timestamp of when the merge request was closed.
        /// </summary>
        public readonly string ClosedAt;
        /// <summary>
        /// User who closed this merge request.
        /// </summary>
        public readonly Outputs.GetProjectMergeRequestsMergeRequestClosedByResult ClosedBy;
        /// <summary>
        /// Timestamp of when the merge request was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The unique instance level ID of the merge request.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The unique project level ID of the merge request.
        /// </summary>
        public readonly int Iid;

        [OutputConstructor]
        private GetProjectMergeRequestsMergeRequestResult(
            Outputs.GetProjectMergeRequestsMergeRequestAssigneeResult assignee,

            ImmutableArray<Outputs.GetProjectMergeRequestsMergeRequestAssigneeResult> assignees,

            Outputs.GetProjectMergeRequestsMergeRequestAuthorResult author,

            bool blockingDiscussionsResolved,

            string closedAt,

            Outputs.GetProjectMergeRequestsMergeRequestClosedByResult closedBy,

            string createdAt,

            int id,

            int iid)
        {
            Assignee = assignee;
            Assignees = assignees;
            Author = author;
            BlockingDiscussionsResolved = blockingDiscussionsResolved;
            ClosedAt = closedAt;
            ClosedBy = closedBy;
            CreatedAt = createdAt;
            Id = id;
            Iid = iid;
        }
    }
}
