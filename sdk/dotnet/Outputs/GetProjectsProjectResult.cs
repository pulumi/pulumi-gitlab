// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Outputs
{

    [OutputType]
    public sealed class GetProjectsProjectResult
    {
        /// <summary>
        /// Links for the project.
        /// </summary>
        public readonly ImmutableDictionary<string, string> _links;
        /// <summary>
        /// Whether allow_merge_on_skipped_pipeline is enabled for the project.
        /// </summary>
        public readonly bool AllowMergeOnSkippedPipeline;
        /// <summary>
        /// Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
        /// </summary>
        public readonly bool AllowPipelineTriggerApproveDeployment;
        /// <summary>
        /// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string AnalyticsAccessLevel;
        /// <summary>
        /// The numbers of approvals needed in a merge requests.
        /// </summary>
        public readonly int ApprovalsBeforeMerge;
        /// <summary>
        /// Whether the project is archived.
        /// </summary>
        public readonly bool Archived;
        /// <summary>
        /// Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled.
        /// </summary>
        public readonly string AutoCancelPendingPipelines;
        /// <summary>
        /// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
        /// </summary>
        public readonly string AutoDevopsDeployStrategy;
        /// <summary>
        /// Enable Auto DevOps for this project.
        /// </summary>
        public readonly bool AutoDevopsEnabled;
        /// <summary>
        /// Set whether auto-closing referenced issues on default branch.
        /// </summary>
        public readonly bool AutocloseReferencedIssues;
        /// <summary>
        /// The avatar url of the project.
        /// </summary>
        public readonly string AvatarUrl;
        /// <summary>
        /// Build coverage regex for the project.
        /// </summary>
        public readonly string BuildCoverageRegex;
        /// <summary>
        /// The Git strategy. Defaults to fetch.
        /// </summary>
        public readonly string BuildGitStrategy;
        /// <summary>
        /// The maximum amount of time, in seconds, that a job can run.
        /// </summary>
        public readonly int BuildTimeout;
        /// <summary>
        /// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string BuildsAccessLevel;
        /// <summary>
        /// CI config file path for the project.
        /// </summary>
        public readonly string CiConfigPath;
        /// <summary>
        /// Default number of revisions for shallow cloning.
        /// </summary>
        public readonly int CiDefaultGitDepth;
        /// <summary>
        /// Pipelines older than the configured time are deleted.
        /// </summary>
        public readonly int CiDeletePipelinesInSeconds;
        /// <summary>
        /// When a new deployment job starts, skip older deployment jobs that are still pending.
        /// </summary>
        public readonly bool CiForwardDeploymentEnabled;
        /// <summary>
        /// Fields included in the sub claim of the ID Token. Accepts an array starting with project_path. The array might also include ref_type and ref. Defaults to ["project_path", "ref_type", "ref"]. Introduced in GitLab 17.10.
        /// </summary>
        public readonly ImmutableArray<string> CiIdTokenSubClaimComponents;
        /// <summary>
        /// The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are `developer`, `maintainer`, `owner`, `no_one_allowed`
        /// </summary>
        public readonly string CiPipelineVariablesMinimumOverrideRole;
        /// <summary>
        /// The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
        /// </summary>
        public readonly string CiRestrictPipelineCancellationRole;
        /// <summary>
        /// Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectContainerExpirationPolicyResult> ContainerExpirationPolicies;
        /// <summary>
        /// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string ContainerRegistryAccessLevel;
        /// <summary>
        /// Whether the container registry is enabled for the project.
        /// </summary>
        public readonly bool ContainerRegistryEnabled;
        /// <summary>
        /// Creation time for the project.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Creator ID for the project.
        /// </summary>
        public readonly int CreatorId;
        /// <summary>
        /// Custom attributes for the project.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> CustomAttributes;
        /// <summary>
        /// The default branch name of the project.
        /// </summary>
        public readonly string DefaultBranch;
        /// <summary>
        /// The description of the project.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enable email notifications.
        /// </summary>
        public readonly bool EmailsEnabled;
        /// <summary>
        /// Whether the project is empty.
        /// </summary>
        public readonly bool EmptyRepo;
        /// <summary>
        /// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string EnvironmentsAccessLevel;
        /// <summary>
        /// The classification label for the project.
        /// </summary>
        public readonly string ExternalAuthorizationClassificationLabel;
        /// <summary>
        /// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string FeatureFlagsAccessLevel;
        /// <summary>
        /// Present if the project is a fork. Contains information about the upstream project.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectForkedFromProjectResult> ForkedFromProjects;
        /// <summary>
        /// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string ForkingAccessLevel;
        /// <summary>
        /// The number of forks of the project.
        /// </summary>
        public readonly int ForksCount;
        /// <summary>
        /// Whether group runners are enabled for the project.
        /// </summary>
        public readonly bool GroupRunnersEnabled;
        /// <summary>
        /// The HTTP clone URL of the project.
        /// </summary>
        public readonly string HttpUrlToRepo;
        /// <summary>
        /// The ID of the project.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The import error, if it exists, for the project.
        /// </summary>
        public readonly string ImportError;
        /// <summary>
        /// The import status of the project.
        /// </summary>
        public readonly string ImportStatus;
        /// <summary>
        /// URL the project was imported from.
        /// </summary>
        public readonly string ImportUrl;
        /// <summary>
        /// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string InfrastructureAccessLevel;
        /// <summary>
        /// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string IssuesAccessLevel;
        /// <summary>
        /// Whether issues are enabled for the project.
        /// </summary>
        public readonly bool IssuesEnabled;
        /// <summary>
        /// Whether pipelines are enabled for the project.
        /// </summary>
        public readonly bool JobsEnabled;
        /// <summary>
        /// Disable or enable the ability to keep the latest artifact for this project.
        /// </summary>
        public readonly bool KeepLatestArtifact;
        /// <summary>
        /// Last activirty time for the project.
        /// </summary>
        public readonly string LastActivityAt;
        /// <summary>
        /// Whether LFS (large file storage) is enabled for the project.
        /// </summary>
        public readonly bool LfsEnabled;
        /// <summary>
        /// Template used to create merge commit message in merge requests.
        /// </summary>
        public readonly string MergeCommitTemplate;
        /// <summary>
        /// Merge method for the project.
        /// </summary>
        public readonly string MergeMethod;
        /// <summary>
        /// Enable or disable merge pipelines.
        /// </summary>
        public readonly bool MergePipelinesEnabled;
        /// <summary>
        /// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string MergeRequestsAccessLevel;
        /// <summary>
        /// Whether merge requests are enabled for the project.
        /// </summary>
        public readonly bool MergeRequestsEnabled;
        /// <summary>
        /// Enable or disable merge trains.
        /// </summary>
        public readonly bool MergeTrainsEnabled;
        /// <summary>
        /// Whether the pull mirroring is enabled for the project.
        /// </summary>
        public readonly bool Mirror;
        /// <summary>
        /// Whether mirror_overwrites_diverged_branches is enabled for the project.
        /// </summary>
        public readonly bool MirrorOverwritesDivergedBranches;
        /// <summary>
        /// Whether pull mirroring triggers builds for the project.
        /// </summary>
        public readonly bool MirrorTriggerBuilds;
        /// <summary>
        /// The mirror user ID for the project.
        /// </summary>
        public readonly int MirrorUserId;
        /// <summary>
        /// The visibility of machine learning model experiments.
        /// </summary>
        public readonly string ModelExperimentsAccessLevel;
        /// <summary>
        /// The visibility of machine learning model registry.
        /// </summary>
        public readonly string ModelRegistryAccessLevel;
        /// <summary>
        /// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string MonitorAccessLevel;
        /// <summary>
        /// The name of the project.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// In `group / subgroup / project` or `user / project` format.
        /// </summary>
        public readonly string NameWithNamespace;
        /// <summary>
        /// Namespace of the project (parent group/s).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectNamespaceResult> Namespaces;
        /// <summary>
        /// Whether only_allow_merge_if_all_discussions_are_resolved is enabled for the project.
        /// </summary>
        public readonly bool OnlyAllowMergeIfAllDiscussionsAreResolved;
        /// <summary>
        /// Whether only_allow_merge_if_pipeline_succeeds is enabled for the project.
        /// </summary>
        public readonly bool OnlyAllowMergeIfPipelineSucceeds;
        /// <summary>
        /// Whether only_mirror_protected_branches is enabled for the project.
        /// </summary>
        public readonly bool OnlyMirrorProtectedBranches;
        /// <summary>
        /// The number of open issies for the project.
        /// </summary>
        public readonly int OpenIssuesCount;
        public readonly ImmutableArray<Outputs.GetProjectsProjectOwnerResult> Owners;
        /// <summary>
        /// Whether packages are enabled for the project.
        /// </summary>
        public readonly bool PackagesEnabled;
        /// <summary>
        /// The path of the project.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// In `group/subgroup/project` or `user/project` format.
        /// </summary>
        public readonly string PathWithNamespace;
        /// <summary>
        /// Permissions for the project.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectPermissionResult> Permissions;
        /// <summary>
        /// Whether merge requests require an associated issue from Jira. Premium and Ultimate only.
        /// </summary>
        public readonly bool PreventMergeWithoutJiraIssue;
        /// <summary>
        /// Whether public builds are enabled for the project.
        /// </summary>
        public readonly bool PublicBuilds;
        /// <summary>
        /// The remote url of the project.
        /// </summary>
        public readonly string ReadmeUrl;
        /// <summary>
        /// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string ReleasesAccessLevel;
        /// <summary>
        /// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string RepositoryAccessLevel;
        /// <summary>
        /// Which storage shard the repository is on. (administrator only)
        /// </summary>
        public readonly string RepositoryStorage;
        /// <summary>
        /// Whether requesting access is enabled for the project.
        /// </summary>
        public readonly bool RequestAccessEnabled;
        /// <summary>
        /// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string RequirementsAccessLevel;
        /// <summary>
        /// Whether resolve_outdated_diff_discussions is enabled for the project
        /// </summary>
        public readonly bool ResolveOutdatedDiffDiscussions;
        /// <summary>
        /// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
        /// </summary>
        public readonly bool RestrictUserDefinedVariables;
        /// <summary>
        /// The runners token for the project.
        /// </summary>
        public readonly string RunnersToken;
        /// <summary>
        /// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string SecurityAndComplianceAccessLevel;
        /// <summary>
        /// Whether shared runners are enabled for the project.
        /// </summary>
        public readonly bool SharedRunnersEnabled;
        /// <summary>
        /// Groups the the project is shared with.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectSharedWithGroupResult> SharedWithGroups;
        /// <summary>
        /// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string SnippetsAccessLevel;
        /// <summary>
        /// Whether snippets are enabled for the project.
        /// </summary>
        public readonly bool SnippetsEnabled;
        /// <summary>
        /// Template used to create squash commit message in merge requests.
        /// </summary>
        public readonly string SquashCommitTemplate;
        /// <summary>
        /// The SSH clone URL of the project.
        /// </summary>
        public readonly string SshUrlToRepo;
        /// <summary>
        /// The number of stars on the project.
        /// </summary>
        public readonly int StarCount;
        /// <summary>
        /// Statistics for the project.
        /// </summary>
        public readonly ImmutableDictionary<string, int> Statistics;
        /// <summary>
        /// The commit message used to apply merge request suggestions.
        /// </summary>
        public readonly string SuggestionCommitMessage;
        /// <summary>
        /// A set of the project topics (formerly called "project tags").
        /// </summary>
        public readonly ImmutableArray<string> TagLists;
        /// <summary>
        /// The list of topics for the project.
        /// </summary>
        public readonly ImmutableArray<string> Topics;
        /// <summary>
        /// The visibility of the project.
        /// </summary>
        public readonly string Visibility;
        /// <summary>
        /// The web url of the project.
        /// </summary>
        public readonly string WebUrl;
        /// <summary>
        /// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
        /// </summary>
        public readonly string WikiAccessLevel;
        /// <summary>
        /// Whether wiki is enabled for the project.
        /// </summary>
        public readonly bool WikiEnabled;

        [OutputConstructor]
        private GetProjectsProjectResult(
            ImmutableDictionary<string, string> _links,

            bool allowMergeOnSkippedPipeline,

            bool allowPipelineTriggerApproveDeployment,

            string analyticsAccessLevel,

            int approvalsBeforeMerge,

            bool archived,

            string autoCancelPendingPipelines,

            string autoDevopsDeployStrategy,

            bool autoDevopsEnabled,

            bool autocloseReferencedIssues,

            string avatarUrl,

            string buildCoverageRegex,

            string buildGitStrategy,

            int buildTimeout,

            string buildsAccessLevel,

            string ciConfigPath,

            int ciDefaultGitDepth,

            int ciDeletePipelinesInSeconds,

            bool ciForwardDeploymentEnabled,

            ImmutableArray<string> ciIdTokenSubClaimComponents,

            string ciPipelineVariablesMinimumOverrideRole,

            string ciRestrictPipelineCancellationRole,

            ImmutableArray<Outputs.GetProjectsProjectContainerExpirationPolicyResult> containerExpirationPolicies,

            string containerRegistryAccessLevel,

            bool containerRegistryEnabled,

            string createdAt,

            int creatorId,

            ImmutableArray<ImmutableDictionary<string, string>> customAttributes,

            string defaultBranch,

            string description,

            bool emailsEnabled,

            bool emptyRepo,

            string environmentsAccessLevel,

            string externalAuthorizationClassificationLabel,

            string featureFlagsAccessLevel,

            ImmutableArray<Outputs.GetProjectsProjectForkedFromProjectResult> forkedFromProjects,

            string forkingAccessLevel,

            int forksCount,

            bool groupRunnersEnabled,

            string httpUrlToRepo,

            int id,

            string importError,

            string importStatus,

            string importUrl,

            string infrastructureAccessLevel,

            string issuesAccessLevel,

            bool issuesEnabled,

            bool jobsEnabled,

            bool keepLatestArtifact,

            string lastActivityAt,

            bool lfsEnabled,

            string mergeCommitTemplate,

            string mergeMethod,

            bool mergePipelinesEnabled,

            string mergeRequestsAccessLevel,

            bool mergeRequestsEnabled,

            bool mergeTrainsEnabled,

            bool mirror,

            bool mirrorOverwritesDivergedBranches,

            bool mirrorTriggerBuilds,

            int mirrorUserId,

            string modelExperimentsAccessLevel,

            string modelRegistryAccessLevel,

            string monitorAccessLevel,

            string name,

            string nameWithNamespace,

            ImmutableArray<Outputs.GetProjectsProjectNamespaceResult> namespaces,

            bool onlyAllowMergeIfAllDiscussionsAreResolved,

            bool onlyAllowMergeIfPipelineSucceeds,

            bool onlyMirrorProtectedBranches,

            int openIssuesCount,

            ImmutableArray<Outputs.GetProjectsProjectOwnerResult> owners,

            bool packagesEnabled,

            string path,

            string pathWithNamespace,

            ImmutableArray<Outputs.GetProjectsProjectPermissionResult> permissions,

            bool preventMergeWithoutJiraIssue,

            bool publicBuilds,

            string readmeUrl,

            string releasesAccessLevel,

            string repositoryAccessLevel,

            string repositoryStorage,

            bool requestAccessEnabled,

            string requirementsAccessLevel,

            bool resolveOutdatedDiffDiscussions,

            bool restrictUserDefinedVariables,

            string runnersToken,

            string securityAndComplianceAccessLevel,

            bool sharedRunnersEnabled,

            ImmutableArray<Outputs.GetProjectsProjectSharedWithGroupResult> sharedWithGroups,

            string snippetsAccessLevel,

            bool snippetsEnabled,

            string squashCommitTemplate,

            string sshUrlToRepo,

            int starCount,

            ImmutableDictionary<string, int> statistics,

            string suggestionCommitMessage,

            ImmutableArray<string> tagLists,

            ImmutableArray<string> topics,

            string visibility,

            string webUrl,

            string wikiAccessLevel,

            bool wikiEnabled)
        {
            this._links = _links;
            AllowMergeOnSkippedPipeline = allowMergeOnSkippedPipeline;
            AllowPipelineTriggerApproveDeployment = allowPipelineTriggerApproveDeployment;
            AnalyticsAccessLevel = analyticsAccessLevel;
            ApprovalsBeforeMerge = approvalsBeforeMerge;
            Archived = archived;
            AutoCancelPendingPipelines = autoCancelPendingPipelines;
            AutoDevopsDeployStrategy = autoDevopsDeployStrategy;
            AutoDevopsEnabled = autoDevopsEnabled;
            AutocloseReferencedIssues = autocloseReferencedIssues;
            AvatarUrl = avatarUrl;
            BuildCoverageRegex = buildCoverageRegex;
            BuildGitStrategy = buildGitStrategy;
            BuildTimeout = buildTimeout;
            BuildsAccessLevel = buildsAccessLevel;
            CiConfigPath = ciConfigPath;
            CiDefaultGitDepth = ciDefaultGitDepth;
            CiDeletePipelinesInSeconds = ciDeletePipelinesInSeconds;
            CiForwardDeploymentEnabled = ciForwardDeploymentEnabled;
            CiIdTokenSubClaimComponents = ciIdTokenSubClaimComponents;
            CiPipelineVariablesMinimumOverrideRole = ciPipelineVariablesMinimumOverrideRole;
            CiRestrictPipelineCancellationRole = ciRestrictPipelineCancellationRole;
            ContainerExpirationPolicies = containerExpirationPolicies;
            ContainerRegistryAccessLevel = containerRegistryAccessLevel;
            ContainerRegistryEnabled = containerRegistryEnabled;
            CreatedAt = createdAt;
            CreatorId = creatorId;
            CustomAttributes = customAttributes;
            DefaultBranch = defaultBranch;
            Description = description;
            EmailsEnabled = emailsEnabled;
            EmptyRepo = emptyRepo;
            EnvironmentsAccessLevel = environmentsAccessLevel;
            ExternalAuthorizationClassificationLabel = externalAuthorizationClassificationLabel;
            FeatureFlagsAccessLevel = featureFlagsAccessLevel;
            ForkedFromProjects = forkedFromProjects;
            ForkingAccessLevel = forkingAccessLevel;
            ForksCount = forksCount;
            GroupRunnersEnabled = groupRunnersEnabled;
            HttpUrlToRepo = httpUrlToRepo;
            Id = id;
            ImportError = importError;
            ImportStatus = importStatus;
            ImportUrl = importUrl;
            InfrastructureAccessLevel = infrastructureAccessLevel;
            IssuesAccessLevel = issuesAccessLevel;
            IssuesEnabled = issuesEnabled;
            JobsEnabled = jobsEnabled;
            KeepLatestArtifact = keepLatestArtifact;
            LastActivityAt = lastActivityAt;
            LfsEnabled = lfsEnabled;
            MergeCommitTemplate = mergeCommitTemplate;
            MergeMethod = mergeMethod;
            MergePipelinesEnabled = mergePipelinesEnabled;
            MergeRequestsAccessLevel = mergeRequestsAccessLevel;
            MergeRequestsEnabled = mergeRequestsEnabled;
            MergeTrainsEnabled = mergeTrainsEnabled;
            Mirror = mirror;
            MirrorOverwritesDivergedBranches = mirrorOverwritesDivergedBranches;
            MirrorTriggerBuilds = mirrorTriggerBuilds;
            MirrorUserId = mirrorUserId;
            ModelExperimentsAccessLevel = modelExperimentsAccessLevel;
            ModelRegistryAccessLevel = modelRegistryAccessLevel;
            MonitorAccessLevel = monitorAccessLevel;
            Name = name;
            NameWithNamespace = nameWithNamespace;
            Namespaces = namespaces;
            OnlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
            OnlyAllowMergeIfPipelineSucceeds = onlyAllowMergeIfPipelineSucceeds;
            OnlyMirrorProtectedBranches = onlyMirrorProtectedBranches;
            OpenIssuesCount = openIssuesCount;
            Owners = owners;
            PackagesEnabled = packagesEnabled;
            Path = path;
            PathWithNamespace = pathWithNamespace;
            Permissions = permissions;
            PreventMergeWithoutJiraIssue = preventMergeWithoutJiraIssue;
            PublicBuilds = publicBuilds;
            ReadmeUrl = readmeUrl;
            ReleasesAccessLevel = releasesAccessLevel;
            RepositoryAccessLevel = repositoryAccessLevel;
            RepositoryStorage = repositoryStorage;
            RequestAccessEnabled = requestAccessEnabled;
            RequirementsAccessLevel = requirementsAccessLevel;
            ResolveOutdatedDiffDiscussions = resolveOutdatedDiffDiscussions;
            RestrictUserDefinedVariables = restrictUserDefinedVariables;
            RunnersToken = runnersToken;
            SecurityAndComplianceAccessLevel = securityAndComplianceAccessLevel;
            SharedRunnersEnabled = sharedRunnersEnabled;
            SharedWithGroups = sharedWithGroups;
            SnippetsAccessLevel = snippetsAccessLevel;
            SnippetsEnabled = snippetsEnabled;
            SquashCommitTemplate = squashCommitTemplate;
            SshUrlToRepo = sshUrlToRepo;
            StarCount = starCount;
            Statistics = statistics;
            SuggestionCommitMessage = suggestionCommitMessage;
            TagLists = tagLists;
            Topics = topics;
            Visibility = visibility;
            WebUrl = webUrl;
            WikiAccessLevel = wikiAccessLevel;
            WikiEnabled = wikiEnabled;
        }
    }
}
