// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Outputs
{

    [OutputType]
    public sealed class GetProjectIssuesIssueResult
    {
        public readonly ImmutableArray<int> AssigneeIds;
        public readonly int AuthorId;
        public readonly string ClosedAt;
        public readonly int ClosedByUserId;
        public readonly bool Confidential;
        public readonly string CreatedAt;
        public readonly string Description;
        public readonly bool DiscussionLocked;
        public readonly string DiscussionToResolve;
        public readonly int Downvotes;
        public readonly string DueDate;
        public readonly int EpicId;
        public readonly int EpicIssueId;
        public readonly string ExternalId;
        public readonly string HumanTimeEstimate;
        public readonly string HumanTotalTimeSpent;
        public readonly int Iid;
        public readonly int IssueId;
        public readonly int IssueLinkId;
        public readonly string IssueType;
        public readonly ImmutableArray<string> Labels;
        public readonly ImmutableDictionary<string, string> Links;
        public readonly int MergeRequestToResolveDiscussionsOf;
        public readonly int MergeRequestsCount;
        public readonly int MilestoneId;
        public readonly int MovedToId;
        public readonly string Project;
        public readonly ImmutableDictionary<string, string> References;
        public readonly string State;
        public readonly bool Subscribed;
        public readonly ImmutableArray<Outputs.GetProjectIssuesIssueTaskCompletionStatusResult> TaskCompletionStatuses;
        public readonly int TimeEstimate;
        public readonly string Title;
        public readonly int TotalTimeSpent;
        public readonly string UpdatedAt;
        public readonly int Upvotes;
        public readonly int UserNotesCount;
        public readonly string WebUrl;
        public readonly int Weight;

        [OutputConstructor]
        private GetProjectIssuesIssueResult(
            ImmutableArray<int> assigneeIds,

            int authorId,

            string closedAt,

            int closedByUserId,

            bool confidential,

            string createdAt,

            string description,

            bool discussionLocked,

            string discussionToResolve,

            int downvotes,

            string dueDate,

            int epicId,

            int epicIssueId,

            string externalId,

            string humanTimeEstimate,

            string humanTotalTimeSpent,

            int iid,

            int issueId,

            int issueLinkId,

            string issueType,

            ImmutableArray<string> labels,

            ImmutableDictionary<string, string> links,

            int mergeRequestToResolveDiscussionsOf,

            int mergeRequestsCount,

            int milestoneId,

            int movedToId,

            string project,

            ImmutableDictionary<string, string> references,

            string state,

            bool subscribed,

            ImmutableArray<Outputs.GetProjectIssuesIssueTaskCompletionStatusResult> taskCompletionStatuses,

            int timeEstimate,

            string title,

            int totalTimeSpent,

            string updatedAt,

            int upvotes,

            int userNotesCount,

            string webUrl,

            int weight)
        {
            AssigneeIds = assigneeIds;
            AuthorId = authorId;
            ClosedAt = closedAt;
            ClosedByUserId = closedByUserId;
            Confidential = confidential;
            CreatedAt = createdAt;
            Description = description;
            DiscussionLocked = discussionLocked;
            DiscussionToResolve = discussionToResolve;
            Downvotes = downvotes;
            DueDate = dueDate;
            EpicId = epicId;
            EpicIssueId = epicIssueId;
            ExternalId = externalId;
            HumanTimeEstimate = humanTimeEstimate;
            HumanTotalTimeSpent = humanTotalTimeSpent;
            Iid = iid;
            IssueId = issueId;
            IssueLinkId = issueLinkId;
            IssueType = issueType;
            Labels = labels;
            Links = links;
            MergeRequestToResolveDiscussionsOf = mergeRequestToResolveDiscussionsOf;
            MergeRequestsCount = mergeRequestsCount;
            MilestoneId = milestoneId;
            MovedToId = movedToId;
            Project = project;
            References = references;
            State = state;
            Subscribed = subscribed;
            TaskCompletionStatuses = taskCompletionStatuses;
            TimeEstimate = timeEstimate;
            Title = title;
            TotalTimeSpent = totalTimeSpent;
            UpdatedAt = updatedAt;
            Upvotes = upvotes;
            UserNotesCount = userNotesCount;
            WebUrl = webUrl;
            Weight = weight;
        }
    }
}
