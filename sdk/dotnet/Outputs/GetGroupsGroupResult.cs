// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GitLab.Outputs
{

    [OutputType]
    public sealed class GetGroupsGroupResult
    {
        /// <summary>
        /// Whether developers and maintainers can push to the applicable default branch. Will be removed in 19.0.
        /// </summary>
        public readonly int DefaultBranchProtection;
        /// <summary>
        /// The description of the group.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The full name of the group.
        /// </summary>
        public readonly string FullName;
        /// <summary>
        /// The full path of the group.
        /// </summary>
        public readonly string FullPath;
        /// <summary>
        /// The ID of the group.
        /// </summary>
        public readonly int GroupId;
        /// <summary>
        /// Is LFS enabled for projects in this group.
        /// </summary>
        public readonly bool LfsEnabled;
        /// <summary>
        /// The name of this group.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of the parent group.
        /// </summary>
        public readonly int ParentId;
        /// <summary>
        /// The path of the group.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// When enabled, users can not fork projects from this group to external namespaces.
        /// </summary>
        public readonly bool PreventForkingOutsideGroup;
        /// <summary>
        /// Is request for access enabled to the group.
        /// </summary>
        public readonly bool RequestAccessEnabled;
        /// <summary>
        /// The group level registration token to use during runner setup.
        /// </summary>
        public readonly string RunnersToken;
        /// <summary>
        /// Enable or disable shared runners for a group's subgroups and projects. Valid values are: `Enabled`, `DisabledAndOverridable`, `DisabledAndUnoverridable`, `DisabledWithOverride`.
        /// </summary>
        public readonly string SharedRunnersSetting;
        /// <summary>
        /// Visibility level of the group. Possible values are `Private`, `Internal`, `Public`.
        /// </summary>
        public readonly string VisibilityLevel;
        /// <summary>
        /// Web URL of the group.
        /// </summary>
        public readonly string WebUrl;
        /// <summary>
        /// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `Disabled`, `Private`, `Enabled`.
        /// </summary>
        public readonly string WikiAccessLevel;

        [OutputConstructor]
        private GetGroupsGroupResult(
            int defaultBranchProtection,

            string description,

            string fullName,

            string fullPath,

            int groupId,

            bool lfsEnabled,

            string name,

            int parentId,

            string path,

            bool preventForkingOutsideGroup,

            bool requestAccessEnabled,

            string runnersToken,

            string sharedRunnersSetting,

            string visibilityLevel,

            string webUrl,

            string wikiAccessLevel)
        {
            DefaultBranchProtection = defaultBranchProtection;
            Description = description;
            FullName = fullName;
            FullPath = fullPath;
            GroupId = groupId;
            LfsEnabled = lfsEnabled;
            Name = name;
            ParentId = parentId;
            Path = path;
            PreventForkingOutsideGroup = preventForkingOutsideGroup;
            RequestAccessEnabled = requestAccessEnabled;
            RunnersToken = runnersToken;
            SharedRunnersSetting = sharedRunnersSetting;
            VisibilityLevel = visibilityLevel;
            WebUrl = webUrl;
            WikiAccessLevel = wikiAccessLevel;
        }
    }
}
