# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetGroupSamlLinksResult',
    'AwaitableGetGroupSamlLinksResult',
    'get_group_saml_links',
    'get_group_saml_links_output',
]

@pulumi.output_type
class GetGroupSamlLinksResult:
    """
    A collection of values returned by getGroupSamlLinks.
    """
    def __init__(__self__, group=None, id=None, saml_links=None):
        if group and not isinstance(group, str):
            raise TypeError("Expected argument 'group' to be a str")
        pulumi.set(__self__, "group", group)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if saml_links and not isinstance(saml_links, list):
            raise TypeError("Expected argument 'saml_links' to be a list")
        pulumi.set(__self__, "saml_links", saml_links)

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        The name or id of the group.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="samlLinks")
    def saml_links(self) -> Sequence['outputs.GetGroupSamlLinksSamlLinkResult']:
        """
        The list of group SAML links returned by the search
        """
        return pulumi.get(self, "saml_links")


class AwaitableGetGroupSamlLinksResult(GetGroupSamlLinksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupSamlLinksResult(
            group=self.group,
            id=self.id,
            saml_links=self.saml_links)


def get_group_saml_links(group: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupSamlLinksResult:
    """
    The `get_group_saml_links` data source retrieves all SAML links for a specified group.

    **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/saml/#saml-group-links)

    ## Example Usage


    :param _builtins.str group: The name or id of the group.
    """
    __args__ = dict()
    __args__['group'] = group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gitlab:index/getGroupSamlLinks:getGroupSamlLinks', __args__, opts=opts, typ=GetGroupSamlLinksResult).value

    return AwaitableGetGroupSamlLinksResult(
        group=pulumi.get(__ret__, 'group'),
        id=pulumi.get(__ret__, 'id'),
        saml_links=pulumi.get(__ret__, 'saml_links'))
def get_group_saml_links_output(group: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupSamlLinksResult]:
    """
    The `get_group_saml_links` data source retrieves all SAML links for a specified group.

    **Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/api/saml/#saml-group-links)

    ## Example Usage


    :param _builtins.str group: The name or id of the group.
    """
    __args__ = dict()
    __args__['group'] = group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gitlab:index/getGroupSamlLinks:getGroupSamlLinks', __args__, opts=opts, typ=GetGroupSamlLinksResult)
    return __ret__.apply(lambda __response__: GetGroupSamlLinksResult(
        group=pulumi.get(__response__, 'group'),
        id=pulumi.get(__response__, 'id'),
        saml_links=pulumi.get(__response__, 'saml_links')))
