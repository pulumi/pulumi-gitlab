# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ApplicationSettingsArgs', 'ApplicationSettings']

@pulumi.input_type
class ApplicationSettingsArgs:
    def __init__(__self__, *,
                 abuse_notification_email: Optional[pulumi.Input[str]] = None,
                 admin_mode: Optional[pulumi.Input[bool]] = None,
                 after_sign_out_path: Optional[pulumi.Input[str]] = None,
                 after_sign_up_text: Optional[pulumi.Input[str]] = None,
                 akismet_api_key: Optional[pulumi.Input[str]] = None,
                 akismet_enabled: Optional[pulumi.Input[bool]] = None,
                 allow_group_owners_to_manage_ldap: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_system_hooks: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_web_hooks_and_services: Optional[pulumi.Input[bool]] = None,
                 archive_builds_in_human_readable: Optional[pulumi.Input[str]] = None,
                 asset_proxy_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 asset_proxy_enabled: Optional[pulumi.Input[bool]] = None,
                 asset_proxy_secret_key: Optional[pulumi.Input[str]] = None,
                 asset_proxy_url: Optional[pulumi.Input[str]] = None,
                 authorized_keys_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_devops_domain: Optional[pulumi.Input[str]] = None,
                 auto_devops_enabled: Optional[pulumi.Input[bool]] = None,
                 automatic_purchased_storage_allocation: Optional[pulumi.Input[bool]] = None,
                 can_create_group: Optional[pulumi.Input[bool]] = None,
                 check_namespace_plan: Optional[pulumi.Input[bool]] = None,
                 commit_email_hostname: Optional[pulumi.Input[str]] = None,
                 container_expiration_policies_enable_historic_entries: Optional[pulumi.Input[bool]] = None,
                 container_registry_cleanup_tags_service_max_list_size: Optional[pulumi.Input[int]] = None,
                 container_registry_delete_tags_service_timeout: Optional[pulumi.Input[int]] = None,
                 container_registry_expiration_policies_caching: Optional[pulumi.Input[bool]] = None,
                 container_registry_expiration_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 container_registry_token_expire_delay: Optional[pulumi.Input[int]] = None,
                 deactivate_dormant_users: Optional[pulumi.Input[bool]] = None,
                 default_artifacts_expire_in: Optional[pulumi.Input[str]] = None,
                 default_branch_name: Optional[pulumi.Input[str]] = None,
                 default_branch_protection: Optional[pulumi.Input[int]] = None,
                 default_ci_config_path: Optional[pulumi.Input[str]] = None,
                 default_group_visibility: Optional[pulumi.Input[str]] = None,
                 default_project_creation: Optional[pulumi.Input[int]] = None,
                 default_project_visibility: Optional[pulumi.Input[str]] = None,
                 default_projects_limit: Optional[pulumi.Input[int]] = None,
                 default_snippet_visibility: Optional[pulumi.Input[str]] = None,
                 delayed_group_deletion: Optional[pulumi.Input[bool]] = None,
                 delayed_project_deletion: Optional[pulumi.Input[bool]] = None,
                 delete_inactive_projects: Optional[pulumi.Input[bool]] = None,
                 deletion_adjourned_period: Optional[pulumi.Input[int]] = None,
                 diff_max_files: Optional[pulumi.Input[int]] = None,
                 diff_max_lines: Optional[pulumi.Input[int]] = None,
                 diff_max_patch_bytes: Optional[pulumi.Input[int]] = None,
                 disable_feed_token: Optional[pulumi.Input[bool]] = None,
                 disabled_oauth_sign_in_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_rebinding_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain_denylist_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_denylists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 eks_access_key_id: Optional[pulumi.Input[str]] = None,
                 eks_account_id: Optional[pulumi.Input[str]] = None,
                 eks_integration_enabled: Optional[pulumi.Input[bool]] = None,
                 eks_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_aws_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_region: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_indexed_field_length_limit: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexed_file_size_limit_kb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_limit_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_max_bulk_concurrency: Optional[pulumi.Input[int]] = None,
                 elasticsearch_max_bulk_size_mb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_namespace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_password: Optional[pulumi.Input[str]] = None,
                 elasticsearch_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_search: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_username: Optional[pulumi.Input[str]] = None,
                 email_additional_text: Optional[pulumi.Input[str]] = None,
                 email_author_in_body: Optional[pulumi.Input[bool]] = None,
                 enabled_git_access_protocol: Optional[pulumi.Input[str]] = None,
                 enforce_namespace_storage_limit: Optional[pulumi.Input[bool]] = None,
                 enforce_terms: Optional[pulumi.Input[bool]] = None,
                 external_auth_client_cert: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key_pass: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_default_label: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_enabled: Optional[pulumi.Input[bool]] = None,
                 external_authorization_service_timeout: Optional[pulumi.Input[float]] = None,
                 external_authorization_service_url: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_timeout: Optional[pulumi.Input[int]] = None,
                 external_pipeline_validation_service_token: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_url: Optional[pulumi.Input[str]] = None,
                 file_template_project_id: Optional[pulumi.Input[int]] = None,
                 first_day_of_week: Optional[pulumi.Input[int]] = None,
                 geo_node_allowed_ips: Optional[pulumi.Input[str]] = None,
                 geo_status_timeout: Optional[pulumi.Input[int]] = None,
                 git_rate_limit_users_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_two_factor_session_expiry: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_default: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_fast: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_medium: Optional[pulumi.Input[int]] = None,
                 grafana_enabled: Optional[pulumi.Input[bool]] = None,
                 grafana_url: Optional[pulumi.Input[str]] = None,
                 gravatar_enabled: Optional[pulumi.Input[bool]] = None,
                 group_owners_can_manage_default_branch_protection: Optional[pulumi.Input[bool]] = None,
                 hashed_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 help_page_hide_commercial_content: Optional[pulumi.Input[bool]] = None,
                 help_page_support_url: Optional[pulumi.Input[str]] = None,
                 help_page_text: Optional[pulumi.Input[str]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 hide_third_party_offers: Optional[pulumi.Input[bool]] = None,
                 home_page_url: Optional[pulumi.Input[str]] = None,
                 housekeeping_enabled: Optional[pulumi.Input[bool]] = None,
                 housekeeping_full_repack_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_gc_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_incremental_repack_period: Optional[pulumi.Input[int]] = None,
                 html_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 import_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 in_product_marketing_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 inactive_projects_delete_after_months: Optional[pulumi.Input[int]] = None,
                 inactive_projects_min_size_mb: Optional[pulumi.Input[int]] = None,
                 inactive_projects_send_warning_email_after_months: Optional[pulumi.Input[int]] = None,
                 invisible_captcha_enabled: Optional[pulumi.Input[bool]] = None,
                 issues_create_limit: Optional[pulumi.Input[int]] = None,
                 keep_latest_artifact: Optional[pulumi.Input[bool]] = None,
                 local_markdown_version: Optional[pulumi.Input[int]] = None,
                 mailgun_events_enabled: Optional[pulumi.Input[bool]] = None,
                 mailgun_signing_key: Optional[pulumi.Input[str]] = None,
                 maintenance_mode: Optional[pulumi.Input[bool]] = None,
                 maintenance_mode_message: Optional[pulumi.Input[str]] = None,
                 max_artifacts_size: Optional[pulumi.Input[int]] = None,
                 max_attachment_size: Optional[pulumi.Input[int]] = None,
                 max_export_size: Optional[pulumi.Input[int]] = None,
                 max_import_size: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads_within_time_period: Optional[pulumi.Input[int]] = None,
                 max_pages_size: Optional[pulumi.Input[int]] = None,
                 max_personal_access_token_lifetime: Optional[pulumi.Input[int]] = None,
                 max_ssh_key_lifetime: Optional[pulumi.Input[int]] = None,
                 metrics_method_call_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_available: Optional[pulumi.Input[bool]] = None,
                 mirror_capacity_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_max_capacity: Optional[pulumi.Input[int]] = None,
                 mirror_max_delay: Optional[pulumi.Input[int]] = None,
                 npm_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 outbound_local_requests_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 package_registry_cleanup_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 pages_domain_verification_enabled: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_git: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_web: Optional[pulumi.Input[bool]] = None,
                 password_lowercase_required: Optional[pulumi.Input[bool]] = None,
                 password_number_required: Optional[pulumi.Input[bool]] = None,
                 password_symbol_required: Optional[pulumi.Input[bool]] = None,
                 password_uppercase_required: Optional[pulumi.Input[bool]] = None,
                 performance_bar_allowed_group_path: Optional[pulumi.Input[str]] = None,
                 personal_access_token_prefix: Optional[pulumi.Input[str]] = None,
                 pipeline_limit_per_project_user_sha: Optional[pulumi.Input[int]] = None,
                 plantuml_enabled: Optional[pulumi.Input[bool]] = None,
                 plantuml_url: Optional[pulumi.Input[str]] = None,
                 polling_interval_multiplier: Optional[pulumi.Input[float]] = None,
                 project_export_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 protected_ci_variables: Optional[pulumi.Input[bool]] = None,
                 push_event_activities_limit: Optional[pulumi.Input[int]] = None,
                 push_event_hooks_limit: Optional[pulumi.Input[int]] = None,
                 pypi_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 rate_limiting_response_text: Optional[pulumi.Input[str]] = None,
                 raw_blob_request_limit: Optional[pulumi.Input[int]] = None,
                 recaptcha_enabled: Optional[pulumi.Input[bool]] = None,
                 recaptcha_private_key: Optional[pulumi.Input[str]] = None,
                 recaptcha_site_key: Optional[pulumi.Input[str]] = None,
                 receive_max_input_size: Optional[pulumi.Input[int]] = None,
                 repository_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 repository_size_limit: Optional[pulumi.Input[int]] = None,
                 repository_storages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repository_storages_weighted: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 require_admin_approval_after_user_signup: Optional[pulumi.Input[bool]] = None,
                 require_two_factor_authentication: Optional[pulumi.Input[bool]] = None,
                 restricted_visibility_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 search_rate_limit: Optional[pulumi.Input[int]] = None,
                 search_rate_limit_unauthenticated: Optional[pulumi.Input[int]] = None,
                 send_user_confirmation_email: Optional[pulumi.Input[bool]] = None,
                 session_expire_delay: Optional[pulumi.Input[int]] = None,
                 shared_runners_enabled: Optional[pulumi.Input[bool]] = None,
                 shared_runners_minutes: Optional[pulumi.Input[int]] = None,
                 shared_runners_text: Optional[pulumi.Input[str]] = None,
                 sidekiq_job_limiter_compression_threshold_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_limit_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_mode: Optional[pulumi.Input[str]] = None,
                 sign_in_text: Optional[pulumi.Input[str]] = None,
                 signup_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_id: Optional[pulumi.Input[str]] = None,
                 slack_app_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_signing_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_verification_token: Optional[pulumi.Input[str]] = None,
                 snippet_size_limit: Optional[pulumi.Input[int]] = None,
                 snowplow_app_id: Optional[pulumi.Input[str]] = None,
                 snowplow_collector_hostname: Optional[pulumi.Input[str]] = None,
                 snowplow_cookie_domain: Optional[pulumi.Input[str]] = None,
                 snowplow_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_public_only: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_url: Optional[pulumi.Input[str]] = None,
                 spam_check_api_key: Optional[pulumi.Input[str]] = None,
                 spam_check_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 spam_check_endpoint_url: Optional[pulumi.Input[str]] = None,
                 suggest_pipeline_enabled: Optional[pulumi.Input[bool]] = None,
                 terminal_max_session_time: Optional[pulumi.Input[int]] = None,
                 terms: Optional[pulumi.Input[str]] = None,
                 throttle_authenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 time_tracking_limit_to_hours: Optional[pulumi.Input[bool]] = None,
                 two_factor_grace_period: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_enabled: Optional[pulumi.Input[bool]] = None,
                 unique_ips_limit_per_user: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_time_window: Optional[pulumi.Input[int]] = None,
                 usage_ping_enabled: Optional[pulumi.Input[bool]] = None,
                 user_deactivation_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 user_default_external: Optional[pulumi.Input[bool]] = None,
                 user_default_internal_regex: Optional[pulumi.Input[str]] = None,
                 user_oauth_applications: Optional[pulumi.Input[bool]] = None,
                 user_show_add_ssh_key_message: Optional[pulumi.Input[bool]] = None,
                 version_check_enabled: Optional[pulumi.Input[bool]] = None,
                 web_ide_clientside_preview_enabled: Optional[pulumi.Input[bool]] = None,
                 whats_new_variant: Optional[pulumi.Input[str]] = None,
                 wiki_page_max_content_bytes: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ApplicationSettings resource.
        :param pulumi.Input[str] abuse_notification_email: If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        :param pulumi.Input[bool] admin_mode: Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        :param pulumi.Input[str] after_sign_out_path: Where to redirect users after logout.
        :param pulumi.Input[str] after_sign_up_text: Text shown to the user after signing up.
        :param pulumi.Input[str] akismet_api_key: API key for Akismet spam protection.
        :param pulumi.Input[bool] akismet_enabled: (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        :param pulumi.Input[bool] allow_group_owners_to_manage_ldap: Set to true to allow group owners to manage LDAP.
        :param pulumi.Input[bool] allow_local_requests_from_system_hooks: Allow requests to the local network from system hooks.
        :param pulumi.Input[bool] allow_local_requests_from_web_hooks_and_services: Allow requests to the local network from web hooks and services.
        :param pulumi.Input[str] archive_builds_in_human_readable: Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] asset_proxy_allowlists: Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] asset_proxy_enabled: (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_secret_key: Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_url: URL of the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] authorized_keys_enabled: By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        :param pulumi.Input[str] auto_devops_domain: Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        :param pulumi.Input[bool] auto_devops_enabled: Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        :param pulumi.Input[bool] automatic_purchased_storage_allocation: Enabling this permits automatic allocation of purchased storage in a namespace.
        :param pulumi.Input[bool] can_create_group: Indicates whether users can create top-level groups. Introduced in GitLab 15.5.
        :param pulumi.Input[bool] check_namespace_plan: Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        :param pulumi.Input[str] commit_email_hostname: Custom hostname (for private commit emails).
        :param pulumi.Input[bool] container_expiration_policies_enable_historic_entries: Enable cleanup policies for all projects.
        :param pulumi.Input[int] container_registry_cleanup_tags_service_max_list_size: The maximum number of tags that can be deleted in a single execution of cleanup policies.
        :param pulumi.Input[int] container_registry_delete_tags_service_timeout: The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        :param pulumi.Input[bool] container_registry_expiration_policies_caching: Caching during the execution of cleanup policies.
        :param pulumi.Input[int] container_registry_expiration_policies_worker_capacity: Number of workers for cleanup policies.
        :param pulumi.Input[int] container_registry_token_expire_delay: Container Registry token duration in minutes.
        :param pulumi.Input[bool] deactivate_dormant_users: Enable automatic deactivation of dormant users.
        :param pulumi.Input[str] default_artifacts_expire_in: Set the default expiration time for each job’s artifacts.
        :param pulumi.Input[str] default_branch_name: Instance-level custom initial branch name (introduced in GitLab 13.2).
        :param pulumi.Input[int] default_branch_protection: Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        :param pulumi.Input[str] default_ci_config_path: Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        :param pulumi.Input[str] default_group_visibility: What visibility level new groups receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_project_creation: Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        :param pulumi.Input[str] default_project_visibility: What visibility level new projects receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_projects_limit: Project limit per user.
        :param pulumi.Input[str] default_snippet_visibility: What visibility level new snippets receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[bool] delayed_group_deletion: Enable delayed group deletion. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        :param pulumi.Input[bool] delayed_project_deletion: Enable delayed project deletion by default in new groups. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        :param pulumi.Input[bool] delete_inactive_projects: Enable inactive project deletion feature. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion).
        :param pulumi.Input[int] deletion_adjourned_period: The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        :param pulumi.Input[int] diff_max_files: Maximum files in a diff.
        :param pulumi.Input[int] diff_max_lines: Maximum lines in a diff.
        :param pulumi.Input[int] diff_max_patch_bytes: Maximum diff patch size, in bytes.
        :param pulumi.Input[bool] disable_feed_token: Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_oauth_sign_in_sources: Disabled OAuth sign-in sources.
        :param pulumi.Input[bool] dns_rebinding_protection_enabled: Enforce DNS rebinding attack protection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_allowlists: Force people to use only corporate emails for sign-up. Null means there is no restriction.
        :param pulumi.Input[bool] domain_denylist_enabled: (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_denylists: Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        :param pulumi.Input[int] dsa_key_restriction: The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
        :param pulumi.Input[int] ecdsa_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
        :param pulumi.Input[int] ecdsa_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
        :param pulumi.Input[int] ed25519_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
        :param pulumi.Input[int] ed25519_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
        :param pulumi.Input[str] eks_access_key_id: AWS IAM access key ID.
        :param pulumi.Input[str] eks_account_id: Amazon account ID.
        :param pulumi.Input[bool] eks_integration_enabled: Enable integration with Amazon EKS.
        :param pulumi.Input[str] eks_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[bool] elasticsearch_aws: Enable the use of AWS hosted Elasticsearch.
        :param pulumi.Input[str] elasticsearch_aws_access_key: AWS IAM access key.
        :param pulumi.Input[str] elasticsearch_aws_region: The AWS region the Elasticsearch domain is configured.
        :param pulumi.Input[str] elasticsearch_aws_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[int] elasticsearch_indexed_field_length_limit: Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        :param pulumi.Input[int] elasticsearch_indexed_file_size_limit_kb: Maximum size of repository and wiki files that are indexed by Elasticsearch.
        :param pulumi.Input[bool] elasticsearch_indexing: Enable Elasticsearch indexing.
        :param pulumi.Input[bool] elasticsearch_limit_indexing: Limit Elasticsearch to index certain namespaces and projects.
        :param pulumi.Input[int] elasticsearch_max_bulk_concurrency: Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        :param pulumi.Input[int] elasticsearch_max_bulk_size_mb: Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_namespace_ids: The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[str] elasticsearch_password: The password of your Elasticsearch instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_project_ids: The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[bool] elasticsearch_search: Enable Elasticsearch search.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_urls: The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        :param pulumi.Input[str] elasticsearch_username: The username of your Elasticsearch instance.
        :param pulumi.Input[str] email_additional_text: Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        :param pulumi.Input[bool] email_author_in_body: Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        :param pulumi.Input[str] enabled_git_access_protocol: Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        :param pulumi.Input[bool] enforce_namespace_storage_limit: Enabling this permits enforcement of namespace storage limits.
        :param pulumi.Input[bool] enforce_terms: (If enabled, requires: terms) Enforce application ToS to all users.
        :param pulumi.Input[str] external_auth_client_cert: (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        :param pulumi.Input[str] external_auth_client_key: Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        :param pulumi.Input[str] external_auth_client_key_pass: Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        :param pulumi.Input[str] external_authorization_service_default_label: The default classification label to use when requesting authorization and no classification label has been specified on the project.
        :param pulumi.Input[bool] external_authorization_service_enabled: (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        :param pulumi.Input[float] external_authorization_service_timeout: The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        :param pulumi.Input[str] external_authorization_service_url: URL to which authorization requests are directed.
        :param pulumi.Input[int] external_pipeline_validation_service_timeout: How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        :param pulumi.Input[str] external_pipeline_validation_service_token: Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        :param pulumi.Input[str] external_pipeline_validation_service_url: URL to use for pipeline validation requests.
        :param pulumi.Input[int] file_template_project_id: The ID of a project to load custom file templates from.
        :param pulumi.Input[int] first_day_of_week: Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
        :param pulumi.Input[str] geo_node_allowed_ips: Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        :param pulumi.Input[int] geo_status_timeout: The amount of seconds after which a request to get a secondary node status times out.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] git_rate_limit_users_allowlists: List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Introduced in GitLab 15.2.
        :param pulumi.Input[int] git_two_factor_session_expiry: Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        :param pulumi.Input[int] gitaly_timeout_default: Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_fast: Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_medium: Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        :param pulumi.Input[bool] grafana_enabled: Enable Grafana.
        :param pulumi.Input[str] grafana_url: Grafana URL.
        :param pulumi.Input[bool] gravatar_enabled: Enable Gravatar.
        :param pulumi.Input[bool] group_owners_can_manage_default_branch_protection: Prevent overrides of default branch protection.
        :param pulumi.Input[bool] hashed_storage_enabled: Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        :param pulumi.Input[bool] help_page_hide_commercial_content: Hide marketing-related entries from help.
        :param pulumi.Input[str] help_page_support_url: Alternate support URL for help page and help dropdown.
        :param pulumi.Input[str] help_page_text: Custom text displayed on the help page.
        :param pulumi.Input[str] help_text: GitLab server administrator information.
        :param pulumi.Input[bool] hide_third_party_offers: Do not display offers from third parties in GitLab.
        :param pulumi.Input[str] home_page_url: Redirect to this URL when not logged in.
        :param pulumi.Input[bool] housekeeping_enabled: (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        :param pulumi.Input[int] housekeeping_full_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[int] housekeeping_gc_period: Number of Git pushes after which git gc is run.
        :param pulumi.Input[int] housekeeping_incremental_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[bool] html_emails_enabled: Enable HTML emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] import_sources: Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `Project`, `gitea`, `manifest`
        :param pulumi.Input[bool] in_product_marketing_emails_enabled: Enable in-product marketing emails.
        :param pulumi.Input[int] inactive_projects_delete_after_months: If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_min_size_mb: If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_send_warning_email_after_months: If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[bool] invisible_captcha_enabled: Enable Invisible CAPTCHA spam detection during sign-up.
        :param pulumi.Input[int] issues_create_limit: Max number of issue creation requests per minute per user.
        :param pulumi.Input[bool] keep_latest_artifact: Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
        :param pulumi.Input[int] local_markdown_version: Increase this value when any cached Markdown should be invalidated.
        :param pulumi.Input[bool] mailgun_events_enabled: Enable Mailgun event receiver.
        :param pulumi.Input[str] mailgun_signing_key: The Mailgun HTTP webhook signing key for receiving events from webhook.
        :param pulumi.Input[bool] maintenance_mode: When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        :param pulumi.Input[str] maintenance_mode_message: Message displayed when instance is in maintenance mode.
        :param pulumi.Input[int] max_artifacts_size: Maximum artifacts size in MB.
        :param pulumi.Input[int] max_attachment_size: Limit attachment size in MB.
        :param pulumi.Input[int] max_export_size: Maximum export size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_import_size: Maximum import size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_number_of_repository_downloads: Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_number_of_repository_downloads_within_time_period: Reporting time period (in seconds). Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_pages_size: Maximum size of pages repositories in MB.
        :param pulumi.Input[int] max_personal_access_token_lifetime: Maximum allowable lifetime for access tokens in days.
        :param pulumi.Input[int] max_ssh_key_lifetime: Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        :param pulumi.Input[int] metrics_method_call_threshold: A method call is only tracked when it takes longer than the given amount of milliseconds.
        :param pulumi.Input[bool] mirror_available: Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        :param pulumi.Input[int] mirror_capacity_threshold: Minimum capacity to be available before scheduling more mirrors preemptively.
        :param pulumi.Input[int] mirror_max_capacity: Maximum number of mirrors that can be synchronizing at the same time.
        :param pulumi.Input[int] mirror_max_delay: Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        :param pulumi.Input[bool] npm_package_requests_forwarding: Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outbound_local_requests_whitelists: Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        :param pulumi.Input[int] package_registry_cleanup_policies_worker_capacity: Number of workers assigned to the packages cleanup policies.
        :param pulumi.Input[bool] pages_domain_verification_enabled: Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        :param pulumi.Input[bool] password_authentication_enabled_for_git: Enable authentication for Git over HTTP(S) via a GitLab account password.
        :param pulumi.Input[bool] password_authentication_enabled_for_web: Enable authentication for the web interface via a GitLab account password.
        :param pulumi.Input[bool] password_lowercase_required: Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_number_required: Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_symbol_required: Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_uppercase_required: Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[str] performance_bar_allowed_group_path: Path of the group that is allowed to toggle the performance bar.
        :param pulumi.Input[str] personal_access_token_prefix: Prefix for all generated personal access tokens.
        :param pulumi.Input[int] pipeline_limit_per_project_user_sha: Maximum number of pipeline creation requests per minute per user and commit.
        :param pulumi.Input[bool] plantuml_enabled: (If enabled, requires: plantuml_url) Enable PlantUML integration.
        :param pulumi.Input[str] plantuml_url: The PlantUML instance URL for integration.
        :param pulumi.Input[float] polling_interval_multiplier: Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        :param pulumi.Input[bool] project_export_enabled: Enable project export.
        :param pulumi.Input[bool] prometheus_metrics_enabled: Enable Prometheus metrics.
        :param pulumi.Input[bool] protected_ci_variables: CI/CD variables are protected by default.
        :param pulumi.Input[int] push_event_activities_limit: Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        :param pulumi.Input[int] push_event_hooks_limit: Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        :param pulumi.Input[bool] pypi_package_requests_forwarding: Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        :param pulumi.Input[str] rate_limiting_response_text: When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        :param pulumi.Input[int] raw_blob_request_limit: Max number of requests per minute for each raw path. To disable throttling set to 0.
        :param pulumi.Input[bool] recaptcha_enabled: (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        :param pulumi.Input[str] recaptcha_private_key: Private key for reCAPTCHA.
        :param pulumi.Input[str] recaptcha_site_key: Site key for reCAPTCHA.
        :param pulumi.Input[int] receive_max_input_size: Maximum push size (MB).
        :param pulumi.Input[bool] repository_checks_enabled: GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        :param pulumi.Input[int] repository_size_limit: Size limit per repository (MB).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repository_storages: (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] repository_storages_weighted: (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        :param pulumi.Input[bool] require_admin_approval_after_user_signup: When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        :param pulumi.Input[bool] require_two_factor_authentication: (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] restricted_visibility_levels: Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
        :param pulumi.Input[int] rsa_key_restriction: The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
        :param pulumi.Input[int] search_rate_limit: Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
        :param pulumi.Input[int] search_rate_limit_unauthenticated: Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
        :param pulumi.Input[bool] send_user_confirmation_email: Send confirmation email on sign-up.
        :param pulumi.Input[int] session_expire_delay: Session duration in minutes. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] shared_runners_enabled: (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        :param pulumi.Input[int] shared_runners_minutes: Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        :param pulumi.Input[str] shared_runners_text: Shared runners text.
        :param pulumi.Input[int] sidekiq_job_limiter_compression_threshold_bytes: The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
        :param pulumi.Input[int] sidekiq_job_limiter_limit_bytes: The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
        :param pulumi.Input[str] sidekiq_job_limiter_mode: track or compress. Sets the behavior for Sidekiq job size limits.
        :param pulumi.Input[str] sign_in_text: Text on the login page.
        :param pulumi.Input[bool] signup_enabled: Enable registration.
        :param pulumi.Input[bool] slack_app_enabled: (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        :param pulumi.Input[str] slack_app_id: The app ID of the Slack-app.
        :param pulumi.Input[str] slack_app_secret: The app secret of the Slack-app.
        :param pulumi.Input[str] slack_app_signing_secret: The signing secret of the Slack-app.
        :param pulumi.Input[str] slack_app_verification_token: The verification token of the Slack-app.
        :param pulumi.Input[int] snippet_size_limit: Max snippet content size in bytes.
        :param pulumi.Input[str] snowplow_app_id: The Snowplow site name / application ID. (for example, gitlab)
        :param pulumi.Input[str] snowplow_collector_hostname: The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        :param pulumi.Input[str] snowplow_cookie_domain: The Snowplow cookie domain. (for example, .gitlab.com)
        :param pulumi.Input[bool] snowplow_enabled: Enable snowplow tracking.
        :param pulumi.Input[bool] sourcegraph_enabled: Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
        :param pulumi.Input[bool] sourcegraph_public_only: Blocks Sourcegraph from being loaded on private and internal projects.
        :param pulumi.Input[str] sourcegraph_url: The Sourcegraph instance URL for integration.
        :param pulumi.Input[str] spam_check_api_key: API key used by GitLab for accessing the Spam Check service endpoint.
        :param pulumi.Input[bool] spam_check_endpoint_enabled: Enables spam checking using external Spam Check API endpoint.
        :param pulumi.Input[str] spam_check_endpoint_url: URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        :param pulumi.Input[bool] suggest_pipeline_enabled: Enable pipeline suggestion banner.
        :param pulumi.Input[int] terminal_max_session_time: Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        :param pulumi.Input[str] terms: (Required by: enforce_terms) Markdown content for the ToS.
        :param pulumi.Input[bool] throttle_authenticated_api_enabled: (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_api_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_api_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_authenticated_packages_api_enabled: (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_authenticated_web_enabled: (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_web_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_web_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_unauthenticated_api_enabled: (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_api_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_api_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] throttle_unauthenticated_packages_api_enabled: (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_unauthenticated_web_enabled: (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_web_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_web_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] time_tracking_limit_to_hours: Limit display of time tracking units to hours.
        :param pulumi.Input[int] two_factor_grace_period: Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        :param pulumi.Input[bool] unique_ips_limit_enabled: (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        :param pulumi.Input[int] unique_ips_limit_per_user: Maximum number of IPs per user.
        :param pulumi.Input[int] unique_ips_limit_time_window: How many seconds an IP is counted towards the limit.
        :param pulumi.Input[bool] usage_ping_enabled: Every week GitLab reports license usage back to GitLab, Inc.
        :param pulumi.Input[bool] user_deactivation_emails_enabled: Send an email to users upon account deactivation.
        :param pulumi.Input[bool] user_default_external: Newly registered users are external by default.
        :param pulumi.Input[str] user_default_internal_regex: Specify an email address regex pattern to identify default internal users.
        :param pulumi.Input[bool] user_oauth_applications: Allow users to register any application to use GitLab as an OAuth provider.
        :param pulumi.Input[bool] user_show_add_ssh_key_message: When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        :param pulumi.Input[bool] version_check_enabled: Let GitLab inform you when an update is available.
        :param pulumi.Input[bool] web_ide_clientside_preview_enabled: Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        :param pulumi.Input[str] whats_new_variant: What’s new variant, possible values: all*tiers, current*tier, and disabled.
        :param pulumi.Input[int] wiki_page_max_content_bytes: Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        """
        ApplicationSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abuse_notification_email=abuse_notification_email,
            admin_mode=admin_mode,
            after_sign_out_path=after_sign_out_path,
            after_sign_up_text=after_sign_up_text,
            akismet_api_key=akismet_api_key,
            akismet_enabled=akismet_enabled,
            allow_group_owners_to_manage_ldap=allow_group_owners_to_manage_ldap,
            allow_local_requests_from_system_hooks=allow_local_requests_from_system_hooks,
            allow_local_requests_from_web_hooks_and_services=allow_local_requests_from_web_hooks_and_services,
            archive_builds_in_human_readable=archive_builds_in_human_readable,
            asset_proxy_allowlists=asset_proxy_allowlists,
            asset_proxy_enabled=asset_proxy_enabled,
            asset_proxy_secret_key=asset_proxy_secret_key,
            asset_proxy_url=asset_proxy_url,
            authorized_keys_enabled=authorized_keys_enabled,
            auto_devops_domain=auto_devops_domain,
            auto_devops_enabled=auto_devops_enabled,
            automatic_purchased_storage_allocation=automatic_purchased_storage_allocation,
            can_create_group=can_create_group,
            check_namespace_plan=check_namespace_plan,
            commit_email_hostname=commit_email_hostname,
            container_expiration_policies_enable_historic_entries=container_expiration_policies_enable_historic_entries,
            container_registry_cleanup_tags_service_max_list_size=container_registry_cleanup_tags_service_max_list_size,
            container_registry_delete_tags_service_timeout=container_registry_delete_tags_service_timeout,
            container_registry_expiration_policies_caching=container_registry_expiration_policies_caching,
            container_registry_expiration_policies_worker_capacity=container_registry_expiration_policies_worker_capacity,
            container_registry_token_expire_delay=container_registry_token_expire_delay,
            deactivate_dormant_users=deactivate_dormant_users,
            default_artifacts_expire_in=default_artifacts_expire_in,
            default_branch_name=default_branch_name,
            default_branch_protection=default_branch_protection,
            default_ci_config_path=default_ci_config_path,
            default_group_visibility=default_group_visibility,
            default_project_creation=default_project_creation,
            default_project_visibility=default_project_visibility,
            default_projects_limit=default_projects_limit,
            default_snippet_visibility=default_snippet_visibility,
            delayed_group_deletion=delayed_group_deletion,
            delayed_project_deletion=delayed_project_deletion,
            delete_inactive_projects=delete_inactive_projects,
            deletion_adjourned_period=deletion_adjourned_period,
            diff_max_files=diff_max_files,
            diff_max_lines=diff_max_lines,
            diff_max_patch_bytes=diff_max_patch_bytes,
            disable_feed_token=disable_feed_token,
            disabled_oauth_sign_in_sources=disabled_oauth_sign_in_sources,
            dns_rebinding_protection_enabled=dns_rebinding_protection_enabled,
            domain_allowlists=domain_allowlists,
            domain_denylist_enabled=domain_denylist_enabled,
            domain_denylists=domain_denylists,
            dsa_key_restriction=dsa_key_restriction,
            ecdsa_key_restriction=ecdsa_key_restriction,
            ecdsa_sk_key_restriction=ecdsa_sk_key_restriction,
            ed25519_key_restriction=ed25519_key_restriction,
            ed25519_sk_key_restriction=ed25519_sk_key_restriction,
            eks_access_key_id=eks_access_key_id,
            eks_account_id=eks_account_id,
            eks_integration_enabled=eks_integration_enabled,
            eks_secret_access_key=eks_secret_access_key,
            elasticsearch_aws=elasticsearch_aws,
            elasticsearch_aws_access_key=elasticsearch_aws_access_key,
            elasticsearch_aws_region=elasticsearch_aws_region,
            elasticsearch_aws_secret_access_key=elasticsearch_aws_secret_access_key,
            elasticsearch_indexed_field_length_limit=elasticsearch_indexed_field_length_limit,
            elasticsearch_indexed_file_size_limit_kb=elasticsearch_indexed_file_size_limit_kb,
            elasticsearch_indexing=elasticsearch_indexing,
            elasticsearch_limit_indexing=elasticsearch_limit_indexing,
            elasticsearch_max_bulk_concurrency=elasticsearch_max_bulk_concurrency,
            elasticsearch_max_bulk_size_mb=elasticsearch_max_bulk_size_mb,
            elasticsearch_namespace_ids=elasticsearch_namespace_ids,
            elasticsearch_password=elasticsearch_password,
            elasticsearch_project_ids=elasticsearch_project_ids,
            elasticsearch_search=elasticsearch_search,
            elasticsearch_urls=elasticsearch_urls,
            elasticsearch_username=elasticsearch_username,
            email_additional_text=email_additional_text,
            email_author_in_body=email_author_in_body,
            enabled_git_access_protocol=enabled_git_access_protocol,
            enforce_namespace_storage_limit=enforce_namespace_storage_limit,
            enforce_terms=enforce_terms,
            external_auth_client_cert=external_auth_client_cert,
            external_auth_client_key=external_auth_client_key,
            external_auth_client_key_pass=external_auth_client_key_pass,
            external_authorization_service_default_label=external_authorization_service_default_label,
            external_authorization_service_enabled=external_authorization_service_enabled,
            external_authorization_service_timeout=external_authorization_service_timeout,
            external_authorization_service_url=external_authorization_service_url,
            external_pipeline_validation_service_timeout=external_pipeline_validation_service_timeout,
            external_pipeline_validation_service_token=external_pipeline_validation_service_token,
            external_pipeline_validation_service_url=external_pipeline_validation_service_url,
            file_template_project_id=file_template_project_id,
            first_day_of_week=first_day_of_week,
            geo_node_allowed_ips=geo_node_allowed_ips,
            geo_status_timeout=geo_status_timeout,
            git_rate_limit_users_allowlists=git_rate_limit_users_allowlists,
            git_two_factor_session_expiry=git_two_factor_session_expiry,
            gitaly_timeout_default=gitaly_timeout_default,
            gitaly_timeout_fast=gitaly_timeout_fast,
            gitaly_timeout_medium=gitaly_timeout_medium,
            grafana_enabled=grafana_enabled,
            grafana_url=grafana_url,
            gravatar_enabled=gravatar_enabled,
            group_owners_can_manage_default_branch_protection=group_owners_can_manage_default_branch_protection,
            hashed_storage_enabled=hashed_storage_enabled,
            help_page_hide_commercial_content=help_page_hide_commercial_content,
            help_page_support_url=help_page_support_url,
            help_page_text=help_page_text,
            help_text=help_text,
            hide_third_party_offers=hide_third_party_offers,
            home_page_url=home_page_url,
            housekeeping_enabled=housekeeping_enabled,
            housekeeping_full_repack_period=housekeeping_full_repack_period,
            housekeeping_gc_period=housekeeping_gc_period,
            housekeeping_incremental_repack_period=housekeeping_incremental_repack_period,
            html_emails_enabled=html_emails_enabled,
            import_sources=import_sources,
            in_product_marketing_emails_enabled=in_product_marketing_emails_enabled,
            inactive_projects_delete_after_months=inactive_projects_delete_after_months,
            inactive_projects_min_size_mb=inactive_projects_min_size_mb,
            inactive_projects_send_warning_email_after_months=inactive_projects_send_warning_email_after_months,
            invisible_captcha_enabled=invisible_captcha_enabled,
            issues_create_limit=issues_create_limit,
            keep_latest_artifact=keep_latest_artifact,
            local_markdown_version=local_markdown_version,
            mailgun_events_enabled=mailgun_events_enabled,
            mailgun_signing_key=mailgun_signing_key,
            maintenance_mode=maintenance_mode,
            maintenance_mode_message=maintenance_mode_message,
            max_artifacts_size=max_artifacts_size,
            max_attachment_size=max_attachment_size,
            max_export_size=max_export_size,
            max_import_size=max_import_size,
            max_number_of_repository_downloads=max_number_of_repository_downloads,
            max_number_of_repository_downloads_within_time_period=max_number_of_repository_downloads_within_time_period,
            max_pages_size=max_pages_size,
            max_personal_access_token_lifetime=max_personal_access_token_lifetime,
            max_ssh_key_lifetime=max_ssh_key_lifetime,
            metrics_method_call_threshold=metrics_method_call_threshold,
            mirror_available=mirror_available,
            mirror_capacity_threshold=mirror_capacity_threshold,
            mirror_max_capacity=mirror_max_capacity,
            mirror_max_delay=mirror_max_delay,
            npm_package_requests_forwarding=npm_package_requests_forwarding,
            outbound_local_requests_whitelists=outbound_local_requests_whitelists,
            package_registry_cleanup_policies_worker_capacity=package_registry_cleanup_policies_worker_capacity,
            pages_domain_verification_enabled=pages_domain_verification_enabled,
            password_authentication_enabled_for_git=password_authentication_enabled_for_git,
            password_authentication_enabled_for_web=password_authentication_enabled_for_web,
            password_lowercase_required=password_lowercase_required,
            password_number_required=password_number_required,
            password_symbol_required=password_symbol_required,
            password_uppercase_required=password_uppercase_required,
            performance_bar_allowed_group_path=performance_bar_allowed_group_path,
            personal_access_token_prefix=personal_access_token_prefix,
            pipeline_limit_per_project_user_sha=pipeline_limit_per_project_user_sha,
            plantuml_enabled=plantuml_enabled,
            plantuml_url=plantuml_url,
            polling_interval_multiplier=polling_interval_multiplier,
            project_export_enabled=project_export_enabled,
            prometheus_metrics_enabled=prometheus_metrics_enabled,
            protected_ci_variables=protected_ci_variables,
            push_event_activities_limit=push_event_activities_limit,
            push_event_hooks_limit=push_event_hooks_limit,
            pypi_package_requests_forwarding=pypi_package_requests_forwarding,
            rate_limiting_response_text=rate_limiting_response_text,
            raw_blob_request_limit=raw_blob_request_limit,
            recaptcha_enabled=recaptcha_enabled,
            recaptcha_private_key=recaptcha_private_key,
            recaptcha_site_key=recaptcha_site_key,
            receive_max_input_size=receive_max_input_size,
            repository_checks_enabled=repository_checks_enabled,
            repository_size_limit=repository_size_limit,
            repository_storages=repository_storages,
            repository_storages_weighted=repository_storages_weighted,
            require_admin_approval_after_user_signup=require_admin_approval_after_user_signup,
            require_two_factor_authentication=require_two_factor_authentication,
            restricted_visibility_levels=restricted_visibility_levels,
            rsa_key_restriction=rsa_key_restriction,
            search_rate_limit=search_rate_limit,
            search_rate_limit_unauthenticated=search_rate_limit_unauthenticated,
            send_user_confirmation_email=send_user_confirmation_email,
            session_expire_delay=session_expire_delay,
            shared_runners_enabled=shared_runners_enabled,
            shared_runners_minutes=shared_runners_minutes,
            shared_runners_text=shared_runners_text,
            sidekiq_job_limiter_compression_threshold_bytes=sidekiq_job_limiter_compression_threshold_bytes,
            sidekiq_job_limiter_limit_bytes=sidekiq_job_limiter_limit_bytes,
            sidekiq_job_limiter_mode=sidekiq_job_limiter_mode,
            sign_in_text=sign_in_text,
            signup_enabled=signup_enabled,
            slack_app_enabled=slack_app_enabled,
            slack_app_id=slack_app_id,
            slack_app_secret=slack_app_secret,
            slack_app_signing_secret=slack_app_signing_secret,
            slack_app_verification_token=slack_app_verification_token,
            snippet_size_limit=snippet_size_limit,
            snowplow_app_id=snowplow_app_id,
            snowplow_collector_hostname=snowplow_collector_hostname,
            snowplow_cookie_domain=snowplow_cookie_domain,
            snowplow_enabled=snowplow_enabled,
            sourcegraph_enabled=sourcegraph_enabled,
            sourcegraph_public_only=sourcegraph_public_only,
            sourcegraph_url=sourcegraph_url,
            spam_check_api_key=spam_check_api_key,
            spam_check_endpoint_enabled=spam_check_endpoint_enabled,
            spam_check_endpoint_url=spam_check_endpoint_url,
            suggest_pipeline_enabled=suggest_pipeline_enabled,
            terminal_max_session_time=terminal_max_session_time,
            terms=terms,
            throttle_authenticated_api_enabled=throttle_authenticated_api_enabled,
            throttle_authenticated_api_period_in_seconds=throttle_authenticated_api_period_in_seconds,
            throttle_authenticated_api_requests_per_period=throttle_authenticated_api_requests_per_period,
            throttle_authenticated_packages_api_enabled=throttle_authenticated_packages_api_enabled,
            throttle_authenticated_packages_api_period_in_seconds=throttle_authenticated_packages_api_period_in_seconds,
            throttle_authenticated_packages_api_requests_per_period=throttle_authenticated_packages_api_requests_per_period,
            throttle_authenticated_web_enabled=throttle_authenticated_web_enabled,
            throttle_authenticated_web_period_in_seconds=throttle_authenticated_web_period_in_seconds,
            throttle_authenticated_web_requests_per_period=throttle_authenticated_web_requests_per_period,
            throttle_unauthenticated_api_enabled=throttle_unauthenticated_api_enabled,
            throttle_unauthenticated_api_period_in_seconds=throttle_unauthenticated_api_period_in_seconds,
            throttle_unauthenticated_api_requests_per_period=throttle_unauthenticated_api_requests_per_period,
            throttle_unauthenticated_packages_api_enabled=throttle_unauthenticated_packages_api_enabled,
            throttle_unauthenticated_packages_api_period_in_seconds=throttle_unauthenticated_packages_api_period_in_seconds,
            throttle_unauthenticated_packages_api_requests_per_period=throttle_unauthenticated_packages_api_requests_per_period,
            throttle_unauthenticated_web_enabled=throttle_unauthenticated_web_enabled,
            throttle_unauthenticated_web_period_in_seconds=throttle_unauthenticated_web_period_in_seconds,
            throttle_unauthenticated_web_requests_per_period=throttle_unauthenticated_web_requests_per_period,
            time_tracking_limit_to_hours=time_tracking_limit_to_hours,
            two_factor_grace_period=two_factor_grace_period,
            unique_ips_limit_enabled=unique_ips_limit_enabled,
            unique_ips_limit_per_user=unique_ips_limit_per_user,
            unique_ips_limit_time_window=unique_ips_limit_time_window,
            usage_ping_enabled=usage_ping_enabled,
            user_deactivation_emails_enabled=user_deactivation_emails_enabled,
            user_default_external=user_default_external,
            user_default_internal_regex=user_default_internal_regex,
            user_oauth_applications=user_oauth_applications,
            user_show_add_ssh_key_message=user_show_add_ssh_key_message,
            version_check_enabled=version_check_enabled,
            web_ide_clientside_preview_enabled=web_ide_clientside_preview_enabled,
            whats_new_variant=whats_new_variant,
            wiki_page_max_content_bytes=wiki_page_max_content_bytes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abuse_notification_email: Optional[pulumi.Input[str]] = None,
             admin_mode: Optional[pulumi.Input[bool]] = None,
             after_sign_out_path: Optional[pulumi.Input[str]] = None,
             after_sign_up_text: Optional[pulumi.Input[str]] = None,
             akismet_api_key: Optional[pulumi.Input[str]] = None,
             akismet_enabled: Optional[pulumi.Input[bool]] = None,
             allow_group_owners_to_manage_ldap: Optional[pulumi.Input[bool]] = None,
             allow_local_requests_from_system_hooks: Optional[pulumi.Input[bool]] = None,
             allow_local_requests_from_web_hooks_and_services: Optional[pulumi.Input[bool]] = None,
             archive_builds_in_human_readable: Optional[pulumi.Input[str]] = None,
             asset_proxy_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             asset_proxy_enabled: Optional[pulumi.Input[bool]] = None,
             asset_proxy_secret_key: Optional[pulumi.Input[str]] = None,
             asset_proxy_url: Optional[pulumi.Input[str]] = None,
             authorized_keys_enabled: Optional[pulumi.Input[bool]] = None,
             auto_devops_domain: Optional[pulumi.Input[str]] = None,
             auto_devops_enabled: Optional[pulumi.Input[bool]] = None,
             automatic_purchased_storage_allocation: Optional[pulumi.Input[bool]] = None,
             can_create_group: Optional[pulumi.Input[bool]] = None,
             check_namespace_plan: Optional[pulumi.Input[bool]] = None,
             commit_email_hostname: Optional[pulumi.Input[str]] = None,
             container_expiration_policies_enable_historic_entries: Optional[pulumi.Input[bool]] = None,
             container_registry_cleanup_tags_service_max_list_size: Optional[pulumi.Input[int]] = None,
             container_registry_delete_tags_service_timeout: Optional[pulumi.Input[int]] = None,
             container_registry_expiration_policies_caching: Optional[pulumi.Input[bool]] = None,
             container_registry_expiration_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
             container_registry_token_expire_delay: Optional[pulumi.Input[int]] = None,
             deactivate_dormant_users: Optional[pulumi.Input[bool]] = None,
             default_artifacts_expire_in: Optional[pulumi.Input[str]] = None,
             default_branch_name: Optional[pulumi.Input[str]] = None,
             default_branch_protection: Optional[pulumi.Input[int]] = None,
             default_ci_config_path: Optional[pulumi.Input[str]] = None,
             default_group_visibility: Optional[pulumi.Input[str]] = None,
             default_project_creation: Optional[pulumi.Input[int]] = None,
             default_project_visibility: Optional[pulumi.Input[str]] = None,
             default_projects_limit: Optional[pulumi.Input[int]] = None,
             default_snippet_visibility: Optional[pulumi.Input[str]] = None,
             delayed_group_deletion: Optional[pulumi.Input[bool]] = None,
             delayed_project_deletion: Optional[pulumi.Input[bool]] = None,
             delete_inactive_projects: Optional[pulumi.Input[bool]] = None,
             deletion_adjourned_period: Optional[pulumi.Input[int]] = None,
             diff_max_files: Optional[pulumi.Input[int]] = None,
             diff_max_lines: Optional[pulumi.Input[int]] = None,
             diff_max_patch_bytes: Optional[pulumi.Input[int]] = None,
             disable_feed_token: Optional[pulumi.Input[bool]] = None,
             disabled_oauth_sign_in_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             dns_rebinding_protection_enabled: Optional[pulumi.Input[bool]] = None,
             domain_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             domain_denylist_enabled: Optional[pulumi.Input[bool]] = None,
             domain_denylists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             dsa_key_restriction: Optional[pulumi.Input[int]] = None,
             ecdsa_key_restriction: Optional[pulumi.Input[int]] = None,
             ecdsa_sk_key_restriction: Optional[pulumi.Input[int]] = None,
             ed25519_key_restriction: Optional[pulumi.Input[int]] = None,
             ed25519_sk_key_restriction: Optional[pulumi.Input[int]] = None,
             eks_access_key_id: Optional[pulumi.Input[str]] = None,
             eks_account_id: Optional[pulumi.Input[str]] = None,
             eks_integration_enabled: Optional[pulumi.Input[bool]] = None,
             eks_secret_access_key: Optional[pulumi.Input[str]] = None,
             elasticsearch_aws: Optional[pulumi.Input[bool]] = None,
             elasticsearch_aws_access_key: Optional[pulumi.Input[str]] = None,
             elasticsearch_aws_region: Optional[pulumi.Input[str]] = None,
             elasticsearch_aws_secret_access_key: Optional[pulumi.Input[str]] = None,
             elasticsearch_indexed_field_length_limit: Optional[pulumi.Input[int]] = None,
             elasticsearch_indexed_file_size_limit_kb: Optional[pulumi.Input[int]] = None,
             elasticsearch_indexing: Optional[pulumi.Input[bool]] = None,
             elasticsearch_limit_indexing: Optional[pulumi.Input[bool]] = None,
             elasticsearch_max_bulk_concurrency: Optional[pulumi.Input[int]] = None,
             elasticsearch_max_bulk_size_mb: Optional[pulumi.Input[int]] = None,
             elasticsearch_namespace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             elasticsearch_password: Optional[pulumi.Input[str]] = None,
             elasticsearch_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             elasticsearch_search: Optional[pulumi.Input[bool]] = None,
             elasticsearch_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             elasticsearch_username: Optional[pulumi.Input[str]] = None,
             email_additional_text: Optional[pulumi.Input[str]] = None,
             email_author_in_body: Optional[pulumi.Input[bool]] = None,
             enabled_git_access_protocol: Optional[pulumi.Input[str]] = None,
             enforce_namespace_storage_limit: Optional[pulumi.Input[bool]] = None,
             enforce_terms: Optional[pulumi.Input[bool]] = None,
             external_auth_client_cert: Optional[pulumi.Input[str]] = None,
             external_auth_client_key: Optional[pulumi.Input[str]] = None,
             external_auth_client_key_pass: Optional[pulumi.Input[str]] = None,
             external_authorization_service_default_label: Optional[pulumi.Input[str]] = None,
             external_authorization_service_enabled: Optional[pulumi.Input[bool]] = None,
             external_authorization_service_timeout: Optional[pulumi.Input[float]] = None,
             external_authorization_service_url: Optional[pulumi.Input[str]] = None,
             external_pipeline_validation_service_timeout: Optional[pulumi.Input[int]] = None,
             external_pipeline_validation_service_token: Optional[pulumi.Input[str]] = None,
             external_pipeline_validation_service_url: Optional[pulumi.Input[str]] = None,
             file_template_project_id: Optional[pulumi.Input[int]] = None,
             first_day_of_week: Optional[pulumi.Input[int]] = None,
             geo_node_allowed_ips: Optional[pulumi.Input[str]] = None,
             geo_status_timeout: Optional[pulumi.Input[int]] = None,
             git_rate_limit_users_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             git_two_factor_session_expiry: Optional[pulumi.Input[int]] = None,
             gitaly_timeout_default: Optional[pulumi.Input[int]] = None,
             gitaly_timeout_fast: Optional[pulumi.Input[int]] = None,
             gitaly_timeout_medium: Optional[pulumi.Input[int]] = None,
             grafana_enabled: Optional[pulumi.Input[bool]] = None,
             grafana_url: Optional[pulumi.Input[str]] = None,
             gravatar_enabled: Optional[pulumi.Input[bool]] = None,
             group_owners_can_manage_default_branch_protection: Optional[pulumi.Input[bool]] = None,
             hashed_storage_enabled: Optional[pulumi.Input[bool]] = None,
             help_page_hide_commercial_content: Optional[pulumi.Input[bool]] = None,
             help_page_support_url: Optional[pulumi.Input[str]] = None,
             help_page_text: Optional[pulumi.Input[str]] = None,
             help_text: Optional[pulumi.Input[str]] = None,
             hide_third_party_offers: Optional[pulumi.Input[bool]] = None,
             home_page_url: Optional[pulumi.Input[str]] = None,
             housekeeping_enabled: Optional[pulumi.Input[bool]] = None,
             housekeeping_full_repack_period: Optional[pulumi.Input[int]] = None,
             housekeeping_gc_period: Optional[pulumi.Input[int]] = None,
             housekeeping_incremental_repack_period: Optional[pulumi.Input[int]] = None,
             html_emails_enabled: Optional[pulumi.Input[bool]] = None,
             import_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             in_product_marketing_emails_enabled: Optional[pulumi.Input[bool]] = None,
             inactive_projects_delete_after_months: Optional[pulumi.Input[int]] = None,
             inactive_projects_min_size_mb: Optional[pulumi.Input[int]] = None,
             inactive_projects_send_warning_email_after_months: Optional[pulumi.Input[int]] = None,
             invisible_captcha_enabled: Optional[pulumi.Input[bool]] = None,
             issues_create_limit: Optional[pulumi.Input[int]] = None,
             keep_latest_artifact: Optional[pulumi.Input[bool]] = None,
             local_markdown_version: Optional[pulumi.Input[int]] = None,
             mailgun_events_enabled: Optional[pulumi.Input[bool]] = None,
             mailgun_signing_key: Optional[pulumi.Input[str]] = None,
             maintenance_mode: Optional[pulumi.Input[bool]] = None,
             maintenance_mode_message: Optional[pulumi.Input[str]] = None,
             max_artifacts_size: Optional[pulumi.Input[int]] = None,
             max_attachment_size: Optional[pulumi.Input[int]] = None,
             max_export_size: Optional[pulumi.Input[int]] = None,
             max_import_size: Optional[pulumi.Input[int]] = None,
             max_number_of_repository_downloads: Optional[pulumi.Input[int]] = None,
             max_number_of_repository_downloads_within_time_period: Optional[pulumi.Input[int]] = None,
             max_pages_size: Optional[pulumi.Input[int]] = None,
             max_personal_access_token_lifetime: Optional[pulumi.Input[int]] = None,
             max_ssh_key_lifetime: Optional[pulumi.Input[int]] = None,
             metrics_method_call_threshold: Optional[pulumi.Input[int]] = None,
             mirror_available: Optional[pulumi.Input[bool]] = None,
             mirror_capacity_threshold: Optional[pulumi.Input[int]] = None,
             mirror_max_capacity: Optional[pulumi.Input[int]] = None,
             mirror_max_delay: Optional[pulumi.Input[int]] = None,
             npm_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
             outbound_local_requests_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             package_registry_cleanup_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
             pages_domain_verification_enabled: Optional[pulumi.Input[bool]] = None,
             password_authentication_enabled_for_git: Optional[pulumi.Input[bool]] = None,
             password_authentication_enabled_for_web: Optional[pulumi.Input[bool]] = None,
             password_lowercase_required: Optional[pulumi.Input[bool]] = None,
             password_number_required: Optional[pulumi.Input[bool]] = None,
             password_symbol_required: Optional[pulumi.Input[bool]] = None,
             password_uppercase_required: Optional[pulumi.Input[bool]] = None,
             performance_bar_allowed_group_path: Optional[pulumi.Input[str]] = None,
             personal_access_token_prefix: Optional[pulumi.Input[str]] = None,
             pipeline_limit_per_project_user_sha: Optional[pulumi.Input[int]] = None,
             plantuml_enabled: Optional[pulumi.Input[bool]] = None,
             plantuml_url: Optional[pulumi.Input[str]] = None,
             polling_interval_multiplier: Optional[pulumi.Input[float]] = None,
             project_export_enabled: Optional[pulumi.Input[bool]] = None,
             prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
             protected_ci_variables: Optional[pulumi.Input[bool]] = None,
             push_event_activities_limit: Optional[pulumi.Input[int]] = None,
             push_event_hooks_limit: Optional[pulumi.Input[int]] = None,
             pypi_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
             rate_limiting_response_text: Optional[pulumi.Input[str]] = None,
             raw_blob_request_limit: Optional[pulumi.Input[int]] = None,
             recaptcha_enabled: Optional[pulumi.Input[bool]] = None,
             recaptcha_private_key: Optional[pulumi.Input[str]] = None,
             recaptcha_site_key: Optional[pulumi.Input[str]] = None,
             receive_max_input_size: Optional[pulumi.Input[int]] = None,
             repository_checks_enabled: Optional[pulumi.Input[bool]] = None,
             repository_size_limit: Optional[pulumi.Input[int]] = None,
             repository_storages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             repository_storages_weighted: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
             require_admin_approval_after_user_signup: Optional[pulumi.Input[bool]] = None,
             require_two_factor_authentication: Optional[pulumi.Input[bool]] = None,
             restricted_visibility_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             rsa_key_restriction: Optional[pulumi.Input[int]] = None,
             search_rate_limit: Optional[pulumi.Input[int]] = None,
             search_rate_limit_unauthenticated: Optional[pulumi.Input[int]] = None,
             send_user_confirmation_email: Optional[pulumi.Input[bool]] = None,
             session_expire_delay: Optional[pulumi.Input[int]] = None,
             shared_runners_enabled: Optional[pulumi.Input[bool]] = None,
             shared_runners_minutes: Optional[pulumi.Input[int]] = None,
             shared_runners_text: Optional[pulumi.Input[str]] = None,
             sidekiq_job_limiter_compression_threshold_bytes: Optional[pulumi.Input[int]] = None,
             sidekiq_job_limiter_limit_bytes: Optional[pulumi.Input[int]] = None,
             sidekiq_job_limiter_mode: Optional[pulumi.Input[str]] = None,
             sign_in_text: Optional[pulumi.Input[str]] = None,
             signup_enabled: Optional[pulumi.Input[bool]] = None,
             slack_app_enabled: Optional[pulumi.Input[bool]] = None,
             slack_app_id: Optional[pulumi.Input[str]] = None,
             slack_app_secret: Optional[pulumi.Input[str]] = None,
             slack_app_signing_secret: Optional[pulumi.Input[str]] = None,
             slack_app_verification_token: Optional[pulumi.Input[str]] = None,
             snippet_size_limit: Optional[pulumi.Input[int]] = None,
             snowplow_app_id: Optional[pulumi.Input[str]] = None,
             snowplow_collector_hostname: Optional[pulumi.Input[str]] = None,
             snowplow_cookie_domain: Optional[pulumi.Input[str]] = None,
             snowplow_enabled: Optional[pulumi.Input[bool]] = None,
             sourcegraph_enabled: Optional[pulumi.Input[bool]] = None,
             sourcegraph_public_only: Optional[pulumi.Input[bool]] = None,
             sourcegraph_url: Optional[pulumi.Input[str]] = None,
             spam_check_api_key: Optional[pulumi.Input[str]] = None,
             spam_check_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
             spam_check_endpoint_url: Optional[pulumi.Input[str]] = None,
             suggest_pipeline_enabled: Optional[pulumi.Input[bool]] = None,
             terminal_max_session_time: Optional[pulumi.Input[int]] = None,
             terms: Optional[pulumi.Input[str]] = None,
             throttle_authenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_authenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_authenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_authenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_unauthenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_unauthenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_unauthenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
             time_tracking_limit_to_hours: Optional[pulumi.Input[bool]] = None,
             two_factor_grace_period: Optional[pulumi.Input[int]] = None,
             unique_ips_limit_enabled: Optional[pulumi.Input[bool]] = None,
             unique_ips_limit_per_user: Optional[pulumi.Input[int]] = None,
             unique_ips_limit_time_window: Optional[pulumi.Input[int]] = None,
             usage_ping_enabled: Optional[pulumi.Input[bool]] = None,
             user_deactivation_emails_enabled: Optional[pulumi.Input[bool]] = None,
             user_default_external: Optional[pulumi.Input[bool]] = None,
             user_default_internal_regex: Optional[pulumi.Input[str]] = None,
             user_oauth_applications: Optional[pulumi.Input[bool]] = None,
             user_show_add_ssh_key_message: Optional[pulumi.Input[bool]] = None,
             version_check_enabled: Optional[pulumi.Input[bool]] = None,
             web_ide_clientside_preview_enabled: Optional[pulumi.Input[bool]] = None,
             whats_new_variant: Optional[pulumi.Input[str]] = None,
             wiki_page_max_content_bytes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if abuse_notification_email is not None:
            _setter("abuse_notification_email", abuse_notification_email)
        if admin_mode is not None:
            _setter("admin_mode", admin_mode)
        if after_sign_out_path is not None:
            _setter("after_sign_out_path", after_sign_out_path)
        if after_sign_up_text is not None:
            _setter("after_sign_up_text", after_sign_up_text)
        if akismet_api_key is not None:
            _setter("akismet_api_key", akismet_api_key)
        if akismet_enabled is not None:
            _setter("akismet_enabled", akismet_enabled)
        if allow_group_owners_to_manage_ldap is not None:
            _setter("allow_group_owners_to_manage_ldap", allow_group_owners_to_manage_ldap)
        if allow_local_requests_from_system_hooks is not None:
            _setter("allow_local_requests_from_system_hooks", allow_local_requests_from_system_hooks)
        if allow_local_requests_from_web_hooks_and_services is not None:
            _setter("allow_local_requests_from_web_hooks_and_services", allow_local_requests_from_web_hooks_and_services)
        if archive_builds_in_human_readable is not None:
            _setter("archive_builds_in_human_readable", archive_builds_in_human_readable)
        if asset_proxy_allowlists is not None:
            _setter("asset_proxy_allowlists", asset_proxy_allowlists)
        if asset_proxy_enabled is not None:
            _setter("asset_proxy_enabled", asset_proxy_enabled)
        if asset_proxy_secret_key is not None:
            _setter("asset_proxy_secret_key", asset_proxy_secret_key)
        if asset_proxy_url is not None:
            _setter("asset_proxy_url", asset_proxy_url)
        if authorized_keys_enabled is not None:
            _setter("authorized_keys_enabled", authorized_keys_enabled)
        if auto_devops_domain is not None:
            _setter("auto_devops_domain", auto_devops_domain)
        if auto_devops_enabled is not None:
            _setter("auto_devops_enabled", auto_devops_enabled)
        if automatic_purchased_storage_allocation is not None:
            _setter("automatic_purchased_storage_allocation", automatic_purchased_storage_allocation)
        if can_create_group is not None:
            _setter("can_create_group", can_create_group)
        if check_namespace_plan is not None:
            _setter("check_namespace_plan", check_namespace_plan)
        if commit_email_hostname is not None:
            _setter("commit_email_hostname", commit_email_hostname)
        if container_expiration_policies_enable_historic_entries is not None:
            _setter("container_expiration_policies_enable_historic_entries", container_expiration_policies_enable_historic_entries)
        if container_registry_cleanup_tags_service_max_list_size is not None:
            _setter("container_registry_cleanup_tags_service_max_list_size", container_registry_cleanup_tags_service_max_list_size)
        if container_registry_delete_tags_service_timeout is not None:
            _setter("container_registry_delete_tags_service_timeout", container_registry_delete_tags_service_timeout)
        if container_registry_expiration_policies_caching is not None:
            _setter("container_registry_expiration_policies_caching", container_registry_expiration_policies_caching)
        if container_registry_expiration_policies_worker_capacity is not None:
            _setter("container_registry_expiration_policies_worker_capacity", container_registry_expiration_policies_worker_capacity)
        if container_registry_token_expire_delay is not None:
            _setter("container_registry_token_expire_delay", container_registry_token_expire_delay)
        if deactivate_dormant_users is not None:
            _setter("deactivate_dormant_users", deactivate_dormant_users)
        if default_artifacts_expire_in is not None:
            _setter("default_artifacts_expire_in", default_artifacts_expire_in)
        if default_branch_name is not None:
            _setter("default_branch_name", default_branch_name)
        if default_branch_protection is not None:
            _setter("default_branch_protection", default_branch_protection)
        if default_ci_config_path is not None:
            _setter("default_ci_config_path", default_ci_config_path)
        if default_group_visibility is not None:
            _setter("default_group_visibility", default_group_visibility)
        if default_project_creation is not None:
            _setter("default_project_creation", default_project_creation)
        if default_project_visibility is not None:
            _setter("default_project_visibility", default_project_visibility)
        if default_projects_limit is not None:
            _setter("default_projects_limit", default_projects_limit)
        if default_snippet_visibility is not None:
            _setter("default_snippet_visibility", default_snippet_visibility)
        if delayed_group_deletion is not None:
            _setter("delayed_group_deletion", delayed_group_deletion)
        if delayed_project_deletion is not None:
            _setter("delayed_project_deletion", delayed_project_deletion)
        if delete_inactive_projects is not None:
            _setter("delete_inactive_projects", delete_inactive_projects)
        if deletion_adjourned_period is not None:
            _setter("deletion_adjourned_period", deletion_adjourned_period)
        if diff_max_files is not None:
            _setter("diff_max_files", diff_max_files)
        if diff_max_lines is not None:
            _setter("diff_max_lines", diff_max_lines)
        if diff_max_patch_bytes is not None:
            _setter("diff_max_patch_bytes", diff_max_patch_bytes)
        if disable_feed_token is not None:
            _setter("disable_feed_token", disable_feed_token)
        if disabled_oauth_sign_in_sources is not None:
            _setter("disabled_oauth_sign_in_sources", disabled_oauth_sign_in_sources)
        if dns_rebinding_protection_enabled is not None:
            _setter("dns_rebinding_protection_enabled", dns_rebinding_protection_enabled)
        if domain_allowlists is not None:
            _setter("domain_allowlists", domain_allowlists)
        if domain_denylist_enabled is not None:
            _setter("domain_denylist_enabled", domain_denylist_enabled)
        if domain_denylists is not None:
            _setter("domain_denylists", domain_denylists)
        if dsa_key_restriction is not None:
            _setter("dsa_key_restriction", dsa_key_restriction)
        if ecdsa_key_restriction is not None:
            _setter("ecdsa_key_restriction", ecdsa_key_restriction)
        if ecdsa_sk_key_restriction is not None:
            _setter("ecdsa_sk_key_restriction", ecdsa_sk_key_restriction)
        if ed25519_key_restriction is not None:
            _setter("ed25519_key_restriction", ed25519_key_restriction)
        if ed25519_sk_key_restriction is not None:
            _setter("ed25519_sk_key_restriction", ed25519_sk_key_restriction)
        if eks_access_key_id is not None:
            _setter("eks_access_key_id", eks_access_key_id)
        if eks_account_id is not None:
            _setter("eks_account_id", eks_account_id)
        if eks_integration_enabled is not None:
            _setter("eks_integration_enabled", eks_integration_enabled)
        if eks_secret_access_key is not None:
            _setter("eks_secret_access_key", eks_secret_access_key)
        if elasticsearch_aws is not None:
            _setter("elasticsearch_aws", elasticsearch_aws)
        if elasticsearch_aws_access_key is not None:
            _setter("elasticsearch_aws_access_key", elasticsearch_aws_access_key)
        if elasticsearch_aws_region is not None:
            _setter("elasticsearch_aws_region", elasticsearch_aws_region)
        if elasticsearch_aws_secret_access_key is not None:
            _setter("elasticsearch_aws_secret_access_key", elasticsearch_aws_secret_access_key)
        if elasticsearch_indexed_field_length_limit is not None:
            _setter("elasticsearch_indexed_field_length_limit", elasticsearch_indexed_field_length_limit)
        if elasticsearch_indexed_file_size_limit_kb is not None:
            _setter("elasticsearch_indexed_file_size_limit_kb", elasticsearch_indexed_file_size_limit_kb)
        if elasticsearch_indexing is not None:
            _setter("elasticsearch_indexing", elasticsearch_indexing)
        if elasticsearch_limit_indexing is not None:
            _setter("elasticsearch_limit_indexing", elasticsearch_limit_indexing)
        if elasticsearch_max_bulk_concurrency is not None:
            _setter("elasticsearch_max_bulk_concurrency", elasticsearch_max_bulk_concurrency)
        if elasticsearch_max_bulk_size_mb is not None:
            _setter("elasticsearch_max_bulk_size_mb", elasticsearch_max_bulk_size_mb)
        if elasticsearch_namespace_ids is not None:
            _setter("elasticsearch_namespace_ids", elasticsearch_namespace_ids)
        if elasticsearch_password is not None:
            _setter("elasticsearch_password", elasticsearch_password)
        if elasticsearch_project_ids is not None:
            _setter("elasticsearch_project_ids", elasticsearch_project_ids)
        if elasticsearch_search is not None:
            _setter("elasticsearch_search", elasticsearch_search)
        if elasticsearch_urls is not None:
            _setter("elasticsearch_urls", elasticsearch_urls)
        if elasticsearch_username is not None:
            _setter("elasticsearch_username", elasticsearch_username)
        if email_additional_text is not None:
            _setter("email_additional_text", email_additional_text)
        if email_author_in_body is not None:
            _setter("email_author_in_body", email_author_in_body)
        if enabled_git_access_protocol is not None:
            _setter("enabled_git_access_protocol", enabled_git_access_protocol)
        if enforce_namespace_storage_limit is not None:
            _setter("enforce_namespace_storage_limit", enforce_namespace_storage_limit)
        if enforce_terms is not None:
            _setter("enforce_terms", enforce_terms)
        if external_auth_client_cert is not None:
            _setter("external_auth_client_cert", external_auth_client_cert)
        if external_auth_client_key is not None:
            _setter("external_auth_client_key", external_auth_client_key)
        if external_auth_client_key_pass is not None:
            _setter("external_auth_client_key_pass", external_auth_client_key_pass)
        if external_authorization_service_default_label is not None:
            _setter("external_authorization_service_default_label", external_authorization_service_default_label)
        if external_authorization_service_enabled is not None:
            _setter("external_authorization_service_enabled", external_authorization_service_enabled)
        if external_authorization_service_timeout is not None:
            _setter("external_authorization_service_timeout", external_authorization_service_timeout)
        if external_authorization_service_url is not None:
            _setter("external_authorization_service_url", external_authorization_service_url)
        if external_pipeline_validation_service_timeout is not None:
            _setter("external_pipeline_validation_service_timeout", external_pipeline_validation_service_timeout)
        if external_pipeline_validation_service_token is not None:
            _setter("external_pipeline_validation_service_token", external_pipeline_validation_service_token)
        if external_pipeline_validation_service_url is not None:
            _setter("external_pipeline_validation_service_url", external_pipeline_validation_service_url)
        if file_template_project_id is not None:
            _setter("file_template_project_id", file_template_project_id)
        if first_day_of_week is not None:
            _setter("first_day_of_week", first_day_of_week)
        if geo_node_allowed_ips is not None:
            _setter("geo_node_allowed_ips", geo_node_allowed_ips)
        if geo_status_timeout is not None:
            _setter("geo_status_timeout", geo_status_timeout)
        if git_rate_limit_users_allowlists is not None:
            _setter("git_rate_limit_users_allowlists", git_rate_limit_users_allowlists)
        if git_two_factor_session_expiry is not None:
            _setter("git_two_factor_session_expiry", git_two_factor_session_expiry)
        if gitaly_timeout_default is not None:
            _setter("gitaly_timeout_default", gitaly_timeout_default)
        if gitaly_timeout_fast is not None:
            _setter("gitaly_timeout_fast", gitaly_timeout_fast)
        if gitaly_timeout_medium is not None:
            _setter("gitaly_timeout_medium", gitaly_timeout_medium)
        if grafana_enabled is not None:
            _setter("grafana_enabled", grafana_enabled)
        if grafana_url is not None:
            _setter("grafana_url", grafana_url)
        if gravatar_enabled is not None:
            _setter("gravatar_enabled", gravatar_enabled)
        if group_owners_can_manage_default_branch_protection is not None:
            _setter("group_owners_can_manage_default_branch_protection", group_owners_can_manage_default_branch_protection)
        if hashed_storage_enabled is not None:
            _setter("hashed_storage_enabled", hashed_storage_enabled)
        if help_page_hide_commercial_content is not None:
            _setter("help_page_hide_commercial_content", help_page_hide_commercial_content)
        if help_page_support_url is not None:
            _setter("help_page_support_url", help_page_support_url)
        if help_page_text is not None:
            _setter("help_page_text", help_page_text)
        if help_text is not None:
            _setter("help_text", help_text)
        if hide_third_party_offers is not None:
            _setter("hide_third_party_offers", hide_third_party_offers)
        if home_page_url is not None:
            _setter("home_page_url", home_page_url)
        if housekeeping_enabled is not None:
            _setter("housekeeping_enabled", housekeeping_enabled)
        if housekeeping_full_repack_period is not None:
            _setter("housekeeping_full_repack_period", housekeeping_full_repack_period)
        if housekeeping_gc_period is not None:
            _setter("housekeeping_gc_period", housekeeping_gc_period)
        if housekeeping_incremental_repack_period is not None:
            _setter("housekeeping_incremental_repack_period", housekeeping_incremental_repack_period)
        if html_emails_enabled is not None:
            _setter("html_emails_enabled", html_emails_enabled)
        if import_sources is not None:
            _setter("import_sources", import_sources)
        if in_product_marketing_emails_enabled is not None:
            _setter("in_product_marketing_emails_enabled", in_product_marketing_emails_enabled)
        if inactive_projects_delete_after_months is not None:
            _setter("inactive_projects_delete_after_months", inactive_projects_delete_after_months)
        if inactive_projects_min_size_mb is not None:
            _setter("inactive_projects_min_size_mb", inactive_projects_min_size_mb)
        if inactive_projects_send_warning_email_after_months is not None:
            _setter("inactive_projects_send_warning_email_after_months", inactive_projects_send_warning_email_after_months)
        if invisible_captcha_enabled is not None:
            _setter("invisible_captcha_enabled", invisible_captcha_enabled)
        if issues_create_limit is not None:
            _setter("issues_create_limit", issues_create_limit)
        if keep_latest_artifact is not None:
            _setter("keep_latest_artifact", keep_latest_artifact)
        if local_markdown_version is not None:
            _setter("local_markdown_version", local_markdown_version)
        if mailgun_events_enabled is not None:
            _setter("mailgun_events_enabled", mailgun_events_enabled)
        if mailgun_signing_key is not None:
            _setter("mailgun_signing_key", mailgun_signing_key)
        if maintenance_mode is not None:
            _setter("maintenance_mode", maintenance_mode)
        if maintenance_mode_message is not None:
            _setter("maintenance_mode_message", maintenance_mode_message)
        if max_artifacts_size is not None:
            _setter("max_artifacts_size", max_artifacts_size)
        if max_attachment_size is not None:
            _setter("max_attachment_size", max_attachment_size)
        if max_export_size is not None:
            _setter("max_export_size", max_export_size)
        if max_import_size is not None:
            _setter("max_import_size", max_import_size)
        if max_number_of_repository_downloads is not None:
            _setter("max_number_of_repository_downloads", max_number_of_repository_downloads)
        if max_number_of_repository_downloads_within_time_period is not None:
            _setter("max_number_of_repository_downloads_within_time_period", max_number_of_repository_downloads_within_time_period)
        if max_pages_size is not None:
            _setter("max_pages_size", max_pages_size)
        if max_personal_access_token_lifetime is not None:
            _setter("max_personal_access_token_lifetime", max_personal_access_token_lifetime)
        if max_ssh_key_lifetime is not None:
            _setter("max_ssh_key_lifetime", max_ssh_key_lifetime)
        if metrics_method_call_threshold is not None:
            _setter("metrics_method_call_threshold", metrics_method_call_threshold)
        if mirror_available is not None:
            _setter("mirror_available", mirror_available)
        if mirror_capacity_threshold is not None:
            _setter("mirror_capacity_threshold", mirror_capacity_threshold)
        if mirror_max_capacity is not None:
            _setter("mirror_max_capacity", mirror_max_capacity)
        if mirror_max_delay is not None:
            _setter("mirror_max_delay", mirror_max_delay)
        if npm_package_requests_forwarding is not None:
            _setter("npm_package_requests_forwarding", npm_package_requests_forwarding)
        if outbound_local_requests_whitelists is not None:
            _setter("outbound_local_requests_whitelists", outbound_local_requests_whitelists)
        if package_registry_cleanup_policies_worker_capacity is not None:
            _setter("package_registry_cleanup_policies_worker_capacity", package_registry_cleanup_policies_worker_capacity)
        if pages_domain_verification_enabled is not None:
            _setter("pages_domain_verification_enabled", pages_domain_verification_enabled)
        if password_authentication_enabled_for_git is not None:
            _setter("password_authentication_enabled_for_git", password_authentication_enabled_for_git)
        if password_authentication_enabled_for_web is not None:
            _setter("password_authentication_enabled_for_web", password_authentication_enabled_for_web)
        if password_lowercase_required is not None:
            _setter("password_lowercase_required", password_lowercase_required)
        if password_number_required is not None:
            _setter("password_number_required", password_number_required)
        if password_symbol_required is not None:
            _setter("password_symbol_required", password_symbol_required)
        if password_uppercase_required is not None:
            _setter("password_uppercase_required", password_uppercase_required)
        if performance_bar_allowed_group_path is not None:
            _setter("performance_bar_allowed_group_path", performance_bar_allowed_group_path)
        if personal_access_token_prefix is not None:
            _setter("personal_access_token_prefix", personal_access_token_prefix)
        if pipeline_limit_per_project_user_sha is not None:
            _setter("pipeline_limit_per_project_user_sha", pipeline_limit_per_project_user_sha)
        if plantuml_enabled is not None:
            _setter("plantuml_enabled", plantuml_enabled)
        if plantuml_url is not None:
            _setter("plantuml_url", plantuml_url)
        if polling_interval_multiplier is not None:
            _setter("polling_interval_multiplier", polling_interval_multiplier)
        if project_export_enabled is not None:
            _setter("project_export_enabled", project_export_enabled)
        if prometheus_metrics_enabled is not None:
            _setter("prometheus_metrics_enabled", prometheus_metrics_enabled)
        if protected_ci_variables is not None:
            _setter("protected_ci_variables", protected_ci_variables)
        if push_event_activities_limit is not None:
            _setter("push_event_activities_limit", push_event_activities_limit)
        if push_event_hooks_limit is not None:
            _setter("push_event_hooks_limit", push_event_hooks_limit)
        if pypi_package_requests_forwarding is not None:
            _setter("pypi_package_requests_forwarding", pypi_package_requests_forwarding)
        if rate_limiting_response_text is not None:
            _setter("rate_limiting_response_text", rate_limiting_response_text)
        if raw_blob_request_limit is not None:
            _setter("raw_blob_request_limit", raw_blob_request_limit)
        if recaptcha_enabled is not None:
            _setter("recaptcha_enabled", recaptcha_enabled)
        if recaptcha_private_key is not None:
            _setter("recaptcha_private_key", recaptcha_private_key)
        if recaptcha_site_key is not None:
            _setter("recaptcha_site_key", recaptcha_site_key)
        if receive_max_input_size is not None:
            _setter("receive_max_input_size", receive_max_input_size)
        if repository_checks_enabled is not None:
            _setter("repository_checks_enabled", repository_checks_enabled)
        if repository_size_limit is not None:
            _setter("repository_size_limit", repository_size_limit)
        if repository_storages is not None:
            _setter("repository_storages", repository_storages)
        if repository_storages_weighted is not None:
            _setter("repository_storages_weighted", repository_storages_weighted)
        if require_admin_approval_after_user_signup is not None:
            _setter("require_admin_approval_after_user_signup", require_admin_approval_after_user_signup)
        if require_two_factor_authentication is not None:
            _setter("require_two_factor_authentication", require_two_factor_authentication)
        if restricted_visibility_levels is not None:
            _setter("restricted_visibility_levels", restricted_visibility_levels)
        if rsa_key_restriction is not None:
            _setter("rsa_key_restriction", rsa_key_restriction)
        if search_rate_limit is not None:
            _setter("search_rate_limit", search_rate_limit)
        if search_rate_limit_unauthenticated is not None:
            _setter("search_rate_limit_unauthenticated", search_rate_limit_unauthenticated)
        if send_user_confirmation_email is not None:
            _setter("send_user_confirmation_email", send_user_confirmation_email)
        if session_expire_delay is not None:
            _setter("session_expire_delay", session_expire_delay)
        if shared_runners_enabled is not None:
            _setter("shared_runners_enabled", shared_runners_enabled)
        if shared_runners_minutes is not None:
            _setter("shared_runners_minutes", shared_runners_minutes)
        if shared_runners_text is not None:
            _setter("shared_runners_text", shared_runners_text)
        if sidekiq_job_limiter_compression_threshold_bytes is not None:
            _setter("sidekiq_job_limiter_compression_threshold_bytes", sidekiq_job_limiter_compression_threshold_bytes)
        if sidekiq_job_limiter_limit_bytes is not None:
            _setter("sidekiq_job_limiter_limit_bytes", sidekiq_job_limiter_limit_bytes)
        if sidekiq_job_limiter_mode is not None:
            _setter("sidekiq_job_limiter_mode", sidekiq_job_limiter_mode)
        if sign_in_text is not None:
            _setter("sign_in_text", sign_in_text)
        if signup_enabled is not None:
            _setter("signup_enabled", signup_enabled)
        if slack_app_enabled is not None:
            _setter("slack_app_enabled", slack_app_enabled)
        if slack_app_id is not None:
            _setter("slack_app_id", slack_app_id)
        if slack_app_secret is not None:
            _setter("slack_app_secret", slack_app_secret)
        if slack_app_signing_secret is not None:
            _setter("slack_app_signing_secret", slack_app_signing_secret)
        if slack_app_verification_token is not None:
            _setter("slack_app_verification_token", slack_app_verification_token)
        if snippet_size_limit is not None:
            _setter("snippet_size_limit", snippet_size_limit)
        if snowplow_app_id is not None:
            _setter("snowplow_app_id", snowplow_app_id)
        if snowplow_collector_hostname is not None:
            _setter("snowplow_collector_hostname", snowplow_collector_hostname)
        if snowplow_cookie_domain is not None:
            _setter("snowplow_cookie_domain", snowplow_cookie_domain)
        if snowplow_enabled is not None:
            _setter("snowplow_enabled", snowplow_enabled)
        if sourcegraph_enabled is not None:
            _setter("sourcegraph_enabled", sourcegraph_enabled)
        if sourcegraph_public_only is not None:
            _setter("sourcegraph_public_only", sourcegraph_public_only)
        if sourcegraph_url is not None:
            _setter("sourcegraph_url", sourcegraph_url)
        if spam_check_api_key is not None:
            _setter("spam_check_api_key", spam_check_api_key)
        if spam_check_endpoint_enabled is not None:
            _setter("spam_check_endpoint_enabled", spam_check_endpoint_enabled)
        if spam_check_endpoint_url is not None:
            _setter("spam_check_endpoint_url", spam_check_endpoint_url)
        if suggest_pipeline_enabled is not None:
            _setter("suggest_pipeline_enabled", suggest_pipeline_enabled)
        if terminal_max_session_time is not None:
            _setter("terminal_max_session_time", terminal_max_session_time)
        if terms is not None:
            _setter("terms", terms)
        if throttle_authenticated_api_enabled is not None:
            _setter("throttle_authenticated_api_enabled", throttle_authenticated_api_enabled)
        if throttle_authenticated_api_period_in_seconds is not None:
            _setter("throttle_authenticated_api_period_in_seconds", throttle_authenticated_api_period_in_seconds)
        if throttle_authenticated_api_requests_per_period is not None:
            _setter("throttle_authenticated_api_requests_per_period", throttle_authenticated_api_requests_per_period)
        if throttle_authenticated_packages_api_enabled is not None:
            _setter("throttle_authenticated_packages_api_enabled", throttle_authenticated_packages_api_enabled)
        if throttle_authenticated_packages_api_period_in_seconds is not None:
            _setter("throttle_authenticated_packages_api_period_in_seconds", throttle_authenticated_packages_api_period_in_seconds)
        if throttle_authenticated_packages_api_requests_per_period is not None:
            _setter("throttle_authenticated_packages_api_requests_per_period", throttle_authenticated_packages_api_requests_per_period)
        if throttle_authenticated_web_enabled is not None:
            _setter("throttle_authenticated_web_enabled", throttle_authenticated_web_enabled)
        if throttle_authenticated_web_period_in_seconds is not None:
            _setter("throttle_authenticated_web_period_in_seconds", throttle_authenticated_web_period_in_seconds)
        if throttle_authenticated_web_requests_per_period is not None:
            _setter("throttle_authenticated_web_requests_per_period", throttle_authenticated_web_requests_per_period)
        if throttle_unauthenticated_api_enabled is not None:
            _setter("throttle_unauthenticated_api_enabled", throttle_unauthenticated_api_enabled)
        if throttle_unauthenticated_api_period_in_seconds is not None:
            _setter("throttle_unauthenticated_api_period_in_seconds", throttle_unauthenticated_api_period_in_seconds)
        if throttle_unauthenticated_api_requests_per_period is not None:
            _setter("throttle_unauthenticated_api_requests_per_period", throttle_unauthenticated_api_requests_per_period)
        if throttle_unauthenticated_packages_api_enabled is not None:
            _setter("throttle_unauthenticated_packages_api_enabled", throttle_unauthenticated_packages_api_enabled)
        if throttle_unauthenticated_packages_api_period_in_seconds is not None:
            _setter("throttle_unauthenticated_packages_api_period_in_seconds", throttle_unauthenticated_packages_api_period_in_seconds)
        if throttle_unauthenticated_packages_api_requests_per_period is not None:
            _setter("throttle_unauthenticated_packages_api_requests_per_period", throttle_unauthenticated_packages_api_requests_per_period)
        if throttle_unauthenticated_web_enabled is not None:
            _setter("throttle_unauthenticated_web_enabled", throttle_unauthenticated_web_enabled)
        if throttle_unauthenticated_web_period_in_seconds is not None:
            _setter("throttle_unauthenticated_web_period_in_seconds", throttle_unauthenticated_web_period_in_seconds)
        if throttle_unauthenticated_web_requests_per_period is not None:
            _setter("throttle_unauthenticated_web_requests_per_period", throttle_unauthenticated_web_requests_per_period)
        if time_tracking_limit_to_hours is not None:
            _setter("time_tracking_limit_to_hours", time_tracking_limit_to_hours)
        if two_factor_grace_period is not None:
            _setter("two_factor_grace_period", two_factor_grace_period)
        if unique_ips_limit_enabled is not None:
            _setter("unique_ips_limit_enabled", unique_ips_limit_enabled)
        if unique_ips_limit_per_user is not None:
            _setter("unique_ips_limit_per_user", unique_ips_limit_per_user)
        if unique_ips_limit_time_window is not None:
            _setter("unique_ips_limit_time_window", unique_ips_limit_time_window)
        if usage_ping_enabled is not None:
            _setter("usage_ping_enabled", usage_ping_enabled)
        if user_deactivation_emails_enabled is not None:
            _setter("user_deactivation_emails_enabled", user_deactivation_emails_enabled)
        if user_default_external is not None:
            _setter("user_default_external", user_default_external)
        if user_default_internal_regex is not None:
            _setter("user_default_internal_regex", user_default_internal_regex)
        if user_oauth_applications is not None:
            _setter("user_oauth_applications", user_oauth_applications)
        if user_show_add_ssh_key_message is not None:
            _setter("user_show_add_ssh_key_message", user_show_add_ssh_key_message)
        if version_check_enabled is not None:
            _setter("version_check_enabled", version_check_enabled)
        if web_ide_clientside_preview_enabled is not None:
            _setter("web_ide_clientside_preview_enabled", web_ide_clientside_preview_enabled)
        if whats_new_variant is not None:
            _setter("whats_new_variant", whats_new_variant)
        if wiki_page_max_content_bytes is not None:
            _setter("wiki_page_max_content_bytes", wiki_page_max_content_bytes)

    @property
    @pulumi.getter(name="abuseNotificationEmail")
    def abuse_notification_email(self) -> Optional[pulumi.Input[str]]:
        """
        If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        """
        return pulumi.get(self, "abuse_notification_email")

    @abuse_notification_email.setter
    def abuse_notification_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abuse_notification_email", value)

    @property
    @pulumi.getter(name="adminMode")
    def admin_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        """
        return pulumi.get(self, "admin_mode")

    @admin_mode.setter
    def admin_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_mode", value)

    @property
    @pulumi.getter(name="afterSignOutPath")
    def after_sign_out_path(self) -> Optional[pulumi.Input[str]]:
        """
        Where to redirect users after logout.
        """
        return pulumi.get(self, "after_sign_out_path")

    @after_sign_out_path.setter
    def after_sign_out_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "after_sign_out_path", value)

    @property
    @pulumi.getter(name="afterSignUpText")
    def after_sign_up_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text shown to the user after signing up.
        """
        return pulumi.get(self, "after_sign_up_text")

    @after_sign_up_text.setter
    def after_sign_up_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "after_sign_up_text", value)

    @property
    @pulumi.getter(name="akismetApiKey")
    def akismet_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key for Akismet spam protection.
        """
        return pulumi.get(self, "akismet_api_key")

    @akismet_api_key.setter
    def akismet_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "akismet_api_key", value)

    @property
    @pulumi.getter(name="akismetEnabled")
    def akismet_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        """
        return pulumi.get(self, "akismet_enabled")

    @akismet_enabled.setter
    def akismet_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "akismet_enabled", value)

    @property
    @pulumi.getter(name="allowGroupOwnersToManageLdap")
    def allow_group_owners_to_manage_ldap(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to allow group owners to manage LDAP.
        """
        return pulumi.get(self, "allow_group_owners_to_manage_ldap")

    @allow_group_owners_to_manage_ldap.setter
    def allow_group_owners_to_manage_ldap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_group_owners_to_manage_ldap", value)

    @property
    @pulumi.getter(name="allowLocalRequestsFromSystemHooks")
    def allow_local_requests_from_system_hooks(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow requests to the local network from system hooks.
        """
        return pulumi.get(self, "allow_local_requests_from_system_hooks")

    @allow_local_requests_from_system_hooks.setter
    def allow_local_requests_from_system_hooks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_local_requests_from_system_hooks", value)

    @property
    @pulumi.getter(name="allowLocalRequestsFromWebHooksAndServices")
    def allow_local_requests_from_web_hooks_and_services(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow requests to the local network from web hooks and services.
        """
        return pulumi.get(self, "allow_local_requests_from_web_hooks_and_services")

    @allow_local_requests_from_web_hooks_and_services.setter
    def allow_local_requests_from_web_hooks_and_services(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_local_requests_from_web_hooks_and_services", value)

    @property
    @pulumi.getter(name="archiveBuildsInHumanReadable")
    def archive_builds_in_human_readable(self) -> Optional[pulumi.Input[str]]:
        """
        Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        """
        return pulumi.get(self, "archive_builds_in_human_readable")

    @archive_builds_in_human_readable.setter
    def archive_builds_in_human_readable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_builds_in_human_readable", value)

    @property
    @pulumi.getter(name="assetProxyAllowlists")
    def asset_proxy_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_allowlists")

    @asset_proxy_allowlists.setter
    def asset_proxy_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "asset_proxy_allowlists", value)

    @property
    @pulumi.getter(name="assetProxyEnabled")
    def asset_proxy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_enabled")

    @asset_proxy_enabled.setter
    def asset_proxy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "asset_proxy_enabled", value)

    @property
    @pulumi.getter(name="assetProxySecretKey")
    def asset_proxy_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_secret_key")

    @asset_proxy_secret_key.setter
    def asset_proxy_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_proxy_secret_key", value)

    @property
    @pulumi.getter(name="assetProxyUrl")
    def asset_proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the asset proxy server. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_url")

    @asset_proxy_url.setter
    def asset_proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_proxy_url", value)

    @property
    @pulumi.getter(name="authorizedKeysEnabled")
    def authorized_keys_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        """
        return pulumi.get(self, "authorized_keys_enabled")

    @authorized_keys_enabled.setter
    def authorized_keys_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authorized_keys_enabled", value)

    @property
    @pulumi.getter(name="autoDevopsDomain")
    def auto_devops_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        """
        return pulumi.get(self, "auto_devops_domain")

    @auto_devops_domain.setter
    def auto_devops_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_devops_domain", value)

    @property
    @pulumi.getter(name="autoDevopsEnabled")
    def auto_devops_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        """
        return pulumi.get(self, "auto_devops_enabled")

    @auto_devops_enabled.setter
    def auto_devops_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_devops_enabled", value)

    @property
    @pulumi.getter(name="automaticPurchasedStorageAllocation")
    def automatic_purchased_storage_allocation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling this permits automatic allocation of purchased storage in a namespace.
        """
        return pulumi.get(self, "automatic_purchased_storage_allocation")

    @automatic_purchased_storage_allocation.setter
    def automatic_purchased_storage_allocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_purchased_storage_allocation", value)

    @property
    @pulumi.getter(name="canCreateGroup")
    def can_create_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether users can create top-level groups. Introduced in GitLab 15.5.
        """
        return pulumi.get(self, "can_create_group")

    @can_create_group.setter
    def can_create_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_create_group", value)

    @property
    @pulumi.getter(name="checkNamespacePlan")
    def check_namespace_plan(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        """
        return pulumi.get(self, "check_namespace_plan")

    @check_namespace_plan.setter
    def check_namespace_plan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "check_namespace_plan", value)

    @property
    @pulumi.getter(name="commitEmailHostname")
    def commit_email_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Custom hostname (for private commit emails).
        """
        return pulumi.get(self, "commit_email_hostname")

    @commit_email_hostname.setter
    def commit_email_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_email_hostname", value)

    @property
    @pulumi.getter(name="containerExpirationPoliciesEnableHistoricEntries")
    def container_expiration_policies_enable_historic_entries(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cleanup policies for all projects.
        """
        return pulumi.get(self, "container_expiration_policies_enable_historic_entries")

    @container_expiration_policies_enable_historic_entries.setter
    def container_expiration_policies_enable_historic_entries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "container_expiration_policies_enable_historic_entries", value)

    @property
    @pulumi.getter(name="containerRegistryCleanupTagsServiceMaxListSize")
    def container_registry_cleanup_tags_service_max_list_size(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of tags that can be deleted in a single execution of cleanup policies.
        """
        return pulumi.get(self, "container_registry_cleanup_tags_service_max_list_size")

    @container_registry_cleanup_tags_service_max_list_size.setter
    def container_registry_cleanup_tags_service_max_list_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_cleanup_tags_service_max_list_size", value)

    @property
    @pulumi.getter(name="containerRegistryDeleteTagsServiceTimeout")
    def container_registry_delete_tags_service_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        """
        return pulumi.get(self, "container_registry_delete_tags_service_timeout")

    @container_registry_delete_tags_service_timeout.setter
    def container_registry_delete_tags_service_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_delete_tags_service_timeout", value)

    @property
    @pulumi.getter(name="containerRegistryExpirationPoliciesCaching")
    def container_registry_expiration_policies_caching(self) -> Optional[pulumi.Input[bool]]:
        """
        Caching during the execution of cleanup policies.
        """
        return pulumi.get(self, "container_registry_expiration_policies_caching")

    @container_registry_expiration_policies_caching.setter
    def container_registry_expiration_policies_caching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "container_registry_expiration_policies_caching", value)

    @property
    @pulumi.getter(name="containerRegistryExpirationPoliciesWorkerCapacity")
    def container_registry_expiration_policies_worker_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Number of workers for cleanup policies.
        """
        return pulumi.get(self, "container_registry_expiration_policies_worker_capacity")

    @container_registry_expiration_policies_worker_capacity.setter
    def container_registry_expiration_policies_worker_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_expiration_policies_worker_capacity", value)

    @property
    @pulumi.getter(name="containerRegistryTokenExpireDelay")
    def container_registry_token_expire_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Container Registry token duration in minutes.
        """
        return pulumi.get(self, "container_registry_token_expire_delay")

    @container_registry_token_expire_delay.setter
    def container_registry_token_expire_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_token_expire_delay", value)

    @property
    @pulumi.getter(name="deactivateDormantUsers")
    def deactivate_dormant_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic deactivation of dormant users.
        """
        return pulumi.get(self, "deactivate_dormant_users")

    @deactivate_dormant_users.setter
    def deactivate_dormant_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deactivate_dormant_users", value)

    @property
    @pulumi.getter(name="defaultArtifactsExpireIn")
    def default_artifacts_expire_in(self) -> Optional[pulumi.Input[str]]:
        """
        Set the default expiration time for each job’s artifacts.
        """
        return pulumi.get(self, "default_artifacts_expire_in")

    @default_artifacts_expire_in.setter
    def default_artifacts_expire_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_artifacts_expire_in", value)

    @property
    @pulumi.getter(name="defaultBranchName")
    def default_branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance-level custom initial branch name (introduced in GitLab 13.2).
        """
        return pulumi.get(self, "default_branch_name")

    @default_branch_name.setter
    def default_branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch_name", value)

    @property
    @pulumi.getter(name="defaultBranchProtection")
    def default_branch_protection(self) -> Optional[pulumi.Input[int]]:
        """
        Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        """
        return pulumi.get(self, "default_branch_protection")

    @default_branch_protection.setter
    def default_branch_protection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_branch_protection", value)

    @property
    @pulumi.getter(name="defaultCiConfigPath")
    def default_ci_config_path(self) -> Optional[pulumi.Input[str]]:
        """
        Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        """
        return pulumi.get(self, "default_ci_config_path")

    @default_ci_config_path.setter
    def default_ci_config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_ci_config_path", value)

    @property
    @pulumi.getter(name="defaultGroupVisibility")
    def default_group_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        What visibility level new groups receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_group_visibility")

    @default_group_visibility.setter
    def default_group_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_group_visibility", value)

    @property
    @pulumi.getter(name="defaultProjectCreation")
    def default_project_creation(self) -> Optional[pulumi.Input[int]]:
        """
        Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        """
        return pulumi.get(self, "default_project_creation")

    @default_project_creation.setter
    def default_project_creation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_project_creation", value)

    @property
    @pulumi.getter(name="defaultProjectVisibility")
    def default_project_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        What visibility level new projects receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_project_visibility")

    @default_project_visibility.setter
    def default_project_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_project_visibility", value)

    @property
    @pulumi.getter(name="defaultProjectsLimit")
    def default_projects_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Project limit per user.
        """
        return pulumi.get(self, "default_projects_limit")

    @default_projects_limit.setter
    def default_projects_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_projects_limit", value)

    @property
    @pulumi.getter(name="defaultSnippetVisibility")
    def default_snippet_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        What visibility level new snippets receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_snippet_visibility")

    @default_snippet_visibility.setter
    def default_snippet_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_snippet_visibility", value)

    @property
    @pulumi.getter(name="delayedGroupDeletion")
    def delayed_group_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable delayed group deletion. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        """
        return pulumi.get(self, "delayed_group_deletion")

    @delayed_group_deletion.setter
    def delayed_group_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delayed_group_deletion", value)

    @property
    @pulumi.getter(name="delayedProjectDeletion")
    def delayed_project_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable delayed project deletion by default in new groups. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        """
        return pulumi.get(self, "delayed_project_deletion")

    @delayed_project_deletion.setter
    def delayed_project_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delayed_project_deletion", value)

    @property
    @pulumi.getter(name="deleteInactiveProjects")
    def delete_inactive_projects(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable inactive project deletion feature. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion).
        """
        return pulumi.get(self, "delete_inactive_projects")

    @delete_inactive_projects.setter
    def delete_inactive_projects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_inactive_projects", value)

    @property
    @pulumi.getter(name="deletionAdjournedPeriod")
    def deletion_adjourned_period(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        """
        return pulumi.get(self, "deletion_adjourned_period")

    @deletion_adjourned_period.setter
    def deletion_adjourned_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deletion_adjourned_period", value)

    @property
    @pulumi.getter(name="diffMaxFiles")
    def diff_max_files(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum files in a diff.
        """
        return pulumi.get(self, "diff_max_files")

    @diff_max_files.setter
    def diff_max_files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "diff_max_files", value)

    @property
    @pulumi.getter(name="diffMaxLines")
    def diff_max_lines(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum lines in a diff.
        """
        return pulumi.get(self, "diff_max_lines")

    @diff_max_lines.setter
    def diff_max_lines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "diff_max_lines", value)

    @property
    @pulumi.getter(name="diffMaxPatchBytes")
    def diff_max_patch_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum diff patch size, in bytes.
        """
        return pulumi.get(self, "diff_max_patch_bytes")

    @diff_max_patch_bytes.setter
    def diff_max_patch_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "diff_max_patch_bytes", value)

    @property
    @pulumi.getter(name="disableFeedToken")
    def disable_feed_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        """
        return pulumi.get(self, "disable_feed_token")

    @disable_feed_token.setter
    def disable_feed_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_feed_token", value)

    @property
    @pulumi.getter(name="disabledOauthSignInSources")
    def disabled_oauth_sign_in_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Disabled OAuth sign-in sources.
        """
        return pulumi.get(self, "disabled_oauth_sign_in_sources")

    @disabled_oauth_sign_in_sources.setter
    def disabled_oauth_sign_in_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disabled_oauth_sign_in_sources", value)

    @property
    @pulumi.getter(name="dnsRebindingProtectionEnabled")
    def dns_rebinding_protection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enforce DNS rebinding attack protection.
        """
        return pulumi.get(self, "dns_rebinding_protection_enabled")

    @dns_rebinding_protection_enabled.setter
    def dns_rebinding_protection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_rebinding_protection_enabled", value)

    @property
    @pulumi.getter(name="domainAllowlists")
    def domain_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Force people to use only corporate emails for sign-up. Null means there is no restriction.
        """
        return pulumi.get(self, "domain_allowlists")

    @domain_allowlists.setter
    def domain_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_allowlists", value)

    @property
    @pulumi.getter(name="domainDenylistEnabled")
    def domain_denylist_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        """
        return pulumi.get(self, "domain_denylist_enabled")

    @domain_denylist_enabled.setter
    def domain_denylist_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "domain_denylist_enabled", value)

    @property
    @pulumi.getter(name="domainDenylists")
    def domain_denylists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        """
        return pulumi.get(self, "domain_denylists")

    @domain_denylists.setter
    def domain_denylists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_denylists", value)

    @property
    @pulumi.getter(name="dsaKeyRestriction")
    def dsa_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
        """
        return pulumi.get(self, "dsa_key_restriction")

    @dsa_key_restriction.setter
    def dsa_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dsa_key_restriction", value)

    @property
    @pulumi.getter(name="ecdsaKeyRestriction")
    def ecdsa_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
        """
        return pulumi.get(self, "ecdsa_key_restriction")

    @ecdsa_key_restriction.setter
    def ecdsa_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ecdsa_key_restriction", value)

    @property
    @pulumi.getter(name="ecdsaSkKeyRestriction")
    def ecdsa_sk_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
        """
        return pulumi.get(self, "ecdsa_sk_key_restriction")

    @ecdsa_sk_key_restriction.setter
    def ecdsa_sk_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ecdsa_sk_key_restriction", value)

    @property
    @pulumi.getter(name="ed25519KeyRestriction")
    def ed25519_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
        """
        return pulumi.get(self, "ed25519_key_restriction")

    @ed25519_key_restriction.setter
    def ed25519_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ed25519_key_restriction", value)

    @property
    @pulumi.getter(name="ed25519SkKeyRestriction")
    def ed25519_sk_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
        """
        return pulumi.get(self, "ed25519_sk_key_restriction")

    @ed25519_sk_key_restriction.setter
    def ed25519_sk_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ed25519_sk_key_restriction", value)

    @property
    @pulumi.getter(name="eksAccessKeyId")
    def eks_access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM access key ID.
        """
        return pulumi.get(self, "eks_access_key_id")

    @eks_access_key_id.setter
    def eks_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eks_access_key_id", value)

    @property
    @pulumi.getter(name="eksAccountId")
    def eks_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon account ID.
        """
        return pulumi.get(self, "eks_account_id")

    @eks_account_id.setter
    def eks_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eks_account_id", value)

    @property
    @pulumi.getter(name="eksIntegrationEnabled")
    def eks_integration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable integration with Amazon EKS.
        """
        return pulumi.get(self, "eks_integration_enabled")

    @eks_integration_enabled.setter
    def eks_integration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eks_integration_enabled", value)

    @property
    @pulumi.getter(name="eksSecretAccessKey")
    def eks_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM secret access key.
        """
        return pulumi.get(self, "eks_secret_access_key")

    @eks_secret_access_key.setter
    def eks_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eks_secret_access_key", value)

    @property
    @pulumi.getter(name="elasticsearchAws")
    def elasticsearch_aws(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the use of AWS hosted Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_aws")

    @elasticsearch_aws.setter
    def elasticsearch_aws(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_aws", value)

    @property
    @pulumi.getter(name="elasticsearchAwsAccessKey")
    def elasticsearch_aws_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM access key.
        """
        return pulumi.get(self, "elasticsearch_aws_access_key")

    @elasticsearch_aws_access_key.setter
    def elasticsearch_aws_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_aws_access_key", value)

    @property
    @pulumi.getter(name="elasticsearchAwsRegion")
    def elasticsearch_aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS region the Elasticsearch domain is configured.
        """
        return pulumi.get(self, "elasticsearch_aws_region")

    @elasticsearch_aws_region.setter
    def elasticsearch_aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_aws_region", value)

    @property
    @pulumi.getter(name="elasticsearchAwsSecretAccessKey")
    def elasticsearch_aws_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM secret access key.
        """
        return pulumi.get(self, "elasticsearch_aws_secret_access_key")

    @elasticsearch_aws_secret_access_key.setter
    def elasticsearch_aws_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_aws_secret_access_key", value)

    @property
    @pulumi.getter(name="elasticsearchIndexedFieldLengthLimit")
    def elasticsearch_indexed_field_length_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        """
        return pulumi.get(self, "elasticsearch_indexed_field_length_limit")

    @elasticsearch_indexed_field_length_limit.setter
    def elasticsearch_indexed_field_length_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_indexed_field_length_limit", value)

    @property
    @pulumi.getter(name="elasticsearchIndexedFileSizeLimitKb")
    def elasticsearch_indexed_file_size_limit_kb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of repository and wiki files that are indexed by Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_indexed_file_size_limit_kb")

    @elasticsearch_indexed_file_size_limit_kb.setter
    def elasticsearch_indexed_file_size_limit_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_indexed_file_size_limit_kb", value)

    @property
    @pulumi.getter(name="elasticsearchIndexing")
    def elasticsearch_indexing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Elasticsearch indexing.
        """
        return pulumi.get(self, "elasticsearch_indexing")

    @elasticsearch_indexing.setter
    def elasticsearch_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_indexing", value)

    @property
    @pulumi.getter(name="elasticsearchLimitIndexing")
    def elasticsearch_limit_indexing(self) -> Optional[pulumi.Input[bool]]:
        """
        Limit Elasticsearch to index certain namespaces and projects.
        """
        return pulumi.get(self, "elasticsearch_limit_indexing")

    @elasticsearch_limit_indexing.setter
    def elasticsearch_limit_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_limit_indexing", value)

    @property
    @pulumi.getter(name="elasticsearchMaxBulkConcurrency")
    def elasticsearch_max_bulk_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        """
        return pulumi.get(self, "elasticsearch_max_bulk_concurrency")

    @elasticsearch_max_bulk_concurrency.setter
    def elasticsearch_max_bulk_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_max_bulk_concurrency", value)

    @property
    @pulumi.getter(name="elasticsearchMaxBulkSizeMb")
    def elasticsearch_max_bulk_size_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        """
        return pulumi.get(self, "elasticsearch_max_bulk_size_mb")

    @elasticsearch_max_bulk_size_mb.setter
    def elasticsearch_max_bulk_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_max_bulk_size_mb", value)

    @property
    @pulumi.getter(name="elasticsearchNamespaceIds")
    def elasticsearch_namespace_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        """
        return pulumi.get(self, "elasticsearch_namespace_ids")

    @elasticsearch_namespace_ids.setter
    def elasticsearch_namespace_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticsearch_namespace_ids", value)

    @property
    @pulumi.getter(name="elasticsearchPassword")
    def elasticsearch_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of your Elasticsearch instance.
        """
        return pulumi.get(self, "elasticsearch_password")

    @elasticsearch_password.setter
    def elasticsearch_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_password", value)

    @property
    @pulumi.getter(name="elasticsearchProjectIds")
    def elasticsearch_project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        """
        return pulumi.get(self, "elasticsearch_project_ids")

    @elasticsearch_project_ids.setter
    def elasticsearch_project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticsearch_project_ids", value)

    @property
    @pulumi.getter(name="elasticsearchSearch")
    def elasticsearch_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Elasticsearch search.
        """
        return pulumi.get(self, "elasticsearch_search")

    @elasticsearch_search.setter
    def elasticsearch_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_search", value)

    @property
    @pulumi.getter(name="elasticsearchUrls")
    def elasticsearch_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        """
        return pulumi.get(self, "elasticsearch_urls")

    @elasticsearch_urls.setter
    def elasticsearch_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticsearch_urls", value)

    @property
    @pulumi.getter(name="elasticsearchUsername")
    def elasticsearch_username(self) -> Optional[pulumi.Input[str]]:
        """
        The username of your Elasticsearch instance.
        """
        return pulumi.get(self, "elasticsearch_username")

    @elasticsearch_username.setter
    def elasticsearch_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_username", value)

    @property
    @pulumi.getter(name="emailAdditionalText")
    def email_additional_text(self) -> Optional[pulumi.Input[str]]:
        """
        Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        """
        return pulumi.get(self, "email_additional_text")

    @email_additional_text.setter
    def email_additional_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_additional_text", value)

    @property
    @pulumi.getter(name="emailAuthorInBody")
    def email_author_in_body(self) -> Optional[pulumi.Input[bool]]:
        """
        Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        """
        return pulumi.get(self, "email_author_in_body")

    @email_author_in_body.setter
    def email_author_in_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_author_in_body", value)

    @property
    @pulumi.getter(name="enabledGitAccessProtocol")
    def enabled_git_access_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        """
        return pulumi.get(self, "enabled_git_access_protocol")

    @enabled_git_access_protocol.setter
    def enabled_git_access_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled_git_access_protocol", value)

    @property
    @pulumi.getter(name="enforceNamespaceStorageLimit")
    def enforce_namespace_storage_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling this permits enforcement of namespace storage limits.
        """
        return pulumi.get(self, "enforce_namespace_storage_limit")

    @enforce_namespace_storage_limit.setter
    def enforce_namespace_storage_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_namespace_storage_limit", value)

    @property
    @pulumi.getter(name="enforceTerms")
    def enforce_terms(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: terms) Enforce application ToS to all users.
        """
        return pulumi.get(self, "enforce_terms")

    @enforce_terms.setter
    def enforce_terms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_terms", value)

    @property
    @pulumi.getter(name="externalAuthClientCert")
    def external_auth_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        """
        return pulumi.get(self, "external_auth_client_cert")

    @external_auth_client_cert.setter
    def external_auth_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth_client_cert", value)

    @property
    @pulumi.getter(name="externalAuthClientKey")
    def external_auth_client_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        """
        return pulumi.get(self, "external_auth_client_key")

    @external_auth_client_key.setter
    def external_auth_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth_client_key", value)

    @property
    @pulumi.getter(name="externalAuthClientKeyPass")
    def external_auth_client_key_pass(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        """
        return pulumi.get(self, "external_auth_client_key_pass")

    @external_auth_client_key_pass.setter
    def external_auth_client_key_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth_client_key_pass", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceDefaultLabel")
    def external_authorization_service_default_label(self) -> Optional[pulumi.Input[str]]:
        """
        The default classification label to use when requesting authorization and no classification label has been specified on the project.
        """
        return pulumi.get(self, "external_authorization_service_default_label")

    @external_authorization_service_default_label.setter
    def external_authorization_service_default_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_authorization_service_default_label", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceEnabled")
    def external_authorization_service_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        """
        return pulumi.get(self, "external_authorization_service_enabled")

    @external_authorization_service_enabled.setter
    def external_authorization_service_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external_authorization_service_enabled", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceTimeout")
    def external_authorization_service_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        """
        return pulumi.get(self, "external_authorization_service_timeout")

    @external_authorization_service_timeout.setter
    def external_authorization_service_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "external_authorization_service_timeout", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceUrl")
    def external_authorization_service_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to which authorization requests are directed.
        """
        return pulumi.get(self, "external_authorization_service_url")

    @external_authorization_service_url.setter
    def external_authorization_service_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_authorization_service_url", value)

    @property
    @pulumi.getter(name="externalPipelineValidationServiceTimeout")
    def external_pipeline_validation_service_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        """
        return pulumi.get(self, "external_pipeline_validation_service_timeout")

    @external_pipeline_validation_service_timeout.setter
    def external_pipeline_validation_service_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_pipeline_validation_service_timeout", value)

    @property
    @pulumi.getter(name="externalPipelineValidationServiceToken")
    def external_pipeline_validation_service_token(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        """
        return pulumi.get(self, "external_pipeline_validation_service_token")

    @external_pipeline_validation_service_token.setter
    def external_pipeline_validation_service_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_pipeline_validation_service_token", value)

    @property
    @pulumi.getter(name="externalPipelineValidationServiceUrl")
    def external_pipeline_validation_service_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to use for pipeline validation requests.
        """
        return pulumi.get(self, "external_pipeline_validation_service_url")

    @external_pipeline_validation_service_url.setter
    def external_pipeline_validation_service_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_pipeline_validation_service_url", value)

    @property
    @pulumi.getter(name="fileTemplateProjectId")
    def file_template_project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of a project to load custom file templates from.
        """
        return pulumi.get(self, "file_template_project_id")

    @file_template_project_id.setter
    def file_template_project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_template_project_id", value)

    @property
    @pulumi.getter(name="firstDayOfWeek")
    def first_day_of_week(self) -> Optional[pulumi.Input[int]]:
        """
        Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
        """
        return pulumi.get(self, "first_day_of_week")

    @first_day_of_week.setter
    def first_day_of_week(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "first_day_of_week", value)

    @property
    @pulumi.getter(name="geoNodeAllowedIps")
    def geo_node_allowed_ips(self) -> Optional[pulumi.Input[str]]:
        """
        Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        """
        return pulumi.get(self, "geo_node_allowed_ips")

    @geo_node_allowed_ips.setter
    def geo_node_allowed_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geo_node_allowed_ips", value)

    @property
    @pulumi.getter(name="geoStatusTimeout")
    def geo_status_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of seconds after which a request to get a secondary node status times out.
        """
        return pulumi.get(self, "geo_status_timeout")

    @geo_status_timeout.setter
    def geo_status_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "geo_status_timeout", value)

    @property
    @pulumi.getter(name="gitRateLimitUsersAllowlists")
    def git_rate_limit_users_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Introduced in GitLab 15.2.
        """
        return pulumi.get(self, "git_rate_limit_users_allowlists")

    @git_rate_limit_users_allowlists.setter
    def git_rate_limit_users_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "git_rate_limit_users_allowlists", value)

    @property
    @pulumi.getter(name="gitTwoFactorSessionExpiry")
    def git_two_factor_session_expiry(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        """
        return pulumi.get(self, "git_two_factor_session_expiry")

    @git_two_factor_session_expiry.setter
    def git_two_factor_session_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "git_two_factor_session_expiry", value)

    @property
    @pulumi.getter(name="gitalyTimeoutDefault")
    def gitaly_timeout_default(self) -> Optional[pulumi.Input[int]]:
        """
        Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_default")

    @gitaly_timeout_default.setter
    def gitaly_timeout_default(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gitaly_timeout_default", value)

    @property
    @pulumi.getter(name="gitalyTimeoutFast")
    def gitaly_timeout_fast(self) -> Optional[pulumi.Input[int]]:
        """
        Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_fast")

    @gitaly_timeout_fast.setter
    def gitaly_timeout_fast(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gitaly_timeout_fast", value)

    @property
    @pulumi.getter(name="gitalyTimeoutMedium")
    def gitaly_timeout_medium(self) -> Optional[pulumi.Input[int]]:
        """
        Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_medium")

    @gitaly_timeout_medium.setter
    def gitaly_timeout_medium(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gitaly_timeout_medium", value)

    @property
    @pulumi.getter(name="grafanaEnabled")
    def grafana_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Grafana.
        """
        return pulumi.get(self, "grafana_enabled")

    @grafana_enabled.setter
    def grafana_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "grafana_enabled", value)

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana URL.
        """
        return pulumi.get(self, "grafana_url")

    @grafana_url.setter
    def grafana_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_url", value)

    @property
    @pulumi.getter(name="gravatarEnabled")
    def gravatar_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Gravatar.
        """
        return pulumi.get(self, "gravatar_enabled")

    @gravatar_enabled.setter
    def gravatar_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gravatar_enabled", value)

    @property
    @pulumi.getter(name="groupOwnersCanManageDefaultBranchProtection")
    def group_owners_can_manage_default_branch_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent overrides of default branch protection.
        """
        return pulumi.get(self, "group_owners_can_manage_default_branch_protection")

    @group_owners_can_manage_default_branch_protection.setter
    def group_owners_can_manage_default_branch_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_owners_can_manage_default_branch_protection", value)

    @property
    @pulumi.getter(name="hashedStorageEnabled")
    def hashed_storage_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        """
        return pulumi.get(self, "hashed_storage_enabled")

    @hashed_storage_enabled.setter
    def hashed_storage_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hashed_storage_enabled", value)

    @property
    @pulumi.getter(name="helpPageHideCommercialContent")
    def help_page_hide_commercial_content(self) -> Optional[pulumi.Input[bool]]:
        """
        Hide marketing-related entries from help.
        """
        return pulumi.get(self, "help_page_hide_commercial_content")

    @help_page_hide_commercial_content.setter
    def help_page_hide_commercial_content(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help_page_hide_commercial_content", value)

    @property
    @pulumi.getter(name="helpPageSupportUrl")
    def help_page_support_url(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate support URL for help page and help dropdown.
        """
        return pulumi.get(self, "help_page_support_url")

    @help_page_support_url.setter
    def help_page_support_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_page_support_url", value)

    @property
    @pulumi.getter(name="helpPageText")
    def help_page_text(self) -> Optional[pulumi.Input[str]]:
        """
        Custom text displayed on the help page.
        """
        return pulumi.get(self, "help_page_text")

    @help_page_text.setter
    def help_page_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_page_text", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[pulumi.Input[str]]:
        """
        GitLab server administrator information.
        """
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter(name="hideThirdPartyOffers")
    def hide_third_party_offers(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not display offers from third parties in GitLab.
        """
        return pulumi.get(self, "hide_third_party_offers")

    @hide_third_party_offers.setter
    def hide_third_party_offers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_third_party_offers", value)

    @property
    @pulumi.getter(name="homePageUrl")
    def home_page_url(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect to this URL when not logged in.
        """
        return pulumi.get(self, "home_page_url")

    @home_page_url.setter
    def home_page_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_page_url", value)

    @property
    @pulumi.getter(name="housekeepingEnabled")
    def housekeeping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        """
        return pulumi.get(self, "housekeeping_enabled")

    @housekeeping_enabled.setter
    def housekeeping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "housekeeping_enabled", value)

    @property
    @pulumi.getter(name="housekeepingFullRepackPeriod")
    def housekeeping_full_repack_period(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Git pushes after which an incremental git repack is run.
        """
        return pulumi.get(self, "housekeeping_full_repack_period")

    @housekeeping_full_repack_period.setter
    def housekeeping_full_repack_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "housekeeping_full_repack_period", value)

    @property
    @pulumi.getter(name="housekeepingGcPeriod")
    def housekeeping_gc_period(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Git pushes after which git gc is run.
        """
        return pulumi.get(self, "housekeeping_gc_period")

    @housekeeping_gc_period.setter
    def housekeeping_gc_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "housekeeping_gc_period", value)

    @property
    @pulumi.getter(name="housekeepingIncrementalRepackPeriod")
    def housekeeping_incremental_repack_period(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Git pushes after which an incremental git repack is run.
        """
        return pulumi.get(self, "housekeeping_incremental_repack_period")

    @housekeeping_incremental_repack_period.setter
    def housekeeping_incremental_repack_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "housekeeping_incremental_repack_period", value)

    @property
    @pulumi.getter(name="htmlEmailsEnabled")
    def html_emails_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable HTML emails.
        """
        return pulumi.get(self, "html_emails_enabled")

    @html_emails_enabled.setter
    def html_emails_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "html_emails_enabled", value)

    @property
    @pulumi.getter(name="importSources")
    def import_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `Project`, `gitea`, `manifest`
        """
        return pulumi.get(self, "import_sources")

    @import_sources.setter
    def import_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "import_sources", value)

    @property
    @pulumi.getter(name="inProductMarketingEmailsEnabled")
    def in_product_marketing_emails_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable in-product marketing emails.
        """
        return pulumi.get(self, "in_product_marketing_emails_enabled")

    @in_product_marketing_emails_enabled.setter
    def in_product_marketing_emails_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "in_product_marketing_emails_enabled", value)

    @property
    @pulumi.getter(name="inactiveProjectsDeleteAfterMonths")
    def inactive_projects_delete_after_months(self) -> Optional[pulumi.Input[int]]:
        """
        If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_delete_after_months")

    @inactive_projects_delete_after_months.setter
    def inactive_projects_delete_after_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_projects_delete_after_months", value)

    @property
    @pulumi.getter(name="inactiveProjectsMinSizeMb")
    def inactive_projects_min_size_mb(self) -> Optional[pulumi.Input[int]]:
        """
        If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_min_size_mb")

    @inactive_projects_min_size_mb.setter
    def inactive_projects_min_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_projects_min_size_mb", value)

    @property
    @pulumi.getter(name="inactiveProjectsSendWarningEmailAfterMonths")
    def inactive_projects_send_warning_email_after_months(self) -> Optional[pulumi.Input[int]]:
        """
        If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_send_warning_email_after_months")

    @inactive_projects_send_warning_email_after_months.setter
    def inactive_projects_send_warning_email_after_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_projects_send_warning_email_after_months", value)

    @property
    @pulumi.getter(name="invisibleCaptchaEnabled")
    def invisible_captcha_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Invisible CAPTCHA spam detection during sign-up.
        """
        return pulumi.get(self, "invisible_captcha_enabled")

    @invisible_captcha_enabled.setter
    def invisible_captcha_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invisible_captcha_enabled", value)

    @property
    @pulumi.getter(name="issuesCreateLimit")
    def issues_create_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of issue creation requests per minute per user.
        """
        return pulumi.get(self, "issues_create_limit")

    @issues_create_limit.setter
    def issues_create_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "issues_create_limit", value)

    @property
    @pulumi.getter(name="keepLatestArtifact")
    def keep_latest_artifact(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
        """
        return pulumi.get(self, "keep_latest_artifact")

    @keep_latest_artifact.setter
    def keep_latest_artifact(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_latest_artifact", value)

    @property
    @pulumi.getter(name="localMarkdownVersion")
    def local_markdown_version(self) -> Optional[pulumi.Input[int]]:
        """
        Increase this value when any cached Markdown should be invalidated.
        """
        return pulumi.get(self, "local_markdown_version")

    @local_markdown_version.setter
    def local_markdown_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_markdown_version", value)

    @property
    @pulumi.getter(name="mailgunEventsEnabled")
    def mailgun_events_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Mailgun event receiver.
        """
        return pulumi.get(self, "mailgun_events_enabled")

    @mailgun_events_enabled.setter
    def mailgun_events_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mailgun_events_enabled", value)

    @property
    @pulumi.getter(name="mailgunSigningKey")
    def mailgun_signing_key(self) -> Optional[pulumi.Input[str]]:
        """
        The Mailgun HTTP webhook signing key for receiving events from webhook.
        """
        return pulumi.get(self, "mailgun_signing_key")

    @mailgun_signing_key.setter
    def mailgun_signing_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailgun_signing_key", value)

    @property
    @pulumi.getter(name="maintenanceMode")
    def maintenance_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        """
        return pulumi.get(self, "maintenance_mode")

    @maintenance_mode.setter
    def maintenance_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maintenance_mode", value)

    @property
    @pulumi.getter(name="maintenanceModeMessage")
    def maintenance_mode_message(self) -> Optional[pulumi.Input[str]]:
        """
        Message displayed when instance is in maintenance mode.
        """
        return pulumi.get(self, "maintenance_mode_message")

    @maintenance_mode_message.setter
    def maintenance_mode_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_mode_message", value)

    @property
    @pulumi.getter(name="maxArtifactsSize")
    def max_artifacts_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum artifacts size in MB.
        """
        return pulumi.get(self, "max_artifacts_size")

    @max_artifacts_size.setter
    def max_artifacts_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_artifacts_size", value)

    @property
    @pulumi.getter(name="maxAttachmentSize")
    def max_attachment_size(self) -> Optional[pulumi.Input[int]]:
        """
        Limit attachment size in MB.
        """
        return pulumi.get(self, "max_attachment_size")

    @max_attachment_size.setter
    def max_attachment_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_attachment_size", value)

    @property
    @pulumi.getter(name="maxExportSize")
    def max_export_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum export size in MB. 0 for unlimited.
        """
        return pulumi.get(self, "max_export_size")

    @max_export_size.setter
    def max_export_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_export_size", value)

    @property
    @pulumi.getter(name="maxImportSize")
    def max_import_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum import size in MB. 0 for unlimited.
        """
        return pulumi.get(self, "max_import_size")

    @max_import_size.setter
    def max_import_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_import_size", value)

    @property
    @pulumi.getter(name="maxNumberOfRepositoryDownloads")
    def max_number_of_repository_downloads(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "max_number_of_repository_downloads")

    @max_number_of_repository_downloads.setter
    def max_number_of_repository_downloads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_repository_downloads", value)

    @property
    @pulumi.getter(name="maxNumberOfRepositoryDownloadsWithinTimePeriod")
    def max_number_of_repository_downloads_within_time_period(self) -> Optional[pulumi.Input[int]]:
        """
        Reporting time period (in seconds). Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "max_number_of_repository_downloads_within_time_period")

    @max_number_of_repository_downloads_within_time_period.setter
    def max_number_of_repository_downloads_within_time_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_repository_downloads_within_time_period", value)

    @property
    @pulumi.getter(name="maxPagesSize")
    def max_pages_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of pages repositories in MB.
        """
        return pulumi.get(self, "max_pages_size")

    @max_pages_size.setter
    def max_pages_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pages_size", value)

    @property
    @pulumi.getter(name="maxPersonalAccessTokenLifetime")
    def max_personal_access_token_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum allowable lifetime for access tokens in days.
        """
        return pulumi.get(self, "max_personal_access_token_lifetime")

    @max_personal_access_token_lifetime.setter
    def max_personal_access_token_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_personal_access_token_lifetime", value)

    @property
    @pulumi.getter(name="maxSshKeyLifetime")
    def max_ssh_key_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        """
        return pulumi.get(self, "max_ssh_key_lifetime")

    @max_ssh_key_lifetime.setter
    def max_ssh_key_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ssh_key_lifetime", value)

    @property
    @pulumi.getter(name="metricsMethodCallThreshold")
    def metrics_method_call_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        A method call is only tracked when it takes longer than the given amount of milliseconds.
        """
        return pulumi.get(self, "metrics_method_call_threshold")

    @metrics_method_call_threshold.setter
    def metrics_method_call_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_method_call_threshold", value)

    @property
    @pulumi.getter(name="mirrorAvailable")
    def mirror_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        """
        return pulumi.get(self, "mirror_available")

    @mirror_available.setter
    def mirror_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mirror_available", value)

    @property
    @pulumi.getter(name="mirrorCapacityThreshold")
    def mirror_capacity_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum capacity to be available before scheduling more mirrors preemptively.
        """
        return pulumi.get(self, "mirror_capacity_threshold")

    @mirror_capacity_threshold.setter
    def mirror_capacity_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_capacity_threshold", value)

    @property
    @pulumi.getter(name="mirrorMaxCapacity")
    def mirror_max_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of mirrors that can be synchronizing at the same time.
        """
        return pulumi.get(self, "mirror_max_capacity")

    @mirror_max_capacity.setter
    def mirror_max_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_max_capacity", value)

    @property
    @pulumi.getter(name="mirrorMaxDelay")
    def mirror_max_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        """
        return pulumi.get(self, "mirror_max_delay")

    @mirror_max_delay.setter
    def mirror_max_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_max_delay", value)

    @property
    @pulumi.getter(name="npmPackageRequestsForwarding")
    def npm_package_requests_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        """
        return pulumi.get(self, "npm_package_requests_forwarding")

    @npm_package_requests_forwarding.setter
    def npm_package_requests_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "npm_package_requests_forwarding", value)

    @property
    @pulumi.getter(name="outboundLocalRequestsWhitelists")
    def outbound_local_requests_whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        """
        return pulumi.get(self, "outbound_local_requests_whitelists")

    @outbound_local_requests_whitelists.setter
    def outbound_local_requests_whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outbound_local_requests_whitelists", value)

    @property
    @pulumi.getter(name="packageRegistryCleanupPoliciesWorkerCapacity")
    def package_registry_cleanup_policies_worker_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Number of workers assigned to the packages cleanup policies.
        """
        return pulumi.get(self, "package_registry_cleanup_policies_worker_capacity")

    @package_registry_cleanup_policies_worker_capacity.setter
    def package_registry_cleanup_policies_worker_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "package_registry_cleanup_policies_worker_capacity", value)

    @property
    @pulumi.getter(name="pagesDomainVerificationEnabled")
    def pages_domain_verification_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        """
        return pulumi.get(self, "pages_domain_verification_enabled")

    @pages_domain_verification_enabled.setter
    def pages_domain_verification_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pages_domain_verification_enabled", value)

    @property
    @pulumi.getter(name="passwordAuthenticationEnabledForGit")
    def password_authentication_enabled_for_git(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication for Git over HTTP(S) via a GitLab account password.
        """
        return pulumi.get(self, "password_authentication_enabled_for_git")

    @password_authentication_enabled_for_git.setter
    def password_authentication_enabled_for_git(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_authentication_enabled_for_git", value)

    @property
    @pulumi.getter(name="passwordAuthenticationEnabledForWeb")
    def password_authentication_enabled_for_web(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication for the web interface via a GitLab account password.
        """
        return pulumi.get(self, "password_authentication_enabled_for_web")

    @password_authentication_enabled_for_web.setter
    def password_authentication_enabled_for_web(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_authentication_enabled_for_web", value)

    @property
    @pulumi.getter(name="passwordLowercaseRequired")
    def password_lowercase_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_lowercase_required")

    @password_lowercase_required.setter
    def password_lowercase_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_lowercase_required", value)

    @property
    @pulumi.getter(name="passwordNumberRequired")
    def password_number_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_number_required")

    @password_number_required.setter
    def password_number_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_number_required", value)

    @property
    @pulumi.getter(name="passwordSymbolRequired")
    def password_symbol_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_symbol_required")

    @password_symbol_required.setter
    def password_symbol_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_symbol_required", value)

    @property
    @pulumi.getter(name="passwordUppercaseRequired")
    def password_uppercase_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_uppercase_required")

    @password_uppercase_required.setter
    def password_uppercase_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_uppercase_required", value)

    @property
    @pulumi.getter(name="performanceBarAllowedGroupPath")
    def performance_bar_allowed_group_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the group that is allowed to toggle the performance bar.
        """
        return pulumi.get(self, "performance_bar_allowed_group_path")

    @performance_bar_allowed_group_path.setter
    def performance_bar_allowed_group_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance_bar_allowed_group_path", value)

    @property
    @pulumi.getter(name="personalAccessTokenPrefix")
    def personal_access_token_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix for all generated personal access tokens.
        """
        return pulumi.get(self, "personal_access_token_prefix")

    @personal_access_token_prefix.setter
    def personal_access_token_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "personal_access_token_prefix", value)

    @property
    @pulumi.getter(name="pipelineLimitPerProjectUserSha")
    def pipeline_limit_per_project_user_sha(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of pipeline creation requests per minute per user and commit.
        """
        return pulumi.get(self, "pipeline_limit_per_project_user_sha")

    @pipeline_limit_per_project_user_sha.setter
    def pipeline_limit_per_project_user_sha(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pipeline_limit_per_project_user_sha", value)

    @property
    @pulumi.getter(name="plantumlEnabled")
    def plantuml_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: plantuml_url) Enable PlantUML integration.
        """
        return pulumi.get(self, "plantuml_enabled")

    @plantuml_enabled.setter
    def plantuml_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "plantuml_enabled", value)

    @property
    @pulumi.getter(name="plantumlUrl")
    def plantuml_url(self) -> Optional[pulumi.Input[str]]:
        """
        The PlantUML instance URL for integration.
        """
        return pulumi.get(self, "plantuml_url")

    @plantuml_url.setter
    def plantuml_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plantuml_url", value)

    @property
    @pulumi.getter(name="pollingIntervalMultiplier")
    def polling_interval_multiplier(self) -> Optional[pulumi.Input[float]]:
        """
        Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        """
        return pulumi.get(self, "polling_interval_multiplier")

    @polling_interval_multiplier.setter
    def polling_interval_multiplier(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "polling_interval_multiplier", value)

    @property
    @pulumi.getter(name="projectExportEnabled")
    def project_export_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable project export.
        """
        return pulumi.get(self, "project_export_enabled")

    @project_export_enabled.setter
    def project_export_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "project_export_enabled", value)

    @property
    @pulumi.getter(name="prometheusMetricsEnabled")
    def prometheus_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Prometheus metrics.
        """
        return pulumi.get(self, "prometheus_metrics_enabled")

    @prometheus_metrics_enabled.setter
    def prometheus_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_metrics_enabled", value)

    @property
    @pulumi.getter(name="protectedCiVariables")
    def protected_ci_variables(self) -> Optional[pulumi.Input[bool]]:
        """
        CI/CD variables are protected by default.
        """
        return pulumi.get(self, "protected_ci_variables")

    @protected_ci_variables.setter
    def protected_ci_variables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protected_ci_variables", value)

    @property
    @pulumi.getter(name="pushEventActivitiesLimit")
    def push_event_activities_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        """
        return pulumi.get(self, "push_event_activities_limit")

    @push_event_activities_limit.setter
    def push_event_activities_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "push_event_activities_limit", value)

    @property
    @pulumi.getter(name="pushEventHooksLimit")
    def push_event_hooks_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        """
        return pulumi.get(self, "push_event_hooks_limit")

    @push_event_hooks_limit.setter
    def push_event_hooks_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "push_event_hooks_limit", value)

    @property
    @pulumi.getter(name="pypiPackageRequestsForwarding")
    def pypi_package_requests_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        """
        return pulumi.get(self, "pypi_package_requests_forwarding")

    @pypi_package_requests_forwarding.setter
    def pypi_package_requests_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pypi_package_requests_forwarding", value)

    @property
    @pulumi.getter(name="rateLimitingResponseText")
    def rate_limiting_response_text(self) -> Optional[pulumi.Input[str]]:
        """
        When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        """
        return pulumi.get(self, "rate_limiting_response_text")

    @rate_limiting_response_text.setter
    def rate_limiting_response_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_limiting_response_text", value)

    @property
    @pulumi.getter(name="rawBlobRequestLimit")
    def raw_blob_request_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per minute for each raw path. To disable throttling set to 0.
        """
        return pulumi.get(self, "raw_blob_request_limit")

    @raw_blob_request_limit.setter
    def raw_blob_request_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "raw_blob_request_limit", value)

    @property
    @pulumi.getter(name="recaptchaEnabled")
    def recaptcha_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_enabled")

    @recaptcha_enabled.setter
    def recaptcha_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recaptcha_enabled", value)

    @property
    @pulumi.getter(name="recaptchaPrivateKey")
    def recaptcha_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_private_key")

    @recaptcha_private_key.setter
    def recaptcha_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recaptcha_private_key", value)

    @property
    @pulumi.getter(name="recaptchaSiteKey")
    def recaptcha_site_key(self) -> Optional[pulumi.Input[str]]:
        """
        Site key for reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_site_key")

    @recaptcha_site_key.setter
    def recaptcha_site_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recaptcha_site_key", value)

    @property
    @pulumi.getter(name="receiveMaxInputSize")
    def receive_max_input_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum push size (MB).
        """
        return pulumi.get(self, "receive_max_input_size")

    @receive_max_input_size.setter
    def receive_max_input_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "receive_max_input_size", value)

    @property
    @pulumi.getter(name="repositoryChecksEnabled")
    def repository_checks_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        """
        return pulumi.get(self, "repository_checks_enabled")

    @repository_checks_enabled.setter
    def repository_checks_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "repository_checks_enabled", value)

    @property
    @pulumi.getter(name="repositorySizeLimit")
    def repository_size_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Size limit per repository (MB).
        """
        return pulumi.get(self, "repository_size_limit")

    @repository_size_limit.setter
    def repository_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repository_size_limit", value)

    @property
    @pulumi.getter(name="repositoryStorages")
    def repository_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        """
        return pulumi.get(self, "repository_storages")

    @repository_storages.setter
    def repository_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repository_storages", value)

    @property
    @pulumi.getter(name="repositoryStoragesWeighted")
    def repository_storages_weighted(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        """
        (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        """
        return pulumi.get(self, "repository_storages_weighted")

    @repository_storages_weighted.setter
    def repository_storages_weighted(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "repository_storages_weighted", value)

    @property
    @pulumi.getter(name="requireAdminApprovalAfterUserSignup")
    def require_admin_approval_after_user_signup(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        """
        return pulumi.get(self, "require_admin_approval_after_user_signup")

    @require_admin_approval_after_user_signup.setter
    def require_admin_approval_after_user_signup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_admin_approval_after_user_signup", value)

    @property
    @pulumi.getter(name="requireTwoFactorAuthentication")
    def require_two_factor_authentication(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        """
        return pulumi.get(self, "require_two_factor_authentication")

    @require_two_factor_authentication.setter
    def require_two_factor_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_two_factor_authentication", value)

    @property
    @pulumi.getter(name="restrictedVisibilityLevels")
    def restricted_visibility_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
        """
        return pulumi.get(self, "restricted_visibility_levels")

    @restricted_visibility_levels.setter
    def restricted_visibility_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "restricted_visibility_levels", value)

    @property
    @pulumi.getter(name="rsaKeyRestriction")
    def rsa_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
        """
        return pulumi.get(self, "rsa_key_restriction")

    @rsa_key_restriction.setter
    def rsa_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsa_key_restriction", value)

    @property
    @pulumi.getter(name="searchRateLimit")
    def search_rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
        """
        return pulumi.get(self, "search_rate_limit")

    @search_rate_limit.setter
    def search_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "search_rate_limit", value)

    @property
    @pulumi.getter(name="searchRateLimitUnauthenticated")
    def search_rate_limit_unauthenticated(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
        """
        return pulumi.get(self, "search_rate_limit_unauthenticated")

    @search_rate_limit_unauthenticated.setter
    def search_rate_limit_unauthenticated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "search_rate_limit_unauthenticated", value)

    @property
    @pulumi.getter(name="sendUserConfirmationEmail")
    def send_user_confirmation_email(self) -> Optional[pulumi.Input[bool]]:
        """
        Send confirmation email on sign-up.
        """
        return pulumi.get(self, "send_user_confirmation_email")

    @send_user_confirmation_email.setter
    def send_user_confirmation_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_user_confirmation_email", value)

    @property
    @pulumi.getter(name="sessionExpireDelay")
    def session_expire_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Session duration in minutes. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "session_expire_delay")

    @session_expire_delay.setter
    def session_expire_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expire_delay", value)

    @property
    @pulumi.getter(name="sharedRunnersEnabled")
    def shared_runners_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        """
        return pulumi.get(self, "shared_runners_enabled")

    @shared_runners_enabled.setter
    def shared_runners_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared_runners_enabled", value)

    @property
    @pulumi.getter(name="sharedRunnersMinutes")
    def shared_runners_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        """
        return pulumi.get(self, "shared_runners_minutes")

    @shared_runners_minutes.setter
    def shared_runners_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shared_runners_minutes", value)

    @property
    @pulumi.getter(name="sharedRunnersText")
    def shared_runners_text(self) -> Optional[pulumi.Input[str]]:
        """
        Shared runners text.
        """
        return pulumi.get(self, "shared_runners_text")

    @shared_runners_text.setter
    def shared_runners_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_runners_text", value)

    @property
    @pulumi.getter(name="sidekiqJobLimiterCompressionThresholdBytes")
    def sidekiq_job_limiter_compression_threshold_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
        """
        return pulumi.get(self, "sidekiq_job_limiter_compression_threshold_bytes")

    @sidekiq_job_limiter_compression_threshold_bytes.setter
    def sidekiq_job_limiter_compression_threshold_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sidekiq_job_limiter_compression_threshold_bytes", value)

    @property
    @pulumi.getter(name="sidekiqJobLimiterLimitBytes")
    def sidekiq_job_limiter_limit_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
        """
        return pulumi.get(self, "sidekiq_job_limiter_limit_bytes")

    @sidekiq_job_limiter_limit_bytes.setter
    def sidekiq_job_limiter_limit_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sidekiq_job_limiter_limit_bytes", value)

    @property
    @pulumi.getter(name="sidekiqJobLimiterMode")
    def sidekiq_job_limiter_mode(self) -> Optional[pulumi.Input[str]]:
        """
        track or compress. Sets the behavior for Sidekiq job size limits.
        """
        return pulumi.get(self, "sidekiq_job_limiter_mode")

    @sidekiq_job_limiter_mode.setter
    def sidekiq_job_limiter_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sidekiq_job_limiter_mode", value)

    @property
    @pulumi.getter(name="signInText")
    def sign_in_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text on the login page.
        """
        return pulumi.get(self, "sign_in_text")

    @sign_in_text.setter
    def sign_in_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_text", value)

    @property
    @pulumi.getter(name="signupEnabled")
    def signup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable registration.
        """
        return pulumi.get(self, "signup_enabled")

    @signup_enabled.setter
    def signup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "signup_enabled", value)

    @property
    @pulumi.getter(name="slackAppEnabled")
    def slack_app_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        """
        return pulumi.get(self, "slack_app_enabled")

    @slack_app_enabled.setter
    def slack_app_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "slack_app_enabled", value)

    @property
    @pulumi.getter(name="slackAppId")
    def slack_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The app ID of the Slack-app.
        """
        return pulumi.get(self, "slack_app_id")

    @slack_app_id.setter
    def slack_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_id", value)

    @property
    @pulumi.getter(name="slackAppSecret")
    def slack_app_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The app secret of the Slack-app.
        """
        return pulumi.get(self, "slack_app_secret")

    @slack_app_secret.setter
    def slack_app_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_secret", value)

    @property
    @pulumi.getter(name="slackAppSigningSecret")
    def slack_app_signing_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The signing secret of the Slack-app.
        """
        return pulumi.get(self, "slack_app_signing_secret")

    @slack_app_signing_secret.setter
    def slack_app_signing_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_signing_secret", value)

    @property
    @pulumi.getter(name="slackAppVerificationToken")
    def slack_app_verification_token(self) -> Optional[pulumi.Input[str]]:
        """
        The verification token of the Slack-app.
        """
        return pulumi.get(self, "slack_app_verification_token")

    @slack_app_verification_token.setter
    def slack_app_verification_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_verification_token", value)

    @property
    @pulumi.getter(name="snippetSizeLimit")
    def snippet_size_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max snippet content size in bytes.
        """
        return pulumi.get(self, "snippet_size_limit")

    @snippet_size_limit.setter
    def snippet_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snippet_size_limit", value)

    @property
    @pulumi.getter(name="snowplowAppId")
    def snowplow_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowplow site name / application ID. (for example, gitlab)
        """
        return pulumi.get(self, "snowplow_app_id")

    @snowplow_app_id.setter
    def snowplow_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowplow_app_id", value)

    @property
    @pulumi.getter(name="snowplowCollectorHostname")
    def snowplow_collector_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        """
        return pulumi.get(self, "snowplow_collector_hostname")

    @snowplow_collector_hostname.setter
    def snowplow_collector_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowplow_collector_hostname", value)

    @property
    @pulumi.getter(name="snowplowCookieDomain")
    def snowplow_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowplow cookie domain. (for example, .gitlab.com)
        """
        return pulumi.get(self, "snowplow_cookie_domain")

    @snowplow_cookie_domain.setter
    def snowplow_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowplow_cookie_domain", value)

    @property
    @pulumi.getter(name="snowplowEnabled")
    def snowplow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable snowplow tracking.
        """
        return pulumi.get(self, "snowplow_enabled")

    @snowplow_enabled.setter
    def snowplow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snowplow_enabled", value)

    @property
    @pulumi.getter(name="sourcegraphEnabled")
    def sourcegraph_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
        """
        return pulumi.get(self, "sourcegraph_enabled")

    @sourcegraph_enabled.setter
    def sourcegraph_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sourcegraph_enabled", value)

    @property
    @pulumi.getter(name="sourcegraphPublicOnly")
    def sourcegraph_public_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Blocks Sourcegraph from being loaded on private and internal projects.
        """
        return pulumi.get(self, "sourcegraph_public_only")

    @sourcegraph_public_only.setter
    def sourcegraph_public_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sourcegraph_public_only", value)

    @property
    @pulumi.getter(name="sourcegraphUrl")
    def sourcegraph_url(self) -> Optional[pulumi.Input[str]]:
        """
        The Sourcegraph instance URL for integration.
        """
        return pulumi.get(self, "sourcegraph_url")

    @sourcegraph_url.setter
    def sourcegraph_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sourcegraph_url", value)

    @property
    @pulumi.getter(name="spamCheckApiKey")
    def spam_check_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key used by GitLab for accessing the Spam Check service endpoint.
        """
        return pulumi.get(self, "spam_check_api_key")

    @spam_check_api_key.setter
    def spam_check_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_check_api_key", value)

    @property
    @pulumi.getter(name="spamCheckEndpointEnabled")
    def spam_check_endpoint_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables spam checking using external Spam Check API endpoint.
        """
        return pulumi.get(self, "spam_check_endpoint_enabled")

    @spam_check_endpoint_enabled.setter
    def spam_check_endpoint_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spam_check_endpoint_enabled", value)

    @property
    @pulumi.getter(name="spamCheckEndpointUrl")
    def spam_check_endpoint_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        """
        return pulumi.get(self, "spam_check_endpoint_url")

    @spam_check_endpoint_url.setter
    def spam_check_endpoint_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_check_endpoint_url", value)

    @property
    @pulumi.getter(name="suggestPipelineEnabled")
    def suggest_pipeline_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable pipeline suggestion banner.
        """
        return pulumi.get(self, "suggest_pipeline_enabled")

    @suggest_pipeline_enabled.setter
    def suggest_pipeline_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suggest_pipeline_enabled", value)

    @property
    @pulumi.getter(name="terminalMaxSessionTime")
    def terminal_max_session_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        """
        return pulumi.get(self, "terminal_max_session_time")

    @terminal_max_session_time.setter
    def terminal_max_session_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "terminal_max_session_time", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[str]]:
        """
        (Required by: enforce_terms) Markdown content for the ToS.
        """
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terms", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedApiEnabled")
    def throttle_authenticated_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_authenticated_api_enabled")

    @throttle_authenticated_api_enabled.setter
    def throttle_authenticated_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_authenticated_api_enabled", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedApiPeriodInSeconds")
    def throttle_authenticated_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds).
        """
        return pulumi.get(self, "throttle_authenticated_api_period_in_seconds")

    @throttle_authenticated_api_period_in_seconds.setter
    def throttle_authenticated_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedApiRequestsPerPeriod")
    def throttle_authenticated_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user.
        """
        return pulumi.get(self, "throttle_authenticated_api_requests_per_period")

    @throttle_authenticated_api_requests_per_period.setter
    def throttle_authenticated_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiEnabled")
    def throttle_authenticated_packages_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_enabled")

    @throttle_authenticated_packages_api_enabled.setter
    def throttle_authenticated_packages_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_authenticated_packages_api_enabled", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiPeriodInSeconds")
    def throttle_authenticated_packages_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_period_in_seconds")

    @throttle_authenticated_packages_api_period_in_seconds.setter
    def throttle_authenticated_packages_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_packages_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiRequestsPerPeriod")
    def throttle_authenticated_packages_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user. View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_requests_per_period")

    @throttle_authenticated_packages_api_requests_per_period.setter
    def throttle_authenticated_packages_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_packages_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedWebEnabled")
    def throttle_authenticated_web_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_authenticated_web_enabled")

    @throttle_authenticated_web_enabled.setter
    def throttle_authenticated_web_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_authenticated_web_enabled", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedWebPeriodInSeconds")
    def throttle_authenticated_web_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds).
        """
        return pulumi.get(self, "throttle_authenticated_web_period_in_seconds")

    @throttle_authenticated_web_period_in_seconds.setter
    def throttle_authenticated_web_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_web_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedWebRequestsPerPeriod")
    def throttle_authenticated_web_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user.
        """
        return pulumi.get(self, "throttle_authenticated_web_requests_per_period")

    @throttle_authenticated_web_requests_per_period.setter
    def throttle_authenticated_web_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_web_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiEnabled")
    def throttle_unauthenticated_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_unauthenticated_api_enabled")

    @throttle_unauthenticated_api_enabled.setter
    def throttle_unauthenticated_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_unauthenticated_api_enabled", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiPeriodInSeconds")
    def throttle_unauthenticated_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period in seconds.
        """
        return pulumi.get(self, "throttle_unauthenticated_api_period_in_seconds")

    @throttle_unauthenticated_api_period_in_seconds.setter
    def throttle_unauthenticated_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiRequestsPerPeriod")
    def throttle_unauthenticated_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Max requests per period per IP.
        """
        return pulumi.get(self, "throttle_unauthenticated_api_requests_per_period")

    @throttle_unauthenticated_api_requests_per_period.setter
    def throttle_unauthenticated_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiEnabled")
    def throttle_unauthenticated_packages_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_enabled")

    @throttle_unauthenticated_packages_api_enabled.setter
    def throttle_unauthenticated_packages_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_unauthenticated_packages_api_enabled", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiPeriodInSeconds")
    def throttle_unauthenticated_packages_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_period_in_seconds")

    @throttle_unauthenticated_packages_api_period_in_seconds.setter
    def throttle_unauthenticated_packages_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_packages_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiRequestsPerPeriod")
    def throttle_unauthenticated_packages_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user. View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_requests_per_period")

    @throttle_unauthenticated_packages_api_requests_per_period.setter
    def throttle_unauthenticated_packages_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_packages_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebEnabled")
    def throttle_unauthenticated_web_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_unauthenticated_web_enabled")

    @throttle_unauthenticated_web_enabled.setter
    def throttle_unauthenticated_web_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_unauthenticated_web_enabled", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebPeriodInSeconds")
    def throttle_unauthenticated_web_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period in seconds.
        """
        return pulumi.get(self, "throttle_unauthenticated_web_period_in_seconds")

    @throttle_unauthenticated_web_period_in_seconds.setter
    def throttle_unauthenticated_web_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_web_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebRequestsPerPeriod")
    def throttle_unauthenticated_web_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Max requests per period per IP.
        """
        return pulumi.get(self, "throttle_unauthenticated_web_requests_per_period")

    @throttle_unauthenticated_web_requests_per_period.setter
    def throttle_unauthenticated_web_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_web_requests_per_period", value)

    @property
    @pulumi.getter(name="timeTrackingLimitToHours")
    def time_tracking_limit_to_hours(self) -> Optional[pulumi.Input[bool]]:
        """
        Limit display of time tracking units to hours.
        """
        return pulumi.get(self, "time_tracking_limit_to_hours")

    @time_tracking_limit_to_hours.setter
    def time_tracking_limit_to_hours(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "time_tracking_limit_to_hours", value)

    @property
    @pulumi.getter(name="twoFactorGracePeriod")
    def two_factor_grace_period(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        """
        return pulumi.get(self, "two_factor_grace_period")

    @two_factor_grace_period.setter
    def two_factor_grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_grace_period", value)

    @property
    @pulumi.getter(name="uniqueIpsLimitEnabled")
    def unique_ips_limit_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        """
        return pulumi.get(self, "unique_ips_limit_enabled")

    @unique_ips_limit_enabled.setter
    def unique_ips_limit_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique_ips_limit_enabled", value)

    @property
    @pulumi.getter(name="uniqueIpsLimitPerUser")
    def unique_ips_limit_per_user(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPs per user.
        """
        return pulumi.get(self, "unique_ips_limit_per_user")

    @unique_ips_limit_per_user.setter
    def unique_ips_limit_per_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unique_ips_limit_per_user", value)

    @property
    @pulumi.getter(name="uniqueIpsLimitTimeWindow")
    def unique_ips_limit_time_window(self) -> Optional[pulumi.Input[int]]:
        """
        How many seconds an IP is counted towards the limit.
        """
        return pulumi.get(self, "unique_ips_limit_time_window")

    @unique_ips_limit_time_window.setter
    def unique_ips_limit_time_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unique_ips_limit_time_window", value)

    @property
    @pulumi.getter(name="usagePingEnabled")
    def usage_ping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Every week GitLab reports license usage back to GitLab, Inc.
        """
        return pulumi.get(self, "usage_ping_enabled")

    @usage_ping_enabled.setter
    def usage_ping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usage_ping_enabled", value)

    @property
    @pulumi.getter(name="userDeactivationEmailsEnabled")
    def user_deactivation_emails_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Send an email to users upon account deactivation.
        """
        return pulumi.get(self, "user_deactivation_emails_enabled")

    @user_deactivation_emails_enabled.setter
    def user_deactivation_emails_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_deactivation_emails_enabled", value)

    @property
    @pulumi.getter(name="userDefaultExternal")
    def user_default_external(self) -> Optional[pulumi.Input[bool]]:
        """
        Newly registered users are external by default.
        """
        return pulumi.get(self, "user_default_external")

    @user_default_external.setter
    def user_default_external(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_default_external", value)

    @property
    @pulumi.getter(name="userDefaultInternalRegex")
    def user_default_internal_regex(self) -> Optional[pulumi.Input[str]]:
        """
        Specify an email address regex pattern to identify default internal users.
        """
        return pulumi.get(self, "user_default_internal_regex")

    @user_default_internal_regex.setter
    def user_default_internal_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_default_internal_regex", value)

    @property
    @pulumi.getter(name="userOauthApplications")
    def user_oauth_applications(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow users to register any application to use GitLab as an OAuth provider.
        """
        return pulumi.get(self, "user_oauth_applications")

    @user_oauth_applications.setter
    def user_oauth_applications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_oauth_applications", value)

    @property
    @pulumi.getter(name="userShowAddSshKeyMessage")
    def user_show_add_ssh_key_message(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        """
        return pulumi.get(self, "user_show_add_ssh_key_message")

    @user_show_add_ssh_key_message.setter
    def user_show_add_ssh_key_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_show_add_ssh_key_message", value)

    @property
    @pulumi.getter(name="versionCheckEnabled")
    def version_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Let GitLab inform you when an update is available.
        """
        return pulumi.get(self, "version_check_enabled")

    @version_check_enabled.setter
    def version_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version_check_enabled", value)

    @property
    @pulumi.getter(name="webIdeClientsidePreviewEnabled")
    def web_ide_clientside_preview_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        """
        return pulumi.get(self, "web_ide_clientside_preview_enabled")

    @web_ide_clientside_preview_enabled.setter
    def web_ide_clientside_preview_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "web_ide_clientside_preview_enabled", value)

    @property
    @pulumi.getter(name="whatsNewVariant")
    def whats_new_variant(self) -> Optional[pulumi.Input[str]]:
        """
        What’s new variant, possible values: all*tiers, current*tier, and disabled.
        """
        return pulumi.get(self, "whats_new_variant")

    @whats_new_variant.setter
    def whats_new_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whats_new_variant", value)

    @property
    @pulumi.getter(name="wikiPageMaxContentBytes")
    def wiki_page_max_content_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        """
        return pulumi.get(self, "wiki_page_max_content_bytes")

    @wiki_page_max_content_bytes.setter
    def wiki_page_max_content_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wiki_page_max_content_bytes", value)


@pulumi.input_type
class _ApplicationSettingsState:
    def __init__(__self__, *,
                 abuse_notification_email: Optional[pulumi.Input[str]] = None,
                 admin_mode: Optional[pulumi.Input[bool]] = None,
                 after_sign_out_path: Optional[pulumi.Input[str]] = None,
                 after_sign_up_text: Optional[pulumi.Input[str]] = None,
                 akismet_api_key: Optional[pulumi.Input[str]] = None,
                 akismet_enabled: Optional[pulumi.Input[bool]] = None,
                 allow_group_owners_to_manage_ldap: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_system_hooks: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_web_hooks_and_services: Optional[pulumi.Input[bool]] = None,
                 archive_builds_in_human_readable: Optional[pulumi.Input[str]] = None,
                 asset_proxy_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 asset_proxy_enabled: Optional[pulumi.Input[bool]] = None,
                 asset_proxy_secret_key: Optional[pulumi.Input[str]] = None,
                 asset_proxy_url: Optional[pulumi.Input[str]] = None,
                 authorized_keys_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_devops_domain: Optional[pulumi.Input[str]] = None,
                 auto_devops_enabled: Optional[pulumi.Input[bool]] = None,
                 automatic_purchased_storage_allocation: Optional[pulumi.Input[bool]] = None,
                 can_create_group: Optional[pulumi.Input[bool]] = None,
                 check_namespace_plan: Optional[pulumi.Input[bool]] = None,
                 commit_email_hostname: Optional[pulumi.Input[str]] = None,
                 container_expiration_policies_enable_historic_entries: Optional[pulumi.Input[bool]] = None,
                 container_registry_cleanup_tags_service_max_list_size: Optional[pulumi.Input[int]] = None,
                 container_registry_delete_tags_service_timeout: Optional[pulumi.Input[int]] = None,
                 container_registry_expiration_policies_caching: Optional[pulumi.Input[bool]] = None,
                 container_registry_expiration_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 container_registry_token_expire_delay: Optional[pulumi.Input[int]] = None,
                 deactivate_dormant_users: Optional[pulumi.Input[bool]] = None,
                 default_artifacts_expire_in: Optional[pulumi.Input[str]] = None,
                 default_branch_name: Optional[pulumi.Input[str]] = None,
                 default_branch_protection: Optional[pulumi.Input[int]] = None,
                 default_ci_config_path: Optional[pulumi.Input[str]] = None,
                 default_group_visibility: Optional[pulumi.Input[str]] = None,
                 default_project_creation: Optional[pulumi.Input[int]] = None,
                 default_project_visibility: Optional[pulumi.Input[str]] = None,
                 default_projects_limit: Optional[pulumi.Input[int]] = None,
                 default_snippet_visibility: Optional[pulumi.Input[str]] = None,
                 delayed_group_deletion: Optional[pulumi.Input[bool]] = None,
                 delayed_project_deletion: Optional[pulumi.Input[bool]] = None,
                 delete_inactive_projects: Optional[pulumi.Input[bool]] = None,
                 deletion_adjourned_period: Optional[pulumi.Input[int]] = None,
                 diff_max_files: Optional[pulumi.Input[int]] = None,
                 diff_max_lines: Optional[pulumi.Input[int]] = None,
                 diff_max_patch_bytes: Optional[pulumi.Input[int]] = None,
                 disable_feed_token: Optional[pulumi.Input[bool]] = None,
                 disabled_oauth_sign_in_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_rebinding_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain_denylist_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_denylists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 eks_access_key_id: Optional[pulumi.Input[str]] = None,
                 eks_account_id: Optional[pulumi.Input[str]] = None,
                 eks_integration_enabled: Optional[pulumi.Input[bool]] = None,
                 eks_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_aws_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_region: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_indexed_field_length_limit: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexed_file_size_limit_kb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_limit_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_max_bulk_concurrency: Optional[pulumi.Input[int]] = None,
                 elasticsearch_max_bulk_size_mb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_namespace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_password: Optional[pulumi.Input[str]] = None,
                 elasticsearch_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_search: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_username: Optional[pulumi.Input[str]] = None,
                 email_additional_text: Optional[pulumi.Input[str]] = None,
                 email_author_in_body: Optional[pulumi.Input[bool]] = None,
                 enabled_git_access_protocol: Optional[pulumi.Input[str]] = None,
                 enforce_namespace_storage_limit: Optional[pulumi.Input[bool]] = None,
                 enforce_terms: Optional[pulumi.Input[bool]] = None,
                 external_auth_client_cert: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key_pass: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_default_label: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_enabled: Optional[pulumi.Input[bool]] = None,
                 external_authorization_service_timeout: Optional[pulumi.Input[float]] = None,
                 external_authorization_service_url: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_timeout: Optional[pulumi.Input[int]] = None,
                 external_pipeline_validation_service_token: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_url: Optional[pulumi.Input[str]] = None,
                 file_template_project_id: Optional[pulumi.Input[int]] = None,
                 first_day_of_week: Optional[pulumi.Input[int]] = None,
                 geo_node_allowed_ips: Optional[pulumi.Input[str]] = None,
                 geo_status_timeout: Optional[pulumi.Input[int]] = None,
                 git_rate_limit_users_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_two_factor_session_expiry: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_default: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_fast: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_medium: Optional[pulumi.Input[int]] = None,
                 grafana_enabled: Optional[pulumi.Input[bool]] = None,
                 grafana_url: Optional[pulumi.Input[str]] = None,
                 gravatar_enabled: Optional[pulumi.Input[bool]] = None,
                 group_owners_can_manage_default_branch_protection: Optional[pulumi.Input[bool]] = None,
                 hashed_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 help_page_hide_commercial_content: Optional[pulumi.Input[bool]] = None,
                 help_page_support_url: Optional[pulumi.Input[str]] = None,
                 help_page_text: Optional[pulumi.Input[str]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 hide_third_party_offers: Optional[pulumi.Input[bool]] = None,
                 home_page_url: Optional[pulumi.Input[str]] = None,
                 housekeeping_enabled: Optional[pulumi.Input[bool]] = None,
                 housekeeping_full_repack_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_gc_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_incremental_repack_period: Optional[pulumi.Input[int]] = None,
                 html_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 import_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 in_product_marketing_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 inactive_projects_delete_after_months: Optional[pulumi.Input[int]] = None,
                 inactive_projects_min_size_mb: Optional[pulumi.Input[int]] = None,
                 inactive_projects_send_warning_email_after_months: Optional[pulumi.Input[int]] = None,
                 invisible_captcha_enabled: Optional[pulumi.Input[bool]] = None,
                 issues_create_limit: Optional[pulumi.Input[int]] = None,
                 keep_latest_artifact: Optional[pulumi.Input[bool]] = None,
                 local_markdown_version: Optional[pulumi.Input[int]] = None,
                 mailgun_events_enabled: Optional[pulumi.Input[bool]] = None,
                 mailgun_signing_key: Optional[pulumi.Input[str]] = None,
                 maintenance_mode: Optional[pulumi.Input[bool]] = None,
                 maintenance_mode_message: Optional[pulumi.Input[str]] = None,
                 max_artifacts_size: Optional[pulumi.Input[int]] = None,
                 max_attachment_size: Optional[pulumi.Input[int]] = None,
                 max_export_size: Optional[pulumi.Input[int]] = None,
                 max_import_size: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads_within_time_period: Optional[pulumi.Input[int]] = None,
                 max_pages_size: Optional[pulumi.Input[int]] = None,
                 max_personal_access_token_lifetime: Optional[pulumi.Input[int]] = None,
                 max_ssh_key_lifetime: Optional[pulumi.Input[int]] = None,
                 metrics_method_call_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_available: Optional[pulumi.Input[bool]] = None,
                 mirror_capacity_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_max_capacity: Optional[pulumi.Input[int]] = None,
                 mirror_max_delay: Optional[pulumi.Input[int]] = None,
                 npm_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 outbound_local_requests_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 package_registry_cleanup_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 pages_domain_verification_enabled: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_git: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_web: Optional[pulumi.Input[bool]] = None,
                 password_lowercase_required: Optional[pulumi.Input[bool]] = None,
                 password_number_required: Optional[pulumi.Input[bool]] = None,
                 password_symbol_required: Optional[pulumi.Input[bool]] = None,
                 password_uppercase_required: Optional[pulumi.Input[bool]] = None,
                 performance_bar_allowed_group_path: Optional[pulumi.Input[str]] = None,
                 personal_access_token_prefix: Optional[pulumi.Input[str]] = None,
                 pipeline_limit_per_project_user_sha: Optional[pulumi.Input[int]] = None,
                 plantuml_enabled: Optional[pulumi.Input[bool]] = None,
                 plantuml_url: Optional[pulumi.Input[str]] = None,
                 polling_interval_multiplier: Optional[pulumi.Input[float]] = None,
                 project_export_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 protected_ci_variables: Optional[pulumi.Input[bool]] = None,
                 push_event_activities_limit: Optional[pulumi.Input[int]] = None,
                 push_event_hooks_limit: Optional[pulumi.Input[int]] = None,
                 pypi_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 rate_limiting_response_text: Optional[pulumi.Input[str]] = None,
                 raw_blob_request_limit: Optional[pulumi.Input[int]] = None,
                 recaptcha_enabled: Optional[pulumi.Input[bool]] = None,
                 recaptcha_private_key: Optional[pulumi.Input[str]] = None,
                 recaptcha_site_key: Optional[pulumi.Input[str]] = None,
                 receive_max_input_size: Optional[pulumi.Input[int]] = None,
                 repository_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 repository_size_limit: Optional[pulumi.Input[int]] = None,
                 repository_storages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repository_storages_weighted: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 require_admin_approval_after_user_signup: Optional[pulumi.Input[bool]] = None,
                 require_two_factor_authentication: Optional[pulumi.Input[bool]] = None,
                 restricted_visibility_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 search_rate_limit: Optional[pulumi.Input[int]] = None,
                 search_rate_limit_unauthenticated: Optional[pulumi.Input[int]] = None,
                 send_user_confirmation_email: Optional[pulumi.Input[bool]] = None,
                 session_expire_delay: Optional[pulumi.Input[int]] = None,
                 shared_runners_enabled: Optional[pulumi.Input[bool]] = None,
                 shared_runners_minutes: Optional[pulumi.Input[int]] = None,
                 shared_runners_text: Optional[pulumi.Input[str]] = None,
                 sidekiq_job_limiter_compression_threshold_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_limit_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_mode: Optional[pulumi.Input[str]] = None,
                 sign_in_text: Optional[pulumi.Input[str]] = None,
                 signup_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_id: Optional[pulumi.Input[str]] = None,
                 slack_app_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_signing_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_verification_token: Optional[pulumi.Input[str]] = None,
                 snippet_size_limit: Optional[pulumi.Input[int]] = None,
                 snowplow_app_id: Optional[pulumi.Input[str]] = None,
                 snowplow_collector_hostname: Optional[pulumi.Input[str]] = None,
                 snowplow_cookie_domain: Optional[pulumi.Input[str]] = None,
                 snowplow_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_public_only: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_url: Optional[pulumi.Input[str]] = None,
                 spam_check_api_key: Optional[pulumi.Input[str]] = None,
                 spam_check_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 spam_check_endpoint_url: Optional[pulumi.Input[str]] = None,
                 suggest_pipeline_enabled: Optional[pulumi.Input[bool]] = None,
                 terminal_max_session_time: Optional[pulumi.Input[int]] = None,
                 terms: Optional[pulumi.Input[str]] = None,
                 throttle_authenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 time_tracking_limit_to_hours: Optional[pulumi.Input[bool]] = None,
                 two_factor_grace_period: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_enabled: Optional[pulumi.Input[bool]] = None,
                 unique_ips_limit_per_user: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_time_window: Optional[pulumi.Input[int]] = None,
                 usage_ping_enabled: Optional[pulumi.Input[bool]] = None,
                 user_deactivation_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 user_default_external: Optional[pulumi.Input[bool]] = None,
                 user_default_internal_regex: Optional[pulumi.Input[str]] = None,
                 user_oauth_applications: Optional[pulumi.Input[bool]] = None,
                 user_show_add_ssh_key_message: Optional[pulumi.Input[bool]] = None,
                 version_check_enabled: Optional[pulumi.Input[bool]] = None,
                 web_ide_clientside_preview_enabled: Optional[pulumi.Input[bool]] = None,
                 whats_new_variant: Optional[pulumi.Input[str]] = None,
                 wiki_page_max_content_bytes: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ApplicationSettings resources.
        :param pulumi.Input[str] abuse_notification_email: If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        :param pulumi.Input[bool] admin_mode: Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        :param pulumi.Input[str] after_sign_out_path: Where to redirect users after logout.
        :param pulumi.Input[str] after_sign_up_text: Text shown to the user after signing up.
        :param pulumi.Input[str] akismet_api_key: API key for Akismet spam protection.
        :param pulumi.Input[bool] akismet_enabled: (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        :param pulumi.Input[bool] allow_group_owners_to_manage_ldap: Set to true to allow group owners to manage LDAP.
        :param pulumi.Input[bool] allow_local_requests_from_system_hooks: Allow requests to the local network from system hooks.
        :param pulumi.Input[bool] allow_local_requests_from_web_hooks_and_services: Allow requests to the local network from web hooks and services.
        :param pulumi.Input[str] archive_builds_in_human_readable: Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] asset_proxy_allowlists: Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] asset_proxy_enabled: (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_secret_key: Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_url: URL of the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] authorized_keys_enabled: By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        :param pulumi.Input[str] auto_devops_domain: Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        :param pulumi.Input[bool] auto_devops_enabled: Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        :param pulumi.Input[bool] automatic_purchased_storage_allocation: Enabling this permits automatic allocation of purchased storage in a namespace.
        :param pulumi.Input[bool] can_create_group: Indicates whether users can create top-level groups. Introduced in GitLab 15.5.
        :param pulumi.Input[bool] check_namespace_plan: Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        :param pulumi.Input[str] commit_email_hostname: Custom hostname (for private commit emails).
        :param pulumi.Input[bool] container_expiration_policies_enable_historic_entries: Enable cleanup policies for all projects.
        :param pulumi.Input[int] container_registry_cleanup_tags_service_max_list_size: The maximum number of tags that can be deleted in a single execution of cleanup policies.
        :param pulumi.Input[int] container_registry_delete_tags_service_timeout: The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        :param pulumi.Input[bool] container_registry_expiration_policies_caching: Caching during the execution of cleanup policies.
        :param pulumi.Input[int] container_registry_expiration_policies_worker_capacity: Number of workers for cleanup policies.
        :param pulumi.Input[int] container_registry_token_expire_delay: Container Registry token duration in minutes.
        :param pulumi.Input[bool] deactivate_dormant_users: Enable automatic deactivation of dormant users.
        :param pulumi.Input[str] default_artifacts_expire_in: Set the default expiration time for each job’s artifacts.
        :param pulumi.Input[str] default_branch_name: Instance-level custom initial branch name (introduced in GitLab 13.2).
        :param pulumi.Input[int] default_branch_protection: Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        :param pulumi.Input[str] default_ci_config_path: Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        :param pulumi.Input[str] default_group_visibility: What visibility level new groups receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_project_creation: Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        :param pulumi.Input[str] default_project_visibility: What visibility level new projects receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_projects_limit: Project limit per user.
        :param pulumi.Input[str] default_snippet_visibility: What visibility level new snippets receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[bool] delayed_group_deletion: Enable delayed group deletion. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        :param pulumi.Input[bool] delayed_project_deletion: Enable delayed project deletion by default in new groups. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        :param pulumi.Input[bool] delete_inactive_projects: Enable inactive project deletion feature. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion).
        :param pulumi.Input[int] deletion_adjourned_period: The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        :param pulumi.Input[int] diff_max_files: Maximum files in a diff.
        :param pulumi.Input[int] diff_max_lines: Maximum lines in a diff.
        :param pulumi.Input[int] diff_max_patch_bytes: Maximum diff patch size, in bytes.
        :param pulumi.Input[bool] disable_feed_token: Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_oauth_sign_in_sources: Disabled OAuth sign-in sources.
        :param pulumi.Input[bool] dns_rebinding_protection_enabled: Enforce DNS rebinding attack protection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_allowlists: Force people to use only corporate emails for sign-up. Null means there is no restriction.
        :param pulumi.Input[bool] domain_denylist_enabled: (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_denylists: Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        :param pulumi.Input[int] dsa_key_restriction: The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
        :param pulumi.Input[int] ecdsa_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
        :param pulumi.Input[int] ecdsa_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
        :param pulumi.Input[int] ed25519_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
        :param pulumi.Input[int] ed25519_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
        :param pulumi.Input[str] eks_access_key_id: AWS IAM access key ID.
        :param pulumi.Input[str] eks_account_id: Amazon account ID.
        :param pulumi.Input[bool] eks_integration_enabled: Enable integration with Amazon EKS.
        :param pulumi.Input[str] eks_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[bool] elasticsearch_aws: Enable the use of AWS hosted Elasticsearch.
        :param pulumi.Input[str] elasticsearch_aws_access_key: AWS IAM access key.
        :param pulumi.Input[str] elasticsearch_aws_region: The AWS region the Elasticsearch domain is configured.
        :param pulumi.Input[str] elasticsearch_aws_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[int] elasticsearch_indexed_field_length_limit: Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        :param pulumi.Input[int] elasticsearch_indexed_file_size_limit_kb: Maximum size of repository and wiki files that are indexed by Elasticsearch.
        :param pulumi.Input[bool] elasticsearch_indexing: Enable Elasticsearch indexing.
        :param pulumi.Input[bool] elasticsearch_limit_indexing: Limit Elasticsearch to index certain namespaces and projects.
        :param pulumi.Input[int] elasticsearch_max_bulk_concurrency: Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        :param pulumi.Input[int] elasticsearch_max_bulk_size_mb: Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_namespace_ids: The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[str] elasticsearch_password: The password of your Elasticsearch instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_project_ids: The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[bool] elasticsearch_search: Enable Elasticsearch search.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_urls: The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        :param pulumi.Input[str] elasticsearch_username: The username of your Elasticsearch instance.
        :param pulumi.Input[str] email_additional_text: Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        :param pulumi.Input[bool] email_author_in_body: Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        :param pulumi.Input[str] enabled_git_access_protocol: Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        :param pulumi.Input[bool] enforce_namespace_storage_limit: Enabling this permits enforcement of namespace storage limits.
        :param pulumi.Input[bool] enforce_terms: (If enabled, requires: terms) Enforce application ToS to all users.
        :param pulumi.Input[str] external_auth_client_cert: (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        :param pulumi.Input[str] external_auth_client_key: Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        :param pulumi.Input[str] external_auth_client_key_pass: Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        :param pulumi.Input[str] external_authorization_service_default_label: The default classification label to use when requesting authorization and no classification label has been specified on the project.
        :param pulumi.Input[bool] external_authorization_service_enabled: (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        :param pulumi.Input[float] external_authorization_service_timeout: The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        :param pulumi.Input[str] external_authorization_service_url: URL to which authorization requests are directed.
        :param pulumi.Input[int] external_pipeline_validation_service_timeout: How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        :param pulumi.Input[str] external_pipeline_validation_service_token: Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        :param pulumi.Input[str] external_pipeline_validation_service_url: URL to use for pipeline validation requests.
        :param pulumi.Input[int] file_template_project_id: The ID of a project to load custom file templates from.
        :param pulumi.Input[int] first_day_of_week: Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
        :param pulumi.Input[str] geo_node_allowed_ips: Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        :param pulumi.Input[int] geo_status_timeout: The amount of seconds after which a request to get a secondary node status times out.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] git_rate_limit_users_allowlists: List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Introduced in GitLab 15.2.
        :param pulumi.Input[int] git_two_factor_session_expiry: Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        :param pulumi.Input[int] gitaly_timeout_default: Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_fast: Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_medium: Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        :param pulumi.Input[bool] grafana_enabled: Enable Grafana.
        :param pulumi.Input[str] grafana_url: Grafana URL.
        :param pulumi.Input[bool] gravatar_enabled: Enable Gravatar.
        :param pulumi.Input[bool] group_owners_can_manage_default_branch_protection: Prevent overrides of default branch protection.
        :param pulumi.Input[bool] hashed_storage_enabled: Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        :param pulumi.Input[bool] help_page_hide_commercial_content: Hide marketing-related entries from help.
        :param pulumi.Input[str] help_page_support_url: Alternate support URL for help page and help dropdown.
        :param pulumi.Input[str] help_page_text: Custom text displayed on the help page.
        :param pulumi.Input[str] help_text: GitLab server administrator information.
        :param pulumi.Input[bool] hide_third_party_offers: Do not display offers from third parties in GitLab.
        :param pulumi.Input[str] home_page_url: Redirect to this URL when not logged in.
        :param pulumi.Input[bool] housekeeping_enabled: (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        :param pulumi.Input[int] housekeeping_full_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[int] housekeeping_gc_period: Number of Git pushes after which git gc is run.
        :param pulumi.Input[int] housekeeping_incremental_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[bool] html_emails_enabled: Enable HTML emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] import_sources: Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `Project`, `gitea`, `manifest`
        :param pulumi.Input[bool] in_product_marketing_emails_enabled: Enable in-product marketing emails.
        :param pulumi.Input[int] inactive_projects_delete_after_months: If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_min_size_mb: If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_send_warning_email_after_months: If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[bool] invisible_captcha_enabled: Enable Invisible CAPTCHA spam detection during sign-up.
        :param pulumi.Input[int] issues_create_limit: Max number of issue creation requests per minute per user.
        :param pulumi.Input[bool] keep_latest_artifact: Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
        :param pulumi.Input[int] local_markdown_version: Increase this value when any cached Markdown should be invalidated.
        :param pulumi.Input[bool] mailgun_events_enabled: Enable Mailgun event receiver.
        :param pulumi.Input[str] mailgun_signing_key: The Mailgun HTTP webhook signing key for receiving events from webhook.
        :param pulumi.Input[bool] maintenance_mode: When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        :param pulumi.Input[str] maintenance_mode_message: Message displayed when instance is in maintenance mode.
        :param pulumi.Input[int] max_artifacts_size: Maximum artifacts size in MB.
        :param pulumi.Input[int] max_attachment_size: Limit attachment size in MB.
        :param pulumi.Input[int] max_export_size: Maximum export size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_import_size: Maximum import size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_number_of_repository_downloads: Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_number_of_repository_downloads_within_time_period: Reporting time period (in seconds). Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_pages_size: Maximum size of pages repositories in MB.
        :param pulumi.Input[int] max_personal_access_token_lifetime: Maximum allowable lifetime for access tokens in days.
        :param pulumi.Input[int] max_ssh_key_lifetime: Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        :param pulumi.Input[int] metrics_method_call_threshold: A method call is only tracked when it takes longer than the given amount of milliseconds.
        :param pulumi.Input[bool] mirror_available: Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        :param pulumi.Input[int] mirror_capacity_threshold: Minimum capacity to be available before scheduling more mirrors preemptively.
        :param pulumi.Input[int] mirror_max_capacity: Maximum number of mirrors that can be synchronizing at the same time.
        :param pulumi.Input[int] mirror_max_delay: Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        :param pulumi.Input[bool] npm_package_requests_forwarding: Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outbound_local_requests_whitelists: Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        :param pulumi.Input[int] package_registry_cleanup_policies_worker_capacity: Number of workers assigned to the packages cleanup policies.
        :param pulumi.Input[bool] pages_domain_verification_enabled: Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        :param pulumi.Input[bool] password_authentication_enabled_for_git: Enable authentication for Git over HTTP(S) via a GitLab account password.
        :param pulumi.Input[bool] password_authentication_enabled_for_web: Enable authentication for the web interface via a GitLab account password.
        :param pulumi.Input[bool] password_lowercase_required: Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_number_required: Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_symbol_required: Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_uppercase_required: Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[str] performance_bar_allowed_group_path: Path of the group that is allowed to toggle the performance bar.
        :param pulumi.Input[str] personal_access_token_prefix: Prefix for all generated personal access tokens.
        :param pulumi.Input[int] pipeline_limit_per_project_user_sha: Maximum number of pipeline creation requests per minute per user and commit.
        :param pulumi.Input[bool] plantuml_enabled: (If enabled, requires: plantuml_url) Enable PlantUML integration.
        :param pulumi.Input[str] plantuml_url: The PlantUML instance URL for integration.
        :param pulumi.Input[float] polling_interval_multiplier: Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        :param pulumi.Input[bool] project_export_enabled: Enable project export.
        :param pulumi.Input[bool] prometheus_metrics_enabled: Enable Prometheus metrics.
        :param pulumi.Input[bool] protected_ci_variables: CI/CD variables are protected by default.
        :param pulumi.Input[int] push_event_activities_limit: Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        :param pulumi.Input[int] push_event_hooks_limit: Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        :param pulumi.Input[bool] pypi_package_requests_forwarding: Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        :param pulumi.Input[str] rate_limiting_response_text: When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        :param pulumi.Input[int] raw_blob_request_limit: Max number of requests per minute for each raw path. To disable throttling set to 0.
        :param pulumi.Input[bool] recaptcha_enabled: (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        :param pulumi.Input[str] recaptcha_private_key: Private key for reCAPTCHA.
        :param pulumi.Input[str] recaptcha_site_key: Site key for reCAPTCHA.
        :param pulumi.Input[int] receive_max_input_size: Maximum push size (MB).
        :param pulumi.Input[bool] repository_checks_enabled: GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        :param pulumi.Input[int] repository_size_limit: Size limit per repository (MB).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repository_storages: (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] repository_storages_weighted: (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        :param pulumi.Input[bool] require_admin_approval_after_user_signup: When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        :param pulumi.Input[bool] require_two_factor_authentication: (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] restricted_visibility_levels: Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
        :param pulumi.Input[int] rsa_key_restriction: The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
        :param pulumi.Input[int] search_rate_limit: Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
        :param pulumi.Input[int] search_rate_limit_unauthenticated: Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
        :param pulumi.Input[bool] send_user_confirmation_email: Send confirmation email on sign-up.
        :param pulumi.Input[int] session_expire_delay: Session duration in minutes. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] shared_runners_enabled: (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        :param pulumi.Input[int] shared_runners_minutes: Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        :param pulumi.Input[str] shared_runners_text: Shared runners text.
        :param pulumi.Input[int] sidekiq_job_limiter_compression_threshold_bytes: The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
        :param pulumi.Input[int] sidekiq_job_limiter_limit_bytes: The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
        :param pulumi.Input[str] sidekiq_job_limiter_mode: track or compress. Sets the behavior for Sidekiq job size limits.
        :param pulumi.Input[str] sign_in_text: Text on the login page.
        :param pulumi.Input[bool] signup_enabled: Enable registration.
        :param pulumi.Input[bool] slack_app_enabled: (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        :param pulumi.Input[str] slack_app_id: The app ID of the Slack-app.
        :param pulumi.Input[str] slack_app_secret: The app secret of the Slack-app.
        :param pulumi.Input[str] slack_app_signing_secret: The signing secret of the Slack-app.
        :param pulumi.Input[str] slack_app_verification_token: The verification token of the Slack-app.
        :param pulumi.Input[int] snippet_size_limit: Max snippet content size in bytes.
        :param pulumi.Input[str] snowplow_app_id: The Snowplow site name / application ID. (for example, gitlab)
        :param pulumi.Input[str] snowplow_collector_hostname: The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        :param pulumi.Input[str] snowplow_cookie_domain: The Snowplow cookie domain. (for example, .gitlab.com)
        :param pulumi.Input[bool] snowplow_enabled: Enable snowplow tracking.
        :param pulumi.Input[bool] sourcegraph_enabled: Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
        :param pulumi.Input[bool] sourcegraph_public_only: Blocks Sourcegraph from being loaded on private and internal projects.
        :param pulumi.Input[str] sourcegraph_url: The Sourcegraph instance URL for integration.
        :param pulumi.Input[str] spam_check_api_key: API key used by GitLab for accessing the Spam Check service endpoint.
        :param pulumi.Input[bool] spam_check_endpoint_enabled: Enables spam checking using external Spam Check API endpoint.
        :param pulumi.Input[str] spam_check_endpoint_url: URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        :param pulumi.Input[bool] suggest_pipeline_enabled: Enable pipeline suggestion banner.
        :param pulumi.Input[int] terminal_max_session_time: Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        :param pulumi.Input[str] terms: (Required by: enforce_terms) Markdown content for the ToS.
        :param pulumi.Input[bool] throttle_authenticated_api_enabled: (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_api_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_api_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_authenticated_packages_api_enabled: (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_authenticated_web_enabled: (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_web_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_web_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_unauthenticated_api_enabled: (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_api_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_api_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] throttle_unauthenticated_packages_api_enabled: (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_unauthenticated_web_enabled: (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_web_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_web_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] time_tracking_limit_to_hours: Limit display of time tracking units to hours.
        :param pulumi.Input[int] two_factor_grace_period: Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        :param pulumi.Input[bool] unique_ips_limit_enabled: (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        :param pulumi.Input[int] unique_ips_limit_per_user: Maximum number of IPs per user.
        :param pulumi.Input[int] unique_ips_limit_time_window: How many seconds an IP is counted towards the limit.
        :param pulumi.Input[bool] usage_ping_enabled: Every week GitLab reports license usage back to GitLab, Inc.
        :param pulumi.Input[bool] user_deactivation_emails_enabled: Send an email to users upon account deactivation.
        :param pulumi.Input[bool] user_default_external: Newly registered users are external by default.
        :param pulumi.Input[str] user_default_internal_regex: Specify an email address regex pattern to identify default internal users.
        :param pulumi.Input[bool] user_oauth_applications: Allow users to register any application to use GitLab as an OAuth provider.
        :param pulumi.Input[bool] user_show_add_ssh_key_message: When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        :param pulumi.Input[bool] version_check_enabled: Let GitLab inform you when an update is available.
        :param pulumi.Input[bool] web_ide_clientside_preview_enabled: Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        :param pulumi.Input[str] whats_new_variant: What’s new variant, possible values: all*tiers, current*tier, and disabled.
        :param pulumi.Input[int] wiki_page_max_content_bytes: Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        """
        _ApplicationSettingsState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abuse_notification_email=abuse_notification_email,
            admin_mode=admin_mode,
            after_sign_out_path=after_sign_out_path,
            after_sign_up_text=after_sign_up_text,
            akismet_api_key=akismet_api_key,
            akismet_enabled=akismet_enabled,
            allow_group_owners_to_manage_ldap=allow_group_owners_to_manage_ldap,
            allow_local_requests_from_system_hooks=allow_local_requests_from_system_hooks,
            allow_local_requests_from_web_hooks_and_services=allow_local_requests_from_web_hooks_and_services,
            archive_builds_in_human_readable=archive_builds_in_human_readable,
            asset_proxy_allowlists=asset_proxy_allowlists,
            asset_proxy_enabled=asset_proxy_enabled,
            asset_proxy_secret_key=asset_proxy_secret_key,
            asset_proxy_url=asset_proxy_url,
            authorized_keys_enabled=authorized_keys_enabled,
            auto_devops_domain=auto_devops_domain,
            auto_devops_enabled=auto_devops_enabled,
            automatic_purchased_storage_allocation=automatic_purchased_storage_allocation,
            can_create_group=can_create_group,
            check_namespace_plan=check_namespace_plan,
            commit_email_hostname=commit_email_hostname,
            container_expiration_policies_enable_historic_entries=container_expiration_policies_enable_historic_entries,
            container_registry_cleanup_tags_service_max_list_size=container_registry_cleanup_tags_service_max_list_size,
            container_registry_delete_tags_service_timeout=container_registry_delete_tags_service_timeout,
            container_registry_expiration_policies_caching=container_registry_expiration_policies_caching,
            container_registry_expiration_policies_worker_capacity=container_registry_expiration_policies_worker_capacity,
            container_registry_token_expire_delay=container_registry_token_expire_delay,
            deactivate_dormant_users=deactivate_dormant_users,
            default_artifacts_expire_in=default_artifacts_expire_in,
            default_branch_name=default_branch_name,
            default_branch_protection=default_branch_protection,
            default_ci_config_path=default_ci_config_path,
            default_group_visibility=default_group_visibility,
            default_project_creation=default_project_creation,
            default_project_visibility=default_project_visibility,
            default_projects_limit=default_projects_limit,
            default_snippet_visibility=default_snippet_visibility,
            delayed_group_deletion=delayed_group_deletion,
            delayed_project_deletion=delayed_project_deletion,
            delete_inactive_projects=delete_inactive_projects,
            deletion_adjourned_period=deletion_adjourned_period,
            diff_max_files=diff_max_files,
            diff_max_lines=diff_max_lines,
            diff_max_patch_bytes=diff_max_patch_bytes,
            disable_feed_token=disable_feed_token,
            disabled_oauth_sign_in_sources=disabled_oauth_sign_in_sources,
            dns_rebinding_protection_enabled=dns_rebinding_protection_enabled,
            domain_allowlists=domain_allowlists,
            domain_denylist_enabled=domain_denylist_enabled,
            domain_denylists=domain_denylists,
            dsa_key_restriction=dsa_key_restriction,
            ecdsa_key_restriction=ecdsa_key_restriction,
            ecdsa_sk_key_restriction=ecdsa_sk_key_restriction,
            ed25519_key_restriction=ed25519_key_restriction,
            ed25519_sk_key_restriction=ed25519_sk_key_restriction,
            eks_access_key_id=eks_access_key_id,
            eks_account_id=eks_account_id,
            eks_integration_enabled=eks_integration_enabled,
            eks_secret_access_key=eks_secret_access_key,
            elasticsearch_aws=elasticsearch_aws,
            elasticsearch_aws_access_key=elasticsearch_aws_access_key,
            elasticsearch_aws_region=elasticsearch_aws_region,
            elasticsearch_aws_secret_access_key=elasticsearch_aws_secret_access_key,
            elasticsearch_indexed_field_length_limit=elasticsearch_indexed_field_length_limit,
            elasticsearch_indexed_file_size_limit_kb=elasticsearch_indexed_file_size_limit_kb,
            elasticsearch_indexing=elasticsearch_indexing,
            elasticsearch_limit_indexing=elasticsearch_limit_indexing,
            elasticsearch_max_bulk_concurrency=elasticsearch_max_bulk_concurrency,
            elasticsearch_max_bulk_size_mb=elasticsearch_max_bulk_size_mb,
            elasticsearch_namespace_ids=elasticsearch_namespace_ids,
            elasticsearch_password=elasticsearch_password,
            elasticsearch_project_ids=elasticsearch_project_ids,
            elasticsearch_search=elasticsearch_search,
            elasticsearch_urls=elasticsearch_urls,
            elasticsearch_username=elasticsearch_username,
            email_additional_text=email_additional_text,
            email_author_in_body=email_author_in_body,
            enabled_git_access_protocol=enabled_git_access_protocol,
            enforce_namespace_storage_limit=enforce_namespace_storage_limit,
            enforce_terms=enforce_terms,
            external_auth_client_cert=external_auth_client_cert,
            external_auth_client_key=external_auth_client_key,
            external_auth_client_key_pass=external_auth_client_key_pass,
            external_authorization_service_default_label=external_authorization_service_default_label,
            external_authorization_service_enabled=external_authorization_service_enabled,
            external_authorization_service_timeout=external_authorization_service_timeout,
            external_authorization_service_url=external_authorization_service_url,
            external_pipeline_validation_service_timeout=external_pipeline_validation_service_timeout,
            external_pipeline_validation_service_token=external_pipeline_validation_service_token,
            external_pipeline_validation_service_url=external_pipeline_validation_service_url,
            file_template_project_id=file_template_project_id,
            first_day_of_week=first_day_of_week,
            geo_node_allowed_ips=geo_node_allowed_ips,
            geo_status_timeout=geo_status_timeout,
            git_rate_limit_users_allowlists=git_rate_limit_users_allowlists,
            git_two_factor_session_expiry=git_two_factor_session_expiry,
            gitaly_timeout_default=gitaly_timeout_default,
            gitaly_timeout_fast=gitaly_timeout_fast,
            gitaly_timeout_medium=gitaly_timeout_medium,
            grafana_enabled=grafana_enabled,
            grafana_url=grafana_url,
            gravatar_enabled=gravatar_enabled,
            group_owners_can_manage_default_branch_protection=group_owners_can_manage_default_branch_protection,
            hashed_storage_enabled=hashed_storage_enabled,
            help_page_hide_commercial_content=help_page_hide_commercial_content,
            help_page_support_url=help_page_support_url,
            help_page_text=help_page_text,
            help_text=help_text,
            hide_third_party_offers=hide_third_party_offers,
            home_page_url=home_page_url,
            housekeeping_enabled=housekeeping_enabled,
            housekeeping_full_repack_period=housekeeping_full_repack_period,
            housekeeping_gc_period=housekeeping_gc_period,
            housekeeping_incremental_repack_period=housekeeping_incremental_repack_period,
            html_emails_enabled=html_emails_enabled,
            import_sources=import_sources,
            in_product_marketing_emails_enabled=in_product_marketing_emails_enabled,
            inactive_projects_delete_after_months=inactive_projects_delete_after_months,
            inactive_projects_min_size_mb=inactive_projects_min_size_mb,
            inactive_projects_send_warning_email_after_months=inactive_projects_send_warning_email_after_months,
            invisible_captcha_enabled=invisible_captcha_enabled,
            issues_create_limit=issues_create_limit,
            keep_latest_artifact=keep_latest_artifact,
            local_markdown_version=local_markdown_version,
            mailgun_events_enabled=mailgun_events_enabled,
            mailgun_signing_key=mailgun_signing_key,
            maintenance_mode=maintenance_mode,
            maintenance_mode_message=maintenance_mode_message,
            max_artifacts_size=max_artifacts_size,
            max_attachment_size=max_attachment_size,
            max_export_size=max_export_size,
            max_import_size=max_import_size,
            max_number_of_repository_downloads=max_number_of_repository_downloads,
            max_number_of_repository_downloads_within_time_period=max_number_of_repository_downloads_within_time_period,
            max_pages_size=max_pages_size,
            max_personal_access_token_lifetime=max_personal_access_token_lifetime,
            max_ssh_key_lifetime=max_ssh_key_lifetime,
            metrics_method_call_threshold=metrics_method_call_threshold,
            mirror_available=mirror_available,
            mirror_capacity_threshold=mirror_capacity_threshold,
            mirror_max_capacity=mirror_max_capacity,
            mirror_max_delay=mirror_max_delay,
            npm_package_requests_forwarding=npm_package_requests_forwarding,
            outbound_local_requests_whitelists=outbound_local_requests_whitelists,
            package_registry_cleanup_policies_worker_capacity=package_registry_cleanup_policies_worker_capacity,
            pages_domain_verification_enabled=pages_domain_verification_enabled,
            password_authentication_enabled_for_git=password_authentication_enabled_for_git,
            password_authentication_enabled_for_web=password_authentication_enabled_for_web,
            password_lowercase_required=password_lowercase_required,
            password_number_required=password_number_required,
            password_symbol_required=password_symbol_required,
            password_uppercase_required=password_uppercase_required,
            performance_bar_allowed_group_path=performance_bar_allowed_group_path,
            personal_access_token_prefix=personal_access_token_prefix,
            pipeline_limit_per_project_user_sha=pipeline_limit_per_project_user_sha,
            plantuml_enabled=plantuml_enabled,
            plantuml_url=plantuml_url,
            polling_interval_multiplier=polling_interval_multiplier,
            project_export_enabled=project_export_enabled,
            prometheus_metrics_enabled=prometheus_metrics_enabled,
            protected_ci_variables=protected_ci_variables,
            push_event_activities_limit=push_event_activities_limit,
            push_event_hooks_limit=push_event_hooks_limit,
            pypi_package_requests_forwarding=pypi_package_requests_forwarding,
            rate_limiting_response_text=rate_limiting_response_text,
            raw_blob_request_limit=raw_blob_request_limit,
            recaptcha_enabled=recaptcha_enabled,
            recaptcha_private_key=recaptcha_private_key,
            recaptcha_site_key=recaptcha_site_key,
            receive_max_input_size=receive_max_input_size,
            repository_checks_enabled=repository_checks_enabled,
            repository_size_limit=repository_size_limit,
            repository_storages=repository_storages,
            repository_storages_weighted=repository_storages_weighted,
            require_admin_approval_after_user_signup=require_admin_approval_after_user_signup,
            require_two_factor_authentication=require_two_factor_authentication,
            restricted_visibility_levels=restricted_visibility_levels,
            rsa_key_restriction=rsa_key_restriction,
            search_rate_limit=search_rate_limit,
            search_rate_limit_unauthenticated=search_rate_limit_unauthenticated,
            send_user_confirmation_email=send_user_confirmation_email,
            session_expire_delay=session_expire_delay,
            shared_runners_enabled=shared_runners_enabled,
            shared_runners_minutes=shared_runners_minutes,
            shared_runners_text=shared_runners_text,
            sidekiq_job_limiter_compression_threshold_bytes=sidekiq_job_limiter_compression_threshold_bytes,
            sidekiq_job_limiter_limit_bytes=sidekiq_job_limiter_limit_bytes,
            sidekiq_job_limiter_mode=sidekiq_job_limiter_mode,
            sign_in_text=sign_in_text,
            signup_enabled=signup_enabled,
            slack_app_enabled=slack_app_enabled,
            slack_app_id=slack_app_id,
            slack_app_secret=slack_app_secret,
            slack_app_signing_secret=slack_app_signing_secret,
            slack_app_verification_token=slack_app_verification_token,
            snippet_size_limit=snippet_size_limit,
            snowplow_app_id=snowplow_app_id,
            snowplow_collector_hostname=snowplow_collector_hostname,
            snowplow_cookie_domain=snowplow_cookie_domain,
            snowplow_enabled=snowplow_enabled,
            sourcegraph_enabled=sourcegraph_enabled,
            sourcegraph_public_only=sourcegraph_public_only,
            sourcegraph_url=sourcegraph_url,
            spam_check_api_key=spam_check_api_key,
            spam_check_endpoint_enabled=spam_check_endpoint_enabled,
            spam_check_endpoint_url=spam_check_endpoint_url,
            suggest_pipeline_enabled=suggest_pipeline_enabled,
            terminal_max_session_time=terminal_max_session_time,
            terms=terms,
            throttle_authenticated_api_enabled=throttle_authenticated_api_enabled,
            throttle_authenticated_api_period_in_seconds=throttle_authenticated_api_period_in_seconds,
            throttle_authenticated_api_requests_per_period=throttle_authenticated_api_requests_per_period,
            throttle_authenticated_packages_api_enabled=throttle_authenticated_packages_api_enabled,
            throttle_authenticated_packages_api_period_in_seconds=throttle_authenticated_packages_api_period_in_seconds,
            throttle_authenticated_packages_api_requests_per_period=throttle_authenticated_packages_api_requests_per_period,
            throttle_authenticated_web_enabled=throttle_authenticated_web_enabled,
            throttle_authenticated_web_period_in_seconds=throttle_authenticated_web_period_in_seconds,
            throttle_authenticated_web_requests_per_period=throttle_authenticated_web_requests_per_period,
            throttle_unauthenticated_api_enabled=throttle_unauthenticated_api_enabled,
            throttle_unauthenticated_api_period_in_seconds=throttle_unauthenticated_api_period_in_seconds,
            throttle_unauthenticated_api_requests_per_period=throttle_unauthenticated_api_requests_per_period,
            throttle_unauthenticated_packages_api_enabled=throttle_unauthenticated_packages_api_enabled,
            throttle_unauthenticated_packages_api_period_in_seconds=throttle_unauthenticated_packages_api_period_in_seconds,
            throttle_unauthenticated_packages_api_requests_per_period=throttle_unauthenticated_packages_api_requests_per_period,
            throttle_unauthenticated_web_enabled=throttle_unauthenticated_web_enabled,
            throttle_unauthenticated_web_period_in_seconds=throttle_unauthenticated_web_period_in_seconds,
            throttle_unauthenticated_web_requests_per_period=throttle_unauthenticated_web_requests_per_period,
            time_tracking_limit_to_hours=time_tracking_limit_to_hours,
            two_factor_grace_period=two_factor_grace_period,
            unique_ips_limit_enabled=unique_ips_limit_enabled,
            unique_ips_limit_per_user=unique_ips_limit_per_user,
            unique_ips_limit_time_window=unique_ips_limit_time_window,
            usage_ping_enabled=usage_ping_enabled,
            user_deactivation_emails_enabled=user_deactivation_emails_enabled,
            user_default_external=user_default_external,
            user_default_internal_regex=user_default_internal_regex,
            user_oauth_applications=user_oauth_applications,
            user_show_add_ssh_key_message=user_show_add_ssh_key_message,
            version_check_enabled=version_check_enabled,
            web_ide_clientside_preview_enabled=web_ide_clientside_preview_enabled,
            whats_new_variant=whats_new_variant,
            wiki_page_max_content_bytes=wiki_page_max_content_bytes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abuse_notification_email: Optional[pulumi.Input[str]] = None,
             admin_mode: Optional[pulumi.Input[bool]] = None,
             after_sign_out_path: Optional[pulumi.Input[str]] = None,
             after_sign_up_text: Optional[pulumi.Input[str]] = None,
             akismet_api_key: Optional[pulumi.Input[str]] = None,
             akismet_enabled: Optional[pulumi.Input[bool]] = None,
             allow_group_owners_to_manage_ldap: Optional[pulumi.Input[bool]] = None,
             allow_local_requests_from_system_hooks: Optional[pulumi.Input[bool]] = None,
             allow_local_requests_from_web_hooks_and_services: Optional[pulumi.Input[bool]] = None,
             archive_builds_in_human_readable: Optional[pulumi.Input[str]] = None,
             asset_proxy_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             asset_proxy_enabled: Optional[pulumi.Input[bool]] = None,
             asset_proxy_secret_key: Optional[pulumi.Input[str]] = None,
             asset_proxy_url: Optional[pulumi.Input[str]] = None,
             authorized_keys_enabled: Optional[pulumi.Input[bool]] = None,
             auto_devops_domain: Optional[pulumi.Input[str]] = None,
             auto_devops_enabled: Optional[pulumi.Input[bool]] = None,
             automatic_purchased_storage_allocation: Optional[pulumi.Input[bool]] = None,
             can_create_group: Optional[pulumi.Input[bool]] = None,
             check_namespace_plan: Optional[pulumi.Input[bool]] = None,
             commit_email_hostname: Optional[pulumi.Input[str]] = None,
             container_expiration_policies_enable_historic_entries: Optional[pulumi.Input[bool]] = None,
             container_registry_cleanup_tags_service_max_list_size: Optional[pulumi.Input[int]] = None,
             container_registry_delete_tags_service_timeout: Optional[pulumi.Input[int]] = None,
             container_registry_expiration_policies_caching: Optional[pulumi.Input[bool]] = None,
             container_registry_expiration_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
             container_registry_token_expire_delay: Optional[pulumi.Input[int]] = None,
             deactivate_dormant_users: Optional[pulumi.Input[bool]] = None,
             default_artifacts_expire_in: Optional[pulumi.Input[str]] = None,
             default_branch_name: Optional[pulumi.Input[str]] = None,
             default_branch_protection: Optional[pulumi.Input[int]] = None,
             default_ci_config_path: Optional[pulumi.Input[str]] = None,
             default_group_visibility: Optional[pulumi.Input[str]] = None,
             default_project_creation: Optional[pulumi.Input[int]] = None,
             default_project_visibility: Optional[pulumi.Input[str]] = None,
             default_projects_limit: Optional[pulumi.Input[int]] = None,
             default_snippet_visibility: Optional[pulumi.Input[str]] = None,
             delayed_group_deletion: Optional[pulumi.Input[bool]] = None,
             delayed_project_deletion: Optional[pulumi.Input[bool]] = None,
             delete_inactive_projects: Optional[pulumi.Input[bool]] = None,
             deletion_adjourned_period: Optional[pulumi.Input[int]] = None,
             diff_max_files: Optional[pulumi.Input[int]] = None,
             diff_max_lines: Optional[pulumi.Input[int]] = None,
             diff_max_patch_bytes: Optional[pulumi.Input[int]] = None,
             disable_feed_token: Optional[pulumi.Input[bool]] = None,
             disabled_oauth_sign_in_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             dns_rebinding_protection_enabled: Optional[pulumi.Input[bool]] = None,
             domain_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             domain_denylist_enabled: Optional[pulumi.Input[bool]] = None,
             domain_denylists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             dsa_key_restriction: Optional[pulumi.Input[int]] = None,
             ecdsa_key_restriction: Optional[pulumi.Input[int]] = None,
             ecdsa_sk_key_restriction: Optional[pulumi.Input[int]] = None,
             ed25519_key_restriction: Optional[pulumi.Input[int]] = None,
             ed25519_sk_key_restriction: Optional[pulumi.Input[int]] = None,
             eks_access_key_id: Optional[pulumi.Input[str]] = None,
             eks_account_id: Optional[pulumi.Input[str]] = None,
             eks_integration_enabled: Optional[pulumi.Input[bool]] = None,
             eks_secret_access_key: Optional[pulumi.Input[str]] = None,
             elasticsearch_aws: Optional[pulumi.Input[bool]] = None,
             elasticsearch_aws_access_key: Optional[pulumi.Input[str]] = None,
             elasticsearch_aws_region: Optional[pulumi.Input[str]] = None,
             elasticsearch_aws_secret_access_key: Optional[pulumi.Input[str]] = None,
             elasticsearch_indexed_field_length_limit: Optional[pulumi.Input[int]] = None,
             elasticsearch_indexed_file_size_limit_kb: Optional[pulumi.Input[int]] = None,
             elasticsearch_indexing: Optional[pulumi.Input[bool]] = None,
             elasticsearch_limit_indexing: Optional[pulumi.Input[bool]] = None,
             elasticsearch_max_bulk_concurrency: Optional[pulumi.Input[int]] = None,
             elasticsearch_max_bulk_size_mb: Optional[pulumi.Input[int]] = None,
             elasticsearch_namespace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             elasticsearch_password: Optional[pulumi.Input[str]] = None,
             elasticsearch_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             elasticsearch_search: Optional[pulumi.Input[bool]] = None,
             elasticsearch_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             elasticsearch_username: Optional[pulumi.Input[str]] = None,
             email_additional_text: Optional[pulumi.Input[str]] = None,
             email_author_in_body: Optional[pulumi.Input[bool]] = None,
             enabled_git_access_protocol: Optional[pulumi.Input[str]] = None,
             enforce_namespace_storage_limit: Optional[pulumi.Input[bool]] = None,
             enforce_terms: Optional[pulumi.Input[bool]] = None,
             external_auth_client_cert: Optional[pulumi.Input[str]] = None,
             external_auth_client_key: Optional[pulumi.Input[str]] = None,
             external_auth_client_key_pass: Optional[pulumi.Input[str]] = None,
             external_authorization_service_default_label: Optional[pulumi.Input[str]] = None,
             external_authorization_service_enabled: Optional[pulumi.Input[bool]] = None,
             external_authorization_service_timeout: Optional[pulumi.Input[float]] = None,
             external_authorization_service_url: Optional[pulumi.Input[str]] = None,
             external_pipeline_validation_service_timeout: Optional[pulumi.Input[int]] = None,
             external_pipeline_validation_service_token: Optional[pulumi.Input[str]] = None,
             external_pipeline_validation_service_url: Optional[pulumi.Input[str]] = None,
             file_template_project_id: Optional[pulumi.Input[int]] = None,
             first_day_of_week: Optional[pulumi.Input[int]] = None,
             geo_node_allowed_ips: Optional[pulumi.Input[str]] = None,
             geo_status_timeout: Optional[pulumi.Input[int]] = None,
             git_rate_limit_users_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             git_two_factor_session_expiry: Optional[pulumi.Input[int]] = None,
             gitaly_timeout_default: Optional[pulumi.Input[int]] = None,
             gitaly_timeout_fast: Optional[pulumi.Input[int]] = None,
             gitaly_timeout_medium: Optional[pulumi.Input[int]] = None,
             grafana_enabled: Optional[pulumi.Input[bool]] = None,
             grafana_url: Optional[pulumi.Input[str]] = None,
             gravatar_enabled: Optional[pulumi.Input[bool]] = None,
             group_owners_can_manage_default_branch_protection: Optional[pulumi.Input[bool]] = None,
             hashed_storage_enabled: Optional[pulumi.Input[bool]] = None,
             help_page_hide_commercial_content: Optional[pulumi.Input[bool]] = None,
             help_page_support_url: Optional[pulumi.Input[str]] = None,
             help_page_text: Optional[pulumi.Input[str]] = None,
             help_text: Optional[pulumi.Input[str]] = None,
             hide_third_party_offers: Optional[pulumi.Input[bool]] = None,
             home_page_url: Optional[pulumi.Input[str]] = None,
             housekeeping_enabled: Optional[pulumi.Input[bool]] = None,
             housekeeping_full_repack_period: Optional[pulumi.Input[int]] = None,
             housekeeping_gc_period: Optional[pulumi.Input[int]] = None,
             housekeeping_incremental_repack_period: Optional[pulumi.Input[int]] = None,
             html_emails_enabled: Optional[pulumi.Input[bool]] = None,
             import_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             in_product_marketing_emails_enabled: Optional[pulumi.Input[bool]] = None,
             inactive_projects_delete_after_months: Optional[pulumi.Input[int]] = None,
             inactive_projects_min_size_mb: Optional[pulumi.Input[int]] = None,
             inactive_projects_send_warning_email_after_months: Optional[pulumi.Input[int]] = None,
             invisible_captcha_enabled: Optional[pulumi.Input[bool]] = None,
             issues_create_limit: Optional[pulumi.Input[int]] = None,
             keep_latest_artifact: Optional[pulumi.Input[bool]] = None,
             local_markdown_version: Optional[pulumi.Input[int]] = None,
             mailgun_events_enabled: Optional[pulumi.Input[bool]] = None,
             mailgun_signing_key: Optional[pulumi.Input[str]] = None,
             maintenance_mode: Optional[pulumi.Input[bool]] = None,
             maintenance_mode_message: Optional[pulumi.Input[str]] = None,
             max_artifacts_size: Optional[pulumi.Input[int]] = None,
             max_attachment_size: Optional[pulumi.Input[int]] = None,
             max_export_size: Optional[pulumi.Input[int]] = None,
             max_import_size: Optional[pulumi.Input[int]] = None,
             max_number_of_repository_downloads: Optional[pulumi.Input[int]] = None,
             max_number_of_repository_downloads_within_time_period: Optional[pulumi.Input[int]] = None,
             max_pages_size: Optional[pulumi.Input[int]] = None,
             max_personal_access_token_lifetime: Optional[pulumi.Input[int]] = None,
             max_ssh_key_lifetime: Optional[pulumi.Input[int]] = None,
             metrics_method_call_threshold: Optional[pulumi.Input[int]] = None,
             mirror_available: Optional[pulumi.Input[bool]] = None,
             mirror_capacity_threshold: Optional[pulumi.Input[int]] = None,
             mirror_max_capacity: Optional[pulumi.Input[int]] = None,
             mirror_max_delay: Optional[pulumi.Input[int]] = None,
             npm_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
             outbound_local_requests_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             package_registry_cleanup_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
             pages_domain_verification_enabled: Optional[pulumi.Input[bool]] = None,
             password_authentication_enabled_for_git: Optional[pulumi.Input[bool]] = None,
             password_authentication_enabled_for_web: Optional[pulumi.Input[bool]] = None,
             password_lowercase_required: Optional[pulumi.Input[bool]] = None,
             password_number_required: Optional[pulumi.Input[bool]] = None,
             password_symbol_required: Optional[pulumi.Input[bool]] = None,
             password_uppercase_required: Optional[pulumi.Input[bool]] = None,
             performance_bar_allowed_group_path: Optional[pulumi.Input[str]] = None,
             personal_access_token_prefix: Optional[pulumi.Input[str]] = None,
             pipeline_limit_per_project_user_sha: Optional[pulumi.Input[int]] = None,
             plantuml_enabled: Optional[pulumi.Input[bool]] = None,
             plantuml_url: Optional[pulumi.Input[str]] = None,
             polling_interval_multiplier: Optional[pulumi.Input[float]] = None,
             project_export_enabled: Optional[pulumi.Input[bool]] = None,
             prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
             protected_ci_variables: Optional[pulumi.Input[bool]] = None,
             push_event_activities_limit: Optional[pulumi.Input[int]] = None,
             push_event_hooks_limit: Optional[pulumi.Input[int]] = None,
             pypi_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
             rate_limiting_response_text: Optional[pulumi.Input[str]] = None,
             raw_blob_request_limit: Optional[pulumi.Input[int]] = None,
             recaptcha_enabled: Optional[pulumi.Input[bool]] = None,
             recaptcha_private_key: Optional[pulumi.Input[str]] = None,
             recaptcha_site_key: Optional[pulumi.Input[str]] = None,
             receive_max_input_size: Optional[pulumi.Input[int]] = None,
             repository_checks_enabled: Optional[pulumi.Input[bool]] = None,
             repository_size_limit: Optional[pulumi.Input[int]] = None,
             repository_storages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             repository_storages_weighted: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
             require_admin_approval_after_user_signup: Optional[pulumi.Input[bool]] = None,
             require_two_factor_authentication: Optional[pulumi.Input[bool]] = None,
             restricted_visibility_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             rsa_key_restriction: Optional[pulumi.Input[int]] = None,
             search_rate_limit: Optional[pulumi.Input[int]] = None,
             search_rate_limit_unauthenticated: Optional[pulumi.Input[int]] = None,
             send_user_confirmation_email: Optional[pulumi.Input[bool]] = None,
             session_expire_delay: Optional[pulumi.Input[int]] = None,
             shared_runners_enabled: Optional[pulumi.Input[bool]] = None,
             shared_runners_minutes: Optional[pulumi.Input[int]] = None,
             shared_runners_text: Optional[pulumi.Input[str]] = None,
             sidekiq_job_limiter_compression_threshold_bytes: Optional[pulumi.Input[int]] = None,
             sidekiq_job_limiter_limit_bytes: Optional[pulumi.Input[int]] = None,
             sidekiq_job_limiter_mode: Optional[pulumi.Input[str]] = None,
             sign_in_text: Optional[pulumi.Input[str]] = None,
             signup_enabled: Optional[pulumi.Input[bool]] = None,
             slack_app_enabled: Optional[pulumi.Input[bool]] = None,
             slack_app_id: Optional[pulumi.Input[str]] = None,
             slack_app_secret: Optional[pulumi.Input[str]] = None,
             slack_app_signing_secret: Optional[pulumi.Input[str]] = None,
             slack_app_verification_token: Optional[pulumi.Input[str]] = None,
             snippet_size_limit: Optional[pulumi.Input[int]] = None,
             snowplow_app_id: Optional[pulumi.Input[str]] = None,
             snowplow_collector_hostname: Optional[pulumi.Input[str]] = None,
             snowplow_cookie_domain: Optional[pulumi.Input[str]] = None,
             snowplow_enabled: Optional[pulumi.Input[bool]] = None,
             sourcegraph_enabled: Optional[pulumi.Input[bool]] = None,
             sourcegraph_public_only: Optional[pulumi.Input[bool]] = None,
             sourcegraph_url: Optional[pulumi.Input[str]] = None,
             spam_check_api_key: Optional[pulumi.Input[str]] = None,
             spam_check_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
             spam_check_endpoint_url: Optional[pulumi.Input[str]] = None,
             suggest_pipeline_enabled: Optional[pulumi.Input[bool]] = None,
             terminal_max_session_time: Optional[pulumi.Input[int]] = None,
             terms: Optional[pulumi.Input[str]] = None,
             throttle_authenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_authenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_authenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_authenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_authenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_unauthenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_unauthenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
             throttle_unauthenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
             throttle_unauthenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
             time_tracking_limit_to_hours: Optional[pulumi.Input[bool]] = None,
             two_factor_grace_period: Optional[pulumi.Input[int]] = None,
             unique_ips_limit_enabled: Optional[pulumi.Input[bool]] = None,
             unique_ips_limit_per_user: Optional[pulumi.Input[int]] = None,
             unique_ips_limit_time_window: Optional[pulumi.Input[int]] = None,
             usage_ping_enabled: Optional[pulumi.Input[bool]] = None,
             user_deactivation_emails_enabled: Optional[pulumi.Input[bool]] = None,
             user_default_external: Optional[pulumi.Input[bool]] = None,
             user_default_internal_regex: Optional[pulumi.Input[str]] = None,
             user_oauth_applications: Optional[pulumi.Input[bool]] = None,
             user_show_add_ssh_key_message: Optional[pulumi.Input[bool]] = None,
             version_check_enabled: Optional[pulumi.Input[bool]] = None,
             web_ide_clientside_preview_enabled: Optional[pulumi.Input[bool]] = None,
             whats_new_variant: Optional[pulumi.Input[str]] = None,
             wiki_page_max_content_bytes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if abuse_notification_email is not None:
            _setter("abuse_notification_email", abuse_notification_email)
        if admin_mode is not None:
            _setter("admin_mode", admin_mode)
        if after_sign_out_path is not None:
            _setter("after_sign_out_path", after_sign_out_path)
        if after_sign_up_text is not None:
            _setter("after_sign_up_text", after_sign_up_text)
        if akismet_api_key is not None:
            _setter("akismet_api_key", akismet_api_key)
        if akismet_enabled is not None:
            _setter("akismet_enabled", akismet_enabled)
        if allow_group_owners_to_manage_ldap is not None:
            _setter("allow_group_owners_to_manage_ldap", allow_group_owners_to_manage_ldap)
        if allow_local_requests_from_system_hooks is not None:
            _setter("allow_local_requests_from_system_hooks", allow_local_requests_from_system_hooks)
        if allow_local_requests_from_web_hooks_and_services is not None:
            _setter("allow_local_requests_from_web_hooks_and_services", allow_local_requests_from_web_hooks_and_services)
        if archive_builds_in_human_readable is not None:
            _setter("archive_builds_in_human_readable", archive_builds_in_human_readable)
        if asset_proxy_allowlists is not None:
            _setter("asset_proxy_allowlists", asset_proxy_allowlists)
        if asset_proxy_enabled is not None:
            _setter("asset_proxy_enabled", asset_proxy_enabled)
        if asset_proxy_secret_key is not None:
            _setter("asset_proxy_secret_key", asset_proxy_secret_key)
        if asset_proxy_url is not None:
            _setter("asset_proxy_url", asset_proxy_url)
        if authorized_keys_enabled is not None:
            _setter("authorized_keys_enabled", authorized_keys_enabled)
        if auto_devops_domain is not None:
            _setter("auto_devops_domain", auto_devops_domain)
        if auto_devops_enabled is not None:
            _setter("auto_devops_enabled", auto_devops_enabled)
        if automatic_purchased_storage_allocation is not None:
            _setter("automatic_purchased_storage_allocation", automatic_purchased_storage_allocation)
        if can_create_group is not None:
            _setter("can_create_group", can_create_group)
        if check_namespace_plan is not None:
            _setter("check_namespace_plan", check_namespace_plan)
        if commit_email_hostname is not None:
            _setter("commit_email_hostname", commit_email_hostname)
        if container_expiration_policies_enable_historic_entries is not None:
            _setter("container_expiration_policies_enable_historic_entries", container_expiration_policies_enable_historic_entries)
        if container_registry_cleanup_tags_service_max_list_size is not None:
            _setter("container_registry_cleanup_tags_service_max_list_size", container_registry_cleanup_tags_service_max_list_size)
        if container_registry_delete_tags_service_timeout is not None:
            _setter("container_registry_delete_tags_service_timeout", container_registry_delete_tags_service_timeout)
        if container_registry_expiration_policies_caching is not None:
            _setter("container_registry_expiration_policies_caching", container_registry_expiration_policies_caching)
        if container_registry_expiration_policies_worker_capacity is not None:
            _setter("container_registry_expiration_policies_worker_capacity", container_registry_expiration_policies_worker_capacity)
        if container_registry_token_expire_delay is not None:
            _setter("container_registry_token_expire_delay", container_registry_token_expire_delay)
        if deactivate_dormant_users is not None:
            _setter("deactivate_dormant_users", deactivate_dormant_users)
        if default_artifacts_expire_in is not None:
            _setter("default_artifacts_expire_in", default_artifacts_expire_in)
        if default_branch_name is not None:
            _setter("default_branch_name", default_branch_name)
        if default_branch_protection is not None:
            _setter("default_branch_protection", default_branch_protection)
        if default_ci_config_path is not None:
            _setter("default_ci_config_path", default_ci_config_path)
        if default_group_visibility is not None:
            _setter("default_group_visibility", default_group_visibility)
        if default_project_creation is not None:
            _setter("default_project_creation", default_project_creation)
        if default_project_visibility is not None:
            _setter("default_project_visibility", default_project_visibility)
        if default_projects_limit is not None:
            _setter("default_projects_limit", default_projects_limit)
        if default_snippet_visibility is not None:
            _setter("default_snippet_visibility", default_snippet_visibility)
        if delayed_group_deletion is not None:
            _setter("delayed_group_deletion", delayed_group_deletion)
        if delayed_project_deletion is not None:
            _setter("delayed_project_deletion", delayed_project_deletion)
        if delete_inactive_projects is not None:
            _setter("delete_inactive_projects", delete_inactive_projects)
        if deletion_adjourned_period is not None:
            _setter("deletion_adjourned_period", deletion_adjourned_period)
        if diff_max_files is not None:
            _setter("diff_max_files", diff_max_files)
        if diff_max_lines is not None:
            _setter("diff_max_lines", diff_max_lines)
        if diff_max_patch_bytes is not None:
            _setter("diff_max_patch_bytes", diff_max_patch_bytes)
        if disable_feed_token is not None:
            _setter("disable_feed_token", disable_feed_token)
        if disabled_oauth_sign_in_sources is not None:
            _setter("disabled_oauth_sign_in_sources", disabled_oauth_sign_in_sources)
        if dns_rebinding_protection_enabled is not None:
            _setter("dns_rebinding_protection_enabled", dns_rebinding_protection_enabled)
        if domain_allowlists is not None:
            _setter("domain_allowlists", domain_allowlists)
        if domain_denylist_enabled is not None:
            _setter("domain_denylist_enabled", domain_denylist_enabled)
        if domain_denylists is not None:
            _setter("domain_denylists", domain_denylists)
        if dsa_key_restriction is not None:
            _setter("dsa_key_restriction", dsa_key_restriction)
        if ecdsa_key_restriction is not None:
            _setter("ecdsa_key_restriction", ecdsa_key_restriction)
        if ecdsa_sk_key_restriction is not None:
            _setter("ecdsa_sk_key_restriction", ecdsa_sk_key_restriction)
        if ed25519_key_restriction is not None:
            _setter("ed25519_key_restriction", ed25519_key_restriction)
        if ed25519_sk_key_restriction is not None:
            _setter("ed25519_sk_key_restriction", ed25519_sk_key_restriction)
        if eks_access_key_id is not None:
            _setter("eks_access_key_id", eks_access_key_id)
        if eks_account_id is not None:
            _setter("eks_account_id", eks_account_id)
        if eks_integration_enabled is not None:
            _setter("eks_integration_enabled", eks_integration_enabled)
        if eks_secret_access_key is not None:
            _setter("eks_secret_access_key", eks_secret_access_key)
        if elasticsearch_aws is not None:
            _setter("elasticsearch_aws", elasticsearch_aws)
        if elasticsearch_aws_access_key is not None:
            _setter("elasticsearch_aws_access_key", elasticsearch_aws_access_key)
        if elasticsearch_aws_region is not None:
            _setter("elasticsearch_aws_region", elasticsearch_aws_region)
        if elasticsearch_aws_secret_access_key is not None:
            _setter("elasticsearch_aws_secret_access_key", elasticsearch_aws_secret_access_key)
        if elasticsearch_indexed_field_length_limit is not None:
            _setter("elasticsearch_indexed_field_length_limit", elasticsearch_indexed_field_length_limit)
        if elasticsearch_indexed_file_size_limit_kb is not None:
            _setter("elasticsearch_indexed_file_size_limit_kb", elasticsearch_indexed_file_size_limit_kb)
        if elasticsearch_indexing is not None:
            _setter("elasticsearch_indexing", elasticsearch_indexing)
        if elasticsearch_limit_indexing is not None:
            _setter("elasticsearch_limit_indexing", elasticsearch_limit_indexing)
        if elasticsearch_max_bulk_concurrency is not None:
            _setter("elasticsearch_max_bulk_concurrency", elasticsearch_max_bulk_concurrency)
        if elasticsearch_max_bulk_size_mb is not None:
            _setter("elasticsearch_max_bulk_size_mb", elasticsearch_max_bulk_size_mb)
        if elasticsearch_namespace_ids is not None:
            _setter("elasticsearch_namespace_ids", elasticsearch_namespace_ids)
        if elasticsearch_password is not None:
            _setter("elasticsearch_password", elasticsearch_password)
        if elasticsearch_project_ids is not None:
            _setter("elasticsearch_project_ids", elasticsearch_project_ids)
        if elasticsearch_search is not None:
            _setter("elasticsearch_search", elasticsearch_search)
        if elasticsearch_urls is not None:
            _setter("elasticsearch_urls", elasticsearch_urls)
        if elasticsearch_username is not None:
            _setter("elasticsearch_username", elasticsearch_username)
        if email_additional_text is not None:
            _setter("email_additional_text", email_additional_text)
        if email_author_in_body is not None:
            _setter("email_author_in_body", email_author_in_body)
        if enabled_git_access_protocol is not None:
            _setter("enabled_git_access_protocol", enabled_git_access_protocol)
        if enforce_namespace_storage_limit is not None:
            _setter("enforce_namespace_storage_limit", enforce_namespace_storage_limit)
        if enforce_terms is not None:
            _setter("enforce_terms", enforce_terms)
        if external_auth_client_cert is not None:
            _setter("external_auth_client_cert", external_auth_client_cert)
        if external_auth_client_key is not None:
            _setter("external_auth_client_key", external_auth_client_key)
        if external_auth_client_key_pass is not None:
            _setter("external_auth_client_key_pass", external_auth_client_key_pass)
        if external_authorization_service_default_label is not None:
            _setter("external_authorization_service_default_label", external_authorization_service_default_label)
        if external_authorization_service_enabled is not None:
            _setter("external_authorization_service_enabled", external_authorization_service_enabled)
        if external_authorization_service_timeout is not None:
            _setter("external_authorization_service_timeout", external_authorization_service_timeout)
        if external_authorization_service_url is not None:
            _setter("external_authorization_service_url", external_authorization_service_url)
        if external_pipeline_validation_service_timeout is not None:
            _setter("external_pipeline_validation_service_timeout", external_pipeline_validation_service_timeout)
        if external_pipeline_validation_service_token is not None:
            _setter("external_pipeline_validation_service_token", external_pipeline_validation_service_token)
        if external_pipeline_validation_service_url is not None:
            _setter("external_pipeline_validation_service_url", external_pipeline_validation_service_url)
        if file_template_project_id is not None:
            _setter("file_template_project_id", file_template_project_id)
        if first_day_of_week is not None:
            _setter("first_day_of_week", first_day_of_week)
        if geo_node_allowed_ips is not None:
            _setter("geo_node_allowed_ips", geo_node_allowed_ips)
        if geo_status_timeout is not None:
            _setter("geo_status_timeout", geo_status_timeout)
        if git_rate_limit_users_allowlists is not None:
            _setter("git_rate_limit_users_allowlists", git_rate_limit_users_allowlists)
        if git_two_factor_session_expiry is not None:
            _setter("git_two_factor_session_expiry", git_two_factor_session_expiry)
        if gitaly_timeout_default is not None:
            _setter("gitaly_timeout_default", gitaly_timeout_default)
        if gitaly_timeout_fast is not None:
            _setter("gitaly_timeout_fast", gitaly_timeout_fast)
        if gitaly_timeout_medium is not None:
            _setter("gitaly_timeout_medium", gitaly_timeout_medium)
        if grafana_enabled is not None:
            _setter("grafana_enabled", grafana_enabled)
        if grafana_url is not None:
            _setter("grafana_url", grafana_url)
        if gravatar_enabled is not None:
            _setter("gravatar_enabled", gravatar_enabled)
        if group_owners_can_manage_default_branch_protection is not None:
            _setter("group_owners_can_manage_default_branch_protection", group_owners_can_manage_default_branch_protection)
        if hashed_storage_enabled is not None:
            _setter("hashed_storage_enabled", hashed_storage_enabled)
        if help_page_hide_commercial_content is not None:
            _setter("help_page_hide_commercial_content", help_page_hide_commercial_content)
        if help_page_support_url is not None:
            _setter("help_page_support_url", help_page_support_url)
        if help_page_text is not None:
            _setter("help_page_text", help_page_text)
        if help_text is not None:
            _setter("help_text", help_text)
        if hide_third_party_offers is not None:
            _setter("hide_third_party_offers", hide_third_party_offers)
        if home_page_url is not None:
            _setter("home_page_url", home_page_url)
        if housekeeping_enabled is not None:
            _setter("housekeeping_enabled", housekeeping_enabled)
        if housekeeping_full_repack_period is not None:
            _setter("housekeeping_full_repack_period", housekeeping_full_repack_period)
        if housekeeping_gc_period is not None:
            _setter("housekeeping_gc_period", housekeeping_gc_period)
        if housekeeping_incremental_repack_period is not None:
            _setter("housekeeping_incremental_repack_period", housekeeping_incremental_repack_period)
        if html_emails_enabled is not None:
            _setter("html_emails_enabled", html_emails_enabled)
        if import_sources is not None:
            _setter("import_sources", import_sources)
        if in_product_marketing_emails_enabled is not None:
            _setter("in_product_marketing_emails_enabled", in_product_marketing_emails_enabled)
        if inactive_projects_delete_after_months is not None:
            _setter("inactive_projects_delete_after_months", inactive_projects_delete_after_months)
        if inactive_projects_min_size_mb is not None:
            _setter("inactive_projects_min_size_mb", inactive_projects_min_size_mb)
        if inactive_projects_send_warning_email_after_months is not None:
            _setter("inactive_projects_send_warning_email_after_months", inactive_projects_send_warning_email_after_months)
        if invisible_captcha_enabled is not None:
            _setter("invisible_captcha_enabled", invisible_captcha_enabled)
        if issues_create_limit is not None:
            _setter("issues_create_limit", issues_create_limit)
        if keep_latest_artifact is not None:
            _setter("keep_latest_artifact", keep_latest_artifact)
        if local_markdown_version is not None:
            _setter("local_markdown_version", local_markdown_version)
        if mailgun_events_enabled is not None:
            _setter("mailgun_events_enabled", mailgun_events_enabled)
        if mailgun_signing_key is not None:
            _setter("mailgun_signing_key", mailgun_signing_key)
        if maintenance_mode is not None:
            _setter("maintenance_mode", maintenance_mode)
        if maintenance_mode_message is not None:
            _setter("maintenance_mode_message", maintenance_mode_message)
        if max_artifacts_size is not None:
            _setter("max_artifacts_size", max_artifacts_size)
        if max_attachment_size is not None:
            _setter("max_attachment_size", max_attachment_size)
        if max_export_size is not None:
            _setter("max_export_size", max_export_size)
        if max_import_size is not None:
            _setter("max_import_size", max_import_size)
        if max_number_of_repository_downloads is not None:
            _setter("max_number_of_repository_downloads", max_number_of_repository_downloads)
        if max_number_of_repository_downloads_within_time_period is not None:
            _setter("max_number_of_repository_downloads_within_time_period", max_number_of_repository_downloads_within_time_period)
        if max_pages_size is not None:
            _setter("max_pages_size", max_pages_size)
        if max_personal_access_token_lifetime is not None:
            _setter("max_personal_access_token_lifetime", max_personal_access_token_lifetime)
        if max_ssh_key_lifetime is not None:
            _setter("max_ssh_key_lifetime", max_ssh_key_lifetime)
        if metrics_method_call_threshold is not None:
            _setter("metrics_method_call_threshold", metrics_method_call_threshold)
        if mirror_available is not None:
            _setter("mirror_available", mirror_available)
        if mirror_capacity_threshold is not None:
            _setter("mirror_capacity_threshold", mirror_capacity_threshold)
        if mirror_max_capacity is not None:
            _setter("mirror_max_capacity", mirror_max_capacity)
        if mirror_max_delay is not None:
            _setter("mirror_max_delay", mirror_max_delay)
        if npm_package_requests_forwarding is not None:
            _setter("npm_package_requests_forwarding", npm_package_requests_forwarding)
        if outbound_local_requests_whitelists is not None:
            _setter("outbound_local_requests_whitelists", outbound_local_requests_whitelists)
        if package_registry_cleanup_policies_worker_capacity is not None:
            _setter("package_registry_cleanup_policies_worker_capacity", package_registry_cleanup_policies_worker_capacity)
        if pages_domain_verification_enabled is not None:
            _setter("pages_domain_verification_enabled", pages_domain_verification_enabled)
        if password_authentication_enabled_for_git is not None:
            _setter("password_authentication_enabled_for_git", password_authentication_enabled_for_git)
        if password_authentication_enabled_for_web is not None:
            _setter("password_authentication_enabled_for_web", password_authentication_enabled_for_web)
        if password_lowercase_required is not None:
            _setter("password_lowercase_required", password_lowercase_required)
        if password_number_required is not None:
            _setter("password_number_required", password_number_required)
        if password_symbol_required is not None:
            _setter("password_symbol_required", password_symbol_required)
        if password_uppercase_required is not None:
            _setter("password_uppercase_required", password_uppercase_required)
        if performance_bar_allowed_group_path is not None:
            _setter("performance_bar_allowed_group_path", performance_bar_allowed_group_path)
        if personal_access_token_prefix is not None:
            _setter("personal_access_token_prefix", personal_access_token_prefix)
        if pipeline_limit_per_project_user_sha is not None:
            _setter("pipeline_limit_per_project_user_sha", pipeline_limit_per_project_user_sha)
        if plantuml_enabled is not None:
            _setter("plantuml_enabled", plantuml_enabled)
        if plantuml_url is not None:
            _setter("plantuml_url", plantuml_url)
        if polling_interval_multiplier is not None:
            _setter("polling_interval_multiplier", polling_interval_multiplier)
        if project_export_enabled is not None:
            _setter("project_export_enabled", project_export_enabled)
        if prometheus_metrics_enabled is not None:
            _setter("prometheus_metrics_enabled", prometheus_metrics_enabled)
        if protected_ci_variables is not None:
            _setter("protected_ci_variables", protected_ci_variables)
        if push_event_activities_limit is not None:
            _setter("push_event_activities_limit", push_event_activities_limit)
        if push_event_hooks_limit is not None:
            _setter("push_event_hooks_limit", push_event_hooks_limit)
        if pypi_package_requests_forwarding is not None:
            _setter("pypi_package_requests_forwarding", pypi_package_requests_forwarding)
        if rate_limiting_response_text is not None:
            _setter("rate_limiting_response_text", rate_limiting_response_text)
        if raw_blob_request_limit is not None:
            _setter("raw_blob_request_limit", raw_blob_request_limit)
        if recaptcha_enabled is not None:
            _setter("recaptcha_enabled", recaptcha_enabled)
        if recaptcha_private_key is not None:
            _setter("recaptcha_private_key", recaptcha_private_key)
        if recaptcha_site_key is not None:
            _setter("recaptcha_site_key", recaptcha_site_key)
        if receive_max_input_size is not None:
            _setter("receive_max_input_size", receive_max_input_size)
        if repository_checks_enabled is not None:
            _setter("repository_checks_enabled", repository_checks_enabled)
        if repository_size_limit is not None:
            _setter("repository_size_limit", repository_size_limit)
        if repository_storages is not None:
            _setter("repository_storages", repository_storages)
        if repository_storages_weighted is not None:
            _setter("repository_storages_weighted", repository_storages_weighted)
        if require_admin_approval_after_user_signup is not None:
            _setter("require_admin_approval_after_user_signup", require_admin_approval_after_user_signup)
        if require_two_factor_authentication is not None:
            _setter("require_two_factor_authentication", require_two_factor_authentication)
        if restricted_visibility_levels is not None:
            _setter("restricted_visibility_levels", restricted_visibility_levels)
        if rsa_key_restriction is not None:
            _setter("rsa_key_restriction", rsa_key_restriction)
        if search_rate_limit is not None:
            _setter("search_rate_limit", search_rate_limit)
        if search_rate_limit_unauthenticated is not None:
            _setter("search_rate_limit_unauthenticated", search_rate_limit_unauthenticated)
        if send_user_confirmation_email is not None:
            _setter("send_user_confirmation_email", send_user_confirmation_email)
        if session_expire_delay is not None:
            _setter("session_expire_delay", session_expire_delay)
        if shared_runners_enabled is not None:
            _setter("shared_runners_enabled", shared_runners_enabled)
        if shared_runners_minutes is not None:
            _setter("shared_runners_minutes", shared_runners_minutes)
        if shared_runners_text is not None:
            _setter("shared_runners_text", shared_runners_text)
        if sidekiq_job_limiter_compression_threshold_bytes is not None:
            _setter("sidekiq_job_limiter_compression_threshold_bytes", sidekiq_job_limiter_compression_threshold_bytes)
        if sidekiq_job_limiter_limit_bytes is not None:
            _setter("sidekiq_job_limiter_limit_bytes", sidekiq_job_limiter_limit_bytes)
        if sidekiq_job_limiter_mode is not None:
            _setter("sidekiq_job_limiter_mode", sidekiq_job_limiter_mode)
        if sign_in_text is not None:
            _setter("sign_in_text", sign_in_text)
        if signup_enabled is not None:
            _setter("signup_enabled", signup_enabled)
        if slack_app_enabled is not None:
            _setter("slack_app_enabled", slack_app_enabled)
        if slack_app_id is not None:
            _setter("slack_app_id", slack_app_id)
        if slack_app_secret is not None:
            _setter("slack_app_secret", slack_app_secret)
        if slack_app_signing_secret is not None:
            _setter("slack_app_signing_secret", slack_app_signing_secret)
        if slack_app_verification_token is not None:
            _setter("slack_app_verification_token", slack_app_verification_token)
        if snippet_size_limit is not None:
            _setter("snippet_size_limit", snippet_size_limit)
        if snowplow_app_id is not None:
            _setter("snowplow_app_id", snowplow_app_id)
        if snowplow_collector_hostname is not None:
            _setter("snowplow_collector_hostname", snowplow_collector_hostname)
        if snowplow_cookie_domain is not None:
            _setter("snowplow_cookie_domain", snowplow_cookie_domain)
        if snowplow_enabled is not None:
            _setter("snowplow_enabled", snowplow_enabled)
        if sourcegraph_enabled is not None:
            _setter("sourcegraph_enabled", sourcegraph_enabled)
        if sourcegraph_public_only is not None:
            _setter("sourcegraph_public_only", sourcegraph_public_only)
        if sourcegraph_url is not None:
            _setter("sourcegraph_url", sourcegraph_url)
        if spam_check_api_key is not None:
            _setter("spam_check_api_key", spam_check_api_key)
        if spam_check_endpoint_enabled is not None:
            _setter("spam_check_endpoint_enabled", spam_check_endpoint_enabled)
        if spam_check_endpoint_url is not None:
            _setter("spam_check_endpoint_url", spam_check_endpoint_url)
        if suggest_pipeline_enabled is not None:
            _setter("suggest_pipeline_enabled", suggest_pipeline_enabled)
        if terminal_max_session_time is not None:
            _setter("terminal_max_session_time", terminal_max_session_time)
        if terms is not None:
            _setter("terms", terms)
        if throttle_authenticated_api_enabled is not None:
            _setter("throttle_authenticated_api_enabled", throttle_authenticated_api_enabled)
        if throttle_authenticated_api_period_in_seconds is not None:
            _setter("throttle_authenticated_api_period_in_seconds", throttle_authenticated_api_period_in_seconds)
        if throttle_authenticated_api_requests_per_period is not None:
            _setter("throttle_authenticated_api_requests_per_period", throttle_authenticated_api_requests_per_period)
        if throttle_authenticated_packages_api_enabled is not None:
            _setter("throttle_authenticated_packages_api_enabled", throttle_authenticated_packages_api_enabled)
        if throttle_authenticated_packages_api_period_in_seconds is not None:
            _setter("throttle_authenticated_packages_api_period_in_seconds", throttle_authenticated_packages_api_period_in_seconds)
        if throttle_authenticated_packages_api_requests_per_period is not None:
            _setter("throttle_authenticated_packages_api_requests_per_period", throttle_authenticated_packages_api_requests_per_period)
        if throttle_authenticated_web_enabled is not None:
            _setter("throttle_authenticated_web_enabled", throttle_authenticated_web_enabled)
        if throttle_authenticated_web_period_in_seconds is not None:
            _setter("throttle_authenticated_web_period_in_seconds", throttle_authenticated_web_period_in_seconds)
        if throttle_authenticated_web_requests_per_period is not None:
            _setter("throttle_authenticated_web_requests_per_period", throttle_authenticated_web_requests_per_period)
        if throttle_unauthenticated_api_enabled is not None:
            _setter("throttle_unauthenticated_api_enabled", throttle_unauthenticated_api_enabled)
        if throttle_unauthenticated_api_period_in_seconds is not None:
            _setter("throttle_unauthenticated_api_period_in_seconds", throttle_unauthenticated_api_period_in_seconds)
        if throttle_unauthenticated_api_requests_per_period is not None:
            _setter("throttle_unauthenticated_api_requests_per_period", throttle_unauthenticated_api_requests_per_period)
        if throttle_unauthenticated_packages_api_enabled is not None:
            _setter("throttle_unauthenticated_packages_api_enabled", throttle_unauthenticated_packages_api_enabled)
        if throttle_unauthenticated_packages_api_period_in_seconds is not None:
            _setter("throttle_unauthenticated_packages_api_period_in_seconds", throttle_unauthenticated_packages_api_period_in_seconds)
        if throttle_unauthenticated_packages_api_requests_per_period is not None:
            _setter("throttle_unauthenticated_packages_api_requests_per_period", throttle_unauthenticated_packages_api_requests_per_period)
        if throttle_unauthenticated_web_enabled is not None:
            _setter("throttle_unauthenticated_web_enabled", throttle_unauthenticated_web_enabled)
        if throttle_unauthenticated_web_period_in_seconds is not None:
            _setter("throttle_unauthenticated_web_period_in_seconds", throttle_unauthenticated_web_period_in_seconds)
        if throttle_unauthenticated_web_requests_per_period is not None:
            _setter("throttle_unauthenticated_web_requests_per_period", throttle_unauthenticated_web_requests_per_period)
        if time_tracking_limit_to_hours is not None:
            _setter("time_tracking_limit_to_hours", time_tracking_limit_to_hours)
        if two_factor_grace_period is not None:
            _setter("two_factor_grace_period", two_factor_grace_period)
        if unique_ips_limit_enabled is not None:
            _setter("unique_ips_limit_enabled", unique_ips_limit_enabled)
        if unique_ips_limit_per_user is not None:
            _setter("unique_ips_limit_per_user", unique_ips_limit_per_user)
        if unique_ips_limit_time_window is not None:
            _setter("unique_ips_limit_time_window", unique_ips_limit_time_window)
        if usage_ping_enabled is not None:
            _setter("usage_ping_enabled", usage_ping_enabled)
        if user_deactivation_emails_enabled is not None:
            _setter("user_deactivation_emails_enabled", user_deactivation_emails_enabled)
        if user_default_external is not None:
            _setter("user_default_external", user_default_external)
        if user_default_internal_regex is not None:
            _setter("user_default_internal_regex", user_default_internal_regex)
        if user_oauth_applications is not None:
            _setter("user_oauth_applications", user_oauth_applications)
        if user_show_add_ssh_key_message is not None:
            _setter("user_show_add_ssh_key_message", user_show_add_ssh_key_message)
        if version_check_enabled is not None:
            _setter("version_check_enabled", version_check_enabled)
        if web_ide_clientside_preview_enabled is not None:
            _setter("web_ide_clientside_preview_enabled", web_ide_clientside_preview_enabled)
        if whats_new_variant is not None:
            _setter("whats_new_variant", whats_new_variant)
        if wiki_page_max_content_bytes is not None:
            _setter("wiki_page_max_content_bytes", wiki_page_max_content_bytes)

    @property
    @pulumi.getter(name="abuseNotificationEmail")
    def abuse_notification_email(self) -> Optional[pulumi.Input[str]]:
        """
        If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        """
        return pulumi.get(self, "abuse_notification_email")

    @abuse_notification_email.setter
    def abuse_notification_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abuse_notification_email", value)

    @property
    @pulumi.getter(name="adminMode")
    def admin_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        """
        return pulumi.get(self, "admin_mode")

    @admin_mode.setter
    def admin_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_mode", value)

    @property
    @pulumi.getter(name="afterSignOutPath")
    def after_sign_out_path(self) -> Optional[pulumi.Input[str]]:
        """
        Where to redirect users after logout.
        """
        return pulumi.get(self, "after_sign_out_path")

    @after_sign_out_path.setter
    def after_sign_out_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "after_sign_out_path", value)

    @property
    @pulumi.getter(name="afterSignUpText")
    def after_sign_up_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text shown to the user after signing up.
        """
        return pulumi.get(self, "after_sign_up_text")

    @after_sign_up_text.setter
    def after_sign_up_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "after_sign_up_text", value)

    @property
    @pulumi.getter(name="akismetApiKey")
    def akismet_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key for Akismet spam protection.
        """
        return pulumi.get(self, "akismet_api_key")

    @akismet_api_key.setter
    def akismet_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "akismet_api_key", value)

    @property
    @pulumi.getter(name="akismetEnabled")
    def akismet_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        """
        return pulumi.get(self, "akismet_enabled")

    @akismet_enabled.setter
    def akismet_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "akismet_enabled", value)

    @property
    @pulumi.getter(name="allowGroupOwnersToManageLdap")
    def allow_group_owners_to_manage_ldap(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to allow group owners to manage LDAP.
        """
        return pulumi.get(self, "allow_group_owners_to_manage_ldap")

    @allow_group_owners_to_manage_ldap.setter
    def allow_group_owners_to_manage_ldap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_group_owners_to_manage_ldap", value)

    @property
    @pulumi.getter(name="allowLocalRequestsFromSystemHooks")
    def allow_local_requests_from_system_hooks(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow requests to the local network from system hooks.
        """
        return pulumi.get(self, "allow_local_requests_from_system_hooks")

    @allow_local_requests_from_system_hooks.setter
    def allow_local_requests_from_system_hooks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_local_requests_from_system_hooks", value)

    @property
    @pulumi.getter(name="allowLocalRequestsFromWebHooksAndServices")
    def allow_local_requests_from_web_hooks_and_services(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow requests to the local network from web hooks and services.
        """
        return pulumi.get(self, "allow_local_requests_from_web_hooks_and_services")

    @allow_local_requests_from_web_hooks_and_services.setter
    def allow_local_requests_from_web_hooks_and_services(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_local_requests_from_web_hooks_and_services", value)

    @property
    @pulumi.getter(name="archiveBuildsInHumanReadable")
    def archive_builds_in_human_readable(self) -> Optional[pulumi.Input[str]]:
        """
        Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        """
        return pulumi.get(self, "archive_builds_in_human_readable")

    @archive_builds_in_human_readable.setter
    def archive_builds_in_human_readable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_builds_in_human_readable", value)

    @property
    @pulumi.getter(name="assetProxyAllowlists")
    def asset_proxy_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_allowlists")

    @asset_proxy_allowlists.setter
    def asset_proxy_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "asset_proxy_allowlists", value)

    @property
    @pulumi.getter(name="assetProxyEnabled")
    def asset_proxy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_enabled")

    @asset_proxy_enabled.setter
    def asset_proxy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "asset_proxy_enabled", value)

    @property
    @pulumi.getter(name="assetProxySecretKey")
    def asset_proxy_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_secret_key")

    @asset_proxy_secret_key.setter
    def asset_proxy_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_proxy_secret_key", value)

    @property
    @pulumi.getter(name="assetProxyUrl")
    def asset_proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the asset proxy server. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_url")

    @asset_proxy_url.setter
    def asset_proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_proxy_url", value)

    @property
    @pulumi.getter(name="authorizedKeysEnabled")
    def authorized_keys_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        """
        return pulumi.get(self, "authorized_keys_enabled")

    @authorized_keys_enabled.setter
    def authorized_keys_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authorized_keys_enabled", value)

    @property
    @pulumi.getter(name="autoDevopsDomain")
    def auto_devops_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        """
        return pulumi.get(self, "auto_devops_domain")

    @auto_devops_domain.setter
    def auto_devops_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_devops_domain", value)

    @property
    @pulumi.getter(name="autoDevopsEnabled")
    def auto_devops_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        """
        return pulumi.get(self, "auto_devops_enabled")

    @auto_devops_enabled.setter
    def auto_devops_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_devops_enabled", value)

    @property
    @pulumi.getter(name="automaticPurchasedStorageAllocation")
    def automatic_purchased_storage_allocation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling this permits automatic allocation of purchased storage in a namespace.
        """
        return pulumi.get(self, "automatic_purchased_storage_allocation")

    @automatic_purchased_storage_allocation.setter
    def automatic_purchased_storage_allocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_purchased_storage_allocation", value)

    @property
    @pulumi.getter(name="canCreateGroup")
    def can_create_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether users can create top-level groups. Introduced in GitLab 15.5.
        """
        return pulumi.get(self, "can_create_group")

    @can_create_group.setter
    def can_create_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_create_group", value)

    @property
    @pulumi.getter(name="checkNamespacePlan")
    def check_namespace_plan(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        """
        return pulumi.get(self, "check_namespace_plan")

    @check_namespace_plan.setter
    def check_namespace_plan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "check_namespace_plan", value)

    @property
    @pulumi.getter(name="commitEmailHostname")
    def commit_email_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Custom hostname (for private commit emails).
        """
        return pulumi.get(self, "commit_email_hostname")

    @commit_email_hostname.setter
    def commit_email_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_email_hostname", value)

    @property
    @pulumi.getter(name="containerExpirationPoliciesEnableHistoricEntries")
    def container_expiration_policies_enable_historic_entries(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cleanup policies for all projects.
        """
        return pulumi.get(self, "container_expiration_policies_enable_historic_entries")

    @container_expiration_policies_enable_historic_entries.setter
    def container_expiration_policies_enable_historic_entries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "container_expiration_policies_enable_historic_entries", value)

    @property
    @pulumi.getter(name="containerRegistryCleanupTagsServiceMaxListSize")
    def container_registry_cleanup_tags_service_max_list_size(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of tags that can be deleted in a single execution of cleanup policies.
        """
        return pulumi.get(self, "container_registry_cleanup_tags_service_max_list_size")

    @container_registry_cleanup_tags_service_max_list_size.setter
    def container_registry_cleanup_tags_service_max_list_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_cleanup_tags_service_max_list_size", value)

    @property
    @pulumi.getter(name="containerRegistryDeleteTagsServiceTimeout")
    def container_registry_delete_tags_service_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        """
        return pulumi.get(self, "container_registry_delete_tags_service_timeout")

    @container_registry_delete_tags_service_timeout.setter
    def container_registry_delete_tags_service_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_delete_tags_service_timeout", value)

    @property
    @pulumi.getter(name="containerRegistryExpirationPoliciesCaching")
    def container_registry_expiration_policies_caching(self) -> Optional[pulumi.Input[bool]]:
        """
        Caching during the execution of cleanup policies.
        """
        return pulumi.get(self, "container_registry_expiration_policies_caching")

    @container_registry_expiration_policies_caching.setter
    def container_registry_expiration_policies_caching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "container_registry_expiration_policies_caching", value)

    @property
    @pulumi.getter(name="containerRegistryExpirationPoliciesWorkerCapacity")
    def container_registry_expiration_policies_worker_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Number of workers for cleanup policies.
        """
        return pulumi.get(self, "container_registry_expiration_policies_worker_capacity")

    @container_registry_expiration_policies_worker_capacity.setter
    def container_registry_expiration_policies_worker_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_expiration_policies_worker_capacity", value)

    @property
    @pulumi.getter(name="containerRegistryTokenExpireDelay")
    def container_registry_token_expire_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Container Registry token duration in minutes.
        """
        return pulumi.get(self, "container_registry_token_expire_delay")

    @container_registry_token_expire_delay.setter
    def container_registry_token_expire_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_registry_token_expire_delay", value)

    @property
    @pulumi.getter(name="deactivateDormantUsers")
    def deactivate_dormant_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic deactivation of dormant users.
        """
        return pulumi.get(self, "deactivate_dormant_users")

    @deactivate_dormant_users.setter
    def deactivate_dormant_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deactivate_dormant_users", value)

    @property
    @pulumi.getter(name="defaultArtifactsExpireIn")
    def default_artifacts_expire_in(self) -> Optional[pulumi.Input[str]]:
        """
        Set the default expiration time for each job’s artifacts.
        """
        return pulumi.get(self, "default_artifacts_expire_in")

    @default_artifacts_expire_in.setter
    def default_artifacts_expire_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_artifacts_expire_in", value)

    @property
    @pulumi.getter(name="defaultBranchName")
    def default_branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance-level custom initial branch name (introduced in GitLab 13.2).
        """
        return pulumi.get(self, "default_branch_name")

    @default_branch_name.setter
    def default_branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch_name", value)

    @property
    @pulumi.getter(name="defaultBranchProtection")
    def default_branch_protection(self) -> Optional[pulumi.Input[int]]:
        """
        Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        """
        return pulumi.get(self, "default_branch_protection")

    @default_branch_protection.setter
    def default_branch_protection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_branch_protection", value)

    @property
    @pulumi.getter(name="defaultCiConfigPath")
    def default_ci_config_path(self) -> Optional[pulumi.Input[str]]:
        """
        Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        """
        return pulumi.get(self, "default_ci_config_path")

    @default_ci_config_path.setter
    def default_ci_config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_ci_config_path", value)

    @property
    @pulumi.getter(name="defaultGroupVisibility")
    def default_group_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        What visibility level new groups receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_group_visibility")

    @default_group_visibility.setter
    def default_group_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_group_visibility", value)

    @property
    @pulumi.getter(name="defaultProjectCreation")
    def default_project_creation(self) -> Optional[pulumi.Input[int]]:
        """
        Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        """
        return pulumi.get(self, "default_project_creation")

    @default_project_creation.setter
    def default_project_creation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_project_creation", value)

    @property
    @pulumi.getter(name="defaultProjectVisibility")
    def default_project_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        What visibility level new projects receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_project_visibility")

    @default_project_visibility.setter
    def default_project_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_project_visibility", value)

    @property
    @pulumi.getter(name="defaultProjectsLimit")
    def default_projects_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Project limit per user.
        """
        return pulumi.get(self, "default_projects_limit")

    @default_projects_limit.setter
    def default_projects_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_projects_limit", value)

    @property
    @pulumi.getter(name="defaultSnippetVisibility")
    def default_snippet_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        What visibility level new snippets receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_snippet_visibility")

    @default_snippet_visibility.setter
    def default_snippet_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_snippet_visibility", value)

    @property
    @pulumi.getter(name="delayedGroupDeletion")
    def delayed_group_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable delayed group deletion. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        """
        return pulumi.get(self, "delayed_group_deletion")

    @delayed_group_deletion.setter
    def delayed_group_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delayed_group_deletion", value)

    @property
    @pulumi.getter(name="delayedProjectDeletion")
    def delayed_project_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable delayed project deletion by default in new groups. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        """
        return pulumi.get(self, "delayed_project_deletion")

    @delayed_project_deletion.setter
    def delayed_project_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delayed_project_deletion", value)

    @property
    @pulumi.getter(name="deleteInactiveProjects")
    def delete_inactive_projects(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable inactive project deletion feature. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion).
        """
        return pulumi.get(self, "delete_inactive_projects")

    @delete_inactive_projects.setter
    def delete_inactive_projects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_inactive_projects", value)

    @property
    @pulumi.getter(name="deletionAdjournedPeriod")
    def deletion_adjourned_period(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        """
        return pulumi.get(self, "deletion_adjourned_period")

    @deletion_adjourned_period.setter
    def deletion_adjourned_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deletion_adjourned_period", value)

    @property
    @pulumi.getter(name="diffMaxFiles")
    def diff_max_files(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum files in a diff.
        """
        return pulumi.get(self, "diff_max_files")

    @diff_max_files.setter
    def diff_max_files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "diff_max_files", value)

    @property
    @pulumi.getter(name="diffMaxLines")
    def diff_max_lines(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum lines in a diff.
        """
        return pulumi.get(self, "diff_max_lines")

    @diff_max_lines.setter
    def diff_max_lines(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "diff_max_lines", value)

    @property
    @pulumi.getter(name="diffMaxPatchBytes")
    def diff_max_patch_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum diff patch size, in bytes.
        """
        return pulumi.get(self, "diff_max_patch_bytes")

    @diff_max_patch_bytes.setter
    def diff_max_patch_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "diff_max_patch_bytes", value)

    @property
    @pulumi.getter(name="disableFeedToken")
    def disable_feed_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        """
        return pulumi.get(self, "disable_feed_token")

    @disable_feed_token.setter
    def disable_feed_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_feed_token", value)

    @property
    @pulumi.getter(name="disabledOauthSignInSources")
    def disabled_oauth_sign_in_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Disabled OAuth sign-in sources.
        """
        return pulumi.get(self, "disabled_oauth_sign_in_sources")

    @disabled_oauth_sign_in_sources.setter
    def disabled_oauth_sign_in_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disabled_oauth_sign_in_sources", value)

    @property
    @pulumi.getter(name="dnsRebindingProtectionEnabled")
    def dns_rebinding_protection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enforce DNS rebinding attack protection.
        """
        return pulumi.get(self, "dns_rebinding_protection_enabled")

    @dns_rebinding_protection_enabled.setter
    def dns_rebinding_protection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_rebinding_protection_enabled", value)

    @property
    @pulumi.getter(name="domainAllowlists")
    def domain_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Force people to use only corporate emails for sign-up. Null means there is no restriction.
        """
        return pulumi.get(self, "domain_allowlists")

    @domain_allowlists.setter
    def domain_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_allowlists", value)

    @property
    @pulumi.getter(name="domainDenylistEnabled")
    def domain_denylist_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        """
        return pulumi.get(self, "domain_denylist_enabled")

    @domain_denylist_enabled.setter
    def domain_denylist_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "domain_denylist_enabled", value)

    @property
    @pulumi.getter(name="domainDenylists")
    def domain_denylists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        """
        return pulumi.get(self, "domain_denylists")

    @domain_denylists.setter
    def domain_denylists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_denylists", value)

    @property
    @pulumi.getter(name="dsaKeyRestriction")
    def dsa_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
        """
        return pulumi.get(self, "dsa_key_restriction")

    @dsa_key_restriction.setter
    def dsa_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dsa_key_restriction", value)

    @property
    @pulumi.getter(name="ecdsaKeyRestriction")
    def ecdsa_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
        """
        return pulumi.get(self, "ecdsa_key_restriction")

    @ecdsa_key_restriction.setter
    def ecdsa_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ecdsa_key_restriction", value)

    @property
    @pulumi.getter(name="ecdsaSkKeyRestriction")
    def ecdsa_sk_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
        """
        return pulumi.get(self, "ecdsa_sk_key_restriction")

    @ecdsa_sk_key_restriction.setter
    def ecdsa_sk_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ecdsa_sk_key_restriction", value)

    @property
    @pulumi.getter(name="ed25519KeyRestriction")
    def ed25519_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
        """
        return pulumi.get(self, "ed25519_key_restriction")

    @ed25519_key_restriction.setter
    def ed25519_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ed25519_key_restriction", value)

    @property
    @pulumi.getter(name="ed25519SkKeyRestriction")
    def ed25519_sk_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
        """
        return pulumi.get(self, "ed25519_sk_key_restriction")

    @ed25519_sk_key_restriction.setter
    def ed25519_sk_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ed25519_sk_key_restriction", value)

    @property
    @pulumi.getter(name="eksAccessKeyId")
    def eks_access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM access key ID.
        """
        return pulumi.get(self, "eks_access_key_id")

    @eks_access_key_id.setter
    def eks_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eks_access_key_id", value)

    @property
    @pulumi.getter(name="eksAccountId")
    def eks_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon account ID.
        """
        return pulumi.get(self, "eks_account_id")

    @eks_account_id.setter
    def eks_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eks_account_id", value)

    @property
    @pulumi.getter(name="eksIntegrationEnabled")
    def eks_integration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable integration with Amazon EKS.
        """
        return pulumi.get(self, "eks_integration_enabled")

    @eks_integration_enabled.setter
    def eks_integration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eks_integration_enabled", value)

    @property
    @pulumi.getter(name="eksSecretAccessKey")
    def eks_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM secret access key.
        """
        return pulumi.get(self, "eks_secret_access_key")

    @eks_secret_access_key.setter
    def eks_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eks_secret_access_key", value)

    @property
    @pulumi.getter(name="elasticsearchAws")
    def elasticsearch_aws(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the use of AWS hosted Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_aws")

    @elasticsearch_aws.setter
    def elasticsearch_aws(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_aws", value)

    @property
    @pulumi.getter(name="elasticsearchAwsAccessKey")
    def elasticsearch_aws_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM access key.
        """
        return pulumi.get(self, "elasticsearch_aws_access_key")

    @elasticsearch_aws_access_key.setter
    def elasticsearch_aws_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_aws_access_key", value)

    @property
    @pulumi.getter(name="elasticsearchAwsRegion")
    def elasticsearch_aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS region the Elasticsearch domain is configured.
        """
        return pulumi.get(self, "elasticsearch_aws_region")

    @elasticsearch_aws_region.setter
    def elasticsearch_aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_aws_region", value)

    @property
    @pulumi.getter(name="elasticsearchAwsSecretAccessKey")
    def elasticsearch_aws_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM secret access key.
        """
        return pulumi.get(self, "elasticsearch_aws_secret_access_key")

    @elasticsearch_aws_secret_access_key.setter
    def elasticsearch_aws_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_aws_secret_access_key", value)

    @property
    @pulumi.getter(name="elasticsearchIndexedFieldLengthLimit")
    def elasticsearch_indexed_field_length_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        """
        return pulumi.get(self, "elasticsearch_indexed_field_length_limit")

    @elasticsearch_indexed_field_length_limit.setter
    def elasticsearch_indexed_field_length_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_indexed_field_length_limit", value)

    @property
    @pulumi.getter(name="elasticsearchIndexedFileSizeLimitKb")
    def elasticsearch_indexed_file_size_limit_kb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of repository and wiki files that are indexed by Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_indexed_file_size_limit_kb")

    @elasticsearch_indexed_file_size_limit_kb.setter
    def elasticsearch_indexed_file_size_limit_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_indexed_file_size_limit_kb", value)

    @property
    @pulumi.getter(name="elasticsearchIndexing")
    def elasticsearch_indexing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Elasticsearch indexing.
        """
        return pulumi.get(self, "elasticsearch_indexing")

    @elasticsearch_indexing.setter
    def elasticsearch_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_indexing", value)

    @property
    @pulumi.getter(name="elasticsearchLimitIndexing")
    def elasticsearch_limit_indexing(self) -> Optional[pulumi.Input[bool]]:
        """
        Limit Elasticsearch to index certain namespaces and projects.
        """
        return pulumi.get(self, "elasticsearch_limit_indexing")

    @elasticsearch_limit_indexing.setter
    def elasticsearch_limit_indexing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_limit_indexing", value)

    @property
    @pulumi.getter(name="elasticsearchMaxBulkConcurrency")
    def elasticsearch_max_bulk_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        """
        return pulumi.get(self, "elasticsearch_max_bulk_concurrency")

    @elasticsearch_max_bulk_concurrency.setter
    def elasticsearch_max_bulk_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_max_bulk_concurrency", value)

    @property
    @pulumi.getter(name="elasticsearchMaxBulkSizeMb")
    def elasticsearch_max_bulk_size_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        """
        return pulumi.get(self, "elasticsearch_max_bulk_size_mb")

    @elasticsearch_max_bulk_size_mb.setter
    def elasticsearch_max_bulk_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_max_bulk_size_mb", value)

    @property
    @pulumi.getter(name="elasticsearchNamespaceIds")
    def elasticsearch_namespace_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        """
        return pulumi.get(self, "elasticsearch_namespace_ids")

    @elasticsearch_namespace_ids.setter
    def elasticsearch_namespace_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticsearch_namespace_ids", value)

    @property
    @pulumi.getter(name="elasticsearchPassword")
    def elasticsearch_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of your Elasticsearch instance.
        """
        return pulumi.get(self, "elasticsearch_password")

    @elasticsearch_password.setter
    def elasticsearch_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_password", value)

    @property
    @pulumi.getter(name="elasticsearchProjectIds")
    def elasticsearch_project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        """
        return pulumi.get(self, "elasticsearch_project_ids")

    @elasticsearch_project_ids.setter
    def elasticsearch_project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticsearch_project_ids", value)

    @property
    @pulumi.getter(name="elasticsearchSearch")
    def elasticsearch_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Elasticsearch search.
        """
        return pulumi.get(self, "elasticsearch_search")

    @elasticsearch_search.setter
    def elasticsearch_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticsearch_search", value)

    @property
    @pulumi.getter(name="elasticsearchUrls")
    def elasticsearch_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        """
        return pulumi.get(self, "elasticsearch_urls")

    @elasticsearch_urls.setter
    def elasticsearch_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticsearch_urls", value)

    @property
    @pulumi.getter(name="elasticsearchUsername")
    def elasticsearch_username(self) -> Optional[pulumi.Input[str]]:
        """
        The username of your Elasticsearch instance.
        """
        return pulumi.get(self, "elasticsearch_username")

    @elasticsearch_username.setter
    def elasticsearch_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_username", value)

    @property
    @pulumi.getter(name="emailAdditionalText")
    def email_additional_text(self) -> Optional[pulumi.Input[str]]:
        """
        Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        """
        return pulumi.get(self, "email_additional_text")

    @email_additional_text.setter
    def email_additional_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_additional_text", value)

    @property
    @pulumi.getter(name="emailAuthorInBody")
    def email_author_in_body(self) -> Optional[pulumi.Input[bool]]:
        """
        Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        """
        return pulumi.get(self, "email_author_in_body")

    @email_author_in_body.setter
    def email_author_in_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_author_in_body", value)

    @property
    @pulumi.getter(name="enabledGitAccessProtocol")
    def enabled_git_access_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        """
        return pulumi.get(self, "enabled_git_access_protocol")

    @enabled_git_access_protocol.setter
    def enabled_git_access_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled_git_access_protocol", value)

    @property
    @pulumi.getter(name="enforceNamespaceStorageLimit")
    def enforce_namespace_storage_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling this permits enforcement of namespace storage limits.
        """
        return pulumi.get(self, "enforce_namespace_storage_limit")

    @enforce_namespace_storage_limit.setter
    def enforce_namespace_storage_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_namespace_storage_limit", value)

    @property
    @pulumi.getter(name="enforceTerms")
    def enforce_terms(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: terms) Enforce application ToS to all users.
        """
        return pulumi.get(self, "enforce_terms")

    @enforce_terms.setter
    def enforce_terms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_terms", value)

    @property
    @pulumi.getter(name="externalAuthClientCert")
    def external_auth_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        """
        return pulumi.get(self, "external_auth_client_cert")

    @external_auth_client_cert.setter
    def external_auth_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth_client_cert", value)

    @property
    @pulumi.getter(name="externalAuthClientKey")
    def external_auth_client_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        """
        return pulumi.get(self, "external_auth_client_key")

    @external_auth_client_key.setter
    def external_auth_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth_client_key", value)

    @property
    @pulumi.getter(name="externalAuthClientKeyPass")
    def external_auth_client_key_pass(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        """
        return pulumi.get(self, "external_auth_client_key_pass")

    @external_auth_client_key_pass.setter
    def external_auth_client_key_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth_client_key_pass", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceDefaultLabel")
    def external_authorization_service_default_label(self) -> Optional[pulumi.Input[str]]:
        """
        The default classification label to use when requesting authorization and no classification label has been specified on the project.
        """
        return pulumi.get(self, "external_authorization_service_default_label")

    @external_authorization_service_default_label.setter
    def external_authorization_service_default_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_authorization_service_default_label", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceEnabled")
    def external_authorization_service_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        """
        return pulumi.get(self, "external_authorization_service_enabled")

    @external_authorization_service_enabled.setter
    def external_authorization_service_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external_authorization_service_enabled", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceTimeout")
    def external_authorization_service_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        """
        return pulumi.get(self, "external_authorization_service_timeout")

    @external_authorization_service_timeout.setter
    def external_authorization_service_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "external_authorization_service_timeout", value)

    @property
    @pulumi.getter(name="externalAuthorizationServiceUrl")
    def external_authorization_service_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to which authorization requests are directed.
        """
        return pulumi.get(self, "external_authorization_service_url")

    @external_authorization_service_url.setter
    def external_authorization_service_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_authorization_service_url", value)

    @property
    @pulumi.getter(name="externalPipelineValidationServiceTimeout")
    def external_pipeline_validation_service_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        """
        return pulumi.get(self, "external_pipeline_validation_service_timeout")

    @external_pipeline_validation_service_timeout.setter
    def external_pipeline_validation_service_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_pipeline_validation_service_timeout", value)

    @property
    @pulumi.getter(name="externalPipelineValidationServiceToken")
    def external_pipeline_validation_service_token(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        """
        return pulumi.get(self, "external_pipeline_validation_service_token")

    @external_pipeline_validation_service_token.setter
    def external_pipeline_validation_service_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_pipeline_validation_service_token", value)

    @property
    @pulumi.getter(name="externalPipelineValidationServiceUrl")
    def external_pipeline_validation_service_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to use for pipeline validation requests.
        """
        return pulumi.get(self, "external_pipeline_validation_service_url")

    @external_pipeline_validation_service_url.setter
    def external_pipeline_validation_service_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_pipeline_validation_service_url", value)

    @property
    @pulumi.getter(name="fileTemplateProjectId")
    def file_template_project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of a project to load custom file templates from.
        """
        return pulumi.get(self, "file_template_project_id")

    @file_template_project_id.setter
    def file_template_project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_template_project_id", value)

    @property
    @pulumi.getter(name="firstDayOfWeek")
    def first_day_of_week(self) -> Optional[pulumi.Input[int]]:
        """
        Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
        """
        return pulumi.get(self, "first_day_of_week")

    @first_day_of_week.setter
    def first_day_of_week(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "first_day_of_week", value)

    @property
    @pulumi.getter(name="geoNodeAllowedIps")
    def geo_node_allowed_ips(self) -> Optional[pulumi.Input[str]]:
        """
        Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        """
        return pulumi.get(self, "geo_node_allowed_ips")

    @geo_node_allowed_ips.setter
    def geo_node_allowed_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geo_node_allowed_ips", value)

    @property
    @pulumi.getter(name="geoStatusTimeout")
    def geo_status_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of seconds after which a request to get a secondary node status times out.
        """
        return pulumi.get(self, "geo_status_timeout")

    @geo_status_timeout.setter
    def geo_status_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "geo_status_timeout", value)

    @property
    @pulumi.getter(name="gitRateLimitUsersAllowlists")
    def git_rate_limit_users_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Introduced in GitLab 15.2.
        """
        return pulumi.get(self, "git_rate_limit_users_allowlists")

    @git_rate_limit_users_allowlists.setter
    def git_rate_limit_users_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "git_rate_limit_users_allowlists", value)

    @property
    @pulumi.getter(name="gitTwoFactorSessionExpiry")
    def git_two_factor_session_expiry(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        """
        return pulumi.get(self, "git_two_factor_session_expiry")

    @git_two_factor_session_expiry.setter
    def git_two_factor_session_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "git_two_factor_session_expiry", value)

    @property
    @pulumi.getter(name="gitalyTimeoutDefault")
    def gitaly_timeout_default(self) -> Optional[pulumi.Input[int]]:
        """
        Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_default")

    @gitaly_timeout_default.setter
    def gitaly_timeout_default(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gitaly_timeout_default", value)

    @property
    @pulumi.getter(name="gitalyTimeoutFast")
    def gitaly_timeout_fast(self) -> Optional[pulumi.Input[int]]:
        """
        Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_fast")

    @gitaly_timeout_fast.setter
    def gitaly_timeout_fast(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gitaly_timeout_fast", value)

    @property
    @pulumi.getter(name="gitalyTimeoutMedium")
    def gitaly_timeout_medium(self) -> Optional[pulumi.Input[int]]:
        """
        Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_medium")

    @gitaly_timeout_medium.setter
    def gitaly_timeout_medium(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gitaly_timeout_medium", value)

    @property
    @pulumi.getter(name="grafanaEnabled")
    def grafana_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Grafana.
        """
        return pulumi.get(self, "grafana_enabled")

    @grafana_enabled.setter
    def grafana_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "grafana_enabled", value)

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana URL.
        """
        return pulumi.get(self, "grafana_url")

    @grafana_url.setter
    def grafana_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_url", value)

    @property
    @pulumi.getter(name="gravatarEnabled")
    def gravatar_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Gravatar.
        """
        return pulumi.get(self, "gravatar_enabled")

    @gravatar_enabled.setter
    def gravatar_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gravatar_enabled", value)

    @property
    @pulumi.getter(name="groupOwnersCanManageDefaultBranchProtection")
    def group_owners_can_manage_default_branch_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent overrides of default branch protection.
        """
        return pulumi.get(self, "group_owners_can_manage_default_branch_protection")

    @group_owners_can_manage_default_branch_protection.setter
    def group_owners_can_manage_default_branch_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_owners_can_manage_default_branch_protection", value)

    @property
    @pulumi.getter(name="hashedStorageEnabled")
    def hashed_storage_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        """
        return pulumi.get(self, "hashed_storage_enabled")

    @hashed_storage_enabled.setter
    def hashed_storage_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hashed_storage_enabled", value)

    @property
    @pulumi.getter(name="helpPageHideCommercialContent")
    def help_page_hide_commercial_content(self) -> Optional[pulumi.Input[bool]]:
        """
        Hide marketing-related entries from help.
        """
        return pulumi.get(self, "help_page_hide_commercial_content")

    @help_page_hide_commercial_content.setter
    def help_page_hide_commercial_content(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help_page_hide_commercial_content", value)

    @property
    @pulumi.getter(name="helpPageSupportUrl")
    def help_page_support_url(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate support URL for help page and help dropdown.
        """
        return pulumi.get(self, "help_page_support_url")

    @help_page_support_url.setter
    def help_page_support_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_page_support_url", value)

    @property
    @pulumi.getter(name="helpPageText")
    def help_page_text(self) -> Optional[pulumi.Input[str]]:
        """
        Custom text displayed on the help page.
        """
        return pulumi.get(self, "help_page_text")

    @help_page_text.setter
    def help_page_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_page_text", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[pulumi.Input[str]]:
        """
        GitLab server administrator information.
        """
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter(name="hideThirdPartyOffers")
    def hide_third_party_offers(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not display offers from third parties in GitLab.
        """
        return pulumi.get(self, "hide_third_party_offers")

    @hide_third_party_offers.setter
    def hide_third_party_offers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_third_party_offers", value)

    @property
    @pulumi.getter(name="homePageUrl")
    def home_page_url(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect to this URL when not logged in.
        """
        return pulumi.get(self, "home_page_url")

    @home_page_url.setter
    def home_page_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_page_url", value)

    @property
    @pulumi.getter(name="housekeepingEnabled")
    def housekeeping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        """
        return pulumi.get(self, "housekeeping_enabled")

    @housekeeping_enabled.setter
    def housekeeping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "housekeeping_enabled", value)

    @property
    @pulumi.getter(name="housekeepingFullRepackPeriod")
    def housekeeping_full_repack_period(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Git pushes after which an incremental git repack is run.
        """
        return pulumi.get(self, "housekeeping_full_repack_period")

    @housekeeping_full_repack_period.setter
    def housekeeping_full_repack_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "housekeeping_full_repack_period", value)

    @property
    @pulumi.getter(name="housekeepingGcPeriod")
    def housekeeping_gc_period(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Git pushes after which git gc is run.
        """
        return pulumi.get(self, "housekeeping_gc_period")

    @housekeeping_gc_period.setter
    def housekeeping_gc_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "housekeeping_gc_period", value)

    @property
    @pulumi.getter(name="housekeepingIncrementalRepackPeriod")
    def housekeeping_incremental_repack_period(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Git pushes after which an incremental git repack is run.
        """
        return pulumi.get(self, "housekeeping_incremental_repack_period")

    @housekeeping_incremental_repack_period.setter
    def housekeeping_incremental_repack_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "housekeeping_incremental_repack_period", value)

    @property
    @pulumi.getter(name="htmlEmailsEnabled")
    def html_emails_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable HTML emails.
        """
        return pulumi.get(self, "html_emails_enabled")

    @html_emails_enabled.setter
    def html_emails_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "html_emails_enabled", value)

    @property
    @pulumi.getter(name="importSources")
    def import_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `Project`, `gitea`, `manifest`
        """
        return pulumi.get(self, "import_sources")

    @import_sources.setter
    def import_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "import_sources", value)

    @property
    @pulumi.getter(name="inProductMarketingEmailsEnabled")
    def in_product_marketing_emails_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable in-product marketing emails.
        """
        return pulumi.get(self, "in_product_marketing_emails_enabled")

    @in_product_marketing_emails_enabled.setter
    def in_product_marketing_emails_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "in_product_marketing_emails_enabled", value)

    @property
    @pulumi.getter(name="inactiveProjectsDeleteAfterMonths")
    def inactive_projects_delete_after_months(self) -> Optional[pulumi.Input[int]]:
        """
        If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_delete_after_months")

    @inactive_projects_delete_after_months.setter
    def inactive_projects_delete_after_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_projects_delete_after_months", value)

    @property
    @pulumi.getter(name="inactiveProjectsMinSizeMb")
    def inactive_projects_min_size_mb(self) -> Optional[pulumi.Input[int]]:
        """
        If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_min_size_mb")

    @inactive_projects_min_size_mb.setter
    def inactive_projects_min_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_projects_min_size_mb", value)

    @property
    @pulumi.getter(name="inactiveProjectsSendWarningEmailAfterMonths")
    def inactive_projects_send_warning_email_after_months(self) -> Optional[pulumi.Input[int]]:
        """
        If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_send_warning_email_after_months")

    @inactive_projects_send_warning_email_after_months.setter
    def inactive_projects_send_warning_email_after_months(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_projects_send_warning_email_after_months", value)

    @property
    @pulumi.getter(name="invisibleCaptchaEnabled")
    def invisible_captcha_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Invisible CAPTCHA spam detection during sign-up.
        """
        return pulumi.get(self, "invisible_captcha_enabled")

    @invisible_captcha_enabled.setter
    def invisible_captcha_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invisible_captcha_enabled", value)

    @property
    @pulumi.getter(name="issuesCreateLimit")
    def issues_create_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of issue creation requests per minute per user.
        """
        return pulumi.get(self, "issues_create_limit")

    @issues_create_limit.setter
    def issues_create_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "issues_create_limit", value)

    @property
    @pulumi.getter(name="keepLatestArtifact")
    def keep_latest_artifact(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
        """
        return pulumi.get(self, "keep_latest_artifact")

    @keep_latest_artifact.setter
    def keep_latest_artifact(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_latest_artifact", value)

    @property
    @pulumi.getter(name="localMarkdownVersion")
    def local_markdown_version(self) -> Optional[pulumi.Input[int]]:
        """
        Increase this value when any cached Markdown should be invalidated.
        """
        return pulumi.get(self, "local_markdown_version")

    @local_markdown_version.setter
    def local_markdown_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_markdown_version", value)

    @property
    @pulumi.getter(name="mailgunEventsEnabled")
    def mailgun_events_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Mailgun event receiver.
        """
        return pulumi.get(self, "mailgun_events_enabled")

    @mailgun_events_enabled.setter
    def mailgun_events_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mailgun_events_enabled", value)

    @property
    @pulumi.getter(name="mailgunSigningKey")
    def mailgun_signing_key(self) -> Optional[pulumi.Input[str]]:
        """
        The Mailgun HTTP webhook signing key for receiving events from webhook.
        """
        return pulumi.get(self, "mailgun_signing_key")

    @mailgun_signing_key.setter
    def mailgun_signing_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailgun_signing_key", value)

    @property
    @pulumi.getter(name="maintenanceMode")
    def maintenance_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        """
        return pulumi.get(self, "maintenance_mode")

    @maintenance_mode.setter
    def maintenance_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maintenance_mode", value)

    @property
    @pulumi.getter(name="maintenanceModeMessage")
    def maintenance_mode_message(self) -> Optional[pulumi.Input[str]]:
        """
        Message displayed when instance is in maintenance mode.
        """
        return pulumi.get(self, "maintenance_mode_message")

    @maintenance_mode_message.setter
    def maintenance_mode_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_mode_message", value)

    @property
    @pulumi.getter(name="maxArtifactsSize")
    def max_artifacts_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum artifacts size in MB.
        """
        return pulumi.get(self, "max_artifacts_size")

    @max_artifacts_size.setter
    def max_artifacts_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_artifacts_size", value)

    @property
    @pulumi.getter(name="maxAttachmentSize")
    def max_attachment_size(self) -> Optional[pulumi.Input[int]]:
        """
        Limit attachment size in MB.
        """
        return pulumi.get(self, "max_attachment_size")

    @max_attachment_size.setter
    def max_attachment_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_attachment_size", value)

    @property
    @pulumi.getter(name="maxExportSize")
    def max_export_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum export size in MB. 0 for unlimited.
        """
        return pulumi.get(self, "max_export_size")

    @max_export_size.setter
    def max_export_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_export_size", value)

    @property
    @pulumi.getter(name="maxImportSize")
    def max_import_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum import size in MB. 0 for unlimited.
        """
        return pulumi.get(self, "max_import_size")

    @max_import_size.setter
    def max_import_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_import_size", value)

    @property
    @pulumi.getter(name="maxNumberOfRepositoryDownloads")
    def max_number_of_repository_downloads(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "max_number_of_repository_downloads")

    @max_number_of_repository_downloads.setter
    def max_number_of_repository_downloads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_repository_downloads", value)

    @property
    @pulumi.getter(name="maxNumberOfRepositoryDownloadsWithinTimePeriod")
    def max_number_of_repository_downloads_within_time_period(self) -> Optional[pulumi.Input[int]]:
        """
        Reporting time period (in seconds). Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "max_number_of_repository_downloads_within_time_period")

    @max_number_of_repository_downloads_within_time_period.setter
    def max_number_of_repository_downloads_within_time_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_repository_downloads_within_time_period", value)

    @property
    @pulumi.getter(name="maxPagesSize")
    def max_pages_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of pages repositories in MB.
        """
        return pulumi.get(self, "max_pages_size")

    @max_pages_size.setter
    def max_pages_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pages_size", value)

    @property
    @pulumi.getter(name="maxPersonalAccessTokenLifetime")
    def max_personal_access_token_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum allowable lifetime for access tokens in days.
        """
        return pulumi.get(self, "max_personal_access_token_lifetime")

    @max_personal_access_token_lifetime.setter
    def max_personal_access_token_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_personal_access_token_lifetime", value)

    @property
    @pulumi.getter(name="maxSshKeyLifetime")
    def max_ssh_key_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        """
        return pulumi.get(self, "max_ssh_key_lifetime")

    @max_ssh_key_lifetime.setter
    def max_ssh_key_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ssh_key_lifetime", value)

    @property
    @pulumi.getter(name="metricsMethodCallThreshold")
    def metrics_method_call_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        A method call is only tracked when it takes longer than the given amount of milliseconds.
        """
        return pulumi.get(self, "metrics_method_call_threshold")

    @metrics_method_call_threshold.setter
    def metrics_method_call_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_method_call_threshold", value)

    @property
    @pulumi.getter(name="mirrorAvailable")
    def mirror_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        """
        return pulumi.get(self, "mirror_available")

    @mirror_available.setter
    def mirror_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mirror_available", value)

    @property
    @pulumi.getter(name="mirrorCapacityThreshold")
    def mirror_capacity_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum capacity to be available before scheduling more mirrors preemptively.
        """
        return pulumi.get(self, "mirror_capacity_threshold")

    @mirror_capacity_threshold.setter
    def mirror_capacity_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_capacity_threshold", value)

    @property
    @pulumi.getter(name="mirrorMaxCapacity")
    def mirror_max_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of mirrors that can be synchronizing at the same time.
        """
        return pulumi.get(self, "mirror_max_capacity")

    @mirror_max_capacity.setter
    def mirror_max_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_max_capacity", value)

    @property
    @pulumi.getter(name="mirrorMaxDelay")
    def mirror_max_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        """
        return pulumi.get(self, "mirror_max_delay")

    @mirror_max_delay.setter
    def mirror_max_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mirror_max_delay", value)

    @property
    @pulumi.getter(name="npmPackageRequestsForwarding")
    def npm_package_requests_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        """
        return pulumi.get(self, "npm_package_requests_forwarding")

    @npm_package_requests_forwarding.setter
    def npm_package_requests_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "npm_package_requests_forwarding", value)

    @property
    @pulumi.getter(name="outboundLocalRequestsWhitelists")
    def outbound_local_requests_whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        """
        return pulumi.get(self, "outbound_local_requests_whitelists")

    @outbound_local_requests_whitelists.setter
    def outbound_local_requests_whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outbound_local_requests_whitelists", value)

    @property
    @pulumi.getter(name="packageRegistryCleanupPoliciesWorkerCapacity")
    def package_registry_cleanup_policies_worker_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Number of workers assigned to the packages cleanup policies.
        """
        return pulumi.get(self, "package_registry_cleanup_policies_worker_capacity")

    @package_registry_cleanup_policies_worker_capacity.setter
    def package_registry_cleanup_policies_worker_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "package_registry_cleanup_policies_worker_capacity", value)

    @property
    @pulumi.getter(name="pagesDomainVerificationEnabled")
    def pages_domain_verification_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        """
        return pulumi.get(self, "pages_domain_verification_enabled")

    @pages_domain_verification_enabled.setter
    def pages_domain_verification_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pages_domain_verification_enabled", value)

    @property
    @pulumi.getter(name="passwordAuthenticationEnabledForGit")
    def password_authentication_enabled_for_git(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication for Git over HTTP(S) via a GitLab account password.
        """
        return pulumi.get(self, "password_authentication_enabled_for_git")

    @password_authentication_enabled_for_git.setter
    def password_authentication_enabled_for_git(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_authentication_enabled_for_git", value)

    @property
    @pulumi.getter(name="passwordAuthenticationEnabledForWeb")
    def password_authentication_enabled_for_web(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication for the web interface via a GitLab account password.
        """
        return pulumi.get(self, "password_authentication_enabled_for_web")

    @password_authentication_enabled_for_web.setter
    def password_authentication_enabled_for_web(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_authentication_enabled_for_web", value)

    @property
    @pulumi.getter(name="passwordLowercaseRequired")
    def password_lowercase_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_lowercase_required")

    @password_lowercase_required.setter
    def password_lowercase_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_lowercase_required", value)

    @property
    @pulumi.getter(name="passwordNumberRequired")
    def password_number_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_number_required")

    @password_number_required.setter
    def password_number_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_number_required", value)

    @property
    @pulumi.getter(name="passwordSymbolRequired")
    def password_symbol_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_symbol_required")

    @password_symbol_required.setter
    def password_symbol_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_symbol_required", value)

    @property
    @pulumi.getter(name="passwordUppercaseRequired")
    def password_uppercase_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_uppercase_required")

    @password_uppercase_required.setter
    def password_uppercase_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_uppercase_required", value)

    @property
    @pulumi.getter(name="performanceBarAllowedGroupPath")
    def performance_bar_allowed_group_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the group that is allowed to toggle the performance bar.
        """
        return pulumi.get(self, "performance_bar_allowed_group_path")

    @performance_bar_allowed_group_path.setter
    def performance_bar_allowed_group_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance_bar_allowed_group_path", value)

    @property
    @pulumi.getter(name="personalAccessTokenPrefix")
    def personal_access_token_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix for all generated personal access tokens.
        """
        return pulumi.get(self, "personal_access_token_prefix")

    @personal_access_token_prefix.setter
    def personal_access_token_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "personal_access_token_prefix", value)

    @property
    @pulumi.getter(name="pipelineLimitPerProjectUserSha")
    def pipeline_limit_per_project_user_sha(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of pipeline creation requests per minute per user and commit.
        """
        return pulumi.get(self, "pipeline_limit_per_project_user_sha")

    @pipeline_limit_per_project_user_sha.setter
    def pipeline_limit_per_project_user_sha(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pipeline_limit_per_project_user_sha", value)

    @property
    @pulumi.getter(name="plantumlEnabled")
    def plantuml_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: plantuml_url) Enable PlantUML integration.
        """
        return pulumi.get(self, "plantuml_enabled")

    @plantuml_enabled.setter
    def plantuml_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "plantuml_enabled", value)

    @property
    @pulumi.getter(name="plantumlUrl")
    def plantuml_url(self) -> Optional[pulumi.Input[str]]:
        """
        The PlantUML instance URL for integration.
        """
        return pulumi.get(self, "plantuml_url")

    @plantuml_url.setter
    def plantuml_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plantuml_url", value)

    @property
    @pulumi.getter(name="pollingIntervalMultiplier")
    def polling_interval_multiplier(self) -> Optional[pulumi.Input[float]]:
        """
        Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        """
        return pulumi.get(self, "polling_interval_multiplier")

    @polling_interval_multiplier.setter
    def polling_interval_multiplier(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "polling_interval_multiplier", value)

    @property
    @pulumi.getter(name="projectExportEnabled")
    def project_export_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable project export.
        """
        return pulumi.get(self, "project_export_enabled")

    @project_export_enabled.setter
    def project_export_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "project_export_enabled", value)

    @property
    @pulumi.getter(name="prometheusMetricsEnabled")
    def prometheus_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Prometheus metrics.
        """
        return pulumi.get(self, "prometheus_metrics_enabled")

    @prometheus_metrics_enabled.setter
    def prometheus_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prometheus_metrics_enabled", value)

    @property
    @pulumi.getter(name="protectedCiVariables")
    def protected_ci_variables(self) -> Optional[pulumi.Input[bool]]:
        """
        CI/CD variables are protected by default.
        """
        return pulumi.get(self, "protected_ci_variables")

    @protected_ci_variables.setter
    def protected_ci_variables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protected_ci_variables", value)

    @property
    @pulumi.getter(name="pushEventActivitiesLimit")
    def push_event_activities_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        """
        return pulumi.get(self, "push_event_activities_limit")

    @push_event_activities_limit.setter
    def push_event_activities_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "push_event_activities_limit", value)

    @property
    @pulumi.getter(name="pushEventHooksLimit")
    def push_event_hooks_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        """
        return pulumi.get(self, "push_event_hooks_limit")

    @push_event_hooks_limit.setter
    def push_event_hooks_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "push_event_hooks_limit", value)

    @property
    @pulumi.getter(name="pypiPackageRequestsForwarding")
    def pypi_package_requests_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        """
        return pulumi.get(self, "pypi_package_requests_forwarding")

    @pypi_package_requests_forwarding.setter
    def pypi_package_requests_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pypi_package_requests_forwarding", value)

    @property
    @pulumi.getter(name="rateLimitingResponseText")
    def rate_limiting_response_text(self) -> Optional[pulumi.Input[str]]:
        """
        When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        """
        return pulumi.get(self, "rate_limiting_response_text")

    @rate_limiting_response_text.setter
    def rate_limiting_response_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_limiting_response_text", value)

    @property
    @pulumi.getter(name="rawBlobRequestLimit")
    def raw_blob_request_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per minute for each raw path. To disable throttling set to 0.
        """
        return pulumi.get(self, "raw_blob_request_limit")

    @raw_blob_request_limit.setter
    def raw_blob_request_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "raw_blob_request_limit", value)

    @property
    @pulumi.getter(name="recaptchaEnabled")
    def recaptcha_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_enabled")

    @recaptcha_enabled.setter
    def recaptcha_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recaptcha_enabled", value)

    @property
    @pulumi.getter(name="recaptchaPrivateKey")
    def recaptcha_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_private_key")

    @recaptcha_private_key.setter
    def recaptcha_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recaptcha_private_key", value)

    @property
    @pulumi.getter(name="recaptchaSiteKey")
    def recaptcha_site_key(self) -> Optional[pulumi.Input[str]]:
        """
        Site key for reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_site_key")

    @recaptcha_site_key.setter
    def recaptcha_site_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recaptcha_site_key", value)

    @property
    @pulumi.getter(name="receiveMaxInputSize")
    def receive_max_input_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum push size (MB).
        """
        return pulumi.get(self, "receive_max_input_size")

    @receive_max_input_size.setter
    def receive_max_input_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "receive_max_input_size", value)

    @property
    @pulumi.getter(name="repositoryChecksEnabled")
    def repository_checks_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        """
        return pulumi.get(self, "repository_checks_enabled")

    @repository_checks_enabled.setter
    def repository_checks_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "repository_checks_enabled", value)

    @property
    @pulumi.getter(name="repositorySizeLimit")
    def repository_size_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Size limit per repository (MB).
        """
        return pulumi.get(self, "repository_size_limit")

    @repository_size_limit.setter
    def repository_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repository_size_limit", value)

    @property
    @pulumi.getter(name="repositoryStorages")
    def repository_storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        """
        return pulumi.get(self, "repository_storages")

    @repository_storages.setter
    def repository_storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repository_storages", value)

    @property
    @pulumi.getter(name="repositoryStoragesWeighted")
    def repository_storages_weighted(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        """
        (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        """
        return pulumi.get(self, "repository_storages_weighted")

    @repository_storages_weighted.setter
    def repository_storages_weighted(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "repository_storages_weighted", value)

    @property
    @pulumi.getter(name="requireAdminApprovalAfterUserSignup")
    def require_admin_approval_after_user_signup(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        """
        return pulumi.get(self, "require_admin_approval_after_user_signup")

    @require_admin_approval_after_user_signup.setter
    def require_admin_approval_after_user_signup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_admin_approval_after_user_signup", value)

    @property
    @pulumi.getter(name="requireTwoFactorAuthentication")
    def require_two_factor_authentication(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        """
        return pulumi.get(self, "require_two_factor_authentication")

    @require_two_factor_authentication.setter
    def require_two_factor_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_two_factor_authentication", value)

    @property
    @pulumi.getter(name="restrictedVisibilityLevels")
    def restricted_visibility_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
        """
        return pulumi.get(self, "restricted_visibility_levels")

    @restricted_visibility_levels.setter
    def restricted_visibility_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "restricted_visibility_levels", value)

    @property
    @pulumi.getter(name="rsaKeyRestriction")
    def rsa_key_restriction(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
        """
        return pulumi.get(self, "rsa_key_restriction")

    @rsa_key_restriction.setter
    def rsa_key_restriction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsa_key_restriction", value)

    @property
    @pulumi.getter(name="searchRateLimit")
    def search_rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
        """
        return pulumi.get(self, "search_rate_limit")

    @search_rate_limit.setter
    def search_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "search_rate_limit", value)

    @property
    @pulumi.getter(name="searchRateLimitUnauthenticated")
    def search_rate_limit_unauthenticated(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
        """
        return pulumi.get(self, "search_rate_limit_unauthenticated")

    @search_rate_limit_unauthenticated.setter
    def search_rate_limit_unauthenticated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "search_rate_limit_unauthenticated", value)

    @property
    @pulumi.getter(name="sendUserConfirmationEmail")
    def send_user_confirmation_email(self) -> Optional[pulumi.Input[bool]]:
        """
        Send confirmation email on sign-up.
        """
        return pulumi.get(self, "send_user_confirmation_email")

    @send_user_confirmation_email.setter
    def send_user_confirmation_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_user_confirmation_email", value)

    @property
    @pulumi.getter(name="sessionExpireDelay")
    def session_expire_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Session duration in minutes. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "session_expire_delay")

    @session_expire_delay.setter
    def session_expire_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expire_delay", value)

    @property
    @pulumi.getter(name="sharedRunnersEnabled")
    def shared_runners_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        """
        return pulumi.get(self, "shared_runners_enabled")

    @shared_runners_enabled.setter
    def shared_runners_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared_runners_enabled", value)

    @property
    @pulumi.getter(name="sharedRunnersMinutes")
    def shared_runners_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        """
        return pulumi.get(self, "shared_runners_minutes")

    @shared_runners_minutes.setter
    def shared_runners_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shared_runners_minutes", value)

    @property
    @pulumi.getter(name="sharedRunnersText")
    def shared_runners_text(self) -> Optional[pulumi.Input[str]]:
        """
        Shared runners text.
        """
        return pulumi.get(self, "shared_runners_text")

    @shared_runners_text.setter
    def shared_runners_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_runners_text", value)

    @property
    @pulumi.getter(name="sidekiqJobLimiterCompressionThresholdBytes")
    def sidekiq_job_limiter_compression_threshold_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
        """
        return pulumi.get(self, "sidekiq_job_limiter_compression_threshold_bytes")

    @sidekiq_job_limiter_compression_threshold_bytes.setter
    def sidekiq_job_limiter_compression_threshold_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sidekiq_job_limiter_compression_threshold_bytes", value)

    @property
    @pulumi.getter(name="sidekiqJobLimiterLimitBytes")
    def sidekiq_job_limiter_limit_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
        """
        return pulumi.get(self, "sidekiq_job_limiter_limit_bytes")

    @sidekiq_job_limiter_limit_bytes.setter
    def sidekiq_job_limiter_limit_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sidekiq_job_limiter_limit_bytes", value)

    @property
    @pulumi.getter(name="sidekiqJobLimiterMode")
    def sidekiq_job_limiter_mode(self) -> Optional[pulumi.Input[str]]:
        """
        track or compress. Sets the behavior for Sidekiq job size limits.
        """
        return pulumi.get(self, "sidekiq_job_limiter_mode")

    @sidekiq_job_limiter_mode.setter
    def sidekiq_job_limiter_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sidekiq_job_limiter_mode", value)

    @property
    @pulumi.getter(name="signInText")
    def sign_in_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text on the login page.
        """
        return pulumi.get(self, "sign_in_text")

    @sign_in_text.setter
    def sign_in_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_text", value)

    @property
    @pulumi.getter(name="signupEnabled")
    def signup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable registration.
        """
        return pulumi.get(self, "signup_enabled")

    @signup_enabled.setter
    def signup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "signup_enabled", value)

    @property
    @pulumi.getter(name="slackAppEnabled")
    def slack_app_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        """
        return pulumi.get(self, "slack_app_enabled")

    @slack_app_enabled.setter
    def slack_app_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "slack_app_enabled", value)

    @property
    @pulumi.getter(name="slackAppId")
    def slack_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The app ID of the Slack-app.
        """
        return pulumi.get(self, "slack_app_id")

    @slack_app_id.setter
    def slack_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_id", value)

    @property
    @pulumi.getter(name="slackAppSecret")
    def slack_app_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The app secret of the Slack-app.
        """
        return pulumi.get(self, "slack_app_secret")

    @slack_app_secret.setter
    def slack_app_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_secret", value)

    @property
    @pulumi.getter(name="slackAppSigningSecret")
    def slack_app_signing_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The signing secret of the Slack-app.
        """
        return pulumi.get(self, "slack_app_signing_secret")

    @slack_app_signing_secret.setter
    def slack_app_signing_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_signing_secret", value)

    @property
    @pulumi.getter(name="slackAppVerificationToken")
    def slack_app_verification_token(self) -> Optional[pulumi.Input[str]]:
        """
        The verification token of the Slack-app.
        """
        return pulumi.get(self, "slack_app_verification_token")

    @slack_app_verification_token.setter
    def slack_app_verification_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_app_verification_token", value)

    @property
    @pulumi.getter(name="snippetSizeLimit")
    def snippet_size_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Max snippet content size in bytes.
        """
        return pulumi.get(self, "snippet_size_limit")

    @snippet_size_limit.setter
    def snippet_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snippet_size_limit", value)

    @property
    @pulumi.getter(name="snowplowAppId")
    def snowplow_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowplow site name / application ID. (for example, gitlab)
        """
        return pulumi.get(self, "snowplow_app_id")

    @snowplow_app_id.setter
    def snowplow_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowplow_app_id", value)

    @property
    @pulumi.getter(name="snowplowCollectorHostname")
    def snowplow_collector_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        """
        return pulumi.get(self, "snowplow_collector_hostname")

    @snowplow_collector_hostname.setter
    def snowplow_collector_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowplow_collector_hostname", value)

    @property
    @pulumi.getter(name="snowplowCookieDomain")
    def snowplow_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowplow cookie domain. (for example, .gitlab.com)
        """
        return pulumi.get(self, "snowplow_cookie_domain")

    @snowplow_cookie_domain.setter
    def snowplow_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snowplow_cookie_domain", value)

    @property
    @pulumi.getter(name="snowplowEnabled")
    def snowplow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable snowplow tracking.
        """
        return pulumi.get(self, "snowplow_enabled")

    @snowplow_enabled.setter
    def snowplow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snowplow_enabled", value)

    @property
    @pulumi.getter(name="sourcegraphEnabled")
    def sourcegraph_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
        """
        return pulumi.get(self, "sourcegraph_enabled")

    @sourcegraph_enabled.setter
    def sourcegraph_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sourcegraph_enabled", value)

    @property
    @pulumi.getter(name="sourcegraphPublicOnly")
    def sourcegraph_public_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Blocks Sourcegraph from being loaded on private and internal projects.
        """
        return pulumi.get(self, "sourcegraph_public_only")

    @sourcegraph_public_only.setter
    def sourcegraph_public_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sourcegraph_public_only", value)

    @property
    @pulumi.getter(name="sourcegraphUrl")
    def sourcegraph_url(self) -> Optional[pulumi.Input[str]]:
        """
        The Sourcegraph instance URL for integration.
        """
        return pulumi.get(self, "sourcegraph_url")

    @sourcegraph_url.setter
    def sourcegraph_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sourcegraph_url", value)

    @property
    @pulumi.getter(name="spamCheckApiKey")
    def spam_check_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API key used by GitLab for accessing the Spam Check service endpoint.
        """
        return pulumi.get(self, "spam_check_api_key")

    @spam_check_api_key.setter
    def spam_check_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_check_api_key", value)

    @property
    @pulumi.getter(name="spamCheckEndpointEnabled")
    def spam_check_endpoint_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables spam checking using external Spam Check API endpoint.
        """
        return pulumi.get(self, "spam_check_endpoint_enabled")

    @spam_check_endpoint_enabled.setter
    def spam_check_endpoint_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spam_check_endpoint_enabled", value)

    @property
    @pulumi.getter(name="spamCheckEndpointUrl")
    def spam_check_endpoint_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        """
        return pulumi.get(self, "spam_check_endpoint_url")

    @spam_check_endpoint_url.setter
    def spam_check_endpoint_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_check_endpoint_url", value)

    @property
    @pulumi.getter(name="suggestPipelineEnabled")
    def suggest_pipeline_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable pipeline suggestion banner.
        """
        return pulumi.get(self, "suggest_pipeline_enabled")

    @suggest_pipeline_enabled.setter
    def suggest_pipeline_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suggest_pipeline_enabled", value)

    @property
    @pulumi.getter(name="terminalMaxSessionTime")
    def terminal_max_session_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        """
        return pulumi.get(self, "terminal_max_session_time")

    @terminal_max_session_time.setter
    def terminal_max_session_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "terminal_max_session_time", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[str]]:
        """
        (Required by: enforce_terms) Markdown content for the ToS.
        """
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terms", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedApiEnabled")
    def throttle_authenticated_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_authenticated_api_enabled")

    @throttle_authenticated_api_enabled.setter
    def throttle_authenticated_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_authenticated_api_enabled", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedApiPeriodInSeconds")
    def throttle_authenticated_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds).
        """
        return pulumi.get(self, "throttle_authenticated_api_period_in_seconds")

    @throttle_authenticated_api_period_in_seconds.setter
    def throttle_authenticated_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedApiRequestsPerPeriod")
    def throttle_authenticated_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user.
        """
        return pulumi.get(self, "throttle_authenticated_api_requests_per_period")

    @throttle_authenticated_api_requests_per_period.setter
    def throttle_authenticated_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiEnabled")
    def throttle_authenticated_packages_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_enabled")

    @throttle_authenticated_packages_api_enabled.setter
    def throttle_authenticated_packages_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_authenticated_packages_api_enabled", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiPeriodInSeconds")
    def throttle_authenticated_packages_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_period_in_seconds")

    @throttle_authenticated_packages_api_period_in_seconds.setter
    def throttle_authenticated_packages_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_packages_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiRequestsPerPeriod")
    def throttle_authenticated_packages_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user. View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_requests_per_period")

    @throttle_authenticated_packages_api_requests_per_period.setter
    def throttle_authenticated_packages_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_packages_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedWebEnabled")
    def throttle_authenticated_web_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_authenticated_web_enabled")

    @throttle_authenticated_web_enabled.setter
    def throttle_authenticated_web_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_authenticated_web_enabled", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedWebPeriodInSeconds")
    def throttle_authenticated_web_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds).
        """
        return pulumi.get(self, "throttle_authenticated_web_period_in_seconds")

    @throttle_authenticated_web_period_in_seconds.setter
    def throttle_authenticated_web_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_web_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleAuthenticatedWebRequestsPerPeriod")
    def throttle_authenticated_web_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user.
        """
        return pulumi.get(self, "throttle_authenticated_web_requests_per_period")

    @throttle_authenticated_web_requests_per_period.setter
    def throttle_authenticated_web_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_authenticated_web_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiEnabled")
    def throttle_unauthenticated_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_unauthenticated_api_enabled")

    @throttle_unauthenticated_api_enabled.setter
    def throttle_unauthenticated_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_unauthenticated_api_enabled", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiPeriodInSeconds")
    def throttle_unauthenticated_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period in seconds.
        """
        return pulumi.get(self, "throttle_unauthenticated_api_period_in_seconds")

    @throttle_unauthenticated_api_period_in_seconds.setter
    def throttle_unauthenticated_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiRequestsPerPeriod")
    def throttle_unauthenticated_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Max requests per period per IP.
        """
        return pulumi.get(self, "throttle_unauthenticated_api_requests_per_period")

    @throttle_unauthenticated_api_requests_per_period.setter
    def throttle_unauthenticated_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiEnabled")
    def throttle_unauthenticated_packages_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_enabled")

    @throttle_unauthenticated_packages_api_enabled.setter
    def throttle_unauthenticated_packages_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_unauthenticated_packages_api_enabled", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiPeriodInSeconds")
    def throttle_unauthenticated_packages_api_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period (in seconds). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_period_in_seconds")

    @throttle_unauthenticated_packages_api_period_in_seconds.setter
    def throttle_unauthenticated_packages_api_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_packages_api_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiRequestsPerPeriod")
    def throttle_unauthenticated_packages_api_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per period per user. View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_requests_per_period")

    @throttle_unauthenticated_packages_api_requests_per_period.setter
    def throttle_unauthenticated_packages_api_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_packages_api_requests_per_period", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebEnabled")
    def throttle_unauthenticated_web_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_unauthenticated_web_enabled")

    @throttle_unauthenticated_web_enabled.setter
    def throttle_unauthenticated_web_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "throttle_unauthenticated_web_enabled", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebPeriodInSeconds")
    def throttle_unauthenticated_web_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rate limit period in seconds.
        """
        return pulumi.get(self, "throttle_unauthenticated_web_period_in_seconds")

    @throttle_unauthenticated_web_period_in_seconds.setter
    def throttle_unauthenticated_web_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_web_period_in_seconds", value)

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebRequestsPerPeriod")
    def throttle_unauthenticated_web_requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        Max requests per period per IP.
        """
        return pulumi.get(self, "throttle_unauthenticated_web_requests_per_period")

    @throttle_unauthenticated_web_requests_per_period.setter
    def throttle_unauthenticated_web_requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throttle_unauthenticated_web_requests_per_period", value)

    @property
    @pulumi.getter(name="timeTrackingLimitToHours")
    def time_tracking_limit_to_hours(self) -> Optional[pulumi.Input[bool]]:
        """
        Limit display of time tracking units to hours.
        """
        return pulumi.get(self, "time_tracking_limit_to_hours")

    @time_tracking_limit_to_hours.setter
    def time_tracking_limit_to_hours(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "time_tracking_limit_to_hours", value)

    @property
    @pulumi.getter(name="twoFactorGracePeriod")
    def two_factor_grace_period(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        """
        return pulumi.get(self, "two_factor_grace_period")

    @two_factor_grace_period.setter
    def two_factor_grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_grace_period", value)

    @property
    @pulumi.getter(name="uniqueIpsLimitEnabled")
    def unique_ips_limit_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        """
        return pulumi.get(self, "unique_ips_limit_enabled")

    @unique_ips_limit_enabled.setter
    def unique_ips_limit_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique_ips_limit_enabled", value)

    @property
    @pulumi.getter(name="uniqueIpsLimitPerUser")
    def unique_ips_limit_per_user(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPs per user.
        """
        return pulumi.get(self, "unique_ips_limit_per_user")

    @unique_ips_limit_per_user.setter
    def unique_ips_limit_per_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unique_ips_limit_per_user", value)

    @property
    @pulumi.getter(name="uniqueIpsLimitTimeWindow")
    def unique_ips_limit_time_window(self) -> Optional[pulumi.Input[int]]:
        """
        How many seconds an IP is counted towards the limit.
        """
        return pulumi.get(self, "unique_ips_limit_time_window")

    @unique_ips_limit_time_window.setter
    def unique_ips_limit_time_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unique_ips_limit_time_window", value)

    @property
    @pulumi.getter(name="usagePingEnabled")
    def usage_ping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Every week GitLab reports license usage back to GitLab, Inc.
        """
        return pulumi.get(self, "usage_ping_enabled")

    @usage_ping_enabled.setter
    def usage_ping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usage_ping_enabled", value)

    @property
    @pulumi.getter(name="userDeactivationEmailsEnabled")
    def user_deactivation_emails_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Send an email to users upon account deactivation.
        """
        return pulumi.get(self, "user_deactivation_emails_enabled")

    @user_deactivation_emails_enabled.setter
    def user_deactivation_emails_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_deactivation_emails_enabled", value)

    @property
    @pulumi.getter(name="userDefaultExternal")
    def user_default_external(self) -> Optional[pulumi.Input[bool]]:
        """
        Newly registered users are external by default.
        """
        return pulumi.get(self, "user_default_external")

    @user_default_external.setter
    def user_default_external(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_default_external", value)

    @property
    @pulumi.getter(name="userDefaultInternalRegex")
    def user_default_internal_regex(self) -> Optional[pulumi.Input[str]]:
        """
        Specify an email address regex pattern to identify default internal users.
        """
        return pulumi.get(self, "user_default_internal_regex")

    @user_default_internal_regex.setter
    def user_default_internal_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_default_internal_regex", value)

    @property
    @pulumi.getter(name="userOauthApplications")
    def user_oauth_applications(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow users to register any application to use GitLab as an OAuth provider.
        """
        return pulumi.get(self, "user_oauth_applications")

    @user_oauth_applications.setter
    def user_oauth_applications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_oauth_applications", value)

    @property
    @pulumi.getter(name="userShowAddSshKeyMessage")
    def user_show_add_ssh_key_message(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        """
        return pulumi.get(self, "user_show_add_ssh_key_message")

    @user_show_add_ssh_key_message.setter
    def user_show_add_ssh_key_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_show_add_ssh_key_message", value)

    @property
    @pulumi.getter(name="versionCheckEnabled")
    def version_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Let GitLab inform you when an update is available.
        """
        return pulumi.get(self, "version_check_enabled")

    @version_check_enabled.setter
    def version_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version_check_enabled", value)

    @property
    @pulumi.getter(name="webIdeClientsidePreviewEnabled")
    def web_ide_clientside_preview_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        """
        return pulumi.get(self, "web_ide_clientside_preview_enabled")

    @web_ide_clientside_preview_enabled.setter
    def web_ide_clientside_preview_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "web_ide_clientside_preview_enabled", value)

    @property
    @pulumi.getter(name="whatsNewVariant")
    def whats_new_variant(self) -> Optional[pulumi.Input[str]]:
        """
        What’s new variant, possible values: all*tiers, current*tier, and disabled.
        """
        return pulumi.get(self, "whats_new_variant")

    @whats_new_variant.setter
    def whats_new_variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whats_new_variant", value)

    @property
    @pulumi.getter(name="wikiPageMaxContentBytes")
    def wiki_page_max_content_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        """
        return pulumi.get(self, "wiki_page_max_content_bytes")

    @wiki_page_max_content_bytes.setter
    def wiki_page_max_content_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wiki_page_max_content_bytes", value)


class ApplicationSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abuse_notification_email: Optional[pulumi.Input[str]] = None,
                 admin_mode: Optional[pulumi.Input[bool]] = None,
                 after_sign_out_path: Optional[pulumi.Input[str]] = None,
                 after_sign_up_text: Optional[pulumi.Input[str]] = None,
                 akismet_api_key: Optional[pulumi.Input[str]] = None,
                 akismet_enabled: Optional[pulumi.Input[bool]] = None,
                 allow_group_owners_to_manage_ldap: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_system_hooks: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_web_hooks_and_services: Optional[pulumi.Input[bool]] = None,
                 archive_builds_in_human_readable: Optional[pulumi.Input[str]] = None,
                 asset_proxy_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 asset_proxy_enabled: Optional[pulumi.Input[bool]] = None,
                 asset_proxy_secret_key: Optional[pulumi.Input[str]] = None,
                 asset_proxy_url: Optional[pulumi.Input[str]] = None,
                 authorized_keys_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_devops_domain: Optional[pulumi.Input[str]] = None,
                 auto_devops_enabled: Optional[pulumi.Input[bool]] = None,
                 automatic_purchased_storage_allocation: Optional[pulumi.Input[bool]] = None,
                 can_create_group: Optional[pulumi.Input[bool]] = None,
                 check_namespace_plan: Optional[pulumi.Input[bool]] = None,
                 commit_email_hostname: Optional[pulumi.Input[str]] = None,
                 container_expiration_policies_enable_historic_entries: Optional[pulumi.Input[bool]] = None,
                 container_registry_cleanup_tags_service_max_list_size: Optional[pulumi.Input[int]] = None,
                 container_registry_delete_tags_service_timeout: Optional[pulumi.Input[int]] = None,
                 container_registry_expiration_policies_caching: Optional[pulumi.Input[bool]] = None,
                 container_registry_expiration_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 container_registry_token_expire_delay: Optional[pulumi.Input[int]] = None,
                 deactivate_dormant_users: Optional[pulumi.Input[bool]] = None,
                 default_artifacts_expire_in: Optional[pulumi.Input[str]] = None,
                 default_branch_name: Optional[pulumi.Input[str]] = None,
                 default_branch_protection: Optional[pulumi.Input[int]] = None,
                 default_ci_config_path: Optional[pulumi.Input[str]] = None,
                 default_group_visibility: Optional[pulumi.Input[str]] = None,
                 default_project_creation: Optional[pulumi.Input[int]] = None,
                 default_project_visibility: Optional[pulumi.Input[str]] = None,
                 default_projects_limit: Optional[pulumi.Input[int]] = None,
                 default_snippet_visibility: Optional[pulumi.Input[str]] = None,
                 delayed_group_deletion: Optional[pulumi.Input[bool]] = None,
                 delayed_project_deletion: Optional[pulumi.Input[bool]] = None,
                 delete_inactive_projects: Optional[pulumi.Input[bool]] = None,
                 deletion_adjourned_period: Optional[pulumi.Input[int]] = None,
                 diff_max_files: Optional[pulumi.Input[int]] = None,
                 diff_max_lines: Optional[pulumi.Input[int]] = None,
                 diff_max_patch_bytes: Optional[pulumi.Input[int]] = None,
                 disable_feed_token: Optional[pulumi.Input[bool]] = None,
                 disabled_oauth_sign_in_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_rebinding_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain_denylist_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_denylists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 eks_access_key_id: Optional[pulumi.Input[str]] = None,
                 eks_account_id: Optional[pulumi.Input[str]] = None,
                 eks_integration_enabled: Optional[pulumi.Input[bool]] = None,
                 eks_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_aws_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_region: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_indexed_field_length_limit: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexed_file_size_limit_kb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_limit_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_max_bulk_concurrency: Optional[pulumi.Input[int]] = None,
                 elasticsearch_max_bulk_size_mb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_namespace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_password: Optional[pulumi.Input[str]] = None,
                 elasticsearch_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_search: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_username: Optional[pulumi.Input[str]] = None,
                 email_additional_text: Optional[pulumi.Input[str]] = None,
                 email_author_in_body: Optional[pulumi.Input[bool]] = None,
                 enabled_git_access_protocol: Optional[pulumi.Input[str]] = None,
                 enforce_namespace_storage_limit: Optional[pulumi.Input[bool]] = None,
                 enforce_terms: Optional[pulumi.Input[bool]] = None,
                 external_auth_client_cert: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key_pass: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_default_label: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_enabled: Optional[pulumi.Input[bool]] = None,
                 external_authorization_service_timeout: Optional[pulumi.Input[float]] = None,
                 external_authorization_service_url: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_timeout: Optional[pulumi.Input[int]] = None,
                 external_pipeline_validation_service_token: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_url: Optional[pulumi.Input[str]] = None,
                 file_template_project_id: Optional[pulumi.Input[int]] = None,
                 first_day_of_week: Optional[pulumi.Input[int]] = None,
                 geo_node_allowed_ips: Optional[pulumi.Input[str]] = None,
                 geo_status_timeout: Optional[pulumi.Input[int]] = None,
                 git_rate_limit_users_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_two_factor_session_expiry: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_default: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_fast: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_medium: Optional[pulumi.Input[int]] = None,
                 grafana_enabled: Optional[pulumi.Input[bool]] = None,
                 grafana_url: Optional[pulumi.Input[str]] = None,
                 gravatar_enabled: Optional[pulumi.Input[bool]] = None,
                 group_owners_can_manage_default_branch_protection: Optional[pulumi.Input[bool]] = None,
                 hashed_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 help_page_hide_commercial_content: Optional[pulumi.Input[bool]] = None,
                 help_page_support_url: Optional[pulumi.Input[str]] = None,
                 help_page_text: Optional[pulumi.Input[str]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 hide_third_party_offers: Optional[pulumi.Input[bool]] = None,
                 home_page_url: Optional[pulumi.Input[str]] = None,
                 housekeeping_enabled: Optional[pulumi.Input[bool]] = None,
                 housekeeping_full_repack_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_gc_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_incremental_repack_period: Optional[pulumi.Input[int]] = None,
                 html_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 import_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 in_product_marketing_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 inactive_projects_delete_after_months: Optional[pulumi.Input[int]] = None,
                 inactive_projects_min_size_mb: Optional[pulumi.Input[int]] = None,
                 inactive_projects_send_warning_email_after_months: Optional[pulumi.Input[int]] = None,
                 invisible_captcha_enabled: Optional[pulumi.Input[bool]] = None,
                 issues_create_limit: Optional[pulumi.Input[int]] = None,
                 keep_latest_artifact: Optional[pulumi.Input[bool]] = None,
                 local_markdown_version: Optional[pulumi.Input[int]] = None,
                 mailgun_events_enabled: Optional[pulumi.Input[bool]] = None,
                 mailgun_signing_key: Optional[pulumi.Input[str]] = None,
                 maintenance_mode: Optional[pulumi.Input[bool]] = None,
                 maintenance_mode_message: Optional[pulumi.Input[str]] = None,
                 max_artifacts_size: Optional[pulumi.Input[int]] = None,
                 max_attachment_size: Optional[pulumi.Input[int]] = None,
                 max_export_size: Optional[pulumi.Input[int]] = None,
                 max_import_size: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads_within_time_period: Optional[pulumi.Input[int]] = None,
                 max_pages_size: Optional[pulumi.Input[int]] = None,
                 max_personal_access_token_lifetime: Optional[pulumi.Input[int]] = None,
                 max_ssh_key_lifetime: Optional[pulumi.Input[int]] = None,
                 metrics_method_call_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_available: Optional[pulumi.Input[bool]] = None,
                 mirror_capacity_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_max_capacity: Optional[pulumi.Input[int]] = None,
                 mirror_max_delay: Optional[pulumi.Input[int]] = None,
                 npm_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 outbound_local_requests_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 package_registry_cleanup_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 pages_domain_verification_enabled: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_git: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_web: Optional[pulumi.Input[bool]] = None,
                 password_lowercase_required: Optional[pulumi.Input[bool]] = None,
                 password_number_required: Optional[pulumi.Input[bool]] = None,
                 password_symbol_required: Optional[pulumi.Input[bool]] = None,
                 password_uppercase_required: Optional[pulumi.Input[bool]] = None,
                 performance_bar_allowed_group_path: Optional[pulumi.Input[str]] = None,
                 personal_access_token_prefix: Optional[pulumi.Input[str]] = None,
                 pipeline_limit_per_project_user_sha: Optional[pulumi.Input[int]] = None,
                 plantuml_enabled: Optional[pulumi.Input[bool]] = None,
                 plantuml_url: Optional[pulumi.Input[str]] = None,
                 polling_interval_multiplier: Optional[pulumi.Input[float]] = None,
                 project_export_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 protected_ci_variables: Optional[pulumi.Input[bool]] = None,
                 push_event_activities_limit: Optional[pulumi.Input[int]] = None,
                 push_event_hooks_limit: Optional[pulumi.Input[int]] = None,
                 pypi_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 rate_limiting_response_text: Optional[pulumi.Input[str]] = None,
                 raw_blob_request_limit: Optional[pulumi.Input[int]] = None,
                 recaptcha_enabled: Optional[pulumi.Input[bool]] = None,
                 recaptcha_private_key: Optional[pulumi.Input[str]] = None,
                 recaptcha_site_key: Optional[pulumi.Input[str]] = None,
                 receive_max_input_size: Optional[pulumi.Input[int]] = None,
                 repository_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 repository_size_limit: Optional[pulumi.Input[int]] = None,
                 repository_storages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repository_storages_weighted: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 require_admin_approval_after_user_signup: Optional[pulumi.Input[bool]] = None,
                 require_two_factor_authentication: Optional[pulumi.Input[bool]] = None,
                 restricted_visibility_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 search_rate_limit: Optional[pulumi.Input[int]] = None,
                 search_rate_limit_unauthenticated: Optional[pulumi.Input[int]] = None,
                 send_user_confirmation_email: Optional[pulumi.Input[bool]] = None,
                 session_expire_delay: Optional[pulumi.Input[int]] = None,
                 shared_runners_enabled: Optional[pulumi.Input[bool]] = None,
                 shared_runners_minutes: Optional[pulumi.Input[int]] = None,
                 shared_runners_text: Optional[pulumi.Input[str]] = None,
                 sidekiq_job_limiter_compression_threshold_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_limit_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_mode: Optional[pulumi.Input[str]] = None,
                 sign_in_text: Optional[pulumi.Input[str]] = None,
                 signup_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_id: Optional[pulumi.Input[str]] = None,
                 slack_app_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_signing_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_verification_token: Optional[pulumi.Input[str]] = None,
                 snippet_size_limit: Optional[pulumi.Input[int]] = None,
                 snowplow_app_id: Optional[pulumi.Input[str]] = None,
                 snowplow_collector_hostname: Optional[pulumi.Input[str]] = None,
                 snowplow_cookie_domain: Optional[pulumi.Input[str]] = None,
                 snowplow_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_public_only: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_url: Optional[pulumi.Input[str]] = None,
                 spam_check_api_key: Optional[pulumi.Input[str]] = None,
                 spam_check_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 spam_check_endpoint_url: Optional[pulumi.Input[str]] = None,
                 suggest_pipeline_enabled: Optional[pulumi.Input[bool]] = None,
                 terminal_max_session_time: Optional[pulumi.Input[int]] = None,
                 terms: Optional[pulumi.Input[str]] = None,
                 throttle_authenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 time_tracking_limit_to_hours: Optional[pulumi.Input[bool]] = None,
                 two_factor_grace_period: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_enabled: Optional[pulumi.Input[bool]] = None,
                 unique_ips_limit_per_user: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_time_window: Optional[pulumi.Input[int]] = None,
                 usage_ping_enabled: Optional[pulumi.Input[bool]] = None,
                 user_deactivation_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 user_default_external: Optional[pulumi.Input[bool]] = None,
                 user_default_internal_regex: Optional[pulumi.Input[str]] = None,
                 user_oauth_applications: Optional[pulumi.Input[bool]] = None,
                 user_show_add_ssh_key_message: Optional[pulumi.Input[bool]] = None,
                 version_check_enabled: Optional[pulumi.Input[bool]] = None,
                 web_ide_clientside_preview_enabled: Optional[pulumi.Input[bool]] = None,
                 whats_new_variant: Optional[pulumi.Input[str]] = None,
                 wiki_page_max_content_bytes: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitlab as gitlab

        # Set the 2FA settings
        this = gitlab.ApplicationSettings("this",
            require_two_factor_authentication=True,
            two_factor_grace_period=24)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abuse_notification_email: If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        :param pulumi.Input[bool] admin_mode: Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        :param pulumi.Input[str] after_sign_out_path: Where to redirect users after logout.
        :param pulumi.Input[str] after_sign_up_text: Text shown to the user after signing up.
        :param pulumi.Input[str] akismet_api_key: API key for Akismet spam protection.
        :param pulumi.Input[bool] akismet_enabled: (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        :param pulumi.Input[bool] allow_group_owners_to_manage_ldap: Set to true to allow group owners to manage LDAP.
        :param pulumi.Input[bool] allow_local_requests_from_system_hooks: Allow requests to the local network from system hooks.
        :param pulumi.Input[bool] allow_local_requests_from_web_hooks_and_services: Allow requests to the local network from web hooks and services.
        :param pulumi.Input[str] archive_builds_in_human_readable: Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] asset_proxy_allowlists: Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] asset_proxy_enabled: (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_secret_key: Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_url: URL of the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] authorized_keys_enabled: By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        :param pulumi.Input[str] auto_devops_domain: Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        :param pulumi.Input[bool] auto_devops_enabled: Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        :param pulumi.Input[bool] automatic_purchased_storage_allocation: Enabling this permits automatic allocation of purchased storage in a namespace.
        :param pulumi.Input[bool] can_create_group: Indicates whether users can create top-level groups. Introduced in GitLab 15.5.
        :param pulumi.Input[bool] check_namespace_plan: Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        :param pulumi.Input[str] commit_email_hostname: Custom hostname (for private commit emails).
        :param pulumi.Input[bool] container_expiration_policies_enable_historic_entries: Enable cleanup policies for all projects.
        :param pulumi.Input[int] container_registry_cleanup_tags_service_max_list_size: The maximum number of tags that can be deleted in a single execution of cleanup policies.
        :param pulumi.Input[int] container_registry_delete_tags_service_timeout: The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        :param pulumi.Input[bool] container_registry_expiration_policies_caching: Caching during the execution of cleanup policies.
        :param pulumi.Input[int] container_registry_expiration_policies_worker_capacity: Number of workers for cleanup policies.
        :param pulumi.Input[int] container_registry_token_expire_delay: Container Registry token duration in minutes.
        :param pulumi.Input[bool] deactivate_dormant_users: Enable automatic deactivation of dormant users.
        :param pulumi.Input[str] default_artifacts_expire_in: Set the default expiration time for each job’s artifacts.
        :param pulumi.Input[str] default_branch_name: Instance-level custom initial branch name (introduced in GitLab 13.2).
        :param pulumi.Input[int] default_branch_protection: Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        :param pulumi.Input[str] default_ci_config_path: Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        :param pulumi.Input[str] default_group_visibility: What visibility level new groups receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_project_creation: Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        :param pulumi.Input[str] default_project_visibility: What visibility level new projects receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_projects_limit: Project limit per user.
        :param pulumi.Input[str] default_snippet_visibility: What visibility level new snippets receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[bool] delayed_group_deletion: Enable delayed group deletion. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        :param pulumi.Input[bool] delayed_project_deletion: Enable delayed project deletion by default in new groups. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        :param pulumi.Input[bool] delete_inactive_projects: Enable inactive project deletion feature. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion).
        :param pulumi.Input[int] deletion_adjourned_period: The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        :param pulumi.Input[int] diff_max_files: Maximum files in a diff.
        :param pulumi.Input[int] diff_max_lines: Maximum lines in a diff.
        :param pulumi.Input[int] diff_max_patch_bytes: Maximum diff patch size, in bytes.
        :param pulumi.Input[bool] disable_feed_token: Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_oauth_sign_in_sources: Disabled OAuth sign-in sources.
        :param pulumi.Input[bool] dns_rebinding_protection_enabled: Enforce DNS rebinding attack protection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_allowlists: Force people to use only corporate emails for sign-up. Null means there is no restriction.
        :param pulumi.Input[bool] domain_denylist_enabled: (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_denylists: Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        :param pulumi.Input[int] dsa_key_restriction: The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
        :param pulumi.Input[int] ecdsa_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
        :param pulumi.Input[int] ecdsa_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
        :param pulumi.Input[int] ed25519_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
        :param pulumi.Input[int] ed25519_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
        :param pulumi.Input[str] eks_access_key_id: AWS IAM access key ID.
        :param pulumi.Input[str] eks_account_id: Amazon account ID.
        :param pulumi.Input[bool] eks_integration_enabled: Enable integration with Amazon EKS.
        :param pulumi.Input[str] eks_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[bool] elasticsearch_aws: Enable the use of AWS hosted Elasticsearch.
        :param pulumi.Input[str] elasticsearch_aws_access_key: AWS IAM access key.
        :param pulumi.Input[str] elasticsearch_aws_region: The AWS region the Elasticsearch domain is configured.
        :param pulumi.Input[str] elasticsearch_aws_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[int] elasticsearch_indexed_field_length_limit: Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        :param pulumi.Input[int] elasticsearch_indexed_file_size_limit_kb: Maximum size of repository and wiki files that are indexed by Elasticsearch.
        :param pulumi.Input[bool] elasticsearch_indexing: Enable Elasticsearch indexing.
        :param pulumi.Input[bool] elasticsearch_limit_indexing: Limit Elasticsearch to index certain namespaces and projects.
        :param pulumi.Input[int] elasticsearch_max_bulk_concurrency: Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        :param pulumi.Input[int] elasticsearch_max_bulk_size_mb: Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_namespace_ids: The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[str] elasticsearch_password: The password of your Elasticsearch instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_project_ids: The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[bool] elasticsearch_search: Enable Elasticsearch search.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_urls: The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        :param pulumi.Input[str] elasticsearch_username: The username of your Elasticsearch instance.
        :param pulumi.Input[str] email_additional_text: Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        :param pulumi.Input[bool] email_author_in_body: Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        :param pulumi.Input[str] enabled_git_access_protocol: Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        :param pulumi.Input[bool] enforce_namespace_storage_limit: Enabling this permits enforcement of namespace storage limits.
        :param pulumi.Input[bool] enforce_terms: (If enabled, requires: terms) Enforce application ToS to all users.
        :param pulumi.Input[str] external_auth_client_cert: (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        :param pulumi.Input[str] external_auth_client_key: Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        :param pulumi.Input[str] external_auth_client_key_pass: Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        :param pulumi.Input[str] external_authorization_service_default_label: The default classification label to use when requesting authorization and no classification label has been specified on the project.
        :param pulumi.Input[bool] external_authorization_service_enabled: (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        :param pulumi.Input[float] external_authorization_service_timeout: The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        :param pulumi.Input[str] external_authorization_service_url: URL to which authorization requests are directed.
        :param pulumi.Input[int] external_pipeline_validation_service_timeout: How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        :param pulumi.Input[str] external_pipeline_validation_service_token: Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        :param pulumi.Input[str] external_pipeline_validation_service_url: URL to use for pipeline validation requests.
        :param pulumi.Input[int] file_template_project_id: The ID of a project to load custom file templates from.
        :param pulumi.Input[int] first_day_of_week: Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
        :param pulumi.Input[str] geo_node_allowed_ips: Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        :param pulumi.Input[int] geo_status_timeout: The amount of seconds after which a request to get a secondary node status times out.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] git_rate_limit_users_allowlists: List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Introduced in GitLab 15.2.
        :param pulumi.Input[int] git_two_factor_session_expiry: Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        :param pulumi.Input[int] gitaly_timeout_default: Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_fast: Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_medium: Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        :param pulumi.Input[bool] grafana_enabled: Enable Grafana.
        :param pulumi.Input[str] grafana_url: Grafana URL.
        :param pulumi.Input[bool] gravatar_enabled: Enable Gravatar.
        :param pulumi.Input[bool] group_owners_can_manage_default_branch_protection: Prevent overrides of default branch protection.
        :param pulumi.Input[bool] hashed_storage_enabled: Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        :param pulumi.Input[bool] help_page_hide_commercial_content: Hide marketing-related entries from help.
        :param pulumi.Input[str] help_page_support_url: Alternate support URL for help page and help dropdown.
        :param pulumi.Input[str] help_page_text: Custom text displayed on the help page.
        :param pulumi.Input[str] help_text: GitLab server administrator information.
        :param pulumi.Input[bool] hide_third_party_offers: Do not display offers from third parties in GitLab.
        :param pulumi.Input[str] home_page_url: Redirect to this URL when not logged in.
        :param pulumi.Input[bool] housekeeping_enabled: (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        :param pulumi.Input[int] housekeeping_full_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[int] housekeeping_gc_period: Number of Git pushes after which git gc is run.
        :param pulumi.Input[int] housekeeping_incremental_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[bool] html_emails_enabled: Enable HTML emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] import_sources: Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `Project`, `gitea`, `manifest`
        :param pulumi.Input[bool] in_product_marketing_emails_enabled: Enable in-product marketing emails.
        :param pulumi.Input[int] inactive_projects_delete_after_months: If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_min_size_mb: If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_send_warning_email_after_months: If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[bool] invisible_captcha_enabled: Enable Invisible CAPTCHA spam detection during sign-up.
        :param pulumi.Input[int] issues_create_limit: Max number of issue creation requests per minute per user.
        :param pulumi.Input[bool] keep_latest_artifact: Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
        :param pulumi.Input[int] local_markdown_version: Increase this value when any cached Markdown should be invalidated.
        :param pulumi.Input[bool] mailgun_events_enabled: Enable Mailgun event receiver.
        :param pulumi.Input[str] mailgun_signing_key: The Mailgun HTTP webhook signing key for receiving events from webhook.
        :param pulumi.Input[bool] maintenance_mode: When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        :param pulumi.Input[str] maintenance_mode_message: Message displayed when instance is in maintenance mode.
        :param pulumi.Input[int] max_artifacts_size: Maximum artifacts size in MB.
        :param pulumi.Input[int] max_attachment_size: Limit attachment size in MB.
        :param pulumi.Input[int] max_export_size: Maximum export size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_import_size: Maximum import size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_number_of_repository_downloads: Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_number_of_repository_downloads_within_time_period: Reporting time period (in seconds). Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_pages_size: Maximum size of pages repositories in MB.
        :param pulumi.Input[int] max_personal_access_token_lifetime: Maximum allowable lifetime for access tokens in days.
        :param pulumi.Input[int] max_ssh_key_lifetime: Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        :param pulumi.Input[int] metrics_method_call_threshold: A method call is only tracked when it takes longer than the given amount of milliseconds.
        :param pulumi.Input[bool] mirror_available: Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        :param pulumi.Input[int] mirror_capacity_threshold: Minimum capacity to be available before scheduling more mirrors preemptively.
        :param pulumi.Input[int] mirror_max_capacity: Maximum number of mirrors that can be synchronizing at the same time.
        :param pulumi.Input[int] mirror_max_delay: Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        :param pulumi.Input[bool] npm_package_requests_forwarding: Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outbound_local_requests_whitelists: Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        :param pulumi.Input[int] package_registry_cleanup_policies_worker_capacity: Number of workers assigned to the packages cleanup policies.
        :param pulumi.Input[bool] pages_domain_verification_enabled: Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        :param pulumi.Input[bool] password_authentication_enabled_for_git: Enable authentication for Git over HTTP(S) via a GitLab account password.
        :param pulumi.Input[bool] password_authentication_enabled_for_web: Enable authentication for the web interface via a GitLab account password.
        :param pulumi.Input[bool] password_lowercase_required: Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_number_required: Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_symbol_required: Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_uppercase_required: Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[str] performance_bar_allowed_group_path: Path of the group that is allowed to toggle the performance bar.
        :param pulumi.Input[str] personal_access_token_prefix: Prefix for all generated personal access tokens.
        :param pulumi.Input[int] pipeline_limit_per_project_user_sha: Maximum number of pipeline creation requests per minute per user and commit.
        :param pulumi.Input[bool] plantuml_enabled: (If enabled, requires: plantuml_url) Enable PlantUML integration.
        :param pulumi.Input[str] plantuml_url: The PlantUML instance URL for integration.
        :param pulumi.Input[float] polling_interval_multiplier: Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        :param pulumi.Input[bool] project_export_enabled: Enable project export.
        :param pulumi.Input[bool] prometheus_metrics_enabled: Enable Prometheus metrics.
        :param pulumi.Input[bool] protected_ci_variables: CI/CD variables are protected by default.
        :param pulumi.Input[int] push_event_activities_limit: Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        :param pulumi.Input[int] push_event_hooks_limit: Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        :param pulumi.Input[bool] pypi_package_requests_forwarding: Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        :param pulumi.Input[str] rate_limiting_response_text: When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        :param pulumi.Input[int] raw_blob_request_limit: Max number of requests per minute for each raw path. To disable throttling set to 0.
        :param pulumi.Input[bool] recaptcha_enabled: (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        :param pulumi.Input[str] recaptcha_private_key: Private key for reCAPTCHA.
        :param pulumi.Input[str] recaptcha_site_key: Site key for reCAPTCHA.
        :param pulumi.Input[int] receive_max_input_size: Maximum push size (MB).
        :param pulumi.Input[bool] repository_checks_enabled: GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        :param pulumi.Input[int] repository_size_limit: Size limit per repository (MB).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repository_storages: (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] repository_storages_weighted: (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        :param pulumi.Input[bool] require_admin_approval_after_user_signup: When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        :param pulumi.Input[bool] require_two_factor_authentication: (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] restricted_visibility_levels: Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
        :param pulumi.Input[int] rsa_key_restriction: The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
        :param pulumi.Input[int] search_rate_limit: Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
        :param pulumi.Input[int] search_rate_limit_unauthenticated: Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
        :param pulumi.Input[bool] send_user_confirmation_email: Send confirmation email on sign-up.
        :param pulumi.Input[int] session_expire_delay: Session duration in minutes. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] shared_runners_enabled: (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        :param pulumi.Input[int] shared_runners_minutes: Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        :param pulumi.Input[str] shared_runners_text: Shared runners text.
        :param pulumi.Input[int] sidekiq_job_limiter_compression_threshold_bytes: The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
        :param pulumi.Input[int] sidekiq_job_limiter_limit_bytes: The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
        :param pulumi.Input[str] sidekiq_job_limiter_mode: track or compress. Sets the behavior for Sidekiq job size limits.
        :param pulumi.Input[str] sign_in_text: Text on the login page.
        :param pulumi.Input[bool] signup_enabled: Enable registration.
        :param pulumi.Input[bool] slack_app_enabled: (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        :param pulumi.Input[str] slack_app_id: The app ID of the Slack-app.
        :param pulumi.Input[str] slack_app_secret: The app secret of the Slack-app.
        :param pulumi.Input[str] slack_app_signing_secret: The signing secret of the Slack-app.
        :param pulumi.Input[str] slack_app_verification_token: The verification token of the Slack-app.
        :param pulumi.Input[int] snippet_size_limit: Max snippet content size in bytes.
        :param pulumi.Input[str] snowplow_app_id: The Snowplow site name / application ID. (for example, gitlab)
        :param pulumi.Input[str] snowplow_collector_hostname: The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        :param pulumi.Input[str] snowplow_cookie_domain: The Snowplow cookie domain. (for example, .gitlab.com)
        :param pulumi.Input[bool] snowplow_enabled: Enable snowplow tracking.
        :param pulumi.Input[bool] sourcegraph_enabled: Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
        :param pulumi.Input[bool] sourcegraph_public_only: Blocks Sourcegraph from being loaded on private and internal projects.
        :param pulumi.Input[str] sourcegraph_url: The Sourcegraph instance URL for integration.
        :param pulumi.Input[str] spam_check_api_key: API key used by GitLab for accessing the Spam Check service endpoint.
        :param pulumi.Input[bool] spam_check_endpoint_enabled: Enables spam checking using external Spam Check API endpoint.
        :param pulumi.Input[str] spam_check_endpoint_url: URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        :param pulumi.Input[bool] suggest_pipeline_enabled: Enable pipeline suggestion banner.
        :param pulumi.Input[int] terminal_max_session_time: Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        :param pulumi.Input[str] terms: (Required by: enforce_terms) Markdown content for the ToS.
        :param pulumi.Input[bool] throttle_authenticated_api_enabled: (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_api_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_api_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_authenticated_packages_api_enabled: (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_authenticated_web_enabled: (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_web_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_web_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_unauthenticated_api_enabled: (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_api_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_api_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] throttle_unauthenticated_packages_api_enabled: (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_unauthenticated_web_enabled: (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_web_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_web_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] time_tracking_limit_to_hours: Limit display of time tracking units to hours.
        :param pulumi.Input[int] two_factor_grace_period: Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        :param pulumi.Input[bool] unique_ips_limit_enabled: (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        :param pulumi.Input[int] unique_ips_limit_per_user: Maximum number of IPs per user.
        :param pulumi.Input[int] unique_ips_limit_time_window: How many seconds an IP is counted towards the limit.
        :param pulumi.Input[bool] usage_ping_enabled: Every week GitLab reports license usage back to GitLab, Inc.
        :param pulumi.Input[bool] user_deactivation_emails_enabled: Send an email to users upon account deactivation.
        :param pulumi.Input[bool] user_default_external: Newly registered users are external by default.
        :param pulumi.Input[str] user_default_internal_regex: Specify an email address regex pattern to identify default internal users.
        :param pulumi.Input[bool] user_oauth_applications: Allow users to register any application to use GitLab as an OAuth provider.
        :param pulumi.Input[bool] user_show_add_ssh_key_message: When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        :param pulumi.Input[bool] version_check_enabled: Let GitLab inform you when an update is available.
        :param pulumi.Input[bool] web_ide_clientside_preview_enabled: Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        :param pulumi.Input[str] whats_new_variant: What’s new variant, possible values: all*tiers, current*tier, and disabled.
        :param pulumi.Input[int] wiki_page_max_content_bytes: Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ApplicationSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitlab as gitlab

        # Set the 2FA settings
        this = gitlab.ApplicationSettings("this",
            require_two_factor_authentication=True,
            two_factor_grace_period=24)
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ApplicationSettingsArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abuse_notification_email: Optional[pulumi.Input[str]] = None,
                 admin_mode: Optional[pulumi.Input[bool]] = None,
                 after_sign_out_path: Optional[pulumi.Input[str]] = None,
                 after_sign_up_text: Optional[pulumi.Input[str]] = None,
                 akismet_api_key: Optional[pulumi.Input[str]] = None,
                 akismet_enabled: Optional[pulumi.Input[bool]] = None,
                 allow_group_owners_to_manage_ldap: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_system_hooks: Optional[pulumi.Input[bool]] = None,
                 allow_local_requests_from_web_hooks_and_services: Optional[pulumi.Input[bool]] = None,
                 archive_builds_in_human_readable: Optional[pulumi.Input[str]] = None,
                 asset_proxy_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 asset_proxy_enabled: Optional[pulumi.Input[bool]] = None,
                 asset_proxy_secret_key: Optional[pulumi.Input[str]] = None,
                 asset_proxy_url: Optional[pulumi.Input[str]] = None,
                 authorized_keys_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_devops_domain: Optional[pulumi.Input[str]] = None,
                 auto_devops_enabled: Optional[pulumi.Input[bool]] = None,
                 automatic_purchased_storage_allocation: Optional[pulumi.Input[bool]] = None,
                 can_create_group: Optional[pulumi.Input[bool]] = None,
                 check_namespace_plan: Optional[pulumi.Input[bool]] = None,
                 commit_email_hostname: Optional[pulumi.Input[str]] = None,
                 container_expiration_policies_enable_historic_entries: Optional[pulumi.Input[bool]] = None,
                 container_registry_cleanup_tags_service_max_list_size: Optional[pulumi.Input[int]] = None,
                 container_registry_delete_tags_service_timeout: Optional[pulumi.Input[int]] = None,
                 container_registry_expiration_policies_caching: Optional[pulumi.Input[bool]] = None,
                 container_registry_expiration_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 container_registry_token_expire_delay: Optional[pulumi.Input[int]] = None,
                 deactivate_dormant_users: Optional[pulumi.Input[bool]] = None,
                 default_artifacts_expire_in: Optional[pulumi.Input[str]] = None,
                 default_branch_name: Optional[pulumi.Input[str]] = None,
                 default_branch_protection: Optional[pulumi.Input[int]] = None,
                 default_ci_config_path: Optional[pulumi.Input[str]] = None,
                 default_group_visibility: Optional[pulumi.Input[str]] = None,
                 default_project_creation: Optional[pulumi.Input[int]] = None,
                 default_project_visibility: Optional[pulumi.Input[str]] = None,
                 default_projects_limit: Optional[pulumi.Input[int]] = None,
                 default_snippet_visibility: Optional[pulumi.Input[str]] = None,
                 delayed_group_deletion: Optional[pulumi.Input[bool]] = None,
                 delayed_project_deletion: Optional[pulumi.Input[bool]] = None,
                 delete_inactive_projects: Optional[pulumi.Input[bool]] = None,
                 deletion_adjourned_period: Optional[pulumi.Input[int]] = None,
                 diff_max_files: Optional[pulumi.Input[int]] = None,
                 diff_max_lines: Optional[pulumi.Input[int]] = None,
                 diff_max_patch_bytes: Optional[pulumi.Input[int]] = None,
                 disable_feed_token: Optional[pulumi.Input[bool]] = None,
                 disabled_oauth_sign_in_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_rebinding_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain_denylist_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_denylists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 ecdsa_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_key_restriction: Optional[pulumi.Input[int]] = None,
                 ed25519_sk_key_restriction: Optional[pulumi.Input[int]] = None,
                 eks_access_key_id: Optional[pulumi.Input[str]] = None,
                 eks_account_id: Optional[pulumi.Input[str]] = None,
                 eks_integration_enabled: Optional[pulumi.Input[bool]] = None,
                 eks_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_aws_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_region: Optional[pulumi.Input[str]] = None,
                 elasticsearch_aws_secret_access_key: Optional[pulumi.Input[str]] = None,
                 elasticsearch_indexed_field_length_limit: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexed_file_size_limit_kb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_limit_indexing: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_max_bulk_concurrency: Optional[pulumi.Input[int]] = None,
                 elasticsearch_max_bulk_size_mb: Optional[pulumi.Input[int]] = None,
                 elasticsearch_namespace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_password: Optional[pulumi.Input[str]] = None,
                 elasticsearch_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_search: Optional[pulumi.Input[bool]] = None,
                 elasticsearch_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticsearch_username: Optional[pulumi.Input[str]] = None,
                 email_additional_text: Optional[pulumi.Input[str]] = None,
                 email_author_in_body: Optional[pulumi.Input[bool]] = None,
                 enabled_git_access_protocol: Optional[pulumi.Input[str]] = None,
                 enforce_namespace_storage_limit: Optional[pulumi.Input[bool]] = None,
                 enforce_terms: Optional[pulumi.Input[bool]] = None,
                 external_auth_client_cert: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key: Optional[pulumi.Input[str]] = None,
                 external_auth_client_key_pass: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_default_label: Optional[pulumi.Input[str]] = None,
                 external_authorization_service_enabled: Optional[pulumi.Input[bool]] = None,
                 external_authorization_service_timeout: Optional[pulumi.Input[float]] = None,
                 external_authorization_service_url: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_timeout: Optional[pulumi.Input[int]] = None,
                 external_pipeline_validation_service_token: Optional[pulumi.Input[str]] = None,
                 external_pipeline_validation_service_url: Optional[pulumi.Input[str]] = None,
                 file_template_project_id: Optional[pulumi.Input[int]] = None,
                 first_day_of_week: Optional[pulumi.Input[int]] = None,
                 geo_node_allowed_ips: Optional[pulumi.Input[str]] = None,
                 geo_status_timeout: Optional[pulumi.Input[int]] = None,
                 git_rate_limit_users_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_two_factor_session_expiry: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_default: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_fast: Optional[pulumi.Input[int]] = None,
                 gitaly_timeout_medium: Optional[pulumi.Input[int]] = None,
                 grafana_enabled: Optional[pulumi.Input[bool]] = None,
                 grafana_url: Optional[pulumi.Input[str]] = None,
                 gravatar_enabled: Optional[pulumi.Input[bool]] = None,
                 group_owners_can_manage_default_branch_protection: Optional[pulumi.Input[bool]] = None,
                 hashed_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 help_page_hide_commercial_content: Optional[pulumi.Input[bool]] = None,
                 help_page_support_url: Optional[pulumi.Input[str]] = None,
                 help_page_text: Optional[pulumi.Input[str]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 hide_third_party_offers: Optional[pulumi.Input[bool]] = None,
                 home_page_url: Optional[pulumi.Input[str]] = None,
                 housekeeping_enabled: Optional[pulumi.Input[bool]] = None,
                 housekeeping_full_repack_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_gc_period: Optional[pulumi.Input[int]] = None,
                 housekeeping_incremental_repack_period: Optional[pulumi.Input[int]] = None,
                 html_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 import_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 in_product_marketing_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 inactive_projects_delete_after_months: Optional[pulumi.Input[int]] = None,
                 inactive_projects_min_size_mb: Optional[pulumi.Input[int]] = None,
                 inactive_projects_send_warning_email_after_months: Optional[pulumi.Input[int]] = None,
                 invisible_captcha_enabled: Optional[pulumi.Input[bool]] = None,
                 issues_create_limit: Optional[pulumi.Input[int]] = None,
                 keep_latest_artifact: Optional[pulumi.Input[bool]] = None,
                 local_markdown_version: Optional[pulumi.Input[int]] = None,
                 mailgun_events_enabled: Optional[pulumi.Input[bool]] = None,
                 mailgun_signing_key: Optional[pulumi.Input[str]] = None,
                 maintenance_mode: Optional[pulumi.Input[bool]] = None,
                 maintenance_mode_message: Optional[pulumi.Input[str]] = None,
                 max_artifacts_size: Optional[pulumi.Input[int]] = None,
                 max_attachment_size: Optional[pulumi.Input[int]] = None,
                 max_export_size: Optional[pulumi.Input[int]] = None,
                 max_import_size: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads: Optional[pulumi.Input[int]] = None,
                 max_number_of_repository_downloads_within_time_period: Optional[pulumi.Input[int]] = None,
                 max_pages_size: Optional[pulumi.Input[int]] = None,
                 max_personal_access_token_lifetime: Optional[pulumi.Input[int]] = None,
                 max_ssh_key_lifetime: Optional[pulumi.Input[int]] = None,
                 metrics_method_call_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_available: Optional[pulumi.Input[bool]] = None,
                 mirror_capacity_threshold: Optional[pulumi.Input[int]] = None,
                 mirror_max_capacity: Optional[pulumi.Input[int]] = None,
                 mirror_max_delay: Optional[pulumi.Input[int]] = None,
                 npm_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 outbound_local_requests_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 package_registry_cleanup_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
                 pages_domain_verification_enabled: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_git: Optional[pulumi.Input[bool]] = None,
                 password_authentication_enabled_for_web: Optional[pulumi.Input[bool]] = None,
                 password_lowercase_required: Optional[pulumi.Input[bool]] = None,
                 password_number_required: Optional[pulumi.Input[bool]] = None,
                 password_symbol_required: Optional[pulumi.Input[bool]] = None,
                 password_uppercase_required: Optional[pulumi.Input[bool]] = None,
                 performance_bar_allowed_group_path: Optional[pulumi.Input[str]] = None,
                 personal_access_token_prefix: Optional[pulumi.Input[str]] = None,
                 pipeline_limit_per_project_user_sha: Optional[pulumi.Input[int]] = None,
                 plantuml_enabled: Optional[pulumi.Input[bool]] = None,
                 plantuml_url: Optional[pulumi.Input[str]] = None,
                 polling_interval_multiplier: Optional[pulumi.Input[float]] = None,
                 project_export_enabled: Optional[pulumi.Input[bool]] = None,
                 prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 protected_ci_variables: Optional[pulumi.Input[bool]] = None,
                 push_event_activities_limit: Optional[pulumi.Input[int]] = None,
                 push_event_hooks_limit: Optional[pulumi.Input[int]] = None,
                 pypi_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
                 rate_limiting_response_text: Optional[pulumi.Input[str]] = None,
                 raw_blob_request_limit: Optional[pulumi.Input[int]] = None,
                 recaptcha_enabled: Optional[pulumi.Input[bool]] = None,
                 recaptcha_private_key: Optional[pulumi.Input[str]] = None,
                 recaptcha_site_key: Optional[pulumi.Input[str]] = None,
                 receive_max_input_size: Optional[pulumi.Input[int]] = None,
                 repository_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 repository_size_limit: Optional[pulumi.Input[int]] = None,
                 repository_storages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repository_storages_weighted: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 require_admin_approval_after_user_signup: Optional[pulumi.Input[bool]] = None,
                 require_two_factor_authentication: Optional[pulumi.Input[bool]] = None,
                 restricted_visibility_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rsa_key_restriction: Optional[pulumi.Input[int]] = None,
                 search_rate_limit: Optional[pulumi.Input[int]] = None,
                 search_rate_limit_unauthenticated: Optional[pulumi.Input[int]] = None,
                 send_user_confirmation_email: Optional[pulumi.Input[bool]] = None,
                 session_expire_delay: Optional[pulumi.Input[int]] = None,
                 shared_runners_enabled: Optional[pulumi.Input[bool]] = None,
                 shared_runners_minutes: Optional[pulumi.Input[int]] = None,
                 shared_runners_text: Optional[pulumi.Input[str]] = None,
                 sidekiq_job_limiter_compression_threshold_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_limit_bytes: Optional[pulumi.Input[int]] = None,
                 sidekiq_job_limiter_mode: Optional[pulumi.Input[str]] = None,
                 sign_in_text: Optional[pulumi.Input[str]] = None,
                 signup_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_enabled: Optional[pulumi.Input[bool]] = None,
                 slack_app_id: Optional[pulumi.Input[str]] = None,
                 slack_app_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_signing_secret: Optional[pulumi.Input[str]] = None,
                 slack_app_verification_token: Optional[pulumi.Input[str]] = None,
                 snippet_size_limit: Optional[pulumi.Input[int]] = None,
                 snowplow_app_id: Optional[pulumi.Input[str]] = None,
                 snowplow_collector_hostname: Optional[pulumi.Input[str]] = None,
                 snowplow_cookie_domain: Optional[pulumi.Input[str]] = None,
                 snowplow_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_enabled: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_public_only: Optional[pulumi.Input[bool]] = None,
                 sourcegraph_url: Optional[pulumi.Input[str]] = None,
                 spam_check_api_key: Optional[pulumi.Input[str]] = None,
                 spam_check_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
                 spam_check_endpoint_url: Optional[pulumi.Input[str]] = None,
                 suggest_pipeline_enabled: Optional[pulumi.Input[bool]] = None,
                 terminal_max_session_time: Optional[pulumi.Input[int]] = None,
                 terms: Optional[pulumi.Input[str]] = None,
                 throttle_authenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_authenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_authenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
                 throttle_unauthenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 throttle_unauthenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
                 time_tracking_limit_to_hours: Optional[pulumi.Input[bool]] = None,
                 two_factor_grace_period: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_enabled: Optional[pulumi.Input[bool]] = None,
                 unique_ips_limit_per_user: Optional[pulumi.Input[int]] = None,
                 unique_ips_limit_time_window: Optional[pulumi.Input[int]] = None,
                 usage_ping_enabled: Optional[pulumi.Input[bool]] = None,
                 user_deactivation_emails_enabled: Optional[pulumi.Input[bool]] = None,
                 user_default_external: Optional[pulumi.Input[bool]] = None,
                 user_default_internal_regex: Optional[pulumi.Input[str]] = None,
                 user_oauth_applications: Optional[pulumi.Input[bool]] = None,
                 user_show_add_ssh_key_message: Optional[pulumi.Input[bool]] = None,
                 version_check_enabled: Optional[pulumi.Input[bool]] = None,
                 web_ide_clientside_preview_enabled: Optional[pulumi.Input[bool]] = None,
                 whats_new_variant: Optional[pulumi.Input[str]] = None,
                 wiki_page_max_content_bytes: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationSettingsArgs.__new__(ApplicationSettingsArgs)

            __props__.__dict__["abuse_notification_email"] = abuse_notification_email
            __props__.__dict__["admin_mode"] = admin_mode
            __props__.__dict__["after_sign_out_path"] = after_sign_out_path
            __props__.__dict__["after_sign_up_text"] = after_sign_up_text
            __props__.__dict__["akismet_api_key"] = None if akismet_api_key is None else pulumi.Output.secret(akismet_api_key)
            __props__.__dict__["akismet_enabled"] = akismet_enabled
            __props__.__dict__["allow_group_owners_to_manage_ldap"] = allow_group_owners_to_manage_ldap
            __props__.__dict__["allow_local_requests_from_system_hooks"] = allow_local_requests_from_system_hooks
            __props__.__dict__["allow_local_requests_from_web_hooks_and_services"] = allow_local_requests_from_web_hooks_and_services
            __props__.__dict__["archive_builds_in_human_readable"] = archive_builds_in_human_readable
            __props__.__dict__["asset_proxy_allowlists"] = asset_proxy_allowlists
            __props__.__dict__["asset_proxy_enabled"] = asset_proxy_enabled
            __props__.__dict__["asset_proxy_secret_key"] = None if asset_proxy_secret_key is None else pulumi.Output.secret(asset_proxy_secret_key)
            __props__.__dict__["asset_proxy_url"] = asset_proxy_url
            __props__.__dict__["authorized_keys_enabled"] = authorized_keys_enabled
            __props__.__dict__["auto_devops_domain"] = auto_devops_domain
            __props__.__dict__["auto_devops_enabled"] = auto_devops_enabled
            __props__.__dict__["automatic_purchased_storage_allocation"] = automatic_purchased_storage_allocation
            __props__.__dict__["can_create_group"] = can_create_group
            __props__.__dict__["check_namespace_plan"] = check_namespace_plan
            __props__.__dict__["commit_email_hostname"] = commit_email_hostname
            __props__.__dict__["container_expiration_policies_enable_historic_entries"] = container_expiration_policies_enable_historic_entries
            __props__.__dict__["container_registry_cleanup_tags_service_max_list_size"] = container_registry_cleanup_tags_service_max_list_size
            __props__.__dict__["container_registry_delete_tags_service_timeout"] = container_registry_delete_tags_service_timeout
            __props__.__dict__["container_registry_expiration_policies_caching"] = container_registry_expiration_policies_caching
            __props__.__dict__["container_registry_expiration_policies_worker_capacity"] = container_registry_expiration_policies_worker_capacity
            __props__.__dict__["container_registry_token_expire_delay"] = container_registry_token_expire_delay
            __props__.__dict__["deactivate_dormant_users"] = deactivate_dormant_users
            __props__.__dict__["default_artifacts_expire_in"] = default_artifacts_expire_in
            __props__.__dict__["default_branch_name"] = default_branch_name
            __props__.__dict__["default_branch_protection"] = default_branch_protection
            __props__.__dict__["default_ci_config_path"] = default_ci_config_path
            __props__.__dict__["default_group_visibility"] = default_group_visibility
            __props__.__dict__["default_project_creation"] = default_project_creation
            __props__.__dict__["default_project_visibility"] = default_project_visibility
            __props__.__dict__["default_projects_limit"] = default_projects_limit
            __props__.__dict__["default_snippet_visibility"] = default_snippet_visibility
            __props__.__dict__["delayed_group_deletion"] = delayed_group_deletion
            __props__.__dict__["delayed_project_deletion"] = delayed_project_deletion
            __props__.__dict__["delete_inactive_projects"] = delete_inactive_projects
            __props__.__dict__["deletion_adjourned_period"] = deletion_adjourned_period
            __props__.__dict__["diff_max_files"] = diff_max_files
            __props__.__dict__["diff_max_lines"] = diff_max_lines
            __props__.__dict__["diff_max_patch_bytes"] = diff_max_patch_bytes
            __props__.__dict__["disable_feed_token"] = disable_feed_token
            __props__.__dict__["disabled_oauth_sign_in_sources"] = disabled_oauth_sign_in_sources
            __props__.__dict__["dns_rebinding_protection_enabled"] = dns_rebinding_protection_enabled
            __props__.__dict__["domain_allowlists"] = domain_allowlists
            __props__.__dict__["domain_denylist_enabled"] = domain_denylist_enabled
            __props__.__dict__["domain_denylists"] = domain_denylists
            __props__.__dict__["dsa_key_restriction"] = dsa_key_restriction
            __props__.__dict__["ecdsa_key_restriction"] = ecdsa_key_restriction
            __props__.__dict__["ecdsa_sk_key_restriction"] = ecdsa_sk_key_restriction
            __props__.__dict__["ed25519_key_restriction"] = ed25519_key_restriction
            __props__.__dict__["ed25519_sk_key_restriction"] = ed25519_sk_key_restriction
            __props__.__dict__["eks_access_key_id"] = None if eks_access_key_id is None else pulumi.Output.secret(eks_access_key_id)
            __props__.__dict__["eks_account_id"] = eks_account_id
            __props__.__dict__["eks_integration_enabled"] = eks_integration_enabled
            __props__.__dict__["eks_secret_access_key"] = None if eks_secret_access_key is None else pulumi.Output.secret(eks_secret_access_key)
            __props__.__dict__["elasticsearch_aws"] = elasticsearch_aws
            __props__.__dict__["elasticsearch_aws_access_key"] = None if elasticsearch_aws_access_key is None else pulumi.Output.secret(elasticsearch_aws_access_key)
            __props__.__dict__["elasticsearch_aws_region"] = elasticsearch_aws_region
            __props__.__dict__["elasticsearch_aws_secret_access_key"] = None if elasticsearch_aws_secret_access_key is None else pulumi.Output.secret(elasticsearch_aws_secret_access_key)
            __props__.__dict__["elasticsearch_indexed_field_length_limit"] = elasticsearch_indexed_field_length_limit
            __props__.__dict__["elasticsearch_indexed_file_size_limit_kb"] = elasticsearch_indexed_file_size_limit_kb
            __props__.__dict__["elasticsearch_indexing"] = elasticsearch_indexing
            __props__.__dict__["elasticsearch_limit_indexing"] = elasticsearch_limit_indexing
            __props__.__dict__["elasticsearch_max_bulk_concurrency"] = elasticsearch_max_bulk_concurrency
            __props__.__dict__["elasticsearch_max_bulk_size_mb"] = elasticsearch_max_bulk_size_mb
            __props__.__dict__["elasticsearch_namespace_ids"] = elasticsearch_namespace_ids
            __props__.__dict__["elasticsearch_password"] = None if elasticsearch_password is None else pulumi.Output.secret(elasticsearch_password)
            __props__.__dict__["elasticsearch_project_ids"] = elasticsearch_project_ids
            __props__.__dict__["elasticsearch_search"] = elasticsearch_search
            __props__.__dict__["elasticsearch_urls"] = elasticsearch_urls
            __props__.__dict__["elasticsearch_username"] = elasticsearch_username
            __props__.__dict__["email_additional_text"] = email_additional_text
            __props__.__dict__["email_author_in_body"] = email_author_in_body
            __props__.__dict__["enabled_git_access_protocol"] = enabled_git_access_protocol
            __props__.__dict__["enforce_namespace_storage_limit"] = enforce_namespace_storage_limit
            __props__.__dict__["enforce_terms"] = enforce_terms
            __props__.__dict__["external_auth_client_cert"] = external_auth_client_cert
            __props__.__dict__["external_auth_client_key"] = None if external_auth_client_key is None else pulumi.Output.secret(external_auth_client_key)
            __props__.__dict__["external_auth_client_key_pass"] = None if external_auth_client_key_pass is None else pulumi.Output.secret(external_auth_client_key_pass)
            __props__.__dict__["external_authorization_service_default_label"] = external_authorization_service_default_label
            __props__.__dict__["external_authorization_service_enabled"] = external_authorization_service_enabled
            __props__.__dict__["external_authorization_service_timeout"] = external_authorization_service_timeout
            __props__.__dict__["external_authorization_service_url"] = external_authorization_service_url
            __props__.__dict__["external_pipeline_validation_service_timeout"] = external_pipeline_validation_service_timeout
            __props__.__dict__["external_pipeline_validation_service_token"] = external_pipeline_validation_service_token
            __props__.__dict__["external_pipeline_validation_service_url"] = external_pipeline_validation_service_url
            __props__.__dict__["file_template_project_id"] = file_template_project_id
            __props__.__dict__["first_day_of_week"] = first_day_of_week
            __props__.__dict__["geo_node_allowed_ips"] = geo_node_allowed_ips
            __props__.__dict__["geo_status_timeout"] = geo_status_timeout
            __props__.__dict__["git_rate_limit_users_allowlists"] = git_rate_limit_users_allowlists
            __props__.__dict__["git_two_factor_session_expiry"] = git_two_factor_session_expiry
            __props__.__dict__["gitaly_timeout_default"] = gitaly_timeout_default
            __props__.__dict__["gitaly_timeout_fast"] = gitaly_timeout_fast
            __props__.__dict__["gitaly_timeout_medium"] = gitaly_timeout_medium
            __props__.__dict__["grafana_enabled"] = grafana_enabled
            __props__.__dict__["grafana_url"] = grafana_url
            __props__.__dict__["gravatar_enabled"] = gravatar_enabled
            __props__.__dict__["group_owners_can_manage_default_branch_protection"] = group_owners_can_manage_default_branch_protection
            __props__.__dict__["hashed_storage_enabled"] = hashed_storage_enabled
            __props__.__dict__["help_page_hide_commercial_content"] = help_page_hide_commercial_content
            __props__.__dict__["help_page_support_url"] = help_page_support_url
            __props__.__dict__["help_page_text"] = help_page_text
            __props__.__dict__["help_text"] = help_text
            __props__.__dict__["hide_third_party_offers"] = hide_third_party_offers
            __props__.__dict__["home_page_url"] = home_page_url
            __props__.__dict__["housekeeping_enabled"] = housekeeping_enabled
            __props__.__dict__["housekeeping_full_repack_period"] = housekeeping_full_repack_period
            __props__.__dict__["housekeeping_gc_period"] = housekeeping_gc_period
            __props__.__dict__["housekeeping_incremental_repack_period"] = housekeeping_incremental_repack_period
            __props__.__dict__["html_emails_enabled"] = html_emails_enabled
            __props__.__dict__["import_sources"] = import_sources
            __props__.__dict__["in_product_marketing_emails_enabled"] = in_product_marketing_emails_enabled
            __props__.__dict__["inactive_projects_delete_after_months"] = inactive_projects_delete_after_months
            __props__.__dict__["inactive_projects_min_size_mb"] = inactive_projects_min_size_mb
            __props__.__dict__["inactive_projects_send_warning_email_after_months"] = inactive_projects_send_warning_email_after_months
            __props__.__dict__["invisible_captcha_enabled"] = invisible_captcha_enabled
            __props__.__dict__["issues_create_limit"] = issues_create_limit
            __props__.__dict__["keep_latest_artifact"] = keep_latest_artifact
            __props__.__dict__["local_markdown_version"] = local_markdown_version
            __props__.__dict__["mailgun_events_enabled"] = mailgun_events_enabled
            __props__.__dict__["mailgun_signing_key"] = None if mailgun_signing_key is None else pulumi.Output.secret(mailgun_signing_key)
            __props__.__dict__["maintenance_mode"] = maintenance_mode
            __props__.__dict__["maintenance_mode_message"] = maintenance_mode_message
            __props__.__dict__["max_artifacts_size"] = max_artifacts_size
            __props__.__dict__["max_attachment_size"] = max_attachment_size
            __props__.__dict__["max_export_size"] = max_export_size
            __props__.__dict__["max_import_size"] = max_import_size
            __props__.__dict__["max_number_of_repository_downloads"] = max_number_of_repository_downloads
            __props__.__dict__["max_number_of_repository_downloads_within_time_period"] = max_number_of_repository_downloads_within_time_period
            __props__.__dict__["max_pages_size"] = max_pages_size
            __props__.__dict__["max_personal_access_token_lifetime"] = max_personal_access_token_lifetime
            __props__.__dict__["max_ssh_key_lifetime"] = max_ssh_key_lifetime
            __props__.__dict__["metrics_method_call_threshold"] = metrics_method_call_threshold
            __props__.__dict__["mirror_available"] = mirror_available
            __props__.__dict__["mirror_capacity_threshold"] = mirror_capacity_threshold
            __props__.__dict__["mirror_max_capacity"] = mirror_max_capacity
            __props__.__dict__["mirror_max_delay"] = mirror_max_delay
            __props__.__dict__["npm_package_requests_forwarding"] = npm_package_requests_forwarding
            __props__.__dict__["outbound_local_requests_whitelists"] = outbound_local_requests_whitelists
            __props__.__dict__["package_registry_cleanup_policies_worker_capacity"] = package_registry_cleanup_policies_worker_capacity
            __props__.__dict__["pages_domain_verification_enabled"] = pages_domain_verification_enabled
            __props__.__dict__["password_authentication_enabled_for_git"] = password_authentication_enabled_for_git
            __props__.__dict__["password_authentication_enabled_for_web"] = password_authentication_enabled_for_web
            __props__.__dict__["password_lowercase_required"] = password_lowercase_required
            __props__.__dict__["password_number_required"] = password_number_required
            __props__.__dict__["password_symbol_required"] = password_symbol_required
            __props__.__dict__["password_uppercase_required"] = password_uppercase_required
            __props__.__dict__["performance_bar_allowed_group_path"] = performance_bar_allowed_group_path
            __props__.__dict__["personal_access_token_prefix"] = personal_access_token_prefix
            __props__.__dict__["pipeline_limit_per_project_user_sha"] = pipeline_limit_per_project_user_sha
            __props__.__dict__["plantuml_enabled"] = plantuml_enabled
            __props__.__dict__["plantuml_url"] = plantuml_url
            __props__.__dict__["polling_interval_multiplier"] = polling_interval_multiplier
            __props__.__dict__["project_export_enabled"] = project_export_enabled
            __props__.__dict__["prometheus_metrics_enabled"] = prometheus_metrics_enabled
            __props__.__dict__["protected_ci_variables"] = protected_ci_variables
            __props__.__dict__["push_event_activities_limit"] = push_event_activities_limit
            __props__.__dict__["push_event_hooks_limit"] = push_event_hooks_limit
            __props__.__dict__["pypi_package_requests_forwarding"] = pypi_package_requests_forwarding
            __props__.__dict__["rate_limiting_response_text"] = rate_limiting_response_text
            __props__.__dict__["raw_blob_request_limit"] = raw_blob_request_limit
            __props__.__dict__["recaptcha_enabled"] = recaptcha_enabled
            __props__.__dict__["recaptcha_private_key"] = None if recaptcha_private_key is None else pulumi.Output.secret(recaptcha_private_key)
            __props__.__dict__["recaptcha_site_key"] = None if recaptcha_site_key is None else pulumi.Output.secret(recaptcha_site_key)
            __props__.__dict__["receive_max_input_size"] = receive_max_input_size
            __props__.__dict__["repository_checks_enabled"] = repository_checks_enabled
            __props__.__dict__["repository_size_limit"] = repository_size_limit
            __props__.__dict__["repository_storages"] = repository_storages
            __props__.__dict__["repository_storages_weighted"] = repository_storages_weighted
            __props__.__dict__["require_admin_approval_after_user_signup"] = require_admin_approval_after_user_signup
            __props__.__dict__["require_two_factor_authentication"] = require_two_factor_authentication
            __props__.__dict__["restricted_visibility_levels"] = restricted_visibility_levels
            __props__.__dict__["rsa_key_restriction"] = rsa_key_restriction
            __props__.__dict__["search_rate_limit"] = search_rate_limit
            __props__.__dict__["search_rate_limit_unauthenticated"] = search_rate_limit_unauthenticated
            __props__.__dict__["send_user_confirmation_email"] = send_user_confirmation_email
            __props__.__dict__["session_expire_delay"] = session_expire_delay
            __props__.__dict__["shared_runners_enabled"] = shared_runners_enabled
            __props__.__dict__["shared_runners_minutes"] = shared_runners_minutes
            __props__.__dict__["shared_runners_text"] = shared_runners_text
            __props__.__dict__["sidekiq_job_limiter_compression_threshold_bytes"] = sidekiq_job_limiter_compression_threshold_bytes
            __props__.__dict__["sidekiq_job_limiter_limit_bytes"] = sidekiq_job_limiter_limit_bytes
            __props__.__dict__["sidekiq_job_limiter_mode"] = sidekiq_job_limiter_mode
            __props__.__dict__["sign_in_text"] = sign_in_text
            __props__.__dict__["signup_enabled"] = signup_enabled
            __props__.__dict__["slack_app_enabled"] = slack_app_enabled
            __props__.__dict__["slack_app_id"] = slack_app_id
            __props__.__dict__["slack_app_secret"] = None if slack_app_secret is None else pulumi.Output.secret(slack_app_secret)
            __props__.__dict__["slack_app_signing_secret"] = None if slack_app_signing_secret is None else pulumi.Output.secret(slack_app_signing_secret)
            __props__.__dict__["slack_app_verification_token"] = slack_app_verification_token
            __props__.__dict__["snippet_size_limit"] = snippet_size_limit
            __props__.__dict__["snowplow_app_id"] = snowplow_app_id
            __props__.__dict__["snowplow_collector_hostname"] = snowplow_collector_hostname
            __props__.__dict__["snowplow_cookie_domain"] = snowplow_cookie_domain
            __props__.__dict__["snowplow_enabled"] = snowplow_enabled
            __props__.__dict__["sourcegraph_enabled"] = sourcegraph_enabled
            __props__.__dict__["sourcegraph_public_only"] = sourcegraph_public_only
            __props__.__dict__["sourcegraph_url"] = sourcegraph_url
            __props__.__dict__["spam_check_api_key"] = None if spam_check_api_key is None else pulumi.Output.secret(spam_check_api_key)
            __props__.__dict__["spam_check_endpoint_enabled"] = spam_check_endpoint_enabled
            __props__.__dict__["spam_check_endpoint_url"] = spam_check_endpoint_url
            __props__.__dict__["suggest_pipeline_enabled"] = suggest_pipeline_enabled
            __props__.__dict__["terminal_max_session_time"] = terminal_max_session_time
            __props__.__dict__["terms"] = terms
            __props__.__dict__["throttle_authenticated_api_enabled"] = throttle_authenticated_api_enabled
            __props__.__dict__["throttle_authenticated_api_period_in_seconds"] = throttle_authenticated_api_period_in_seconds
            __props__.__dict__["throttle_authenticated_api_requests_per_period"] = throttle_authenticated_api_requests_per_period
            __props__.__dict__["throttle_authenticated_packages_api_enabled"] = throttle_authenticated_packages_api_enabled
            __props__.__dict__["throttle_authenticated_packages_api_period_in_seconds"] = throttle_authenticated_packages_api_period_in_seconds
            __props__.__dict__["throttle_authenticated_packages_api_requests_per_period"] = throttle_authenticated_packages_api_requests_per_period
            __props__.__dict__["throttle_authenticated_web_enabled"] = throttle_authenticated_web_enabled
            __props__.__dict__["throttle_authenticated_web_period_in_seconds"] = throttle_authenticated_web_period_in_seconds
            __props__.__dict__["throttle_authenticated_web_requests_per_period"] = throttle_authenticated_web_requests_per_period
            __props__.__dict__["throttle_unauthenticated_api_enabled"] = throttle_unauthenticated_api_enabled
            __props__.__dict__["throttle_unauthenticated_api_period_in_seconds"] = throttle_unauthenticated_api_period_in_seconds
            __props__.__dict__["throttle_unauthenticated_api_requests_per_period"] = throttle_unauthenticated_api_requests_per_period
            __props__.__dict__["throttle_unauthenticated_packages_api_enabled"] = throttle_unauthenticated_packages_api_enabled
            __props__.__dict__["throttle_unauthenticated_packages_api_period_in_seconds"] = throttle_unauthenticated_packages_api_period_in_seconds
            __props__.__dict__["throttle_unauthenticated_packages_api_requests_per_period"] = throttle_unauthenticated_packages_api_requests_per_period
            __props__.__dict__["throttle_unauthenticated_web_enabled"] = throttle_unauthenticated_web_enabled
            __props__.__dict__["throttle_unauthenticated_web_period_in_seconds"] = throttle_unauthenticated_web_period_in_seconds
            __props__.__dict__["throttle_unauthenticated_web_requests_per_period"] = throttle_unauthenticated_web_requests_per_period
            __props__.__dict__["time_tracking_limit_to_hours"] = time_tracking_limit_to_hours
            __props__.__dict__["two_factor_grace_period"] = two_factor_grace_period
            __props__.__dict__["unique_ips_limit_enabled"] = unique_ips_limit_enabled
            __props__.__dict__["unique_ips_limit_per_user"] = unique_ips_limit_per_user
            __props__.__dict__["unique_ips_limit_time_window"] = unique_ips_limit_time_window
            __props__.__dict__["usage_ping_enabled"] = usage_ping_enabled
            __props__.__dict__["user_deactivation_emails_enabled"] = user_deactivation_emails_enabled
            __props__.__dict__["user_default_external"] = user_default_external
            __props__.__dict__["user_default_internal_regex"] = user_default_internal_regex
            __props__.__dict__["user_oauth_applications"] = user_oauth_applications
            __props__.__dict__["user_show_add_ssh_key_message"] = user_show_add_ssh_key_message
            __props__.__dict__["version_check_enabled"] = version_check_enabled
            __props__.__dict__["web_ide_clientside_preview_enabled"] = web_ide_clientside_preview_enabled
            __props__.__dict__["whats_new_variant"] = whats_new_variant
            __props__.__dict__["wiki_page_max_content_bytes"] = wiki_page_max_content_bytes
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["akismetApiKey", "assetProxySecretKey", "eksAccessKeyId", "eksSecretAccessKey", "elasticsearchAwsAccessKey", "elasticsearchAwsSecretAccessKey", "elasticsearchPassword", "externalAuthClientKey", "externalAuthClientKeyPass", "mailgunSigningKey", "recaptchaPrivateKey", "recaptchaSiteKey", "slackAppSecret", "slackAppSigningSecret", "spamCheckApiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ApplicationSettings, __self__).__init__(
            'gitlab:index/applicationSettings:ApplicationSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abuse_notification_email: Optional[pulumi.Input[str]] = None,
            admin_mode: Optional[pulumi.Input[bool]] = None,
            after_sign_out_path: Optional[pulumi.Input[str]] = None,
            after_sign_up_text: Optional[pulumi.Input[str]] = None,
            akismet_api_key: Optional[pulumi.Input[str]] = None,
            akismet_enabled: Optional[pulumi.Input[bool]] = None,
            allow_group_owners_to_manage_ldap: Optional[pulumi.Input[bool]] = None,
            allow_local_requests_from_system_hooks: Optional[pulumi.Input[bool]] = None,
            allow_local_requests_from_web_hooks_and_services: Optional[pulumi.Input[bool]] = None,
            archive_builds_in_human_readable: Optional[pulumi.Input[str]] = None,
            asset_proxy_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            asset_proxy_enabled: Optional[pulumi.Input[bool]] = None,
            asset_proxy_secret_key: Optional[pulumi.Input[str]] = None,
            asset_proxy_url: Optional[pulumi.Input[str]] = None,
            authorized_keys_enabled: Optional[pulumi.Input[bool]] = None,
            auto_devops_domain: Optional[pulumi.Input[str]] = None,
            auto_devops_enabled: Optional[pulumi.Input[bool]] = None,
            automatic_purchased_storage_allocation: Optional[pulumi.Input[bool]] = None,
            can_create_group: Optional[pulumi.Input[bool]] = None,
            check_namespace_plan: Optional[pulumi.Input[bool]] = None,
            commit_email_hostname: Optional[pulumi.Input[str]] = None,
            container_expiration_policies_enable_historic_entries: Optional[pulumi.Input[bool]] = None,
            container_registry_cleanup_tags_service_max_list_size: Optional[pulumi.Input[int]] = None,
            container_registry_delete_tags_service_timeout: Optional[pulumi.Input[int]] = None,
            container_registry_expiration_policies_caching: Optional[pulumi.Input[bool]] = None,
            container_registry_expiration_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
            container_registry_token_expire_delay: Optional[pulumi.Input[int]] = None,
            deactivate_dormant_users: Optional[pulumi.Input[bool]] = None,
            default_artifacts_expire_in: Optional[pulumi.Input[str]] = None,
            default_branch_name: Optional[pulumi.Input[str]] = None,
            default_branch_protection: Optional[pulumi.Input[int]] = None,
            default_ci_config_path: Optional[pulumi.Input[str]] = None,
            default_group_visibility: Optional[pulumi.Input[str]] = None,
            default_project_creation: Optional[pulumi.Input[int]] = None,
            default_project_visibility: Optional[pulumi.Input[str]] = None,
            default_projects_limit: Optional[pulumi.Input[int]] = None,
            default_snippet_visibility: Optional[pulumi.Input[str]] = None,
            delayed_group_deletion: Optional[pulumi.Input[bool]] = None,
            delayed_project_deletion: Optional[pulumi.Input[bool]] = None,
            delete_inactive_projects: Optional[pulumi.Input[bool]] = None,
            deletion_adjourned_period: Optional[pulumi.Input[int]] = None,
            diff_max_files: Optional[pulumi.Input[int]] = None,
            diff_max_lines: Optional[pulumi.Input[int]] = None,
            diff_max_patch_bytes: Optional[pulumi.Input[int]] = None,
            disable_feed_token: Optional[pulumi.Input[bool]] = None,
            disabled_oauth_sign_in_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_rebinding_protection_enabled: Optional[pulumi.Input[bool]] = None,
            domain_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            domain_denylist_enabled: Optional[pulumi.Input[bool]] = None,
            domain_denylists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dsa_key_restriction: Optional[pulumi.Input[int]] = None,
            ecdsa_key_restriction: Optional[pulumi.Input[int]] = None,
            ecdsa_sk_key_restriction: Optional[pulumi.Input[int]] = None,
            ed25519_key_restriction: Optional[pulumi.Input[int]] = None,
            ed25519_sk_key_restriction: Optional[pulumi.Input[int]] = None,
            eks_access_key_id: Optional[pulumi.Input[str]] = None,
            eks_account_id: Optional[pulumi.Input[str]] = None,
            eks_integration_enabled: Optional[pulumi.Input[bool]] = None,
            eks_secret_access_key: Optional[pulumi.Input[str]] = None,
            elasticsearch_aws: Optional[pulumi.Input[bool]] = None,
            elasticsearch_aws_access_key: Optional[pulumi.Input[str]] = None,
            elasticsearch_aws_region: Optional[pulumi.Input[str]] = None,
            elasticsearch_aws_secret_access_key: Optional[pulumi.Input[str]] = None,
            elasticsearch_indexed_field_length_limit: Optional[pulumi.Input[int]] = None,
            elasticsearch_indexed_file_size_limit_kb: Optional[pulumi.Input[int]] = None,
            elasticsearch_indexing: Optional[pulumi.Input[bool]] = None,
            elasticsearch_limit_indexing: Optional[pulumi.Input[bool]] = None,
            elasticsearch_max_bulk_concurrency: Optional[pulumi.Input[int]] = None,
            elasticsearch_max_bulk_size_mb: Optional[pulumi.Input[int]] = None,
            elasticsearch_namespace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            elasticsearch_password: Optional[pulumi.Input[str]] = None,
            elasticsearch_project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            elasticsearch_search: Optional[pulumi.Input[bool]] = None,
            elasticsearch_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            elasticsearch_username: Optional[pulumi.Input[str]] = None,
            email_additional_text: Optional[pulumi.Input[str]] = None,
            email_author_in_body: Optional[pulumi.Input[bool]] = None,
            enabled_git_access_protocol: Optional[pulumi.Input[str]] = None,
            enforce_namespace_storage_limit: Optional[pulumi.Input[bool]] = None,
            enforce_terms: Optional[pulumi.Input[bool]] = None,
            external_auth_client_cert: Optional[pulumi.Input[str]] = None,
            external_auth_client_key: Optional[pulumi.Input[str]] = None,
            external_auth_client_key_pass: Optional[pulumi.Input[str]] = None,
            external_authorization_service_default_label: Optional[pulumi.Input[str]] = None,
            external_authorization_service_enabled: Optional[pulumi.Input[bool]] = None,
            external_authorization_service_timeout: Optional[pulumi.Input[float]] = None,
            external_authorization_service_url: Optional[pulumi.Input[str]] = None,
            external_pipeline_validation_service_timeout: Optional[pulumi.Input[int]] = None,
            external_pipeline_validation_service_token: Optional[pulumi.Input[str]] = None,
            external_pipeline_validation_service_url: Optional[pulumi.Input[str]] = None,
            file_template_project_id: Optional[pulumi.Input[int]] = None,
            first_day_of_week: Optional[pulumi.Input[int]] = None,
            geo_node_allowed_ips: Optional[pulumi.Input[str]] = None,
            geo_status_timeout: Optional[pulumi.Input[int]] = None,
            git_rate_limit_users_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            git_two_factor_session_expiry: Optional[pulumi.Input[int]] = None,
            gitaly_timeout_default: Optional[pulumi.Input[int]] = None,
            gitaly_timeout_fast: Optional[pulumi.Input[int]] = None,
            gitaly_timeout_medium: Optional[pulumi.Input[int]] = None,
            grafana_enabled: Optional[pulumi.Input[bool]] = None,
            grafana_url: Optional[pulumi.Input[str]] = None,
            gravatar_enabled: Optional[pulumi.Input[bool]] = None,
            group_owners_can_manage_default_branch_protection: Optional[pulumi.Input[bool]] = None,
            hashed_storage_enabled: Optional[pulumi.Input[bool]] = None,
            help_page_hide_commercial_content: Optional[pulumi.Input[bool]] = None,
            help_page_support_url: Optional[pulumi.Input[str]] = None,
            help_page_text: Optional[pulumi.Input[str]] = None,
            help_text: Optional[pulumi.Input[str]] = None,
            hide_third_party_offers: Optional[pulumi.Input[bool]] = None,
            home_page_url: Optional[pulumi.Input[str]] = None,
            housekeeping_enabled: Optional[pulumi.Input[bool]] = None,
            housekeeping_full_repack_period: Optional[pulumi.Input[int]] = None,
            housekeeping_gc_period: Optional[pulumi.Input[int]] = None,
            housekeeping_incremental_repack_period: Optional[pulumi.Input[int]] = None,
            html_emails_enabled: Optional[pulumi.Input[bool]] = None,
            import_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            in_product_marketing_emails_enabled: Optional[pulumi.Input[bool]] = None,
            inactive_projects_delete_after_months: Optional[pulumi.Input[int]] = None,
            inactive_projects_min_size_mb: Optional[pulumi.Input[int]] = None,
            inactive_projects_send_warning_email_after_months: Optional[pulumi.Input[int]] = None,
            invisible_captcha_enabled: Optional[pulumi.Input[bool]] = None,
            issues_create_limit: Optional[pulumi.Input[int]] = None,
            keep_latest_artifact: Optional[pulumi.Input[bool]] = None,
            local_markdown_version: Optional[pulumi.Input[int]] = None,
            mailgun_events_enabled: Optional[pulumi.Input[bool]] = None,
            mailgun_signing_key: Optional[pulumi.Input[str]] = None,
            maintenance_mode: Optional[pulumi.Input[bool]] = None,
            maintenance_mode_message: Optional[pulumi.Input[str]] = None,
            max_artifacts_size: Optional[pulumi.Input[int]] = None,
            max_attachment_size: Optional[pulumi.Input[int]] = None,
            max_export_size: Optional[pulumi.Input[int]] = None,
            max_import_size: Optional[pulumi.Input[int]] = None,
            max_number_of_repository_downloads: Optional[pulumi.Input[int]] = None,
            max_number_of_repository_downloads_within_time_period: Optional[pulumi.Input[int]] = None,
            max_pages_size: Optional[pulumi.Input[int]] = None,
            max_personal_access_token_lifetime: Optional[pulumi.Input[int]] = None,
            max_ssh_key_lifetime: Optional[pulumi.Input[int]] = None,
            metrics_method_call_threshold: Optional[pulumi.Input[int]] = None,
            mirror_available: Optional[pulumi.Input[bool]] = None,
            mirror_capacity_threshold: Optional[pulumi.Input[int]] = None,
            mirror_max_capacity: Optional[pulumi.Input[int]] = None,
            mirror_max_delay: Optional[pulumi.Input[int]] = None,
            npm_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
            outbound_local_requests_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            package_registry_cleanup_policies_worker_capacity: Optional[pulumi.Input[int]] = None,
            pages_domain_verification_enabled: Optional[pulumi.Input[bool]] = None,
            password_authentication_enabled_for_git: Optional[pulumi.Input[bool]] = None,
            password_authentication_enabled_for_web: Optional[pulumi.Input[bool]] = None,
            password_lowercase_required: Optional[pulumi.Input[bool]] = None,
            password_number_required: Optional[pulumi.Input[bool]] = None,
            password_symbol_required: Optional[pulumi.Input[bool]] = None,
            password_uppercase_required: Optional[pulumi.Input[bool]] = None,
            performance_bar_allowed_group_path: Optional[pulumi.Input[str]] = None,
            personal_access_token_prefix: Optional[pulumi.Input[str]] = None,
            pipeline_limit_per_project_user_sha: Optional[pulumi.Input[int]] = None,
            plantuml_enabled: Optional[pulumi.Input[bool]] = None,
            plantuml_url: Optional[pulumi.Input[str]] = None,
            polling_interval_multiplier: Optional[pulumi.Input[float]] = None,
            project_export_enabled: Optional[pulumi.Input[bool]] = None,
            prometheus_metrics_enabled: Optional[pulumi.Input[bool]] = None,
            protected_ci_variables: Optional[pulumi.Input[bool]] = None,
            push_event_activities_limit: Optional[pulumi.Input[int]] = None,
            push_event_hooks_limit: Optional[pulumi.Input[int]] = None,
            pypi_package_requests_forwarding: Optional[pulumi.Input[bool]] = None,
            rate_limiting_response_text: Optional[pulumi.Input[str]] = None,
            raw_blob_request_limit: Optional[pulumi.Input[int]] = None,
            recaptcha_enabled: Optional[pulumi.Input[bool]] = None,
            recaptcha_private_key: Optional[pulumi.Input[str]] = None,
            recaptcha_site_key: Optional[pulumi.Input[str]] = None,
            receive_max_input_size: Optional[pulumi.Input[int]] = None,
            repository_checks_enabled: Optional[pulumi.Input[bool]] = None,
            repository_size_limit: Optional[pulumi.Input[int]] = None,
            repository_storages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            repository_storages_weighted: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
            require_admin_approval_after_user_signup: Optional[pulumi.Input[bool]] = None,
            require_two_factor_authentication: Optional[pulumi.Input[bool]] = None,
            restricted_visibility_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            rsa_key_restriction: Optional[pulumi.Input[int]] = None,
            search_rate_limit: Optional[pulumi.Input[int]] = None,
            search_rate_limit_unauthenticated: Optional[pulumi.Input[int]] = None,
            send_user_confirmation_email: Optional[pulumi.Input[bool]] = None,
            session_expire_delay: Optional[pulumi.Input[int]] = None,
            shared_runners_enabled: Optional[pulumi.Input[bool]] = None,
            shared_runners_minutes: Optional[pulumi.Input[int]] = None,
            shared_runners_text: Optional[pulumi.Input[str]] = None,
            sidekiq_job_limiter_compression_threshold_bytes: Optional[pulumi.Input[int]] = None,
            sidekiq_job_limiter_limit_bytes: Optional[pulumi.Input[int]] = None,
            sidekiq_job_limiter_mode: Optional[pulumi.Input[str]] = None,
            sign_in_text: Optional[pulumi.Input[str]] = None,
            signup_enabled: Optional[pulumi.Input[bool]] = None,
            slack_app_enabled: Optional[pulumi.Input[bool]] = None,
            slack_app_id: Optional[pulumi.Input[str]] = None,
            slack_app_secret: Optional[pulumi.Input[str]] = None,
            slack_app_signing_secret: Optional[pulumi.Input[str]] = None,
            slack_app_verification_token: Optional[pulumi.Input[str]] = None,
            snippet_size_limit: Optional[pulumi.Input[int]] = None,
            snowplow_app_id: Optional[pulumi.Input[str]] = None,
            snowplow_collector_hostname: Optional[pulumi.Input[str]] = None,
            snowplow_cookie_domain: Optional[pulumi.Input[str]] = None,
            snowplow_enabled: Optional[pulumi.Input[bool]] = None,
            sourcegraph_enabled: Optional[pulumi.Input[bool]] = None,
            sourcegraph_public_only: Optional[pulumi.Input[bool]] = None,
            sourcegraph_url: Optional[pulumi.Input[str]] = None,
            spam_check_api_key: Optional[pulumi.Input[str]] = None,
            spam_check_endpoint_enabled: Optional[pulumi.Input[bool]] = None,
            spam_check_endpoint_url: Optional[pulumi.Input[str]] = None,
            suggest_pipeline_enabled: Optional[pulumi.Input[bool]] = None,
            terminal_max_session_time: Optional[pulumi.Input[int]] = None,
            terms: Optional[pulumi.Input[str]] = None,
            throttle_authenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
            throttle_authenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
            throttle_authenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
            throttle_authenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
            throttle_authenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
            throttle_authenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
            throttle_authenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
            throttle_authenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
            throttle_authenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
            throttle_unauthenticated_api_enabled: Optional[pulumi.Input[bool]] = None,
            throttle_unauthenticated_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
            throttle_unauthenticated_api_requests_per_period: Optional[pulumi.Input[int]] = None,
            throttle_unauthenticated_packages_api_enabled: Optional[pulumi.Input[bool]] = None,
            throttle_unauthenticated_packages_api_period_in_seconds: Optional[pulumi.Input[int]] = None,
            throttle_unauthenticated_packages_api_requests_per_period: Optional[pulumi.Input[int]] = None,
            throttle_unauthenticated_web_enabled: Optional[pulumi.Input[bool]] = None,
            throttle_unauthenticated_web_period_in_seconds: Optional[pulumi.Input[int]] = None,
            throttle_unauthenticated_web_requests_per_period: Optional[pulumi.Input[int]] = None,
            time_tracking_limit_to_hours: Optional[pulumi.Input[bool]] = None,
            two_factor_grace_period: Optional[pulumi.Input[int]] = None,
            unique_ips_limit_enabled: Optional[pulumi.Input[bool]] = None,
            unique_ips_limit_per_user: Optional[pulumi.Input[int]] = None,
            unique_ips_limit_time_window: Optional[pulumi.Input[int]] = None,
            usage_ping_enabled: Optional[pulumi.Input[bool]] = None,
            user_deactivation_emails_enabled: Optional[pulumi.Input[bool]] = None,
            user_default_external: Optional[pulumi.Input[bool]] = None,
            user_default_internal_regex: Optional[pulumi.Input[str]] = None,
            user_oauth_applications: Optional[pulumi.Input[bool]] = None,
            user_show_add_ssh_key_message: Optional[pulumi.Input[bool]] = None,
            version_check_enabled: Optional[pulumi.Input[bool]] = None,
            web_ide_clientside_preview_enabled: Optional[pulumi.Input[bool]] = None,
            whats_new_variant: Optional[pulumi.Input[str]] = None,
            wiki_page_max_content_bytes: Optional[pulumi.Input[int]] = None) -> 'ApplicationSettings':
        """
        Get an existing ApplicationSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abuse_notification_email: If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        :param pulumi.Input[bool] admin_mode: Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        :param pulumi.Input[str] after_sign_out_path: Where to redirect users after logout.
        :param pulumi.Input[str] after_sign_up_text: Text shown to the user after signing up.
        :param pulumi.Input[str] akismet_api_key: API key for Akismet spam protection.
        :param pulumi.Input[bool] akismet_enabled: (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        :param pulumi.Input[bool] allow_group_owners_to_manage_ldap: Set to true to allow group owners to manage LDAP.
        :param pulumi.Input[bool] allow_local_requests_from_system_hooks: Allow requests to the local network from system hooks.
        :param pulumi.Input[bool] allow_local_requests_from_web_hooks_and_services: Allow requests to the local network from web hooks and services.
        :param pulumi.Input[str] archive_builds_in_human_readable: Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] asset_proxy_allowlists: Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] asset_proxy_enabled: (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_secret_key: Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[str] asset_proxy_url: URL of the asset proxy server. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] authorized_keys_enabled: By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        :param pulumi.Input[str] auto_devops_domain: Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        :param pulumi.Input[bool] auto_devops_enabled: Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        :param pulumi.Input[bool] automatic_purchased_storage_allocation: Enabling this permits automatic allocation of purchased storage in a namespace.
        :param pulumi.Input[bool] can_create_group: Indicates whether users can create top-level groups. Introduced in GitLab 15.5.
        :param pulumi.Input[bool] check_namespace_plan: Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        :param pulumi.Input[str] commit_email_hostname: Custom hostname (for private commit emails).
        :param pulumi.Input[bool] container_expiration_policies_enable_historic_entries: Enable cleanup policies for all projects.
        :param pulumi.Input[int] container_registry_cleanup_tags_service_max_list_size: The maximum number of tags that can be deleted in a single execution of cleanup policies.
        :param pulumi.Input[int] container_registry_delete_tags_service_timeout: The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        :param pulumi.Input[bool] container_registry_expiration_policies_caching: Caching during the execution of cleanup policies.
        :param pulumi.Input[int] container_registry_expiration_policies_worker_capacity: Number of workers for cleanup policies.
        :param pulumi.Input[int] container_registry_token_expire_delay: Container Registry token duration in minutes.
        :param pulumi.Input[bool] deactivate_dormant_users: Enable automatic deactivation of dormant users.
        :param pulumi.Input[str] default_artifacts_expire_in: Set the default expiration time for each job’s artifacts.
        :param pulumi.Input[str] default_branch_name: Instance-level custom initial branch name (introduced in GitLab 13.2).
        :param pulumi.Input[int] default_branch_protection: Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        :param pulumi.Input[str] default_ci_config_path: Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        :param pulumi.Input[str] default_group_visibility: What visibility level new groups receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_project_creation: Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        :param pulumi.Input[str] default_project_visibility: What visibility level new projects receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[int] default_projects_limit: Project limit per user.
        :param pulumi.Input[str] default_snippet_visibility: What visibility level new snippets receive. Can take private, internal and public as a parameter.
        :param pulumi.Input[bool] delayed_group_deletion: Enable delayed group deletion. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        :param pulumi.Input[bool] delayed_project_deletion: Enable delayed project deletion by default in new groups. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        :param pulumi.Input[bool] delete_inactive_projects: Enable inactive project deletion feature. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion).
        :param pulumi.Input[int] deletion_adjourned_period: The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        :param pulumi.Input[int] diff_max_files: Maximum files in a diff.
        :param pulumi.Input[int] diff_max_lines: Maximum lines in a diff.
        :param pulumi.Input[int] diff_max_patch_bytes: Maximum diff patch size, in bytes.
        :param pulumi.Input[bool] disable_feed_token: Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_oauth_sign_in_sources: Disabled OAuth sign-in sources.
        :param pulumi.Input[bool] dns_rebinding_protection_enabled: Enforce DNS rebinding attack protection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_allowlists: Force people to use only corporate emails for sign-up. Null means there is no restriction.
        :param pulumi.Input[bool] domain_denylist_enabled: (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_denylists: Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        :param pulumi.Input[int] dsa_key_restriction: The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
        :param pulumi.Input[int] ecdsa_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
        :param pulumi.Input[int] ecdsa_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
        :param pulumi.Input[int] ed25519_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
        :param pulumi.Input[int] ed25519_sk_key_restriction: The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
        :param pulumi.Input[str] eks_access_key_id: AWS IAM access key ID.
        :param pulumi.Input[str] eks_account_id: Amazon account ID.
        :param pulumi.Input[bool] eks_integration_enabled: Enable integration with Amazon EKS.
        :param pulumi.Input[str] eks_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[bool] elasticsearch_aws: Enable the use of AWS hosted Elasticsearch.
        :param pulumi.Input[str] elasticsearch_aws_access_key: AWS IAM access key.
        :param pulumi.Input[str] elasticsearch_aws_region: The AWS region the Elasticsearch domain is configured.
        :param pulumi.Input[str] elasticsearch_aws_secret_access_key: AWS IAM secret access key.
        :param pulumi.Input[int] elasticsearch_indexed_field_length_limit: Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        :param pulumi.Input[int] elasticsearch_indexed_file_size_limit_kb: Maximum size of repository and wiki files that are indexed by Elasticsearch.
        :param pulumi.Input[bool] elasticsearch_indexing: Enable Elasticsearch indexing.
        :param pulumi.Input[bool] elasticsearch_limit_indexing: Limit Elasticsearch to index certain namespaces and projects.
        :param pulumi.Input[int] elasticsearch_max_bulk_concurrency: Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        :param pulumi.Input[int] elasticsearch_max_bulk_size_mb: Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_namespace_ids: The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[str] elasticsearch_password: The password of your Elasticsearch instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_project_ids: The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        :param pulumi.Input[bool] elasticsearch_search: Enable Elasticsearch search.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticsearch_urls: The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        :param pulumi.Input[str] elasticsearch_username: The username of your Elasticsearch instance.
        :param pulumi.Input[str] email_additional_text: Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        :param pulumi.Input[bool] email_author_in_body: Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        :param pulumi.Input[str] enabled_git_access_protocol: Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        :param pulumi.Input[bool] enforce_namespace_storage_limit: Enabling this permits enforcement of namespace storage limits.
        :param pulumi.Input[bool] enforce_terms: (If enabled, requires: terms) Enforce application ToS to all users.
        :param pulumi.Input[str] external_auth_client_cert: (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        :param pulumi.Input[str] external_auth_client_key: Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        :param pulumi.Input[str] external_auth_client_key_pass: Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        :param pulumi.Input[str] external_authorization_service_default_label: The default classification label to use when requesting authorization and no classification label has been specified on the project.
        :param pulumi.Input[bool] external_authorization_service_enabled: (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        :param pulumi.Input[float] external_authorization_service_timeout: The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        :param pulumi.Input[str] external_authorization_service_url: URL to which authorization requests are directed.
        :param pulumi.Input[int] external_pipeline_validation_service_timeout: How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        :param pulumi.Input[str] external_pipeline_validation_service_token: Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        :param pulumi.Input[str] external_pipeline_validation_service_url: URL to use for pipeline validation requests.
        :param pulumi.Input[int] file_template_project_id: The ID of a project to load custom file templates from.
        :param pulumi.Input[int] first_day_of_week: Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
        :param pulumi.Input[str] geo_node_allowed_ips: Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        :param pulumi.Input[int] geo_status_timeout: The amount of seconds after which a request to get a secondary node status times out.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] git_rate_limit_users_allowlists: List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Introduced in GitLab 15.2.
        :param pulumi.Input[int] git_two_factor_session_expiry: Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        :param pulumi.Input[int] gitaly_timeout_default: Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_fast: Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        :param pulumi.Input[int] gitaly_timeout_medium: Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        :param pulumi.Input[bool] grafana_enabled: Enable Grafana.
        :param pulumi.Input[str] grafana_url: Grafana URL.
        :param pulumi.Input[bool] gravatar_enabled: Enable Gravatar.
        :param pulumi.Input[bool] group_owners_can_manage_default_branch_protection: Prevent overrides of default branch protection.
        :param pulumi.Input[bool] hashed_storage_enabled: Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        :param pulumi.Input[bool] help_page_hide_commercial_content: Hide marketing-related entries from help.
        :param pulumi.Input[str] help_page_support_url: Alternate support URL for help page and help dropdown.
        :param pulumi.Input[str] help_page_text: Custom text displayed on the help page.
        :param pulumi.Input[str] help_text: GitLab server administrator information.
        :param pulumi.Input[bool] hide_third_party_offers: Do not display offers from third parties in GitLab.
        :param pulumi.Input[str] home_page_url: Redirect to this URL when not logged in.
        :param pulumi.Input[bool] housekeeping_enabled: (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        :param pulumi.Input[int] housekeeping_full_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[int] housekeeping_gc_period: Number of Git pushes after which git gc is run.
        :param pulumi.Input[int] housekeeping_incremental_repack_period: Number of Git pushes after which an incremental git repack is run.
        :param pulumi.Input[bool] html_emails_enabled: Enable HTML emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] import_sources: Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `Project`, `gitea`, `manifest`
        :param pulumi.Input[bool] in_product_marketing_emails_enabled: Enable in-product marketing emails.
        :param pulumi.Input[int] inactive_projects_delete_after_months: If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_min_size_mb: If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[int] inactive_projects_send_warning_email_after_months: If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        :param pulumi.Input[bool] invisible_captcha_enabled: Enable Invisible CAPTCHA spam detection during sign-up.
        :param pulumi.Input[int] issues_create_limit: Max number of issue creation requests per minute per user.
        :param pulumi.Input[bool] keep_latest_artifact: Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
        :param pulumi.Input[int] local_markdown_version: Increase this value when any cached Markdown should be invalidated.
        :param pulumi.Input[bool] mailgun_events_enabled: Enable Mailgun event receiver.
        :param pulumi.Input[str] mailgun_signing_key: The Mailgun HTTP webhook signing key for receiving events from webhook.
        :param pulumi.Input[bool] maintenance_mode: When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        :param pulumi.Input[str] maintenance_mode_message: Message displayed when instance is in maintenance mode.
        :param pulumi.Input[int] max_artifacts_size: Maximum artifacts size in MB.
        :param pulumi.Input[int] max_attachment_size: Limit attachment size in MB.
        :param pulumi.Input[int] max_export_size: Maximum export size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_import_size: Maximum import size in MB. 0 for unlimited.
        :param pulumi.Input[int] max_number_of_repository_downloads: Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_number_of_repository_downloads_within_time_period: Reporting time period (in seconds). Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        :param pulumi.Input[int] max_pages_size: Maximum size of pages repositories in MB.
        :param pulumi.Input[int] max_personal_access_token_lifetime: Maximum allowable lifetime for access tokens in days.
        :param pulumi.Input[int] max_ssh_key_lifetime: Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        :param pulumi.Input[int] metrics_method_call_threshold: A method call is only tracked when it takes longer than the given amount of milliseconds.
        :param pulumi.Input[bool] mirror_available: Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        :param pulumi.Input[int] mirror_capacity_threshold: Minimum capacity to be available before scheduling more mirrors preemptively.
        :param pulumi.Input[int] mirror_max_capacity: Maximum number of mirrors that can be synchronizing at the same time.
        :param pulumi.Input[int] mirror_max_delay: Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        :param pulumi.Input[bool] npm_package_requests_forwarding: Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outbound_local_requests_whitelists: Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        :param pulumi.Input[int] package_registry_cleanup_policies_worker_capacity: Number of workers assigned to the packages cleanup policies.
        :param pulumi.Input[bool] pages_domain_verification_enabled: Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        :param pulumi.Input[bool] password_authentication_enabled_for_git: Enable authentication for Git over HTTP(S) via a GitLab account password.
        :param pulumi.Input[bool] password_authentication_enabled_for_web: Enable authentication for the web interface via a GitLab account password.
        :param pulumi.Input[bool] password_lowercase_required: Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_number_required: Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_symbol_required: Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        :param pulumi.Input[bool] password_uppercase_required: Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        :param pulumi.Input[str] performance_bar_allowed_group_path: Path of the group that is allowed to toggle the performance bar.
        :param pulumi.Input[str] personal_access_token_prefix: Prefix for all generated personal access tokens.
        :param pulumi.Input[int] pipeline_limit_per_project_user_sha: Maximum number of pipeline creation requests per minute per user and commit.
        :param pulumi.Input[bool] plantuml_enabled: (If enabled, requires: plantuml_url) Enable PlantUML integration.
        :param pulumi.Input[str] plantuml_url: The PlantUML instance URL for integration.
        :param pulumi.Input[float] polling_interval_multiplier: Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        :param pulumi.Input[bool] project_export_enabled: Enable project export.
        :param pulumi.Input[bool] prometheus_metrics_enabled: Enable Prometheus metrics.
        :param pulumi.Input[bool] protected_ci_variables: CI/CD variables are protected by default.
        :param pulumi.Input[int] push_event_activities_limit: Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        :param pulumi.Input[int] push_event_hooks_limit: Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        :param pulumi.Input[bool] pypi_package_requests_forwarding: Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        :param pulumi.Input[str] rate_limiting_response_text: When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        :param pulumi.Input[int] raw_blob_request_limit: Max number of requests per minute for each raw path. To disable throttling set to 0.
        :param pulumi.Input[bool] recaptcha_enabled: (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        :param pulumi.Input[str] recaptcha_private_key: Private key for reCAPTCHA.
        :param pulumi.Input[str] recaptcha_site_key: Site key for reCAPTCHA.
        :param pulumi.Input[int] receive_max_input_size: Maximum push size (MB).
        :param pulumi.Input[bool] repository_checks_enabled: GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        :param pulumi.Input[int] repository_size_limit: Size limit per repository (MB).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repository_storages: (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] repository_storages_weighted: (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        :param pulumi.Input[bool] require_admin_approval_after_user_signup: When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        :param pulumi.Input[bool] require_two_factor_authentication: (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] restricted_visibility_levels: Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
        :param pulumi.Input[int] rsa_key_restriction: The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
        :param pulumi.Input[int] search_rate_limit: Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
        :param pulumi.Input[int] search_rate_limit_unauthenticated: Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
        :param pulumi.Input[bool] send_user_confirmation_email: Send confirmation email on sign-up.
        :param pulumi.Input[int] session_expire_delay: Session duration in minutes. GitLab restart is required to apply changes.
        :param pulumi.Input[bool] shared_runners_enabled: (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        :param pulumi.Input[int] shared_runners_minutes: Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        :param pulumi.Input[str] shared_runners_text: Shared runners text.
        :param pulumi.Input[int] sidekiq_job_limiter_compression_threshold_bytes: The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
        :param pulumi.Input[int] sidekiq_job_limiter_limit_bytes: The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
        :param pulumi.Input[str] sidekiq_job_limiter_mode: track or compress. Sets the behavior for Sidekiq job size limits.
        :param pulumi.Input[str] sign_in_text: Text on the login page.
        :param pulumi.Input[bool] signup_enabled: Enable registration.
        :param pulumi.Input[bool] slack_app_enabled: (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        :param pulumi.Input[str] slack_app_id: The app ID of the Slack-app.
        :param pulumi.Input[str] slack_app_secret: The app secret of the Slack-app.
        :param pulumi.Input[str] slack_app_signing_secret: The signing secret of the Slack-app.
        :param pulumi.Input[str] slack_app_verification_token: The verification token of the Slack-app.
        :param pulumi.Input[int] snippet_size_limit: Max snippet content size in bytes.
        :param pulumi.Input[str] snowplow_app_id: The Snowplow site name / application ID. (for example, gitlab)
        :param pulumi.Input[str] snowplow_collector_hostname: The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        :param pulumi.Input[str] snowplow_cookie_domain: The Snowplow cookie domain. (for example, .gitlab.com)
        :param pulumi.Input[bool] snowplow_enabled: Enable snowplow tracking.
        :param pulumi.Input[bool] sourcegraph_enabled: Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
        :param pulumi.Input[bool] sourcegraph_public_only: Blocks Sourcegraph from being loaded on private and internal projects.
        :param pulumi.Input[str] sourcegraph_url: The Sourcegraph instance URL for integration.
        :param pulumi.Input[str] spam_check_api_key: API key used by GitLab for accessing the Spam Check service endpoint.
        :param pulumi.Input[bool] spam_check_endpoint_enabled: Enables spam checking using external Spam Check API endpoint.
        :param pulumi.Input[str] spam_check_endpoint_url: URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        :param pulumi.Input[bool] suggest_pipeline_enabled: Enable pipeline suggestion banner.
        :param pulumi.Input[int] terminal_max_session_time: Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        :param pulumi.Input[str] terms: (Required by: enforce_terms) Markdown content for the ToS.
        :param pulumi.Input[bool] throttle_authenticated_api_enabled: (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_api_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_api_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_authenticated_packages_api_enabled: (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_authenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_authenticated_web_enabled: (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_authenticated_web_period_in_seconds: Rate limit period (in seconds).
        :param pulumi.Input[int] throttle_authenticated_web_requests_per_period: Maximum requests per period per user.
        :param pulumi.Input[bool] throttle_unauthenticated_api_enabled: (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_api_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_api_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] throttle_unauthenticated_packages_api_enabled: (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_period_in_seconds: Rate limit period (in seconds). View Package Registry rate limits for more details.
        :param pulumi.Input[int] throttle_unauthenticated_packages_api_requests_per_period: Maximum requests per period per user. View Package Registry rate limits for more details.
        :param pulumi.Input[bool] throttle_unauthenticated_web_enabled: (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        :param pulumi.Input[int] throttle_unauthenticated_web_period_in_seconds: Rate limit period in seconds.
        :param pulumi.Input[int] throttle_unauthenticated_web_requests_per_period: Max requests per period per IP.
        :param pulumi.Input[bool] time_tracking_limit_to_hours: Limit display of time tracking units to hours.
        :param pulumi.Input[int] two_factor_grace_period: Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        :param pulumi.Input[bool] unique_ips_limit_enabled: (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        :param pulumi.Input[int] unique_ips_limit_per_user: Maximum number of IPs per user.
        :param pulumi.Input[int] unique_ips_limit_time_window: How many seconds an IP is counted towards the limit.
        :param pulumi.Input[bool] usage_ping_enabled: Every week GitLab reports license usage back to GitLab, Inc.
        :param pulumi.Input[bool] user_deactivation_emails_enabled: Send an email to users upon account deactivation.
        :param pulumi.Input[bool] user_default_external: Newly registered users are external by default.
        :param pulumi.Input[str] user_default_internal_regex: Specify an email address regex pattern to identify default internal users.
        :param pulumi.Input[bool] user_oauth_applications: Allow users to register any application to use GitLab as an OAuth provider.
        :param pulumi.Input[bool] user_show_add_ssh_key_message: When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        :param pulumi.Input[bool] version_check_enabled: Let GitLab inform you when an update is available.
        :param pulumi.Input[bool] web_ide_clientside_preview_enabled: Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        :param pulumi.Input[str] whats_new_variant: What’s new variant, possible values: all*tiers, current*tier, and disabled.
        :param pulumi.Input[int] wiki_page_max_content_bytes: Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationSettingsState.__new__(_ApplicationSettingsState)

        __props__.__dict__["abuse_notification_email"] = abuse_notification_email
        __props__.__dict__["admin_mode"] = admin_mode
        __props__.__dict__["after_sign_out_path"] = after_sign_out_path
        __props__.__dict__["after_sign_up_text"] = after_sign_up_text
        __props__.__dict__["akismet_api_key"] = akismet_api_key
        __props__.__dict__["akismet_enabled"] = akismet_enabled
        __props__.__dict__["allow_group_owners_to_manage_ldap"] = allow_group_owners_to_manage_ldap
        __props__.__dict__["allow_local_requests_from_system_hooks"] = allow_local_requests_from_system_hooks
        __props__.__dict__["allow_local_requests_from_web_hooks_and_services"] = allow_local_requests_from_web_hooks_and_services
        __props__.__dict__["archive_builds_in_human_readable"] = archive_builds_in_human_readable
        __props__.__dict__["asset_proxy_allowlists"] = asset_proxy_allowlists
        __props__.__dict__["asset_proxy_enabled"] = asset_proxy_enabled
        __props__.__dict__["asset_proxy_secret_key"] = asset_proxy_secret_key
        __props__.__dict__["asset_proxy_url"] = asset_proxy_url
        __props__.__dict__["authorized_keys_enabled"] = authorized_keys_enabled
        __props__.__dict__["auto_devops_domain"] = auto_devops_domain
        __props__.__dict__["auto_devops_enabled"] = auto_devops_enabled
        __props__.__dict__["automatic_purchased_storage_allocation"] = automatic_purchased_storage_allocation
        __props__.__dict__["can_create_group"] = can_create_group
        __props__.__dict__["check_namespace_plan"] = check_namespace_plan
        __props__.__dict__["commit_email_hostname"] = commit_email_hostname
        __props__.__dict__["container_expiration_policies_enable_historic_entries"] = container_expiration_policies_enable_historic_entries
        __props__.__dict__["container_registry_cleanup_tags_service_max_list_size"] = container_registry_cleanup_tags_service_max_list_size
        __props__.__dict__["container_registry_delete_tags_service_timeout"] = container_registry_delete_tags_service_timeout
        __props__.__dict__["container_registry_expiration_policies_caching"] = container_registry_expiration_policies_caching
        __props__.__dict__["container_registry_expiration_policies_worker_capacity"] = container_registry_expiration_policies_worker_capacity
        __props__.__dict__["container_registry_token_expire_delay"] = container_registry_token_expire_delay
        __props__.__dict__["deactivate_dormant_users"] = deactivate_dormant_users
        __props__.__dict__["default_artifacts_expire_in"] = default_artifacts_expire_in
        __props__.__dict__["default_branch_name"] = default_branch_name
        __props__.__dict__["default_branch_protection"] = default_branch_protection
        __props__.__dict__["default_ci_config_path"] = default_ci_config_path
        __props__.__dict__["default_group_visibility"] = default_group_visibility
        __props__.__dict__["default_project_creation"] = default_project_creation
        __props__.__dict__["default_project_visibility"] = default_project_visibility
        __props__.__dict__["default_projects_limit"] = default_projects_limit
        __props__.__dict__["default_snippet_visibility"] = default_snippet_visibility
        __props__.__dict__["delayed_group_deletion"] = delayed_group_deletion
        __props__.__dict__["delayed_project_deletion"] = delayed_project_deletion
        __props__.__dict__["delete_inactive_projects"] = delete_inactive_projects
        __props__.__dict__["deletion_adjourned_period"] = deletion_adjourned_period
        __props__.__dict__["diff_max_files"] = diff_max_files
        __props__.__dict__["diff_max_lines"] = diff_max_lines
        __props__.__dict__["diff_max_patch_bytes"] = diff_max_patch_bytes
        __props__.__dict__["disable_feed_token"] = disable_feed_token
        __props__.__dict__["disabled_oauth_sign_in_sources"] = disabled_oauth_sign_in_sources
        __props__.__dict__["dns_rebinding_protection_enabled"] = dns_rebinding_protection_enabled
        __props__.__dict__["domain_allowlists"] = domain_allowlists
        __props__.__dict__["domain_denylist_enabled"] = domain_denylist_enabled
        __props__.__dict__["domain_denylists"] = domain_denylists
        __props__.__dict__["dsa_key_restriction"] = dsa_key_restriction
        __props__.__dict__["ecdsa_key_restriction"] = ecdsa_key_restriction
        __props__.__dict__["ecdsa_sk_key_restriction"] = ecdsa_sk_key_restriction
        __props__.__dict__["ed25519_key_restriction"] = ed25519_key_restriction
        __props__.__dict__["ed25519_sk_key_restriction"] = ed25519_sk_key_restriction
        __props__.__dict__["eks_access_key_id"] = eks_access_key_id
        __props__.__dict__["eks_account_id"] = eks_account_id
        __props__.__dict__["eks_integration_enabled"] = eks_integration_enabled
        __props__.__dict__["eks_secret_access_key"] = eks_secret_access_key
        __props__.__dict__["elasticsearch_aws"] = elasticsearch_aws
        __props__.__dict__["elasticsearch_aws_access_key"] = elasticsearch_aws_access_key
        __props__.__dict__["elasticsearch_aws_region"] = elasticsearch_aws_region
        __props__.__dict__["elasticsearch_aws_secret_access_key"] = elasticsearch_aws_secret_access_key
        __props__.__dict__["elasticsearch_indexed_field_length_limit"] = elasticsearch_indexed_field_length_limit
        __props__.__dict__["elasticsearch_indexed_file_size_limit_kb"] = elasticsearch_indexed_file_size_limit_kb
        __props__.__dict__["elasticsearch_indexing"] = elasticsearch_indexing
        __props__.__dict__["elasticsearch_limit_indexing"] = elasticsearch_limit_indexing
        __props__.__dict__["elasticsearch_max_bulk_concurrency"] = elasticsearch_max_bulk_concurrency
        __props__.__dict__["elasticsearch_max_bulk_size_mb"] = elasticsearch_max_bulk_size_mb
        __props__.__dict__["elasticsearch_namespace_ids"] = elasticsearch_namespace_ids
        __props__.__dict__["elasticsearch_password"] = elasticsearch_password
        __props__.__dict__["elasticsearch_project_ids"] = elasticsearch_project_ids
        __props__.__dict__["elasticsearch_search"] = elasticsearch_search
        __props__.__dict__["elasticsearch_urls"] = elasticsearch_urls
        __props__.__dict__["elasticsearch_username"] = elasticsearch_username
        __props__.__dict__["email_additional_text"] = email_additional_text
        __props__.__dict__["email_author_in_body"] = email_author_in_body
        __props__.__dict__["enabled_git_access_protocol"] = enabled_git_access_protocol
        __props__.__dict__["enforce_namespace_storage_limit"] = enforce_namespace_storage_limit
        __props__.__dict__["enforce_terms"] = enforce_terms
        __props__.__dict__["external_auth_client_cert"] = external_auth_client_cert
        __props__.__dict__["external_auth_client_key"] = external_auth_client_key
        __props__.__dict__["external_auth_client_key_pass"] = external_auth_client_key_pass
        __props__.__dict__["external_authorization_service_default_label"] = external_authorization_service_default_label
        __props__.__dict__["external_authorization_service_enabled"] = external_authorization_service_enabled
        __props__.__dict__["external_authorization_service_timeout"] = external_authorization_service_timeout
        __props__.__dict__["external_authorization_service_url"] = external_authorization_service_url
        __props__.__dict__["external_pipeline_validation_service_timeout"] = external_pipeline_validation_service_timeout
        __props__.__dict__["external_pipeline_validation_service_token"] = external_pipeline_validation_service_token
        __props__.__dict__["external_pipeline_validation_service_url"] = external_pipeline_validation_service_url
        __props__.__dict__["file_template_project_id"] = file_template_project_id
        __props__.__dict__["first_day_of_week"] = first_day_of_week
        __props__.__dict__["geo_node_allowed_ips"] = geo_node_allowed_ips
        __props__.__dict__["geo_status_timeout"] = geo_status_timeout
        __props__.__dict__["git_rate_limit_users_allowlists"] = git_rate_limit_users_allowlists
        __props__.__dict__["git_two_factor_session_expiry"] = git_two_factor_session_expiry
        __props__.__dict__["gitaly_timeout_default"] = gitaly_timeout_default
        __props__.__dict__["gitaly_timeout_fast"] = gitaly_timeout_fast
        __props__.__dict__["gitaly_timeout_medium"] = gitaly_timeout_medium
        __props__.__dict__["grafana_enabled"] = grafana_enabled
        __props__.__dict__["grafana_url"] = grafana_url
        __props__.__dict__["gravatar_enabled"] = gravatar_enabled
        __props__.__dict__["group_owners_can_manage_default_branch_protection"] = group_owners_can_manage_default_branch_protection
        __props__.__dict__["hashed_storage_enabled"] = hashed_storage_enabled
        __props__.__dict__["help_page_hide_commercial_content"] = help_page_hide_commercial_content
        __props__.__dict__["help_page_support_url"] = help_page_support_url
        __props__.__dict__["help_page_text"] = help_page_text
        __props__.__dict__["help_text"] = help_text
        __props__.__dict__["hide_third_party_offers"] = hide_third_party_offers
        __props__.__dict__["home_page_url"] = home_page_url
        __props__.__dict__["housekeeping_enabled"] = housekeeping_enabled
        __props__.__dict__["housekeeping_full_repack_period"] = housekeeping_full_repack_period
        __props__.__dict__["housekeeping_gc_period"] = housekeeping_gc_period
        __props__.__dict__["housekeeping_incremental_repack_period"] = housekeeping_incremental_repack_period
        __props__.__dict__["html_emails_enabled"] = html_emails_enabled
        __props__.__dict__["import_sources"] = import_sources
        __props__.__dict__["in_product_marketing_emails_enabled"] = in_product_marketing_emails_enabled
        __props__.__dict__["inactive_projects_delete_after_months"] = inactive_projects_delete_after_months
        __props__.__dict__["inactive_projects_min_size_mb"] = inactive_projects_min_size_mb
        __props__.__dict__["inactive_projects_send_warning_email_after_months"] = inactive_projects_send_warning_email_after_months
        __props__.__dict__["invisible_captcha_enabled"] = invisible_captcha_enabled
        __props__.__dict__["issues_create_limit"] = issues_create_limit
        __props__.__dict__["keep_latest_artifact"] = keep_latest_artifact
        __props__.__dict__["local_markdown_version"] = local_markdown_version
        __props__.__dict__["mailgun_events_enabled"] = mailgun_events_enabled
        __props__.__dict__["mailgun_signing_key"] = mailgun_signing_key
        __props__.__dict__["maintenance_mode"] = maintenance_mode
        __props__.__dict__["maintenance_mode_message"] = maintenance_mode_message
        __props__.__dict__["max_artifacts_size"] = max_artifacts_size
        __props__.__dict__["max_attachment_size"] = max_attachment_size
        __props__.__dict__["max_export_size"] = max_export_size
        __props__.__dict__["max_import_size"] = max_import_size
        __props__.__dict__["max_number_of_repository_downloads"] = max_number_of_repository_downloads
        __props__.__dict__["max_number_of_repository_downloads_within_time_period"] = max_number_of_repository_downloads_within_time_period
        __props__.__dict__["max_pages_size"] = max_pages_size
        __props__.__dict__["max_personal_access_token_lifetime"] = max_personal_access_token_lifetime
        __props__.__dict__["max_ssh_key_lifetime"] = max_ssh_key_lifetime
        __props__.__dict__["metrics_method_call_threshold"] = metrics_method_call_threshold
        __props__.__dict__["mirror_available"] = mirror_available
        __props__.__dict__["mirror_capacity_threshold"] = mirror_capacity_threshold
        __props__.__dict__["mirror_max_capacity"] = mirror_max_capacity
        __props__.__dict__["mirror_max_delay"] = mirror_max_delay
        __props__.__dict__["npm_package_requests_forwarding"] = npm_package_requests_forwarding
        __props__.__dict__["outbound_local_requests_whitelists"] = outbound_local_requests_whitelists
        __props__.__dict__["package_registry_cleanup_policies_worker_capacity"] = package_registry_cleanup_policies_worker_capacity
        __props__.__dict__["pages_domain_verification_enabled"] = pages_domain_verification_enabled
        __props__.__dict__["password_authentication_enabled_for_git"] = password_authentication_enabled_for_git
        __props__.__dict__["password_authentication_enabled_for_web"] = password_authentication_enabled_for_web
        __props__.__dict__["password_lowercase_required"] = password_lowercase_required
        __props__.__dict__["password_number_required"] = password_number_required
        __props__.__dict__["password_symbol_required"] = password_symbol_required
        __props__.__dict__["password_uppercase_required"] = password_uppercase_required
        __props__.__dict__["performance_bar_allowed_group_path"] = performance_bar_allowed_group_path
        __props__.__dict__["personal_access_token_prefix"] = personal_access_token_prefix
        __props__.__dict__["pipeline_limit_per_project_user_sha"] = pipeline_limit_per_project_user_sha
        __props__.__dict__["plantuml_enabled"] = plantuml_enabled
        __props__.__dict__["plantuml_url"] = plantuml_url
        __props__.__dict__["polling_interval_multiplier"] = polling_interval_multiplier
        __props__.__dict__["project_export_enabled"] = project_export_enabled
        __props__.__dict__["prometheus_metrics_enabled"] = prometheus_metrics_enabled
        __props__.__dict__["protected_ci_variables"] = protected_ci_variables
        __props__.__dict__["push_event_activities_limit"] = push_event_activities_limit
        __props__.__dict__["push_event_hooks_limit"] = push_event_hooks_limit
        __props__.__dict__["pypi_package_requests_forwarding"] = pypi_package_requests_forwarding
        __props__.__dict__["rate_limiting_response_text"] = rate_limiting_response_text
        __props__.__dict__["raw_blob_request_limit"] = raw_blob_request_limit
        __props__.__dict__["recaptcha_enabled"] = recaptcha_enabled
        __props__.__dict__["recaptcha_private_key"] = recaptcha_private_key
        __props__.__dict__["recaptcha_site_key"] = recaptcha_site_key
        __props__.__dict__["receive_max_input_size"] = receive_max_input_size
        __props__.__dict__["repository_checks_enabled"] = repository_checks_enabled
        __props__.__dict__["repository_size_limit"] = repository_size_limit
        __props__.__dict__["repository_storages"] = repository_storages
        __props__.__dict__["repository_storages_weighted"] = repository_storages_weighted
        __props__.__dict__["require_admin_approval_after_user_signup"] = require_admin_approval_after_user_signup
        __props__.__dict__["require_two_factor_authentication"] = require_two_factor_authentication
        __props__.__dict__["restricted_visibility_levels"] = restricted_visibility_levels
        __props__.__dict__["rsa_key_restriction"] = rsa_key_restriction
        __props__.__dict__["search_rate_limit"] = search_rate_limit
        __props__.__dict__["search_rate_limit_unauthenticated"] = search_rate_limit_unauthenticated
        __props__.__dict__["send_user_confirmation_email"] = send_user_confirmation_email
        __props__.__dict__["session_expire_delay"] = session_expire_delay
        __props__.__dict__["shared_runners_enabled"] = shared_runners_enabled
        __props__.__dict__["shared_runners_minutes"] = shared_runners_minutes
        __props__.__dict__["shared_runners_text"] = shared_runners_text
        __props__.__dict__["sidekiq_job_limiter_compression_threshold_bytes"] = sidekiq_job_limiter_compression_threshold_bytes
        __props__.__dict__["sidekiq_job_limiter_limit_bytes"] = sidekiq_job_limiter_limit_bytes
        __props__.__dict__["sidekiq_job_limiter_mode"] = sidekiq_job_limiter_mode
        __props__.__dict__["sign_in_text"] = sign_in_text
        __props__.__dict__["signup_enabled"] = signup_enabled
        __props__.__dict__["slack_app_enabled"] = slack_app_enabled
        __props__.__dict__["slack_app_id"] = slack_app_id
        __props__.__dict__["slack_app_secret"] = slack_app_secret
        __props__.__dict__["slack_app_signing_secret"] = slack_app_signing_secret
        __props__.__dict__["slack_app_verification_token"] = slack_app_verification_token
        __props__.__dict__["snippet_size_limit"] = snippet_size_limit
        __props__.__dict__["snowplow_app_id"] = snowplow_app_id
        __props__.__dict__["snowplow_collector_hostname"] = snowplow_collector_hostname
        __props__.__dict__["snowplow_cookie_domain"] = snowplow_cookie_domain
        __props__.__dict__["snowplow_enabled"] = snowplow_enabled
        __props__.__dict__["sourcegraph_enabled"] = sourcegraph_enabled
        __props__.__dict__["sourcegraph_public_only"] = sourcegraph_public_only
        __props__.__dict__["sourcegraph_url"] = sourcegraph_url
        __props__.__dict__["spam_check_api_key"] = spam_check_api_key
        __props__.__dict__["spam_check_endpoint_enabled"] = spam_check_endpoint_enabled
        __props__.__dict__["spam_check_endpoint_url"] = spam_check_endpoint_url
        __props__.__dict__["suggest_pipeline_enabled"] = suggest_pipeline_enabled
        __props__.__dict__["terminal_max_session_time"] = terminal_max_session_time
        __props__.__dict__["terms"] = terms
        __props__.__dict__["throttle_authenticated_api_enabled"] = throttle_authenticated_api_enabled
        __props__.__dict__["throttle_authenticated_api_period_in_seconds"] = throttle_authenticated_api_period_in_seconds
        __props__.__dict__["throttle_authenticated_api_requests_per_period"] = throttle_authenticated_api_requests_per_period
        __props__.__dict__["throttle_authenticated_packages_api_enabled"] = throttle_authenticated_packages_api_enabled
        __props__.__dict__["throttle_authenticated_packages_api_period_in_seconds"] = throttle_authenticated_packages_api_period_in_seconds
        __props__.__dict__["throttle_authenticated_packages_api_requests_per_period"] = throttle_authenticated_packages_api_requests_per_period
        __props__.__dict__["throttle_authenticated_web_enabled"] = throttle_authenticated_web_enabled
        __props__.__dict__["throttle_authenticated_web_period_in_seconds"] = throttle_authenticated_web_period_in_seconds
        __props__.__dict__["throttle_authenticated_web_requests_per_period"] = throttle_authenticated_web_requests_per_period
        __props__.__dict__["throttle_unauthenticated_api_enabled"] = throttle_unauthenticated_api_enabled
        __props__.__dict__["throttle_unauthenticated_api_period_in_seconds"] = throttle_unauthenticated_api_period_in_seconds
        __props__.__dict__["throttle_unauthenticated_api_requests_per_period"] = throttle_unauthenticated_api_requests_per_period
        __props__.__dict__["throttle_unauthenticated_packages_api_enabled"] = throttle_unauthenticated_packages_api_enabled
        __props__.__dict__["throttle_unauthenticated_packages_api_period_in_seconds"] = throttle_unauthenticated_packages_api_period_in_seconds
        __props__.__dict__["throttle_unauthenticated_packages_api_requests_per_period"] = throttle_unauthenticated_packages_api_requests_per_period
        __props__.__dict__["throttle_unauthenticated_web_enabled"] = throttle_unauthenticated_web_enabled
        __props__.__dict__["throttle_unauthenticated_web_period_in_seconds"] = throttle_unauthenticated_web_period_in_seconds
        __props__.__dict__["throttle_unauthenticated_web_requests_per_period"] = throttle_unauthenticated_web_requests_per_period
        __props__.__dict__["time_tracking_limit_to_hours"] = time_tracking_limit_to_hours
        __props__.__dict__["two_factor_grace_period"] = two_factor_grace_period
        __props__.__dict__["unique_ips_limit_enabled"] = unique_ips_limit_enabled
        __props__.__dict__["unique_ips_limit_per_user"] = unique_ips_limit_per_user
        __props__.__dict__["unique_ips_limit_time_window"] = unique_ips_limit_time_window
        __props__.__dict__["usage_ping_enabled"] = usage_ping_enabled
        __props__.__dict__["user_deactivation_emails_enabled"] = user_deactivation_emails_enabled
        __props__.__dict__["user_default_external"] = user_default_external
        __props__.__dict__["user_default_internal_regex"] = user_default_internal_regex
        __props__.__dict__["user_oauth_applications"] = user_oauth_applications
        __props__.__dict__["user_show_add_ssh_key_message"] = user_show_add_ssh_key_message
        __props__.__dict__["version_check_enabled"] = version_check_enabled
        __props__.__dict__["web_ide_clientside_preview_enabled"] = web_ide_clientside_preview_enabled
        __props__.__dict__["whats_new_variant"] = whats_new_variant
        __props__.__dict__["wiki_page_max_content_bytes"] = wiki_page_max_content_bytes
        return ApplicationSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abuseNotificationEmail")
    def abuse_notification_email(self) -> pulumi.Output[str]:
        """
        If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
        """
        return pulumi.get(self, "abuse_notification_email")

    @property
    @pulumi.getter(name="adminMode")
    def admin_mode(self) -> pulumi.Output[bool]:
        """
        Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
        """
        return pulumi.get(self, "admin_mode")

    @property
    @pulumi.getter(name="afterSignOutPath")
    def after_sign_out_path(self) -> pulumi.Output[str]:
        """
        Where to redirect users after logout.
        """
        return pulumi.get(self, "after_sign_out_path")

    @property
    @pulumi.getter(name="afterSignUpText")
    def after_sign_up_text(self) -> pulumi.Output[str]:
        """
        Text shown to the user after signing up.
        """
        return pulumi.get(self, "after_sign_up_text")

    @property
    @pulumi.getter(name="akismetApiKey")
    def akismet_api_key(self) -> pulumi.Output[str]:
        """
        API key for Akismet spam protection.
        """
        return pulumi.get(self, "akismet_api_key")

    @property
    @pulumi.getter(name="akismetEnabled")
    def akismet_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: akismet*api*key) Enable or disable Akismet spam protection.
        """
        return pulumi.get(self, "akismet_enabled")

    @property
    @pulumi.getter(name="allowGroupOwnersToManageLdap")
    def allow_group_owners_to_manage_ldap(self) -> pulumi.Output[bool]:
        """
        Set to true to allow group owners to manage LDAP.
        """
        return pulumi.get(self, "allow_group_owners_to_manage_ldap")

    @property
    @pulumi.getter(name="allowLocalRequestsFromSystemHooks")
    def allow_local_requests_from_system_hooks(self) -> pulumi.Output[bool]:
        """
        Allow requests to the local network from system hooks.
        """
        return pulumi.get(self, "allow_local_requests_from_system_hooks")

    @property
    @pulumi.getter(name="allowLocalRequestsFromWebHooksAndServices")
    def allow_local_requests_from_web_hooks_and_services(self) -> pulumi.Output[bool]:
        """
        Allow requests to the local network from web hooks and services.
        """
        return pulumi.get(self, "allow_local_requests_from_web_hooks_and_services")

    @property
    @pulumi.getter(name="archiveBuildsInHumanReadable")
    def archive_builds_in_human_readable(self) -> pulumi.Output[str]:
        """
        Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.
        """
        return pulumi.get(self, "archive_builds_in_human_readable")

    @property
    @pulumi.getter(name="assetProxyAllowlists")
    def asset_proxy_allowlists(self) -> pulumi.Output[Sequence[str]]:
        """
        Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_allowlists")

    @property
    @pulumi.getter(name="assetProxyEnabled")
    def asset_proxy_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: asset*proxy*url) Enable proxying of assets. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_enabled")

    @property
    @pulumi.getter(name="assetProxySecretKey")
    def asset_proxy_secret_key(self) -> pulumi.Output[str]:
        """
        Shared secret with the asset proxy server. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_secret_key")

    @property
    @pulumi.getter(name="assetProxyUrl")
    def asset_proxy_url(self) -> pulumi.Output[str]:
        """
        URL of the asset proxy server. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "asset_proxy_url")

    @property
    @pulumi.getter(name="authorizedKeysEnabled")
    def authorized_keys_enabled(self) -> pulumi.Output[bool]:
        """
        By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
        """
        return pulumi.get(self, "authorized_keys_enabled")

    @property
    @pulumi.getter(name="autoDevopsDomain")
    def auto_devops_domain(self) -> pulumi.Output[str]:
        """
        Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
        """
        return pulumi.get(self, "auto_devops_domain")

    @property
    @pulumi.getter(name="autoDevopsEnabled")
    def auto_devops_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
        """
        return pulumi.get(self, "auto_devops_enabled")

    @property
    @pulumi.getter(name="automaticPurchasedStorageAllocation")
    def automatic_purchased_storage_allocation(self) -> pulumi.Output[bool]:
        """
        Enabling this permits automatic allocation of purchased storage in a namespace.
        """
        return pulumi.get(self, "automatic_purchased_storage_allocation")

    @property
    @pulumi.getter(name="canCreateGroup")
    def can_create_group(self) -> pulumi.Output[bool]:
        """
        Indicates whether users can create top-level groups. Introduced in GitLab 15.5.
        """
        return pulumi.get(self, "can_create_group")

    @property
    @pulumi.getter(name="checkNamespacePlan")
    def check_namespace_plan(self) -> pulumi.Output[bool]:
        """
        Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
        """
        return pulumi.get(self, "check_namespace_plan")

    @property
    @pulumi.getter(name="commitEmailHostname")
    def commit_email_hostname(self) -> pulumi.Output[str]:
        """
        Custom hostname (for private commit emails).
        """
        return pulumi.get(self, "commit_email_hostname")

    @property
    @pulumi.getter(name="containerExpirationPoliciesEnableHistoricEntries")
    def container_expiration_policies_enable_historic_entries(self) -> pulumi.Output[bool]:
        """
        Enable cleanup policies for all projects.
        """
        return pulumi.get(self, "container_expiration_policies_enable_historic_entries")

    @property
    @pulumi.getter(name="containerRegistryCleanupTagsServiceMaxListSize")
    def container_registry_cleanup_tags_service_max_list_size(self) -> pulumi.Output[int]:
        """
        The maximum number of tags that can be deleted in a single execution of cleanup policies.
        """
        return pulumi.get(self, "container_registry_cleanup_tags_service_max_list_size")

    @property
    @pulumi.getter(name="containerRegistryDeleteTagsServiceTimeout")
    def container_registry_delete_tags_service_timeout(self) -> pulumi.Output[int]:
        """
        The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
        """
        return pulumi.get(self, "container_registry_delete_tags_service_timeout")

    @property
    @pulumi.getter(name="containerRegistryExpirationPoliciesCaching")
    def container_registry_expiration_policies_caching(self) -> pulumi.Output[bool]:
        """
        Caching during the execution of cleanup policies.
        """
        return pulumi.get(self, "container_registry_expiration_policies_caching")

    @property
    @pulumi.getter(name="containerRegistryExpirationPoliciesWorkerCapacity")
    def container_registry_expiration_policies_worker_capacity(self) -> pulumi.Output[int]:
        """
        Number of workers for cleanup policies.
        """
        return pulumi.get(self, "container_registry_expiration_policies_worker_capacity")

    @property
    @pulumi.getter(name="containerRegistryTokenExpireDelay")
    def container_registry_token_expire_delay(self) -> pulumi.Output[int]:
        """
        Container Registry token duration in minutes.
        """
        return pulumi.get(self, "container_registry_token_expire_delay")

    @property
    @pulumi.getter(name="deactivateDormantUsers")
    def deactivate_dormant_users(self) -> pulumi.Output[bool]:
        """
        Enable automatic deactivation of dormant users.
        """
        return pulumi.get(self, "deactivate_dormant_users")

    @property
    @pulumi.getter(name="defaultArtifactsExpireIn")
    def default_artifacts_expire_in(self) -> pulumi.Output[str]:
        """
        Set the default expiration time for each job’s artifacts.
        """
        return pulumi.get(self, "default_artifacts_expire_in")

    @property
    @pulumi.getter(name="defaultBranchName")
    def default_branch_name(self) -> pulumi.Output[str]:
        """
        Instance-level custom initial branch name (introduced in GitLab 13.2).
        """
        return pulumi.get(self, "default_branch_name")

    @property
    @pulumi.getter(name="defaultBranchProtection")
    def default_branch_protection(self) -> pulumi.Output[int]:
        """
        Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.
        """
        return pulumi.get(self, "default_branch_protection")

    @property
    @pulumi.getter(name="defaultCiConfigPath")
    def default_ci_config_path(self) -> pulumi.Output[str]:
        """
        Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
        """
        return pulumi.get(self, "default_ci_config_path")

    @property
    @pulumi.getter(name="defaultGroupVisibility")
    def default_group_visibility(self) -> pulumi.Output[str]:
        """
        What visibility level new groups receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_group_visibility")

    @property
    @pulumi.getter(name="defaultProjectCreation")
    def default_project_creation(self) -> pulumi.Output[int]:
        """
        Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).
        """
        return pulumi.get(self, "default_project_creation")

    @property
    @pulumi.getter(name="defaultProjectVisibility")
    def default_project_visibility(self) -> pulumi.Output[str]:
        """
        What visibility level new projects receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_project_visibility")

    @property
    @pulumi.getter(name="defaultProjectsLimit")
    def default_projects_limit(self) -> pulumi.Output[int]:
        """
        Project limit per user.
        """
        return pulumi.get(self, "default_projects_limit")

    @property
    @pulumi.getter(name="defaultSnippetVisibility")
    def default_snippet_visibility(self) -> pulumi.Output[str]:
        """
        What visibility level new snippets receive. Can take private, internal and public as a parameter.
        """
        return pulumi.get(self, "default_snippet_visibility")

    @property
    @pulumi.getter(name="delayedGroupDeletion")
    def delayed_group_deletion(self) -> pulumi.Output[bool]:
        """
        Enable delayed group deletion. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.
        """
        return pulumi.get(self, "delayed_group_deletion")

    @property
    @pulumi.getter(name="delayedProjectDeletion")
    def delayed_project_deletion(self) -> pulumi.Output[bool]:
        """
        Enable delayed project deletion by default in new groups. From GitLab 15.1, can only be enabled when delayed*group*deletion is true.
        """
        return pulumi.get(self, "delayed_project_deletion")

    @property
    @pulumi.getter(name="deleteInactiveProjects")
    def delete_inactive_projects(self) -> pulumi.Output[bool]:
        """
        Enable inactive project deletion feature. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive*projects*deletion).
        """
        return pulumi.get(self, "delete_inactive_projects")

    @property
    @pulumi.getter(name="deletionAdjournedPeriod")
    def deletion_adjourned_period(self) -> pulumi.Output[int]:
        """
        The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. From GitLab 15.1, a hook on deletion*adjourned*period sets the period to 1 on every update, and sets both delayed*project*deletion and delayed*group*deletion to false if the period is 0.
        """
        return pulumi.get(self, "deletion_adjourned_period")

    @property
    @pulumi.getter(name="diffMaxFiles")
    def diff_max_files(self) -> pulumi.Output[int]:
        """
        Maximum files in a diff.
        """
        return pulumi.get(self, "diff_max_files")

    @property
    @pulumi.getter(name="diffMaxLines")
    def diff_max_lines(self) -> pulumi.Output[int]:
        """
        Maximum lines in a diff.
        """
        return pulumi.get(self, "diff_max_lines")

    @property
    @pulumi.getter(name="diffMaxPatchBytes")
    def diff_max_patch_bytes(self) -> pulumi.Output[int]:
        """
        Maximum diff patch size, in bytes.
        """
        return pulumi.get(self, "diff_max_patch_bytes")

    @property
    @pulumi.getter(name="disableFeedToken")
    def disable_feed_token(self) -> pulumi.Output[bool]:
        """
        Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).
        """
        return pulumi.get(self, "disable_feed_token")

    @property
    @pulumi.getter(name="disabledOauthSignInSources")
    def disabled_oauth_sign_in_sources(self) -> pulumi.Output[Sequence[str]]:
        """
        Disabled OAuth sign-in sources.
        """
        return pulumi.get(self, "disabled_oauth_sign_in_sources")

    @property
    @pulumi.getter(name="dnsRebindingProtectionEnabled")
    def dns_rebinding_protection_enabled(self) -> pulumi.Output[bool]:
        """
        Enforce DNS rebinding attack protection.
        """
        return pulumi.get(self, "dns_rebinding_protection_enabled")

    @property
    @pulumi.getter(name="domainAllowlists")
    def domain_allowlists(self) -> pulumi.Output[Sequence[str]]:
        """
        Force people to use only corporate emails for sign-up. Null means there is no restriction.
        """
        return pulumi.get(self, "domain_allowlists")

    @property
    @pulumi.getter(name="domainDenylistEnabled")
    def domain_denylist_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.
        """
        return pulumi.get(self, "domain_denylist_enabled")

    @property
    @pulumi.getter(name="domainDenylists")
    def domain_denylists(self) -> pulumi.Output[Sequence[str]]:
        """
        Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.
        """
        return pulumi.get(self, "domain_denylists")

    @property
    @pulumi.getter(name="dsaKeyRestriction")
    def dsa_key_restriction(self) -> pulumi.Output[int]:
        """
        The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
        """
        return pulumi.get(self, "dsa_key_restriction")

    @property
    @pulumi.getter(name="ecdsaKeyRestriction")
    def ecdsa_key_restriction(self) -> pulumi.Output[int]:
        """
        The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
        """
        return pulumi.get(self, "ecdsa_key_restriction")

    @property
    @pulumi.getter(name="ecdsaSkKeyRestriction")
    def ecdsa_sk_key_restriction(self) -> pulumi.Output[int]:
        """
        The minimum allowed curve size (in bits) of an uploaded ECDSA*SK key. 0 means no restriction. -1 disables ECDSA*SK keys.
        """
        return pulumi.get(self, "ecdsa_sk_key_restriction")

    @property
    @pulumi.getter(name="ed25519KeyRestriction")
    def ed25519_key_restriction(self) -> pulumi.Output[int]:
        """
        The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
        """
        return pulumi.get(self, "ed25519_key_restriction")

    @property
    @pulumi.getter(name="ed25519SkKeyRestriction")
    def ed25519_sk_key_restriction(self) -> pulumi.Output[int]:
        """
        The minimum allowed curve size (in bits) of an uploaded ED25519*SK key. 0 means no restriction. -1 disables ED25519*SK keys.
        """
        return pulumi.get(self, "ed25519_sk_key_restriction")

    @property
    @pulumi.getter(name="eksAccessKeyId")
    def eks_access_key_id(self) -> pulumi.Output[str]:
        """
        AWS IAM access key ID.
        """
        return pulumi.get(self, "eks_access_key_id")

    @property
    @pulumi.getter(name="eksAccountId")
    def eks_account_id(self) -> pulumi.Output[str]:
        """
        Amazon account ID.
        """
        return pulumi.get(self, "eks_account_id")

    @property
    @pulumi.getter(name="eksIntegrationEnabled")
    def eks_integration_enabled(self) -> pulumi.Output[bool]:
        """
        Enable integration with Amazon EKS.
        """
        return pulumi.get(self, "eks_integration_enabled")

    @property
    @pulumi.getter(name="eksSecretAccessKey")
    def eks_secret_access_key(self) -> pulumi.Output[str]:
        """
        AWS IAM secret access key.
        """
        return pulumi.get(self, "eks_secret_access_key")

    @property
    @pulumi.getter(name="elasticsearchAws")
    def elasticsearch_aws(self) -> pulumi.Output[bool]:
        """
        Enable the use of AWS hosted Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_aws")

    @property
    @pulumi.getter(name="elasticsearchAwsAccessKey")
    def elasticsearch_aws_access_key(self) -> pulumi.Output[str]:
        """
        AWS IAM access key.
        """
        return pulumi.get(self, "elasticsearch_aws_access_key")

    @property
    @pulumi.getter(name="elasticsearchAwsRegion")
    def elasticsearch_aws_region(self) -> pulumi.Output[str]:
        """
        The AWS region the Elasticsearch domain is configured.
        """
        return pulumi.get(self, "elasticsearch_aws_region")

    @property
    @pulumi.getter(name="elasticsearchAwsSecretAccessKey")
    def elasticsearch_aws_secret_access_key(self) -> pulumi.Output[str]:
        """
        AWS IAM secret access key.
        """
        return pulumi.get(self, "elasticsearch_aws_secret_access_key")

    @property
    @pulumi.getter(name="elasticsearchIndexedFieldLengthLimit")
    def elasticsearch_indexed_field_length_limit(self) -> pulumi.Output[int]:
        """
        Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
        """
        return pulumi.get(self, "elasticsearch_indexed_field_length_limit")

    @property
    @pulumi.getter(name="elasticsearchIndexedFileSizeLimitKb")
    def elasticsearch_indexed_file_size_limit_kb(self) -> pulumi.Output[int]:
        """
        Maximum size of repository and wiki files that are indexed by Elasticsearch.
        """
        return pulumi.get(self, "elasticsearch_indexed_file_size_limit_kb")

    @property
    @pulumi.getter(name="elasticsearchIndexing")
    def elasticsearch_indexing(self) -> pulumi.Output[bool]:
        """
        Enable Elasticsearch indexing.
        """
        return pulumi.get(self, "elasticsearch_indexing")

    @property
    @pulumi.getter(name="elasticsearchLimitIndexing")
    def elasticsearch_limit_indexing(self) -> pulumi.Output[bool]:
        """
        Limit Elasticsearch to index certain namespaces and projects.
        """
        return pulumi.get(self, "elasticsearch_limit_indexing")

    @property
    @pulumi.getter(name="elasticsearchMaxBulkConcurrency")
    def elasticsearch_max_bulk_concurrency(self) -> pulumi.Output[int]:
        """
        Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
        """
        return pulumi.get(self, "elasticsearch_max_bulk_concurrency")

    @property
    @pulumi.getter(name="elasticsearchMaxBulkSizeMb")
    def elasticsearch_max_bulk_size_mb(self) -> pulumi.Output[int]:
        """
        Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
        """
        return pulumi.get(self, "elasticsearch_max_bulk_size_mb")

    @property
    @pulumi.getter(name="elasticsearchNamespaceIds")
    def elasticsearch_namespace_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The namespaces to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        """
        return pulumi.get(self, "elasticsearch_namespace_ids")

    @property
    @pulumi.getter(name="elasticsearchPassword")
    def elasticsearch_password(self) -> pulumi.Output[str]:
        """
        The password of your Elasticsearch instance.
        """
        return pulumi.get(self, "elasticsearch_password")

    @property
    @pulumi.getter(name="elasticsearchProjectIds")
    def elasticsearch_project_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The projects to index via Elasticsearch if elasticsearch*limit*indexing is enabled.
        """
        return pulumi.get(self, "elasticsearch_project_ids")

    @property
    @pulumi.getter(name="elasticsearchSearch")
    def elasticsearch_search(self) -> pulumi.Output[bool]:
        """
        Enable Elasticsearch search.
        """
        return pulumi.get(self, "elasticsearch_search")

    @property
    @pulumi.getter(name="elasticsearchUrls")
    def elasticsearch_urls(self) -> pulumi.Output[Sequence[str]]:
        """
        The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
        """
        return pulumi.get(self, "elasticsearch_urls")

    @property
    @pulumi.getter(name="elasticsearchUsername")
    def elasticsearch_username(self) -> pulumi.Output[str]:
        """
        The username of your Elasticsearch instance.
        """
        return pulumi.get(self, "elasticsearch_username")

    @property
    @pulumi.getter(name="emailAdditionalText")
    def email_additional_text(self) -> pulumi.Output[str]:
        """
        Additional text added to the bottom of every email for legal/auditing/compliance reasons.
        """
        return pulumi.get(self, "email_additional_text")

    @property
    @pulumi.getter(name="emailAuthorInBody")
    def email_author_in_body(self) -> pulumi.Output[bool]:
        """
        Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
        """
        return pulumi.get(self, "email_author_in_body")

    @property
    @pulumi.getter(name="enabledGitAccessProtocol")
    def enabled_git_access_protocol(self) -> pulumi.Output[str]:
        """
        Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.
        """
        return pulumi.get(self, "enabled_git_access_protocol")

    @property
    @pulumi.getter(name="enforceNamespaceStorageLimit")
    def enforce_namespace_storage_limit(self) -> pulumi.Output[bool]:
        """
        Enabling this permits enforcement of namespace storage limits.
        """
        return pulumi.get(self, "enforce_namespace_storage_limit")

    @property
    @pulumi.getter(name="enforceTerms")
    def enforce_terms(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: terms) Enforce application ToS to all users.
        """
        return pulumi.get(self, "enforce_terms")

    @property
    @pulumi.getter(name="externalAuthClientCert")
    def external_auth_client_cert(self) -> pulumi.Output[str]:
        """
        (If enabled, requires: external*auth*client_key) The certificate to use to authenticate with the external authorization service.
        """
        return pulumi.get(self, "external_auth_client_cert")

    @property
    @pulumi.getter(name="externalAuthClientKey")
    def external_auth_client_key(self) -> pulumi.Output[str]:
        """
        Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
        """
        return pulumi.get(self, "external_auth_client_key")

    @property
    @pulumi.getter(name="externalAuthClientKeyPass")
    def external_auth_client_key_pass(self) -> pulumi.Output[str]:
        """
        Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
        """
        return pulumi.get(self, "external_auth_client_key_pass")

    @property
    @pulumi.getter(name="externalAuthorizationServiceDefaultLabel")
    def external_authorization_service_default_label(self) -> pulumi.Output[str]:
        """
        The default classification label to use when requesting authorization and no classification label has been specified on the project.
        """
        return pulumi.get(self, "external_authorization_service_default_label")

    @property
    @pulumi.getter(name="externalAuthorizationServiceEnabled")
    def external_authorization_service_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: external*authorization*service*default*label, external*authorization*service*timeout and external*authorization*service*url) Enable using an external authorization service for accessing projects.
        """
        return pulumi.get(self, "external_authorization_service_enabled")

    @property
    @pulumi.getter(name="externalAuthorizationServiceTimeout")
    def external_authorization_service_timeout(self) -> pulumi.Output[float]:
        """
        The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).
        """
        return pulumi.get(self, "external_authorization_service_timeout")

    @property
    @pulumi.getter(name="externalAuthorizationServiceUrl")
    def external_authorization_service_url(self) -> pulumi.Output[str]:
        """
        URL to which authorization requests are directed.
        """
        return pulumi.get(self, "external_authorization_service_url")

    @property
    @pulumi.getter(name="externalPipelineValidationServiceTimeout")
    def external_pipeline_validation_service_timeout(self) -> pulumi.Output[int]:
        """
        How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
        """
        return pulumi.get(self, "external_pipeline_validation_service_timeout")

    @property
    @pulumi.getter(name="externalPipelineValidationServiceToken")
    def external_pipeline_validation_service_token(self) -> pulumi.Output[str]:
        """
        Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external*pipeline*validation*service*url.
        """
        return pulumi.get(self, "external_pipeline_validation_service_token")

    @property
    @pulumi.getter(name="externalPipelineValidationServiceUrl")
    def external_pipeline_validation_service_url(self) -> pulumi.Output[str]:
        """
        URL to use for pipeline validation requests.
        """
        return pulumi.get(self, "external_pipeline_validation_service_url")

    @property
    @pulumi.getter(name="fileTemplateProjectId")
    def file_template_project_id(self) -> pulumi.Output[int]:
        """
        The ID of a project to load custom file templates from.
        """
        return pulumi.get(self, "file_template_project_id")

    @property
    @pulumi.getter(name="firstDayOfWeek")
    def first_day_of_week(self) -> pulumi.Output[int]:
        """
        Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
        """
        return pulumi.get(self, "first_day_of_week")

    @property
    @pulumi.getter(name="geoNodeAllowedIps")
    def geo_node_allowed_ips(self) -> pulumi.Output[str]:
        """
        Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
        """
        return pulumi.get(self, "geo_node_allowed_ips")

    @property
    @pulumi.getter(name="geoStatusTimeout")
    def geo_status_timeout(self) -> pulumi.Output[int]:
        """
        The amount of seconds after which a request to get a secondary node status times out.
        """
        return pulumi.get(self, "geo_status_timeout")

    @property
    @pulumi.getter(name="gitRateLimitUsersAllowlists")
    def git_rate_limit_users_allowlists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Introduced in GitLab 15.2.
        """
        return pulumi.get(self, "git_rate_limit_users_allowlists")

    @property
    @pulumi.getter(name="gitTwoFactorSessionExpiry")
    def git_two_factor_session_expiry(self) -> pulumi.Output[int]:
        """
        Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
        """
        return pulumi.get(self, "git_two_factor_session_expiry")

    @property
    @pulumi.getter(name="gitalyTimeoutDefault")
    def gitaly_timeout_default(self) -> pulumi.Output[int]:
        """
        Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_default")

    @property
    @pulumi.getter(name="gitalyTimeoutFast")
    def gitaly_timeout_fast(self) -> pulumi.Output[int]:
        """
        Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_fast")

    @property
    @pulumi.getter(name="gitalyTimeoutMedium")
    def gitaly_timeout_medium(self) -> pulumi.Output[int]:
        """
        Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
        """
        return pulumi.get(self, "gitaly_timeout_medium")

    @property
    @pulumi.getter(name="grafanaEnabled")
    def grafana_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Grafana.
        """
        return pulumi.get(self, "grafana_enabled")

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> pulumi.Output[str]:
        """
        Grafana URL.
        """
        return pulumi.get(self, "grafana_url")

    @property
    @pulumi.getter(name="gravatarEnabled")
    def gravatar_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Gravatar.
        """
        return pulumi.get(self, "gravatar_enabled")

    @property
    @pulumi.getter(name="groupOwnersCanManageDefaultBranchProtection")
    def group_owners_can_manage_default_branch_protection(self) -> pulumi.Output[bool]:
        """
        Prevent overrides of default branch protection.
        """
        return pulumi.get(self, "group_owners_can_manage_default_branch_protection")

    @property
    @pulumi.getter(name="hashedStorageEnabled")
    def hashed_storage_enabled(self) -> pulumi.Output[bool]:
        """
        Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).
        """
        return pulumi.get(self, "hashed_storage_enabled")

    @property
    @pulumi.getter(name="helpPageHideCommercialContent")
    def help_page_hide_commercial_content(self) -> pulumi.Output[bool]:
        """
        Hide marketing-related entries from help.
        """
        return pulumi.get(self, "help_page_hide_commercial_content")

    @property
    @pulumi.getter(name="helpPageSupportUrl")
    def help_page_support_url(self) -> pulumi.Output[str]:
        """
        Alternate support URL for help page and help dropdown.
        """
        return pulumi.get(self, "help_page_support_url")

    @property
    @pulumi.getter(name="helpPageText")
    def help_page_text(self) -> pulumi.Output[str]:
        """
        Custom text displayed on the help page.
        """
        return pulumi.get(self, "help_page_text")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> pulumi.Output[str]:
        """
        GitLab server administrator information.
        """
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter(name="hideThirdPartyOffers")
    def hide_third_party_offers(self) -> pulumi.Output[bool]:
        """
        Do not display offers from third parties in GitLab.
        """
        return pulumi.get(self, "hide_third_party_offers")

    @property
    @pulumi.getter(name="homePageUrl")
    def home_page_url(self) -> pulumi.Output[str]:
        """
        Redirect to this URL when not logged in.
        """
        return pulumi.get(self, "home_page_url")

    @property
    @pulumi.getter(name="housekeepingEnabled")
    def housekeeping_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: housekeeping*bitmaps*enabled, housekeeping*full*repack*period, housekeeping*gc*period, and housekeeping*incremental*repack*period) Enable or disable Git housekeeping.
        """
        return pulumi.get(self, "housekeeping_enabled")

    @property
    @pulumi.getter(name="housekeepingFullRepackPeriod")
    def housekeeping_full_repack_period(self) -> pulumi.Output[int]:
        """
        Number of Git pushes after which an incremental git repack is run.
        """
        return pulumi.get(self, "housekeeping_full_repack_period")

    @property
    @pulumi.getter(name="housekeepingGcPeriod")
    def housekeeping_gc_period(self) -> pulumi.Output[int]:
        """
        Number of Git pushes after which git gc is run.
        """
        return pulumi.get(self, "housekeeping_gc_period")

    @property
    @pulumi.getter(name="housekeepingIncrementalRepackPeriod")
    def housekeeping_incremental_repack_period(self) -> pulumi.Output[int]:
        """
        Number of Git pushes after which an incremental git repack is run.
        """
        return pulumi.get(self, "housekeeping_incremental_repack_period")

    @property
    @pulumi.getter(name="htmlEmailsEnabled")
    def html_emails_enabled(self) -> pulumi.Output[bool]:
        """
        Enable HTML emails.
        """
        return pulumi.get(self, "html_emails_enabled")

    @property
    @pulumi.getter(name="importSources")
    def import_sources(self) -> pulumi.Output[Sequence[str]]:
        """
        Sources to allow project import from. Valid values are: `github`, `bitbucket`, `bitbucket_server`, `fogbugz`, `git`, `Project`, `gitea`, `manifest`
        """
        return pulumi.get(self, "import_sources")

    @property
    @pulumi.getter(name="inProductMarketingEmailsEnabled")
    def in_product_marketing_emails_enabled(self) -> pulumi.Output[bool]:
        """
        Enable in-product marketing emails.
        """
        return pulumi.get(self, "in_product_marketing_emails_enabled")

    @property
    @pulumi.getter(name="inactiveProjectsDeleteAfterMonths")
    def inactive_projects_delete_after_months(self) -> pulumi.Output[int]:
        """
        If delete*inactive*projects is true, the time (in months) to wait before deleting inactive projects. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_delete_after_months")

    @property
    @pulumi.getter(name="inactiveProjectsMinSizeMb")
    def inactive_projects_min_size_mb(self) -> pulumi.Output[int]:
        """
        If delete*inactive*projects is true, the minimum repository size for projects to be checked for inactivity. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_min_size_mb")

    @property
    @pulumi.getter(name="inactiveProjectsSendWarningEmailAfterMonths")
    def inactive_projects_send_warning_email_after_months(self) -> pulumi.Output[int]:
        """
        If delete*inactive*projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Introduced in GitLab 14.10. Became operational in GitLab 15.0.
        """
        return pulumi.get(self, "inactive_projects_send_warning_email_after_months")

    @property
    @pulumi.getter(name="invisibleCaptchaEnabled")
    def invisible_captcha_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Invisible CAPTCHA spam detection during sign-up.
        """
        return pulumi.get(self, "invisible_captcha_enabled")

    @property
    @pulumi.getter(name="issuesCreateLimit")
    def issues_create_limit(self) -> pulumi.Output[int]:
        """
        Max number of issue creation requests per minute per user.
        """
        return pulumi.get(self, "issues_create_limit")

    @property
    @pulumi.getter(name="keepLatestArtifact")
    def keep_latest_artifact(self) -> pulumi.Output[bool]:
        """
        Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
        """
        return pulumi.get(self, "keep_latest_artifact")

    @property
    @pulumi.getter(name="localMarkdownVersion")
    def local_markdown_version(self) -> pulumi.Output[int]:
        """
        Increase this value when any cached Markdown should be invalidated.
        """
        return pulumi.get(self, "local_markdown_version")

    @property
    @pulumi.getter(name="mailgunEventsEnabled")
    def mailgun_events_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Mailgun event receiver.
        """
        return pulumi.get(self, "mailgun_events_enabled")

    @property
    @pulumi.getter(name="mailgunSigningKey")
    def mailgun_signing_key(self) -> pulumi.Output[str]:
        """
        The Mailgun HTTP webhook signing key for receiving events from webhook.
        """
        return pulumi.get(self, "mailgun_signing_key")

    @property
    @pulumi.getter(name="maintenanceMode")
    def maintenance_mode(self) -> pulumi.Output[bool]:
        """
        When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
        """
        return pulumi.get(self, "maintenance_mode")

    @property
    @pulumi.getter(name="maintenanceModeMessage")
    def maintenance_mode_message(self) -> pulumi.Output[str]:
        """
        Message displayed when instance is in maintenance mode.
        """
        return pulumi.get(self, "maintenance_mode_message")

    @property
    @pulumi.getter(name="maxArtifactsSize")
    def max_artifacts_size(self) -> pulumi.Output[int]:
        """
        Maximum artifacts size in MB.
        """
        return pulumi.get(self, "max_artifacts_size")

    @property
    @pulumi.getter(name="maxAttachmentSize")
    def max_attachment_size(self) -> pulumi.Output[int]:
        """
        Limit attachment size in MB.
        """
        return pulumi.get(self, "max_attachment_size")

    @property
    @pulumi.getter(name="maxExportSize")
    def max_export_size(self) -> pulumi.Output[int]:
        """
        Maximum export size in MB. 0 for unlimited.
        """
        return pulumi.get(self, "max_export_size")

    @property
    @pulumi.getter(name="maxImportSize")
    def max_import_size(self) -> pulumi.Output[int]:
        """
        Maximum import size in MB. 0 for unlimited.
        """
        return pulumi.get(self, "max_import_size")

    @property
    @pulumi.getter(name="maxNumberOfRepositoryDownloads")
    def max_number_of_repository_downloads(self) -> pulumi.Output[int]:
        """
        Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "max_number_of_repository_downloads")

    @property
    @pulumi.getter(name="maxNumberOfRepositoryDownloadsWithinTimePeriod")
    def max_number_of_repository_downloads_within_time_period(self) -> pulumi.Output[int]:
        """
        Reporting time period (in seconds). Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "max_number_of_repository_downloads_within_time_period")

    @property
    @pulumi.getter(name="maxPagesSize")
    def max_pages_size(self) -> pulumi.Output[int]:
        """
        Maximum size of pages repositories in MB.
        """
        return pulumi.get(self, "max_pages_size")

    @property
    @pulumi.getter(name="maxPersonalAccessTokenLifetime")
    def max_personal_access_token_lifetime(self) -> pulumi.Output[int]:
        """
        Maximum allowable lifetime for access tokens in days.
        """
        return pulumi.get(self, "max_personal_access_token_lifetime")

    @property
    @pulumi.getter(name="maxSshKeyLifetime")
    def max_ssh_key_lifetime(self) -> pulumi.Output[int]:
        """
        Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.
        """
        return pulumi.get(self, "max_ssh_key_lifetime")

    @property
    @pulumi.getter(name="metricsMethodCallThreshold")
    def metrics_method_call_threshold(self) -> pulumi.Output[int]:
        """
        A method call is only tracked when it takes longer than the given amount of milliseconds.
        """
        return pulumi.get(self, "metrics_method_call_threshold")

    @property
    @pulumi.getter(name="mirrorAvailable")
    def mirror_available(self) -> pulumi.Output[bool]:
        """
        Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
        """
        return pulumi.get(self, "mirror_available")

    @property
    @pulumi.getter(name="mirrorCapacityThreshold")
    def mirror_capacity_threshold(self) -> pulumi.Output[int]:
        """
        Minimum capacity to be available before scheduling more mirrors preemptively.
        """
        return pulumi.get(self, "mirror_capacity_threshold")

    @property
    @pulumi.getter(name="mirrorMaxCapacity")
    def mirror_max_capacity(self) -> pulumi.Output[int]:
        """
        Maximum number of mirrors that can be synchronizing at the same time.
        """
        return pulumi.get(self, "mirror_max_capacity")

    @property
    @pulumi.getter(name="mirrorMaxDelay")
    def mirror_max_delay(self) -> pulumi.Output[int]:
        """
        Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
        """
        return pulumi.get(self, "mirror_max_delay")

    @property
    @pulumi.getter(name="npmPackageRequestsForwarding")
    def npm_package_requests_forwarding(self) -> pulumi.Output[bool]:
        """
        Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
        """
        return pulumi.get(self, "npm_package_requests_forwarding")

    @property
    @pulumi.getter(name="outboundLocalRequestsWhitelists")
    def outbound_local_requests_whitelists(self) -> pulumi.Output[Sequence[str]]:
        """
        Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
        """
        return pulumi.get(self, "outbound_local_requests_whitelists")

    @property
    @pulumi.getter(name="packageRegistryCleanupPoliciesWorkerCapacity")
    def package_registry_cleanup_policies_worker_capacity(self) -> pulumi.Output[int]:
        """
        Number of workers assigned to the packages cleanup policies.
        """
        return pulumi.get(self, "package_registry_cleanup_policies_worker_capacity")

    @property
    @pulumi.getter(name="pagesDomainVerificationEnabled")
    def pages_domain_verification_enabled(self) -> pulumi.Output[bool]:
        """
        Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
        """
        return pulumi.get(self, "pages_domain_verification_enabled")

    @property
    @pulumi.getter(name="passwordAuthenticationEnabledForGit")
    def password_authentication_enabled_for_git(self) -> pulumi.Output[bool]:
        """
        Enable authentication for Git over HTTP(S) via a GitLab account password.
        """
        return pulumi.get(self, "password_authentication_enabled_for_git")

    @property
    @pulumi.getter(name="passwordAuthenticationEnabledForWeb")
    def password_authentication_enabled_for_web(self) -> pulumi.Output[bool]:
        """
        Enable authentication for the web interface via a GitLab account password.
        """
        return pulumi.get(self, "password_authentication_enabled_for_web")

    @property
    @pulumi.getter(name="passwordLowercaseRequired")
    def password_lowercase_required(self) -> pulumi.Output[bool]:
        """
        Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_lowercase_required")

    @property
    @pulumi.getter(name="passwordNumberRequired")
    def password_number_required(self) -> pulumi.Output[bool]:
        """
        Indicates whether passwords require at least one number. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_number_required")

    @property
    @pulumi.getter(name="passwordSymbolRequired")
    def password_symbol_required(self) -> pulumi.Output[bool]:
        """
        Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_symbol_required")

    @property
    @pulumi.getter(name="passwordUppercaseRequired")
    def password_uppercase_required(self) -> pulumi.Output[bool]:
        """
        Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.
        """
        return pulumi.get(self, "password_uppercase_required")

    @property
    @pulumi.getter(name="performanceBarAllowedGroupPath")
    def performance_bar_allowed_group_path(self) -> pulumi.Output[str]:
        """
        Path of the group that is allowed to toggle the performance bar.
        """
        return pulumi.get(self, "performance_bar_allowed_group_path")

    @property
    @pulumi.getter(name="personalAccessTokenPrefix")
    def personal_access_token_prefix(self) -> pulumi.Output[str]:
        """
        Prefix for all generated personal access tokens.
        """
        return pulumi.get(self, "personal_access_token_prefix")

    @property
    @pulumi.getter(name="pipelineLimitPerProjectUserSha")
    def pipeline_limit_per_project_user_sha(self) -> pulumi.Output[int]:
        """
        Maximum number of pipeline creation requests per minute per user and commit.
        """
        return pulumi.get(self, "pipeline_limit_per_project_user_sha")

    @property
    @pulumi.getter(name="plantumlEnabled")
    def plantuml_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: plantuml_url) Enable PlantUML integration.
        """
        return pulumi.get(self, "plantuml_enabled")

    @property
    @pulumi.getter(name="plantumlUrl")
    def plantuml_url(self) -> pulumi.Output[str]:
        """
        The PlantUML instance URL for integration.
        """
        return pulumi.get(self, "plantuml_url")

    @property
    @pulumi.getter(name="pollingIntervalMultiplier")
    def polling_interval_multiplier(self) -> pulumi.Output[float]:
        """
        Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
        """
        return pulumi.get(self, "polling_interval_multiplier")

    @property
    @pulumi.getter(name="projectExportEnabled")
    def project_export_enabled(self) -> pulumi.Output[bool]:
        """
        Enable project export.
        """
        return pulumi.get(self, "project_export_enabled")

    @property
    @pulumi.getter(name="prometheusMetricsEnabled")
    def prometheus_metrics_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Prometheus metrics.
        """
        return pulumi.get(self, "prometheus_metrics_enabled")

    @property
    @pulumi.getter(name="protectedCiVariables")
    def protected_ci_variables(self) -> pulumi.Output[bool]:
        """
        CI/CD variables are protected by default.
        """
        return pulumi.get(self, "protected_ci_variables")

    @property
    @pulumi.getter(name="pushEventActivitiesLimit")
    def push_event_activities_limit(self) -> pulumi.Output[int]:
        """
        Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
        """
        return pulumi.get(self, "push_event_activities_limit")

    @property
    @pulumi.getter(name="pushEventHooksLimit")
    def push_event_hooks_limit(self) -> pulumi.Output[int]:
        """
        Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
        """
        return pulumi.get(self, "push_event_hooks_limit")

    @property
    @pulumi.getter(name="pypiPackageRequestsForwarding")
    def pypi_package_requests_forwarding(self) -> pulumi.Output[bool]:
        """
        Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
        """
        return pulumi.get(self, "pypi_package_requests_forwarding")

    @property
    @pulumi.getter(name="rateLimitingResponseText")
    def rate_limiting_response_text(self) -> pulumi.Output[str]:
        """
        When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
        """
        return pulumi.get(self, "rate_limiting_response_text")

    @property
    @pulumi.getter(name="rawBlobRequestLimit")
    def raw_blob_request_limit(self) -> pulumi.Output[int]:
        """
        Max number of requests per minute for each raw path. To disable throttling set to 0.
        """
        return pulumi.get(self, "raw_blob_request_limit")

    @property
    @pulumi.getter(name="recaptchaEnabled")
    def recaptcha_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: recaptcha*private*key and recaptcha*site*key) Enable reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_enabled")

    @property
    @pulumi.getter(name="recaptchaPrivateKey")
    def recaptcha_private_key(self) -> pulumi.Output[str]:
        """
        Private key for reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_private_key")

    @property
    @pulumi.getter(name="recaptchaSiteKey")
    def recaptcha_site_key(self) -> pulumi.Output[str]:
        """
        Site key for reCAPTCHA.
        """
        return pulumi.get(self, "recaptcha_site_key")

    @property
    @pulumi.getter(name="receiveMaxInputSize")
    def receive_max_input_size(self) -> pulumi.Output[int]:
        """
        Maximum push size (MB).
        """
        return pulumi.get(self, "receive_max_input_size")

    @property
    @pulumi.getter(name="repositoryChecksEnabled")
    def repository_checks_enabled(self) -> pulumi.Output[bool]:
        """
        GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
        """
        return pulumi.get(self, "repository_checks_enabled")

    @property
    @pulumi.getter(name="repositorySizeLimit")
    def repository_size_limit(self) -> pulumi.Output[int]:
        """
        Size limit per repository (MB).
        """
        return pulumi.get(self, "repository_size_limit")

    @property
    @pulumi.getter(name="repositoryStorages")
    def repository_storages(self) -> pulumi.Output[Sequence[str]]:
        """
        (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
        """
        return pulumi.get(self, "repository_storages")

    @property
    @pulumi.getter(name="repositoryStoragesWeighted")
    def repository_storages_weighted(self) -> pulumi.Output[Mapping[str, int]]:
        """
        (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
        """
        return pulumi.get(self, "repository_storages_weighted")

    @property
    @pulumi.getter(name="requireAdminApprovalAfterUserSignup")
    def require_admin_approval_after_user_signup(self) -> pulumi.Output[bool]:
        """
        When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
        """
        return pulumi.get(self, "require_admin_approval_after_user_signup")

    @property
    @pulumi.getter(name="requireTwoFactorAuthentication")
    def require_two_factor_authentication(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: two*factor*grace_period) Require all users to set up Two-factor authentication.
        """
        return pulumi.get(self, "require_two_factor_authentication")

    @property
    @pulumi.getter(name="restrictedVisibilityLevels")
    def restricted_visibility_levels(self) -> pulumi.Output[Sequence[str]]:
        """
        Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
        """
        return pulumi.get(self, "restricted_visibility_levels")

    @property
    @pulumi.getter(name="rsaKeyRestriction")
    def rsa_key_restriction(self) -> pulumi.Output[int]:
        """
        The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
        """
        return pulumi.get(self, "rsa_key_restriction")

    @property
    @pulumi.getter(name="searchRateLimit")
    def search_rate_limit(self) -> pulumi.Output[int]:
        """
        Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
        """
        return pulumi.get(self, "search_rate_limit")

    @property
    @pulumi.getter(name="searchRateLimitUnauthenticated")
    def search_rate_limit_unauthenticated(self) -> pulumi.Output[int]:
        """
        Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
        """
        return pulumi.get(self, "search_rate_limit_unauthenticated")

    @property
    @pulumi.getter(name="sendUserConfirmationEmail")
    def send_user_confirmation_email(self) -> pulumi.Output[bool]:
        """
        Send confirmation email on sign-up.
        """
        return pulumi.get(self, "send_user_confirmation_email")

    @property
    @pulumi.getter(name="sessionExpireDelay")
    def session_expire_delay(self) -> pulumi.Output[int]:
        """
        Session duration in minutes. GitLab restart is required to apply changes.
        """
        return pulumi.get(self, "session_expire_delay")

    @property
    @pulumi.getter(name="sharedRunnersEnabled")
    def shared_runners_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: shared*runners*text and shared*runners*minutes) Enable shared runners for new projects.
        """
        return pulumi.get(self, "shared_runners_enabled")

    @property
    @pulumi.getter(name="sharedRunnersMinutes")
    def shared_runners_minutes(self) -> pulumi.Output[int]:
        """
        Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
        """
        return pulumi.get(self, "shared_runners_minutes")

    @property
    @pulumi.getter(name="sharedRunnersText")
    def shared_runners_text(self) -> pulumi.Output[str]:
        """
        Shared runners text.
        """
        return pulumi.get(self, "shared_runners_text")

    @property
    @pulumi.getter(name="sidekiqJobLimiterCompressionThresholdBytes")
    def sidekiq_job_limiter_compression_threshold_bytes(self) -> pulumi.Output[int]:
        """
        The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
        """
        return pulumi.get(self, "sidekiq_job_limiter_compression_threshold_bytes")

    @property
    @pulumi.getter(name="sidekiqJobLimiterLimitBytes")
    def sidekiq_job_limiter_limit_bytes(self) -> pulumi.Output[int]:
        """
        The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
        """
        return pulumi.get(self, "sidekiq_job_limiter_limit_bytes")

    @property
    @pulumi.getter(name="sidekiqJobLimiterMode")
    def sidekiq_job_limiter_mode(self) -> pulumi.Output[str]:
        """
        track or compress. Sets the behavior for Sidekiq job size limits.
        """
        return pulumi.get(self, "sidekiq_job_limiter_mode")

    @property
    @pulumi.getter(name="signInText")
    def sign_in_text(self) -> pulumi.Output[str]:
        """
        Text on the login page.
        """
        return pulumi.get(self, "sign_in_text")

    @property
    @pulumi.getter(name="signupEnabled")
    def signup_enabled(self) -> pulumi.Output[bool]:
        """
        Enable registration.
        """
        return pulumi.get(self, "signup_enabled")

    @property
    @pulumi.getter(name="slackAppEnabled")
    def slack_app_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: slack*app*id, slack*app*secret and slack*app*secret) Enable Slack app.
        """
        return pulumi.get(self, "slack_app_enabled")

    @property
    @pulumi.getter(name="slackAppId")
    def slack_app_id(self) -> pulumi.Output[str]:
        """
        The app ID of the Slack-app.
        """
        return pulumi.get(self, "slack_app_id")

    @property
    @pulumi.getter(name="slackAppSecret")
    def slack_app_secret(self) -> pulumi.Output[str]:
        """
        The app secret of the Slack-app.
        """
        return pulumi.get(self, "slack_app_secret")

    @property
    @pulumi.getter(name="slackAppSigningSecret")
    def slack_app_signing_secret(self) -> pulumi.Output[str]:
        """
        The signing secret of the Slack-app.
        """
        return pulumi.get(self, "slack_app_signing_secret")

    @property
    @pulumi.getter(name="slackAppVerificationToken")
    def slack_app_verification_token(self) -> pulumi.Output[str]:
        """
        The verification token of the Slack-app.
        """
        return pulumi.get(self, "slack_app_verification_token")

    @property
    @pulumi.getter(name="snippetSizeLimit")
    def snippet_size_limit(self) -> pulumi.Output[int]:
        """
        Max snippet content size in bytes.
        """
        return pulumi.get(self, "snippet_size_limit")

    @property
    @pulumi.getter(name="snowplowAppId")
    def snowplow_app_id(self) -> pulumi.Output[str]:
        """
        The Snowplow site name / application ID. (for example, gitlab)
        """
        return pulumi.get(self, "snowplow_app_id")

    @property
    @pulumi.getter(name="snowplowCollectorHostname")
    def snowplow_collector_hostname(self) -> pulumi.Output[str]:
        """
        The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
        """
        return pulumi.get(self, "snowplow_collector_hostname")

    @property
    @pulumi.getter(name="snowplowCookieDomain")
    def snowplow_cookie_domain(self) -> pulumi.Output[str]:
        """
        The Snowplow cookie domain. (for example, .gitlab.com)
        """
        return pulumi.get(self, "snowplow_cookie_domain")

    @property
    @pulumi.getter(name="snowplowEnabled")
    def snowplow_enabled(self) -> pulumi.Output[bool]:
        """
        Enable snowplow tracking.
        """
        return pulumi.get(self, "snowplow_enabled")

    @property
    @pulumi.getter(name="sourcegraphEnabled")
    def sourcegraph_enabled(self) -> pulumi.Output[bool]:
        """
        Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
        """
        return pulumi.get(self, "sourcegraph_enabled")

    @property
    @pulumi.getter(name="sourcegraphPublicOnly")
    def sourcegraph_public_only(self) -> pulumi.Output[bool]:
        """
        Blocks Sourcegraph from being loaded on private and internal projects.
        """
        return pulumi.get(self, "sourcegraph_public_only")

    @property
    @pulumi.getter(name="sourcegraphUrl")
    def sourcegraph_url(self) -> pulumi.Output[str]:
        """
        The Sourcegraph instance URL for integration.
        """
        return pulumi.get(self, "sourcegraph_url")

    @property
    @pulumi.getter(name="spamCheckApiKey")
    def spam_check_api_key(self) -> pulumi.Output[str]:
        """
        API key used by GitLab for accessing the Spam Check service endpoint.
        """
        return pulumi.get(self, "spam_check_api_key")

    @property
    @pulumi.getter(name="spamCheckEndpointEnabled")
    def spam_check_endpoint_enabled(self) -> pulumi.Output[bool]:
        """
        Enables spam checking using external Spam Check API endpoint.
        """
        return pulumi.get(self, "spam_check_endpoint_enabled")

    @property
    @pulumi.getter(name="spamCheckEndpointUrl")
    def spam_check_endpoint_url(self) -> pulumi.Output[str]:
        """
        URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
        """
        return pulumi.get(self, "spam_check_endpoint_url")

    @property
    @pulumi.getter(name="suggestPipelineEnabled")
    def suggest_pipeline_enabled(self) -> pulumi.Output[bool]:
        """
        Enable pipeline suggestion banner.
        """
        return pulumi.get(self, "suggest_pipeline_enabled")

    @property
    @pulumi.getter(name="terminalMaxSessionTime")
    def terminal_max_session_time(self) -> pulumi.Output[int]:
        """
        Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
        """
        return pulumi.get(self, "terminal_max_session_time")

    @property
    @pulumi.getter
    def terms(self) -> pulumi.Output[str]:
        """
        (Required by: enforce_terms) Markdown content for the ToS.
        """
        return pulumi.get(self, "terms")

    @property
    @pulumi.getter(name="throttleAuthenticatedApiEnabled")
    def throttle_authenticated_api_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: throttle*authenticated*api*period*in*seconds and throttle*authenticated*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_authenticated_api_enabled")

    @property
    @pulumi.getter(name="throttleAuthenticatedApiPeriodInSeconds")
    def throttle_authenticated_api_period_in_seconds(self) -> pulumi.Output[int]:
        """
        Rate limit period (in seconds).
        """
        return pulumi.get(self, "throttle_authenticated_api_period_in_seconds")

    @property
    @pulumi.getter(name="throttleAuthenticatedApiRequestsPerPeriod")
    def throttle_authenticated_api_requests_per_period(self) -> pulumi.Output[int]:
        """
        Maximum requests per period per user.
        """
        return pulumi.get(self, "throttle_authenticated_api_requests_per_period")

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiEnabled")
    def throttle_authenticated_packages_api_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: throttle*authenticated*packages*api*period*in*seconds and throttle*authenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_enabled")

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiPeriodInSeconds")
    def throttle_authenticated_packages_api_period_in_seconds(self) -> pulumi.Output[int]:
        """
        Rate limit period (in seconds). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_period_in_seconds")

    @property
    @pulumi.getter(name="throttleAuthenticatedPackagesApiRequestsPerPeriod")
    def throttle_authenticated_packages_api_requests_per_period(self) -> pulumi.Output[int]:
        """
        Maximum requests per period per user. View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_authenticated_packages_api_requests_per_period")

    @property
    @pulumi.getter(name="throttleAuthenticatedWebEnabled")
    def throttle_authenticated_web_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: throttle*authenticated*web*period*in*seconds and throttle*authenticated*web*requests*per*period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_authenticated_web_enabled")

    @property
    @pulumi.getter(name="throttleAuthenticatedWebPeriodInSeconds")
    def throttle_authenticated_web_period_in_seconds(self) -> pulumi.Output[int]:
        """
        Rate limit period (in seconds).
        """
        return pulumi.get(self, "throttle_authenticated_web_period_in_seconds")

    @property
    @pulumi.getter(name="throttleAuthenticatedWebRequestsPerPeriod")
    def throttle_authenticated_web_requests_per_period(self) -> pulumi.Output[int]:
        """
        Maximum requests per period per user.
        """
        return pulumi.get(self, "throttle_authenticated_web_requests_per_period")

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiEnabled")
    def throttle_unauthenticated_api_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: throttle*unauthenticated*api*period*in*seconds and throttle*unauthenticated*api*requests*per*period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_unauthenticated_api_enabled")

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiPeriodInSeconds")
    def throttle_unauthenticated_api_period_in_seconds(self) -> pulumi.Output[int]:
        """
        Rate limit period in seconds.
        """
        return pulumi.get(self, "throttle_unauthenticated_api_period_in_seconds")

    @property
    @pulumi.getter(name="throttleUnauthenticatedApiRequestsPerPeriod")
    def throttle_unauthenticated_api_requests_per_period(self) -> pulumi.Output[int]:
        """
        Max requests per period per IP.
        """
        return pulumi.get(self, "throttle_unauthenticated_api_requests_per_period")

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiEnabled")
    def throttle_unauthenticated_packages_api_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: throttle*unauthenticated*packages*api*period*in*seconds and throttle*unauthenticated*packages*api*requests*per*period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_enabled")

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiPeriodInSeconds")
    def throttle_unauthenticated_packages_api_period_in_seconds(self) -> pulumi.Output[int]:
        """
        Rate limit period (in seconds). View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_period_in_seconds")

    @property
    @pulumi.getter(name="throttleUnauthenticatedPackagesApiRequestsPerPeriod")
    def throttle_unauthenticated_packages_api_requests_per_period(self) -> pulumi.Output[int]:
        """
        Maximum requests per period per user. View Package Registry rate limits for more details.
        """
        return pulumi.get(self, "throttle_unauthenticated_packages_api_requests_per_period")

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebEnabled")
    def throttle_unauthenticated_web_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: throttle*unauthenticated*web*period*in*seconds and throttle*unauthenticated*web*requests*per*period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).
        """
        return pulumi.get(self, "throttle_unauthenticated_web_enabled")

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebPeriodInSeconds")
    def throttle_unauthenticated_web_period_in_seconds(self) -> pulumi.Output[int]:
        """
        Rate limit period in seconds.
        """
        return pulumi.get(self, "throttle_unauthenticated_web_period_in_seconds")

    @property
    @pulumi.getter(name="throttleUnauthenticatedWebRequestsPerPeriod")
    def throttle_unauthenticated_web_requests_per_period(self) -> pulumi.Output[int]:
        """
        Max requests per period per IP.
        """
        return pulumi.get(self, "throttle_unauthenticated_web_requests_per_period")

    @property
    @pulumi.getter(name="timeTrackingLimitToHours")
    def time_tracking_limit_to_hours(self) -> pulumi.Output[bool]:
        """
        Limit display of time tracking units to hours.
        """
        return pulumi.get(self, "time_tracking_limit_to_hours")

    @property
    @pulumi.getter(name="twoFactorGracePeriod")
    def two_factor_grace_period(self) -> pulumi.Output[int]:
        """
        Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
        """
        return pulumi.get(self, "two_factor_grace_period")

    @property
    @pulumi.getter(name="uniqueIpsLimitEnabled")
    def unique_ips_limit_enabled(self) -> pulumi.Output[bool]:
        """
        (If enabled, requires: unique*ips*limit*per*user and unique*ips*limit*time*window) Limit sign in from multiple IPs.
        """
        return pulumi.get(self, "unique_ips_limit_enabled")

    @property
    @pulumi.getter(name="uniqueIpsLimitPerUser")
    def unique_ips_limit_per_user(self) -> pulumi.Output[int]:
        """
        Maximum number of IPs per user.
        """
        return pulumi.get(self, "unique_ips_limit_per_user")

    @property
    @pulumi.getter(name="uniqueIpsLimitTimeWindow")
    def unique_ips_limit_time_window(self) -> pulumi.Output[int]:
        """
        How many seconds an IP is counted towards the limit.
        """
        return pulumi.get(self, "unique_ips_limit_time_window")

    @property
    @pulumi.getter(name="usagePingEnabled")
    def usage_ping_enabled(self) -> pulumi.Output[bool]:
        """
        Every week GitLab reports license usage back to GitLab, Inc.
        """
        return pulumi.get(self, "usage_ping_enabled")

    @property
    @pulumi.getter(name="userDeactivationEmailsEnabled")
    def user_deactivation_emails_enabled(self) -> pulumi.Output[bool]:
        """
        Send an email to users upon account deactivation.
        """
        return pulumi.get(self, "user_deactivation_emails_enabled")

    @property
    @pulumi.getter(name="userDefaultExternal")
    def user_default_external(self) -> pulumi.Output[bool]:
        """
        Newly registered users are external by default.
        """
        return pulumi.get(self, "user_default_external")

    @property
    @pulumi.getter(name="userDefaultInternalRegex")
    def user_default_internal_regex(self) -> pulumi.Output[str]:
        """
        Specify an email address regex pattern to identify default internal users.
        """
        return pulumi.get(self, "user_default_internal_regex")

    @property
    @pulumi.getter(name="userOauthApplications")
    def user_oauth_applications(self) -> pulumi.Output[bool]:
        """
        Allow users to register any application to use GitLab as an OAuth provider.
        """
        return pulumi.get(self, "user_oauth_applications")

    @property
    @pulumi.getter(name="userShowAddSshKeyMessage")
    def user_show_add_ssh_key_message(self) -> pulumi.Output[bool]:
        """
        When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
        """
        return pulumi.get(self, "user_show_add_ssh_key_message")

    @property
    @pulumi.getter(name="versionCheckEnabled")
    def version_check_enabled(self) -> pulumi.Output[bool]:
        """
        Let GitLab inform you when an update is available.
        """
        return pulumi.get(self, "version_check_enabled")

    @property
    @pulumi.getter(name="webIdeClientsidePreviewEnabled")
    def web_ide_clientside_preview_enabled(self) -> pulumi.Output[bool]:
        """
        Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
        """
        return pulumi.get(self, "web_ide_clientside_preview_enabled")

    @property
    @pulumi.getter(name="whatsNewVariant")
    def whats_new_variant(self) -> pulumi.Output[str]:
        """
        What’s new variant, possible values: all*tiers, current*tier, and disabled.
        """
        return pulumi.get(self, "whats_new_variant")

    @property
    @pulumi.getter(name="wikiPageMaxContentBytes")
    def wiki_page_max_content_bytes(self) -> pulumi.Output[int]:
        """
        Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        """
        return pulumi.get(self, "wiki_page_max_content_bytes")

