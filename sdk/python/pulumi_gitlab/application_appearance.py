# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ApplicationAppearanceArgs', 'ApplicationAppearance']

@pulumi.input_type
class ApplicationAppearanceArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 email_header_and_footer_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 footer_message: Optional[pulumi.Input[_builtins.str]] = None,
                 header_message: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_settings_on_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 member_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 message_background_color: Optional[pulumi.Input[_builtins.str]] = None,
                 message_font_color: Optional[pulumi.Input[_builtins.str]] = None,
                 new_project_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_image_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_short_name: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApplicationAppearance resource.
        :param pulumi.Input[_builtins.str] description: Markdown text shown on the sign-in and sign-up page.
        :param pulumi.Input[_builtins.bool] email_header_and_footer_enabled: Add header and footer to all outgoing emails if enabled.
        :param pulumi.Input[_builtins.str] footer_message: Message in the system footer bar.
        :param pulumi.Input[_builtins.str] header_message: Message in the system header bar.
        :param pulumi.Input[_builtins.str] member_guidelines: Markdown text shown on the group or project member page for users with permission to change members.
        :param pulumi.Input[_builtins.str] message_background_color: Background color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] message_font_color: Font color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] new_project_guidelines: Markdown text shown on the new project page.
        :param pulumi.Input[_builtins.str] profile_image_guidelines: Markdown text shown on the profile page below the Public Avatar.
        :param pulumi.Input[_builtins.str] pwa_description: An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_name: Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_short_name: Short name for Progressive Web App.
        :param pulumi.Input[_builtins.str] title: Application title on the sign-in and sign-up page.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email_header_and_footer_enabled is not None:
            pulumi.set(__self__, "email_header_and_footer_enabled", email_header_and_footer_enabled)
        if footer_message is not None:
            pulumi.set(__self__, "footer_message", footer_message)
        if header_message is not None:
            pulumi.set(__self__, "header_message", header_message)
        if keep_settings_on_destroy is not None:
            pulumi.set(__self__, "keep_settings_on_destroy", keep_settings_on_destroy)
        if member_guidelines is not None:
            pulumi.set(__self__, "member_guidelines", member_guidelines)
        if message_background_color is not None:
            pulumi.set(__self__, "message_background_color", message_background_color)
        if message_font_color is not None:
            pulumi.set(__self__, "message_font_color", message_font_color)
        if new_project_guidelines is not None:
            pulumi.set(__self__, "new_project_guidelines", new_project_guidelines)
        if profile_image_guidelines is not None:
            pulumi.set(__self__, "profile_image_guidelines", profile_image_guidelines)
        if pwa_description is not None:
            pulumi.set(__self__, "pwa_description", pwa_description)
        if pwa_name is not None:
            pulumi.set(__self__, "pwa_name", pwa_name)
        if pwa_short_name is not None:
            pulumi.set(__self__, "pwa_short_name", pwa_short_name)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the sign-in and sign-up page.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="emailHeaderAndFooterEnabled")
    def email_header_and_footer_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Add header and footer to all outgoing emails if enabled.
        """
        return pulumi.get(self, "email_header_and_footer_enabled")

    @email_header_and_footer_enabled.setter
    def email_header_and_footer_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "email_header_and_footer_enabled", value)

    @_builtins.property
    @pulumi.getter(name="footerMessage")
    def footer_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Message in the system footer bar.
        """
        return pulumi.get(self, "footer_message")

    @footer_message.setter
    def footer_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "footer_message", value)

    @_builtins.property
    @pulumi.getter(name="headerMessage")
    def header_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Message in the system header bar.
        """
        return pulumi.get(self, "header_message")

    @header_message.setter
    def header_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "header_message", value)

    @_builtins.property
    @pulumi.getter(name="keepSettingsOnDestroy")
    def keep_settings_on_destroy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "keep_settings_on_destroy")

    @keep_settings_on_destroy.setter
    def keep_settings_on_destroy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_settings_on_destroy", value)

    @_builtins.property
    @pulumi.getter(name="memberGuidelines")
    def member_guidelines(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the group or project member page for users with permission to change members.
        """
        return pulumi.get(self, "member_guidelines")

    @member_guidelines.setter
    def member_guidelines(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_guidelines", value)

    @_builtins.property
    @pulumi.getter(name="messageBackgroundColor")
    def message_background_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Background color for the system header or footer bar, in CSS hex notation.
        """
        return pulumi.get(self, "message_background_color")

    @message_background_color.setter
    def message_background_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_background_color", value)

    @_builtins.property
    @pulumi.getter(name="messageFontColor")
    def message_font_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Font color for the system header or footer bar, in CSS hex notation.
        """
        return pulumi.get(self, "message_font_color")

    @message_font_color.setter
    def message_font_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_font_color", value)

    @_builtins.property
    @pulumi.getter(name="newProjectGuidelines")
    def new_project_guidelines(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the new project page.
        """
        return pulumi.get(self, "new_project_guidelines")

    @new_project_guidelines.setter
    def new_project_guidelines(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "new_project_guidelines", value)

    @_builtins.property
    @pulumi.getter(name="profileImageGuidelines")
    def profile_image_guidelines(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the profile page below the Public Avatar.
        """
        return pulumi.get(self, "profile_image_guidelines")

    @profile_image_guidelines.setter
    def profile_image_guidelines(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_image_guidelines", value)

    @_builtins.property
    @pulumi.getter(name="pwaDescription")
    def pwa_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        """
        return pulumi.get(self, "pwa_description")

    @pwa_description.setter
    def pwa_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pwa_description", value)

    @_builtins.property
    @pulumi.getter(name="pwaName")
    def pwa_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        """
        return pulumi.get(self, "pwa_name")

    @pwa_name.setter
    def pwa_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pwa_name", value)

    @_builtins.property
    @pulumi.getter(name="pwaShortName")
    def pwa_short_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Short name for Progressive Web App.
        """
        return pulumi.get(self, "pwa_short_name")

    @pwa_short_name.setter
    def pwa_short_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pwa_short_name", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application title on the sign-in and sign-up page.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class _ApplicationAppearanceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 email_header_and_footer_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 footer_message: Optional[pulumi.Input[_builtins.str]] = None,
                 header_message: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_settings_on_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 member_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 message_background_color: Optional[pulumi.Input[_builtins.str]] = None,
                 message_font_color: Optional[pulumi.Input[_builtins.str]] = None,
                 new_project_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_image_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_short_name: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApplicationAppearance resources.
        :param pulumi.Input[_builtins.str] description: Markdown text shown on the sign-in and sign-up page.
        :param pulumi.Input[_builtins.bool] email_header_and_footer_enabled: Add header and footer to all outgoing emails if enabled.
        :param pulumi.Input[_builtins.str] footer_message: Message in the system footer bar.
        :param pulumi.Input[_builtins.str] header_message: Message in the system header bar.
        :param pulumi.Input[_builtins.str] member_guidelines: Markdown text shown on the group or project member page for users with permission to change members.
        :param pulumi.Input[_builtins.str] message_background_color: Background color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] message_font_color: Font color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] new_project_guidelines: Markdown text shown on the new project page.
        :param pulumi.Input[_builtins.str] profile_image_guidelines: Markdown text shown on the profile page below the Public Avatar.
        :param pulumi.Input[_builtins.str] pwa_description: An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_name: Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_short_name: Short name for Progressive Web App.
        :param pulumi.Input[_builtins.str] title: Application title on the sign-in and sign-up page.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email_header_and_footer_enabled is not None:
            pulumi.set(__self__, "email_header_and_footer_enabled", email_header_and_footer_enabled)
        if footer_message is not None:
            pulumi.set(__self__, "footer_message", footer_message)
        if header_message is not None:
            pulumi.set(__self__, "header_message", header_message)
        if keep_settings_on_destroy is not None:
            pulumi.set(__self__, "keep_settings_on_destroy", keep_settings_on_destroy)
        if member_guidelines is not None:
            pulumi.set(__self__, "member_guidelines", member_guidelines)
        if message_background_color is not None:
            pulumi.set(__self__, "message_background_color", message_background_color)
        if message_font_color is not None:
            pulumi.set(__self__, "message_font_color", message_font_color)
        if new_project_guidelines is not None:
            pulumi.set(__self__, "new_project_guidelines", new_project_guidelines)
        if profile_image_guidelines is not None:
            pulumi.set(__self__, "profile_image_guidelines", profile_image_guidelines)
        if pwa_description is not None:
            pulumi.set(__self__, "pwa_description", pwa_description)
        if pwa_name is not None:
            pulumi.set(__self__, "pwa_name", pwa_name)
        if pwa_short_name is not None:
            pulumi.set(__self__, "pwa_short_name", pwa_short_name)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the sign-in and sign-up page.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="emailHeaderAndFooterEnabled")
    def email_header_and_footer_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Add header and footer to all outgoing emails if enabled.
        """
        return pulumi.get(self, "email_header_and_footer_enabled")

    @email_header_and_footer_enabled.setter
    def email_header_and_footer_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "email_header_and_footer_enabled", value)

    @_builtins.property
    @pulumi.getter(name="footerMessage")
    def footer_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Message in the system footer bar.
        """
        return pulumi.get(self, "footer_message")

    @footer_message.setter
    def footer_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "footer_message", value)

    @_builtins.property
    @pulumi.getter(name="headerMessage")
    def header_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Message in the system header bar.
        """
        return pulumi.get(self, "header_message")

    @header_message.setter
    def header_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "header_message", value)

    @_builtins.property
    @pulumi.getter(name="keepSettingsOnDestroy")
    def keep_settings_on_destroy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "keep_settings_on_destroy")

    @keep_settings_on_destroy.setter
    def keep_settings_on_destroy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_settings_on_destroy", value)

    @_builtins.property
    @pulumi.getter(name="memberGuidelines")
    def member_guidelines(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the group or project member page for users with permission to change members.
        """
        return pulumi.get(self, "member_guidelines")

    @member_guidelines.setter
    def member_guidelines(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "member_guidelines", value)

    @_builtins.property
    @pulumi.getter(name="messageBackgroundColor")
    def message_background_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Background color for the system header or footer bar, in CSS hex notation.
        """
        return pulumi.get(self, "message_background_color")

    @message_background_color.setter
    def message_background_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_background_color", value)

    @_builtins.property
    @pulumi.getter(name="messageFontColor")
    def message_font_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Font color for the system header or footer bar, in CSS hex notation.
        """
        return pulumi.get(self, "message_font_color")

    @message_font_color.setter
    def message_font_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_font_color", value)

    @_builtins.property
    @pulumi.getter(name="newProjectGuidelines")
    def new_project_guidelines(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the new project page.
        """
        return pulumi.get(self, "new_project_guidelines")

    @new_project_guidelines.setter
    def new_project_guidelines(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "new_project_guidelines", value)

    @_builtins.property
    @pulumi.getter(name="profileImageGuidelines")
    def profile_image_guidelines(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Markdown text shown on the profile page below the Public Avatar.
        """
        return pulumi.get(self, "profile_image_guidelines")

    @profile_image_guidelines.setter
    def profile_image_guidelines(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_image_guidelines", value)

    @_builtins.property
    @pulumi.getter(name="pwaDescription")
    def pwa_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        """
        return pulumi.get(self, "pwa_description")

    @pwa_description.setter
    def pwa_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pwa_description", value)

    @_builtins.property
    @pulumi.getter(name="pwaName")
    def pwa_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        """
        return pulumi.get(self, "pwa_name")

    @pwa_name.setter
    def pwa_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pwa_name", value)

    @_builtins.property
    @pulumi.getter(name="pwaShortName")
    def pwa_short_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Short name for Progressive Web App.
        """
        return pulumi.get(self, "pwa_short_name")

    @pwa_short_name.setter
    def pwa_short_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pwa_short_name", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application title on the sign-in and sign-up page.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)


@pulumi.type_token("gitlab:index/applicationAppearance:ApplicationAppearance")
class ApplicationAppearance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 email_header_and_footer_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 footer_message: Optional[pulumi.Input[_builtins.str]] = None,
                 header_message: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_settings_on_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 member_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 message_background_color: Optional[pulumi.Input[_builtins.str]] = None,
                 message_font_color: Optional[pulumi.Input[_builtins.str]] = None,
                 new_project_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_image_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_short_name: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        Starting in Terraform v1.5.0, you can use an import block to import `gitlab_application_appearance`. For example:

        terraform

        import {

          to = gitlab_application_appearance.example

          id = "see CLI command below for ID"

        }

        Importing using the CLI is supported with the following syntax:

        Gitlab application appearance can be imported with the hard-coded key `gitlab`, for example:

        ```sh
        $ pulumi import gitlab:index/applicationAppearance:ApplicationAppearance example "gitlab"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Markdown text shown on the sign-in and sign-up page.
        :param pulumi.Input[_builtins.bool] email_header_and_footer_enabled: Add header and footer to all outgoing emails if enabled.
        :param pulumi.Input[_builtins.str] footer_message: Message in the system footer bar.
        :param pulumi.Input[_builtins.str] header_message: Message in the system header bar.
        :param pulumi.Input[_builtins.str] member_guidelines: Markdown text shown on the group or project member page for users with permission to change members.
        :param pulumi.Input[_builtins.str] message_background_color: Background color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] message_font_color: Font color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] new_project_guidelines: Markdown text shown on the new project page.
        :param pulumi.Input[_builtins.str] profile_image_guidelines: Markdown text shown on the profile page below the Public Avatar.
        :param pulumi.Input[_builtins.str] pwa_description: An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_name: Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_short_name: Short name for Progressive Web App.
        :param pulumi.Input[_builtins.str] title: Application title on the sign-in and sign-up page.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ApplicationAppearanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        Starting in Terraform v1.5.0, you can use an import block to import `gitlab_application_appearance`. For example:

        terraform

        import {

          to = gitlab_application_appearance.example

          id = "see CLI command below for ID"

        }

        Importing using the CLI is supported with the following syntax:

        Gitlab application appearance can be imported with the hard-coded key `gitlab`, for example:

        ```sh
        $ pulumi import gitlab:index/applicationAppearance:ApplicationAppearance example "gitlab"
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationAppearanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationAppearanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 email_header_and_footer_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 footer_message: Optional[pulumi.Input[_builtins.str]] = None,
                 header_message: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_settings_on_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 member_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 message_background_color: Optional[pulumi.Input[_builtins.str]] = None,
                 message_font_color: Optional[pulumi.Input[_builtins.str]] = None,
                 new_project_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_image_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pwa_short_name: Optional[pulumi.Input[_builtins.str]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationAppearanceArgs.__new__(ApplicationAppearanceArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["email_header_and_footer_enabled"] = email_header_and_footer_enabled
            __props__.__dict__["footer_message"] = footer_message
            __props__.__dict__["header_message"] = header_message
            __props__.__dict__["keep_settings_on_destroy"] = keep_settings_on_destroy
            __props__.__dict__["member_guidelines"] = member_guidelines
            __props__.__dict__["message_background_color"] = message_background_color
            __props__.__dict__["message_font_color"] = message_font_color
            __props__.__dict__["new_project_guidelines"] = new_project_guidelines
            __props__.__dict__["profile_image_guidelines"] = profile_image_guidelines
            __props__.__dict__["pwa_description"] = pwa_description
            __props__.__dict__["pwa_name"] = pwa_name
            __props__.__dict__["pwa_short_name"] = pwa_short_name
            __props__.__dict__["title"] = title
        super(ApplicationAppearance, __self__).__init__(
            'gitlab:index/applicationAppearance:ApplicationAppearance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            email_header_and_footer_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            footer_message: Optional[pulumi.Input[_builtins.str]] = None,
            header_message: Optional[pulumi.Input[_builtins.str]] = None,
            keep_settings_on_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
            member_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
            message_background_color: Optional[pulumi.Input[_builtins.str]] = None,
            message_font_color: Optional[pulumi.Input[_builtins.str]] = None,
            new_project_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
            profile_image_guidelines: Optional[pulumi.Input[_builtins.str]] = None,
            pwa_description: Optional[pulumi.Input[_builtins.str]] = None,
            pwa_name: Optional[pulumi.Input[_builtins.str]] = None,
            pwa_short_name: Optional[pulumi.Input[_builtins.str]] = None,
            title: Optional[pulumi.Input[_builtins.str]] = None) -> 'ApplicationAppearance':
        """
        Get an existing ApplicationAppearance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Markdown text shown on the sign-in and sign-up page.
        :param pulumi.Input[_builtins.bool] email_header_and_footer_enabled: Add header and footer to all outgoing emails if enabled.
        :param pulumi.Input[_builtins.str] footer_message: Message in the system footer bar.
        :param pulumi.Input[_builtins.str] header_message: Message in the system header bar.
        :param pulumi.Input[_builtins.str] member_guidelines: Markdown text shown on the group or project member page for users with permission to change members.
        :param pulumi.Input[_builtins.str] message_background_color: Background color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] message_font_color: Font color for the system header or footer bar, in CSS hex notation.
        :param pulumi.Input[_builtins.str] new_project_guidelines: Markdown text shown on the new project page.
        :param pulumi.Input[_builtins.str] profile_image_guidelines: Markdown text shown on the profile page below the Public Avatar.
        :param pulumi.Input[_builtins.str] pwa_description: An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_name: Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        :param pulumi.Input[_builtins.str] pwa_short_name: Short name for Progressive Web App.
        :param pulumi.Input[_builtins.str] title: Application title on the sign-in and sign-up page.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationAppearanceState.__new__(_ApplicationAppearanceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["email_header_and_footer_enabled"] = email_header_and_footer_enabled
        __props__.__dict__["footer_message"] = footer_message
        __props__.__dict__["header_message"] = header_message
        __props__.__dict__["keep_settings_on_destroy"] = keep_settings_on_destroy
        __props__.__dict__["member_guidelines"] = member_guidelines
        __props__.__dict__["message_background_color"] = message_background_color
        __props__.__dict__["message_font_color"] = message_font_color
        __props__.__dict__["new_project_guidelines"] = new_project_guidelines
        __props__.__dict__["profile_image_guidelines"] = profile_image_guidelines
        __props__.__dict__["pwa_description"] = pwa_description
        __props__.__dict__["pwa_name"] = pwa_name
        __props__.__dict__["pwa_short_name"] = pwa_short_name
        __props__.__dict__["title"] = title
        return ApplicationAppearance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Markdown text shown on the sign-in and sign-up page.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="emailHeaderAndFooterEnabled")
    def email_header_and_footer_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Add header and footer to all outgoing emails if enabled.
        """
        return pulumi.get(self, "email_header_and_footer_enabled")

    @_builtins.property
    @pulumi.getter(name="footerMessage")
    def footer_message(self) -> pulumi.Output[_builtins.str]:
        """
        Message in the system footer bar.
        """
        return pulumi.get(self, "footer_message")

    @_builtins.property
    @pulumi.getter(name="headerMessage")
    def header_message(self) -> pulumi.Output[_builtins.str]:
        """
        Message in the system header bar.
        """
        return pulumi.get(self, "header_message")

    @_builtins.property
    @pulumi.getter(name="keepSettingsOnDestroy")
    def keep_settings_on_destroy(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "keep_settings_on_destroy")

    @_builtins.property
    @pulumi.getter(name="memberGuidelines")
    def member_guidelines(self) -> pulumi.Output[_builtins.str]:
        """
        Markdown text shown on the group or project member page for users with permission to change members.
        """
        return pulumi.get(self, "member_guidelines")

    @_builtins.property
    @pulumi.getter(name="messageBackgroundColor")
    def message_background_color(self) -> pulumi.Output[_builtins.str]:
        """
        Background color for the system header or footer bar, in CSS hex notation.
        """
        return pulumi.get(self, "message_background_color")

    @_builtins.property
    @pulumi.getter(name="messageFontColor")
    def message_font_color(self) -> pulumi.Output[_builtins.str]:
        """
        Font color for the system header or footer bar, in CSS hex notation.
        """
        return pulumi.get(self, "message_font_color")

    @_builtins.property
    @pulumi.getter(name="newProjectGuidelines")
    def new_project_guidelines(self) -> pulumi.Output[_builtins.str]:
        """
        Markdown text shown on the new project page.
        """
        return pulumi.get(self, "new_project_guidelines")

    @_builtins.property
    @pulumi.getter(name="profileImageGuidelines")
    def profile_image_guidelines(self) -> pulumi.Output[_builtins.str]:
        """
        Markdown text shown on the profile page below the Public Avatar.
        """
        return pulumi.get(self, "profile_image_guidelines")

    @_builtins.property
    @pulumi.getter(name="pwaDescription")
    def pwa_description(self) -> pulumi.Output[_builtins.str]:
        """
        An explanation of what the Progressive Web App does. Used for the attribute `description` in `manifest.json`.
        """
        return pulumi.get(self, "pwa_description")

    @_builtins.property
    @pulumi.getter(name="pwaName")
    def pwa_name(self) -> pulumi.Output[_builtins.str]:
        """
        Full name of the Progressive Web App. Used for the attribute `name` in `manifest.json`.
        """
        return pulumi.get(self, "pwa_name")

    @_builtins.property
    @pulumi.getter(name="pwaShortName")
    def pwa_short_name(self) -> pulumi.Output[_builtins.str]:
        """
        Short name for Progressive Web App.
        """
        return pulumi.get(self, "pwa_short_name")

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Output[_builtins.str]:
        """
        Application title on the sign-in and sign-up page.
        """
        return pulumi.get(self, "title")

