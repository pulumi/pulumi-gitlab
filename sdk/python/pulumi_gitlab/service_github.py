# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class ServiceGithub(pulumi.CustomResource):
    active: pulumi.Output[bool]
    created_at: pulumi.Output[str]
    project: pulumi.Output[str]
    """
    ID of the project you want to activate integration on.
    """
    repository_url: pulumi.Output[str]
    static_context: pulumi.Output[bool]
    """
    Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more. 
    """
    title: pulumi.Output[str]
    token: pulumi.Output[str]
    """
    A GitHub personal access token with at least `repo:status` scope.
    """
    updated_at: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, project=None, repository_url=None, static_context=None, token=None, __props__=None, __name__=None, __opts__=None):
        """
        **NOTE**: requires either EE (self-hosted) or Silver and above (GitLab.com).

        This resource manages a [GitHub integration](https://docs.gitlab.com/ee/user/project/integrations/github.html) that updates pipeline statuses on a GitHub repo's pull requests.



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project: ID of the project you want to activate integration on.
        :param pulumi.Input[bool] static_context: Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more. 
        :param pulumi.Input[str] token: A GitHub personal access token with at least `repo:status` scope.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if project is None:
                raise TypeError("Missing required property 'project'")
            __props__['project'] = project
            if repository_url is None:
                raise TypeError("Missing required property 'repository_url'")
            __props__['repository_url'] = repository_url
            __props__['static_context'] = static_context
            if token is None:
                raise TypeError("Missing required property 'token'")
            __props__['token'] = token
            __props__['active'] = None
            __props__['created_at'] = None
            __props__['title'] = None
            __props__['updated_at'] = None
        super(ServiceGithub, __self__).__init__(
            'gitlab:index/serviceGithub:ServiceGithub',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, active=None, created_at=None, project=None, repository_url=None, static_context=None, title=None, token=None, updated_at=None):
        """
        Get an existing ServiceGithub resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project: ID of the project you want to activate integration on.
        :param pulumi.Input[bool] static_context: Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more. 
        :param pulumi.Input[str] token: A GitHub personal access token with at least `repo:status` scope.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["active"] = active
        __props__["created_at"] = created_at
        __props__["project"] = project
        __props__["repository_url"] = repository_url
        __props__["static_context"] = static_context
        __props__["title"] = title
        __props__["token"] = token
        __props__["updated_at"] = updated_at
        return ServiceGithub(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

