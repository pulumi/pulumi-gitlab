# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class GroupMembership(pulumi.CustomResource):
    access_level: pulumi.Output[str]
    """
    Acceptable values are: guest, reporter, developer, maintainer, owner.
    """
    expires_at: pulumi.Output[str]
    """
    Expiration date for the group membership. Format: `YYYY-MM-DD`
    """
    group_id: pulumi.Output[str]
    """
    The id of the group.
    """
    user_id: pulumi.Output[float]
    """
    The id of the user.
    """
    def __init__(__self__, resource_name, opts=None, access_level=None, expires_at=None, group_id=None, user_id=None, __props__=None, __name__=None, __opts__=None):
        """
        This resource allows you to add a user to an existing group.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitlab as gitlab

        test = gitlab.GroupMembership("test",
            access_level="guest",
            expires_at="2020-12-31",
            group_id="12345",
            user_id=1337)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_level: Acceptable values are: guest, reporter, developer, maintainer, owner.
        :param pulumi.Input[str] expires_at: Expiration date for the group membership. Format: `YYYY-MM-DD`
        :param pulumi.Input[str] group_id: The id of the group.
        :param pulumi.Input[float] user_id: The id of the user.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if access_level is None:
                raise TypeError("Missing required property 'access_level'")
            __props__['access_level'] = access_level
            __props__['expires_at'] = expires_at
            if group_id is None:
                raise TypeError("Missing required property 'group_id'")
            __props__['group_id'] = group_id
            if user_id is None:
                raise TypeError("Missing required property 'user_id'")
            __props__['user_id'] = user_id
        super(GroupMembership, __self__).__init__(
            'gitlab:index/groupMembership:GroupMembership',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, access_level=None, expires_at=None, group_id=None, user_id=None):
        """
        Get an existing GroupMembership resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_level: Acceptable values are: guest, reporter, developer, maintainer, owner.
        :param pulumi.Input[str] expires_at: Expiration date for the group membership. Format: `YYYY-MM-DD`
        :param pulumi.Input[str] group_id: The id of the group.
        :param pulumi.Input[float] user_id: The id of the user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["access_level"] = access_level
        __props__["expires_at"] = expires_at
        __props__["group_id"] = group_id
        __props__["user_id"] = user_id
        return GroupMembership(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
