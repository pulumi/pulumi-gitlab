{
    "name": "gitlab",
    "description": "A Pulumi package for creating and managing GitLab resources.",
    "keywords": [
        "pulumi",
        "gitlab"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`gitlab` Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab).",
    "repository": "https://github.com/pulumi/pulumi-gitlab",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "baseUrl": {
                "type": "string",
                "description": "This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab\nEnterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from\nthe `GITLAB_BASE_URL` environment variable. The value must end with a slash.\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab\nCE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when\n`client_cert` is set.\n"
            },
            "earlyAuthCheck": {
                "type": "boolean",
                "description": "(Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider\nconfiguration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the\nGitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and\nmay change in the future. Please make sure to always keep backups of your state.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "When set to true this disables SSL verification of the connection to the GitLab instance.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is\nused in this provider for authentication (using Bearer authorization token). See\nhttps://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment\nvariable.\n"
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "gitlab:index/BranchCommit:BranchCommit": {
            "properties": {
                "authorEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authoredDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committedDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shortId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authorEmail",
                        "authorName",
                        "authoredDate",
                        "committedDate",
                        "committerEmail",
                        "committerName",
                        "id",
                        "message",
                        "parentIds",
                        "shortId",
                        "title"
                    ]
                }
            }
        },
        "gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "accessLevelDescription"
                    ]
                }
            }
        },
        "gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "accessLevelDescription"
                    ]
                }
            }
        },
        "gitlab:index/BranchProtectionAllowedToUnprotect:BranchProtectionAllowedToUnprotect": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "accessLevelDescription"
                    ]
                }
            }
        },
        "gitlab:index/ProjectContainerExpirationPolicy:ProjectContainerExpirationPolicy": {
            "properties": {
                "cadence": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepN": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegexDelete": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegexKeep": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextRunAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "olderThan": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cadence",
                        "enabled",
                        "keepN",
                        "nameRegexDelete",
                        "nameRegexKeep",
                        "nextRunAt",
                        "olderThan"
                    ]
                }
            }
        },
        "gitlab:index/ProjectIssueTaskCompletionStatus:ProjectIssueTaskCompletionStatus": {
            "properties": {
                "completedCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "completedCount",
                        "count"
                    ]
                }
            }
        },
        "gitlab:index/ProjectProtectedEnvironmentDeployAccessLevels:ProjectProtectedEnvironmentDeployAccessLevels": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "accessLevelDescription"
                    ]
                }
            }
        },
        "gitlab:index/ProjectPushRules:ProjectPushRules": {
            "properties": {
                "authorEmailRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchNameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitCommitterCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageNegativeRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "denyDeleteTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileNameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFileSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preventSecrets": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rejectUnsignedCommits": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "gitlab:index/ProjectTagCommit:ProjectTagCommit": {
            "properties": {
                "authorEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authoredDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committedDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shortId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authorEmail",
                        "authorName",
                        "authoredDate",
                        "committedDate",
                        "committerEmail",
                        "committerName",
                        "id",
                        "message",
                        "parentIds",
                        "shortId",
                        "title"
                    ]
                }
            }
        },
        "gitlab:index/ProjectTagRelease:ProjectTagRelease": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "tagName"
                    ]
                }
            }
        },
        "gitlab:index/getBranchCommit:getBranchCommit": {
            "properties": {
                "authorEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authoredDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committedDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shortId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authorEmail",
                "authorName",
                "authoredDate",
                "committedDate",
                "committerEmail",
                "committerName",
                "id",
                "message",
                "parentIds",
                "shortId",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getGroupMembershipMember:getGroupMembershipMember": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiresAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "avatarUrl",
                "expiresAt",
                "id",
                "name",
                "state",
                "username",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getInstanceDeployKeysDeployKey:getInstanceDeployKeysDeployKey": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectsWithWriteAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getInstanceDeployKeysDeployKeyProjectsWithWriteAccess:getInstanceDeployKeysDeployKeyProjectsWithWriteAccess"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "fingerprint",
                "id",
                "key",
                "projectsWithWriteAccesses",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getInstanceDeployKeysDeployKeyProjectsWithWriteAccess:getInstanceDeployKeysDeployKeyProjectsWithWriteAccess": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "id",
                "name",
                "nameWithNamespace",
                "path",
                "pathWithNamespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectContainerExpirationPolicy:getProjectContainerExpirationPolicy": {
            "properties": {
                "cadence": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepN": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegexDelete": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegexKeep": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextRunAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "olderThan": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cadence",
                "enabled",
                "keepN",
                "nameRegexDelete",
                "nameRegexKeep",
                "nextRunAt",
                "olderThan"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectIssueTaskCompletionStatus:getProjectIssueTaskCompletionStatus": {
            "properties": {
                "completedCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completedCount",
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectIssuesIssue:getProjectIssuesIssue": {
            "properties": {
                "assigneeIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closedByUserId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "confidential": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "discussionLocked": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "discussionToResolve": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "downvotes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dueDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epicId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epicIssueId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "humanTimeEstimate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "humanTotalTimeSpent": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueLinkId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeRequestToResolveDiscussionsOf": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeRequestsCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "milestoneId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "movedToId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "references": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscribed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskCompletionStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectIssuesIssueTaskCompletionStatus:getProjectIssuesIssueTaskCompletionStatus"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeEstimate": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalTimeSpent": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upvotes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userNotesCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assigneeIds",
                "authorId",
                "closedAt",
                "closedByUserId",
                "confidential",
                "createdAt",
                "description",
                "discussionLocked",
                "discussionToResolve",
                "downvotes",
                "dueDate",
                "epicId",
                "epicIssueId",
                "externalId",
                "humanTimeEstimate",
                "humanTotalTimeSpent",
                "iid",
                "issueId",
                "issueLinkId",
                "issueType",
                "labels",
                "links",
                "mergeRequestToResolveDiscussionsOf",
                "mergeRequestsCount",
                "milestoneId",
                "movedToId",
                "project",
                "references",
                "state",
                "subscribed",
                "taskCompletionStatuses",
                "timeEstimate",
                "title",
                "totalTimeSpent",
                "updatedAt",
                "upvotes",
                "userNotesCount",
                "webUrl",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectIssuesIssueTaskCompletionStatus:getProjectIssuesIssueTaskCompletionStatus": {
            "properties": {
                "completedCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completedCount",
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchMergeAccessLevel:getProjectProtectedBranchMergeAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchPushAccessLevel:getProjectProtectedBranchPushAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchesProtectedBranch:getProjectProtectedBranchesProtectedBranch": {
            "properties": {
                "allowForcePush": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeAccessLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectProtectedBranchesProtectedBranchMergeAccessLevel:getProjectProtectedBranchesProtectedBranchMergeAccessLevel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pushAccessLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectProtectedBranchesProtectedBranchPushAccessLevel:getProjectProtectedBranchesProtectedBranchPushAccessLevel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowForcePush",
                "codeOwnerApprovalRequired",
                "id",
                "mergeAccessLevels",
                "name",
                "pushAccessLevels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchesProtectedBranchMergeAccessLevel:getProjectProtectedBranchesProtectedBranchMergeAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchesProtectedBranchPushAccessLevel:getProjectProtectedBranchesProtectedBranchPushAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectPushRules:getProjectPushRules": {
            "properties": {
                "authorEmailRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchNameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitCommitterCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageNegativeRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "denyDeleteTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileNameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFileSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preventSecrets": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rejectUnsignedCommits": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authorEmailRegex",
                "branchNameRegex",
                "commitCommitterCheck",
                "commitMessageNegativeRegex",
                "commitMessageRegex",
                "denyDeleteTag",
                "fileNameRegex",
                "maxFileSize",
                "memberCheck",
                "preventSecrets",
                "rejectUnsignedCommits"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectTagCommit:getProjectTagCommit": {
            "properties": {
                "authorEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authoredDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committedDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shortId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authorEmail",
                "authorName",
                "authoredDate",
                "committedDate",
                "committerEmail",
                "committerName",
                "id",
                "message",
                "parentIds",
                "shortId",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectTagRelease:getProjectTagRelease": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "tagName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectTagsTag:getProjectTagsTag": {
            "properties": {
                "commits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectTagsTagCommit:getProjectTagsTagCommit"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "releases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectTagsTagRelease:getProjectTagsTagRelease"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commits",
                "message",
                "name",
                "protected",
                "releases",
                "target"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectTagsTagCommit:getProjectTagsTagCommit": {
            "properties": {
                "authorEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authoredDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committedDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "committerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shortId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authorEmail",
                "authorName",
                "authoredDate",
                "committedDate",
                "committerEmail",
                "committerName",
                "id",
                "message",
                "parentIds",
                "shortId",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectTagsTagRelease:getProjectTagsTagRelease": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "tagName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProject:getProjectsProject": {
            "properties": {
                "_links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowMergeOnSkippedPipeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "analyticsAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "archived": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoCancelPendingPipelines": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoDevopsDeployStrategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autocloseReferencedIssues": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildCoverageRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildGitStrategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildTimeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildsAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ciConfigPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ciForwardDeploymentEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerExpirationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectsProjectContainerExpirationPolicy:getProjectsProjectContainerExpirationPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerRegistryAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creatorId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultBranch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalAuthorizationClassificationLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forkedFromProject": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectForkedFromProject:getProjectsProjectForkedFromProject",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forkingAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forksCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpUrlToRepo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "importError": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "importStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuesAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jobsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastActivityAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeCommitTemplate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergePipelinesEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeRequestsAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTrainsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirror": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorUserId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectNamespace:getProjectsProjectNamespace",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openIssuesCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationsAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectOwner:getProjectsProjectOwner",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectPermissions:getProjectsProjectPermissions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicBuilds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readmeUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryStorage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requirementsAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolveOutdatedDiffDiscussions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runnersToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityAndComplianceAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedWithGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectsProjectSharedWithGroup:getProjectsProjectSharedWithGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippetsAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "squashCommitTemplate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUrlToRepo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "starCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statistics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibility": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wikiAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "_links",
                "allowMergeOnSkippedPipeline",
                "analyticsAccessLevel",
                "approvalsBeforeMerge",
                "archived",
                "autoCancelPendingPipelines",
                "autoDevopsDeployStrategy",
                "autoDevopsEnabled",
                "autocloseReferencedIssues",
                "avatarUrl",
                "buildCoverageRegex",
                "buildGitStrategy",
                "buildTimeout",
                "buildsAccessLevel",
                "ciConfigPath",
                "ciForwardDeploymentEnabled",
                "containerExpirationPolicies",
                "containerRegistryAccessLevel",
                "containerRegistryEnabled",
                "createdAt",
                "creatorId",
                "customAttributes",
                "defaultBranch",
                "description",
                "emailsDisabled",
                "externalAuthorizationClassificationLabel",
                "forkedFromProject",
                "forkingAccessLevel",
                "forksCount",
                "httpUrlToRepo",
                "id",
                "importError",
                "importStatus",
                "issuesAccessLevel",
                "issuesEnabled",
                "jobsEnabled",
                "lastActivityAt",
                "lfsEnabled",
                "mergeCommitTemplate",
                "mergeMethod",
                "mergePipelinesEnabled",
                "mergeRequestsAccessLevel",
                "mergeRequestsEnabled",
                "mergeTrainsEnabled",
                "mirror",
                "mirrorOverwritesDivergedBranches",
                "mirrorTriggerBuilds",
                "mirrorUserId",
                "name",
                "nameWithNamespace",
                "namespace",
                "onlyAllowMergeIfAllDiscussionsAreResolved",
                "onlyAllowMergeIfPipelineSucceeds",
                "onlyMirrorProtectedBranches",
                "openIssuesCount",
                "operationsAccessLevel",
                "owner",
                "packagesEnabled",
                "path",
                "pathWithNamespace",
                "permissions",
                "public",
                "publicBuilds",
                "readmeUrl",
                "repositoryAccessLevel",
                "repositoryStorage",
                "requestAccessEnabled",
                "requirementsAccessLevel",
                "resolveOutdatedDiffDiscussions",
                "runnersToken",
                "securityAndComplianceAccessLevel",
                "sharedRunnersEnabled",
                "sharedWithGroups",
                "snippetsAccessLevel",
                "snippetsEnabled",
                "squashCommitTemplate",
                "sshUrlToRepo",
                "starCount",
                "statistics",
                "tagLists",
                "topics",
                "visibility",
                "webUrl",
                "wikiAccessLevel",
                "wikiEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectContainerExpirationPolicy:getProjectsProjectContainerExpirationPolicy": {
            "properties": {
                "cadence": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepN": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegexDelete": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameRegexKeep": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextRunAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "olderThan": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cadence",
                "enabled",
                "keepN",
                "nameRegexDelete",
                "nameRegexKeep",
                "nextRunAt",
                "olderThan"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectForkedFromProject:getProjectsProjectForkedFromProject": {
            "properties": {
                "httpUrlToRepo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "httpUrlToRepo",
                "id",
                "name",
                "nameWithNamespace",
                "path",
                "pathWithNamespace",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectNamespace:getProjectsProjectNamespace": {
            "properties": {
                "fullPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fullPath",
                "id",
                "kind",
                "name",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectOwner:getProjectsProjectOwner": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "websiteUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "id",
                "name",
                "state",
                "username",
                "websiteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectPermissions:getProjectsProjectPermissions": {
            "properties": {
                "groupAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupAccess",
                "projectAccess"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectSharedWithGroup:getProjectsProjectSharedWithGroup": {
            "properties": {
                "groupAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupAccessLevel",
                "groupId",
                "groupName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getUsersUser:getUsersUser": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bio": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canCreateGroup": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canCreateProject": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "colorSchemeId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentSignInAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externUid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "external": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isAdmin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastSignInAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectsLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skype": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "themeId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twitter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twoFactorEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "websiteUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "bio",
                "canCreateGroup",
                "canCreateProject",
                "colorSchemeId",
                "createdAt",
                "currentSignInAt",
                "email",
                "externUid",
                "external",
                "id",
                "isAdmin",
                "lastSignInAt",
                "linkedin",
                "location",
                "name",
                "organization",
                "projectsLimit",
                "provider",
                "skype",
                "state",
                "themeId",
                "twitter",
                "twoFactorEnabled",
                "username",
                "websiteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the gitlab package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "baseUrl": {
                "type": "string",
                "description": "This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab\nEnterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from\nthe `GITLAB_BASE_URL` environment variable. The value must end with a slash.\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab\nCE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when\n`client_cert` is set.\n"
            },
            "earlyAuthCheck": {
                "type": "boolean",
                "description": "(Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider\nconfiguration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the\nGitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and\nmay change in the future. Please make sure to always keep backups of your state.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "When set to true this disables SSL verification of the connection to the GitLab instance.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is\nused in this provider for authentication (using Bearer authorization token). See\nhttps://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment\nvariable.\n"
            }
        },
        "required": [
            "token"
        ],
        "inputProperties": {
            "baseUrl": {
                "type": "string",
                "description": "This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab\nEnterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from\nthe `GITLAB_BASE_URL` environment variable. The value must end with a slash.\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab\nCE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when\n`client_cert` is set.\n"
            },
            "earlyAuthCheck": {
                "type": "boolean",
                "description": "(Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider\nconfiguration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the\nGitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and\nmay change in the future. Please make sure to always keep backups of your state.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "When set to true this disables SSL verification of the connection to the GitLab instance.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is\nused in this provider for authentication (using Bearer authorization token). See\nhttps://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment\nvariable.\n"
            }
        },
        "requiredInputs": [
            "token"
        ]
    },
    "resources": {
        "gitlab:index/branch:Branch": {
            "description": "The `gitlab.Branch` resource allows to manage the lifecycle of a repository branch.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// Create a project for the branch to use\nconst exampleProject = new gitlab.Project(\"exampleProject\", {\n    description: \"An example project\",\n    namespaceId: gitlab_group.example.id,\n});\nconst exampleBranch = new gitlab.Branch(\"exampleBranch\", {\n    ref: \"main\",\n    project: exampleProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\n# Create a project for the branch to use\nexample_project = gitlab.Project(\"exampleProject\",\n    description=\"An example project\",\n    namespace_id=gitlab_group[\"example\"][\"id\"])\nexample_branch = gitlab.Branch(\"exampleBranch\",\n    ref=\"main\",\n    project=example_project.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a project for the branch to use\n        var exampleProject = new GitLab.Project(\"exampleProject\", new GitLab.ProjectArgs\n        {\n            Description = \"An example project\",\n            NamespaceId = gitlab_group.Example.Id,\n        });\n        var exampleBranch = new GitLab.Branch(\"exampleBranch\", new GitLab.BranchArgs\n        {\n            Ref = \"main\",\n            Project = exampleProject.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := gitlab.NewProject(ctx, \"exampleProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"An example project\"),\n\t\t\tNamespaceId: pulumi.Any(gitlab_group.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewBranch(ctx, \"exampleBranch\", \u0026gitlab.BranchArgs{\n\t\t\tRef:     pulumi.String(\"main\"),\n\t\t\tProject: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Gitlab protected branches can be imported with a key composed of `\u003cproject_id\u003e:\u003cbranch_name\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/branch:Branch example \"12345:develop\"\n```\n\n ",
            "properties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Bool, true if you can push to the branch.\n"
                },
                "commits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchCommit:BranchCommit"
                    },
                    "description": "The commit associated with the branch ref.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Bool, true if branch is the default branch for the project.\n"
                },
                "developerCanMerge": {
                    "type": "boolean",
                    "description": "Bool, true if developer level access allows to merge branch.\n"
                },
                "developerCanPush": {
                    "type": "boolean",
                    "description": "Bool, true if developer level access allows git push.\n"
                },
                "merged": {
                    "type": "boolean",
                    "description": "Bool, true if the branch has been merged into it's parent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this branch.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or full path of the project which the branch is created against.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "Bool, true if branch has branch protection.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The ref which the branch is created from.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "The url of the created branch (https).\n"
                }
            },
            "required": [
                "canPush",
                "commits",
                "default",
                "developerCanMerge",
                "developerCanPush",
                "merged",
                "name",
                "project",
                "protected",
                "ref",
                "webUrl"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name for this branch.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or full path of the project which the branch is created against.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The ref which the branch is created from.\n"
                }
            },
            "requiredInputs": [
                "project",
                "ref"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Branch resources.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean",
                        "description": "Bool, true if you can push to the branch.\n"
                    },
                    "commits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/BranchCommit:BranchCommit"
                        },
                        "description": "The commit associated with the branch ref.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Bool, true if branch is the default branch for the project.\n"
                    },
                    "developerCanMerge": {
                        "type": "boolean",
                        "description": "Bool, true if developer level access allows to merge branch.\n"
                    },
                    "developerCanPush": {
                        "type": "boolean",
                        "description": "Bool, true if developer level access allows git push.\n"
                    },
                    "merged": {
                        "type": "boolean",
                        "description": "Bool, true if the branch has been merged into it's parent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this branch.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The ID or full path of the project which the branch is created against.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "Bool, true if branch has branch protection.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The ref which the branch is created from.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "The url of the created branch (https).\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/branchProtection:BranchProtection": {
            "description": "The `gitlab.BranchProtection` resource allows to manage the lifecycle of a protected branch of a repository.\n\n\u003e The `allowed_to_push`, `allowed_to_merge`, `allowed_to_unprotect`, `unprotect_access_level` and `code_owner_approval_required` attributes require a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst branchProtect = new gitlab.BranchProtection(\"branchProtect\", {\n    project: \"12345\",\n    branch: \"BranchProtected\",\n    pushAccessLevel: \"developer\",\n    mergeAccessLevel: \"developer\",\n    unprotectAccessLevel: \"developer\",\n    allowForcePush: true,\n    codeOwnerApprovalRequired: true,\n    allowedToPushes: [\n        {\n            userId: 5,\n        },\n        {\n            userId: 521,\n        },\n    ],\n    allowedToMerges: [\n        {\n            userId: 15,\n        },\n        {\n            userId: 37,\n        },\n    ],\n    allowedToUnprotects: [\n        {\n            userId: 15,\n        },\n        {\n            groupId: 42,\n        },\n    ],\n});\n// Example using dynamic block\nconst main = new gitlab.BranchProtection(\"main\", {\n    project: \"12345\",\n    branch: \"main\",\n    pushAccessLevel: \"maintainer\",\n    mergeAccessLevel: \"maintainer\",\n    unprotectAccessLevel: \"maintainer\",\n    dynamic: [{\n        forEach: [\n            50,\n            55,\n            60,\n        ],\n        content: [{\n            userId: allowed_to_push.value,\n        }],\n    }],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Gitlab protected branches can be imported with a key composed of `\u003cproject_id\u003e:\u003cbranch\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/branchProtection:BranchProtection BranchProtect \"12345:main\"\n```\n\n ",
            "properties": {
                "allowForcePush": {
                    "type": "boolean",
                    "description": "Can be set to true to allow users with push access to force push.\n"
                },
                "allowedToMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "allowedToPushes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "allowedToUnprotects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToUnprotect:BranchProtectionAllowedToUnprotect"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "branchProtectionId": {
                    "type": "integer",
                    "description": "The ID of the branch protection (not the branch name).\n"
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "description": "Can be set to true to require code owner approval before merging.\n"
                },
                "mergeAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "pushAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "unprotectAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to unprotect. Valid values are: `developer`, `maintainer`.\n"
                }
            },
            "required": [
                "branch",
                "branchProtectionId",
                "project"
            ],
            "inputProperties": {
                "allowForcePush": {
                    "type": "boolean",
                    "description": "Can be set to true to allow users with push access to force push.\n"
                },
                "allowedToMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "allowedToPushes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "allowedToUnprotects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToUnprotect:BranchProtectionAllowedToUnprotect"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "description": "Can be set to true to require code owner approval before merging.\n"
                },
                "mergeAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "pushAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "unprotectAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to unprotect. Valid values are: `developer`, `maintainer`.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchProtection resources.\n",
                "properties": {
                    "allowForcePush": {
                        "type": "boolean",
                        "description": "Can be set to true to allow users with push access to force push.\n"
                    },
                    "allowedToMerges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge"
                        },
                        "description": "Defines permissions for action.\n"
                    },
                    "allowedToPushes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush"
                        },
                        "description": "Defines permissions for action.\n"
                    },
                    "allowedToUnprotects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/BranchProtectionAllowedToUnprotect:BranchProtectionAllowedToUnprotect"
                        },
                        "description": "Defines permissions for action.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Name of the branch.\n"
                    },
                    "branchProtectionId": {
                        "type": "integer",
                        "description": "The ID of the branch protection (not the branch name).\n"
                    },
                    "codeOwnerApprovalRequired": {
                        "type": "boolean",
                        "description": "Can be set to true to require code owner approval before merging.\n"
                    },
                    "mergeAccessLevel": {
                        "type": "string",
                        "description": "Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "pushAccessLevel": {
                        "type": "string",
                        "description": "Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.\n"
                    },
                    "unprotectAccessLevel": {
                        "type": "string",
                        "description": "Access levels allowed to unprotect. Valid values are: `developer`, `maintainer`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployKey:DeployKey": {
            "description": "The `gitlab.DeployKey` resource allows to manage the lifecycle of a deploy key.\n\n\u003e To enable an already existing deploy key for another project use the `gitlab_project_deploy_key` resource.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.DeployKey(\"example\", {\n    key: \"ssh-rsa AAAA...\",\n    project: \"example/deploying\",\n    title: \"Example deploy key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.DeployKey(\"example\",\n    key=\"ssh-rsa AAAA...\",\n    project=\"example/deploying\",\n    title=\"Example deploy key\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.DeployKey(\"example\", new GitLab.DeployKeyArgs\n        {\n            Key = \"ssh-rsa AAAA...\",\n            Project = \"example/deploying\",\n            Title = \"Example deploy key\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewDeployKey(ctx, \"example\", \u0026gitlab.DeployKeyArgs{\n\t\t\tKey:     pulumi.String(\"ssh-rsa AAAA...\"),\n\t\t\tProject: pulumi.String(\"example/deploying\"),\n\t\t\tTitle:   pulumi.String(\"Example deploy key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/deployKey:DeployKey test 1:3\n```\n\n ",
            "properties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Allow this deploy key to be used to push changes to the project. Defaults to `false`. **NOTE::** this cannot currently\nbe managed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The public ssh key body.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title to describe the deploy key with.\n"
                }
            },
            "required": [
                "key",
                "project",
                "title"
            ],
            "inputProperties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Allow this deploy key to be used to push changes to the project. Defaults to `false`. **NOTE::** this cannot currently\nbe managed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The public ssh key body.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title to describe the deploy key with.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployKey resources.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean",
                        "description": "Allow this deploy key to be used to push changes to the project. Defaults to `false`. **NOTE::** this cannot currently\nbe managed.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The public ssh key body.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy key to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "A title to describe the deploy key with.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployKeyEnable:DeployKeyEnable": {
            "description": "The `gitlab.DeployKeyEnable` resource allows to enable an already existing deploy key (see `gitlab.DeployKey resource`) for a specific project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#enable-a-deploy-key)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// A repo to host the deployment key\nconst parentProject = new gitlab.Project(\"parentProject\", {});\n// A second repo to use the deployment key from the parent project\nconst fooProject = new gitlab.Project(\"fooProject\", {});\n// Upload a deployment key for the parent repo\nconst parentDeployKey = new gitlab.DeployKey(\"parentDeployKey\", {\n    project: parentProject.id,\n    title: \"Example deploy key\",\n    key: \"ssh-rsa AAAA...\",\n});\n// Enable the deployment key on the second repo\nconst fooDeployKeyEnable = new gitlab.DeployKeyEnable(\"fooDeployKeyEnable\", {\n    project: fooProject.id,\n    keyId: parentDeployKey.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\n# A repo to host the deployment key\nparent_project = gitlab.Project(\"parentProject\")\n# A second repo to use the deployment key from the parent project\nfoo_project = gitlab.Project(\"fooProject\")\n# Upload a deployment key for the parent repo\nparent_deploy_key = gitlab.DeployKey(\"parentDeployKey\",\n    project=parent_project.id,\n    title=\"Example deploy key\",\n    key=\"ssh-rsa AAAA...\")\n# Enable the deployment key on the second repo\nfoo_deploy_key_enable = gitlab.DeployKeyEnable(\"fooDeployKeyEnable\",\n    project=foo_project.id,\n    key_id=parent_deploy_key.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // A repo to host the deployment key\n        var parentProject = new GitLab.Project(\"parentProject\", new GitLab.ProjectArgs\n        {\n        });\n        // A second repo to use the deployment key from the parent project\n        var fooProject = new GitLab.Project(\"fooProject\", new GitLab.ProjectArgs\n        {\n        });\n        // Upload a deployment key for the parent repo\n        var parentDeployKey = new GitLab.DeployKey(\"parentDeployKey\", new GitLab.DeployKeyArgs\n        {\n            Project = parentProject.Id,\n            Title = \"Example deploy key\",\n            Key = \"ssh-rsa AAAA...\",\n        });\n        // Enable the deployment key on the second repo\n        var fooDeployKeyEnable = new GitLab.DeployKeyEnable(\"fooDeployKeyEnable\", new GitLab.DeployKeyEnableArgs\n        {\n            Project = fooProject.Id,\n            KeyId = parentDeployKey.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparentProject, err := gitlab.NewProject(ctx, \"parentProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooProject, err := gitlab.NewProject(ctx, \"fooProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tparentDeployKey, err := gitlab.NewDeployKey(ctx, \"parentDeployKey\", \u0026gitlab.DeployKeyArgs{\n\t\t\tProject: parentProject.ID(),\n\t\t\tTitle:   pulumi.String(\"Example deploy key\"),\n\t\t\tKey:     pulumi.String(\"ssh-rsa AAAA...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewDeployKeyEnable(ctx, \"fooDeployKeyEnable\", \u0026gitlab.DeployKeyEnableArgs{\n\t\t\tProject: fooProject.ID(),\n\t\t\tKeyId:   parentDeployKey.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab enabled deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/deployKeyEnable:DeployKeyEnable example 12345:67890\n```\n\n ",
            "properties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Can deploy key push to the project’s repository.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Deploy key.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The Gitlab key id for the pre-existing deploy key\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Deploy key's title.\n"
                }
            },
            "required": [
                "canPush",
                "key",
                "keyId",
                "project",
                "title"
            ],
            "inputProperties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Can deploy key push to the project’s repository.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Deploy key.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The Gitlab key id for the pre-existing deploy key\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Deploy key's title.\n"
                }
            },
            "requiredInputs": [
                "keyId",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployKeyEnable resources.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean",
                        "description": "Can deploy key push to the project’s repository.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Deploy key.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The Gitlab key id for the pre-existing deploy key\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy key to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Deploy key's title.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployToken:DeployToken": {
            "description": "The `gitlab.DeployToken` resource allows to manage the lifecycle of group and project deploy tokens.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_tokens.html)\n\n\n## Import\n\n# GitLab deploy tokens can be imported using an id made up of `{type}:{type_id}:{deploy_token_id}`, where type is one ofproject, group.\n\n```sh\n $ pulumi import gitlab:index/deployToken:DeployToken group_token group:1:3\n```\n\n\n\n```sh\n $ pulumi import gitlab:index/deployToken:DeployToken project_token project:1:4\n```\n\n # Notethe `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API. ",
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the deploy token to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the deploy token with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy token to.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `read_repository`, `read_registry`, `read_package_registry`, `write_registry`, `write_package_registry`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for\nimported resources.\n"
                },
                "username": {
                    "type": "string",
                    "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                }
            },
            "required": [
                "name",
                "scopes",
                "token",
                "username"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the deploy token to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the deploy token with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy token to.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `read_repository`, `read_registry`, `read_package_registry`, `write_registry`, `write_package_registry`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                }
            },
            "requiredInputs": [
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployToken resources.\n",
                "properties": {
                    "expiresAt": {
                        "type": "string",
                        "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group to add the deploy token to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name to describe the deploy token with.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy token to.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Valid values: `read_repository`, `read_registry`, `read_package_registry`, `write_registry`, `write_package_registry`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for\nimported resources.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/group:Group": {
            "description": "The `gitlab.Group` resource allows to manage the lifecycle of a group.\n\n\u003e On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use this provider nor the API to do this.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst exampleGroup = new gitlab.Group(\"exampleGroup\", {\n    path: \"example\",\n    description: \"An example group\",\n});\n// Create a project in the example group\nconst exampleProject = new gitlab.Project(\"exampleProject\", {\n    description: \"An example project\",\n    namespaceId: exampleGroup.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_group = gitlab.Group(\"exampleGroup\",\n    path=\"example\",\n    description=\"An example group\")\n# Create a project in the example group\nexample_project = gitlab.Project(\"exampleProject\",\n    description=\"An example project\",\n    namespace_id=example_group.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleGroup = new GitLab.Group(\"exampleGroup\", new GitLab.GroupArgs\n        {\n            Path = \"example\",\n            Description = \"An example group\",\n        });\n        // Create a project in the example group\n        var exampleProject = new GitLab.Project(\"exampleProject\", new GitLab.ProjectArgs\n        {\n            Description = \"An example project\",\n            NamespaceId = exampleGroup.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleGroup, err := gitlab.NewGroup(ctx, \"exampleGroup\", \u0026gitlab.GroupArgs{\n\t\t\tPath:        pulumi.String(\"example\"),\n\t\t\tDescription: pulumi.String(\"An example group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProject(ctx, \"exampleProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"An example project\"),\n\t\t\tNamespaceId: exampleGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/group:Group # You can import a group state using `\u003cresource\u003e \u003cid\u003e`. The\n```\n\n # `id` can be whatever the [details of a group][details_of_a_group] api takes for # its `:id` value, so for example\n\n```sh\n $ pulumi import gitlab:index/group:Group example example\n```\n\n ",
            "properties": {
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Default to Auto DevOps pipeline for all projects within this group.\n"
                },
                "defaultBranchProtection": {
                    "type": "integer",
                    "description": "Defaults to 2. See https://docs.gitlab.com/ee/api/groups.html#options-for-default_branch_protection\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the group.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Disable email notifications.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the group.\n"
                },
                "fullPath": {
                    "type": "string",
                    "description": "The full path of the group.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Defaults to true. Enable/disable Large File Storage (LFS) for the projects in this group.\n"
                },
                "mentionsDisabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Disable the capability of a group from getting mentioned.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this group.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Id of the parent group (creates a nested group).\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the group.\n"
                },
                "preventForkingOutsideGroup": {
                    "type": "boolean",
                    "description": "Defaults to false. When enabled, users can not fork projects from this group to external namespaces.\n"
                },
                "projectCreationLevel": {
                    "type": "string",
                    "description": "Defaults to maintainer. Determine if developers can create projects in the group.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Allow users to request member access.\n"
                },
                "requireTwoFactorAuthentication": {
                    "type": "boolean",
                    "description": "Defaults to false. Require all users in this group to setup Two-factor authentication.\n"
                },
                "runnersToken": {
                    "type": "string",
                    "description": "The group level registration token to use during runner setup.\n"
                },
                "shareWithGroupLock": {
                    "type": "boolean",
                    "description": "Defaults to false. Prevent sharing a project with another group within this group.\n"
                },
                "subgroupCreationLevel": {
                    "type": "string",
                    "description": "Defaults to owner. Allowed to create subgroups.\n"
                },
                "twoFactorGracePeriod": {
                    "type": "integer",
                    "description": "Defaults to 48. Time before Two-factor authentication is enforced (in hours).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web URL of the group.\n"
                }
            },
            "required": [
                "fullName",
                "fullPath",
                "name",
                "path",
                "runnersToken",
                "visibilityLevel",
                "webUrl"
            ],
            "inputProperties": {
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Default to Auto DevOps pipeline for all projects within this group.\n"
                },
                "defaultBranchProtection": {
                    "type": "integer",
                    "description": "Defaults to 2. See https://docs.gitlab.com/ee/api/groups.html#options-for-default_branch_protection\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the group.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Disable email notifications.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Defaults to true. Enable/disable Large File Storage (LFS) for the projects in this group.\n"
                },
                "mentionsDisabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Disable the capability of a group from getting mentioned.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this group.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Id of the parent group (creates a nested group).\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the group.\n"
                },
                "preventForkingOutsideGroup": {
                    "type": "boolean",
                    "description": "Defaults to false. When enabled, users can not fork projects from this group to external namespaces.\n"
                },
                "projectCreationLevel": {
                    "type": "string",
                    "description": "Defaults to maintainer. Determine if developers can create projects in the group.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Defaults to false. Allow users to request member access.\n"
                },
                "requireTwoFactorAuthentication": {
                    "type": "boolean",
                    "description": "Defaults to false. Require all users in this group to setup Two-factor authentication.\n"
                },
                "shareWithGroupLock": {
                    "type": "boolean",
                    "description": "Defaults to false. Prevent sharing a project with another group within this group.\n"
                },
                "subgroupCreationLevel": {
                    "type": "string",
                    "description": "Defaults to owner. Allowed to create subgroups.\n"
                },
                "twoFactorGracePeriod": {
                    "type": "integer",
                    "description": "Defaults to 48. Time before Two-factor authentication is enforced (in hours).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                }
            },
            "requiredInputs": [
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "autoDevopsEnabled": {
                        "type": "boolean",
                        "description": "Defaults to false. Default to Auto DevOps pipeline for all projects within this group.\n"
                    },
                    "defaultBranchProtection": {
                        "type": "integer",
                        "description": "Defaults to 2. See https://docs.gitlab.com/ee/api/groups.html#options-for-default_branch_protection\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the group.\n"
                    },
                    "emailsDisabled": {
                        "type": "boolean",
                        "description": "Defaults to false. Disable email notifications.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the group.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Defaults to true. Enable/disable Large File Storage (LFS) for the projects in this group.\n"
                    },
                    "mentionsDisabled": {
                        "type": "boolean",
                        "description": "Defaults to false. Disable the capability of a group from getting mentioned.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this group.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "Id of the parent group (creates a nested group).\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the group.\n"
                    },
                    "preventForkingOutsideGroup": {
                        "type": "boolean",
                        "description": "Defaults to false. When enabled, users can not fork projects from this group to external namespaces.\n"
                    },
                    "projectCreationLevel": {
                        "type": "string",
                        "description": "Defaults to maintainer. Determine if developers can create projects in the group.\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Defaults to false. Allow users to request member access.\n"
                    },
                    "requireTwoFactorAuthentication": {
                        "type": "boolean",
                        "description": "Defaults to false. Require all users in this group to setup Two-factor authentication.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "The group level registration token to use during runner setup.\n"
                    },
                    "shareWithGroupLock": {
                        "type": "boolean",
                        "description": "Defaults to false. Prevent sharing a project with another group within this group.\n"
                    },
                    "subgroupCreationLevel": {
                        "type": "string",
                        "description": "Defaults to owner. Allowed to create subgroups.\n"
                    },
                    "twoFactorGracePeriod": {
                        "type": "integer",
                        "description": "Defaults to 48. Time before Two-factor authentication is enforced (in hours).\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web URL of the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupAccessToken:GroupAccessToken": {
            "description": "The `gitlab_group_access`token resource allows to manage the lifecycle of a group access token.\n\n\u003e Group Access Token were introduced in GitLab 14.7\n\n**Upstream API**: [GitLab REST API](https://docs.gitlab.com/ee/api/group_access_tokens.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst exampleGroupAccessToken = new gitlab.GroupAccessToken(\"exampleGroupAccessToken\", {\n    group: \"25\",\n    expiresAt: \"2020-03-14\",\n    accessLevel: \"developer\",\n    scopes: [\"api\"],\n});\nconst exampleGroupVariable = new gitlab.GroupVariable(\"exampleGroupVariable\", {\n    group: \"25\",\n    key: \"gat\",\n    value: exampleGroupAccessToken.token,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_group_access_token = gitlab.GroupAccessToken(\"exampleGroupAccessToken\",\n    group=\"25\",\n    expires_at=\"2020-03-14\",\n    access_level=\"developer\",\n    scopes=[\"api\"])\nexample_group_variable = gitlab.GroupVariable(\"exampleGroupVariable\",\n    group=\"25\",\n    key=\"gat\",\n    value=example_group_access_token.token)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleGroupAccessToken = new GitLab.GroupAccessToken(\"exampleGroupAccessToken\", new GitLab.GroupAccessTokenArgs\n        {\n            Group = \"25\",\n            ExpiresAt = \"2020-03-14\",\n            AccessLevel = \"developer\",\n            Scopes = \n            {\n                \"api\",\n            },\n        });\n        var exampleGroupVariable = new GitLab.GroupVariable(\"exampleGroupVariable\", new GitLab.GroupVariableArgs\n        {\n            Group = \"25\",\n            Key = \"gat\",\n            Value = exampleGroupAccessToken.Token,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleGroupAccessToken, err := gitlab.NewGroupAccessToken(ctx, \"exampleGroupAccessToken\", \u0026gitlab.GroupAccessTokenArgs{\n\t\t\tGroup:       pulumi.String(\"25\"),\n\t\t\tExpiresAt:   pulumi.String(\"2020-03-14\"),\n\t\t\tAccessLevel: pulumi.String(\"developer\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"api\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewGroupVariable(ctx, \"exampleGroupVariable\", \u0026gitlab.GroupVariableArgs{\n\t\t\tGroup: pulumi.String(\"25\"),\n\t\t\tKey:   pulumi.String(\"gat\"),\n\t\t\tValue: exampleGroupAccessToken.Token,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# A GitLab Group Access Token can be imported using a key composed of `\u003cgroup-id\u003e:\u003ctoken-id\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupAccessToken:GroupAccessToken example \"12345:1\"\n```\n\n # ATTENTIONthe `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API. ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level for the group access token. Valid values are: `guest`, `reporter`, `developer`, `maintainer`.\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "True if the token is active.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Time the token has been created, RFC3339 format.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The token expires at midnight UTC on that date. The date must be in the format YYYY-MM-DD. Default is never.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The ID or path of the group to add the group access token to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group access token.\n"
                },
                "revoked": {
                    "type": "boolean",
                    "description": "True if the token is revoked.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope for the group access token. It determines the actions which can be performed when authenticating with this\ntoken. Valid values are: `api`, `read_api`, `read_registry`, `write_registry`, `read_repository`, `write_repository`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The group access token. This is only populated when creating a new group access token. This attribute is not available\nfor imported resources.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The user id associated to the token.\n"
                }
            },
            "required": [
                "active",
                "createdAt",
                "group",
                "name",
                "revoked",
                "scopes",
                "token",
                "userId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level for the group access token. Valid values are: `guest`, `reporter`, `developer`, `maintainer`.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The token expires at midnight UTC on that date. The date must be in the format YYYY-MM-DD. Default is never.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The ID or path of the group to add the group access token to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group access token.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope for the group access token. It determines the actions which can be performed when authenticating with this\ntoken. Valid values are: `api`, `read_api`, `read_registry`, `write_registry`, `read_repository`, `write_repository`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupAccessToken resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The access level for the group access token. Valid values are: `guest`, `reporter`, `developer`, `maintainer`.\n"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "True if the token is active.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Time the token has been created, RFC3339 format.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The token expires at midnight UTC on that date. The date must be in the format YYYY-MM-DD. Default is never.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The ID or path of the group to add the group access token to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group access token.\n"
                    },
                    "revoked": {
                        "type": "boolean",
                        "description": "True if the token is revoked.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope for the group access token. It determines the actions which can be performed when authenticating with this\ntoken. Valid values are: `api`, `read_api`, `read_registry`, `write_registry`, `read_repository`, `write_repository`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The group access token. This is only populated when creating a new group access token. This attribute is not available\nfor imported resources.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The user id associated to the token.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupBadge:GroupBadge": {
            "description": "The `gitlab.GroupBadge` resource allows to mange the lifecycle of group badges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/user/project/badges.html#group-badges)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Group(\"foo\", {});\nconst example = new gitlab.GroupBadge(\"example\", {\n    group: foo.id,\n    linkUrl: \"https://example.com/badge-123\",\n    imageUrl: \"https://example.com/badge-123.svg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Group(\"foo\")\nexample = gitlab.GroupBadge(\"example\",\n    group=foo.id,\n    link_url=\"https://example.com/badge-123\",\n    image_url=\"https://example.com/badge-123.svg\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Group(\"foo\", new GitLab.GroupArgs\n        {\n        });\n        var example = new GitLab.GroupBadge(\"example\", new GitLab.GroupBadgeArgs\n        {\n            Group = foo.Id,\n            LinkUrl = \"https://example.com/badge-123\",\n            ImageUrl = \"https://example.com/badge-123.svg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewGroup(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewGroupBadge(ctx, \"example\", \u0026gitlab.GroupBadgeArgs{\n\t\t\tGroup:    foo.ID(),\n\t\t\tLinkUrl:  pulumi.String(\"https://example.com/badge-123\"),\n\t\t\tImageUrl: pulumi.String(\"https://example.com/badge-123.svg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group badges can be imported using an id made up of `{group_id}:{badge_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupBadge:GroupBadge foo 1:3\n```\n\n ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the badge to.\n"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on group overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                },
                "renderedImageUrl": {
                    "type": "string",
                    "description": "The image_url argument rendered (in case of use of placeholders).\n"
                },
                "renderedLinkUrl": {
                    "type": "string",
                    "description": "The link_url argument rendered (in case of use of placeholders).\n"
                }
            },
            "required": [
                "group",
                "imageUrl",
                "linkUrl",
                "renderedImageUrl",
                "renderedLinkUrl"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the badge to.\n"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on group overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                }
            },
            "requiredInputs": [
                "group",
                "imageUrl",
                "linkUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupBadge resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The id of the group to add the badge to.\n"
                    },
                    "imageUrl": {
                        "type": "string",
                        "description": "The image url which will be presented on group overview.\n"
                    },
                    "linkUrl": {
                        "type": "string",
                        "description": "The url linked with the badge.\n"
                    },
                    "renderedImageUrl": {
                        "type": "string",
                        "description": "The image_url argument rendered (in case of use of placeholders).\n"
                    },
                    "renderedLinkUrl": {
                        "type": "string",
                        "description": "The link_url argument rendered (in case of use of placeholders).\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupCluster:GroupCluster": {
            "description": "The `gitlab.GroupCluster` resource allows to manage the lifecycle of a group cluster.\n\n\u003e This is deprecated GitLab feature since 14.5\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_clusters.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Group(\"foo\", {path: \"foo-path\"});\nconst bar = new gitlab.GroupCluster(\"bar\", {\n    group: foo.id,\n    domain: \"example.com\",\n    enabled: true,\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesToken: \"some-token\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesAuthorizationType: \"rbac\",\n    environmentScope: \"*\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Group(\"foo\", path=\"foo-path\")\nbar = gitlab.GroupCluster(\"bar\",\n    group=foo.id,\n    domain=\"example.com\",\n    enabled=True,\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_token=\"some-token\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_authorization_type=\"rbac\",\n    environment_scope=\"*\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Group(\"foo\", new GitLab.GroupArgs\n        {\n            Path = \"foo-path\",\n        });\n        var bar = new GitLab.GroupCluster(\"bar\", new GitLab.GroupClusterArgs\n        {\n            Group = foo.Id,\n            Domain = \"example.com\",\n            Enabled = true,\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesToken = \"some-token\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesAuthorizationType = \"rbac\",\n            EnvironmentScope = \"*\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewGroup(ctx, \"foo\", \u0026gitlab.GroupArgs{\n\t\t\tPath: pulumi.String(\"foo-path\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewGroupCluster(ctx, \"bar\", \u0026gitlab.GroupClusterArgs{\n\t\t\tGroup:                       foo.ID(),\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group clusters can be imported using an id made up of `groupid:clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupCluster:GroupCluster bar 123:321\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the cluster to.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string",
                    "description": "Platform type.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Provider type.\n"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "group",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the cluster to.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                }
            },
            "requiredInputs": [
                "group",
                "kubernetesApiUrl",
                "kubernetesToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The id of the group to add the cluster to.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "Platform type.\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupCustomAttribute:GroupCustomAttribute": {
            "description": "The `gitlab.GroupCustomAttribute` resource allows to manage custom attributes for a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst attr = new gitlab.GroupCustomAttribute(\"attr\", {\n    group: 42,\n    key: \"location\",\n    value: \"Greenland\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nattr = gitlab.GroupCustomAttribute(\"attr\",\n    group=42,\n    key=\"location\",\n    value=\"Greenland\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var attr = new GitLab.GroupCustomAttribute(\"attr\", new GitLab.GroupCustomAttributeArgs\n        {\n            Group = 42,\n            Key = \"location\",\n            Value = \"Greenland\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupCustomAttribute(ctx, \"attr\", \u0026gitlab.GroupCustomAttributeArgs{\n\t\t\tGroup: pulumi.Int(42),\n\t\t\tKey:   pulumi.String(\"location\"),\n\t\t\tValue: pulumi.String(\"Greenland\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a group custom attribute using the an id made up of `{group-id}:{key}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupCustomAttribute:GroupCustomAttribute attr 42:location\n```\n\n ",
            "properties": {
                "group": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "required": [
                "group",
                "key",
                "value"
            ],
            "inputProperties": {
                "group": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "requiredInputs": [
                "group",
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupCustomAttribute resources.\n",
                "properties": {
                    "group": {
                        "type": "integer",
                        "description": "The id of the group.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key for the Custom Attribute.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for the Custom Attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupLabel:GroupLabel": {
            "description": "The `gitlab.GroupLabel` resource allows to manage the lifecycle of labels within a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/user/project/labels.html#group-labels)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fixme = new gitlab.GroupLabel(\"fixme\", {\n    color: \"#ffcc00\",\n    description: \"issue with failing tests\",\n    group: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfixme = gitlab.GroupLabel(\"fixme\",\n    color=\"#ffcc00\",\n    description=\"issue with failing tests\",\n    group=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fixme = new GitLab.GroupLabel(\"fixme\", new GitLab.GroupLabelArgs\n        {\n            Color = \"#ffcc00\",\n            Description = \"issue with failing tests\",\n            Group = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupLabel(ctx, \"fixme\", \u0026gitlab.GroupLabelArgs{\n\t\t\tColor:       pulumi.String(\"#ffcc00\"),\n\t\t\tDescription: pulumi.String(\"issue with failing tests\"),\n\t\t\tGroup:       pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Gitlab group labels can be imported using an id made up of `{group_id}:{group_label_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupLabel:GroupLabel example 12345:fixme\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color\nnames](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the label to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                }
            },
            "required": [
                "color",
                "group",
                "name"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color\nnames](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the label to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                }
            },
            "requiredInputs": [
                "color",
                "group"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupLabel resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color\nnames](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the label.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group to add the label to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupLdapLink:GroupLdapLink": {
            "description": "The `gitlab.GroupLdapLink` resource allows to manage the lifecycle of an LDAP integration with a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#ldap-group-links)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupLdapLink(\"test\", {\n    cn: \"testuser\",\n    groupAccess: \"developer\",\n    groupId: \"12345\",\n    ldapProvider: \"ldapmain\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupLdapLink(\"test\",\n    cn=\"testuser\",\n    group_access=\"developer\",\n    group_id=\"12345\",\n    ldap_provider=\"ldapmain\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupLdapLink(\"test\", new GitLab.GroupLdapLinkArgs\n        {\n            Cn = \"testuser\",\n            GroupAccess = \"developer\",\n            GroupId = \"12345\",\n            LdapProvider = \"ldapmain\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupLdapLink(ctx, \"test\", \u0026gitlab.GroupLdapLinkArgs{\n\t\t\tCn:           pulumi.String(\"testuser\"),\n\t\t\tGroupAccess:  pulumi.String(\"developer\"),\n\t\t\tGroupId:      pulumi.String(\"12345\"),\n\t\t\tLdapProvider: pulumi.String(\"ldapmain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group ldap links can be imported using an id made up of `group_id:ldap_provider:cn`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupLdapLink:GroupLdapLink test \"12345:ldapmain:testuser\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `owner`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "cn": {
                    "type": "string",
                    "description": "The CN of the LDAP group to link with.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "If true, then delete and replace an existing LDAP link if one exists.\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the GitLab group.\n"
                },
                "ldapProvider": {
                    "type": "string",
                    "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                }
            },
            "required": [
                "cn",
                "groupId",
                "ldapProvider"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `owner`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "cn": {
                    "type": "string",
                    "description": "The CN of the LDAP group to link with.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "If true, then delete and replace an existing LDAP link if one exists.\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the GitLab group.\n"
                },
                "ldapProvider": {
                    "type": "string",
                    "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                }
            },
            "requiredInputs": [
                "cn",
                "groupId",
                "ldapProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupLdapLink resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `owner`, `master`\n",
                        "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                    },
                    "cn": {
                        "type": "string",
                        "description": "The CN of the LDAP group to link with.\n"
                    },
                    "force": {
                        "type": "boolean",
                        "description": "If true, then delete and replace an existing LDAP link if one exists.\n"
                    },
                    "groupAccess": {
                        "type": "string",
                        "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `owner`, `master`\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the GitLab group.\n"
                    },
                    "ldapProvider": {
                        "type": "string",
                        "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupMembership:GroupMembership": {
            "description": "The `gitlab.GroupMembership` resource allows to manage the lifecycle of a users group membersip.\n\n\u003e If a group should grant membership to another group use the `gitlab.GroupShareGroup` resource instead.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupMembership(\"test\", {\n    accessLevel: \"guest\",\n    expiresAt: \"2020-12-31\",\n    groupId: \"12345\",\n    userId: 1337,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupMembership(\"test\",\n    access_level=\"guest\",\n    expires_at=\"2020-12-31\",\n    group_id=\"12345\",\n    user_id=1337)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupMembership(\"test\", new GitLab.GroupMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ExpiresAt = \"2020-12-31\",\n            GroupId = \"12345\",\n            UserId = 1337,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupMembership(ctx, \"test\", \u0026gitlab.GroupMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tExpiresAt:   pulumi.String(\"2020-12-31\"),\n\t\t\tGroupId:     pulumi.String(\"12345\"),\n\t\t\tUserId:      pulumi.Int(1337),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group membership can be imported using an id made up of `group_id:user_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupMembership:GroupMembership test \"12345:1337\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`,\n`owner`, `master`.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the group.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "required": [
                "accessLevel",
                "groupId",
                "userId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`,\n`owner`, `master`.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the group.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "groupId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`,\n`owner`, `master`.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the group.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupShareGroup:GroupShareGroup": {
            "description": "The `gitlab.GroupShareGroup` resource allows to manage the lifecycle of group shared with another group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#share-groups-with-groups)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupShareGroup(\"test\", {\n    groupId: gitlab_group.foo.id,\n    shareGroupId: gitlab_group.bar.id,\n    groupAccess: \"guest\",\n    expiresAt: \"2099-01-01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupShareGroup(\"test\",\n    group_id=gitlab_group[\"foo\"][\"id\"],\n    share_group_id=gitlab_group[\"bar\"][\"id\"],\n    group_access=\"guest\",\n    expires_at=\"2099-01-01\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupShareGroup(\"test\", new GitLab.GroupShareGroupArgs\n        {\n            GroupId = gitlab_group.Foo.Id,\n            ShareGroupId = gitlab_group.Bar.Id,\n            GroupAccess = \"guest\",\n            ExpiresAt = \"2099-01-01\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupShareGroup(ctx, \"test\", \u0026gitlab.GroupShareGroupArgs{\n\t\t\tGroupId:      pulumi.Any(gitlab_group.Foo.Id),\n\t\t\tShareGroupId: pulumi.Any(gitlab_group.Bar.Id),\n\t\t\tGroupAccess:  pulumi.String(\"guest\"),\n\t\t\tExpiresAt:    pulumi.String(\"2099-01-01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group shares can be imported using an id made up of `mainGroupId:shareGroupId`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupShareGroup:GroupShareGroup test 12345:1337\n```\n\n ",
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`,\n`maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the main group.\n"
                },
                "shareGroupId": {
                    "type": "integer",
                    "description": "The id of an additional group which will be shared with the main group.\n"
                }
            },
            "required": [
                "groupAccess",
                "groupId",
                "shareGroupId"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`,\n`maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the main group.\n"
                },
                "shareGroupId": {
                    "type": "integer",
                    "description": "The id of an additional group which will be shared with the main group.\n"
                }
            },
            "requiredInputs": [
                "groupAccess",
                "groupId",
                "shareGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupShareGroup resources.\n",
                "properties": {
                    "expiresAt": {
                        "type": "string",
                        "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                    },
                    "groupAccess": {
                        "type": "string",
                        "description": "The access level to grant the group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`,\n`maintainer`, `owner`, `master`\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the main group.\n"
                    },
                    "shareGroupId": {
                        "type": "integer",
                        "description": "The id of an additional group which will be shared with the main group.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupVariable:GroupVariable": {
            "description": "The `gitlab.GroupVariable` resource allows to manage the lifecycle of a CI/CD variable for a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.GroupVariable(\"example\", {\n    environmentScope: \"*\",\n    group: \"12345\",\n    key: \"group_variable_key\",\n    masked: false,\n    protected: false,\n    value: \"group_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.GroupVariable(\"example\",\n    environment_scope=\"*\",\n    group=\"12345\",\n    key=\"group_variable_key\",\n    masked=False,\n    protected=False,\n    value=\"group_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.GroupVariable(\"example\", new GitLab.GroupVariableArgs\n        {\n            EnvironmentScope = \"*\",\n            Group = \"12345\",\n            Key = \"group_variable_key\",\n            Masked = false,\n            Protected = false,\n            Value = \"group_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupVariable(ctx, \"example\", \u0026gitlab.GroupVariableArgs{\n\t\t\tEnvironmentScope: pulumi.String(\"*\"),\n\t\t\tGroup:            pulumi.String(\"12345\"),\n\t\t\tKey:              pulumi.String(\"group_variable_key\"),\n\t\t\tMasked:           pulumi.Bool(false),\n\t\t\tProtected:        pulumi.Bool(false),\n\t\t\tValue:            pulumi.String(\"group_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group variables can be imported using an id made up of `groupid:variablename:scope`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupVariable:GroupVariable example 12345:group_variable_key:*\n```\n\n ",
            "properties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab,\nvalues other than `*` will cause inconsistent plans. See\nhttps://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-group\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking\nrequirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "group",
                "key",
                "value"
            ],
            "inputProperties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab,\nvalues other than `*` will cause inconsistent plans. See\nhttps://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-group\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking\nrequirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "group",
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupVariable resources.\n",
                "properties": {
                    "environmentScope": {
                        "type": "string",
                        "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab,\nvalues other than `*` will cause inconsistent plans. See\nhttps://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-group\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking\nrequirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/instanceCluster:InstanceCluster": {
            "description": "The `gitlab.InstanceCluster` resource allows to manage the lifecycle of an instance cluster.\n\n\u003e This is deprecated GitLab feature since 14.5\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_clusters.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst bar = new gitlab.InstanceCluster(\"bar\", {\n    domain: \"example.com\",\n    enabled: true,\n    environmentScope: \"*\",\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesAuthorizationType: \"rbac\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesNamespace: \"namespace\",\n    kubernetesToken: \"some-token\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nbar = gitlab.InstanceCluster(\"bar\",\n    domain=\"example.com\",\n    enabled=True,\n    environment_scope=\"*\",\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_authorization_type=\"rbac\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_namespace=\"namespace\",\n    kubernetes_token=\"some-token\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bar = new GitLab.InstanceCluster(\"bar\", new GitLab.InstanceClusterArgs\n        {\n            Domain = \"example.com\",\n            Enabled = true,\n            EnvironmentScope = \"*\",\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesAuthorizationType = \"rbac\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesNamespace = \"namespace\",\n            KubernetesToken = \"some-token\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewInstanceCluster(ctx, \"bar\", \u0026gitlab.InstanceClusterArgs{\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesNamespace:         pulumi.String(\"namespace\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab instance clusters can be imported using a `clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/instanceCluster:InstanceCluster bar 123\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the instance.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string",
                    "description": "Platform type.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Provider type.\n"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the instance.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                }
            },
            "requiredInputs": [
                "kubernetesApiUrl",
                "kubernetesToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesNamespace": {
                        "type": "string",
                        "description": "The unique namespace related to the instance.\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "Platform type.\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/instanceVariable:InstanceVariable": {
            "description": "The `gitlab.InstanceVariable` resource allows to manage the lifecycle of a CI/CD variable for an instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_variables.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.InstanceVariable(\"example\", {\n    key: \"instance_variable_key\",\n    masked: false,\n    protected: false,\n    value: \"instance_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.InstanceVariable(\"example\",\n    key=\"instance_variable_key\",\n    masked=False,\n    protected=False,\n    value=\"instance_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.InstanceVariable(\"example\", new GitLab.InstanceVariableArgs\n        {\n            Key = \"instance_variable_key\",\n            Masked = false,\n            Protected = false,\n            Value = \"instance_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewInstanceVariable(ctx, \"example\", \u0026gitlab.InstanceVariableArgs{\n\t\t\tKey:       pulumi.String(\"instance_variable_key\"),\n\t\t\tMasked:    pulumi.Bool(false),\n\t\t\tProtected: pulumi.Bool(false),\n\t\t\tValue:     pulumi.String(\"instance_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab instance variables can be imported using an id made up of `variablename`, e.g.\n\n```sh\n $ pulumi import gitlab:index/instanceVariable:InstanceVariable example instance_variable_key\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking\nrequirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking\nrequirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking\nrequirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/label:Label": {
            "description": "The `gitlab.Label` resource allows to manage the lifecycle of a project label.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/labels.html#project-labels)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fixme = new gitlab.Label(\"fixme\", {\n    project: \"example\",\n    description: \"issue with failing tests\",\n    color: \"#ffcc00\",\n});\n// Scoped label\nconst devopsCreate = new gitlab.Label(\"devopsCreate\", {\n    project: gitlab_project.example.id,\n    description: \"issue for creating infrastructure resources\",\n    color: \"#ffa500\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfixme = gitlab.Label(\"fixme\",\n    project=\"example\",\n    description=\"issue with failing tests\",\n    color=\"#ffcc00\")\n# Scoped label\ndevops_create = gitlab.Label(\"devopsCreate\",\n    project=gitlab_project[\"example\"][\"id\"],\n    description=\"issue for creating infrastructure resources\",\n    color=\"#ffa500\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fixme = new GitLab.Label(\"fixme\", new GitLab.LabelArgs\n        {\n            Project = \"example\",\n            Description = \"issue with failing tests\",\n            Color = \"#ffcc00\",\n        });\n        // Scoped label\n        var devopsCreate = new GitLab.Label(\"devopsCreate\", new GitLab.LabelArgs\n        {\n            Project = gitlab_project.Example.Id,\n            Description = \"issue for creating infrastructure resources\",\n            Color = \"#ffa500\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewLabel(ctx, \"fixme\", \u0026gitlab.LabelArgs{\n\t\t\tProject:     pulumi.String(\"example\"),\n\t\t\tDescription: pulumi.String(\"issue with failing tests\"),\n\t\t\tColor:       pulumi.String(\"#ffcc00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewLabel(ctx, \"devopsCreate\", \u0026gitlab.LabelArgs{\n\t\t\tProject:     pulumi.Any(gitlab_project.Example.Id),\n\t\t\tDescription: pulumi.String(\"issue for creating infrastructure resources\"),\n\t\t\tColor:       pulumi.String(\"#ffa500\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Gitlab labels can be imported using an id made up of `{project_id}:{group_label_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/label:Label example 12345:fixme\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color\nnames](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the label to.\n"
                }
            },
            "required": [
                "color",
                "name",
                "project"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color\nnames](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the label to.\n"
                }
            },
            "requiredInputs": [
                "color",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Label resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color\nnames](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the label.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the label to.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/managedLicense:ManagedLicense": {
            "description": "The `gitlab.ManagedLicense` resource allows to manage the lifecycle of a managed license.\n\n\u003e This resource requires a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/managed_licenses.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {\n    description: \"Lorem Ipsum\",\n    visibilityLevel: \"public\",\n});\nconst mit = new gitlab.ManagedLicense(\"mit\", {\n    project: foo.id,\n    approvalStatus: \"allowed\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\",\n    description=\"Lorem Ipsum\",\n    visibility_level=\"public\")\nmit = gitlab.ManagedLicense(\"mit\",\n    project=foo.id,\n    approval_status=\"allowed\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n            Description = \"Lorem Ipsum\",\n            VisibilityLevel = \"public\",\n        });\n        var mit = new GitLab.ManagedLicense(\"mit\", new GitLab.ManagedLicenseArgs\n        {\n            Project = foo.Id,\n            ApprovalStatus = \"allowed\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"Lorem Ipsum\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewManagedLicense(ctx, \"mit\", \u0026gitlab.ManagedLicenseArgs{\n\t\t\tProject:        foo.ID(),\n\t\t\tApprovalStatus: pulumi.String(\"allowed\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import this resource with an id made up of `{project-id}:{license-id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/managedLicense:ManagedLicense foo 1:2\n```\n\n ",
            "properties": {
                "approvalStatus": {
                    "type": "string",
                    "description": "The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. \"approved\" and\n\"blacklisted\" have been deprecated in favor of \"allowed\" and \"denied\"; use \"allowed\" and \"denied\" for GitLab versions\n15.0 and higher. Prior to version 15.0 and after 14.6, the values are equivalent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID of the project under which the managed license will be created.\n"
                }
            },
            "required": [
                "approvalStatus",
                "name",
                "project"
            ],
            "inputProperties": {
                "approvalStatus": {
                    "type": "string",
                    "description": "The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. \"approved\" and\n\"blacklisted\" have been deprecated in favor of \"allowed\" and \"denied\"; use \"allowed\" and \"denied\" for GitLab versions\n15.0 and higher. Prior to version 15.0 and after 14.6, the values are equivalent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID of the project under which the managed license will be created.\n"
                }
            },
            "requiredInputs": [
                "approvalStatus",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedLicense resources.\n",
                "properties": {
                    "approvalStatus": {
                        "type": "string",
                        "description": "The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. \"approved\" and\n\"blacklisted\" have been deprecated in favor of \"allowed\" and \"denied\"; use \"allowed\" and \"denied\" for GitLab versions\n15.0 and higher. Prior to version 15.0 and after 14.6, the values are equivalent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The ID of the project under which the managed license will be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineSchedule:PipelineSchedule": {
            "description": "The `gitlab.PipelineSchedule` resource allows to manage the lifecycle of a scheduled pipeline.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_schedules.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.PipelineSchedule(\"example\", {\n    cron: \"0 1 * * *\",\n    description: \"Used to schedule builds\",\n    project: \"12345\",\n    ref: \"master\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.PipelineSchedule(\"example\",\n    cron=\"0 1 * * *\",\n    description=\"Used to schedule builds\",\n    project=\"12345\",\n    ref=\"master\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.PipelineSchedule(\"example\", new GitLab.PipelineScheduleArgs\n        {\n            Cron = \"0 1 * * *\",\n            Description = \"Used to schedule builds\",\n            Project = \"12345\",\n            Ref = \"master\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineSchedule(ctx, \"example\", \u0026gitlab.PipelineScheduleArgs{\n\t\t\tCron:        pulumi.String(\"0 1 * * *\"),\n\t\t\tDescription: pulumi.String(\"Used to schedule builds\"),\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t\tRef:         pulumi.String(\"master\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab pipeline schedules can be imported using an id made up of `{project_id}:{pipeline_schedule_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/pipelineSchedule:PipelineSchedule test 1:3\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                },
                "cron": {
                    "type": "string",
                    "description": "The cron (e.g. `0 1 * * *`).\n"
                },
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the schedule to.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch/tag name to be triggered.\n"
                }
            },
            "required": [
                "cron",
                "description",
                "project",
                "ref"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                },
                "cron": {
                    "type": "string",
                    "description": "The cron (e.g. `0 1 * * *`).\n"
                },
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the schedule to.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch/tag name to be triggered.\n"
                }
            },
            "requiredInputs": [
                "cron",
                "description",
                "project",
                "ref"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineSchedule resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                    },
                    "cron": {
                        "type": "string",
                        "description": "The cron (e.g. `0 1 * * *`).\n"
                    },
                    "cronTimezone": {
                        "type": "string",
                        "description": "The timezone.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the pipeline schedule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the schedule to.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The branch/tag name to be triggered.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineScheduleVariable:PipelineScheduleVariable": {
            "description": "The `gitlab.PipelineScheduleVariable` resource allows to manage the lifecycle of a variable for a pipeline schedule.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_schedules.html#pipeline-schedule-variables)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst examplePipelineSchedule = new gitlab.PipelineSchedule(\"examplePipelineSchedule\", {\n    project: \"12345\",\n    description: \"Used to schedule builds\",\n    ref: \"master\",\n    cron: \"0 1 * * *\",\n});\nconst examplePipelineScheduleVariable = new gitlab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\", {\n    project: gitlab_pipeline_schedule.project,\n    pipelineScheduleId: gitlab_pipeline_schedule.id,\n    key: \"EXAMPLE_KEY\",\n    value: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_pipeline_schedule = gitlab.PipelineSchedule(\"examplePipelineSchedule\",\n    project=\"12345\",\n    description=\"Used to schedule builds\",\n    ref=\"master\",\n    cron=\"0 1 * * *\")\nexample_pipeline_schedule_variable = gitlab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\",\n    project=gitlab_pipeline_schedule[\"project\"],\n    pipeline_schedule_id=gitlab_pipeline_schedule[\"id\"],\n    key=\"EXAMPLE_KEY\",\n    value=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var examplePipelineSchedule = new GitLab.PipelineSchedule(\"examplePipelineSchedule\", new GitLab.PipelineScheduleArgs\n        {\n            Project = \"12345\",\n            Description = \"Used to schedule builds\",\n            Ref = \"master\",\n            Cron = \"0 1 * * *\",\n        });\n        var examplePipelineScheduleVariable = new GitLab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\", new GitLab.PipelineScheduleVariableArgs\n        {\n            Project = gitlab_pipeline_schedule.Project,\n            PipelineScheduleId = gitlab_pipeline_schedule.Id,\n            Key = \"EXAMPLE_KEY\",\n            Value = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineSchedule(ctx, \"examplePipelineSchedule\", \u0026gitlab.PipelineScheduleArgs{\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t\tDescription: pulumi.String(\"Used to schedule builds\"),\n\t\t\tRef:         pulumi.String(\"master\"),\n\t\t\tCron:        pulumi.String(\"0 1 * * *\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewPipelineScheduleVariable(ctx, \"examplePipelineScheduleVariable\", \u0026gitlab.PipelineScheduleVariableArgs{\n\t\t\tProject:            pulumi.Any(gitlab_pipeline_schedule.Project),\n\t\t\tPipelineScheduleId: pulumi.Any(gitlab_pipeline_schedule.Id),\n\t\t\tKey:                pulumi.String(\"EXAMPLE_KEY\"),\n\t\t\tValue:              pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Pipeline schedule variables can be imported using an id made up of `project_id:pipeline_schedule_id:key`, e.g.\n\n```sh\n $ pulumi import gitlab:index/pipelineScheduleVariable:PipelineScheduleVariable example 123456789:13:mykey\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the variable.\n"
                },
                "pipelineScheduleId": {
                    "type": "integer",
                    "description": "The id of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "required": [
                "key",
                "pipelineScheduleId",
                "project",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of the variable.\n"
                },
                "pipelineScheduleId": {
                    "type": "integer",
                    "description": "The id of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "requiredInputs": [
                "key",
                "pipelineScheduleId",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineScheduleVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of the variable.\n"
                    },
                    "pipelineScheduleId": {
                        "type": "integer",
                        "description": "The id of the pipeline schedule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the schedule to.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the variable.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineTrigger:PipelineTrigger": {
            "description": "The `gitlab.PipelineTrigger` resource allows to manage the lifecycle of a pipeline trigger.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_triggers.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.PipelineTrigger(\"example\", {\n    description: \"Used to trigger builds\",\n    project: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.PipelineTrigger(\"example\",\n    description=\"Used to trigger builds\",\n    project=\"12345\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.PipelineTrigger(\"example\", new GitLab.PipelineTriggerArgs\n        {\n            Description = \"Used to trigger builds\",\n            Project = \"12345\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineTrigger(ctx, \"example\", \u0026gitlab.PipelineTriggerArgs{\n\t\t\tDescription: pulumi.String(\"Used to trigger builds\"),\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab pipeline triggers can be imported using an id made up of `{project_id}:{pipeline_trigger_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/pipelineTrigger:PipelineTrigger test 1:3\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline trigger.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The pipeline trigger token.\n"
                }
            },
            "required": [
                "description",
                "project",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline trigger.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the trigger to.\n"
                }
            },
            "requiredInputs": [
                "description",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineTrigger resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the pipeline trigger.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the trigger to.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The pipeline trigger token.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/project:Project": {
            "description": "The `gitlab.Project` resource allows to manage the lifecycle of a project.\n\nA project can either be created in a group or user namespace.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/projects.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.Project(\"example\", {\n    description: \"My awesome codebase\",\n    visibilityLevel: \"public\",\n});\n// Project with custom push rules\nconst example_two = new gitlab.Project(\"example-two\", {\n    pushRules: {\n        authorEmailRegex: \"@example\\\\.com$\",\n        commitCommitterCheck: true,\n        memberCheck: true,\n        preventSecrets: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.Project(\"example\",\n    description=\"My awesome codebase\",\n    visibility_level=\"public\")\n# Project with custom push rules\nexample_two = gitlab.Project(\"example-two\", push_rules=gitlab.ProjectPushRulesArgs(\n    author_email_regex=\"@example\\\\.com$\",\n    commit_committer_check=True,\n    member_check=True,\n    prevent_secrets=True,\n))\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.Project(\"example\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome codebase\",\n            VisibilityLevel = \"public\",\n        });\n        // Project with custom push rules\n        var example_two = new GitLab.Project(\"example-two\", new GitLab.ProjectArgs\n        {\n            PushRules = new GitLab.Inputs.ProjectPushRulesArgs\n            {\n                AuthorEmailRegex = \"@example\\\\.com$\",\n                CommitCommitterCheck = true,\n                MemberCheck = true,\n                PreventSecrets = true,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProject(ctx, \"example\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome codebase\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProject(ctx, \"example-two\", \u0026gitlab.ProjectArgs{\n\t\t\tPushRules: \u0026ProjectPushRulesArgs{\n\t\t\t\tAuthorEmailRegex:     pulumi.String(fmt.Sprintf(\"%v%v\", \"@example\\\\.com\", \"$\")),\n\t\t\t\tCommitCommitterCheck: pulumi.Bool(true),\n\t\t\t\tMemberCheck:          pulumi.Bool(true),\n\t\t\t\tPreventSecrets:       pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/project:Project # You can import a project state using `\u003cresource\u003e \u003cid\u003e`. The\n```\n\n # `id` can be whatever the [get single project api][get_single_project] takes for # its `:id` value, so for example\n\n```sh\n $ pulumi import gitlab:index/project:Project example richardc/example\n```\n\n ",
            "properties": {
                "allowMergeOnSkippedPipeline": {
                    "type": "boolean",
                    "description": "Set to true if you want to treat skipped pipelines as if they finished with success.\n"
                },
                "analyticsAccessLevel": {
                    "type": "string",
                    "description": "Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "description": "Number of merge request approvals required for merging. Default is 0.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`\noperation.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                },
                "autoCancelPendingPipelines": {
                    "type": "string",
                    "description": "Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.\n"
                },
                "autoDevopsDeployStrategy": {
                    "type": "string",
                    "description": "Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.\n"
                },
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Enable Auto DevOps for this project.\n"
                },
                "autocloseReferencedIssues": {
                    "type": "boolean",
                    "description": "Set whether auto-closing referenced issues on default branch.\n"
                },
                "buildCoverageRegex": {
                    "type": "string",
                    "description": "Test coverage parsing for the project.\n"
                },
                "buildGitStrategy": {
                    "type": "string",
                    "description": "The Git strategy. Defaults to fetch.\n"
                },
                "buildTimeout": {
                    "type": "integer",
                    "description": "The maximum amount of time, in seconds, that a job can run.\n"
                },
                "buildsAccessLevel": {
                    "type": "string",
                    "description": "Set the builds access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "ciConfigPath": {
                    "type": "string",
                    "description": "Custom Path to CI config file.\n"
                },
                "ciForwardDeploymentEnabled": {
                    "type": "boolean",
                    "description": "When a new deployment job starts, skip older deployment jobs that are still pending.\n"
                },
                "containerExpirationPolicy": {
                    "$ref": "#/types/gitlab:index/ProjectContainerExpirationPolicy:ProjectContainerExpirationPolicy",
                    "description": "Set the image cleanup policy for this project. **Note**: this field is sometimes named\n`container_expiration_policy_attributes` in the GitLab Upstream API.\n"
                },
                "containerRegistryAccessLevel": {
                    "type": "string",
                    "description": "Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "description": "Enable container registry for the project.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the project.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Disable email notifications.\n"
                },
                "externalAuthorizationClassificationLabel": {
                    "type": "string",
                    "description": "The classification label for the project.\n"
                },
                "forkingAccessLevel": {
                    "type": "string",
                    "description": "Set the forking access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "groupWithProjectTemplatesId": {
                    "type": "integer",
                    "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave\nempty for instance-level templates. Requires use_custom_template to be true (enterprise edition).\n"
                },
                "httpUrlToRepo": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the\n"
                },
                "importUrl": {
                    "type": "string",
                    "description": "Git URL to a repository to be imported.\n"
                },
                "initializeWithReadme": {
                    "type": "boolean",
                    "description": "Create main branch with first commit containing a README.md file.\n"
                },
                "issuesAccessLevel": {
                    "type": "string",
                    "description": "Set the issues access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "description": "Enable issue tracking for the project.\n"
                },
                "issuesTemplate": {
                    "type": "string",
                    "description": "Sets the template for new issues in the project.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Enable LFS for the project.\n"
                },
                "mergeCommitTemplate": {
                    "type": "string",
                    "description": "Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)\n"
                },
                "mergeMethod": {
                    "type": "string",
                    "description": "Set to `ff` to create fast-forward merges\n"
                },
                "mergePipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable merge pipelines.\n"
                },
                "mergeRequestsAccessLevel": {
                    "type": "string",
                    "description": "Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "description": "Enable merge requests for the project.\n"
                },
                "mergeRequestsTemplate": {
                    "type": "string",
                    "description": "Sets the template for new merge requests in the project.\n"
                },
                "mergeTrainsEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.\n"
                },
                "mirror": {
                    "type": "boolean",
                    "description": "Enable project pull mirror.\n"
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "description": "Enable overwrite diverged branches for a mirrored project.\n"
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "description": "Enable trigger builds on pushes for a mirrored project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "namespaceId": {
                    "type": "integer",
                    "description": "The namespace (group or user) of the project. Defaults to your user.\n"
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "description": "Enable only mirror protected branches for a mirrored project.\n"
                },
                "operationsAccessLevel": {
                    "type": "string",
                    "description": "Set the operations access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "description": "Enable packages repository for the project.\n"
                },
                "pagesAccessLevel": {
                    "type": "string",
                    "description": "Enable pages access control\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the repository.\n"
                },
                "pathWithNamespace": {
                    "type": "string",
                    "description": "The path of the repository with namespace.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable pipelines for the project.\n"
                },
                "printingMergeRequestLinkEnabled": {
                    "type": "boolean",
                    "description": "Show link to create/view merge request when pushing from the command line\n"
                },
                "publicBuilds": {
                    "type": "boolean",
                    "description": "If true, jobs can be viewed by non-project members.\n"
                },
                "pushRules": {
                    "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                    "description": "Push rules for the project.\n"
                },
                "removeSourceBranchAfterMerge": {
                    "type": "boolean",
                    "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                },
                "repositoryAccessLevel": {
                    "type": "string",
                    "description": "Set the repository access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "repositoryStorage": {
                    "type": "string",
                    "description": "Which storage shard the repository is on. (administrator only)\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Allow users to request member access.\n"
                },
                "requirementsAccessLevel": {
                    "type": "string",
                    "description": "Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "resolveOutdatedDiffDiscussions": {
                    "type": "boolean",
                    "description": "Automatically resolve merge request diffs discussions on lines changed with a push.\n"
                },
                "runnersToken": {
                    "type": "string",
                    "description": "Registration token to use during runner setup.\n"
                },
                "securityAndComplianceAccessLevel": {
                    "type": "string",
                    "description": "Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "description": "Enable shared runners for this project.\n"
                },
                "snippetsAccessLevel": {
                    "type": "string",
                    "description": "Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "description": "Enable snippets for the project.\n"
                },
                "squashCommitTemplate": {
                    "type": "string",
                    "description": "Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)\n"
                },
                "squashOption": {
                    "type": "string",
                    "description": "Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value\nis `default_off`. [GitLab \u003e= 14.1]\n"
                },
                "sshUrlToRepo": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of\na custom project template. This option is mutually exclusive with `template_project_id`.\n"
                },
                "templateProjectId": {
                    "type": "integer",
                    "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name\nsince template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of topics for the project.\n"
                },
                "useCustomTemplate": {
                    "type": "boolean",
                    "description": "Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "Set to `public` to create a public project.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "URL that can be used to find the project in a browser.\n"
                },
                "wikiAccessLevel": {
                    "type": "string",
                    "description": "Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "description": "Enable wiki for the project.\n"
                }
            },
            "required": [
                "analyticsAccessLevel",
                "autoCancelPendingPipelines",
                "autoDevopsDeployStrategy",
                "autoDevopsEnabled",
                "autocloseReferencedIssues",
                "buildGitStrategy",
                "buildTimeout",
                "buildsAccessLevel",
                "containerExpirationPolicy",
                "containerRegistryAccessLevel",
                "defaultBranch",
                "forkingAccessLevel",
                "httpUrlToRepo",
                "issuesAccessLevel",
                "mergeRequestsAccessLevel",
                "name",
                "namespaceId",
                "operationsAccessLevel",
                "pathWithNamespace",
                "pushRules",
                "repositoryAccessLevel",
                "repositoryStorage",
                "requirementsAccessLevel",
                "runnersToken",
                "securityAndComplianceAccessLevel",
                "sharedRunnersEnabled",
                "snippetsAccessLevel",
                "sshUrlToRepo",
                "tags",
                "topics",
                "webUrl",
                "wikiAccessLevel"
            ],
            "inputProperties": {
                "allowMergeOnSkippedPipeline": {
                    "type": "boolean",
                    "description": "Set to true if you want to treat skipped pipelines as if they finished with success.\n"
                },
                "analyticsAccessLevel": {
                    "type": "string",
                    "description": "Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "description": "Number of merge request approvals required for merging. Default is 0.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`\noperation.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                },
                "autoCancelPendingPipelines": {
                    "type": "string",
                    "description": "Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.\n"
                },
                "autoDevopsDeployStrategy": {
                    "type": "string",
                    "description": "Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.\n"
                },
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Enable Auto DevOps for this project.\n"
                },
                "autocloseReferencedIssues": {
                    "type": "boolean",
                    "description": "Set whether auto-closing referenced issues on default branch.\n"
                },
                "buildCoverageRegex": {
                    "type": "string",
                    "description": "Test coverage parsing for the project.\n"
                },
                "buildGitStrategy": {
                    "type": "string",
                    "description": "The Git strategy. Defaults to fetch.\n"
                },
                "buildTimeout": {
                    "type": "integer",
                    "description": "The maximum amount of time, in seconds, that a job can run.\n"
                },
                "buildsAccessLevel": {
                    "type": "string",
                    "description": "Set the builds access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "ciConfigPath": {
                    "type": "string",
                    "description": "Custom Path to CI config file.\n"
                },
                "ciForwardDeploymentEnabled": {
                    "type": "boolean",
                    "description": "When a new deployment job starts, skip older deployment jobs that are still pending.\n"
                },
                "containerExpirationPolicy": {
                    "$ref": "#/types/gitlab:index/ProjectContainerExpirationPolicy:ProjectContainerExpirationPolicy",
                    "description": "Set the image cleanup policy for this project. **Note**: this field is sometimes named\n`container_expiration_policy_attributes` in the GitLab Upstream API.\n"
                },
                "containerRegistryAccessLevel": {
                    "type": "string",
                    "description": "Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "description": "Enable container registry for the project.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the project.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Disable email notifications.\n"
                },
                "externalAuthorizationClassificationLabel": {
                    "type": "string",
                    "description": "The classification label for the project.\n"
                },
                "forkingAccessLevel": {
                    "type": "string",
                    "description": "Set the forking access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "groupWithProjectTemplatesId": {
                    "type": "integer",
                    "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave\nempty for instance-level templates. Requires use_custom_template to be true (enterprise edition).\n"
                },
                "importUrl": {
                    "type": "string",
                    "description": "Git URL to a repository to be imported.\n"
                },
                "initializeWithReadme": {
                    "type": "boolean",
                    "description": "Create main branch with first commit containing a README.md file.\n"
                },
                "issuesAccessLevel": {
                    "type": "string",
                    "description": "Set the issues access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "description": "Enable issue tracking for the project.\n"
                },
                "issuesTemplate": {
                    "type": "string",
                    "description": "Sets the template for new issues in the project.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Enable LFS for the project.\n"
                },
                "mergeCommitTemplate": {
                    "type": "string",
                    "description": "Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)\n"
                },
                "mergeMethod": {
                    "type": "string",
                    "description": "Set to `ff` to create fast-forward merges\n"
                },
                "mergePipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable merge pipelines.\n"
                },
                "mergeRequestsAccessLevel": {
                    "type": "string",
                    "description": "Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "description": "Enable merge requests for the project.\n"
                },
                "mergeRequestsTemplate": {
                    "type": "string",
                    "description": "Sets the template for new merge requests in the project.\n"
                },
                "mergeTrainsEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.\n"
                },
                "mirror": {
                    "type": "boolean",
                    "description": "Enable project pull mirror.\n"
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "description": "Enable overwrite diverged branches for a mirrored project.\n"
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "description": "Enable trigger builds on pushes for a mirrored project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "namespaceId": {
                    "type": "integer",
                    "description": "The namespace (group or user) of the project. Defaults to your user.\n"
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "description": "Enable only mirror protected branches for a mirrored project.\n"
                },
                "operationsAccessLevel": {
                    "type": "string",
                    "description": "Set the operations access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "description": "Enable packages repository for the project.\n"
                },
                "pagesAccessLevel": {
                    "type": "string",
                    "description": "Enable pages access control\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the repository.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable pipelines for the project.\n"
                },
                "printingMergeRequestLinkEnabled": {
                    "type": "boolean",
                    "description": "Show link to create/view merge request when pushing from the command line\n"
                },
                "publicBuilds": {
                    "type": "boolean",
                    "description": "If true, jobs can be viewed by non-project members.\n"
                },
                "pushRules": {
                    "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                    "description": "Push rules for the project.\n"
                },
                "removeSourceBranchAfterMerge": {
                    "type": "boolean",
                    "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                },
                "repositoryAccessLevel": {
                    "type": "string",
                    "description": "Set the repository access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "repositoryStorage": {
                    "type": "string",
                    "description": "Which storage shard the repository is on. (administrator only)\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Allow users to request member access.\n"
                },
                "requirementsAccessLevel": {
                    "type": "string",
                    "description": "Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "resolveOutdatedDiffDiscussions": {
                    "type": "boolean",
                    "description": "Automatically resolve merge request diffs discussions on lines changed with a push.\n"
                },
                "securityAndComplianceAccessLevel": {
                    "type": "string",
                    "description": "Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "description": "Enable shared runners for this project.\n"
                },
                "snippetsAccessLevel": {
                    "type": "string",
                    "description": "Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "description": "Enable snippets for the project.\n"
                },
                "squashCommitTemplate": {
                    "type": "string",
                    "description": "Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)\n"
                },
                "squashOption": {
                    "type": "string",
                    "description": "Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value\nis `default_off`. [GitLab \u003e= 14.1]\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of\na custom project template. This option is mutually exclusive with `template_project_id`.\n"
                },
                "templateProjectId": {
                    "type": "integer",
                    "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name\nsince template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of topics for the project.\n"
                },
                "useCustomTemplate": {
                    "type": "boolean",
                    "description": "Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "Set to `public` to create a public project.\n"
                },
                "wikiAccessLevel": {
                    "type": "string",
                    "description": "Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.\n"
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "description": "Enable wiki for the project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "allowMergeOnSkippedPipeline": {
                        "type": "boolean",
                        "description": "Set to true if you want to treat skipped pipelines as if they finished with success.\n"
                    },
                    "analyticsAccessLevel": {
                        "type": "string",
                        "description": "Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "approvalsBeforeMerge": {
                        "type": "integer",
                        "description": "Number of merge request approvals required for merging. Default is 0.\n"
                    },
                    "archiveOnDestroy": {
                        "type": "boolean",
                        "description": "Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE`\noperation.\n"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                    },
                    "autoCancelPendingPipelines": {
                        "type": "string",
                        "description": "Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.\n"
                    },
                    "autoDevopsDeployStrategy": {
                        "type": "string",
                        "description": "Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.\n"
                    },
                    "autoDevopsEnabled": {
                        "type": "boolean",
                        "description": "Enable Auto DevOps for this project.\n"
                    },
                    "autocloseReferencedIssues": {
                        "type": "boolean",
                        "description": "Set whether auto-closing referenced issues on default branch.\n"
                    },
                    "buildCoverageRegex": {
                        "type": "string",
                        "description": "Test coverage parsing for the project.\n"
                    },
                    "buildGitStrategy": {
                        "type": "string",
                        "description": "The Git strategy. Defaults to fetch.\n"
                    },
                    "buildTimeout": {
                        "type": "integer",
                        "description": "The maximum amount of time, in seconds, that a job can run.\n"
                    },
                    "buildsAccessLevel": {
                        "type": "string",
                        "description": "Set the builds access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "ciConfigPath": {
                        "type": "string",
                        "description": "Custom Path to CI config file.\n"
                    },
                    "ciForwardDeploymentEnabled": {
                        "type": "boolean",
                        "description": "When a new deployment job starts, skip older deployment jobs that are still pending.\n"
                    },
                    "containerExpirationPolicy": {
                        "$ref": "#/types/gitlab:index/ProjectContainerExpirationPolicy:ProjectContainerExpirationPolicy",
                        "description": "Set the image cleanup policy for this project. **Note**: this field is sometimes named\n`container_expiration_policy_attributes` in the GitLab Upstream API.\n"
                    },
                    "containerRegistryAccessLevel": {
                        "type": "string",
                        "description": "Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "containerRegistryEnabled": {
                        "type": "boolean",
                        "description": "Enable container registry for the project.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the project.\n"
                    },
                    "emailsDisabled": {
                        "type": "boolean",
                        "description": "Disable email notifications.\n"
                    },
                    "externalAuthorizationClassificationLabel": {
                        "type": "string",
                        "description": "The classification label for the project.\n"
                    },
                    "forkingAccessLevel": {
                        "type": "string",
                        "description": "Set the forking access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "groupWithProjectTemplatesId": {
                        "type": "integer",
                        "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave\nempty for instance-level templates. Requires use_custom_template to be true (enterprise edition).\n"
                    },
                    "httpUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\n"
                    },
                    "importUrl": {
                        "type": "string",
                        "description": "Git URL to a repository to be imported.\n"
                    },
                    "initializeWithReadme": {
                        "type": "boolean",
                        "description": "Create main branch with first commit containing a README.md file.\n"
                    },
                    "issuesAccessLevel": {
                        "type": "string",
                        "description": "Set the issues access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "issuesEnabled": {
                        "type": "boolean",
                        "description": "Enable issue tracking for the project.\n"
                    },
                    "issuesTemplate": {
                        "type": "string",
                        "description": "Sets the template for new issues in the project.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Enable LFS for the project.\n"
                    },
                    "mergeCommitTemplate": {
                        "type": "string",
                        "description": "Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)\n"
                    },
                    "mergeMethod": {
                        "type": "string",
                        "description": "Set to `ff` to create fast-forward merges\n"
                    },
                    "mergePipelinesEnabled": {
                        "type": "boolean",
                        "description": "Enable or disable merge pipelines.\n"
                    },
                    "mergeRequestsAccessLevel": {
                        "type": "string",
                        "description": "Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "mergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Enable merge requests for the project.\n"
                    },
                    "mergeRequestsTemplate": {
                        "type": "string",
                        "description": "Sets the template for new merge requests in the project.\n"
                    },
                    "mergeTrainsEnabled": {
                        "type": "boolean",
                        "description": "Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.\n"
                    },
                    "mirror": {
                        "type": "boolean",
                        "description": "Enable project pull mirror.\n"
                    },
                    "mirrorOverwritesDivergedBranches": {
                        "type": "boolean",
                        "description": "Enable overwrite diverged branches for a mirrored project.\n"
                    },
                    "mirrorTriggerBuilds": {
                        "type": "boolean",
                        "description": "Enable trigger builds on pushes for a mirrored project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "namespaceId": {
                        "type": "integer",
                        "description": "The namespace (group or user) of the project. Defaults to your user.\n"
                    },
                    "onlyAllowMergeIfAllDiscussionsAreResolved": {
                        "type": "boolean",
                        "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                    },
                    "onlyAllowMergeIfPipelineSucceeds": {
                        "type": "boolean",
                        "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                    },
                    "onlyMirrorProtectedBranches": {
                        "type": "boolean",
                        "description": "Enable only mirror protected branches for a mirrored project.\n"
                    },
                    "operationsAccessLevel": {
                        "type": "string",
                        "description": "Set the operations access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "packagesEnabled": {
                        "type": "boolean",
                        "description": "Enable packages repository for the project.\n"
                    },
                    "pagesAccessLevel": {
                        "type": "string",
                        "description": "Enable pages access control\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the repository.\n"
                    },
                    "pathWithNamespace": {
                        "type": "string",
                        "description": "The path of the repository with namespace.\n"
                    },
                    "pipelinesEnabled": {
                        "type": "boolean",
                        "description": "Enable pipelines for the project.\n"
                    },
                    "printingMergeRequestLinkEnabled": {
                        "type": "boolean",
                        "description": "Show link to create/view merge request when pushing from the command line\n"
                    },
                    "publicBuilds": {
                        "type": "boolean",
                        "description": "If true, jobs can be viewed by non-project members.\n"
                    },
                    "pushRules": {
                        "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                        "description": "Push rules for the project.\n"
                    },
                    "removeSourceBranchAfterMerge": {
                        "type": "boolean",
                        "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                    },
                    "repositoryAccessLevel": {
                        "type": "string",
                        "description": "Set the repository access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "repositoryStorage": {
                        "type": "string",
                        "description": "Which storage shard the repository is on. (administrator only)\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Allow users to request member access.\n"
                    },
                    "requirementsAccessLevel": {
                        "type": "string",
                        "description": "Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "resolveOutdatedDiffDiscussions": {
                        "type": "boolean",
                        "description": "Automatically resolve merge request diffs discussions on lines changed with a push.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "Registration token to use during runner setup.\n"
                    },
                    "securityAndComplianceAccessLevel": {
                        "type": "string",
                        "description": "Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "sharedRunnersEnabled": {
                        "type": "boolean",
                        "description": "Enable shared runners for this project.\n"
                    },
                    "snippetsAccessLevel": {
                        "type": "string",
                        "description": "Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "snippetsEnabled": {
                        "type": "boolean",
                        "description": "Enable snippets for the project.\n"
                    },
                    "squashCommitTemplate": {
                        "type": "string",
                        "description": "Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)\n"
                    },
                    "squashOption": {
                        "type": "string",
                        "description": "Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value\nis `default_off`. [GitLab \u003e= 14.1]\n"
                    },
                    "sshUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of\na custom project template. This option is mutually exclusive with `template_project_id`.\n"
                    },
                    "templateProjectId": {
                        "type": "integer",
                        "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name\nsince template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of topics for the project.\n"
                    },
                    "useCustomTemplate": {
                        "type": "boolean",
                        "description": "Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "Set to `public` to create a public project.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "URL that can be used to find the project in a browser.\n"
                    },
                    "wikiAccessLevel": {
                        "type": "string",
                        "description": "Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.\n"
                    },
                    "wikiEnabled": {
                        "type": "boolean",
                        "description": "Enable wiki for the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectAccessToken:ProjectAccessToken": {
            "description": "The `gitlab.ProjectAccessToken` resource allows to manage the lifecycle of a project access token.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/project_access_tokens.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst exampleProjectAccessToken = new gitlab.ProjectAccessToken(\"exampleProjectAccessToken\", {\n    project: \"25\",\n    expiresAt: \"2020-03-14\",\n    scopes: [\"api\"],\n});\nconst exampleProjectVariable = new gitlab.ProjectVariable(\"exampleProjectVariable\", {\n    project: gitlab_project.example.id,\n    key: \"pat\",\n    value: exampleProjectAccessToken.token,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_project_access_token = gitlab.ProjectAccessToken(\"exampleProjectAccessToken\",\n    project=\"25\",\n    expires_at=\"2020-03-14\",\n    scopes=[\"api\"])\nexample_project_variable = gitlab.ProjectVariable(\"exampleProjectVariable\",\n    project=gitlab_project[\"example\"][\"id\"],\n    key=\"pat\",\n    value=example_project_access_token.token)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleProjectAccessToken = new GitLab.ProjectAccessToken(\"exampleProjectAccessToken\", new GitLab.ProjectAccessTokenArgs\n        {\n            Project = \"25\",\n            ExpiresAt = \"2020-03-14\",\n            Scopes = \n            {\n                \"api\",\n            },\n        });\n        var exampleProjectVariable = new GitLab.ProjectVariable(\"exampleProjectVariable\", new GitLab.ProjectVariableArgs\n        {\n            Project = gitlab_project.Example.Id,\n            Key = \"pat\",\n            Value = exampleProjectAccessToken.Token,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProjectAccessToken, err := gitlab.NewProjectAccessToken(ctx, \"exampleProjectAccessToken\", \u0026gitlab.ProjectAccessTokenArgs{\n\t\t\tProject:   pulumi.String(\"25\"),\n\t\t\tExpiresAt: pulumi.String(\"2020-03-14\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"api\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectVariable(ctx, \"exampleProjectVariable\", \u0026gitlab.ProjectVariableArgs{\n\t\t\tProject: pulumi.Any(gitlab_project.Example.Id),\n\t\t\tKey:     pulumi.String(\"pat\"),\n\t\t\tValue:   exampleProjectAccessToken.Token,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# A GitLab Project Access Token can be imported using a key composed of `\u003cproject-id\u003e:\u003ctoken-id\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectAccessToken:ProjectAccessToken example \"12345:1\"\n```\n\n # NOTEthe `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API. ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "True if the token is active.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Time the token has been created, RFC3339 format.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, YYYY-MM-DD format. Will not expire per default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the project access token.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the project access token to.\n"
                },
                "revoked": {
                    "type": "boolean",
                    "description": "True if the token is revoked.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `api`, `read_api`, `read_repository`, `write_repository`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret token. **Note**: the token is not available for imported resources.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The user_id associated to the token.\n"
                }
            },
            "required": [
                "active",
                "createdAt",
                "name",
                "project",
                "revoked",
                "scopes",
                "token",
                "userId"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, YYYY-MM-DD format. Will not expire per default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the project access token.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the project access token to.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `api`, `read_api`, `read_repository`, `write_repository`.\n"
                }
            },
            "requiredInputs": [
                "project",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectAccessToken resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "True if the token is active.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Time the token has been created, RFC3339 format.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Time the token will expire it, YYYY-MM-DD format. Will not expire per default.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name to describe the project access token.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the project access token to.\n"
                    },
                    "revoked": {
                        "type": "boolean",
                        "description": "True if the token is revoked.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Valid values: `api`, `read_api`, `read_repository`, `write_repository`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret token. **Note**: the token is not available for imported resources.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The user_id associated to the token.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectApprovalRule:ProjectApprovalRule": {
            "description": "The `gitlab.ProjectApprovalRule` resource allows to manage the lifecycle of a project-level approval rule.\n\n\u003e This resource requires a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/merge_request_approvals.html#project-level-mr-approvals)\n\n\n## Import\n\n# GitLab project approval rules can be imported using a key composed of `\u003cproject-id\u003e:\u003crule-id\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectApprovalRule:ProjectApprovalRule example \"12345:6\"\n```\n\n ",
            "properties": {
                "approvalsRequired": {
                    "type": "integer",
                    "description": "The number of approvals required for this rule.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs whose members can approve of the merge request.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the approval rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the approval rules.\n"
                },
                "protectedBranchIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of protected branch IDs (not branch names) for which the rule applies.\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "String, defaults to 'regular'. The type of rule. `any_approver` is a pre-configured default rule with\n`approvals_required` at `0`. Valid values are `regular`, `any_approver`.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of specific User IDs to add to the list of approvers.\n"
                }
            },
            "required": [
                "approvalsRequired",
                "name",
                "project",
                "ruleType"
            ],
            "inputProperties": {
                "approvalsRequired": {
                    "type": "integer",
                    "description": "The number of approvals required for this rule.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs whose members can approve of the merge request.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the approval rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the approval rules.\n"
                },
                "protectedBranchIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of protected branch IDs (not branch names) for which the rule applies.\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "String, defaults to 'regular'. The type of rule. `any_approver` is a pre-configured default rule with\n`approvals_required` at `0`. Valid values are `regular`, `any_approver`.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of specific User IDs to add to the list of approvers.\n"
                }
            },
            "requiredInputs": [
                "approvalsRequired",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectApprovalRule resources.\n",
                "properties": {
                    "approvalsRequired": {
                        "type": "integer",
                        "description": "The number of approvals required for this rule.\n"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of group IDs whose members can approve of the merge request.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the approval rule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the approval rules.\n"
                    },
                    "protectedBranchIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of protected branch IDs (not branch names) for which the rule applies.\n"
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "String, defaults to 'regular'. The type of rule. `any_approver` is a pre-configured default rule with\n`approvals_required` at `0`. Valid values are `regular`, `any_approver`.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of specific User IDs to add to the list of approvers.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectBadge:ProjectBadge": {
            "description": "The `gitlab.ProjectBadge` resource allows to mange the lifecycle of project badges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/user/project/badges.html#project-badges)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {});\nconst example = new gitlab.ProjectBadge(\"example\", {\n    project: foo.id,\n    linkUrl: \"https://example.com/badge-123\",\n    imageUrl: \"https://example.com/badge-123.svg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\")\nexample = gitlab.ProjectBadge(\"example\",\n    project=foo.id,\n    link_url=\"https://example.com/badge-123\",\n    image_url=\"https://example.com/badge-123.svg\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n        });\n        var example = new GitLab.ProjectBadge(\"example\", new GitLab.ProjectBadgeArgs\n        {\n            Project = foo.Id,\n            LinkUrl = \"https://example.com/badge-123\",\n            ImageUrl = \"https://example.com/badge-123.svg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectBadge(ctx, \"example\", \u0026gitlab.ProjectBadgeArgs{\n\t\t\tProject:  foo.ID(),\n\t\t\tLinkUrl:  pulumi.String(\"https://example.com/badge-123\"),\n\t\t\tImageUrl: pulumi.String(\"https://example.com/badge-123.svg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project badges can be imported using an id made up of `{project_id}:{badge_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectBadge:ProjectBadge foo 1:3\n```\n\n ",
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on project overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the badge to.\n"
                },
                "renderedImageUrl": {
                    "type": "string",
                    "description": "The image_url argument rendered (in case of use of placeholders).\n"
                },
                "renderedLinkUrl": {
                    "type": "string",
                    "description": "The link_url argument rendered (in case of use of placeholders).\n"
                }
            },
            "required": [
                "imageUrl",
                "linkUrl",
                "project",
                "renderedImageUrl",
                "renderedLinkUrl"
            ],
            "inputProperties": {
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on project overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the badge to.\n"
                }
            },
            "requiredInputs": [
                "imageUrl",
                "linkUrl",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectBadge resources.\n",
                "properties": {
                    "imageUrl": {
                        "type": "string",
                        "description": "The image url which will be presented on project overview.\n"
                    },
                    "linkUrl": {
                        "type": "string",
                        "description": "The url linked with the badge.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the badge to.\n"
                    },
                    "renderedImageUrl": {
                        "type": "string",
                        "description": "The image_url argument rendered (in case of use of placeholders).\n"
                    },
                    "renderedLinkUrl": {
                        "type": "string",
                        "description": "The link_url argument rendered (in case of use of placeholders).\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectCluster:ProjectCluster": {
            "description": "The `gitlab.ProjectCluster` resource allows to manage the lifecycle of a project cluster.\n\n\u003e This is deprecated GitLab feature since 14.5\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_clusters.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {});\nconst bar = new gitlab.ProjectCluster(\"bar\", {\n    project: foo.id,\n    domain: \"example.com\",\n    enabled: true,\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesToken: \"some-token\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesNamespace: \"namespace\",\n    kubernetesAuthorizationType: \"rbac\",\n    environmentScope: \"*\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\")\nbar = gitlab.ProjectCluster(\"bar\",\n    project=foo.id,\n    domain=\"example.com\",\n    enabled=True,\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_token=\"some-token\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_namespace=\"namespace\",\n    kubernetes_authorization_type=\"rbac\",\n    environment_scope=\"*\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n        });\n        var bar = new GitLab.ProjectCluster(\"bar\", new GitLab.ProjectClusterArgs\n        {\n            Project = foo.Id,\n            Domain = \"example.com\",\n            Enabled = true,\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesToken = \"some-token\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesNamespace = \"namespace\",\n            KubernetesAuthorizationType = \"rbac\",\n            EnvironmentScope = \"*\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectCluster(ctx, \"bar\", \u0026gitlab.ProjectClusterArgs{\n\t\t\tProject:                     foo.ID(),\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesNamespace:         pulumi.String(\"namespace\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project clusters can be imported using an id made up of `projectid:clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectCluster:ProjectCluster bar 123:321\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the project.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string",
                    "description": "Platform type.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the cluster to.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Provider type.\n"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "project",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the project.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the cluster to.\n"
                }
            },
            "requiredInputs": [
                "kubernetesApiUrl",
                "kubernetesToken",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesNamespace": {
                        "type": "string",
                        "description": "The unique namespace related to the project.\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "Platform type.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the cluster to.\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectCustomAttribute:ProjectCustomAttribute": {
            "description": "The `gitlab.ProjectCustomAttribute` resource allows to manage custom attributes for a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst attr = new gitlab.ProjectCustomAttribute(\"attr\", {\n    key: \"location\",\n    project: 42,\n    value: \"Greenland\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nattr = gitlab.ProjectCustomAttribute(\"attr\",\n    key=\"location\",\n    project=42,\n    value=\"Greenland\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var attr = new GitLab.ProjectCustomAttribute(\"attr\", new GitLab.ProjectCustomAttributeArgs\n        {\n            Key = \"location\",\n            Project = 42,\n            Value = \"Greenland\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectCustomAttribute(ctx, \"attr\", \u0026gitlab.ProjectCustomAttributeArgs{\n\t\t\tKey:     pulumi.String(\"location\"),\n\t\t\tProject: pulumi.Int(42),\n\t\t\tValue:   pulumi.String(\"Greenland\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a project custom attribute using an id made up of `{project-id}:{key}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectCustomAttribute:ProjectCustomAttribute attr 42:location\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "project": {
                    "type": "integer",
                    "description": "The id of the project.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "required": [
                "key",
                "project",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "project": {
                    "type": "integer",
                    "description": "The id of the project.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectCustomAttribute resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key for the Custom Attribute.\n"
                    },
                    "project": {
                        "type": "integer",
                        "description": "The id of the project.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for the Custom Attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectEnvironment:ProjectEnvironment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst thisGroup = new gitlab.Group(\"thisGroup\", {\n    path: \"example\",\n    description: \"An example group\",\n});\nconst thisProject = new gitlab.Project(\"thisProject\", {\n    namespaceId: thisGroup.id,\n    initializeWithReadme: true,\n});\nconst thisProjectEnvironment = new gitlab.ProjectEnvironment(\"thisProjectEnvironment\", {\n    project: thisProject.id,\n    externalUrl: \"www.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nthis_group = gitlab.Group(\"thisGroup\",\n    path=\"example\",\n    description=\"An example group\")\nthis_project = gitlab.Project(\"thisProject\",\n    namespace_id=this_group.id,\n    initialize_with_readme=True)\nthis_project_environment = gitlab.ProjectEnvironment(\"thisProjectEnvironment\",\n    project=this_project.id,\n    external_url=\"www.example.com\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var thisGroup = new GitLab.Group(\"thisGroup\", new GitLab.GroupArgs\n        {\n            Path = \"example\",\n            Description = \"An example group\",\n        });\n        var thisProject = new GitLab.Project(\"thisProject\", new GitLab.ProjectArgs\n        {\n            NamespaceId = thisGroup.Id,\n            InitializeWithReadme = true,\n        });\n        var thisProjectEnvironment = new GitLab.ProjectEnvironment(\"thisProjectEnvironment\", new GitLab.ProjectEnvironmentArgs\n        {\n            Project = thisProject.Id,\n            ExternalUrl = \"www.example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisGroup, err := gitlab.NewGroup(ctx, \"thisGroup\", \u0026gitlab.GroupArgs{\n\t\t\tPath:        pulumi.String(\"example\"),\n\t\t\tDescription: pulumi.String(\"An example group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisProject, err := gitlab.NewProject(ctx, \"thisProject\", \u0026gitlab.ProjectArgs{\n\t\t\tNamespaceId:          thisGroup.ID(),\n\t\t\tInitializeWithReadme: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectEnvironment(ctx, \"thisProjectEnvironment\", \u0026gitlab.ProjectEnvironmentArgs{\n\t\t\tProject:     thisProject.ID(),\n\t\t\tExternalUrl: pulumi.String(\"www.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project environments can be imported using an id made up of `projectId:environmenId`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectEnvironment:ProjectEnvironment bar 123:321\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The ISO8601 date/time that this environment was created at in UTC.\n"
                },
                "externalUrl": {
                    "type": "string",
                    "description": "Place to link to for this environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or full path of the project to environment is created for.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The name of the environment in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -.\nNo leading / trailing -. Use in URLs, host names and domain names.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State the environment is in. Valid values are `available`, `stopped`.\n"
                },
                "stopBeforeDestroy": {
                    "type": "boolean",
                    "description": "Determines whether the environment is attempted to be stopped before the environment is deleted.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The ISO8601 date/time that this environment was last updated at in UTC.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "project",
                "slug",
                "state",
                "updatedAt"
            ],
            "inputProperties": {
                "externalUrl": {
                    "type": "string",
                    "description": "Place to link to for this environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or full path of the project to environment is created for.\n"
                },
                "stopBeforeDestroy": {
                    "type": "boolean",
                    "description": "Determines whether the environment is attempted to be stopped before the environment is deleted.\n"
                }
            },
            "requiredInputs": [
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectEnvironment resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The ISO8601 date/time that this environment was created at in UTC.\n"
                    },
                    "externalUrl": {
                        "type": "string",
                        "description": "Place to link to for this environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The ID or full path of the project to environment is created for.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The name of the environment in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -.\nNo leading / trailing -. Use in URLs, host names and domain names.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State the environment is in. Valid values are `available`, `stopped`.\n"
                    },
                    "stopBeforeDestroy": {
                        "type": "boolean",
                        "description": "Determines whether the environment is attempted to be stopped before the environment is deleted.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The ISO8601 date/time that this environment was last updated at in UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectFreezePeriod:ProjectFreezePeriod": {
            "description": "The `gitlab.ProjectFreezePeriod` resource allows to manage the lifecycle of a freeze period for a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/freeze_periods.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst schedule = new gitlab.ProjectFreezePeriod(\"schedule\", {\n    projectId: gitlab_project.foo.id,\n    freezeStart: \"0 23 * * 5\",\n    freezeEnd: \"0 7 * * 1\",\n    cronTimezone: \"UTC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nschedule = gitlab.ProjectFreezePeriod(\"schedule\",\n    project_id=gitlab_project[\"foo\"][\"id\"],\n    freeze_start=\"0 23 * * 5\",\n    freeze_end=\"0 7 * * 1\",\n    cron_timezone=\"UTC\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var schedule = new GitLab.ProjectFreezePeriod(\"schedule\", new GitLab.ProjectFreezePeriodArgs\n        {\n            ProjectId = gitlab_project.Foo.Id,\n            FreezeStart = \"0 23 * * 5\",\n            FreezeEnd = \"0 7 * * 1\",\n            CronTimezone = \"UTC\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectFreezePeriod(ctx, \"schedule\", \u0026gitlab.ProjectFreezePeriodArgs{\n\t\t\tProjectId:    pulumi.Any(gitlab_project.Foo.Id),\n\t\t\tFreezeStart:  pulumi.String(\"0 23 * * 5\"),\n\t\t\tFreezeEnd:    pulumi.String(\"0 7 * * 1\"),\n\t\t\tCronTimezone: pulumi.String(\"UTC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project freeze periods can be imported using an id made up of `project_id:freeze_period_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectFreezePeriod:ProjectFreezePeriod schedule \"12345:1337\"\n```\n\n ",
            "properties": {
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "freezeEnd": {
                    "type": "string",
                    "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                },
                "freezeStart": {
                    "type": "string",
                    "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                }
            },
            "required": [
                "freezeEnd",
                "freezeStart",
                "projectId"
            ],
            "inputProperties": {
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "freezeEnd": {
                    "type": "string",
                    "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                },
                "freezeStart": {
                    "type": "string",
                    "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                }
            },
            "requiredInputs": [
                "freezeEnd",
                "freezeStart",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFreezePeriod resources.\n",
                "properties": {
                    "cronTimezone": {
                        "type": "string",
                        "description": "The timezone.\n"
                    },
                    "freezeEnd": {
                        "type": "string",
                        "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                    },
                    "freezeStart": {
                        "type": "string",
                        "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project to add the schedule to.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectHook:ProjectHook": {
            "description": "The `gitlab.ProjectHook` resource allows to manage the lifecycle of a project hook.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#hooks)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.ProjectHook(\"example\", {\n    mergeRequestsEvents: true,\n    project: \"example/hooked\",\n    url: \"https://example.com/hook/example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.ProjectHook(\"example\",\n    merge_requests_events=True,\n    project=\"example/hooked\",\n    url=\"https://example.com/hook/example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.ProjectHook(\"example\", new GitLab.ProjectHookArgs\n        {\n            MergeRequestsEvents = true,\n            Project = \"example/hooked\",\n            Url = \"https://example.com/hook/example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectHook(ctx, \"example\", \u0026gitlab.ProjectHookArgs{\n\t\t\tMergeRequestsEvents: pulumi.Bool(true),\n\t\t\tProject:             pulumi.String(\"example/hooked\"),\n\t\t\tUrl:                 pulumi.String(\"https://example.com/hook/example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# A GitLab Project Hook can be imported using a key composed of `\u003cproject-id\u003e:\u003chook-id\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectHook:ProjectHook example \"12345:1\"\n```\n\n # NOTEthe `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API. ",
            "properties": {
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential notes events.\n"
                },
                "deploymentEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for deployment events.\n"
                },
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Enable ssl verification when invoking the hook.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for merge requests.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for notes events.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for push events.\n"
                },
                "pushEventsBranchFilter": {
                    "type": "string",
                    "description": "Invoke the hook for push events on matching branches only.\n"
                },
                "releasesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for releases events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for tag push events.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token to present when invoking the hook. The token is not available for imported resources.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the hook to invoke.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for wiki page events.\n"
                }
            },
            "required": [
                "project",
                "url"
            ],
            "inputProperties": {
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential notes events.\n"
                },
                "deploymentEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for deployment events.\n"
                },
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Enable ssl verification when invoking the hook.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for merge requests.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for notes events.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for push events.\n"
                },
                "pushEventsBranchFilter": {
                    "type": "string",
                    "description": "Invoke the hook for push events on matching branches only.\n"
                },
                "releasesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for releases events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for tag push events.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token to present when invoking the hook. The token is not available for imported resources.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the hook to invoke.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for wiki page events.\n"
                }
            },
            "requiredInputs": [
                "project",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectHook resources.\n",
                "properties": {
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for confidential issues events.\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for confidential notes events.\n"
                    },
                    "deploymentEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for deployment events.\n"
                    },
                    "enableSslVerification": {
                        "type": "boolean",
                        "description": "Enable ssl verification when invoking the hook.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for issues events.\n"
                    },
                    "jobEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for job events.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for merge requests.\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for notes events.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the hook to.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for push events.\n"
                    },
                    "pushEventsBranchFilter": {
                        "type": "string",
                        "description": "Invoke the hook for push events on matching branches only.\n"
                    },
                    "releasesEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for releases events.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for tag push events.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A token to present when invoking the hook. The token is not available for imported resources.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the hook to invoke.\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for wiki page events.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectIssue:ProjectIssue": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {\n    description: \"Lorem Ipsum\",\n    visibilityLevel: \"public\",\n});\nconst welcomeIssue = new gitlab.ProjectIssue(\"welcomeIssue\", {\n    project: foo.id,\n    title: \"Welcome!\",\n    description: pulumi.interpolate`  Welcome to the ${foo.name} project!\n\n`,\n    discussionLocked: true,\n});\nexport const welcomeIssueWebUrl = data.gitlab_project_issue.web_url;\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\",\n    description=\"Lorem Ipsum\",\n    visibility_level=\"public\")\nwelcome_issue = gitlab.ProjectIssue(\"welcomeIssue\",\n    project=foo.id,\n    title=\"Welcome!\",\n    description=foo.name.apply(lambda name: f\"\"\"  Welcome to the {name} project!\n\n\"\"\"),\n    discussion_locked=True)\npulumi.export(\"welcomeIssueWebUrl\", data[\"gitlab_project_issue\"][\"web_url\"])\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n            Description = \"Lorem Ipsum\",\n            VisibilityLevel = \"public\",\n        });\n        var welcomeIssue = new GitLab.ProjectIssue(\"welcomeIssue\", new GitLab.ProjectIssueArgs\n        {\n            Project = foo.Id,\n            Title = \"Welcome!\",\n            Description = foo.Name.Apply(name =\u003e @$\"  Welcome to the {name} project!\n\n\"),\n            DiscussionLocked = true,\n        });\n        this.WelcomeIssueWebUrl = data.Gitlab_project_issue.Web_url;\n    }\n\n    [Output(\"welcomeIssueWebUrl\")]\n    public Output\u003cstring\u003e WelcomeIssueWebUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"Lorem Ipsum\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectIssue(ctx, \"welcomeIssue\", \u0026gitlab.ProjectIssueArgs{\n\t\t\tProject: foo.ID(),\n\t\t\tTitle:   pulumi.String(\"Welcome!\"),\n\t\t\tDescription: foo.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v%v%v%v\", \"  Welcome to the \", name, \" project!\\n\", \"\\n\"), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tDiscussionLocked: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"welcomeIssueWebUrl\", data.Gitlab_project_issue.Web_url)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import this resource with an id made up of `{project-id}:{issue-id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectIssue:ProjectIssue welcome_issue 42:1\n```\n\n ",
            "properties": {
                "assigneeIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The IDs of the users to assign the issue to.\n"
                },
                "authorId": {
                    "type": "integer",
                    "description": "The ID of the author of the issue. Use `gitlab_user` data source to get more information about the user.\n"
                },
                "closedAt": {
                    "type": "string",
                    "description": "When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.\n"
                },
                "closedByUserId": {
                    "type": "integer",
                    "description": "The ID of the user that closed the issue. Use `gitlab_user` data source to get more information about the user.\n"
                },
                "confidential": {
                    "type": "boolean",
                    "description": "Set an issue to be confidential.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires\nadministrator or project/group owner rights.\n"
                },
                "deleteOnDestroy": {
                    "type": "boolean",
                    "description": "Whether the issue is deleted instead of closed during destroy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of an issue. Limited to 1,048,576 characters.\n"
                },
                "discussionLocked": {
                    "type": "boolean",
                    "description": "Whether the issue is locked for discussions or not.\n"
                },
                "discussionToResolve": {
                    "type": "string",
                    "description": "The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as\nresolved. Use in combination with merge_request_to_resolve_discussions_of.\n"
                },
                "downvotes": {
                    "type": "integer",
                    "description": "The number of downvotes the issue has received.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11. **Note:** removing a due date is\ncurrently not supported, see https://github.com/xanzy/go-gitlab/issues/1384 for details.\n"
                },
                "epicId": {
                    "type": "integer",
                    "description": "ID of the epic to add the issue to. Valid values are greater than or equal to 0.\n"
                },
                "epicIssueId": {
                    "type": "integer",
                    "description": "The ID of the epic issue.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The external ID of the issue.\n"
                },
                "humanTimeEstimate": {
                    "type": "string",
                    "description": "The human-readable time estimate of the issue.\n"
                },
                "humanTotalTimeSpent": {
                    "type": "string",
                    "description": "The human-readable total time spent of the issue.\n"
                },
                "iid": {
                    "type": "integer",
                    "description": "The internal ID of the project's issue.\n"
                },
                "issueId": {
                    "type": "integer",
                    "description": "The instance-wide ID of the issue.\n"
                },
                "issueLinkId": {
                    "type": "integer",
                    "description": "The ID of the issue link.\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The type of issue. Valid values are: `issue`, `incident`, `test_case`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The labels of an issue.\n"
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The links of the issue.\n"
                },
                "mergeRequestToResolveDiscussionsOf": {
                    "type": "integer",
                    "description": "The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark\nall discussions as resolved. When passing a description or title, these values take precedence over the default values.\n"
                },
                "mergeRequestsCount": {
                    "type": "integer",
                    "description": "The number of merge requests associated with the issue.\n"
                },
                "milestoneId": {
                    "type": "integer",
                    "description": "The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with\nthe milestone assigned and use the API to retrieve the issue's details.\n"
                },
                "movedToId": {
                    "type": "integer",
                    "description": "The ID of the issue that was moved to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or ID of the project.\n"
                },
                "references": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The references of the issue.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the issue. Valid values are: `opened`, `closed`.\n"
                },
                "subscribed": {
                    "type": "boolean",
                    "description": "Whether the authenticated user is subscribed to the issue or not.\n"
                },
                "taskCompletionStatus": {
                    "$ref": "#/types/gitlab:index/ProjectIssueTaskCompletionStatus:ProjectIssueTaskCompletionStatus",
                    "description": "The task completion status. It's always a one element list.\n"
                },
                "timeEstimate": {
                    "type": "integer",
                    "description": "The time estimate of the issue.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the issue.\n"
                },
                "totalTimeSpent": {
                    "type": "integer",
                    "description": "The total time spent of the issue.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.\n"
                },
                "upvotes": {
                    "type": "integer",
                    "description": "The number of upvotes the issue has received.\n"
                },
                "userNotesCount": {
                    "type": "integer",
                    "description": "The number of user notes on the issue.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "The web URL of the issue.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the issue. Valid values are greater than or equal to 0.\n"
                }
            },
            "required": [
                "authorId",
                "closedAt",
                "closedByUserId",
                "createdAt",
                "downvotes",
                "epicId",
                "epicIssueId",
                "externalId",
                "humanTimeEstimate",
                "humanTotalTimeSpent",
                "iid",
                "issueId",
                "issueLinkId",
                "links",
                "mergeRequestsCount",
                "movedToId",
                "project",
                "references",
                "subscribed",
                "taskCompletionStatus",
                "timeEstimate",
                "title",
                "totalTimeSpent",
                "updatedAt",
                "upvotes",
                "userNotesCount",
                "webUrl",
                "weight"
            ],
            "inputProperties": {
                "assigneeIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The IDs of the users to assign the issue to.\n"
                },
                "closedAt": {
                    "type": "string",
                    "description": "When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.\n"
                },
                "closedByUserId": {
                    "type": "integer",
                    "description": "The ID of the user that closed the issue. Use `gitlab_user` data source to get more information about the user.\n"
                },
                "confidential": {
                    "type": "boolean",
                    "description": "Set an issue to be confidential.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires\nadministrator or project/group owner rights.\n"
                },
                "deleteOnDestroy": {
                    "type": "boolean",
                    "description": "Whether the issue is deleted instead of closed during destroy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of an issue. Limited to 1,048,576 characters.\n"
                },
                "discussionLocked": {
                    "type": "boolean",
                    "description": "Whether the issue is locked for discussions or not.\n"
                },
                "discussionToResolve": {
                    "type": "string",
                    "description": "The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as\nresolved. Use in combination with merge_request_to_resolve_discussions_of.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11. **Note:** removing a due date is\ncurrently not supported, see https://github.com/xanzy/go-gitlab/issues/1384 for details.\n"
                },
                "epicIssueId": {
                    "type": "integer",
                    "description": "The ID of the epic issue.\n"
                },
                "humanTimeEstimate": {
                    "type": "string",
                    "description": "The human-readable time estimate of the issue.\n"
                },
                "humanTotalTimeSpent": {
                    "type": "string",
                    "description": "The human-readable total time spent of the issue.\n"
                },
                "iid": {
                    "type": "integer",
                    "description": "The internal ID of the project's issue.\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The type of issue. Valid values are: `issue`, `incident`, `test_case`.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The labels of an issue.\n"
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The links of the issue.\n"
                },
                "mergeRequestToResolveDiscussionsOf": {
                    "type": "integer",
                    "description": "The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark\nall discussions as resolved. When passing a description or title, these values take precedence over the default values.\n"
                },
                "milestoneId": {
                    "type": "integer",
                    "description": "The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with\nthe milestone assigned and use the API to retrieve the issue's details.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or ID of the project.\n"
                },
                "references": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The references of the issue.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the issue. Valid values are: `opened`, `closed`.\n"
                },
                "taskCompletionStatus": {
                    "$ref": "#/types/gitlab:index/ProjectIssueTaskCompletionStatus:ProjectIssueTaskCompletionStatus",
                    "description": "The task completion status. It's always a one element list.\n"
                },
                "timeEstimate": {
                    "type": "integer",
                    "description": "The time estimate of the issue.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the issue.\n"
                },
                "totalTimeSpent": {
                    "type": "integer",
                    "description": "The total time spent of the issue.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the issue. Valid values are greater than or equal to 0.\n"
                }
            },
            "requiredInputs": [
                "project",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectIssue resources.\n",
                "properties": {
                    "assigneeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The IDs of the users to assign the issue to.\n"
                    },
                    "authorId": {
                        "type": "integer",
                        "description": "The ID of the author of the issue. Use `gitlab_user` data source to get more information about the user.\n"
                    },
                    "closedAt": {
                        "type": "string",
                        "description": "When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.\n"
                    },
                    "closedByUserId": {
                        "type": "integer",
                        "description": "The ID of the user that closed the issue. Use `gitlab_user` data source to get more information about the user.\n"
                    },
                    "confidential": {
                        "type": "boolean",
                        "description": "Set an issue to be confidential.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires\nadministrator or project/group owner rights.\n"
                    },
                    "deleteOnDestroy": {
                        "type": "boolean",
                        "description": "Whether the issue is deleted instead of closed during destroy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of an issue. Limited to 1,048,576 characters.\n"
                    },
                    "discussionLocked": {
                        "type": "boolean",
                        "description": "Whether the issue is locked for discussions or not.\n"
                    },
                    "discussionToResolve": {
                        "type": "string",
                        "description": "The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as\nresolved. Use in combination with merge_request_to_resolve_discussions_of.\n"
                    },
                    "downvotes": {
                        "type": "integer",
                        "description": "The number of downvotes the issue has received.\n"
                    },
                    "dueDate": {
                        "type": "string",
                        "description": "The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11. **Note:** removing a due date is\ncurrently not supported, see https://github.com/xanzy/go-gitlab/issues/1384 for details.\n"
                    },
                    "epicId": {
                        "type": "integer",
                        "description": "ID of the epic to add the issue to. Valid values are greater than or equal to 0.\n"
                    },
                    "epicIssueId": {
                        "type": "integer",
                        "description": "The ID of the epic issue.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The external ID of the issue.\n"
                    },
                    "humanTimeEstimate": {
                        "type": "string",
                        "description": "The human-readable time estimate of the issue.\n"
                    },
                    "humanTotalTimeSpent": {
                        "type": "string",
                        "description": "The human-readable total time spent of the issue.\n"
                    },
                    "iid": {
                        "type": "integer",
                        "description": "The internal ID of the project's issue.\n"
                    },
                    "issueId": {
                        "type": "integer",
                        "description": "The instance-wide ID of the issue.\n"
                    },
                    "issueLinkId": {
                        "type": "integer",
                        "description": "The ID of the issue link.\n"
                    },
                    "issueType": {
                        "type": "string",
                        "description": "The type of issue. Valid values are: `issue`, `incident`, `test_case`.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The labels of an issue.\n"
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The links of the issue.\n"
                    },
                    "mergeRequestToResolveDiscussionsOf": {
                        "type": "integer",
                        "description": "The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark\nall discussions as resolved. When passing a description or title, these values take precedence over the default values.\n"
                    },
                    "mergeRequestsCount": {
                        "type": "integer",
                        "description": "The number of merge requests associated with the issue.\n"
                    },
                    "milestoneId": {
                        "type": "integer",
                        "description": "The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with\nthe milestone assigned and use the API to retrieve the issue's details.\n"
                    },
                    "movedToId": {
                        "type": "integer",
                        "description": "The ID of the issue that was moved to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or ID of the project.\n"
                    },
                    "references": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The references of the issue.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the issue. Valid values are: `opened`, `closed`.\n"
                    },
                    "subscribed": {
                        "type": "boolean",
                        "description": "Whether the authenticated user is subscribed to the issue or not.\n"
                    },
                    "taskCompletionStatus": {
                        "$ref": "#/types/gitlab:index/ProjectIssueTaskCompletionStatus:ProjectIssueTaskCompletionStatus",
                        "description": "The task completion status. It's always a one element list.\n"
                    },
                    "timeEstimate": {
                        "type": "integer",
                        "description": "The time estimate of the issue.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the issue.\n"
                    },
                    "totalTimeSpent": {
                        "type": "integer",
                        "description": "The total time spent of the issue.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.\n"
                    },
                    "upvotes": {
                        "type": "integer",
                        "description": "The number of upvotes the issue has received.\n"
                    },
                    "userNotesCount": {
                        "type": "integer",
                        "description": "The number of user notes on the issue.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "The web URL of the issue.\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight of the issue. Valid values are greater than or equal to 0.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals": {
            "description": "The `gitlab_project_level_mr_approval_rule` resource allows to manage the lifecycle of a Merge Request-level approval rule.\n\n\u003e This resource requires a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/merge_request_approvals.html#merge-request-level-mr-approvals)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fooProject = new gitlab.Project(\"fooProject\", {description: \"My example project\"});\nconst fooProjectLevelMrApprovals = new gitlab.ProjectLevelMrApprovals(\"fooProjectLevelMrApprovals\", {\n    projectId: fooProject.id,\n    resetApprovalsOnPush: true,\n    disableOverridingApproversPerMergeRequest: false,\n    mergeRequestsAuthorApproval: false,\n    mergeRequestsDisableCommittersApproval: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo_project = gitlab.Project(\"fooProject\", description=\"My example project\")\nfoo_project_level_mr_approvals = gitlab.ProjectLevelMrApprovals(\"fooProjectLevelMrApprovals\",\n    project_id=foo_project.id,\n    reset_approvals_on_push=True,\n    disable_overriding_approvers_per_merge_request=False,\n    merge_requests_author_approval=False,\n    merge_requests_disable_committers_approval=True)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooProject = new GitLab.Project(\"fooProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My example project\",\n        });\n        var fooProjectLevelMrApprovals = new GitLab.ProjectLevelMrApprovals(\"fooProjectLevelMrApprovals\", new GitLab.ProjectLevelMrApprovalsArgs\n        {\n            ProjectId = fooProject.Id,\n            ResetApprovalsOnPush = true,\n            DisableOverridingApproversPerMergeRequest = false,\n            MergeRequestsAuthorApproval = false,\n            MergeRequestsDisableCommittersApproval = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooProject, err := gitlab.NewProject(ctx, \"fooProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"My example project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectLevelMrApprovals(ctx, \"fooProjectLevelMrApprovals\", \u0026gitlab.ProjectLevelMrApprovalsArgs{\n\t\t\tProjectId:            fooProject.ID(),\n\t\t\tResetApprovalsOnPush: pulumi.Bool(true),\n\t\t\tDisableOverridingApproversPerMergeRequest: pulumi.Bool(false),\n\t\t\tMergeRequestsAuthorApproval:               pulumi.Bool(false),\n\t\t\tMergeRequestsDisableCommittersApproval:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals # You can import an approval configuration state using `\u003cresource\u003e \u003cproject_id\u003e`.\n```\n\n # # For example\n\n```sh\n $ pulumi import gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals foo 1234\n```\n\n ",
            "properties": {
                "disableOverridingApproversPerMergeRequest": {
                    "type": "boolean",
                    "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\n"
                },
                "mergeRequestsAuthorApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\n"
                },
                "mergeRequestsDisableCommittersApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project to change MR approval configuration.\n"
                },
                "requirePasswordToApprove": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to require authentication when approving a merge request.\n"
                },
                "resetApprovalsOnPush": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch.\nDefault is `true`.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "disableOverridingApproversPerMergeRequest": {
                    "type": "boolean",
                    "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\n"
                },
                "mergeRequestsAuthorApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\n"
                },
                "mergeRequestsDisableCommittersApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project to change MR approval configuration.\n"
                },
                "requirePasswordToApprove": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to require authentication when approving a merge request.\n"
                },
                "resetApprovalsOnPush": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch.\nDefault is `true`.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectLevelMrApprovals resources.\n",
                "properties": {
                    "disableOverridingApproversPerMergeRequest": {
                        "type": "boolean",
                        "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\n"
                    },
                    "mergeRequestsAuthorApproval": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\n"
                    },
                    "mergeRequestsDisableCommittersApproval": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers.\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The ID of the project to change MR approval configuration.\n"
                    },
                    "requirePasswordToApprove": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to require authentication when approving a merge request.\n"
                    },
                    "resetApprovalsOnPush": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch.\nDefault is `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectMembership:ProjectMembership": {
            "description": "The `gitlab.ProjectMembership` resource allows to manage the lifecycle of a users project membersip.\n\n\u003e If a project should grant membership to an entire group use the `gitlab.ProjectShareGroup` resource instead.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.ProjectMembership(\"test\", {\n    accessLevel: \"guest\",\n    projectId: \"12345\",\n    userId: 1337,\n});\nconst example = new gitlab.ProjectMembership(\"example\", {\n    accessLevel: \"guest\",\n    projectId: \"67890\",\n    userId: 1234,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.ProjectMembership(\"test\",\n    access_level=\"guest\",\n    project_id=\"12345\",\n    user_id=1337)\nexample = gitlab.ProjectMembership(\"example\",\n    access_level=\"guest\",\n    project_id=\"67890\",\n    user_id=1234)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.ProjectMembership(\"test\", new GitLab.ProjectMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ProjectId = \"12345\",\n            UserId = 1337,\n        });\n        var example = new GitLab.ProjectMembership(\"example\", new GitLab.ProjectMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ProjectId = \"67890\",\n            UserId = 1234,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectMembership(ctx, \"test\", \u0026gitlab.ProjectMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tProjectId:   pulumi.String(\"12345\"),\n\t\t\tUserId:      pulumi.Int(1337),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectMembership(ctx, \"example\", \u0026gitlab.ProjectMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tProjectId:   pulumi.String(\"67890\"),\n\t\t\tUserId:      pulumi.Int(1234),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project membership can be imported using an id made up of `project_id:user_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectMembership:ProjectMembership test \"12345:1337\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`,\n`master`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "required": [
                "accessLevel",
                "projectId",
                "userId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`,\n`master`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "projectId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMembership resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`,\n`master`\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectMirror:ProjectMirror": {
            "description": "The `gitlab.ProjectMirror` resource allows to manage the lifecycle of a project mirror.\n\nThis is for *pushing* changes to a remote repository. *Pull Mirroring* can be configured using a combination of the\nimport_url, mirror, and mirror_trigger_builds properties on the gitlab.Project resource.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/remote_mirrors.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.ProjectMirror(\"foo\", {\n    project: \"1\",\n    url: \"https://username:password@github.com/org/repository.git\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.ProjectMirror(\"foo\",\n    project=\"1\",\n    url=\"https://username:password@github.com/org/repository.git\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.ProjectMirror(\"foo\", new GitLab.ProjectMirrorArgs\n        {\n            Project = \"1\",\n            Url = \"https://username:password@github.com/org/repository.git\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectMirror(ctx, \"foo\", \u0026gitlab.ProjectMirrorArgs{\n\t\t\tProject: pulumi.String(\"1\"),\n\t\t\tUrl:     pulumi.String(\"https://username:password@github.com/org/repository.git\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project mirror can be imported using an id made up of `project_id:mirror_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectMirror:ProjectMirror foo \"12345:1337\"\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the mirror is enabled.\n"
                },
                "keepDivergentRefs": {
                    "type": "boolean",
                    "description": "Determines if divergent refs are skipped.\n"
                },
                "mirrorId": {
                    "type": "integer",
                    "description": "Mirror ID.\n"
                },
                "onlyProtectedBranches": {
                    "type": "boolean",
                    "description": "Determines if only protected branches are mirrored.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the remote repository to be mirrored.\n"
                }
            },
            "required": [
                "mirrorId",
                "project",
                "url"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the mirror is enabled.\n"
                },
                "keepDivergentRefs": {
                    "type": "boolean",
                    "description": "Determines if divergent refs are skipped.\n"
                },
                "onlyProtectedBranches": {
                    "type": "boolean",
                    "description": "Determines if only protected branches are mirrored.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the remote repository to be mirrored.\n"
                }
            },
            "requiredInputs": [
                "project",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMirror resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if the mirror is enabled.\n"
                    },
                    "keepDivergentRefs": {
                        "type": "boolean",
                        "description": "Determines if divergent refs are skipped.\n"
                    },
                    "mirrorId": {
                        "type": "integer",
                        "description": "Mirror ID.\n"
                    },
                    "onlyProtectedBranches": {
                        "type": "boolean",
                        "description": "Determines if only protected branches are mirrored.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the remote repository to be mirrored.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment": {
            "description": "The `gitlab.ProjectProtectedEnvironment` resource allows to manage the lifecycle of a protected environment in a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_environments.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst thisGroup = new gitlab.Group(\"thisGroup\", {\n    path: \"example\",\n    description: \"An example group\",\n});\nconst thisProject = new gitlab.Project(\"thisProject\", {\n    namespaceId: thisGroup.id,\n    initializeWithReadme: true,\n});\nconst thisProjectEnvironment = new gitlab.ProjectEnvironment(\"thisProjectEnvironment\", {\n    project: thisProject.id,\n    externalUrl: \"www.example.com\",\n});\nconst thisProjectProtectedEnvironment = new gitlab.ProjectProtectedEnvironment(\"thisProjectProtectedEnvironment\", {\n    project: thisProject.id,\n    environment: thisProjectEnvironment.name,\n    deployAccessLevels: {\n        accessLevel: \"developer\",\n    },\n});\nconst thisIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new gitlab.ProjectProtectedEnvironment(\"thisIndex/projectProtectedEnvironmentProjectProtectedEnvironment\", {\n    project: thisProject.id,\n    environment: thisProjectEnvironment.name,\n    deployAccessLevels: {\n        groupId: gitlab_group.test.id,\n    },\n});\nconst thisGitlabIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new gitlab.ProjectProtectedEnvironment(\"thisGitlabIndex/projectProtectedEnvironmentProjectProtectedEnvironment\", {\n    project: thisProject.id,\n    environment: thisProjectEnvironment.name,\n    deployAccessLevels: {\n        userId: gitlab_user.test.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nthis_group = gitlab.Group(\"thisGroup\",\n    path=\"example\",\n    description=\"An example group\")\nthis_project = gitlab.Project(\"thisProject\",\n    namespace_id=this_group.id,\n    initialize_with_readme=True)\nthis_project_environment = gitlab.ProjectEnvironment(\"thisProjectEnvironment\",\n    project=this_project.id,\n    external_url=\"www.example.com\")\nthis_project_protected_environment = gitlab.ProjectProtectedEnvironment(\"thisProjectProtectedEnvironment\",\n    project=this_project.id,\n    environment=this_project_environment.name,\n    deploy_access_levels=gitlab.ProjectProtectedEnvironmentDeployAccessLevelsArgs(\n        access_level=\"developer\",\n    ))\nthis_index_project_protected_environment_project_protected_environment = gitlab.ProjectProtectedEnvironment(\"thisIndex/projectProtectedEnvironmentProjectProtectedEnvironment\",\n    project=this_project.id,\n    environment=this_project_environment.name,\n    deploy_access_levels=gitlab.ProjectProtectedEnvironmentDeployAccessLevelsArgs(\n        group_id=gitlab_group[\"test\"][\"id\"],\n    ))\nthis_gitlab_index_project_protected_environment_project_protected_environment = gitlab.ProjectProtectedEnvironment(\"thisGitlabIndex/projectProtectedEnvironmentProjectProtectedEnvironment\",\n    project=this_project.id,\n    environment=this_project_environment.name,\n    deploy_access_levels=gitlab.ProjectProtectedEnvironmentDeployAccessLevelsArgs(\n        user_id=gitlab_user[\"test\"][\"id\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var thisGroup = new GitLab.Group(\"thisGroup\", new GitLab.GroupArgs\n        {\n            Path = \"example\",\n            Description = \"An example group\",\n        });\n        var thisProject = new GitLab.Project(\"thisProject\", new GitLab.ProjectArgs\n        {\n            NamespaceId = thisGroup.Id,\n            InitializeWithReadme = true,\n        });\n        var thisProjectEnvironment = new GitLab.ProjectEnvironment(\"thisProjectEnvironment\", new GitLab.ProjectEnvironmentArgs\n        {\n            Project = thisProject.Id,\n            ExternalUrl = \"www.example.com\",\n        });\n        var thisProjectProtectedEnvironment = new GitLab.ProjectProtectedEnvironment(\"thisProjectProtectedEnvironment\", new GitLab.ProjectProtectedEnvironmentArgs\n        {\n            Project = thisProject.Id,\n            Environment = thisProjectEnvironment.Name,\n            DeployAccessLevels = new GitLab.Inputs.ProjectProtectedEnvironmentDeployAccessLevelsArgs\n            {\n                AccessLevel = \"developer\",\n            },\n        });\n        var thisIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new GitLab.ProjectProtectedEnvironment(\"thisIndex/projectProtectedEnvironmentProjectProtectedEnvironment\", new GitLab.ProjectProtectedEnvironmentArgs\n        {\n            Project = thisProject.Id,\n            Environment = thisProjectEnvironment.Name,\n            DeployAccessLevels = new GitLab.Inputs.ProjectProtectedEnvironmentDeployAccessLevelsArgs\n            {\n                GroupId = gitlab_group.Test.Id,\n            },\n        });\n        var thisGitlabIndex_projectProtectedEnvironmentProjectProtectedEnvironment = new GitLab.ProjectProtectedEnvironment(\"thisGitlabIndex/projectProtectedEnvironmentProjectProtectedEnvironment\", new GitLab.ProjectProtectedEnvironmentArgs\n        {\n            Project = thisProject.Id,\n            Environment = thisProjectEnvironment.Name,\n            DeployAccessLevels = new GitLab.Inputs.ProjectProtectedEnvironmentDeployAccessLevelsArgs\n            {\n                UserId = gitlab_user.Test.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisGroup, err := gitlab.NewGroup(ctx, \"thisGroup\", \u0026gitlab.GroupArgs{\n\t\t\tPath:        pulumi.String(\"example\"),\n\t\t\tDescription: pulumi.String(\"An example group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisProject, err := gitlab.NewProject(ctx, \"thisProject\", \u0026gitlab.ProjectArgs{\n\t\t\tNamespaceId:          thisGroup.ID(),\n\t\t\tInitializeWithReadme: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisProjectEnvironment, err := gitlab.NewProjectEnvironment(ctx, \"thisProjectEnvironment\", \u0026gitlab.ProjectEnvironmentArgs{\n\t\t\tProject:     thisProject.ID(),\n\t\t\tExternalUrl: pulumi.String(\"www.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectProtectedEnvironment(ctx, \"thisProjectProtectedEnvironment\", \u0026gitlab.ProjectProtectedEnvironmentArgs{\n\t\t\tProject:     thisProject.ID(),\n\t\t\tEnvironment: thisProjectEnvironment.Name,\n\t\t\tDeployAccessLevels: \u0026ProjectProtectedEnvironmentDeployAccessLevelsArgs{\n\t\t\t\tAccessLevel: pulumi.String(\"developer\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectProtectedEnvironment(ctx, \"thisIndex/projectProtectedEnvironmentProjectProtectedEnvironment\", \u0026gitlab.ProjectProtectedEnvironmentArgs{\n\t\t\tProject:     thisProject.ID(),\n\t\t\tEnvironment: thisProjectEnvironment.Name,\n\t\t\tDeployAccessLevels: \u0026ProjectProtectedEnvironmentDeployAccessLevelsArgs{\n\t\t\t\tGroupId: pulumi.Any(gitlab_group.Test.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectProtectedEnvironment(ctx, \"thisGitlabIndex/projectProtectedEnvironmentProjectProtectedEnvironment\", \u0026gitlab.ProjectProtectedEnvironmentArgs{\n\t\t\tProject:     thisProject.ID(),\n\t\t\tEnvironment: thisProjectEnvironment.Name,\n\t\t\tDeployAccessLevels: \u0026ProjectProtectedEnvironmentDeployAccessLevelsArgs{\n\t\t\t\tUserId: pulumi.Any(gitlab_user.Test.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab protected environments can be imported using an id made up of `projectId:environmentName`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectProtectedEnvironment:ProjectProtectedEnvironment bar 123:production\n```\n\n ",
            "properties": {
                "deployAccessLevels": {
                    "$ref": "#/types/gitlab:index/ProjectProtectedEnvironmentDeployAccessLevels:ProjectProtectedEnvironmentDeployAccessLevels",
                    "description": "Array of access levels allowed to deploy, with each described by a hash.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or full path of the project which the protected environment is created against.\n"
                }
            },
            "required": [
                "deployAccessLevels",
                "environment",
                "project"
            ],
            "inputProperties": {
                "deployAccessLevels": {
                    "$ref": "#/types/gitlab:index/ProjectProtectedEnvironmentDeployAccessLevels:ProjectProtectedEnvironmentDeployAccessLevels",
                    "description": "Array of access levels allowed to deploy, with each described by a hash.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or full path of the project which the protected environment is created against.\n"
                }
            },
            "requiredInputs": [
                "deployAccessLevels",
                "environment",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectProtectedEnvironment resources.\n",
                "properties": {
                    "deployAccessLevels": {
                        "$ref": "#/types/gitlab:index/ProjectProtectedEnvironmentDeployAccessLevels:ProjectProtectedEnvironmentDeployAccessLevels",
                        "description": "Array of access levels allowed to deploy, with each described by a hash.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The ID or full path of the project which the protected environment is created against.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectShareGroup:ProjectShareGroup": {
            "description": "The `gitlab.ProjectShareGroup` resource allows to manage the lifecycle of project shared with a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#share-project-with-group)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.ProjectShareGroup(\"test\", {\n    groupAccess: \"guest\",\n    groupId: 1337,\n    projectId: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.ProjectShareGroup(\"test\",\n    group_access=\"guest\",\n    group_id=1337,\n    project_id=\"12345\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.ProjectShareGroup(\"test\", new GitLab.ProjectShareGroupArgs\n        {\n            GroupAccess = \"guest\",\n            GroupId = 1337,\n            ProjectId = \"12345\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectShareGroup(ctx, \"test\", \u0026gitlab.ProjectShareGroupArgs{\n\t\t\tGroupAccess: pulumi.String(\"guest\"),\n\t\t\tGroupId:     pulumi.Int(1337),\n\t\t\tProjectId:   pulumi.String(\"12345\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project group shares can be imported using an id made up of `projectid:groupid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectShareGroup:ProjectShareGroup test 12345:1337\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `master`\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                }
            },
            "required": [
                "groupId",
                "projectId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `master`\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                }
            },
            "requiredInputs": [
                "groupId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectShareGroup resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `master`\n",
                        "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                    },
                    "groupAccess": {
                        "type": "string",
                        "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`,\n`developer`, `maintainer`, `master`\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The id of the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectTag:ProjectTag": {
            "description": "The `gitlab.ProjectTag` resource allows to manage the lifecycle of a tag in a project.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// Create a project for the tag to use\nconst exampleProject = new gitlab.Project(\"exampleProject\", {\n    description: \"An example project\",\n    namespaceId: gitlab_group.example.id,\n});\nconst exampleProjectTag = new gitlab.ProjectTag(\"exampleProjectTag\", {\n    ref: \"main\",\n    project: exampleProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\n# Create a project for the tag to use\nexample_project = gitlab.Project(\"exampleProject\",\n    description=\"An example project\",\n    namespace_id=gitlab_group[\"example\"][\"id\"])\nexample_project_tag = gitlab.ProjectTag(\"exampleProjectTag\",\n    ref=\"main\",\n    project=example_project.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a project for the tag to use\n        var exampleProject = new GitLab.Project(\"exampleProject\", new GitLab.ProjectArgs\n        {\n            Description = \"An example project\",\n            NamespaceId = gitlab_group.Example.Id,\n        });\n        var exampleProjectTag = new GitLab.ProjectTag(\"exampleProjectTag\", new GitLab.ProjectTagArgs\n        {\n            Ref = \"main\",\n            Project = exampleProject.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := gitlab.NewProject(ctx, \"exampleProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"An example project\"),\n\t\t\tNamespaceId: pulumi.Any(gitlab_group.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectTag(ctx, \"exampleProjectTag\", \u0026gitlab.ProjectTagArgs{\n\t\t\tRef:     pulumi.String(\"main\"),\n\t\t\tProject: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Gitlab project tags can be imported with a key composed of `\u003cproject_id\u003e:\u003ctag_name\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectTag:ProjectTag example \"12345:develop\"\n```\n\n # NOTEthe `ref` attribute won't be available for imported `gitlab_project_tag` resources. ",
            "properties": {
                "commits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/ProjectTagCommit:ProjectTagCommit"
                    },
                    "description": "The commit associated with the tag.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message of the annotated tag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of a tag.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "Bool, true if tag has tag protection.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.\n"
                },
                "releases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/ProjectTagRelease:ProjectTagRelease"
                    },
                    "description": "The release associated with the tag.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The unique id assigned to the commit by Gitlab.\n"
                }
            },
            "required": [
                "commits",
                "name",
                "project",
                "protected",
                "ref",
                "releases",
                "target"
            ],
            "inputProperties": {
                "message": {
                    "type": "string",
                    "description": "The message of the annotated tag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of a tag.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID or URL-encoded path of the project owned by the authenticated user.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.\n"
                }
            },
            "requiredInputs": [
                "project",
                "ref"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectTag resources.\n",
                "properties": {
                    "commits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/ProjectTagCommit:ProjectTagCommit"
                        },
                        "description": "The commit associated with the tag.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The message of the annotated tag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of a tag.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "Bool, true if tag has tag protection.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.\n"
                    },
                    "releases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/ProjectTagRelease:ProjectTagRelease"
                        },
                        "description": "The release associated with the tag.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "The unique id assigned to the commit by Gitlab.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectVariable:ProjectVariable": {
            "description": "The `gitlab.ProjectVariable` resource allows to manage the lifecycle of a CI/CD variable for a project.\n\n\u003e **Important:** If your GitLab version is older than 13.4, you may see nondeterministic behavior when updating or deleting gitlab.ProjectVariable resources with non-unique keys, for example if there is another variable with the same key and different environment scope. See [this GitLab issue](https://gitlab.com/gitlab-org/gitlab/-/issues/9912).\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.ProjectVariable(\"example\", {\n    key: \"project_variable_key\",\n    project: \"12345\",\n    protected: false,\n    value: \"project_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.ProjectVariable(\"example\",\n    key=\"project_variable_key\",\n    project=\"12345\",\n    protected=False,\n    value=\"project_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.ProjectVariable(\"example\", new GitLab.ProjectVariableArgs\n        {\n            Key = \"project_variable_key\",\n            Project = \"12345\",\n            Protected = false,\n            Value = \"project_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectVariable(ctx, \"example\", \u0026gitlab.ProjectVariableArgs{\n\t\t\tKey:       pulumi.String(\"project_variable_key\"),\n\t\t\tProject:   pulumi.String(\"12345\"),\n\t\t\tProtected: pulumi.Bool(false),\n\t\t\tValue:     pulumi.String(\"project_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project variables can be imported using an id made up of `project:key:environment_scope`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectVariable:ProjectVariable example '12345:project_variable_key:*'\n```\n\n ",
            "properties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment_scope of the variable. Defaults to `*`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "key",
                "project",
                "value"
            ],
            "inputProperties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment_scope of the variable. Defaults to `*`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectVariable resources.\n",
                "properties": {
                    "environmentScope": {
                        "type": "string",
                        "description": "The environment_scope of the variable. Defaults to `*`.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to\n`false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/repositoryFile:RepositoryFile": {
            "description": "\n\n## Import\n\n# A Repository File can be imported using an id made up of `\u003cproject-id\u003e:\u003cbranch-name\u003e:\u003cfile-path\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/repositoryFile:RepositoryFile this 1:main:foo/bar.txt\n```\n\n ",
            "properties": {
                "authorEmail": {
                    "type": "string",
                    "description": "Email of the commit author.\n"
                },
                "authorName": {
                    "type": "string",
                    "description": "Name of the commit author.\n"
                },
                "blobId": {
                    "type": "string",
                    "description": "The blob id.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch to which to commit to.\n"
                },
                "commitId": {
                    "type": "string",
                    "description": "The commit id.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message.\n"
                },
                "content": {
                    "type": "string",
                    "description": "File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently\nsupported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).\n"
                },
                "contentSha256": {
                    "type": "string",
                    "description": "File content sha256 digest.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "The file content encoding.\n"
                },
                "fileName": {
                    "type": "string",
                    "description": "The filename.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "The last known commit id.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or ID of the project.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The name of branch, tag or commit.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The file size.\n"
                },
                "startBranch": {
                    "type": "string",
                    "description": "Name of the branch to start the new commit from.\n"
                }
            },
            "required": [
                "blobId",
                "branch",
                "commitId",
                "commitMessage",
                "content",
                "contentSha256",
                "encoding",
                "fileName",
                "filePath",
                "lastCommitId",
                "project",
                "ref",
                "size"
            ],
            "inputProperties": {
                "authorEmail": {
                    "type": "string",
                    "description": "Email of the commit author.\n"
                },
                "authorName": {
                    "type": "string",
                    "description": "Name of the commit author.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch to which to commit to.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message.\n"
                },
                "content": {
                    "type": "string",
                    "description": "File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently\nsupported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or ID of the project.\n"
                },
                "startBranch": {
                    "type": "string",
                    "description": "Name of the branch to start the new commit from.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "commitMessage",
                "content",
                "filePath",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryFile resources.\n",
                "properties": {
                    "authorEmail": {
                        "type": "string",
                        "description": "Email of the commit author.\n"
                    },
                    "authorName": {
                        "type": "string",
                        "description": "Name of the commit author.\n"
                    },
                    "blobId": {
                        "type": "string",
                        "description": "The blob id.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Name of the branch to which to commit to.\n"
                    },
                    "commitId": {
                        "type": "string",
                        "description": "The commit id.\n"
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "Commit message.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently\nsupported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).\n"
                    },
                    "contentSha256": {
                        "type": "string",
                        "description": "File content sha256 digest.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "The file content encoding.\n"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The filename.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.\n"
                    },
                    "lastCommitId": {
                        "type": "string",
                        "description": "The last known commit id.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or ID of the project.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The name of branch, tag or commit.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The file size.\n"
                    },
                    "startBranch": {
                        "type": "string",
                        "description": "Name of the branch to start the new commit from.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceGithub:ServiceGithub": {
            "description": "The `gitlab.ServiceGithub` resource allows to manage the lifecycle of a project integration with GitHub.\n\n\u003e This resource requires a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#github)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst github = new gitlab.ServiceGithub(\"github\", {\n    project: awesomeProject.id,\n    token: \"REDACTED\",\n    repositoryUrl: \"https://github.com/gitlabhq/terraform-provider-gitlab\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\ngithub = gitlab.ServiceGithub(\"github\",\n    project=awesome_project.id,\n    token=\"REDACTED\",\n    repository_url=\"https://github.com/gitlabhq/terraform-provider-gitlab\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var github = new GitLab.ServiceGithub(\"github\", new GitLab.ServiceGithubArgs\n        {\n            Project = awesomeProject.Id,\n            Token = \"REDACTED\",\n            RepositoryUrl = \"https://github.com/gitlabhq/terraform-provider-gitlab\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceGithub(ctx, \"github\", \u0026gitlab.ServiceGithubArgs{\n\t\t\tProject:       awesomeProject.ID(),\n\t\t\tToken:         pulumi.String(\"REDACTED\"),\n\t\t\tRepositoryUrl: pulumi.String(\"https://github.com/gitlabhq/terraform-provider-gitlab\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/serviceGithub:ServiceGithub # You can import a service_github state using `\u003cresource\u003e \u003cproject_id\u003e`\n```\n\n\n\n```sh\n $ pulumi import gitlab:index/serviceGithub:ServiceGithub github 1\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the integration is active.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.\n"
                },
                "staticContext": {
                    "type": "boolean",
                    "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub.\nSee [Static / dynamic status check names] to learn more.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time.\n"
                }
            },
            "required": [
                "active",
                "createdAt",
                "project",
                "repositoryUrl",
                "title",
                "token",
                "updatedAt"
            ],
            "inputProperties": {
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.\n"
                },
                "staticContext": {
                    "type": "boolean",
                    "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub.\nSee [Static / dynamic status check names] to learn more.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                }
            },
            "requiredInputs": [
                "project",
                "repositoryUrl",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceGithub resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the integration is active.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "repositoryUrl": {
                        "type": "string",
                        "description": "The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.\n"
                    },
                    "staticContext": {
                        "type": "boolean",
                        "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub.\nSee [Static / dynamic status check names] to learn more.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceJira:ServiceJira": {
            "description": "The `gitlab.ServiceJira` resource allows to manage the lifecycle of a project integration with Jira.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/services.html#jira)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst jira = new gitlab.ServiceJira(\"jira\", {\n    project: awesomeProject.id,\n    url: \"https://jira.example.com\",\n    username: \"user\",\n    password: \"mypass\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\njira = gitlab.ServiceJira(\"jira\",\n    project=awesome_project.id,\n    url=\"https://jira.example.com\",\n    username=\"user\",\n    password=\"mypass\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var jira = new GitLab.ServiceJira(\"jira\", new GitLab.ServiceJiraArgs\n        {\n            Project = awesomeProject.Id,\n            Url = \"https://jira.example.com\",\n            Username = \"user\",\n            Password = \"mypass\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceJira(ctx, \"jira\", \u0026gitlab.ServiceJiraArgs{\n\t\t\tProject:  awesomeProject.ID(),\n\t\t\tUrl:      pulumi.String(\"https://jira.example.com\"),\n\t\t\tUsername: pulumi.String(\"user\"),\n\t\t\tPassword: pulumi.String(\"mypass\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a service_jira state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/serviceJira:ServiceJira jira 1\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the integration is active.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.\n"
                },
                "commentOnEventEnabled": {
                    "type": "boolean",
                    "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                },
                "commitEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for commit events\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "jiraIssueTransitionId": {
                    "type": "string",
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow\nadministration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your\nproject. By default, this ID is set to 2.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user created to be used with GitLab/JIRA.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag_push events.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user created to be used with GitLab/JIRA.\n"
                }
            },
            "required": [
                "active",
                "apiUrl",
                "commentOnEventEnabled",
                "commitEvents",
                "createdAt",
                "issuesEvents",
                "jobEvents",
                "mergeRequestsEvents",
                "noteEvents",
                "password",
                "pipelineEvents",
                "project",
                "pushEvents",
                "tagPushEvents",
                "title",
                "updatedAt",
                "url",
                "username"
            ],
            "inputProperties": {
                "apiUrl": {
                    "type": "string",
                    "description": "The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.\n"
                },
                "commentOnEventEnabled": {
                    "type": "boolean",
                    "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                },
                "commitEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for commit events\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "jiraIssueTransitionId": {
                    "type": "string",
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow\nadministration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your\nproject. By default, this ID is set to 2.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user created to be used with GitLab/JIRA.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag_push events.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user created to be used with GitLab/JIRA.\n"
                }
            },
            "requiredInputs": [
                "password",
                "project",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceJira resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the integration is active.\n"
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.\n"
                    },
                    "commentOnEventEnabled": {
                        "type": "boolean",
                        "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                    },
                    "commitEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for commit events\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for issues events.\n"
                    },
                    "jiraIssueTransitionId": {
                        "type": "string",
                        "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow\nadministration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your\nproject. By default, this ID is set to 2.\n"
                    },
                    "jobEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for job events.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge request events\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for note events.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user created to be used with GitLab/JIRA.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for push events.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for tag_push events.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user created to be used with GitLab/JIRA.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceMicrosoftTeams:ServiceMicrosoftTeams": {
            "description": "The `gitlab.ServiceMicrosoftTeams` resource allows to manage the lifecycle of a project integration with Microsoft Teams.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#microsoft-teams)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst teams = new gitlab.ServiceMicrosoftTeams(\"teams\", {\n    project: awesomeProject.id,\n    webhook: \"https://testurl.com/?token=XYZ\",\n    pushEvents: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\nteams = gitlab.ServiceMicrosoftTeams(\"teams\",\n    project=awesome_project.id,\n    webhook=\"https://testurl.com/?token=XYZ\",\n    push_events=True)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var teams = new GitLab.ServiceMicrosoftTeams(\"teams\", new GitLab.ServiceMicrosoftTeamsArgs\n        {\n            Project = awesomeProject.Id,\n            Webhook = \"https://testurl.com/?token=XYZ\",\n            PushEvents = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceMicrosoftTeams(ctx, \"teams\", \u0026gitlab.ServiceMicrosoftTeamsArgs{\n\t\t\tProject:    awesomeProject.ID(),\n\t\t\tWebhook:    pulumi.String(\"https://testurl.com/?token=XYZ\"),\n\t\t\tPushEvents: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a service_microsoft_teams state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/serviceMicrosoftTeams:ServiceMicrosoftTeams teams 1\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the integration is active.\n"
                },
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are “all”, “default”, “protected”, and\n“default_and_protected”. The default value is “default”\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issue events\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issue events\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events\n"
                }
            },
            "required": [
                "active",
                "createdAt",
                "project",
                "updatedAt",
                "webhook"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are “all”, “default”, “protected”, and\n“default_and_protected”. The default value is “default”\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issue events\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issue events\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events\n"
                }
            },
            "requiredInputs": [
                "project",
                "webhook"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceMicrosoftTeams resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the integration is active.\n"
                    },
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are “all”, “default”, “protected”, and\n“default_and_protected”. The default value is “default”\n"
                    },
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential issue events\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential note events\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for issue events\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge request events\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for note events\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Send notifications for broken pipelines\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for pipeline events\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for push events\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for tag push events\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time.\n"
                    },
                    "webhook": {
                        "type": "string",
                        "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for wiki page events\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/servicePipelinesEmail:ServicePipelinesEmail": {
            "description": "The `gitlab.ServicePipelinesEmail` resource allows to manage the lifecycle of a project integration with Pipeline Emails Service.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#pipeline-emails)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst email = new gitlab.ServicePipelinesEmail(\"email\", {\n    project: awesomeProject.id,\n    recipients: [\"gitlab@user.create\"],\n    notifyOnlyBrokenPipelines: true,\n    branchesToBeNotified: \"all\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\nemail = gitlab.ServicePipelinesEmail(\"email\",\n    project=awesome_project.id,\n    recipients=[\"gitlab@user.create\"],\n    notify_only_broken_pipelines=True,\n    branches_to_be_notified=\"all\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var email = new GitLab.ServicePipelinesEmail(\"email\", new GitLab.ServicePipelinesEmailArgs\n        {\n            Project = awesomeProject.Id,\n            Recipients = \n            {\n                \"gitlab@user.create\",\n            },\n            NotifyOnlyBrokenPipelines = true,\n            BranchesToBeNotified = \"all\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServicePipelinesEmail(ctx, \"email\", \u0026gitlab.ServicePipelinesEmailArgs{\n\t\t\tProject: awesomeProject.ID(),\n\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"gitlab@user.create\"),\n\t\t\t},\n\t\t\tNotifyOnlyBrokenPipelines: pulumi.Bool(true),\n\t\t\tBranchesToBeNotified:      pulumi.String(\"all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a gitlab_service_pipelines_email state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/servicePipelinesEmail:ServicePipelinesEmail email 1\n```\n\n ",
            "properties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`.\nDefault is `default`\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Notify only broken pipelines. Default is true.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") email addresses where notifications are sent.\n"
                }
            },
            "required": [
                "project",
                "recipients"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`.\nDefault is `default`\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Notify only broken pipelines. Default is true.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") email addresses where notifications are sent.\n"
                }
            },
            "requiredInputs": [
                "project",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePipelinesEmail resources.\n",
                "properties": {
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`.\nDefault is `default`\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Notify only broken pipelines. Default is true.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ") email addresses where notifications are sent.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceSlack:ServiceSlack": {
            "description": "The `gitlab.ServiceSlack` resource allows to manage the lifecycle of a project integration with Slack.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#slack-notifications)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst slack = new gitlab.ServiceSlack(\"slack\", {\n    project: awesomeProject.id,\n    webhook: \"https://webhook.com\",\n    username: \"myuser\",\n    pushEvents: true,\n    pushChannel: \"push_chan\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\nslack = gitlab.ServiceSlack(\"slack\",\n    project=awesome_project.id,\n    webhook=\"https://webhook.com\",\n    username=\"myuser\",\n    push_events=True,\n    push_channel=\"push_chan\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var slack = new GitLab.ServiceSlack(\"slack\", new GitLab.ServiceSlackArgs\n        {\n            Project = awesomeProject.Id,\n            Webhook = \"https://webhook.com\",\n            Username = \"myuser\",\n            PushEvents = true,\n            PushChannel = \"push_chan\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceSlack(ctx, \"slack\", \u0026gitlab.ServiceSlackArgs{\n\t\t\tProject:     awesomeProject.ID(),\n\t\t\tWebhook:     pulumi.String(\"https://webhook.com\"),\n\t\t\tUsername:    pulumi.String(\"myuser\"),\n\t\t\tPushEvents:  pulumi.Bool(true),\n\t\t\tPushChannel: pulumi.String(\"push_chan\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a gitlab_service_slack.slack state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/serviceSlack:ServiceSlack email 1\n```\n\n ",
            "properties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default_and_protected\".\n"
                },
                "confidentialIssueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive confidential issue events notifications.\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events.\n"
                },
                "issueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive issue events notifications.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for job events. **ATTENTION**: This attribute is currently not being submitted to the GitLab API,\ndue to https://github.com/xanzy/go-gitlab/issues/1354.\n"
                },
                "mergeRequestChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive merge request events notifications.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge requests events.\n"
                },
                "noteChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive note events notifications.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines.\n"
                },
                "notifyOnlyDefaultBranch": {
                    "type": "boolean",
                    "description": "This parameter has been replaced with `branches_to_be_notified`.\n",
                    "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                },
                "pipelineChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive pipeline events notifications.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive push events notifications.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive tag push events notifications.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                },
                "wikiPageChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive wiki page events notifications.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events.\n"
                }
            },
            "required": [
                "branchesToBeNotified",
                "confidentialIssuesEvents",
                "confidentialNoteEvents",
                "issuesEvents",
                "jobEvents",
                "mergeRequestsEvents",
                "noteEvents",
                "notifyOnlyBrokenPipelines",
                "notifyOnlyDefaultBranch",
                "pipelineEvents",
                "project",
                "pushEvents",
                "tagPushEvents",
                "webhook",
                "wikiPageEvents"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default_and_protected\".\n"
                },
                "confidentialIssueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive confidential issue events notifications.\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events.\n"
                },
                "issueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive issue events notifications.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "mergeRequestChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive merge request events notifications.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge requests events.\n"
                },
                "noteChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive note events notifications.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines.\n"
                },
                "notifyOnlyDefaultBranch": {
                    "type": "boolean",
                    "description": "This parameter has been replaced with `branches_to_be_notified`.\n",
                    "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                },
                "pipelineChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive pipeline events notifications.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive push events notifications.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive tag push events notifications.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                },
                "wikiPageChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive wiki page events notifications.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events.\n"
                }
            },
            "requiredInputs": [
                "project",
                "webhook"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceSlack resources.\n",
                "properties": {
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default_and_protected\".\n"
                    },
                    "confidentialIssueChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive confidential issue events notifications.\n"
                    },
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential issues events.\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential note events.\n"
                    },
                    "issueChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive issue events notifications.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for issues events.\n"
                    },
                    "jobEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for job events. **ATTENTION**: This attribute is currently not being submitted to the GitLab API,\ndue to https://github.com/xanzy/go-gitlab/issues/1354.\n"
                    },
                    "mergeRequestChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive merge request events notifications.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge requests events.\n"
                    },
                    "noteChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive note events notifications.\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for note events.\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Send notifications for broken pipelines.\n"
                    },
                    "notifyOnlyDefaultBranch": {
                        "type": "boolean",
                        "description": "This parameter has been replaced with `branches_to_be_notified`.\n",
                        "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                    },
                    "pipelineChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive pipeline events notifications.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "pushChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive push events notifications.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for push events.\n"
                    },
                    "tagPushChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive tag push events notifications.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for tag push events.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use.\n"
                    },
                    "webhook": {
                        "type": "string",
                        "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                    },
                    "wikiPageChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive wiki page events notifications.\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for wiki page events.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/systemHook:SystemHook": {
            "description": "The `gitlab.SystemHook` resource allows to manage the lifecycle of a system hook.\n\n\u003e This resource requires GitLab 14.9\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/system_hooks.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.SystemHook(\"example\", {\n    enableSslVerification: true,\n    mergeRequestsEvents: true,\n    pushEvents: true,\n    repositoryUpdateEvents: true,\n    tagPushEvents: true,\n    token: \"secret-token\",\n    url: \"https://example.com/hook-%d\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.SystemHook(\"example\",\n    enable_ssl_verification=True,\n    merge_requests_events=True,\n    push_events=True,\n    repository_update_events=True,\n    tag_push_events=True,\n    token=\"secret-token\",\n    url=\"https://example.com/hook-%d\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.SystemHook(\"example\", new GitLab.SystemHookArgs\n        {\n            EnableSslVerification = true,\n            MergeRequestsEvents = true,\n            PushEvents = true,\n            RepositoryUpdateEvents = true,\n            TagPushEvents = true,\n            Token = \"secret-token\",\n            Url = \"https://example.com/hook-%d\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewSystemHook(ctx, \"example\", \u0026gitlab.SystemHookArgs{\n\t\t\tEnableSslVerification:  pulumi.Bool(true),\n\t\t\tMergeRequestsEvents:    pulumi.Bool(true),\n\t\t\tPushEvents:             pulumi.Bool(true),\n\t\t\tRepositoryUpdateEvents: pulumi.Bool(true),\n\t\t\tTagPushEvents:          pulumi.Bool(true),\n\t\t\tToken:                  pulumi.String(\"secret-token\"),\n\t\t\tUrl:                    pulumi.String(fmt.Sprintf(\"%v%v%v\", \"https://example.com/hook-\", \"%\", \"d\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a system hook using the hook id `{hook-id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/systemHook:SystemHook example 42\n```\n\n # NOTEthe `token` attribute won't be available for imported resources. ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the hook was created in ISO8601 format.\n"
                },
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Do SSL verification when triggering the hook.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Trigger hook on merge requests events.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "When true, the hook fires on push events.\n"
                },
                "repositoryUpdateEvents": {
                    "type": "boolean",
                    "description": "Trigger hook on repository update events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "When true, the hook fires on new tags being pushed.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for\nimported resources.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The hook URL.\n"
                }
            },
            "required": [
                "createdAt",
                "url"
            ],
            "inputProperties": {
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Do SSL verification when triggering the hook.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Trigger hook on merge requests events.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "When true, the hook fires on push events.\n"
                },
                "repositoryUpdateEvents": {
                    "type": "boolean",
                    "description": "Trigger hook on repository update events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "When true, the hook fires on new tags being pushed.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for\nimported resources.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The hook URL.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SystemHook resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the hook was created in ISO8601 format.\n"
                    },
                    "enableSslVerification": {
                        "type": "boolean",
                        "description": "Do SSL verification when triggering the hook.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Trigger hook on merge requests events.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "When true, the hook fires on push events.\n"
                    },
                    "repositoryUpdateEvents": {
                        "type": "boolean",
                        "description": "Trigger hook on repository update events.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "When true, the hook fires on new tags being pushed.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for\nimported resources.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The hook URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/tagProtection:TagProtection": {
            "description": "The `gitlab.TagProtection` resource allows to manage the lifecycle of a tag protection.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_tags.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst tagProtect = new gitlab.TagProtection(\"TagProtect\", {\n    createAccessLevel: \"developer\",\n    project: \"12345\",\n    tag: \"TagProtected\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntag_protect = gitlab.TagProtection(\"tagProtect\",\n    create_access_level=\"developer\",\n    project=\"12345\",\n    tag=\"TagProtected\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tagProtect = new GitLab.TagProtection(\"tagProtect\", new GitLab.TagProtectionArgs\n        {\n            CreateAccessLevel = \"developer\",\n            Project = \"12345\",\n            Tag = \"TagProtected\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewTagProtection(ctx, \"tagProtect\", \u0026gitlab.TagProtectionArgs{\n\t\t\tCreateAccessLevel: pulumi.String(\"developer\"),\n\t\t\tProject:           pulumi.String(\"12345\"),\n\t\t\tTag:               pulumi.String(\"TagProtected\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Tag protections can be imported using an id made up of `project_id:tag_name`, e.g.\n\n```sh\n $ pulumi import gitlab:index/tagProtection:TagProtection example 123456789:v1.0.0\n```\n\n ",
            "properties": {
                "createAccessLevel": {
                    "type": "string",
                    "description": "Access levels which are allowed to create. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Name of the tag or wildcard.\n"
                }
            },
            "required": [
                "createAccessLevel",
                "project",
                "tag"
            ],
            "inputProperties": {
                "createAccessLevel": {
                    "type": "string",
                    "description": "Access levels which are allowed to create. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Name of the tag or wildcard.\n"
                }
            },
            "requiredInputs": [
                "createAccessLevel",
                "project",
                "tag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagProtection resources.\n",
                "properties": {
                    "createAccessLevel": {
                        "type": "string",
                        "description": "Access levels which are allowed to create. Valid values are: `no one`, `developer`, `maintainer`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Name of the tag or wildcard.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/topic:Topic": {
            "description": "The `gitlab.Topic` resource allows to manage the lifecycle of topics that are then assignable to projects.\n\n\u003e Topics are the successors for project tags. Aside from avoiding terminology collisions with Git tags, they are more descriptive and better searchable.\n\n\u003e Deleting a topic was implemented in GitLab 14.9. For older versions of GitLab set `soft_destroy = true` to empty out a topic instead of deleting it.\n\n**Upstream API**: [GitLab REST API docs for topics](https://docs.gitlab.com/ee/api/topics.html)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/topic:Topic # You can import a topic to terraform state using `\u003cresource\u003e \u003cid\u003e`.\n```\n\n # The `id` must be an integer for the id of the topic you want to import, # for example\n\n```sh\n $ pulumi import gitlab:index/topic:Topic functional_programming 1\n```\n\n ",
            "properties": {
                "avatar": {
                    "type": "string",
                    "description": "A local path to the avatar image to upload. **Note**: not available for imported resources.\n"
                },
                "avatarHash": {
                    "type": "string",
                    "description": "The hash of the avatar image. Use `filesha256(\"path/to/avatar.png\")` whenever possible. **Note**: this is used to\ntrigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.\n"
                },
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of the avatar image.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A text describing the topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The topic's name.\n"
                },
                "softDestroy": {
                    "type": "boolean",
                    "description": "Empty the topics fields instead of deleting it.\n",
                    "deprecationMessage": "GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed."
                }
            },
            "required": [
                "avatarHash",
                "avatarUrl",
                "name"
            ],
            "inputProperties": {
                "avatar": {
                    "type": "string",
                    "description": "A local path to the avatar image to upload. **Note**: not available for imported resources.\n"
                },
                "avatarHash": {
                    "type": "string",
                    "description": "The hash of the avatar image. Use `filesha256(\"path/to/avatar.png\")` whenever possible. **Note**: this is used to\ntrigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A text describing the topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The topic's name.\n"
                },
                "softDestroy": {
                    "type": "boolean",
                    "description": "Empty the topics fields instead of deleting it.\n",
                    "deprecationMessage": "GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed."
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Topic resources.\n",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "description": "A local path to the avatar image to upload. **Note**: not available for imported resources.\n"
                    },
                    "avatarHash": {
                        "type": "string",
                        "description": "The hash of the avatar image. Use `filesha256(\"path/to/avatar.png\")` whenever possible. **Note**: this is used to\ntrigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.\n"
                    },
                    "avatarUrl": {
                        "type": "string",
                        "description": "The URL of the avatar image.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A text describing the topic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The topic's name.\n"
                    },
                    "softDestroy": {
                        "type": "boolean",
                        "description": "Empty the topics fields instead of deleting it.\n",
                        "deprecationMessage": "GitLab 14.9 introduced the proper deletion of topics. This field is no longer needed."
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/user:User": {
            "description": "The `gitlab.User` resource allows to manage the lifecycle of a user.\n\n\u003e the provider needs to be configured with admin-level access for this resource to work.\n\n\u003e You must specify either password or reset_password.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.User(\"example\", {\n    canCreateGroup: false,\n    email: \"gitlab@user.create\",\n    isAdmin: true,\n    isExternal: true,\n    password: \"superPassword\",\n    projectsLimit: 4,\n    resetPassword: false,\n    username: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.User(\"example\",\n    can_create_group=False,\n    email=\"gitlab@user.create\",\n    is_admin=True,\n    is_external=True,\n    password=\"superPassword\",\n    projects_limit=4,\n    reset_password=False,\n    username=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.User(\"example\", new GitLab.UserArgs\n        {\n            CanCreateGroup = false,\n            Email = \"gitlab@user.create\",\n            IsAdmin = true,\n            IsExternal = true,\n            Password = \"superPassword\",\n            ProjectsLimit = 4,\n            ResetPassword = false,\n            Username = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewUser(ctx, \"example\", \u0026gitlab.UserArgs{\n\t\t\tCanCreateGroup: pulumi.Bool(false),\n\t\t\tEmail:          pulumi.String(\"gitlab@user.create\"),\n\t\t\tIsAdmin:        pulumi.Bool(true),\n\t\t\tIsExternal:     pulumi.Bool(true),\n\t\t\tPassword:       pulumi.String(\"superPassword\"),\n\t\t\tProjectsLimit:  pulumi.Int(4),\n\t\t\tResetPassword:  pulumi.Bool(false),\n\t\t\tUsername:       pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/user:User # You can import a user to terraform state using `\u003cresource\u003e \u003cid\u003e`.\n```\n\n # The `id` must be an integer for the id of the user you want to import, # for example\n\n```sh\n $ pulumi import gitlab:index/user:User example 42\n```\n\n ",
            "properties": {
                "canCreateGroup": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to enable administrative privileges\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only\naccess projects to which they are explicitly granted access.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note associated to the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n"
                },
                "projectsLimit": {
                    "type": "integer",
                    "description": "Integer, defaults to 0. Number of projects user can create.\n"
                },
                "resetPassword": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Send user password reset link.\n"
                },
                "skipConfirmation": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                },
                "state": {
                    "type": "string",
                    "description": "String, defaults to 'active'. The state of the user account. Valid values are `active`, `deactivated`, `blocked`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                }
            },
            "required": [
                "email",
                "name",
                "username"
            ],
            "inputProperties": {
                "canCreateGroup": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to enable administrative privileges\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only\naccess projects to which they are explicitly granted access.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note associated to the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n"
                },
                "projectsLimit": {
                    "type": "integer",
                    "description": "Integer, defaults to 0. Number of projects user can create.\n"
                },
                "resetPassword": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Send user password reset link.\n"
                },
                "skipConfirmation": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                },
                "state": {
                    "type": "string",
                    "description": "String, defaults to 'active'. The state of the user account. Valid values are `active`, `deactivated`, `blocked`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                }
            },
            "requiredInputs": [
                "email",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "canCreateGroup": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The e-mail address of the user.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Whether to enable administrative privileges\n"
                    },
                    "isExternal": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only\naccess projects to which they are explicitly granted access.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "note": {
                        "type": "string",
                        "description": "The note associated to the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user.\n"
                    },
                    "projectsLimit": {
                        "type": "integer",
                        "description": "Integer, defaults to 0. Number of projects user can create.\n"
                    },
                    "resetPassword": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Send user password reset link.\n"
                    },
                    "skipConfirmation": {
                        "type": "boolean",
                        "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "String, defaults to 'active'. The state of the user account. Valid values are `active`, `deactivated`, `blocked`.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/userCustomAttribute:UserCustomAttribute": {
            "description": "The `gitlab.UserCustomAttribute` resource allows to manage custom attributes for a user.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst attr = new gitlab.UserCustomAttribute(\"attr\", {\n    key: \"location\",\n    user: 42,\n    value: \"Greenland\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nattr = gitlab.UserCustomAttribute(\"attr\",\n    key=\"location\",\n    user=42,\n    value=\"Greenland\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var attr = new GitLab.UserCustomAttribute(\"attr\", new GitLab.UserCustomAttributeArgs\n        {\n            Key = \"location\",\n            User = 42,\n            Value = \"Greenland\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewUserCustomAttribute(ctx, \"attr\", \u0026gitlab.UserCustomAttributeArgs{\n\t\t\tKey:   pulumi.String(\"location\"),\n\t\t\tUser:  pulumi.Int(42),\n\t\t\tValue: pulumi.String(\"Greenland\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a user custom attribute using an id made up of `{user-id}:{key}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/userCustomAttribute:UserCustomAttribute attr 42:location\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "user": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "required": [
                "key",
                "user",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "user": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "requiredInputs": [
                "key",
                "user",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserCustomAttribute resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key for the Custom Attribute.\n"
                    },
                    "user": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for the Custom Attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/userSshKey:UserSshKey": {
            "description": "The `gitlab.UserSshKey` resource allows to manage the lifecycle of an SSH key assigned to a user.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/users.html#single-ssh-key)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst exampleUser = gitlab.getUser({\n    username: \"example-user\",\n});\nconst exampleUserSshKey = new gitlab.UserSshKey(\"exampleUserSshKey\", {\n    userId: data.gitlab_user.id,\n    title: \"example-key\",\n    key: \"ssh-rsa AAAA...\",\n    expiresAt: \"2016-01-21T00:00:00.000Z\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_user = gitlab.get_user(username=\"example-user\")\nexample_user_ssh_key = gitlab.UserSshKey(\"exampleUserSshKey\",\n    user_id=data[\"gitlab_user\"][\"id\"],\n    title=\"example-key\",\n    key=\"ssh-rsa AAAA...\",\n    expires_at=\"2016-01-21T00:00:00.000Z\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUser = Output.Create(GitLab.GetUser.InvokeAsync(new GitLab.GetUserArgs\n        {\n            Username = \"example-user\",\n        }));\n        var exampleUserSshKey = new GitLab.UserSshKey(\"exampleUserSshKey\", new GitLab.UserSshKeyArgs\n        {\n            UserId = data.Gitlab_user.Id,\n            Title = \"example-key\",\n            Key = \"ssh-rsa AAAA...\",\n            ExpiresAt = \"2016-01-21T00:00:00.000Z\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tUsername: pulumi.StringRef(\"example-user\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewUserSshKey(ctx, \"exampleUserSshKey\", \u0026gitlab.UserSshKeyArgs{\n\t\t\tUserId:    pulumi.Any(data.Gitlab_user.Id),\n\t\t\tTitle:     pulumi.String(\"example-key\"),\n\t\t\tKey:       pulumi.String(\"ssh-rsa AAAA...\"),\n\t\t\tExpiresAt: pulumi.String(\"2016-01-21T00:00:00.000Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a user ssh key using an id made up of `{user-id}:{key}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/userSshKey:UserSshKey example 42:1\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The time when this key was created in GitLab.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with\nthe username and GitLab hostname.\n"
                },
                "keyId": {
                    "type": "integer",
                    "description": "The ID of the ssh key.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the ssh key.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The ID of the user to add the ssh key to.\n"
                }
            },
            "required": [
                "createdAt",
                "key",
                "keyId",
                "title",
                "userId"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with\nthe username and GitLab hostname.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the ssh key.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The ID of the user to add the ssh key to.\n"
                }
            },
            "requiredInputs": [
                "key",
                "title",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSshKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The time when this key was created in GitLab.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with\nthe username and GitLab hostname.\n"
                    },
                    "keyId": {
                        "type": "integer",
                        "description": "The ID of the ssh key.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the ssh key.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The ID of the user to add the ssh key to.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "gitlab:index/getBranch:getBranch": {
            "description": "The `gitlab.Branch` data source allows details of a repository branch to be retrieved by its name and project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// By project full path\nconst foo = pulumi.output(gitlab.getBranch({\n    name: \"example\",\n    project: \"foo/bar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_branch(name=\"example\",\n    project=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetBranch.InvokeAsync(new GitLab.GetBranchArgs\n        {\n            Name = \"example\",\n            Project = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupBranch(ctx, \u0026GetBranchArgs{\n\t\t\tName:    \"example\",\n\t\t\tProject: \"foo/bar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBranch.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranch.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean"
                    },
                    "commits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getBranchCommit:getBranchCommit"
                        }
                    },
                    "default": {
                        "type": "boolean"
                    },
                    "developerCanMerge": {
                        "type": "boolean"
                    },
                    "developerCanPush": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "merged": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "protected": {
                        "type": "boolean"
                    },
                    "webUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "canPush",
                    "commits",
                    "default",
                    "developerCanMerge",
                    "developerCanPush",
                    "merged",
                    "name",
                    "project",
                    "protected",
                    "webUrl",
                    "id"
                ]
            }
        },
        "gitlab:index/getGroup:getGroup": {
            "description": "The `gitlab.Group` data source allows details of a group to be retrieved by its id or full path.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// By group's full path\nconst foo = pulumi.output(gitlab.getGroup({\n    fullPath: \"foo/bar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_group(full_path=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs\n        {\n            FullPath = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tFullPath: pulumi.StringRef(\"foo/bar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "fullPath": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "defaultBranchProtection": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "fullPath": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "path": {
                        "type": "string"
                    },
                    "preventForkingOutsideGroup": {
                        "type": "boolean"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean"
                    },
                    "runnersToken": {
                        "type": "string"
                    },
                    "visibilityLevel": {
                        "type": "string"
                    },
                    "webUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "defaultBranchProtection",
                    "description",
                    "fullName",
                    "fullPath",
                    "groupId",
                    "lfsEnabled",
                    "name",
                    "parentId",
                    "path",
                    "preventForkingOutsideGroup",
                    "requestAccessEnabled",
                    "runnersToken",
                    "visibilityLevel",
                    "webUrl",
                    "id"
                ]
            }
        },
        "gitlab:index/getGroupMembership:getGroupMembership": {
            "description": "The `gitlab.GroupMembership` data source allows to list and filter all members of a group specified by either its id or full path.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// By group's full path\nconst example = pulumi.output(gitlab.getGroupMembership({\n    fullPath: \"foo/bar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_group_membership(full_path=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetGroupMembership.InvokeAsync(new GitLab.GetGroupMembershipArgs\n        {\n            FullPath = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupGroupMembership(ctx, \u0026GetGroupMembershipArgs{\n\t\t\tFullPath: pulumi.StringRef(\"foo/bar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroupMembership.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string"
                    },
                    "fullPath": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroupMembership.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string"
                    },
                    "fullPath": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getGroupMembershipMember:getGroupMembershipMember"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "accessLevel",
                    "fullPath",
                    "groupId",
                    "members",
                    "id"
                ]
            }
        },
        "gitlab:index/getInstanceDeployKeys:getInstanceDeployKeys": {
            "description": "The `gitlab.getInstanceDeployKeys` data source allows to retrieve a list of deploy keys for a GitLab instance.\n\n\u003e This data source requires administration privileges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// only public deploy keys\nconst example = pulumi.output(gitlab.getInstanceDeployKeys({\n    public: true,\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_instance_deploy_keys(public=True)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetInstanceDeployKeys.InvokeAsync(new GitLab.GetInstanceDeployKeysArgs\n        {\n            Public = true,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetInstanceDeployKeys(ctx, \u0026GetInstanceDeployKeysArgs{\n\t\t\tPublic: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceDeployKeys.\n",
                "properties": {
                    "public": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceDeployKeys.\n",
                "properties": {
                    "deployKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getInstanceDeployKeysDeployKey:getInstanceDeployKeysDeployKey"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "public": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "deployKeys",
                    "id"
                ]
            }
        },
        "gitlab:index/getProject:getProject": {
            "description": "The `gitlab.Project` data source allows details of a project to be retrieved by either its ID or its path with namespace.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProject({\n    id: \"foo/bar/baz\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project(id=\"foo/bar/baz\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs\n        {\n            Id = \"foo/bar/baz\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tId: pulumi.StringRef(\"foo/bar/baz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "pathWithNamespace": {
                        "type": "string"
                    },
                    "publicBuilds": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "analyticsAccessLevel": {
                        "type": "string"
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "autoCancelPendingPipelines": {
                        "type": "string"
                    },
                    "autoDevopsDeployStrategy": {
                        "type": "string"
                    },
                    "autoDevopsEnabled": {
                        "type": "boolean"
                    },
                    "autocloseReferencedIssues": {
                        "type": "boolean"
                    },
                    "buildGitStrategy": {
                        "type": "string"
                    },
                    "buildTimeout": {
                        "type": "integer"
                    },
                    "buildsAccessLevel": {
                        "type": "string"
                    },
                    "containerExpirationPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectContainerExpirationPolicy:getProjectContainerExpirationPolicy"
                        }
                    },
                    "containerRegistryAccessLevel": {
                        "type": "string"
                    },
                    "defaultBranch": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "emailsDisabled": {
                        "type": "boolean"
                    },
                    "externalAuthorizationClassificationLabel": {
                        "type": "string"
                    },
                    "forkingAccessLevel": {
                        "type": "string"
                    },
                    "httpUrlToRepo": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "issuesAccessLevel": {
                        "type": "string"
                    },
                    "issuesEnabled": {
                        "type": "boolean"
                    },
                    "lfsEnabled": {
                        "type": "boolean"
                    },
                    "mergeCommitTemplate": {
                        "type": "string"
                    },
                    "mergePipelinesEnabled": {
                        "type": "boolean"
                    },
                    "mergeRequestsAccessLevel": {
                        "type": "string"
                    },
                    "mergeRequestsEnabled": {
                        "type": "boolean"
                    },
                    "mergeTrainsEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "integer"
                    },
                    "operationsAccessLevel": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "pathWithNamespace": {
                        "type": "string"
                    },
                    "pipelinesEnabled": {
                        "type": "boolean"
                    },
                    "printingMergeRequestLinkEnabled": {
                        "type": "boolean"
                    },
                    "publicBuilds": {
                        "type": "boolean"
                    },
                    "pushRules": {
                        "$ref": "#/types/gitlab:index/getProjectPushRules:getProjectPushRules"
                    },
                    "removeSourceBranchAfterMerge": {
                        "type": "boolean"
                    },
                    "repositoryAccessLevel": {
                        "type": "string"
                    },
                    "repositoryStorage": {
                        "type": "string"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean"
                    },
                    "requirementsAccessLevel": {
                        "type": "string"
                    },
                    "resolveOutdatedDiffDiscussions": {
                        "type": "boolean"
                    },
                    "runnersToken": {
                        "type": "string"
                    },
                    "securityAndComplianceAccessLevel": {
                        "type": "string"
                    },
                    "snippetsAccessLevel": {
                        "type": "string"
                    },
                    "snippetsEnabled": {
                        "type": "boolean"
                    },
                    "squashCommitTemplate": {
                        "type": "string"
                    },
                    "sshUrlToRepo": {
                        "type": "string"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "visibilityLevel": {
                        "type": "string"
                    },
                    "webUrl": {
                        "type": "string"
                    },
                    "wikiAccessLevel": {
                        "type": "string"
                    },
                    "wikiEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "analyticsAccessLevel",
                    "archived",
                    "autoCancelPendingPipelines",
                    "autoDevopsDeployStrategy",
                    "autoDevopsEnabled",
                    "autocloseReferencedIssues",
                    "buildGitStrategy",
                    "buildTimeout",
                    "buildsAccessLevel",
                    "containerExpirationPolicies",
                    "containerRegistryAccessLevel",
                    "defaultBranch",
                    "description",
                    "emailsDisabled",
                    "externalAuthorizationClassificationLabel",
                    "forkingAccessLevel",
                    "httpUrlToRepo",
                    "id",
                    "issuesAccessLevel",
                    "issuesEnabled",
                    "lfsEnabled",
                    "mergeCommitTemplate",
                    "mergePipelinesEnabled",
                    "mergeRequestsAccessLevel",
                    "mergeRequestsEnabled",
                    "mergeTrainsEnabled",
                    "name",
                    "namespaceId",
                    "operationsAccessLevel",
                    "path",
                    "pathWithNamespace",
                    "pipelinesEnabled",
                    "printingMergeRequestLinkEnabled",
                    "pushRules",
                    "removeSourceBranchAfterMerge",
                    "repositoryAccessLevel",
                    "repositoryStorage",
                    "requestAccessEnabled",
                    "requirementsAccessLevel",
                    "resolveOutdatedDiffDiscussions",
                    "runnersToken",
                    "securityAndComplianceAccessLevel",
                    "snippetsAccessLevel",
                    "snippetsEnabled",
                    "squashCommitTemplate",
                    "sshUrlToRepo",
                    "topics",
                    "visibilityLevel",
                    "webUrl",
                    "wikiAccessLevel",
                    "wikiEnabled"
                ]
            }
        },
        "gitlab:index/getProjectIssue:getProjectIssue": {
            "description": "The `gitlab.ProjectIssue` data source allows to retrieve details about an issue in a project.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = gitlab.getProject({\n    id: \"foo/bar/baz\",\n});\nconst welcomeIssue = foo.then(foo =\u003e gitlab.getProjectIssue({\n    project: foo.id,\n    iid: 1,\n}));\nexport const welcomeIssueWebUrl = data.gitlab_project_issue.web_url;\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_project(id=\"foo/bar/baz\")\nwelcome_issue = gitlab.get_project_issue(project=foo.id,\n    iid=1)\npulumi.export(\"welcomeIssueWebUrl\", data[\"gitlab_project_issue\"][\"web_url\"])\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs\n        {\n            Id = \"foo/bar/baz\",\n        }));\n        var welcomeIssue = foo.Apply(foo =\u003e Output.Create(GitLab.GetProjectIssue.InvokeAsync(new GitLab.GetProjectIssueArgs\n        {\n            Project = foo.Id,\n            Iid = 1,\n        })));\n        this.WelcomeIssueWebUrl = data.Gitlab_project_issue.Web_url;\n    }\n\n    [Output(\"welcomeIssueWebUrl\")]\n    public Output\u003cstring\u003e WelcomeIssueWebUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tId: pulumi.StringRef(\"foo/bar/baz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.LookupProjectIssue(ctx, \u0026GetProjectIssueArgs{\n\t\t\tProject: foo.Id,\n\t\t\tIid:     1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"welcomeIssueWebUrl\", data.Gitlab_project_issue.Web_url)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectIssue.\n",
                "properties": {
                    "iid": {
                        "type": "integer"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "iid",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectIssue.\n",
                "properties": {
                    "assigneeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "authorId": {
                        "type": "integer"
                    },
                    "closedAt": {
                        "type": "string"
                    },
                    "closedByUserId": {
                        "type": "integer"
                    },
                    "confidential": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "discussionLocked": {
                        "type": "boolean"
                    },
                    "discussionToResolve": {
                        "type": "string"
                    },
                    "downvotes": {
                        "type": "integer"
                    },
                    "dueDate": {
                        "type": "string"
                    },
                    "epicId": {
                        "type": "integer"
                    },
                    "epicIssueId": {
                        "type": "integer"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "humanTimeEstimate": {
                        "type": "string"
                    },
                    "humanTotalTimeSpent": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "iid": {
                        "type": "integer"
                    },
                    "issueId": {
                        "type": "integer"
                    },
                    "issueLinkId": {
                        "type": "integer"
                    },
                    "issueType": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "links": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "mergeRequestToResolveDiscussionsOf": {
                        "type": "integer"
                    },
                    "mergeRequestsCount": {
                        "type": "integer"
                    },
                    "milestoneId": {
                        "type": "integer"
                    },
                    "movedToId": {
                        "type": "integer"
                    },
                    "project": {
                        "type": "string"
                    },
                    "references": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "subscribed": {
                        "type": "boolean"
                    },
                    "taskCompletionStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectIssueTaskCompletionStatus:getProjectIssueTaskCompletionStatus"
                        }
                    },
                    "timeEstimate": {
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    },
                    "totalTimeSpent": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "upvotes": {
                        "type": "integer"
                    },
                    "userNotesCount": {
                        "type": "integer"
                    },
                    "webUrl": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "assigneeIds",
                    "authorId",
                    "closedAt",
                    "closedByUserId",
                    "confidential",
                    "createdAt",
                    "description",
                    "discussionLocked",
                    "discussionToResolve",
                    "downvotes",
                    "dueDate",
                    "epicId",
                    "epicIssueId",
                    "externalId",
                    "humanTimeEstimate",
                    "humanTotalTimeSpent",
                    "iid",
                    "issueId",
                    "issueLinkId",
                    "issueType",
                    "labels",
                    "links",
                    "mergeRequestToResolveDiscussionsOf",
                    "mergeRequestsCount",
                    "milestoneId",
                    "movedToId",
                    "project",
                    "references",
                    "state",
                    "subscribed",
                    "taskCompletionStatuses",
                    "timeEstimate",
                    "title",
                    "totalTimeSpent",
                    "updatedAt",
                    "upvotes",
                    "userNotesCount",
                    "webUrl",
                    "weight",
                    "id"
                ]
            }
        },
        "gitlab:index/getProjectIssues:getProjectIssues": {
            "description": "The `gitlab.getProjectIssues` data source allows to retrieve details about issues in a project.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = gitlab.getProject({\n    id: \"foo/bar/baz\",\n});\nconst allWithFoo = foo.then(foo =\u003e gitlab.getProjectIssues({\n    project: foo.id,\n    search: \"foo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_project(id=\"foo/bar/baz\")\nall_with_foo = gitlab.get_project_issues(project=foo.id,\n    search=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs\n        {\n            Id = \"foo/bar/baz\",\n        }));\n        var allWithFoo = foo.Apply(foo =\u003e Output.Create(GitLab.GetProjectIssues.InvokeAsync(new GitLab.GetProjectIssuesArgs\n        {\n            Project = foo.Id,\n            Search = \"foo\",\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tId: pulumi.StringRef(\"foo/bar/baz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.GetProjectIssues(ctx, \u0026GetProjectIssuesArgs{\n\t\t\tProject: foo.Id,\n\t\t\tSearch:  pulumi.StringRef(\"foo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectIssues.\n",
                "properties": {
                    "assigneeId": {
                        "type": "integer"
                    },
                    "assigneeUsername": {
                        "type": "string"
                    },
                    "authorId": {
                        "type": "integer"
                    },
                    "confidential": {
                        "type": "boolean"
                    },
                    "createdAfter": {
                        "type": "string"
                    },
                    "createdBefore": {
                        "type": "string"
                    },
                    "dueDate": {
                        "type": "string"
                    },
                    "iids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "issueType": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "milestone": {
                        "type": "string"
                    },
                    "myReactionEmoji": {
                        "type": "string"
                    },
                    "notAssigneeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "notAuthorIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "notLabels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notMilestones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notMyReactionEmojis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "updatedAfter": {
                        "type": "string"
                    },
                    "updatedBefore": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    },
                    "withLabelsDetails": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectIssues.\n",
                "properties": {
                    "assigneeId": {
                        "type": "integer"
                    },
                    "assigneeUsername": {
                        "type": "string"
                    },
                    "authorId": {
                        "type": "integer"
                    },
                    "confidential": {
                        "type": "boolean"
                    },
                    "createdAfter": {
                        "type": "string"
                    },
                    "createdBefore": {
                        "type": "string"
                    },
                    "dueDate": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "iids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "issueType": {
                        "type": "string"
                    },
                    "issues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectIssuesIssue:getProjectIssuesIssue"
                        }
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "milestone": {
                        "type": "string"
                    },
                    "myReactionEmoji": {
                        "type": "string"
                    },
                    "notAssigneeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "notAuthorIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "notLabels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notMilestones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notMyReactionEmojis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "updatedAfter": {
                        "type": "string"
                    },
                    "updatedBefore": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    },
                    "withLabelsDetails": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "issues",
                    "project",
                    "id"
                ]
            }
        },
        "gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch": {
            "description": "The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProjectProtectedBranch({\n    name: \"main\",\n    projectId: \"foo/bar/baz\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project_protected_branch(name=\"main\",\n    project_id=\"foo/bar/baz\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProjectProtectedBranch.InvokeAsync(new GitLab.GetProjectProtectedBranchArgs\n        {\n            Name = \"main\",\n            ProjectId = \"foo/bar/baz\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetProjectProtectedBranch(ctx, \u0026GetProjectProtectedBranchArgs{\n\t\t\tName:      \"main\",\n\t\t\tProjectId: \"foo/bar/baz\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectProtectedBranch.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectProtectedBranch.\n",
                "properties": {
                    "allowForcePush": {
                        "type": "boolean"
                    },
                    "codeOwnerApprovalRequired": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "mergeAccessLevels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectProtectedBranchMergeAccessLevel:getProjectProtectedBranchMergeAccessLevel"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "pushAccessLevels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectProtectedBranchPushAccessLevel:getProjectProtectedBranchPushAccessLevel"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "allowForcePush",
                    "codeOwnerApprovalRequired",
                    "id",
                    "mergeAccessLevels",
                    "name",
                    "projectId",
                    "pushAccessLevels"
                ]
            }
        },
        "gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches": {
            "description": "The `gitlab_protected_branches` data source allows details of the protected branches of a given project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#list-protected-branches)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProjectProtectedBranches({\n    projectId: \"foo/bar/baz\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project_protected_branches(project_id=\"foo/bar/baz\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProjectProtectedBranches.InvokeAsync(new GitLab.GetProjectProtectedBranchesArgs\n        {\n            ProjectId = \"foo/bar/baz\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetProjectProtectedBranches(ctx, \u0026GetProjectProtectedBranchesArgs{\n\t\t\tProjectId: \"foo/bar/baz\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectProtectedBranches.\n",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectProtectedBranches.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "protectedBranches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectProtectedBranchesProtectedBranch:getProjectProtectedBranchesProtectedBranch"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "protectedBranches",
                    "id"
                ]
            }
        },
        "gitlab:index/getProjectTag:getProjectTag": {
            "description": "The `gitlab.ProjectTag` data source allows details of a project tag to be retrieved by its name.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// By project full path\nconst foo = pulumi.output(gitlab.getProjectTag({\n    name: \"example\",\n    project: \"foo/bar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_project_tag(name=\"example\",\n    project=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetProjectTag.InvokeAsync(new GitLab.GetProjectTagArgs\n        {\n            Name = \"example\",\n            Project = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupProjectTag(ctx, \u0026GetProjectTagArgs{\n\t\t\tName:    \"example\",\n\t\t\tProject: \"foo/bar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectTag.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectTag.\n",
                "properties": {
                    "commits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectTagCommit:getProjectTagCommit"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "message": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "protected": {
                        "type": "boolean"
                    },
                    "releases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectTagRelease:getProjectTagRelease"
                        }
                    },
                    "target": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "commits",
                    "message",
                    "name",
                    "project",
                    "protected",
                    "releases",
                    "target",
                    "id"
                ]
            }
        },
        "gitlab:index/getProjectTags:getProjectTags": {
            "description": "The `gitlab.getProjectTags` data source allows details of project tags to be retrieved by some search criteria.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/tags.html#list-project-repository-tags)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// By project full path\nconst example = pulumi.output(gitlab.getProjectTags({\n    project: \"foo/bar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project_tags(project=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProjectTags.InvokeAsync(new GitLab.GetProjectTagsArgs\n        {\n            Project = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetProjectTags(ctx, \u0026GetProjectTagsArgs{\n\t\t\tProject: \"foo/bar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectTags.\n",
                "properties": {
                    "orderBy": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectTags.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectTagsTag:getProjectTagsTag"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "tags",
                    "id"
                ]
            }
        },
        "gitlab:index/getProjects:getProjects": {
            "description": "The `gitlab.getProjects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.\n\n\u003e This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.\n\n\u003e The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst mygroup = gitlab.getGroup({\n    fullPath: \"mygroup\",\n});\nconst groupProjects = mygroup.then(mygroup =\u003e gitlab.getProjects({\n    groupId: mygroup.id,\n    orderBy: \"name\",\n    includeSubgroups: true,\n    withShared: false,\n}));\nconst projects = gitlab.getProjects({\n    search: \"postgresql\",\n    visibility: \"private\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nmygroup = gitlab.get_group(full_path=\"mygroup\")\ngroup_projects = gitlab.get_projects(group_id=mygroup.id,\n    order_by=\"name\",\n    include_subgroups=True,\n    with_shared=False)\nprojects = gitlab.get_projects(search=\"postgresql\",\n    visibility=\"private\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mygroup = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs\n        {\n            FullPath = \"mygroup\",\n        }));\n        var groupProjects = mygroup.Apply(mygroup =\u003e Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs\n        {\n            GroupId = mygroup.Id,\n            OrderBy = \"name\",\n            IncludeSubgroups = true,\n            WithShared = false,\n        })));\n        var projects = Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs\n        {\n            Search = \"postgresql\",\n            Visibility = \"private\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmygroup, err := gitlab.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tFullPath: pulumi.StringRef(\"mygroup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.GetProjects(ctx, \u0026GetProjectsArgs{\n\t\t\tGroupId:          pulumi.IntRef(mygroup.Id),\n\t\t\tOrderBy:          pulumi.StringRef(\"name\"),\n\t\t\tIncludeSubgroups: pulumi.BoolRef(true),\n\t\t\tWithShared:       pulumi.BoolRef(false),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.GetProjects(ctx, \u0026GetProjectsArgs{\n\t\t\tSearch:     pulumi.StringRef(\"postgresql\"),\n\t\t\tVisibility: pulumi.StringRef(\"private\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "includeSubgroups": {
                        "type": "boolean"
                    },
                    "maxQueryablePages": {
                        "type": "integer"
                    },
                    "membership": {
                        "type": "boolean"
                    },
                    "minAccessLevel": {
                        "type": "integer"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "owned": {
                        "type": "boolean"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "perPage": {
                        "type": "integer"
                    },
                    "search": {
                        "type": "string"
                    },
                    "simple": {
                        "type": "boolean"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "starred": {
                        "type": "boolean"
                    },
                    "statistics": {
                        "type": "boolean"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "withCustomAttributes": {
                        "type": "boolean"
                    },
                    "withIssuesEnabled": {
                        "type": "boolean"
                    },
                    "withMergeRequestsEnabled": {
                        "type": "boolean"
                    },
                    "withProgrammingLanguage": {
                        "type": "string"
                    },
                    "withShared": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeSubgroups": {
                        "type": "boolean"
                    },
                    "maxQueryablePages": {
                        "type": "integer"
                    },
                    "membership": {
                        "type": "boolean"
                    },
                    "minAccessLevel": {
                        "type": "integer"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "owned": {
                        "type": "boolean"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "perPage": {
                        "type": "integer"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectsProject:getProjectsProject"
                        }
                    },
                    "search": {
                        "type": "string"
                    },
                    "simple": {
                        "type": "boolean"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "starred": {
                        "type": "boolean"
                    },
                    "statistics": {
                        "type": "boolean"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "withCustomAttributes": {
                        "type": "boolean"
                    },
                    "withIssuesEnabled": {
                        "type": "boolean"
                    },
                    "withMergeRequestsEnabled": {
                        "type": "boolean"
                    },
                    "withProgrammingLanguage": {
                        "type": "string"
                    },
                    "withShared": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "gitlab:index/getRepositoryFile:getRepositoryFile": {
            "description": "The `gitlab.RepositoryFile` data source allows details of a file in a repository to be retrieved.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getRepositoryFile({\n    filePath: \"README.md\",\n    project: \"example\",\n    ref: \"main\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_repository_file(file_path=\"README.md\",\n    project=\"example\",\n    ref=\"main\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetRepositoryFile.InvokeAsync(new GitLab.GetRepositoryFileArgs\n        {\n            FilePath = \"README.md\",\n            Project = \"example\",\n            Ref = \"main\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupRepositoryFile(ctx, \u0026GetRepositoryFileArgs{\n\t\t\tFilePath: \"README.md\",\n\t\t\tProject:  \"example\",\n\t\t\tRef:      \"main\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryFile.\n",
                "properties": {
                    "filePath": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "ref": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "filePath",
                    "project",
                    "ref"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryFile.\n",
                "properties": {
                    "blobId": {
                        "type": "string"
                    },
                    "commitId": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "contentSha256": {
                        "type": "string"
                    },
                    "encoding": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "filePath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastCommitId": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "ref": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "blobId",
                    "commitId",
                    "content",
                    "contentSha256",
                    "encoding",
                    "fileName",
                    "filePath",
                    "lastCommitId",
                    "project",
                    "ref",
                    "size",
                    "id"
                ]
            }
        },
        "gitlab:index/getUser:getUser": {
            "description": "The `gitlab.User` data source allows details of a user to be retrieved by either the user ID, username or email address.\n\n\u003e Some attributes might not be returned depending on if you're an admin or not.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string"
                    },
                    "bio": {
                        "type": "string"
                    },
                    "canCreateGroup": {
                        "type": "boolean"
                    },
                    "canCreateProject": {
                        "type": "boolean"
                    },
                    "colorSchemeId": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "currentSignInAt": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "externUid": {
                        "type": "string"
                    },
                    "external": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isAdmin": {
                        "type": "boolean"
                    },
                    "lastSignInAt": {
                        "type": "string"
                    },
                    "linkedin": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "projectsLimit": {
                        "type": "integer"
                    },
                    "skype": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "themeId": {
                        "type": "integer"
                    },
                    "twitter": {
                        "type": "string"
                    },
                    "twoFactorEnabled": {
                        "type": "boolean"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "userProvider": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "websiteUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "bio",
                    "canCreateGroup",
                    "canCreateProject",
                    "colorSchemeId",
                    "createdAt",
                    "currentSignInAt",
                    "email",
                    "externUid",
                    "external",
                    "isAdmin",
                    "lastSignInAt",
                    "linkedin",
                    "location",
                    "name",
                    "note",
                    "organization",
                    "projectsLimit",
                    "skype",
                    "state",
                    "themeId",
                    "twitter",
                    "twoFactorEnabled",
                    "userId",
                    "userProvider",
                    "username",
                    "websiteUrl",
                    "id"
                ]
            }
        },
        "gitlab:index/getUsers:getUsers": {
            "description": "The `gitlab.getUsers` data source allows details of multiple users to be retrieved given some optional filter criteria.\n\n\u003e Some attributes might not be returned depending on if you're an admin or not.\n\n\u003e Some available options require administrator privileges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getUsers({\n    createdBefore: \"2019-01-01\",\n    orderBy: \"name\",\n    sort: \"desc\",\n}));\nconst example_two = pulumi.output(gitlab.getUsers({\n    search: \"username\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_users(created_before=\"2019-01-01\",\n    order_by=\"name\",\n    sort=\"desc\")\nexample_two = gitlab.get_users(search=\"username\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetUsers.InvokeAsync(new GitLab.GetUsersArgs\n        {\n            CreatedBefore = \"2019-01-01\",\n            OrderBy = \"name\",\n            Sort = \"desc\",\n        }));\n        var example_two = Output.Create(GitLab.GetUsers.InvokeAsync(new GitLab.GetUsersArgs\n        {\n            Search = \"username\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tCreatedBefore: pulumi.StringRef(\"2019-01-01\"),\n\t\t\tOrderBy:       pulumi.StringRef(\"name\"),\n\t\t\tSort:          pulumi.StringRef(\"desc\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tSearch: pulumi.StringRef(\"username\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "blocked": {
                        "type": "boolean"
                    },
                    "createdAfter": {
                        "type": "string"
                    },
                    "createdBefore": {
                        "type": "string"
                    },
                    "externProvider": {
                        "type": "string"
                    },
                    "externUid": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "blocked": {
                        "type": "boolean"
                    },
                    "createdAfter": {
                        "type": "string"
                    },
                    "createdBefore": {
                        "type": "string"
                    },
                    "externProvider": {
                        "type": "string"
                    },
                    "externUid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getUsersUser:getUsersUser"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "gitlab": "GitLab"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0",
                "builtin-modules": "3.0.0",
                "read-package-tree": "^5.2.1",
                "resolve": "^1.7.1"
            },
            "devDependencies": {
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing GitLab resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-gitlab` repo](https://github.com/pulumi/pulumi-gitlab/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`gitlabhq/terraform-provider-gitlab` repo](https://github.com/gitlabhq/terraform-provider-gitlab/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-gitlab` repo](https://github.com/pulumi/pulumi-gitlab/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`gitlabhq/terraform-provider-gitlab` repo](https://github.com/gitlabhq/terraform-provider-gitlab/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}