{
    "name": "gitlab",
    "description": "A Pulumi package for creating and managing GitLab resources.",
    "keywords": [
        "pulumi",
        "gitlab"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`gitlab` Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab).",
    "repository": "https://github.com/pulumi/pulumi-gitlab",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "baseUrl": {
                "type": "string",
                "description": "The GitLab Base API URL\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "A file containing the ca certificate to use in case ssl certificate is not from a standard chain\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Disable SSL verification of API calls\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitLab.\n"
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "gitlab:index/ProjectPushRules:ProjectPushRules": {
            "properties": {
                "authorEmailRegex": {
                    "type": "string",
                    "description": "All commit author emails must match this regex, e.g. `@my-company.com$`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchNameRegex": {
                    "type": "string",
                    "description": "All branch names must match this regex, e.g. `(feature|hotfix)\\/*`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitCommitterCheck": {
                    "type": "boolean",
                    "description": "Users can only push commits to this repository that were committed with one of their own verified emails.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageNegativeRegex": {
                    "type": "string",
                    "description": "No commit message is allowed to match this regex, for example `ssh\\:\\/\\/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageRegex": {
                    "type": "string",
                    "description": "All commit messages must match this regex, e.g. `Fixed \\d+\\..*`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "denyDeleteTag": {
                    "type": "boolean",
                    "description": "Deny deleting a tag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileNameRegex": {
                    "type": "string",
                    "description": "All commited filenames must not match this regex, e.g. `(jar|exe)$`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "Maximum file size (MB).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberCheck": {
                    "type": "boolean",
                    "description": "Restrict commits by author (email) to existing GitLab users.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preventSecrets": {
                    "type": "boolean",
                    "description": "GitLab will reject any files that are likely to contain secrets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rejectUnsignedCommits": {
                    "type": "boolean",
                    "description": "Reject commit when itâ€™s not signed through GPG.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "gitlab:index/getGroupMembershipMember:getGroupMembershipMember": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Only return members with the desidered access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "avatarUrl": {
                    "type": "string",
                    "description": "The avatar URL of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date for the group membership.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The unique id assigned to the user by the gitlab server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "Whether the user is active or blocked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "description": "User's website URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "avatarUrl",
                "expiresAt",
                "id",
                "name",
                "state",
                "username",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectPushRules:getProjectPushRules": {
            "properties": {
                "authorEmailRegex": {
                    "type": "string",
                    "description": "All commit author emails must match this regex, e.g. `@my-company.com$`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchNameRegex": {
                    "type": "string",
                    "description": "All branch names must match this regex, e.g. `(feature|hotfix)\\/*`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitCommitterCheck": {
                    "type": "boolean",
                    "description": "Users can only push commits to this repository that were committed with one of their own verified emails.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageNegativeRegex": {
                    "type": "string",
                    "description": "No commit message is allowed to match this regex, for example `ssh\\:\\/\\/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageRegex": {
                    "type": "string",
                    "description": "All commit messages must match this regex, e.g. `Fixed \\d+\\..*`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "denyDeleteTag": {
                    "type": "boolean",
                    "description": "Deny deleting a tag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileNameRegex": {
                    "type": "string",
                    "description": "All commited filenames must not match this regex, e.g. `(jar|exe)$`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "Maximum file size (MB).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberCheck": {
                    "type": "boolean",
                    "description": "Restrict commits by author (email) to existing GitLab users.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preventSecrets": {
                    "type": "boolean",
                    "description": "GitLab will reject any files that are likely to contain secrets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rejectUnsignedCommits": {
                    "type": "boolean",
                    "description": "Reject commit when itâ€™s not signed through GPG.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authorEmailRegex",
                "branchNameRegex",
                "commitCommitterCheck",
                "commitMessageNegativeRegex",
                "commitMessageRegex",
                "denyDeleteTag",
                "fileNameRegex",
                "maxFileSize",
                "memberCheck",
                "preventSecrets",
                "rejectUnsignedCommits"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProject:getProjectsProject": {
            "properties": {
                "_links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "description": "The numbers of approvals needed in a merge requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "archived": {
                    "type": "boolean",
                    "description": "Limit by archived status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ciConfigPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creatorId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultBranch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forkedFromProject": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectForkedFromProject:getProjectsProjectForkedFromProject",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forksCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpUrlToRepo": {
                    "type": "string",
                    "description": "The HTTP clone URL of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "importError": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "importStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jobsEnabled": {
                    "type": "boolean",
                    "description": "Whether pipelines are enabled for the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastActivityAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirror": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorUserId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameWithNamespace": {
                    "type": "string",
                    "description": "In `group / subgroup / project` or `user / project` format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectNamespace:getProjectsProjectNamespace",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openIssuesCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectOwner:getProjectsProjectOwner",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathWithNamespace": {
                    "type": "string",
                    "description": "In `group/subgroup/project` or `user/project` format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectPermissions:getProjectsProjectPermissions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the project is public.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicBuilds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readmeUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolveOutdatedDiffDiscussions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runnersToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedWithGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectsProjectSharedWithGroup:getProjectsProjectSharedWithGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUrlToRepo": {
                    "type": "string",
                    "description": "The SSH clone URL of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "starCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statistics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "Include project statistics. Cannot be used with `group_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of the project topics (formerly called \"project tags\").\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibility": {
                    "type": "string",
                    "description": "Limit by visibility `public`, `internal`, or `private`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "_links",
                "approvalsBeforeMerge",
                "archived",
                "avatarUrl",
                "ciConfigPath",
                "containerRegistryEnabled",
                "createdAt",
                "creatorId",
                "customAttributes",
                "defaultBranch",
                "description",
                "forkedFromProject",
                "forksCount",
                "httpUrlToRepo",
                "id",
                "importError",
                "importStatus",
                "issuesEnabled",
                "jobsEnabled",
                "lastActivityAt",
                "lfsEnabled",
                "mergeMethod",
                "mergeRequestsEnabled",
                "mirror",
                "mirrorOverwritesDivergedBranches",
                "mirrorTriggerBuilds",
                "mirrorUserId",
                "name",
                "nameWithNamespace",
                "namespace",
                "onlyAllowMergeIfAllDiscussionsAreResolved",
                "onlyAllowMergeIfPipelineSucceeds",
                "onlyMirrorProtectedBranches",
                "openIssuesCount",
                "owner",
                "packagesEnabled",
                "path",
                "pathWithNamespace",
                "permissions",
                "public",
                "publicBuilds",
                "readmeUrl",
                "requestAccessEnabled",
                "resolveOutdatedDiffDiscussions",
                "runnersToken",
                "sharedRunnersEnabled",
                "sharedWithGroups",
                "snippetsEnabled",
                "sshUrlToRepo",
                "starCount",
                "statistics",
                "tagLists",
                "visibility",
                "webUrl",
                "wikiEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectForkedFromProject:getProjectsProjectForkedFromProject": {
            "properties": {
                "httpUrlToRepo": {
                    "type": "string",
                    "description": "The HTTP clone URL of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameWithNamespace": {
                    "type": "string",
                    "description": "In `group / subgroup / project` or `user / project` format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathWithNamespace": {
                    "type": "string",
                    "description": "In `group/subgroup/project` or `user/project` format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "httpUrlToRepo",
                "id",
                "name",
                "nameWithNamespace",
                "path",
                "pathWithNamespace",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectNamespace:getProjectsProjectNamespace": {
            "properties": {
                "fullPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fullPath",
                "id",
                "kind",
                "name",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectOwner:getProjectsProjectOwner": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "websiteUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "id",
                "name",
                "state",
                "username",
                "websiteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectPermissions:getProjectsProjectPermissions": {
            "properties": {
                "groupAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupAccess",
                "projectAccess"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectSharedWithGroup:getProjectsProjectSharedWithGroup": {
            "properties": {
                "groupAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "description": "The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupAccessLevel",
                "groupId",
                "groupName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getUsersUser:getUsersUser": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The avatar URL of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bio": {
                    "type": "string",
                    "description": "The bio of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canCreateGroup": {
                    "type": "boolean",
                    "description": "Whether the user can create groups.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canCreateProject": {
                    "type": "boolean",
                    "description": "Whether the user can create projects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "colorSchemeId": {
                    "type": "integer",
                    "description": "User's color scheme ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date the user was created at.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentSignInAt": {
                    "type": "string",
                    "description": "Current user's sign-in date.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externUid": {
                    "type": "string",
                    "description": "Lookup users by external UID. (Requires administrator privileges)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "external": {
                    "type": "boolean",
                    "description": "Whether the user is external.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The unique id assigned to the user by the gitlab server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Whether the user is an admin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastSignInAt": {
                    "type": "string",
                    "description": "Last user's sign-in date.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedin": {
                    "type": "string",
                    "description": "Linkedin profile of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "The location of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "description": "The organization of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectsLimit": {
                    "type": "integer",
                    "description": "Number of projects the user can create.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "The UID provider of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skype": {
                    "type": "string",
                    "description": "Skype username of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "Whether the user is active or blocked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "themeId": {
                    "type": "integer",
                    "description": "User's theme ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twitter": {
                    "type": "string",
                    "description": "Twitter username of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twoFactorEnabled": {
                    "type": "boolean",
                    "description": "Whether user's two factor auth is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "websiteUrl": {
                    "type": "string",
                    "description": "User's website URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "bio",
                "canCreateGroup",
                "canCreateProject",
                "colorSchemeId",
                "createdAt",
                "currentSignInAt",
                "email",
                "externUid",
                "external",
                "id",
                "isAdmin",
                "lastSignInAt",
                "linkedin",
                "location",
                "name",
                "organization",
                "projectsLimit",
                "provider",
                "skype",
                "state",
                "themeId",
                "twitter",
                "twoFactorEnabled",
                "username",
                "websiteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the gitlab package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "baseUrl": {
                "type": "string",
                "description": "The GitLab Base API URL\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "A file containing the ca certificate to use in case ssl certificate is not from a standard chain\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Disable SSL verification of API calls\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitLab.\n"
            }
        },
        "requiredInputs": [
            "token"
        ]
    },
    "resources": {
        "gitlab:index/branchProtection:BranchProtection": {
            "description": "## # gitlab\\_branch_protection\n\nThis resource allows you to protect a specific branch by an access level so that the user with less access level cannot Merge/Push to the branch. GitLab EE features to protect by group or user are not supported.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst branchProtect = new gitlab.BranchProtection(\"BranchProtect\", {\n    branch: \"BranchProtected\",\n    mergeAccessLevel: \"developer\",\n    project: \"12345\",\n    pushAccessLevel: \"developer\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nbranch_protect = gitlab.BranchProtection(\"branchProtect\",\n    branch=\"BranchProtected\",\n    merge_access_level=\"developer\",\n    project=\"12345\",\n    push_access_level=\"developer\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var branchProtect = new GitLab.BranchProtection(\"branchProtect\", new GitLab.BranchProtectionArgs\n        {\n            Branch = \"BranchProtected\",\n            MergeAccessLevel = \"developer\",\n            Project = \"12345\",\n            PushAccessLevel = \"developer\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewBranchProtection(ctx, \"branchProtect\", \u0026gitlab.BranchProtectionArgs{\n\t\t\tBranch:           pulumi.String(\"BranchProtected\"),\n\t\t\tMergeAccessLevel: pulumi.String(\"developer\"),\n\t\t\tProject:          pulumi.String(\"12345\"),\n\t\t\tPushAccessLevel:  pulumi.String(\"developer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "description": "Bool, defaults to false. Can be set to true to require code owner approval before merging.\n"
                },
                "mergeAccessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "pushAccessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                }
            },
            "required": [
                "branch",
                "mergeAccessLevel",
                "project",
                "pushAccessLevel"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "description": "Bool, defaults to false. Can be set to true to require code owner approval before merging.\n"
                },
                "mergeAccessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "pushAccessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "mergeAccessLevel",
                "project",
                "pushAccessLevel"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchProtection resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Name of the branch.\n"
                    },
                    "codeOwnerApprovalRequired": {
                        "type": "boolean",
                        "description": "Bool, defaults to false. Can be set to true to require code owner approval before merging.\n"
                    },
                    "mergeAccessLevel": {
                        "type": "string",
                        "description": "One of five levels of access to the project.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "pushAccessLevel": {
                        "type": "string",
                        "description": "One of five levels of access to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployKey:DeployKey": {
            "description": "## # gitlab\\_deploy\\_key\n\nThis resource allows you to create and manage deploy keys for your GitLab projects.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.DeployKey(\"example\", {\n    key: \"ssh-rsa AAAA...\",\n    project: \"example/deploying\",\n    title: \"Example deploy key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.DeployKey(\"example\",\n    key=\"ssh-rsa AAAA...\",\n    project=\"example/deploying\",\n    title=\"Example deploy key\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.DeployKey(\"example\", new GitLab.DeployKeyArgs\n        {\n            Key = \"ssh-rsa AAAA...\",\n            Project = \"example/deploying\",\n            Title = \"Example deploy key\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewDeployKey(ctx, \"example\", \u0026gitlab.DeployKeyArgs{\n\t\t\tKey:     pulumi.String(\"ssh-rsa AAAA...\"),\n\t\t\tProject: pulumi.String(\"example/deploying\"),\n\t\t\tTitle:   pulumi.String(\"Example deploy key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/deployKey:DeployKey test 1:3\n```\n\n ",
            "properties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The public ssh key body.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title to describe the deploy key with.\n"
                }
            },
            "required": [
                "key",
                "project",
                "title"
            ],
            "inputProperties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The public ssh key body.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title to describe the deploy key with.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployKey resources.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean",
                        "description": "Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The public ssh key body.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy key to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "A title to describe the deploy key with.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployKeyEnable:DeployKeyEnable": {
            "description": "## # gitlab\\_deploy\\_key\\_enable\n\nThis resource allows you to enable pre-existing deploy keys for your GitLab projects.\n\n**the GITLAB KEY_ID for the deploy key must be known**\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// A repo to host the deployment key\nconst parentProject = new gitlab.Project(\"parent\", {});\n// A second repo to use the deployment key from the parent project\nconst fooProject = new gitlab.Project(\"foo\", {});\n// Upload a deployment key for the parent repo\nconst parentDeployKey = new gitlab.DeployKey(\"parent\", {\n    key: \"ssh-rsa AAAA...\",\n    project: parentProject.id,\n    title: \"Example deploy key\",\n});\n// Enable the deployment key on the second repo\nconst fooDeployKeyEnable = new gitlab.DeployKeyEnable(\"foo\", {\n    keyId: parentDeployKey.id,\n    project: fooProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\n# A repo to host the deployment key\nparent_project = gitlab.Project(\"parentProject\")\n# A second repo to use the deployment key from the parent project\nfoo_project = gitlab.Project(\"fooProject\")\n# Upload a deployment key for the parent repo\nparent_deploy_key = gitlab.DeployKey(\"parentDeployKey\",\n    key=\"ssh-rsa AAAA...\",\n    project=parent_project.id,\n    title=\"Example deploy key\")\n# Enable the deployment key on the second repo\nfoo_deploy_key_enable = gitlab.DeployKeyEnable(\"fooDeployKeyEnable\",\n    key_id=parent_deploy_key.id,\n    project=foo_project.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // A repo to host the deployment key\n        var parentProject = new GitLab.Project(\"parentProject\", new GitLab.ProjectArgs\n        {\n        });\n        // A second repo to use the deployment key from the parent project\n        var fooProject = new GitLab.Project(\"fooProject\", new GitLab.ProjectArgs\n        {\n        });\n        // Upload a deployment key for the parent repo\n        var parentDeployKey = new GitLab.DeployKey(\"parentDeployKey\", new GitLab.DeployKeyArgs\n        {\n            Key = \"ssh-rsa AAAA...\",\n            Project = parentProject.Id,\n            Title = \"Example deploy key\",\n        });\n        // Enable the deployment key on the second repo\n        var fooDeployKeyEnable = new GitLab.DeployKeyEnable(\"fooDeployKeyEnable\", new GitLab.DeployKeyEnableArgs\n        {\n            KeyId = parentDeployKey.Id,\n            Project = fooProject.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparentProject, err := gitlab.NewProject(ctx, \"parentProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooProject, err := gitlab.NewProject(ctx, \"fooProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tparentDeployKey, err := gitlab.NewDeployKey(ctx, \"parentDeployKey\", \u0026gitlab.DeployKeyArgs{\n\t\t\tKey:     pulumi.String(\"ssh-rsa AAAA...\"),\n\t\t\tProject: parentProject.ID(),\n\t\t\tTitle:   pulumi.String(\"Example deploy key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewDeployKeyEnable(ctx, \"fooDeployKeyEnable\", \u0026gitlab.DeployKeyEnableArgs{\n\t\t\tKeyId:   parentDeployKey.ID(),\n\t\t\tProject: fooProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab enabled deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/deployKeyEnable:DeployKeyEnable example 12345:67890\n```\n\n ",
            "properties": {
                "canPush": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string",
                    "description": "The Gitlab key id for the pre-existing deploy key\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string"
                }
            },
            "required": [
                "canPush",
                "key",
                "keyId",
                "project",
                "title"
            ],
            "inputProperties": {
                "canPush": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string",
                    "description": "The Gitlab key id for the pre-existing deploy key\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "keyId",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployKeyEnable resources.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean"
                    },
                    "key": {
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The Gitlab key id for the pre-existing deploy key\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy key to.\n"
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployToken:DeployToken": {
            "description": "## # gitlab\\_deploy\\_token\n\nThis resource allows you to create and manage deploy token for your GitLab projects and groups.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Project\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.DeployToken(\"example\", {\n    expiresAt: \"2020-03-14T00:00:00.000Z\",\n    project: \"example/deploying\",\n    scopes: [\n        \"read_repository\",\n        \"read_registry\",\n    ],\n    username: \"example-username\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.DeployToken(\"example\",\n    expires_at=\"2020-03-14T00:00:00.000Z\",\n    project=\"example/deploying\",\n    scopes=[\n        \"read_repository\",\n        \"read_registry\",\n    ],\n    username=\"example-username\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.DeployToken(\"example\", new GitLab.DeployTokenArgs\n        {\n            ExpiresAt = \"2020-03-14T00:00:00.000Z\",\n            Project = \"example/deploying\",\n            Scopes = \n            {\n                \"read_repository\",\n                \"read_registry\",\n            },\n            Username = \"example-username\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewDeployToken(ctx, \"example\", \u0026gitlab.DeployTokenArgs{\n\t\t\tExpiresAt: pulumi.String(\"2020-03-14T00:00:00.000Z\"),\n\t\t\tProject:   pulumi.String(\"example/deploying\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"read_repository\"),\n\t\t\t\tpulumi.String(\"read_registry\"),\n\t\t\t},\n\t\t\tUsername: pulumi.String(\"example-username\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Group\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.DeployToken(\"example\", {\n    group: \"example/deploying\",\n    scopes: [\"read_repository\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.DeployToken(\"example\",\n    group=\"example/deploying\",\n    scopes=[\"read_repository\"])\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.DeployToken(\"example\", new GitLab.DeployTokenArgs\n        {\n            Group = \"example/deploying\",\n            Scopes = \n            {\n                \"read_repository\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewDeployToken(ctx, \"example\", \u0026gitlab.DeployTokenArgs{\n\t\t\tGroup: pulumi.String(\"example/deploying\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"read_repository\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the deploy token to.\nEither `project` or `group` must be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the deploy token with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy token to.\nEither `project` or `group` must be set.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `read_repository`, `read_registry`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret token. This is only populated when creating a new deploy token.\n"
                },
                "username": {
                    "type": "string",
                    "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                }
            },
            "required": [
                "name",
                "scopes",
                "token",
                "username"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the deploy token to.\nEither `project` or `group` must be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the deploy token with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy token to.\nEither `project` or `group` must be set.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `read_repository`, `read_registry`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                }
            },
            "requiredInputs": [
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployToken resources.\n",
                "properties": {
                    "expiresAt": {
                        "type": "string",
                        "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group to add the deploy token to.\nEither `project` or `group` must be set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name to describe the deploy token with.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy token to.\nEither `project` or `group` must be set.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Valid values: `read_repository`, `read_registry`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret token. This is only populated when creating a new deploy token.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/group:Group": {
            "properties": {
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Default to Auto\nDevOps pipeline for all projects within this group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the group.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable email notifications\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the group.\n"
                },
                "fullPath": {
                    "type": "string",
                    "description": "The full path of the group.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true.  Whether to enable LFS\nsupport for projects in this group.\n"
                },
                "mentionsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable the capability\nof a group from getting mentioned\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this group.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Integer, id of the parent group (creates a nested group).\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the group.\n"
                },
                "projectCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Maintainer.\nDetermine if developers can create projects\nin the group. Can be noone (No one), maintainer (Maintainers),\nor developer (Developers + Maintainers).\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to\nenable users to request access to the group.\n"
                },
                "requireTwoFactorAuthentication": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.\nequire all users in this group to setup Two-factor authentication.\n"
                },
                "runnersToken": {
                    "type": "string",
                    "description": "The group level registration token to use during runner setup.\n"
                },
                "shareWithGroupLock": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Prevent sharing\na project with another group within this group.\n"
                },
                "subgroupCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Owner.\nAllowed to create subgroups.\nCan be owner (Owners), or maintainer (Maintainers).\n"
                },
                "twoFactorGracePeriod": {
                    "type": "integer",
                    "description": "Int, defaults to 48.\nTime before Two-factor authentication is enforced (in hours).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web URL of the group.\n"
                }
            },
            "required": [
                "fullName",
                "fullPath",
                "name",
                "path",
                "runnersToken",
                "visibilityLevel",
                "webUrl"
            ],
            "inputProperties": {
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Default to Auto\nDevOps pipeline for all projects within this group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the group.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable email notifications\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true.  Whether to enable LFS\nsupport for projects in this group.\n"
                },
                "mentionsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable the capability\nof a group from getting mentioned\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this group.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Integer, id of the parent group (creates a nested group).\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the group.\n"
                },
                "projectCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Maintainer.\nDetermine if developers can create projects\nin the group. Can be noone (No one), maintainer (Maintainers),\nor developer (Developers + Maintainers).\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to\nenable users to request access to the group.\n"
                },
                "requireTwoFactorAuthentication": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.\nequire all users in this group to setup Two-factor authentication.\n"
                },
                "shareWithGroupLock": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Prevent sharing\na project with another group within this group.\n"
                },
                "subgroupCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Owner.\nAllowed to create subgroups.\nCan be owner (Owners), or maintainer (Maintainers).\n"
                },
                "twoFactorGracePeriod": {
                    "type": "integer",
                    "description": "Int, defaults to 48.\nTime before Two-factor authentication is enforced (in hours).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                }
            },
            "requiredInputs": [
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "autoDevopsEnabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Default to Auto\nDevOps pipeline for all projects within this group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the group.\n"
                    },
                    "emailsDisabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Disable email notifications\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the group.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to true.  Whether to enable LFS\nsupport for projects in this group.\n"
                    },
                    "mentionsDisabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Disable the capability\nof a group from getting mentioned\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this group.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "Integer, id of the parent group (creates a nested group).\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the group.\n"
                    },
                    "projectCreationLevel": {
                        "type": "string",
                        "description": ", defaults to Maintainer.\nDetermine if developers can create projects\nin the group. Can be noone (No one), maintainer (Maintainers),\nor developer (Developers + Maintainers).\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Whether to\nenable users to request access to the group.\n"
                    },
                    "requireTwoFactorAuthentication": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.\nequire all users in this group to setup Two-factor authentication.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "The group level registration token to use during runner setup.\n"
                    },
                    "shareWithGroupLock": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Prevent sharing\na project with another group within this group.\n"
                    },
                    "subgroupCreationLevel": {
                        "type": "string",
                        "description": ", defaults to Owner.\nAllowed to create subgroups.\nCan be owner (Owners), or maintainer (Maintainers).\n"
                    },
                    "twoFactorGracePeriod": {
                        "type": "integer",
                        "description": "Int, defaults to 48.\nTime before Two-factor authentication is enforced (in hours).\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web URL of the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupCluster:GroupCluster": {
            "description": "## # gitlab\\_group\\_cluster\n\nThis resource allows you to create and manage group clusters for your GitLab groups.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/group/clusters/index.html).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Group(\"foo\", {\n    path: \"foo-path\",\n});\nconst bar = new gitlab.GroupCluster(\"bar\", {\n    domain: \"example.com\",\n    enabled: true,\n    environmentScope: \"*\",\n    group: foo.id,\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesAuthorizationType: \"rbac\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesToken: \"some-token\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Group(\"foo\", path=\"foo-path\")\nbar = gitlab.GroupCluster(\"bar\",\n    domain=\"example.com\",\n    enabled=True,\n    environment_scope=\"*\",\n    group=foo.id,\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_authorization_type=\"rbac\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_token=\"some-token\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Group(\"foo\", new GitLab.GroupArgs\n        {\n            Path = \"foo-path\",\n        });\n        var bar = new GitLab.GroupCluster(\"bar\", new GitLab.GroupClusterArgs\n        {\n            Domain = \"example.com\",\n            Enabled = true,\n            EnvironmentScope = \"*\",\n            Group = foo.Id,\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesAuthorizationType = \"rbac\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesToken = \"some-token\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewGroup(ctx, \"foo\", \u0026gitlab.GroupArgs{\n\t\t\tPath: pulumi.String(\"foo-path\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewGroupCluster(ctx, \"bar\", \u0026gitlab.GroupClusterArgs{\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tGroup:                       foo.ID(),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab group clusters can be imported using an id made up of `groupid:clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupCluster:GroupCluster bar 123:321\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the cluster to.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string"
                },
                "providerType": {
                    "type": "string"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "group",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the cluster to.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                }
            },
            "requiredInputs": [
                "group",
                "kubernetesApiUrl",
                "kubernetesToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The id of the group to add the cluster to.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string"
                    },
                    "providerType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupLabel:GroupLabel": {
            "description": "## # gitlab\\_group\\_label\n\nThis resource allows you to create and manage labels for your GitLab groups.\nFor further information on labels, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/user/project/labels.html#group-labels).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fixme = new gitlab.GroupLabel(\"fixme\", {\n    color: \"#ffcc00\",\n    description: \"issue with failing tests\",\n    group: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfixme = gitlab.GroupLabel(\"fixme\",\n    color=\"#ffcc00\",\n    description=\"issue with failing tests\",\n    group=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fixme = new GitLab.GroupLabel(\"fixme\", new GitLab.GroupLabelArgs\n        {\n            Color = \"#ffcc00\",\n            Description = \"issue with failing tests\",\n            Group = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupLabel(ctx, \"fixme\", \u0026gitlab.GroupLabelArgs{\n\t\t\tColor:       pulumi.String(\"#ffcc00\"),\n\t\t\tDescription: pulumi.String(\"issue with failing tests\"),\n\t\t\tGroup:       pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitlab group labels can be imported using an id made up of `{group_id}:{group_label_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupLabel:GroupLabel example 12345:fixme\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the label to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                }
            },
            "required": [
                "color",
                "group",
                "name"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the label to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                }
            },
            "requiredInputs": [
                "color",
                "group"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupLabel resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the label.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group to add the label to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupLdapLink:GroupLdapLink": {
            "description": "## # gitlab\\_group\\_ldap\\_link\n\nThis resource allows you to add an LDAP link to an existing GitLab group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupLdapLink(\"test\", {\n    accessLevel: \"developer\",\n    cn: \"testuser\",\n    groupId: \"12345\",\n    ldapProvider: \"ldapmain\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupLdapLink(\"test\",\n    access_level=\"developer\",\n    cn=\"testuser\",\n    group_id=\"12345\",\n    ldap_provider=\"ldapmain\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupLdapLink(\"test\", new GitLab.GroupLdapLinkArgs\n        {\n            AccessLevel = \"developer\",\n            Cn = \"testuser\",\n            GroupId = \"12345\",\n            LdapProvider = \"ldapmain\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupLdapLink(ctx, \"test\", \u0026gitlab.GroupLdapLinkArgs{\n\t\t\tAccessLevel:  pulumi.String(\"developer\"),\n\t\t\tCn:           pulumi.String(\"testuser\"),\n\t\t\tGroupId:      pulumi.String(\"12345\"),\n\t\t\tLdapProvider: pulumi.String(\"ldapmain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab group ldap links can be imported using an id made up of `ldap_provider:cn`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupLdapLink:GroupLdapLink test \"ldapmain:testuser\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Acceptable values are: guest, reporter, developer, maintainer, owner.\n"
                },
                "cn": {
                    "type": "string",
                    "description": "The CN of the LDAP group to link with.\n"
                },
                "force": {
                    "type": "boolean"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the GitLab group.\n"
                },
                "ldapProvider": {
                    "type": "string",
                    "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                }
            },
            "required": [
                "accessLevel",
                "cn",
                "groupId",
                "ldapProvider"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Acceptable values are: guest, reporter, developer, maintainer, owner.\n"
                },
                "cn": {
                    "type": "string",
                    "description": "The CN of the LDAP group to link with.\n"
                },
                "force": {
                    "type": "boolean"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the GitLab group.\n"
                },
                "ldapProvider": {
                    "type": "string",
                    "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "cn",
                "groupId",
                "ldapProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupLdapLink resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Acceptable values are: guest, reporter, developer, maintainer, owner.\n"
                    },
                    "cn": {
                        "type": "string",
                        "description": "The CN of the LDAP group to link with.\n"
                    },
                    "force": {
                        "type": "boolean"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the GitLab group.\n"
                    },
                    "ldapProvider": {
                        "type": "string",
                        "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupMembership:GroupMembership": {
            "description": "## # gitlab\\_group_membership\n\nThis resource allows you to add a user to an existing group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupMembership(\"test\", {\n    accessLevel: \"guest\",\n    expiresAt: \"2020-12-31\",\n    groupId: \"12345\",\n    userId: 1337,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupMembership(\"test\",\n    access_level=\"guest\",\n    expires_at=\"2020-12-31\",\n    group_id=\"12345\",\n    user_id=1337)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupMembership(\"test\", new GitLab.GroupMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ExpiresAt = \"2020-12-31\",\n            GroupId = \"12345\",\n            UserId = 1337,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupMembership(ctx, \"test\", \u0026gitlab.GroupMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tExpiresAt:   pulumi.String(\"2020-12-31\"),\n\t\t\tGroupId:     pulumi.String(\"12345\"),\n\t\t\tUserId:      pulumi.Int(1337),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab group membership can be imported using an id made up of `group_id:user_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupMembership:GroupMembership test \"12345:1337\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Acceptable values are: guest, reporter, developer, maintainer, owner.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the group.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "required": [
                "accessLevel",
                "groupId",
                "userId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Acceptable values are: guest, reporter, developer, maintainer, owner.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the group.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "groupId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Acceptable values are: guest, reporter, developer, maintainer, owner.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the group.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupShareGroup:GroupShareGroup": {
            "description": "## # gitlab\\_group\\_share\\_group\n\nThis resource allows you to share a group with another group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupShareGroup(\"test\", {\n    groupId: gitlab_group.foo.id,\n    shareGroupId: gitlab_group.bar.id,\n    groupAccess: \"guest\",\n    expiresAt: \"2099-01-01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupShareGroup(\"test\",\n    group_id=gitlab_group[\"foo\"][\"id\"],\n    share_group_id=gitlab_group[\"bar\"][\"id\"],\n    group_access=\"guest\",\n    expires_at=\"2099-01-01\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupShareGroup(\"test\", new GitLab.GroupShareGroupArgs\n        {\n            GroupId = gitlab_group.Foo.Id,\n            ShareGroupId = gitlab_group.Bar.Id,\n            GroupAccess = \"guest\",\n            ExpiresAt = \"2099-01-01\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupShareGroup(ctx, \"test\", \u0026gitlab.GroupShareGroupArgs{\n\t\t\tGroupId:      pulumi.Any(gitlab_group.Foo.Id),\n\t\t\tShareGroupId: pulumi.Any(gitlab_group.Bar.Id),\n\t\t\tGroupAccess:  pulumi.String(\"guest\"),\n\t\t\tExpiresAt:    pulumi.String(\"2099-01-01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab group shares can be imported using an id made up of `mainGroupId:shareGroupId`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupShareGroup:GroupShareGroup test 12345:1337\n```\n\n ",
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "One of five levels of access to the group.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the main group.\n"
                },
                "shareGroupId": {
                    "type": "integer",
                    "description": "The id of an additional group which will be shared with the main group.\n"
                }
            },
            "required": [
                "groupAccess",
                "groupId",
                "shareGroupId"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "One of five levels of access to the group.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the main group.\n"
                },
                "shareGroupId": {
                    "type": "integer",
                    "description": "The id of an additional group which will be shared with the main group.\n"
                }
            },
            "requiredInputs": [
                "groupAccess",
                "groupId",
                "shareGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupShareGroup resources.\n",
                "properties": {
                    "expiresAt": {
                        "type": "string",
                        "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                    },
                    "groupAccess": {
                        "type": "string",
                        "description": "One of five levels of access to the group.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the main group.\n"
                    },
                    "shareGroupId": {
                        "type": "integer",
                        "description": "The id of an additional group which will be shared with the main group.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupVariable:GroupVariable": {
            "description": "## # gitlab\\_group\\_variable\n\nThis resource allows you to create and manage CI/CD variables for your GitLab groups.\nFor further information on variables, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/ci/variables/README.html#variables).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.GroupVariable(\"example\", {\n    group: \"12345\",\n    key: \"group_variable_key\",\n    masked: false,\n    protected: false,\n    value: \"group_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.GroupVariable(\"example\",\n    group=\"12345\",\n    key=\"group_variable_key\",\n    masked=False,\n    protected=False,\n    value=\"group_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.GroupVariable(\"example\", new GitLab.GroupVariableArgs\n        {\n            Group = \"12345\",\n            Key = \"group_variable_key\",\n            Masked = false,\n            Protected = false,\n            Value = \"group_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupVariable(ctx, \"example\", \u0026gitlab.GroupVariableArgs{\n\t\t\tGroup:     pulumi.String(\"12345\"),\n\t\t\tKey:       pulumi.String(\"group_variable_key\"),\n\t\t\tMasked:    pulumi.Bool(false),\n\t\t\tProtected: pulumi.Bool(false),\n\t\t\tValue:     pulumi.String(\"group_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab group variables can be imported using an id made up of `groupid:variablename`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupVariable:GroupVariable example 12345:group_variable_key\n```\n\n ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the hook to.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "group",
                "key",
                "value"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the hook to.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "group",
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupVariable resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group to add the hook to.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/instanceCluster:InstanceCluster": {
            "description": "## # gitlab\\_instance\\_cluster\n\nThis resource allows you to create and manage instance clusters for your GitLab instances.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/user/instance/clusters/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst bar = new gitlab.InstanceCluster(\"bar\", {\n    domain: \"example.com\",\n    enabled: true,\n    environmentScope: \"*\",\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesAuthorizationType: \"rbac\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesNamespace: \"namespace\",\n    kubernetesToken: \"some-token\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nbar = gitlab.InstanceCluster(\"bar\",\n    domain=\"example.com\",\n    enabled=True,\n    environment_scope=\"*\",\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_authorization_type=\"rbac\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_namespace=\"namespace\",\n    kubernetes_token=\"some-token\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bar = new GitLab.InstanceCluster(\"bar\", new GitLab.InstanceClusterArgs\n        {\n            Domain = \"example.com\",\n            Enabled = true,\n            EnvironmentScope = \"*\",\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesAuthorizationType = \"rbac\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesNamespace = \"namespace\",\n            KubernetesToken = \"some-token\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewInstanceCluster(ctx, \"bar\", \u0026gitlab.InstanceClusterArgs{\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesNamespace:         pulumi.String(\"namespace\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab instance clusters can be imported using a `clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/instanceCluster:InstanceCluster bar 123\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the instance.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string"
                },
                "providerType": {
                    "type": "string"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the instance.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                }
            },
            "requiredInputs": [
                "kubernetesApiUrl",
                "kubernetesToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesNamespace": {
                        "type": "string",
                        "description": "The unique namespace related to the instance.\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string"
                    },
                    "providerType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/instanceVariable:InstanceVariable": {
            "description": "This resource allows you to create and manage CI/CD variables for your GitLab instance.\nFor further information on variables, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.InstanceVariable(\"example\", {\n    key: \"instance_variable_key\",\n    masked: false,\n    protected: false,\n    value: \"instance_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.InstanceVariable(\"example\",\n    key=\"instance_variable_key\",\n    masked=False,\n    protected=False,\n    value=\"instance_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.InstanceVariable(\"example\", new GitLab.InstanceVariableArgs\n        {\n            Key = \"instance_variable_key\",\n            Masked = false,\n            Protected = false,\n            Value = \"instance_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewInstanceVariable(ctx, \"example\", \u0026gitlab.InstanceVariableArgs{\n\t\t\tKey:       pulumi.String(\"instance_variable_key\"),\n\t\t\tMasked:    pulumi.Bool(false),\n\t\t\tProtected: pulumi.Bool(false),\n\t\t\tValue:     pulumi.String(\"instance_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab instance variables can be imported using an id made up of `variablename`, e.g. console\n\n```sh\n $ pulumi import gitlab:index/instanceVariable:InstanceVariable example instance_variable_key\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/label:Label": {
            "description": "## # gitlab\\_label\n\nThis resource allows you to create and manage labels for your GitLab projects.\nFor further information on labels, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/user/project/labels.html#project-labels).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fixme = new gitlab.Label(\"fixme\", {\n    color: \"#ffcc00\",\n    description: \"issue with failing tests\",\n    project: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfixme = gitlab.Label(\"fixme\",\n    color=\"#ffcc00\",\n    description=\"issue with failing tests\",\n    project=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fixme = new GitLab.Label(\"fixme\", new GitLab.LabelArgs\n        {\n            Color = \"#ffcc00\",\n            Description = \"issue with failing tests\",\n            Project = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewLabel(ctx, \"fixme\", \u0026gitlab.LabelArgs{\n\t\t\tColor:       pulumi.String(\"#ffcc00\"),\n\t\t\tDescription: pulumi.String(\"issue with failing tests\"),\n\t\t\tProject:     pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the label to.\n"
                }
            },
            "required": [
                "color",
                "name",
                "project"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the label to.\n"
                }
            },
            "requiredInputs": [
                "color",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Label resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the label.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the label to.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineSchedule:PipelineSchedule": {
            "description": "## # gitlab\\_pipeline\\_schedule\n\nThis resource allows you to create and manage pipeline schedules.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/project/pipelines/schedules.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.PipelineSchedule(\"example\", {\n    cron: \"0 1 * * *\",\n    description: \"Used to schedule builds\",\n    project: \"12345\",\n    ref: \"master\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.PipelineSchedule(\"example\",\n    cron=\"0 1 * * *\",\n    description=\"Used to schedule builds\",\n    project=\"12345\",\n    ref=\"master\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.PipelineSchedule(\"example\", new GitLab.PipelineScheduleArgs\n        {\n            Cron = \"0 1 * * *\",\n            Description = \"Used to schedule builds\",\n            Project = \"12345\",\n            Ref = \"master\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineSchedule(ctx, \"example\", \u0026gitlab.PipelineScheduleArgs{\n\t\t\tCron:        pulumi.String(\"0 1 * * *\"),\n\t\t\tDescription: pulumi.String(\"Used to schedule builds\"),\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t\tRef:         pulumi.String(\"master\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                },
                "cron": {
                    "type": "string",
                    "description": "The cron (e.g. `0 1 * * *`).\n"
                },
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the schedule to.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch/tag name to be triggered.\n"
                }
            },
            "required": [
                "cron",
                "description",
                "project",
                "ref"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                },
                "cron": {
                    "type": "string",
                    "description": "The cron (e.g. `0 1 * * *`).\n"
                },
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the schedule to.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch/tag name to be triggered.\n"
                }
            },
            "requiredInputs": [
                "cron",
                "description",
                "project",
                "ref"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineSchedule resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                    },
                    "cron": {
                        "type": "string",
                        "description": "The cron (e.g. `0 1 * * *`).\n"
                    },
                    "cronTimezone": {
                        "type": "string",
                        "description": "The timezone.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the pipeline schedule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the schedule to.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The branch/tag name to be triggered.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineScheduleVariable:PipelineScheduleVariable": {
            "description": "## # gitlab\\_pipeline\\_schedule\\_variable\n\nThis resource allows you to create and manage variables for pipeline schedules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst examplePipelineSchedule = new gitlab.PipelineSchedule(\"examplePipelineSchedule\", {\n    project: \"12345\",\n    description: \"Used to schedule builds\",\n    ref: \"master\",\n    cron: \"0 1 * * *\",\n});\nconst examplePipelineScheduleVariable = new gitlab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\", {\n    project: gitlab_pipeline_schedule.project,\n    pipelineScheduleId: gitlab_pipeline_schedule.id,\n    key: \"EXAMPLE_KEY\",\n    value: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_pipeline_schedule = gitlab.PipelineSchedule(\"examplePipelineSchedule\",\n    project=\"12345\",\n    description=\"Used to schedule builds\",\n    ref=\"master\",\n    cron=\"0 1 * * *\")\nexample_pipeline_schedule_variable = gitlab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\",\n    project=gitlab_pipeline_schedule[\"project\"],\n    pipeline_schedule_id=gitlab_pipeline_schedule[\"id\"],\n    key=\"EXAMPLE_KEY\",\n    value=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var examplePipelineSchedule = new GitLab.PipelineSchedule(\"examplePipelineSchedule\", new GitLab.PipelineScheduleArgs\n        {\n            Project = \"12345\",\n            Description = \"Used to schedule builds\",\n            Ref = \"master\",\n            Cron = \"0 1 * * *\",\n        });\n        var examplePipelineScheduleVariable = new GitLab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\", new GitLab.PipelineScheduleVariableArgs\n        {\n            Project = gitlab_pipeline_schedule.Project,\n            PipelineScheduleId = gitlab_pipeline_schedule.Id,\n            Key = \"EXAMPLE_KEY\",\n            Value = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineSchedule(ctx, \"examplePipelineSchedule\", \u0026gitlab.PipelineScheduleArgs{\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t\tDescription: pulumi.String(\"Used to schedule builds\"),\n\t\t\tRef:         pulumi.String(\"master\"),\n\t\t\tCron:        pulumi.String(\"0 1 * * *\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewPipelineScheduleVariable(ctx, \"examplePipelineScheduleVariable\", \u0026gitlab.PipelineScheduleVariableArgs{\n\t\t\tProject:            pulumi.Any(gitlab_pipeline_schedule.Project),\n\t\t\tPipelineScheduleId: pulumi.Any(gitlab_pipeline_schedule.Id),\n\t\t\tKey:                pulumi.String(\"EXAMPLE_KEY\"),\n\t\t\tValue:              pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the variable.\n"
                },
                "pipelineScheduleId": {
                    "type": "integer",
                    "description": "The id of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "required": [
                "key",
                "pipelineScheduleId",
                "project",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of the variable.\n"
                },
                "pipelineScheduleId": {
                    "type": "integer",
                    "description": "The id of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "requiredInputs": [
                "key",
                "pipelineScheduleId",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineScheduleVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of the variable.\n"
                    },
                    "pipelineScheduleId": {
                        "type": "integer",
                        "description": "The id of the pipeline schedule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the schedule to.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the variable.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineTrigger:PipelineTrigger": {
            "description": "## # gitlab\\_pipeline\\_trigger\n\nThis resource allows you to create and manage pipeline triggers\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.PipelineTrigger(\"example\", {\n    description: \"Used to trigger builds\",\n    project: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.PipelineTrigger(\"example\",\n    description=\"Used to trigger builds\",\n    project=\"12345\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.PipelineTrigger(\"example\", new GitLab.PipelineTriggerArgs\n        {\n            Description = \"Used to trigger builds\",\n            Project = \"12345\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineTrigger(ctx, \"example\", \u0026gitlab.PipelineTriggerArgs{\n\t\t\tDescription: pulumi.String(\"Used to trigger builds\"),\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline trigger.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the trigger to.\n"
                },
                "token": {
                    "type": "string"
                }
            },
            "required": [
                "description",
                "project",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline trigger.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the trigger to.\n"
                }
            },
            "requiredInputs": [
                "description",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineTrigger resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the pipeline trigger.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the trigger to.\n"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/project:Project": {
            "properties": {
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "description": "Number of merge request approvals required for merging. Default is 0.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "description": "Enable container registry for the project.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the project.\n"
                },
                "groupWithProjectTemplatesId": {
                    "type": "integer",
                    "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).\n"
                },
                "httpUrlToRepo": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the\nrepository via HTTP.\n"
                },
                "importUrl": {
                    "type": "string",
                    "description": "Git URL to a repository to be imported.\n"
                },
                "initializeWithReadme": {
                    "type": "boolean",
                    "description": "Create master branch with first commit containing a README.md file.\n"
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "description": "Enable issue tracking for the project.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Enable LFS for the project.\n"
                },
                "mergeMethod": {
                    "type": "string",
                    "description": "Set to `ff` to create fast-forward merges\nValid values are `merge`, `rebase_merge`, `ff`\nRepositories are created with `merge` by default\n"
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "description": "Enable merge requests for the project.\n"
                },
                "mirror": {
                    "type": "boolean",
                    "description": "Enables pull mirroring in a project. Default is `false`. For further information on mirroring,\nconsult the [gitlab documentation](https://docs.gitlab.com/ee/user/project/repository/repository_mirroring.html#repository-mirroring).\n"
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "description": "Pull mirror overwrites diverged branches.\n"
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "description": "Pull mirroring triggers builds. Default is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "namespaceId": {
                    "type": "integer",
                    "description": "The namespace (group or user) of the project. Defaults to your user.\nSee `gitlab.Group` for an example.\n"
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "description": "Only mirror protected branches.\n"
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "description": "Enable packages repository for the project.\n"
                },
                "pagesAccessLevel": {
                    "type": "string",
                    "description": "Enable pages access control\nValid values are `disabled`, `private`, `enabled`, `public`.\n`private` is the default.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the repository.\n"
                },
                "pathWithNamespace": {
                    "type": "string",
                    "description": "The path of the repository with namespace.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable pipelines for the project.\n"
                },
                "pushRules": {
                    "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                    "description": "Push rules for the project (documented below).\n"
                },
                "removeSourceBranchAfterMerge": {
                    "type": "boolean",
                    "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Allow users to request member access.\n"
                },
                "runnersToken": {
                    "type": "string",
                    "description": "Registration token to use during runner setup.\n"
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "description": "Enable shared runners for this project.\n"
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "description": "Enable snippets for the project.\n"
                },
                "sshUrlToRepo": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the\nrepository via SSH.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags (topics) of the project.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `template_project_id`.\n"
                },
                "templateProjectId": {
                    "type": "integer",
                    "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                },
                "useCustomTemplate": {
                    "type": "boolean",
                    "description": "Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "Set to `public` to create a public project.\nValid values are `private`, `internal`, `public`.\nRepositories are created as private by default.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "URL that can be used to find the project in a browser.\n"
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "description": "Enable wiki for the project.\n"
                }
            },
            "required": [
                "httpUrlToRepo",
                "name",
                "namespaceId",
                "pathWithNamespace",
                "pushRules",
                "runnersToken",
                "sharedRunnersEnabled",
                "sshUrlToRepo",
                "webUrl"
            ],
            "inputProperties": {
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "description": "Number of merge request approvals required for merging. Default is 0.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "description": "Enable container registry for the project.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the project.\n"
                },
                "groupWithProjectTemplatesId": {
                    "type": "integer",
                    "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).\n"
                },
                "importUrl": {
                    "type": "string",
                    "description": "Git URL to a repository to be imported.\n"
                },
                "initializeWithReadme": {
                    "type": "boolean",
                    "description": "Create master branch with first commit containing a README.md file.\n"
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "description": "Enable issue tracking for the project.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Enable LFS for the project.\n"
                },
                "mergeMethod": {
                    "type": "string",
                    "description": "Set to `ff` to create fast-forward merges\nValid values are `merge`, `rebase_merge`, `ff`\nRepositories are created with `merge` by default\n"
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "description": "Enable merge requests for the project.\n"
                },
                "mirror": {
                    "type": "boolean",
                    "description": "Enables pull mirroring in a project. Default is `false`. For further information on mirroring,\nconsult the [gitlab documentation](https://docs.gitlab.com/ee/user/project/repository/repository_mirroring.html#repository-mirroring).\n"
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "description": "Pull mirror overwrites diverged branches.\n"
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "description": "Pull mirroring triggers builds. Default is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "namespaceId": {
                    "type": "integer",
                    "description": "The namespace (group or user) of the project. Defaults to your user.\nSee `gitlab.Group` for an example.\n"
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "description": "Only mirror protected branches.\n"
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "description": "Enable packages repository for the project.\n"
                },
                "pagesAccessLevel": {
                    "type": "string",
                    "description": "Enable pages access control\nValid values are `disabled`, `private`, `enabled`, `public`.\n`private` is the default.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the repository.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable pipelines for the project.\n"
                },
                "pushRules": {
                    "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                    "description": "Push rules for the project (documented below).\n"
                },
                "removeSourceBranchAfterMerge": {
                    "type": "boolean",
                    "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Allow users to request member access.\n"
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "description": "Enable shared runners for this project.\n"
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "description": "Enable snippets for the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags (topics) of the project.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `template_project_id`.\n"
                },
                "templateProjectId": {
                    "type": "integer",
                    "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                },
                "useCustomTemplate": {
                    "type": "boolean",
                    "description": "Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "Set to `public` to create a public project.\nValid values are `private`, `internal`, `public`.\nRepositories are created as private by default.\n"
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "description": "Enable wiki for the project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "approvalsBeforeMerge": {
                        "type": "integer",
                        "description": "Number of merge request approvals required for merging. Default is 0.\n"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                    },
                    "containerRegistryEnabled": {
                        "type": "boolean",
                        "description": "Enable container registry for the project.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the project.\n"
                    },
                    "groupWithProjectTemplatesId": {
                        "type": "integer",
                        "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).\n"
                    },
                    "httpUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\nrepository via HTTP.\n"
                    },
                    "importUrl": {
                        "type": "string",
                        "description": "Git URL to a repository to be imported.\n"
                    },
                    "initializeWithReadme": {
                        "type": "boolean",
                        "description": "Create master branch with first commit containing a README.md file.\n"
                    },
                    "issuesEnabled": {
                        "type": "boolean",
                        "description": "Enable issue tracking for the project.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Enable LFS for the project.\n"
                    },
                    "mergeMethod": {
                        "type": "string",
                        "description": "Set to `ff` to create fast-forward merges\nValid values are `merge`, `rebase_merge`, `ff`\nRepositories are created with `merge` by default\n"
                    },
                    "mergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Enable merge requests for the project.\n"
                    },
                    "mirror": {
                        "type": "boolean",
                        "description": "Enables pull mirroring in a project. Default is `false`. For further information on mirroring,\nconsult the [gitlab documentation](https://docs.gitlab.com/ee/user/project/repository/repository_mirroring.html#repository-mirroring).\n"
                    },
                    "mirrorOverwritesDivergedBranches": {
                        "type": "boolean",
                        "description": "Pull mirror overwrites diverged branches.\n"
                    },
                    "mirrorTriggerBuilds": {
                        "type": "boolean",
                        "description": "Pull mirroring triggers builds. Default is `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "namespaceId": {
                        "type": "integer",
                        "description": "The namespace (group or user) of the project. Defaults to your user.\nSee `gitlab.Group` for an example.\n"
                    },
                    "onlyAllowMergeIfAllDiscussionsAreResolved": {
                        "type": "boolean",
                        "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                    },
                    "onlyAllowMergeIfPipelineSucceeds": {
                        "type": "boolean",
                        "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                    },
                    "onlyMirrorProtectedBranches": {
                        "type": "boolean",
                        "description": "Only mirror protected branches.\n"
                    },
                    "packagesEnabled": {
                        "type": "boolean",
                        "description": "Enable packages repository for the project.\n"
                    },
                    "pagesAccessLevel": {
                        "type": "string",
                        "description": "Enable pages access control\nValid values are `disabled`, `private`, `enabled`, `public`.\n`private` is the default.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the repository.\n"
                    },
                    "pathWithNamespace": {
                        "type": "string",
                        "description": "The path of the repository with namespace.\n"
                    },
                    "pipelinesEnabled": {
                        "type": "boolean",
                        "description": "Enable pipelines for the project.\n"
                    },
                    "pushRules": {
                        "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                        "description": "Push rules for the project (documented below).\n"
                    },
                    "removeSourceBranchAfterMerge": {
                        "type": "boolean",
                        "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Allow users to request member access.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "Registration token to use during runner setup.\n"
                    },
                    "sharedRunnersEnabled": {
                        "type": "boolean",
                        "description": "Enable shared runners for this project.\n"
                    },
                    "snippetsEnabled": {
                        "type": "boolean",
                        "description": "Enable snippets for the project.\n"
                    },
                    "sshUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\nrepository via SSH.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags (topics) of the project.\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `template_project_id`.\n"
                    },
                    "templateProjectId": {
                        "type": "integer",
                        "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                    },
                    "useCustomTemplate": {
                        "type": "boolean",
                        "description": "Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "Set to `public` to create a public project.\nValid values are `private`, `internal`, `public`.\nRepositories are created as private by default.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "URL that can be used to find the project in a browser.\n"
                    },
                    "wikiEnabled": {
                        "type": "boolean",
                        "description": "Enable wiki for the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectApprovalRule:ProjectApprovalRule": {
            "description": "## # gitlab\\_project\\_approval\\_rule\n\nThis resource allows you to create and manage multiple approval rules for your GitLab\nprojects. For further information on approval rules, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/api/merge_request_approvals.html#project-level-mr-approvals).\n\n\u003e This feature requires a GitLab Starter account or above.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example_one = new gitlab.ProjectApprovalRule(\"example-one\", {\n    approvalsRequired: 3,\n    groupIds: [51],\n    project: \"5\",\n    userIds: [\n        50,\n        500,\n    ],\n});\nconst example_two = new gitlab.ProjectApprovalRule(\"example-two\", {\n    approvalsRequired: 1,\n    groupIds: [52],\n    project: \"5\",\n    userIds: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_one = gitlab.ProjectApprovalRule(\"example-one\",\n    approvals_required=3,\n    group_ids=[51],\n    project=\"5\",\n    user_ids=[\n        50,\n        500,\n    ])\nexample_two = gitlab.ProjectApprovalRule(\"example-two\",\n    approvals_required=1,\n    group_ids=[52],\n    project=\"5\",\n    user_ids=[])\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example_one = new GitLab.ProjectApprovalRule(\"example-one\", new GitLab.ProjectApprovalRuleArgs\n        {\n            ApprovalsRequired = 3,\n            GroupIds = \n            {\n                51,\n            },\n            Project = \"5\",\n            UserIds = \n            {\n                50,\n                500,\n            },\n        });\n        var example_two = new GitLab.ProjectApprovalRule(\"example-two\", new GitLab.ProjectApprovalRuleArgs\n        {\n            ApprovalsRequired = 1,\n            GroupIds = \n            {\n                52,\n            },\n            Project = \"5\",\n            UserIds = {},\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab project approval rules can be imported using an id consisting of `project-id:rule-id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectApprovalRule:ProjectApprovalRule example \"12345:6\"\n```\n\n ",
            "properties": {
                "approvalsRequired": {
                    "type": "integer",
                    "description": "The number of approvals required for this rule.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs who's members can approve of the merge request\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the approval rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the approval rules.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of specific User IDs to add to the list of approvers.\n"
                }
            },
            "required": [
                "approvalsRequired",
                "name",
                "project"
            ],
            "inputProperties": {
                "approvalsRequired": {
                    "type": "integer",
                    "description": "The number of approvals required for this rule.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs who's members can approve of the merge request\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the approval rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the approval rules.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of specific User IDs to add to the list of approvers.\n"
                }
            },
            "requiredInputs": [
                "approvalsRequired",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectApprovalRule resources.\n",
                "properties": {
                    "approvalsRequired": {
                        "type": "integer",
                        "description": "The number of approvals required for this rule.\n"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of group IDs who's members can approve of the merge request\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the approval rule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the approval rules.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of specific User IDs to add to the list of approvers.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectCluster:ProjectCluster": {
            "description": "## # gitlab\\_project\\_cluster\n\nThis resource allows you to create and manage project clusters for your GitLab projects.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/project/clusters/index.html).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {});\nconst bar = new gitlab.ProjectCluster(\"bar\", {\n    domain: \"example.com\",\n    enabled: true,\n    environmentScope: \"*\",\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesAuthorizationType: \"rbac\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesNamespace: \"namespace\",\n    kubernetesToken: \"some-token\",\n    managementProjectId: \"123456\",\n    project: foo.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\")\nbar = gitlab.ProjectCluster(\"bar\",\n    domain=\"example.com\",\n    enabled=True,\n    environment_scope=\"*\",\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_authorization_type=\"rbac\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_namespace=\"namespace\",\n    kubernetes_token=\"some-token\",\n    management_project_id=\"123456\",\n    project=foo.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n        });\n        var bar = new GitLab.ProjectCluster(\"bar\", new GitLab.ProjectClusterArgs\n        {\n            Domain = \"example.com\",\n            Enabled = true,\n            EnvironmentScope = \"*\",\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesAuthorizationType = \"rbac\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesNamespace = \"namespace\",\n            KubernetesToken = \"some-token\",\n            ManagementProjectId = \"123456\",\n            Project = foo.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectCluster(ctx, \"bar\", \u0026gitlab.ProjectClusterArgs{\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesNamespace:         pulumi.String(\"namespace\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t\tProject:                     foo.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab project clusters can be imported using an id made up of `projectid:clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectCluster:ProjectCluster bar 123:321\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the project.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the cluster to.\n"
                },
                "providerType": {
                    "type": "string"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "project",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the project.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the cluster to.\n"
                }
            },
            "requiredInputs": [
                "kubernetesApiUrl",
                "kubernetesToken",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesNamespace": {
                        "type": "string",
                        "description": "The unique namespace related to the project.\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the cluster to.\n"
                    },
                    "providerType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectFreezePeriod:ProjectFreezePeriod": {
            "description": "## # gitlab.ProjectFreezePeriod\n\nThis resource allows you to create and manage freeze periods. For further information on freeze periods, consult the [gitlab documentation](https://docs.gitlab.com/ee/api/freeze_periods.html#create-a-freeze-period).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst schedule = new gitlab.ProjectFreezePeriod(\"schedule\", {\n    projectId: gitlab_project.foo.id,\n    freezeStart: \"0 23 * * 5\",\n    freezeEnd: \"0 7 * * 1\",\n    cronTimezone: \"UTC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nschedule = gitlab.ProjectFreezePeriod(\"schedule\",\n    project_id=gitlab_project[\"foo\"][\"id\"],\n    freeze_start=\"0 23 * * 5\",\n    freeze_end=\"0 7 * * 1\",\n    cron_timezone=\"UTC\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var schedule = new GitLab.ProjectFreezePeriod(\"schedule\", new GitLab.ProjectFreezePeriodArgs\n        {\n            ProjectId = gitlab_project.Foo.Id,\n            FreezeStart = \"0 23 * * 5\",\n            FreezeEnd = \"0 7 * * 1\",\n            CronTimezone = \"UTC\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectFreezePeriod(ctx, \"schedule\", \u0026gitlab.ProjectFreezePeriodArgs{\n\t\t\tProjectId:    pulumi.Any(gitlab_project.Foo.Id),\n\t\t\tFreezeStart:  pulumi.String(\"0 23 * * 5\"),\n\t\t\tFreezeEnd:    pulumi.String(\"0 7 * * 1\"),\n\t\t\tCronTimezone: pulumi.String(\"UTC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab project freeze periods can be imported using an id made up of `project_id:freeze_period_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectFreezePeriod:ProjectFreezePeriod schedule \"12345:1337\"\n```\n\n ",
            "properties": {
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "freezeEnd": {
                    "type": "string",
                    "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                },
                "freezeStart": {
                    "type": "string",
                    "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                }
            },
            "required": [
                "freezeEnd",
                "freezeStart",
                "projectId"
            ],
            "inputProperties": {
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "freezeEnd": {
                    "type": "string",
                    "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                },
                "freezeStart": {
                    "type": "string",
                    "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                }
            },
            "requiredInputs": [
                "freezeEnd",
                "freezeStart",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFreezePeriod resources.\n",
                "properties": {
                    "cronTimezone": {
                        "type": "string",
                        "description": "The timezone.\n"
                    },
                    "freezeEnd": {
                        "type": "string",
                        "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                    },
                    "freezeStart": {
                        "type": "string",
                        "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project to add the schedule to.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectHook:ProjectHook": {
            "description": "## # gitlab\\_project\\_hook\n\nThis resource allows you to create and manage hooks for your GitLab projects.\nFor further information on hooks, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/project/integrations/webhooks.html).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.ProjectHook(\"example\", {\n    mergeRequestsEvents: true,\n    project: \"example/hooked\",\n    url: \"https://example.com/hook/example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.ProjectHook(\"example\",\n    merge_requests_events=True,\n    project=\"example/hooked\",\n    url=\"https://example.com/hook/example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.ProjectHook(\"example\", new GitLab.ProjectHookArgs\n        {\n            MergeRequestsEvents = true,\n            Project = \"example/hooked\",\n            Url = \"https://example.com/hook/example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectHook(ctx, \"example\", \u0026gitlab.ProjectHookArgs{\n\t\t\tMergeRequestsEvents: pulumi.Bool(true),\n\t\t\tProject:             pulumi.String(\"example/hooked\"),\n\t\t\tUrl:                 pulumi.String(\"https://example.com/hook/example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential notes events.\n"
                },
                "deploymentEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for deployment events.\n"
                },
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Enable ssl verification when invoking the hook.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for merge requests.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for notes events.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for push events.\n"
                },
                "pushEventsBranchFilter": {
                    "type": "string",
                    "description": "Invoke the hook for push events on matching branches only.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for tag push events.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token to present when invoking the hook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the hook to invoke.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for wiki page events.\n"
                }
            },
            "required": [
                "project",
                "url"
            ],
            "inputProperties": {
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential notes events.\n"
                },
                "deploymentEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for deployment events.\n"
                },
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Enable ssl verification when invoking the hook.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for merge requests.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for notes events.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for push events.\n"
                },
                "pushEventsBranchFilter": {
                    "type": "string",
                    "description": "Invoke the hook for push events on matching branches only.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for tag push events.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token to present when invoking the hook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the hook to invoke.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for wiki page events.\n"
                }
            },
            "requiredInputs": [
                "project",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectHook resources.\n",
                "properties": {
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for confidential issues events.\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for confidential notes events.\n"
                    },
                    "deploymentEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for deployment events.\n"
                    },
                    "enableSslVerification": {
                        "type": "boolean",
                        "description": "Enable ssl verification when invoking the hook.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for issues events.\n"
                    },
                    "jobEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for job events.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for merge requests.\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for notes events.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the hook to.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for push events.\n"
                    },
                    "pushEventsBranchFilter": {
                        "type": "string",
                        "description": "Invoke the hook for push events on matching branches only.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for tag push events.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A token to present when invoking the hook.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the hook to invoke.\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for wiki page events.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals": {
            "properties": {
                "disableOverridingApproversPerMergeRequest": {
                    "type": "boolean",
                    "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\nthe approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.\n"
                },
                "mergeRequestsAuthorApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\nalso need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.\n"
                },
                "mergeRequestsDisableCommittersApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project to change MR approval configuration.\n"
                },
                "resetApprovalsOnPush": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "disableOverridingApproversPerMergeRequest": {
                    "type": "boolean",
                    "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\nthe approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.\n"
                },
                "mergeRequestsAuthorApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\nalso need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.\n"
                },
                "mergeRequestsDisableCommittersApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project to change MR approval configuration.\n"
                },
                "resetApprovalsOnPush": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectLevelMrApprovals resources.\n",
                "properties": {
                    "disableOverridingApproversPerMergeRequest": {
                        "type": "boolean",
                        "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\nthe approval rules for all new merge requests will be determined by the default approval rules. Default is `false`.\n"
                    },
                    "mergeRequestsAuthorApproval": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\nalso need to be included in the approvers list in order to be able to approve their merge request. Default is `false`.\n"
                    },
                    "mergeRequestsDisableCommittersApproval": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The ID of the project to change MR approval configuration.\n"
                    },
                    "resetApprovalsOnPush": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectMembership:ProjectMembership": {
            "description": "## # gitlab\\_project_membership\n\nThis resource allows you to add a current user to an existing project with a set access level.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.ProjectMembership(\"test\", {\n    accessLevel: \"guest\",\n    projectId: \"12345\",\n    userId: 1337,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.ProjectMembership(\"test\",\n    access_level=\"guest\",\n    project_id=\"12345\",\n    user_id=1337)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.ProjectMembership(\"test\", new GitLab.ProjectMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ProjectId = \"12345\",\n            UserId = 1337,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectMembership(ctx, \"test\", \u0026gitlab.ProjectMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tProjectId:   pulumi.String(\"12345\"),\n\t\t\tUserId:      pulumi.Int(1337),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab group membership can be imported using an id made up of `group_id:user_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectMembership:ProjectMembership test \"12345:1337\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "required": [
                "accessLevel",
                "projectId",
                "userId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "projectId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMembership resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "One of five levels of access to the project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectMirror:ProjectMirror": {
            "description": "## # gitlab\\_project_mirror\n\nThis resource allows you to add a mirror target for the repository, all changes will be synced to the remote target.\n\n\u003e This is for *pushing* changes to a remote repository. *Pull Mirroring* can be configured using a combination of the \n`import_url`, `mirror`, and `mirror_trigger_builds` properties on the `gitlab.Project` resource.\n\nFor further information on mirroring, consult the \n[gitlab documentation](https://docs.gitlab.com/ee/user/project/repository/repository_mirroring.html#repository-mirroring).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.ProjectMirror(\"foo\", {\n    project: \"1\",\n    url: \"https://username:password@github.com/org/repository.git\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.ProjectMirror(\"foo\",\n    project=\"1\",\n    url=\"https://username:password@github.com/org/repository.git\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.ProjectMirror(\"foo\", new GitLab.ProjectMirrorArgs\n        {\n            Project = \"1\",\n            Url = \"https://username:password@github.com/org/repository.git\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectMirror(ctx, \"foo\", \u0026gitlab.ProjectMirrorArgs{\n\t\t\tProject: pulumi.String(\"1\"),\n\t\t\tUrl:     pulumi.String(\"https://username:password@github.com/org/repository.git\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab project mirror can be imported using an id made up of `project_id:mirror_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectMirror:ProjectMirror foo \"12345:1337\"\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the mirror is enabled.\n"
                },
                "keepDivergentRefs": {
                    "type": "boolean",
                    "description": "Determines if divergent refs are skipped.\n"
                },
                "mirrorId": {
                    "type": "integer"
                },
                "onlyProtectedBranches": {
                    "type": "boolean",
                    "description": "Determines if only protected branches are mirrored.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the remote repository to be mirrored.\n"
                }
            },
            "required": [
                "mirrorId",
                "project",
                "url"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the mirror is enabled.\n"
                },
                "keepDivergentRefs": {
                    "type": "boolean",
                    "description": "Determines if divergent refs are skipped.\n"
                },
                "onlyProtectedBranches": {
                    "type": "boolean",
                    "description": "Determines if only protected branches are mirrored.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the remote repository to be mirrored.\n"
                }
            },
            "requiredInputs": [
                "project",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMirror resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if the mirror is enabled.\n"
                    },
                    "keepDivergentRefs": {
                        "type": "boolean",
                        "description": "Determines if divergent refs are skipped.\n"
                    },
                    "mirrorId": {
                        "type": "integer"
                    },
                    "onlyProtectedBranches": {
                        "type": "boolean",
                        "description": "Determines if only protected branches are mirrored.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the remote repository to be mirrored.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectShareGroup:ProjectShareGroup": {
            "description": "## # gitlab\\_project\\_share\\_group\n\nThis resource allows you to share a project with a group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.ProjectShareGroup(\"test\", {\n    accessLevel: \"guest\",\n    groupId: 1337,\n    projectId: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.ProjectShareGroup(\"test\",\n    access_level=\"guest\",\n    group_id=1337,\n    project_id=\"12345\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.ProjectShareGroup(\"test\", new GitLab.ProjectShareGroupArgs\n        {\n            AccessLevel = \"guest\",\n            GroupId = 1337,\n            ProjectId = \"12345\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectShareGroup(ctx, \"test\", \u0026gitlab.ProjectShareGroupArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tGroupId:     pulumi.Int(1337),\n\t\t\tProjectId:   pulumi.String(\"12345\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab project group shares can be imported using an id made up of `projectid:groupid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectShareGroup:ProjectShareGroup test 12345:1337\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                }
            },
            "required": [
                "accessLevel",
                "groupId",
                "projectId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "groupId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectShareGroup resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "One of five levels of access to the project.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The id of the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectVariable:ProjectVariable": {
            "description": "## # gitlab\\_project\\_variable\n\nThis resource allows you to create and manage CI/CD variables for your GitLab projects.\nFor further information on variables, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/ci/variables/README.html#variables).\n\n\u003e **Important:** If your GitLab version is older than 13.4, you may see nondeterministic behavior\nwhen updating or deleting `gitlab.ProjectVariable` resources with non-unique keys, for example if\nthere is another variable with the same key and different environment scope. See\n[this GitLab issue](https://gitlab.com/gitlab-org/gitlab/-/issues/9912).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.ProjectVariable(\"example\", {\n    key: \"project_variable_key\",\n    project: \"12345\",\n    protected: false,\n    value: \"project_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.ProjectVariable(\"example\",\n    key=\"project_variable_key\",\n    project=\"12345\",\n    protected=False,\n    value=\"project_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.ProjectVariable(\"example\", new GitLab.ProjectVariableArgs\n        {\n            Key = \"project_variable_key\",\n            Project = \"12345\",\n            Protected = false,\n            Value = \"project_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectVariable(ctx, \"example\", \u0026gitlab.ProjectVariableArgs{\n\t\t\tKey:       pulumi.String(\"project_variable_key\"),\n\t\t\tProject:   pulumi.String(\"12345\"),\n\t\t\tProtected: pulumi.Bool(false),\n\t\t\tValue:     pulumi.String(\"project_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitLab project variables can be imported using an id made up of `project:key:environment_scope`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectVariable:ProjectVariable example '12345:project_variable_key:*'\n```\n\n ",
            "properties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment_scope of the variable. Defaults to `*`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "key",
                "project",
                "value"
            ],
            "inputProperties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment_scope of the variable. Defaults to `*`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectVariable resources.\n",
                "properties": {
                    "environmentScope": {
                        "type": "string",
                        "description": "The environment_scope of the variable. Defaults to `*`.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the hook to.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceGithub:ServiceGithub": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "repositoryUrl": {
                    "type": "string"
                },
                "staticContext": {
                    "type": "boolean",
                    "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more.\n"
                },
                "title": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "active",
                "createdAt",
                "project",
                "repositoryUrl",
                "title",
                "token",
                "updatedAt"
            ],
            "inputProperties": {
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "repositoryUrl": {
                    "type": "string"
                },
                "staticContext": {
                    "type": "boolean",
                    "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                }
            },
            "requiredInputs": [
                "project",
                "repositoryUrl",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceGithub resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "repositoryUrl": {
                        "type": "string"
                    },
                    "staticContext": {
                        "type": "boolean",
                        "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more.\n"
                    },
                    "title": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string",
                        "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceJira:ServiceJira": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "commentOnEventEnabled": {
                    "type": "boolean",
                    "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                },
                "commitEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for commit events\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "jiraIssueTransitionId": {
                    "type": "string",
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user created to be used with GitLab/JIRA.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user created to be used with GitLab/JIRA.\n"
                }
            },
            "required": [
                "active",
                "commentOnEventEnabled",
                "commitEvents",
                "createdAt",
                "mergeRequestsEvents",
                "password",
                "project",
                "title",
                "updatedAt",
                "url",
                "username"
            ],
            "inputProperties": {
                "commentOnEventEnabled": {
                    "type": "boolean",
                    "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                },
                "commitEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for commit events\n"
                },
                "jiraIssueTransitionId": {
                    "type": "string",
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user created to be used with GitLab/JIRA.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user created to be used with GitLab/JIRA.\n"
                }
            },
            "requiredInputs": [
                "password",
                "project",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceJira resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "commentOnEventEnabled": {
                        "type": "boolean",
                        "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                    },
                    "commitEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for commit events\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "jiraIssueTransitionId": {
                        "type": "string",
                        "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge request events\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user created to be used with GitLab/JIRA.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                    },
                    "title": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user created to be used with GitLab/JIRA.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/servicePipelinesEmail:ServicePipelinesEmail": {
            "properties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. Default is `default`\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Notify only broken pipelines. Default is true.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") email addresses where notifications are sent.\n"
                }
            },
            "required": [
                "project",
                "recipients"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. Default is `default`\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Notify only broken pipelines. Default is true.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") email addresses where notifications are sent.\n"
                }
            },
            "requiredInputs": [
                "project",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePipelinesEmail resources.\n",
                "properties": {
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. Default is `default`\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Notify only broken pipelines. Default is true.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ") email addresses where notifications are sent.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceSlack:ServiceSlack": {
            "properties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default_and_protected\".\n"
                },
                "confidentialIssueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive confidential issue events notifications.\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events.\n"
                },
                "issueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive issue events notifications.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean"
                },
                "mergeRequestChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive merge request events notifications.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge requests events.\n"
                },
                "noteChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive note events notifications.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines.\n"
                },
                "notifyOnlyDefaultBranch": {
                    "type": "boolean",
                    "description": "DEPRECATED: This parameter has been replaced with `branches_to_be_notified`.\n",
                    "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                },
                "pipelineChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive pipeline events notifications.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive push events notifications.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive tag push events notifications.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                },
                "wikiPageChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive wiki page events notifications.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events.\n"
                }
            },
            "required": [
                "branchesToBeNotified",
                "confidentialIssuesEvents",
                "confidentialNoteEvents",
                "issuesEvents",
                "jobEvents",
                "mergeRequestsEvents",
                "noteEvents",
                "notifyOnlyBrokenPipelines",
                "notifyOnlyDefaultBranch",
                "pipelineEvents",
                "project",
                "pushEvents",
                "tagPushEvents",
                "webhook",
                "wikiPageEvents"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default_and_protected\".\n"
                },
                "confidentialIssueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive confidential issue events notifications.\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events.\n"
                },
                "issueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive issue events notifications.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "mergeRequestChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive merge request events notifications.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge requests events.\n"
                },
                "noteChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive note events notifications.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines.\n"
                },
                "notifyOnlyDefaultBranch": {
                    "type": "boolean",
                    "description": "DEPRECATED: This parameter has been replaced with `branches_to_be_notified`.\n",
                    "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                },
                "pipelineChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive pipeline events notifications.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive push events notifications.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive tag push events notifications.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                },
                "wikiPageChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive wiki page events notifications.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events.\n"
                }
            },
            "requiredInputs": [
                "project",
                "webhook"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceSlack resources.\n",
                "properties": {
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default_and_protected\".\n"
                    },
                    "confidentialIssueChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive confidential issue events notifications.\n"
                    },
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential issues events.\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential note events.\n"
                    },
                    "issueChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive issue events notifications.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for issues events.\n"
                    },
                    "jobEvents": {
                        "type": "boolean"
                    },
                    "mergeRequestChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive merge request events notifications.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge requests events.\n"
                    },
                    "noteChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive note events notifications.\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for note events.\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Send notifications for broken pipelines.\n"
                    },
                    "notifyOnlyDefaultBranch": {
                        "type": "boolean",
                        "description": "DEPRECATED: This parameter has been replaced with `branches_to_be_notified`.\n",
                        "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                    },
                    "pipelineChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive pipeline events notifications.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "pushChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive push events notifications.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for push events.\n"
                    },
                    "tagPushChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive tag push events notifications.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for tag push events.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use.\n"
                    },
                    "webhook": {
                        "type": "string",
                        "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                    },
                    "wikiPageChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive wiki page events notifications.\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for wiki page events.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/tagProtection:TagProtection": {
            "description": "## # gitlab\\_tag\\_protection\n\nThis resource allows you to protect a specific tag or wildcard by an access level so that the user with less access level cannot Create the tags.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst tagProtect = new gitlab.TagProtection(\"TagProtect\", {\n    createAccessLevel: \"developer\",\n    project: \"12345\",\n    tag: \"TagProtected\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntag_protect = gitlab.TagProtection(\"tagProtect\",\n    create_access_level=\"developer\",\n    project=\"12345\",\n    tag=\"TagProtected\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tagProtect = new GitLab.TagProtection(\"tagProtect\", new GitLab.TagProtectionArgs\n        {\n            CreateAccessLevel = \"developer\",\n            Project = \"12345\",\n            Tag = \"TagProtected\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewTagProtection(ctx, \"tagProtect\", \u0026gitlab.TagProtectionArgs{\n\t\t\tCreateAccessLevel: pulumi.String(\"developer\"),\n\t\t\tProject:           pulumi.String(\"12345\"),\n\t\t\tTag:               pulumi.String(\"TagProtected\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createAccessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Name of the tag or wildcard.\n"
                }
            },
            "required": [
                "createAccessLevel",
                "project",
                "tag"
            ],
            "inputProperties": {
                "createAccessLevel": {
                    "type": "string",
                    "description": "One of five levels of access to the project.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Name of the tag or wildcard.\n"
                }
            },
            "requiredInputs": [
                "createAccessLevel",
                "project",
                "tag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagProtection resources.\n",
                "properties": {
                    "createAccessLevel": {
                        "type": "string",
                        "description": "One of five levels of access to the project.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Name of the tag or wildcard.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/user:User": {
            "properties": {
                "canCreateGroup": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to enable administrative priviledges\nfor the user.\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note associated to the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n"
                },
                "projectsLimit": {
                    "type": "integer",
                    "description": "Integer, defaults to 0.  Number of projects user can create.\n"
                },
                "resetPassword": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Send user password reset link.\n"
                },
                "skipConfirmation": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                }
            },
            "required": [
                "email",
                "name",
                "username"
            ],
            "inputProperties": {
                "canCreateGroup": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to enable administrative priviledges\nfor the user.\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note associated to the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n"
                },
                "projectsLimit": {
                    "type": "integer",
                    "description": "Integer, defaults to 0.  Number of projects user can create.\n"
                },
                "resetPassword": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Send user password reset link.\n"
                },
                "skipConfirmation": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                }
            },
            "requiredInputs": [
                "email",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "canCreateGroup": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The e-mail address of the user.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Whether to enable administrative priviledges\nfor the user.\n"
                    },
                    "isExternal": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "note": {
                        "type": "string",
                        "description": "The note associated to the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user.\n"
                    },
                    "projectsLimit": {
                        "type": "integer",
                        "description": "Integer, defaults to 0.  Number of projects user can create.\n"
                    },
                    "resetPassword": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Send user password reset link.\n"
                    },
                    "skipConfirmation": {
                        "type": "boolean",
                        "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "gitlab:index/getGroup:getGroup": {
            "description": "## # gitlab\\_group\n\nProvides details about a specific group in the gitlab provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n**By group's ID**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = pulumi.output(gitlab.getGroup({\n    groupId: 123,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_group(group_id=123)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs\n        {\n            GroupId = 123,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := 123\n\t\t_, err := gitlab.LookupGroup(ctx, \u0026gitlab.LookupGroupArgs{\n\t\t\tGroupId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n**By group's full path**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = pulumi.output(gitlab.getGroup({\n    fullPath: \"foo/bar\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_group(full_path=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs\n        {\n            FullPath = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"foo/bar\"\n\t\t_, err := gitlab.LookupGroup(ctx, \u0026gitlab.LookupGroupArgs{\n\t\t\tFullPath: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the group.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the group.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Boolean, is LFS enabled for projects in this group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this group.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "Integer, ID of the parent group.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the group.\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Boolean, is request for access enabled to the group.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "The group level registration token to use during runner setup.\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "Visibility level of the group. Possible values are `private`, `internal`, `public`.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web URL of the group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "fullName",
                    "fullPath",
                    "groupId",
                    "lfsEnabled",
                    "name",
                    "parentId",
                    "path",
                    "requestAccessEnabled",
                    "runnersToken",
                    "visibilityLevel",
                    "webUrl",
                    "id"
                ]
            }
        },
        "gitlab:index/getGroupMembership:getGroupMembership": {
            "description": "## # gitlab\\_group\\_membership\n\nProvides details about a list of group members in the gitlab provider. The results include id, username, name and more about the requested members.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n**By group's ID**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getGroupMembership({\n    groupId: 123,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_group_membership(group_id=123)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetGroupMembership.InvokeAsync(new GitLab.GetGroupMembershipArgs\n        {\n            GroupId = 123,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := 123\n\t\t_, err := gitlab.LookupGroupMembership(ctx, \u0026gitlab.LookupGroupMembershipArgs{\n\t\t\tGroupId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n**By group's full path**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getGroupMembership({\n    fullPath: \"foo/bar\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_group_membership(full_path=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetGroupMembership.InvokeAsync(new GitLab.GetGroupMembershipArgs\n        {\n            FullPath = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"foo/bar\"\n\t\t_, err := gitlab.LookupGroupMembership(ctx, \u0026gitlab.LookupGroupMembershipArgs{\n\t\t\tFullPath: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroupMembership.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Only return members with the desidered access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroupMembership.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "One of five levels of access to the group.\n"
                    },
                    "fullPath": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getGroupMembershipMember:getGroupMembershipMember"
                        },
                        "description": "The list of group members.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessLevel",
                    "fullPath",
                    "groupId",
                    "members",
                    "id"
                ]
            }
        },
        "gitlab:index/getProject:getProject": {
            "description": "## # gitlab\\_project\n\nProvides details about a specific project in the gitlab provider. The results include the name of the project, path, description, default branch, etc.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProject({\n    id: \"30\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project(id=\"30\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs\n        {\n            Id = \"30\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupProject(ctx, \u0026gitlab.LookupProjectArgs{\n\t\t\tId: \"30\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProject({\n    id: \"foo/bar/baz\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project(id=\"foo/bar/baz\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs\n        {\n            Id = \"foo/bar/baz\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupProject(ctx, \u0026gitlab.LookupProjectArgs{\n\t\t\tId: \"foo/bar/baz\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The integer or path with namespace that uniquely identifies the project within the gitlab install.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the project is in read-only mode (archived).\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the project.\n"
                    },
                    "httpUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\nrepository via HTTP.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Integer that uniquely identifies the project within the gitlab install.\n"
                    },
                    "issuesEnabled": {
                        "type": "boolean",
                        "description": "Enable issue tracking for the project.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Enable LFS for the project.\n"
                    },
                    "mergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Enable merge requests for the project.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "integer",
                        "description": "The namespace (group or user) of the project. Defaults to your user.\nSee `gitlab.Group` for an example.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the repository.\n"
                    },
                    "pathWithNamespace": {
                        "type": "string",
                        "description": "The path of the repository with namespace.\n"
                    },
                    "pipelinesEnabled": {
                        "type": "boolean",
                        "description": "Enable pipelines for the project.\n"
                    },
                    "pushRules": {
                        "$ref": "#/types/gitlab:index/getProjectPushRules:getProjectPushRules"
                    },
                    "removeSourceBranchAfterMerge": {
                        "type": "boolean",
                        "description": "Enable `Delete source branch` option by default for all new merge requests\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Allow users to request member access.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "Registration token to use during runner setup.\n"
                    },
                    "snippetsEnabled": {
                        "type": "boolean",
                        "description": "Enable snippets for the project.\n"
                    },
                    "sshUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\nrepository via SSH.\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "Repositories are created as private by default.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "URL that can be used to find the project in a browser.\n"
                    },
                    "wikiEnabled": {
                        "type": "boolean",
                        "description": "Enable wiki for the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "archived",
                    "defaultBranch",
                    "description",
                    "httpUrlToRepo",
                    "id",
                    "issuesEnabled",
                    "lfsEnabled",
                    "mergeRequestsEnabled",
                    "name",
                    "namespaceId",
                    "path",
                    "pathWithNamespace",
                    "pipelinesEnabled",
                    "pushRules",
                    "removeSourceBranchAfterMerge",
                    "requestAccessEnabled",
                    "runnersToken",
                    "snippetsEnabled",
                    "sshUrlToRepo",
                    "visibilityLevel",
                    "webUrl",
                    "wikiEnabled"
                ]
            }
        },
        "gitlab:index/getProjects:getProjects": {
            "description": "## # gitlab\\_projects\n\nProvides details about a list of projects in the Gitlab provider. Listing all projects and group projects with [project filtering](https://docs.gitlab.com/ee/api/projects.html#list-user-projects) or [group project filtering](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects) is supported.\n\n\u003e NOTE: This data source supports all available filters exposed by the `xanzy/go-gitlab` package, which might not expose all available filters exposed by the Gitlab APIs.   \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### List projects within a group tree\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst mygroup = gitlab.getGroup({\n    fullPath: \"mygroup\",\n});\nconst groupProjects = mygroup.then(mygroup =\u003e gitlab.getProjects({\n    groupId: mygroup.id,\n    orderBy: \"name\",\n    includeSubgroups: true,\n    withShared: false,\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nmygroup = gitlab.get_group(full_path=\"mygroup\")\ngroup_projects = gitlab.get_projects(group_id=mygroup.id,\n    order_by=\"name\",\n    include_subgroups=True,\n    with_shared=False)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mygroup = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs\n        {\n            FullPath = \"mygroup\",\n        }));\n        var groupProjects = mygroup.Apply(mygroup =\u003e Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs\n        {\n            GroupId = mygroup.Id,\n            OrderBy = \"name\",\n            IncludeSubgroups = true,\n            WithShared = false,\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"mygroup\"\n\t\tmygroup, err := gitlab.LookupGroup(ctx, \u0026gitlab.LookupGroupArgs{\n\t\t\tFullPath: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := mygroup.Id\n\t\topt2 := \"name\"\n\t\topt3 := true\n\t\topt4 := false\n\t\t_, err = gitlab.GetProjects(ctx, \u0026gitlab.GetProjectsArgs{\n\t\t\tGroupId:          \u0026opt1,\n\t\t\tOrderBy:          \u0026opt2,\n\t\t\tIncludeSubgroups: \u0026opt3,\n\t\t\tWithShared:       \u0026opt4,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### List projects using the search syntax\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst projects = pulumi.output(gitlab.getProjects({\n    search: \"postgresql\",\n    visibility: \"private\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nprojects = gitlab.get_projects(search=\"postgresql\",\n    visibility=\"private\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var projects = Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs\n        {\n            Search = \"postgresql\",\n            Visibility = \"private\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"postgresql\"\n\t\topt1 := \"private\"\n\t\t_, err := gitlab.GetProjects(ctx, \u0026gitlab.GetProjectsArgs{\n\t\t\tSearch:     \u0026opt0,\n\t\t\tVisibility: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "Limit by archived status.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.\n"
                    },
                    "includeSubgroups": {
                        "type": "boolean",
                        "description": "Include projects in subgroups of this group. Default is `false`. Needs `group_id`.\n"
                    },
                    "maxQueryablePages": {
                        "type": "integer",
                        "description": "Prevents overloading your Gitlab instance in case of a misconfiguration. Default is `10`.\n"
                    },
                    "membership": {
                        "type": "boolean",
                        "description": "Limit by projects that the current user is a member of.\n"
                    },
                    "minAccessLevel": {
                        "type": "integer",
                        "description": "Limit to projects where current user has at least this access level, refer to the [official documentation](https://docs.gitlab.com/ee/api/members.html) for values. Cannot be used with `group_id`.\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Return projects ordered by `id`, `name`, `path`, `created_at`, `updated_at`, or `last_activity_at` fields. Default is `created_at`.\n"
                    },
                    "owned": {
                        "type": "boolean",
                        "description": "Limit by projects owned by the current user.\n"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "perPage": {
                        "type": "integer"
                    },
                    "search": {
                        "type": "string",
                        "description": "Return list of authorized projects matching the search criteria.\n"
                    },
                    "simple": {
                        "type": "boolean",
                        "description": "Return only the ID, URL, name, and path of each project.\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Return projects sorted in `asc` or `desc` order. Default is `desc`.\n"
                    },
                    "starred": {
                        "type": "boolean",
                        "description": "Limit by projects starred by the current user.\n"
                    },
                    "statistics": {
                        "type": "boolean",
                        "description": "Include project statistics. Cannot be used with `group_id`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Limit by visibility `public`, `internal`, or `private`.\n"
                    },
                    "withCustomAttributes": {
                        "type": "boolean",
                        "description": "Include custom attributes in response _(admins only)_.\n"
                    },
                    "withIssuesEnabled": {
                        "type": "boolean",
                        "description": "Limit by projects with issues feature enabled. Default is `false`.\n"
                    },
                    "withMergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Limit by projects with merge requests feature enabled. Default is `false`.\n"
                    },
                    "withProgrammingLanguage": {
                        "type": "string",
                        "description": "Limit by projects which use the given programming language. Cannot be used with `group_id`.\n"
                    },
                    "withShared": {
                        "type": "boolean",
                        "description": "Include projects shared to this group. Default is `true`. Needs `group_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeSubgroups": {
                        "type": "boolean"
                    },
                    "maxQueryablePages": {
                        "type": "integer"
                    },
                    "membership": {
                        "type": "boolean"
                    },
                    "minAccessLevel": {
                        "type": "integer"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "owned": {
                        "type": "boolean"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "perPage": {
                        "type": "integer"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list containing the projects matching the supplied arguments\n"
                    },
                    "search": {
                        "type": "string"
                    },
                    "simple": {
                        "type": "boolean"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "starred": {
                        "type": "boolean"
                    },
                    "statistics": {
                        "type": "boolean"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of the project.\n"
                    },
                    "withCustomAttributes": {
                        "type": "boolean"
                    },
                    "withIssuesEnabled": {
                        "type": "boolean"
                    },
                    "withMergeRequestsEnabled": {
                        "type": "boolean"
                    },
                    "withProgrammingLanguage": {
                        "type": "string"
                    },
                    "withShared": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "gitlab:index/getUser:getUser": {
            "description": "## # gitlab\\_user\n\nProvides details about a specific user in the gitlab provider. Especially the ability to lookup the id for linking to other resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getUser({\n    username: \"myuser\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_user(username=\"myuser\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetUser.InvokeAsync(new GitLab.GetUserArgs\n        {\n            Username = \"myuser\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"myuser\"\n\t\t_, err := gitlab.LookupUser(ctx, \u0026gitlab.LookupUserArgs{\n\t\t\tUsername: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The e-mail address of the user. (Requires administrator privileges)\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The ID of the user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "The avatar URL of the user.\n"
                    },
                    "bio": {
                        "type": "string",
                        "description": "The bio of the user.\n"
                    },
                    "canCreateGroup": {
                        "type": "boolean",
                        "description": "Whether the user can create groups.\n"
                    },
                    "canCreateProject": {
                        "type": "boolean",
                        "description": "Whether the user can create projects.\n"
                    },
                    "colorSchemeId": {
                        "type": "integer",
                        "description": "User's color scheme ID.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date the user was created at.\n"
                    },
                    "currentSignInAt": {
                        "type": "string",
                        "description": "Current user's sign-in date.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The e-mail address of the user.\n"
                    },
                    "externUid": {
                        "type": "string",
                        "description": "The external UID of the user.\n"
                    },
                    "external": {
                        "type": "boolean",
                        "description": "Whether the user is external.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Whether the user is an admin.\n"
                    },
                    "lastSignInAt": {
                        "type": "string",
                        "description": "Last user's sign-in date.\n"
                    },
                    "linkedin": {
                        "type": "string",
                        "description": "Linkedin profile of the user.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the user.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "note": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization of the user.\n"
                    },
                    "projectsLimit": {
                        "type": "integer",
                        "description": "Number of projects the user can create.\n"
                    },
                    "skype": {
                        "type": "string",
                        "description": "Skype username of the user.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Whether the user is active or blocked.\n"
                    },
                    "themeId": {
                        "type": "integer",
                        "description": "User's theme ID.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter username of the user.\n"
                    },
                    "twoFactorEnabled": {
                        "type": "boolean",
                        "description": "Whether user's two factor auth is enabled.\n"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "userProvider": {
                        "type": "string",
                        "description": "The UID provider of the user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    },
                    "websiteUrl": {
                        "type": "string",
                        "description": "User's website URL.\n"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "bio",
                    "canCreateGroup",
                    "canCreateProject",
                    "colorSchemeId",
                    "createdAt",
                    "currentSignInAt",
                    "email",
                    "externUid",
                    "external",
                    "isAdmin",
                    "lastSignInAt",
                    "linkedin",
                    "location",
                    "name",
                    "note",
                    "organization",
                    "projectsLimit",
                    "skype",
                    "state",
                    "themeId",
                    "twitter",
                    "twoFactorEnabled",
                    "userId",
                    "userProvider",
                    "username",
                    "websiteUrl",
                    "id"
                ]
            }
        },
        "gitlab:index/getUsers:getUsers": {
            "description": "## # gitlab\\_users\n\nProvides details about a list of users in the gitlab provider. The results include id, username, email, name and more about the requested users. Users can also be sorted and filtered using several options.\n\n**NOTE**: Some of the available options require administrator privileges. Please visit [Gitlab API documentation][users_for_admins] for more information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getUsers({\n    createdBefore: \"2019-01-01\",\n    orderBy: \"name\",\n    sort: \"desc\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_users(created_before=\"2019-01-01\",\n    order_by=\"name\",\n    sort=\"desc\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetUsers.InvokeAsync(new GitLab.GetUsersArgs\n        {\n            CreatedBefore = \"2019-01-01\",\n            OrderBy = \"name\",\n            Sort = \"desc\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"2019-01-01\"\n\t\topt1 := \"name\"\n\t\topt2 := \"desc\"\n\t\t_, err := gitlab.GetUsers(ctx, \u0026gitlab.GetUsersArgs{\n\t\t\tCreatedBefore: \u0026opt0,\n\t\t\tOrderBy:       \u0026opt1,\n\t\t\tSort:          \u0026opt2,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Filter users that are active.\n"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Filter users that are blocked.\n"
                    },
                    "createdAfter": {
                        "type": "string",
                        "description": "Search for users created after a specific date. (Requires administrator privileges)\n"
                    },
                    "createdBefore": {
                        "type": "string",
                        "description": "Search for users created before a specific date. (Requires administrator privileges)\n"
                    },
                    "externProvider": {
                        "type": "string",
                        "description": "Lookup users by external provider. (Requires administrator privileges)\n"
                    },
                    "externUid": {
                        "type": "string",
                        "description": "Lookup users by external UID. (Requires administrator privileges)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Order the users' list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Search users by username, name or email.\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Sort users' list in asc or desc order. (Requires administrator privileges)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "blocked": {
                        "type": "boolean"
                    },
                    "createdAfter": {
                        "type": "string"
                    },
                    "createdBefore": {
                        "type": "string"
                    },
                    "externProvider": {
                        "type": "string"
                    },
                    "externUid": {
                        "type": "string",
                        "description": "The external UID of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getUsersUser:getUsersUser"
                        },
                        "description": "The list of users.\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "gitlab": "GitLab"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-gitlab/sdk/v3/go/gitlab"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.15.0",
                "builtin-modules": "3.0.0",
                "read-package-tree": "^5.2.1",
                "resolve": "^1.7.1"
            },
            "devDependencies": {
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing GitLab resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-gitlab` repo](https://github.com/pulumi/pulumi-gitlab/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`gitlabhq/terraform-provider-gitlab` repo](https://github.com/gitlabhq/terraform-provider-gitlab/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-gitlab` repo](https://github.com/pulumi/pulumi-gitlab/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`gitlabhq/terraform-provider-gitlab` repo](https://github.com/gitlabhq/terraform-provider-gitlab/issues).",
            "requires": {
                "pulumi": "\u003e=2.15.0,\u003c3.0.0"
            }
        }
    }
}