{
    "name": "gitlab",
    "description": "A Pulumi package for creating and managing GitLab resources.",
    "keywords": [
        "pulumi",
        "gitlab"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`gitlab` Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab).",
    "repository": "https://github.com/pulumi/pulumi-gitlab",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "baseUrl": {
                "type": "string",
                "description": "This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab\nEnterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from\nthe `GITLAB_BASE_URL` environment variable. The value must end with a slash.\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab\nCE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when\n`client_cert` is set.\n"
            },
            "earlyAuthCheck": {
                "type": "boolean",
                "description": "(Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider\nconfiguration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the\nGitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and\nmay change in the future. Please make sure to always keep backups of your state.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "When set to true this disables SSL verification of the connection to the GitLab instance.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is\nused in this provider for authentication (using Bearer authorization token). See\nhttps://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment\nvariable.\n"
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Level of access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "description": "Readable description of level of access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "description": "The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `user_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "description": "The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `group_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "accessLevelDescription"
                    ]
                }
            }
        },
        "gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Level of access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "description": "Readable description of level of access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "description": "The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `user_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "description": "The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `group_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessLevel",
                        "accessLevelDescription"
                    ]
                }
            }
        },
        "gitlab:index/ProjectPushRules:ProjectPushRules": {
            "properties": {
                "authorEmailRegex": {
                    "type": "string",
                    "description": "All commit author emails must match this regex, e.g. `@my-company.com$`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchNameRegex": {
                    "type": "string",
                    "description": "All branch names must match this regex, e.g. `(feature|hotfix)\\/*`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitCommitterCheck": {
                    "type": "boolean",
                    "description": "Users can only push commits to this repository that were committed with one of their own verified emails.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageNegativeRegex": {
                    "type": "string",
                    "description": "No commit message is allowed to match this regex, for example `ssh\\:\\/\\/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageRegex": {
                    "type": "string",
                    "description": "All commit messages must match this regex, e.g. `Fixed \\d+\\..*`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "denyDeleteTag": {
                    "type": "boolean",
                    "description": "Deny deleting a tag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileNameRegex": {
                    "type": "string",
                    "description": "All commited filenames must not match this regex, e.g. `(jar|exe)$`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "Maximum file size (MB).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberCheck": {
                    "type": "boolean",
                    "description": "Restrict commits by author (email) to existing GitLab users.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preventSecrets": {
                    "type": "boolean",
                    "description": "GitLab will reject any files that are likely to contain secrets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rejectUnsignedCommits": {
                    "type": "boolean",
                    "description": "Reject commit when it’s not signed through GPG.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "gitlab:index/getGroupMembershipMember:getGroupMembershipMember": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiresAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "avatarUrl",
                "expiresAt",
                "id",
                "name",
                "state",
                "username",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchMergeAccessLevel:getProjectProtectedBranchMergeAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchPushAccessLevel:getProjectProtectedBranchPushAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchesProtectedBranch:getProjectProtectedBranchesProtectedBranch": {
            "properties": {
                "allowForcePush": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeAccessLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectProtectedBranchesProtectedBranchMergeAccessLevel:getProjectProtectedBranchesProtectedBranchMergeAccessLevel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pushAccessLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectProtectedBranchesProtectedBranchPushAccessLevel:getProjectProtectedBranchesProtectedBranchPushAccessLevel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowForcePush",
                "codeOwnerApprovalRequired",
                "id",
                "mergeAccessLevels",
                "name",
                "pushAccessLevels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchesProtectedBranchMergeAccessLevel:getProjectProtectedBranchesProtectedBranchMergeAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectProtectedBranchesProtectedBranchPushAccessLevel:getProjectProtectedBranchesProtectedBranchPushAccessLevel": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accessLevelDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "accessLevelDescription",
                "groupId",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectPushRules:getProjectPushRules": {
            "properties": {
                "authorEmailRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchNameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitCommitterCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageNegativeRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commitMessageRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "denyDeleteTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileNameRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxFileSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preventSecrets": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rejectUnsignedCommits": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authorEmailRegex",
                "branchNameRegex",
                "commitCommitterCheck",
                "commitMessageNegativeRegex",
                "commitMessageRegex",
                "denyDeleteTag",
                "fileNameRegex",
                "maxFileSize",
                "memberCheck",
                "preventSecrets",
                "rejectUnsignedCommits"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProject:getProjectsProject": {
            "properties": {
                "_links": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowMergeOnSkippedPipeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "archived": {
                    "type": "boolean",
                    "description": "Limit by archived status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildCoverageRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ciConfigPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creatorId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultBranch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forkedFromProject": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectForkedFromProject:getProjectsProjectForkedFromProject",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forksCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpUrlToRepo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "importError": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "importStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jobsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastActivityAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirror": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mirrorUserId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectNamespace:getProjectsProjectNamespace",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openIssuesCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectOwner:getProjectsProjectOwner",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "$ref": "#/types/gitlab:index/getProjectsProjectPermissions:getProjectsProjectPermissions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicBuilds": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readmeUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolveOutdatedDiffDiscussions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runnersToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedWithGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/getProjectsProjectSharedWithGroup:getProjectsProjectSharedWithGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUrlToRepo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "starCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statistics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "Include project statistics. Cannot be used with `group_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibility": {
                    "type": "string",
                    "description": "Limit by visibility `public`, `internal`, or `private`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "_links",
                "allowMergeOnSkippedPipeline",
                "approvalsBeforeMerge",
                "archived",
                "avatarUrl",
                "buildCoverageRegex",
                "ciConfigPath",
                "containerRegistryEnabled",
                "createdAt",
                "creatorId",
                "customAttributes",
                "defaultBranch",
                "description",
                "forkedFromProject",
                "forksCount",
                "httpUrlToRepo",
                "id",
                "importError",
                "importStatus",
                "issuesEnabled",
                "jobsEnabled",
                "lastActivityAt",
                "lfsEnabled",
                "mergeMethod",
                "mergeRequestsEnabled",
                "mirror",
                "mirrorOverwritesDivergedBranches",
                "mirrorTriggerBuilds",
                "mirrorUserId",
                "name",
                "nameWithNamespace",
                "namespace",
                "onlyAllowMergeIfAllDiscussionsAreResolved",
                "onlyAllowMergeIfPipelineSucceeds",
                "onlyMirrorProtectedBranches",
                "openIssuesCount",
                "owner",
                "packagesEnabled",
                "path",
                "pathWithNamespace",
                "permissions",
                "public",
                "publicBuilds",
                "readmeUrl",
                "requestAccessEnabled",
                "resolveOutdatedDiffDiscussions",
                "runnersToken",
                "sharedRunnersEnabled",
                "sharedWithGroups",
                "snippetsEnabled",
                "sshUrlToRepo",
                "starCount",
                "statistics",
                "tagLists",
                "visibility",
                "webUrl",
                "wikiEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectForkedFromProject:getProjectsProjectForkedFromProject": {
            "properties": {
                "httpUrlToRepo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathWithNamespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "httpUrlToRepo",
                "id",
                "name",
                "nameWithNamespace",
                "path",
                "pathWithNamespace",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectNamespace:getProjectsProjectNamespace": {
            "properties": {
                "fullPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fullPath",
                "id",
                "kind",
                "name",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectOwner:getProjectsProjectOwner": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "websiteUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "id",
                "name",
                "state",
                "username",
                "websiteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectPermissions:getProjectsProjectPermissions": {
            "properties": {
                "groupAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupAccess",
                "projectAccess"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getProjectsProjectSharedWithGroup:getProjectsProjectSharedWithGroup": {
            "properties": {
                "groupAccessLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "integer",
                    "description": "The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupAccessLevel",
                "groupId",
                "groupName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "gitlab:index/getUsersUser:getUsersUser": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bio": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canCreateGroup": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canCreateProject": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "colorSchemeId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentSignInAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externUid": {
                    "type": "string",
                    "description": "Lookup users by external UID. (Requires administrator privileges)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "external": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isAdmin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastSignInAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectsLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skype": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "themeId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twitter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twoFactorEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "websiteUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "bio",
                "canCreateGroup",
                "canCreateProject",
                "colorSchemeId",
                "createdAt",
                "currentSignInAt",
                "email",
                "externUid",
                "external",
                "id",
                "isAdmin",
                "lastSignInAt",
                "linkedin",
                "location",
                "name",
                "organization",
                "projectsLimit",
                "provider",
                "skype",
                "state",
                "themeId",
                "twitter",
                "twoFactorEnabled",
                "username",
                "websiteUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the gitlab package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "baseUrl": {
                "type": "string",
                "description": "This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab\nEnterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from\nthe `GITLAB_BASE_URL` environment variable. The value must end with a slash.\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab\nCE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when\n`client_cert` is set.\n"
            },
            "earlyAuthCheck": {
                "type": "boolean",
                "description": "(Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider\nconfiguration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the\nGitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and\nmay change in the future. Please make sure to always keep backups of your state.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "When set to true this disables SSL verification of the connection to the GitLab instance.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is\nused in this provider for authentication (using Bearer authorization token). See\nhttps://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment\nvariable.\n"
            }
        },
        "required": [
            "token"
        ],
        "inputProperties": {
            "baseUrl": {
                "type": "string",
                "description": "This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab\nEnterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from\nthe `GITLAB_BASE_URL` environment variable. The value must end with a slash.\n"
            },
            "cacertFile": {
                "type": "string",
                "description": "This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab\nCE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.\n"
            },
            "clientCert": {
                "type": "string",
                "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.\n"
            },
            "clientKey": {
                "type": "string",
                "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when\n`client_cert` is set.\n"
            },
            "earlyAuthCheck": {
                "type": "boolean",
                "description": "(Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider\nconfiguration is correct and the GitLab API is reachable. Turn it off, to skip this check. This may be useful if the\nGitLab instance does not yet exist and is created within the same terraform module. This is an experimental feature and\nmay change in the future. Please make sure to always keep backups of your state.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "When set to true this disables SSL verification of the connection to the GitLab instance.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is\nused in this provider for authentication (using Bearer authorization token). See\nhttps://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment\nvariable.\n"
            }
        },
        "requiredInputs": [
            "token"
        ]
    },
    "resources": {
        "gitlab:index/branchProtection:BranchProtection": {
            "description": "This resource allows you to protect a specific branch by an access level so that the user with less access level cannot Merge/Push to the branch.\n\n\u003e The `allowed_to_push`, `allowed_to_merge` and `code_owner_approval_required` arguments require a GitLab Premium account or above.  Please refer to [Gitlab API documentation](https://docs.gitlab.com/ee/api/protected_branches.html) for further information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst branchProtect = new gitlab.BranchProtection(\"branchProtect\", {\n    project: \"12345\",\n    branch: \"BranchProtected\",\n    pushAccessLevel: \"developer\",\n    mergeAccessLevel: \"developer\",\n    codeOwnerApprovalRequired: true,\n    allowedToPushes: [\n        {\n            userId: 5,\n        },\n        {\n            userId: 521,\n        },\n    ],\n    allowedToMerges: [\n        {\n            userId: 15,\n        },\n        {\n            userId: 37,\n        },\n    ],\n});\n// Example using dynamic block\nconst main = new gitlab.BranchProtection(\"main\", {\n    project: \"12345\",\n    branch: \"main\",\n    pushAccessLevel: \"maintainer\",\n    mergeAccessLevel: \"maintainer\",\n    dynamic: [{\n        forEach: [\n            50,\n            55,\n            60,\n        ],\n        content: [{\n            userId: allowed_to_push.value,\n        }],\n    }],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Gitlab protected branches can be imported with a key composed of `\u003cproject_id\u003e:\u003cbranch\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/branchProtection:BranchProtection BranchProtect \"12345:main\"\n```\n\n ",
            "properties": {
                "allowedToMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "allowedToPushes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "branchProtectionId": {
                    "type": "integer",
                    "description": "The ID of the branch protection (not the branch name).\n"
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "description": "Can be set to true to require code owner approval before merging.\n"
                },
                "mergeAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "pushAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.\n"
                }
            },
            "required": [
                "branch",
                "branchProtectionId",
                "mergeAccessLevel",
                "project",
                "pushAccessLevel"
            ],
            "inputProperties": {
                "allowedToMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "allowedToPushes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush"
                    },
                    "description": "Defines permissions for action.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "codeOwnerApprovalRequired": {
                    "type": "boolean",
                    "description": "Can be set to true to require code owner approval before merging.\n"
                },
                "mergeAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "pushAccessLevel": {
                    "type": "string",
                    "description": "Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "mergeAccessLevel",
                "project",
                "pushAccessLevel"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchProtection resources.\n",
                "properties": {
                    "allowedToMerges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/BranchProtectionAllowedToMerge:BranchProtectionAllowedToMerge"
                        },
                        "description": "Defines permissions for action.\n"
                    },
                    "allowedToPushes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/BranchProtectionAllowedToPush:BranchProtectionAllowedToPush"
                        },
                        "description": "Defines permissions for action.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Name of the branch.\n"
                    },
                    "branchProtectionId": {
                        "type": "integer",
                        "description": "The ID of the branch protection (not the branch name).\n"
                    },
                    "codeOwnerApprovalRequired": {
                        "type": "boolean",
                        "description": "Can be set to true to require code owner approval before merging.\n"
                    },
                    "mergeAccessLevel": {
                        "type": "string",
                        "description": "Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "pushAccessLevel": {
                        "type": "string",
                        "description": "Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployKey:DeployKey": {
            "description": "This resource allows you to create and manage [deploy keys](https://docs.gitlab.com/ee/user/project/deploy_keys/) for your GitLab projects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.DeployKey(\"example\", {\n    key: \"ssh-rsa AAAA...\",\n    project: \"example/deploying\",\n    title: \"Example deploy key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.DeployKey(\"example\",\n    key=\"ssh-rsa AAAA...\",\n    project=\"example/deploying\",\n    title=\"Example deploy key\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.DeployKey(\"example\", new GitLab.DeployKeyArgs\n        {\n            Key = \"ssh-rsa AAAA...\",\n            Project = \"example/deploying\",\n            Title = \"Example deploy key\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewDeployKey(ctx, \"example\", \u0026gitlab.DeployKeyArgs{\n\t\t\tKey:     pulumi.String(\"ssh-rsa AAAA...\"),\n\t\t\tProject: pulumi.String(\"example/deploying\"),\n\t\t\tTitle:   pulumi.String(\"Example deploy key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/deployKey:DeployKey test 1:3\n```\n\n ",
            "properties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The public ssh key body.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title to describe the deploy key with.\n"
                }
            },
            "required": [
                "key",
                "project",
                "title"
            ],
            "inputProperties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The public ssh key body.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title to describe the deploy key with.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployKey resources.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean",
                        "description": "Allow this deploy key to be used to push changes to the project.  Defaults to `false`. **NOTE::** this cannot currently be managed.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The public ssh key body.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy key to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "A title to describe the deploy key with.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployKeyEnable:DeployKeyEnable": {
            "description": "This resource allows you to enable pre-existing deploy keys for your GitLab projects.\n\n\u003e **NOTE**: the GITLAB KEY_ID for the deploy key must be known\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// A repo to host the deployment key\nconst parentProject = new gitlab.Project(\"parentProject\", {});\n// A second repo to use the deployment key from the parent project\nconst fooProject = new gitlab.Project(\"fooProject\", {});\n// Upload a deployment key for the parent repo\nconst parentDeployKey = new gitlab.DeployKey(\"parentDeployKey\", {\n    project: parentProject.id,\n    title: \"Example deploy key\",\n    key: \"ssh-rsa AAAA...\",\n});\n// Enable the deployment key on the second repo\nconst fooDeployKeyEnable = new gitlab.DeployKeyEnable(\"fooDeployKeyEnable\", {\n    project: fooProject.id,\n    keyId: parentDeployKey.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\n# A repo to host the deployment key\nparent_project = gitlab.Project(\"parentProject\")\n# A second repo to use the deployment key from the parent project\nfoo_project = gitlab.Project(\"fooProject\")\n# Upload a deployment key for the parent repo\nparent_deploy_key = gitlab.DeployKey(\"parentDeployKey\",\n    project=parent_project.id,\n    title=\"Example deploy key\",\n    key=\"ssh-rsa AAAA...\")\n# Enable the deployment key on the second repo\nfoo_deploy_key_enable = gitlab.DeployKeyEnable(\"fooDeployKeyEnable\",\n    project=foo_project.id,\n    key_id=parent_deploy_key.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // A repo to host the deployment key\n        var parentProject = new GitLab.Project(\"parentProject\", new GitLab.ProjectArgs\n        {\n        });\n        // A second repo to use the deployment key from the parent project\n        var fooProject = new GitLab.Project(\"fooProject\", new GitLab.ProjectArgs\n        {\n        });\n        // Upload a deployment key for the parent repo\n        var parentDeployKey = new GitLab.DeployKey(\"parentDeployKey\", new GitLab.DeployKeyArgs\n        {\n            Project = parentProject.Id,\n            Title = \"Example deploy key\",\n            Key = \"ssh-rsa AAAA...\",\n        });\n        // Enable the deployment key on the second repo\n        var fooDeployKeyEnable = new GitLab.DeployKeyEnable(\"fooDeployKeyEnable\", new GitLab.DeployKeyEnableArgs\n        {\n            Project = fooProject.Id,\n            KeyId = parentDeployKey.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparentProject, err := gitlab.NewProject(ctx, \"parentProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooProject, err := gitlab.NewProject(ctx, \"fooProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tparentDeployKey, err := gitlab.NewDeployKey(ctx, \"parentDeployKey\", \u0026gitlab.DeployKeyArgs{\n\t\t\tProject: parentProject.ID(),\n\t\t\tTitle:   pulumi.String(\"Example deploy key\"),\n\t\t\tKey:     pulumi.String(\"ssh-rsa AAAA...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewDeployKeyEnable(ctx, \"fooDeployKeyEnable\", \u0026gitlab.DeployKeyEnableArgs{\n\t\t\tProject: fooProject.ID(),\n\t\t\tKeyId:   parentDeployKey.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab enabled deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/deployKeyEnable:DeployKeyEnable example 12345:67890\n```\n\n ",
            "properties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Can deploy key push to the project’s repository.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Deploy key.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The Gitlab key id for the pre-existing deploy key\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Deploy key's title.\n"
                }
            },
            "required": [
                "canPush",
                "key",
                "keyId",
                "project",
                "title"
            ],
            "inputProperties": {
                "canPush": {
                    "type": "boolean",
                    "description": "Can deploy key push to the project’s repository.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Deploy key.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The Gitlab key id for the pre-existing deploy key\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy key to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Deploy key's title.\n"
                }
            },
            "requiredInputs": [
                "keyId",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployKeyEnable resources.\n",
                "properties": {
                    "canPush": {
                        "type": "boolean",
                        "description": "Can deploy key push to the project’s repository.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Deploy key.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The Gitlab key id for the pre-existing deploy key\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy key to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Deploy key's title.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/deployToken:DeployToken": {
            "description": "This resource allows you to create and manage deploy token for your GitLab projects and groups. Please refer to [Gitlab documentation](https://docs.gitlab.com/ee/user/project/deploy_tokens/) for further information.\n",
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the deploy token to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the deploy token with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy token to.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `read_repository`, `read_registry`, `read_package_registry`, `write_registry`, `write_package_registry`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret token. This is only populated when creating a new deploy token.\n"
                },
                "username": {
                    "type": "string",
                    "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                }
            },
            "required": [
                "name",
                "scopes",
                "token",
                "username"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the deploy token to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the deploy token with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the deploy token to.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `read_repository`, `read_registry`, `read_package_registry`, `write_registry`, `write_package_registry`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                }
            },
            "requiredInputs": [
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployToken resources.\n",
                "properties": {
                    "expiresAt": {
                        "type": "string",
                        "description": "Time the token will expire it, RFC3339 format. Will not expire per default.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group to add the deploy token to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name to describe the deploy token with.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the deploy token to.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Valid values: `read_repository`, `read_registry`, `read_package_registry`, `write_registry`, `write_package_registry`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret token. This is only populated when creating a new deploy token.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/group:Group": {
            "description": "This resource allows you to create and manage GitLab groups.\nNote your provider will need to be configured with admin-level access for this resource to work.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst exampleGroup = new gitlab.Group(\"exampleGroup\", {\n    path: \"example\",\n    description: \"An example group\",\n});\n// Create a project in the example group\nconst exampleProject = new gitlab.Project(\"exampleProject\", {\n    description: \"An example project\",\n    namespaceId: exampleGroup.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_group = gitlab.Group(\"exampleGroup\",\n    path=\"example\",\n    description=\"An example group\")\n# Create a project in the example group\nexample_project = gitlab.Project(\"exampleProject\",\n    description=\"An example project\",\n    namespace_id=example_group.id)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleGroup = new GitLab.Group(\"exampleGroup\", new GitLab.GroupArgs\n        {\n            Path = \"example\",\n            Description = \"An example group\",\n        });\n        // Create a project in the example group\n        var exampleProject = new GitLab.Project(\"exampleProject\", new GitLab.ProjectArgs\n        {\n            Description = \"An example project\",\n            NamespaceId = exampleGroup.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleGroup, err := gitlab.NewGroup(ctx, \"exampleGroup\", \u0026gitlab.GroupArgs{\n\t\t\tPath:        pulumi.String(\"example\"),\n\t\t\tDescription: pulumi.String(\"An example group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProject(ctx, \"exampleProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"An example project\"),\n\t\t\tNamespaceId: exampleGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/group:Group # You can import a group state using `\u003cresource\u003e \u003cid\u003e`. The\n```\n\n # `id` can be whatever the [details of a group][details_of_a_group] api takes for # its `:id` value, so for example\n\n```sh\n $ pulumi import gitlab:index/group:Group example example\n```\n\n ",
            "properties": {
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Default to Auto\n"
                },
                "defaultBranchProtection": {
                    "type": "integer",
                    "description": "Int, defaults to 2.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the group.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable email notifications\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the group.\n"
                },
                "fullPath": {
                    "type": "string",
                    "description": "The full path of the group.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true.  Whether to enable LFS\n"
                },
                "mentionsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable the capability\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this group.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Integer, id of the parent group (creates a nested group).\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the group.\n"
                },
                "projectCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Maintainer.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to\n"
                },
                "requireTwoFactorAuthentication": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.\n"
                },
                "runnersToken": {
                    "type": "string",
                    "description": "The group level registration token to use during runner setup.\n"
                },
                "shareWithGroupLock": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Prevent sharing\n"
                },
                "subgroupCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Owner.\n"
                },
                "twoFactorGracePeriod": {
                    "type": "integer",
                    "description": "Int, defaults to 48.\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web URL of the group.\n"
                }
            },
            "required": [
                "fullName",
                "fullPath",
                "name",
                "path",
                "runnersToken",
                "visibilityLevel",
                "webUrl"
            ],
            "inputProperties": {
                "autoDevopsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Default to Auto\n"
                },
                "defaultBranchProtection": {
                    "type": "integer",
                    "description": "Int, defaults to 2.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the group.\n"
                },
                "emailsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable email notifications\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true.  Whether to enable LFS\n"
                },
                "mentionsDisabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Disable the capability\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this group.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Integer, id of the parent group (creates a nested group).\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the group.\n"
                },
                "projectCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Maintainer.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to\n"
                },
                "requireTwoFactorAuthentication": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.\n"
                },
                "shareWithGroupLock": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Prevent sharing\n"
                },
                "subgroupCreationLevel": {
                    "type": "string",
                    "description": ", defaults to Owner.\n"
                },
                "twoFactorGracePeriod": {
                    "type": "integer",
                    "description": "Int, defaults to 48.\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                }
            },
            "requiredInputs": [
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "autoDevopsEnabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Default to Auto\n"
                    },
                    "defaultBranchProtection": {
                        "type": "integer",
                        "description": "Int, defaults to 2.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the group.\n"
                    },
                    "emailsDisabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Disable email notifications\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the group.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to true.  Whether to enable LFS\n"
                    },
                    "mentionsDisabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Disable the capability\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this group.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "Integer, id of the parent group (creates a nested group).\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the group.\n"
                    },
                    "projectCreationLevel": {
                        "type": "string",
                        "description": ", defaults to Maintainer.\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Whether to\n"
                    },
                    "requireTwoFactorAuthentication": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "The group level registration token to use during runner setup.\n"
                    },
                    "shareWithGroupLock": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Prevent sharing\n"
                    },
                    "subgroupCreationLevel": {
                        "type": "string",
                        "description": ", defaults to Owner.\n"
                    },
                    "twoFactorGracePeriod": {
                        "type": "integer",
                        "description": "Int, defaults to 48.\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "The group's visibility. Can be `private`, `internal`, or `public`.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web URL of the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupBadge:GroupBadge": {
            "description": "This resource allows you to create and manage badges for your GitLab groups.\nFor further information, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/user/project/badges.html#group-badges).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Group(\"foo\", {});\nconst example = new gitlab.GroupBadge(\"example\", {\n    group: foo.id,\n    linkUrl: \"https://example.com/badge-123\",\n    imageUrl: \"https://example.com/badge-123.svg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Group(\"foo\")\nexample = gitlab.GroupBadge(\"example\",\n    group=foo.id,\n    link_url=\"https://example.com/badge-123\",\n    image_url=\"https://example.com/badge-123.svg\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Group(\"foo\", new GitLab.GroupArgs\n        {\n        });\n        var example = new GitLab.GroupBadge(\"example\", new GitLab.GroupBadgeArgs\n        {\n            Group = foo.Id,\n            LinkUrl = \"https://example.com/badge-123\",\n            ImageUrl = \"https://example.com/badge-123.svg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewGroup(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewGroupBadge(ctx, \"example\", \u0026gitlab.GroupBadgeArgs{\n\t\t\tGroup:    foo.ID(),\n\t\t\tLinkUrl:  pulumi.String(\"https://example.com/badge-123\"),\n\t\t\tImageUrl: pulumi.String(\"https://example.com/badge-123.svg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group badges can be imported using an id made up of `{group_id}:{badge_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupBadge:GroupBadge foo 1:3\n```\n\n ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the badge to.\n"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on group overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                },
                "renderedImageUrl": {
                    "type": "string",
                    "description": "The image_url argument rendered (in case of use of placeholders).\n"
                },
                "renderedLinkUrl": {
                    "type": "string",
                    "description": "The link_url argument rendered (in case of use of placeholders).\n"
                }
            },
            "required": [
                "group",
                "imageUrl",
                "linkUrl",
                "renderedImageUrl",
                "renderedLinkUrl"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the badge to.\n"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on group overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                }
            },
            "requiredInputs": [
                "group",
                "imageUrl",
                "linkUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupBadge resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The id of the group to add the badge to.\n"
                    },
                    "imageUrl": {
                        "type": "string",
                        "description": "The image url which will be presented on group overview.\n"
                    },
                    "linkUrl": {
                        "type": "string",
                        "description": "The url linked with the badge.\n"
                    },
                    "renderedImageUrl": {
                        "type": "string",
                        "description": "The image_url argument rendered (in case of use of placeholders).\n"
                    },
                    "renderedLinkUrl": {
                        "type": "string",
                        "description": "The link_url argument rendered (in case of use of placeholders).\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupCluster:GroupCluster": {
            "description": "This resource allows you to create and manage group clusters for your GitLab groups.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/group/clusters/index.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Group(\"foo\", {path: \"foo-path\"});\nconst bar = new gitlab.GroupCluster(\"bar\", {\n    group: foo.id,\n    domain: \"example.com\",\n    enabled: true,\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesToken: \"some-token\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesAuthorizationType: \"rbac\",\n    environmentScope: \"*\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Group(\"foo\", path=\"foo-path\")\nbar = gitlab.GroupCluster(\"bar\",\n    group=foo.id,\n    domain=\"example.com\",\n    enabled=True,\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_token=\"some-token\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_authorization_type=\"rbac\",\n    environment_scope=\"*\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Group(\"foo\", new GitLab.GroupArgs\n        {\n            Path = \"foo-path\",\n        });\n        var bar = new GitLab.GroupCluster(\"bar\", new GitLab.GroupClusterArgs\n        {\n            Group = foo.Id,\n            Domain = \"example.com\",\n            Enabled = true,\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesToken = \"some-token\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesAuthorizationType = \"rbac\",\n            EnvironmentScope = \"*\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewGroup(ctx, \"foo\", \u0026gitlab.GroupArgs{\n\t\t\tPath: pulumi.String(\"foo-path\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewGroupCluster(ctx, \"bar\", \u0026gitlab.GroupClusterArgs{\n\t\t\tGroup:                       foo.ID(),\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group clusters can be imported using an id made up of `groupid:clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupCluster:GroupCluster bar 123:321\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the cluster to.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string",
                    "description": "Platform type.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Provider type.\n"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "group",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The id of the group to add the cluster to.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                }
            },
            "requiredInputs": [
                "group",
                "kubernetesApiUrl",
                "kubernetesToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The id of the group to add the cluster to.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "Platform type.\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupCustomAttribute:GroupCustomAttribute": {
            "description": "This resource allows you to set custom attributes for a group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst attr = new gitlab.GroupCustomAttribute(\"attr\", {\n    group: 42,\n    key: \"location\",\n    value: \"Greenland\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nattr = gitlab.GroupCustomAttribute(\"attr\",\n    group=42,\n    key=\"location\",\n    value=\"Greenland\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var attr = new GitLab.GroupCustomAttribute(\"attr\", new GitLab.GroupCustomAttributeArgs\n        {\n            Group = 42,\n            Key = \"location\",\n            Value = \"Greenland\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupCustomAttribute(ctx, \"attr\", \u0026gitlab.GroupCustomAttributeArgs{\n\t\t\tGroup: pulumi.Int(42),\n\t\t\tKey:   pulumi.String(\"location\"),\n\t\t\tValue: pulumi.String(\"Greenland\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a group custom attribute using the an id made up of `{group-id}:{key}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupCustomAttribute:GroupCustomAttribute attr 42:location\n```\n\n ",
            "properties": {
                "group": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "required": [
                "group",
                "key",
                "value"
            ],
            "inputProperties": {
                "group": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "requiredInputs": [
                "group",
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupCustomAttribute resources.\n",
                "properties": {
                    "group": {
                        "type": "integer",
                        "description": "The id of the group.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key for the Custom Attribute.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for the Custom Attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupLabel:GroupLabel": {
            "description": "This resource allows you to create and manage labels for your GitLab groups.\nFor further information on labels, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/user/project/labels.html#group-labels).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fixme = new gitlab.GroupLabel(\"fixme\", {\n    color: \"#ffcc00\",\n    description: \"issue with failing tests\",\n    group: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfixme = gitlab.GroupLabel(\"fixme\",\n    color=\"#ffcc00\",\n    description=\"issue with failing tests\",\n    group=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fixme = new GitLab.GroupLabel(\"fixme\", new GitLab.GroupLabelArgs\n        {\n            Color = \"#ffcc00\",\n            Description = \"issue with failing tests\",\n            Group = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupLabel(ctx, \"fixme\", \u0026gitlab.GroupLabelArgs{\n\t\t\tColor:       pulumi.String(\"#ffcc00\"),\n\t\t\tDescription: pulumi.String(\"issue with failing tests\"),\n\t\t\tGroup:       pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Gitlab group labels can be imported using an id made up of `{group_id}:{group_label_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupLabel:GroupLabel example 12345:fixme\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the label to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                }
            },
            "required": [
                "color",
                "group",
                "name"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group to add the label to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                }
            },
            "requiredInputs": [
                "color",
                "group"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupLabel resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the label.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group to add the label to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupLdapLink:GroupLdapLink": {
            "description": "This resource allows you to add an LDAP link to an existing GitLab group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupLdapLink(\"test\", {\n    cn: \"testuser\",\n    groupAccess: \"developer\",\n    groupId: \"12345\",\n    ldapProvider: \"ldapmain\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupLdapLink(\"test\",\n    cn=\"testuser\",\n    group_access=\"developer\",\n    group_id=\"12345\",\n    ldap_provider=\"ldapmain\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupLdapLink(\"test\", new GitLab.GroupLdapLinkArgs\n        {\n            Cn = \"testuser\",\n            GroupAccess = \"developer\",\n            GroupId = \"12345\",\n            LdapProvider = \"ldapmain\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupLdapLink(ctx, \"test\", \u0026gitlab.GroupLdapLinkArgs{\n\t\t\tCn:           pulumi.String(\"testuser\"),\n\t\t\tGroupAccess:  pulumi.String(\"developer\"),\n\t\t\tGroupId:      pulumi.String(\"12345\"),\n\t\t\tLdapProvider: pulumi.String(\"ldapmain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group ldap links can be imported using an id made up of `ldap_provider:cn`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupLdapLink:GroupLdapLink test \"ldapmain:testuser\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "cn": {
                    "type": "string",
                    "description": "The CN of the LDAP group to link with.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "If true, then delete and replace an existing LDAP link if one exists.\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the GitLab group.\n"
                },
                "ldapProvider": {
                    "type": "string",
                    "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                }
            },
            "required": [
                "cn",
                "groupId",
                "ldapProvider"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "cn": {
                    "type": "string",
                    "description": "The CN of the LDAP group to link with.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "If true, then delete and replace an existing LDAP link if one exists.\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the GitLab group.\n"
                },
                "ldapProvider": {
                    "type": "string",
                    "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                }
            },
            "requiredInputs": [
                "cn",
                "groupId",
                "ldapProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupLdapLink resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n",
                        "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                    },
                    "cn": {
                        "type": "string",
                        "description": "The CN of the LDAP group to link with.\n"
                    },
                    "force": {
                        "type": "boolean",
                        "description": "If true, then delete and replace an existing LDAP link if one exists.\n"
                    },
                    "groupAccess": {
                        "type": "string",
                        "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the GitLab group.\n"
                    },
                    "ldapProvider": {
                        "type": "string",
                        "description": "The name of the LDAP provider as stored in the GitLab database.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupMembership:GroupMembership": {
            "description": "This resource allows you to add a user to an existing group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupMembership(\"test\", {\n    accessLevel: \"guest\",\n    expiresAt: \"2020-12-31\",\n    groupId: \"12345\",\n    userId: 1337,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupMembership(\"test\",\n    access_level=\"guest\",\n    expires_at=\"2020-12-31\",\n    group_id=\"12345\",\n    user_id=1337)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupMembership(\"test\", new GitLab.GroupMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ExpiresAt = \"2020-12-31\",\n            GroupId = \"12345\",\n            UserId = 1337,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupMembership(ctx, \"test\", \u0026gitlab.GroupMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tExpiresAt:   pulumi.String(\"2020-12-31\"),\n\t\t\tGroupId:     pulumi.String(\"12345\"),\n\t\t\tUserId:      pulumi.Int(1337),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group membership can be imported using an id made up of `group_id:user_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupMembership:GroupMembership test \"12345:1337\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the group.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "required": [
                "accessLevel",
                "groupId",
                "userId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the group.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "groupId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the group.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupShareGroup:GroupShareGroup": {
            "description": "This resource allows you to share a group with another group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.GroupShareGroup(\"test\", {\n    groupId: gitlab_group.foo.id,\n    shareGroupId: gitlab_group.bar.id,\n    groupAccess: \"guest\",\n    expiresAt: \"2099-01-01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.GroupShareGroup(\"test\",\n    group_id=gitlab_group[\"foo\"][\"id\"],\n    share_group_id=gitlab_group[\"bar\"][\"id\"],\n    group_access=\"guest\",\n    expires_at=\"2099-01-01\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.GroupShareGroup(\"test\", new GitLab.GroupShareGroupArgs\n        {\n            GroupId = gitlab_group.Foo.Id,\n            ShareGroupId = gitlab_group.Bar.Id,\n            GroupAccess = \"guest\",\n            ExpiresAt = \"2099-01-01\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupShareGroup(ctx, \"test\", \u0026gitlab.GroupShareGroupArgs{\n\t\t\tGroupId:      pulumi.Any(gitlab_group.Foo.Id),\n\t\t\tShareGroupId: pulumi.Any(gitlab_group.Bar.Id),\n\t\t\tGroupAccess:  pulumi.String(\"guest\"),\n\t\t\tExpiresAt:    pulumi.String(\"2099-01-01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group shares can be imported using an id made up of `mainGroupId:shareGroupId`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupShareGroup:GroupShareGroup test 12345:1337\n```\n\n ",
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the main group.\n"
                },
                "shareGroupId": {
                    "type": "integer",
                    "description": "The id of an additional group which will be shared with the main group.\n"
                }
            },
            "required": [
                "groupAccess",
                "groupId",
                "shareGroupId"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The id of the main group.\n"
                },
                "shareGroupId": {
                    "type": "integer",
                    "description": "The id of an additional group which will be shared with the main group.\n"
                }
            },
            "requiredInputs": [
                "groupAccess",
                "groupId",
                "shareGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupShareGroup resources.\n",
                "properties": {
                    "expiresAt": {
                        "type": "string",
                        "description": "Share expiration date. Format: `YYYY-MM-DD`\n"
                    },
                    "groupAccess": {
                        "type": "string",
                        "description": "The access level to grant the group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The id of the main group.\n"
                    },
                    "shareGroupId": {
                        "type": "integer",
                        "description": "The id of an additional group which will be shared with the main group.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/groupVariable:GroupVariable": {
            "description": "This resource allows you to create and manage CI/CD variables for your GitLab groups.\nFor further information on variables, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/ci/variables/README.html#variables).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.GroupVariable(\"example\", {\n    environmentScope: \"*\",\n    group: \"12345\",\n    key: \"group_variable_key\",\n    masked: false,\n    protected: false,\n    value: \"group_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.GroupVariable(\"example\",\n    environment_scope=\"*\",\n    group=\"12345\",\n    key=\"group_variable_key\",\n    masked=False,\n    protected=False,\n    value=\"group_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.GroupVariable(\"example\", new GitLab.GroupVariableArgs\n        {\n            EnvironmentScope = \"*\",\n            Group = \"12345\",\n            Key = \"group_variable_key\",\n            Masked = false,\n            Protected = false,\n            Value = \"group_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewGroupVariable(ctx, \"example\", \u0026gitlab.GroupVariableArgs{\n\t\t\tEnvironmentScope: pulumi.String(\"*\"),\n\t\t\tGroup:            pulumi.String(\"12345\"),\n\t\t\tKey:              pulumi.String(\"group_variable_key\"),\n\t\t\tMasked:           pulumi.Bool(false),\n\t\t\tProtected:        pulumi.Bool(false),\n\t\t\tValue:            pulumi.String(\"group_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab group variables can be imported using an id made up of `groupid:variablename:scope`, e.g.\n\n```sh\n $ pulumi import gitlab:index/groupVariable:GroupVariable example 12345:group_variable_key:*\n```\n\n ",
            "properties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans. See https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-group\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "group",
                "key",
                "value"
            ],
            "inputProperties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans. See https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-group\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name or id of the group.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "group",
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupVariable resources.\n",
                "properties": {
                    "environmentScope": {
                        "type": "string",
                        "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans. See https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-group\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The name or id of the group.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/instanceCluster:InstanceCluster": {
            "description": "This resource allows you to create and manage instance clusters for your GitLab instances.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/user/instance/clusters/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst bar = new gitlab.InstanceCluster(\"bar\", {\n    domain: \"example.com\",\n    enabled: true,\n    environmentScope: \"*\",\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesAuthorizationType: \"rbac\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesNamespace: \"namespace\",\n    kubernetesToken: \"some-token\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nbar = gitlab.InstanceCluster(\"bar\",\n    domain=\"example.com\",\n    enabled=True,\n    environment_scope=\"*\",\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_authorization_type=\"rbac\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_namespace=\"namespace\",\n    kubernetes_token=\"some-token\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bar = new GitLab.InstanceCluster(\"bar\", new GitLab.InstanceClusterArgs\n        {\n            Domain = \"example.com\",\n            Enabled = true,\n            EnvironmentScope = \"*\",\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesAuthorizationType = \"rbac\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesNamespace = \"namespace\",\n            KubernetesToken = \"some-token\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewInstanceCluster(ctx, \"bar\", \u0026gitlab.InstanceClusterArgs{\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesNamespace:         pulumi.String(\"namespace\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab instance clusters can be imported using a `clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/instanceCluster:InstanceCluster bar 123\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the instance.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string",
                    "description": "Platform type.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Provider type.\n"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the instance.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                }
            },
            "requiredInputs": [
                "kubernetesApiUrl",
                "kubernetesToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesNamespace": {
                        "type": "string",
                        "description": "The unique namespace related to the instance.\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes. This attribute cannot be read.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "Platform type.\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/instanceVariable:InstanceVariable": {
            "description": "This resource allows you to create and manage CI/CD variables for your GitLab instance.\nFor further information on variables, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.InstanceVariable(\"example\", {\n    key: \"instance_variable_key\",\n    masked: false,\n    protected: false,\n    value: \"instance_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.InstanceVariable(\"example\",\n    key=\"instance_variable_key\",\n    masked=False,\n    protected=False,\n    value=\"instance_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.InstanceVariable(\"example\", new GitLab.InstanceVariableArgs\n        {\n            Key = \"instance_variable_key\",\n            Masked = false,\n            Protected = false,\n            Value = \"instance_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewInstanceVariable(ctx, \"example\", \u0026gitlab.InstanceVariableArgs{\n\t\t\tKey:       pulumi.String(\"instance_variable_key\"),\n\t\t\tMasked:    pulumi.Bool(false),\n\t\t\tProtected: pulumi.Bool(false),\n\t\t\tValue:     pulumi.String(\"instance_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab instance variables can be imported using an id made up of `variablename`, e.g.\n\n```sh\n $ pulumi import gitlab:index/instanceVariable:InstanceVariable example instance_variable_key\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variable-requirements). Defaults to `false`.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/label:Label": {
            "description": "This resource allows you to create and manage labels for your GitLab projects.\nFor further information on labels, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ee/user/project/labels.html#project-labels).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fixme = new gitlab.Label(\"fixme\", {\n    project: \"example\",\n    description: \"issue with failing tests\",\n    color: \"#ffcc00\",\n});\n// Scoped label\nconst devopsCreate = new gitlab.Label(\"devopsCreate\", {\n    project: gitlab_project.example.id,\n    description: \"issue for creating infrastructure resources\",\n    color: \"#ffa500\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfixme = gitlab.Label(\"fixme\",\n    project=\"example\",\n    description=\"issue with failing tests\",\n    color=\"#ffcc00\")\n# Scoped label\ndevops_create = gitlab.Label(\"devopsCreate\",\n    project=gitlab_project[\"example\"][\"id\"],\n    description=\"issue for creating infrastructure resources\",\n    color=\"#ffa500\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fixme = new GitLab.Label(\"fixme\", new GitLab.LabelArgs\n        {\n            Project = \"example\",\n            Description = \"issue with failing tests\",\n            Color = \"#ffcc00\",\n        });\n        // Scoped label\n        var devopsCreate = new GitLab.Label(\"devopsCreate\", new GitLab.LabelArgs\n        {\n            Project = gitlab_project.Example.Id,\n            Description = \"issue for creating infrastructure resources\",\n            Color = \"#ffa500\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewLabel(ctx, \"fixme\", \u0026gitlab.LabelArgs{\n\t\t\tProject:     pulumi.String(\"example\"),\n\t\t\tDescription: pulumi.String(\"issue with failing tests\"),\n\t\t\tColor:       pulumi.String(\"#ffcc00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewLabel(ctx, \"devopsCreate\", \u0026gitlab.LabelArgs{\n\t\t\tProject:     pulumi.Any(gitlab_project.Example.Id),\n\t\t\tDescription: pulumi.String(\"issue for creating infrastructure resources\"),\n\t\t\tColor:       pulumi.String(\"#ffa500\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the label to.\n"
                }
            },
            "required": [
                "color",
                "name",
                "project"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the label to.\n"
                }
            },
            "requiredInputs": [
                "color",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Label resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the label.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the label to.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/managedLicense:ManagedLicense": {
            "description": "This resource allows you to add rules for managing licenses on a project.\nFor additional information, please see the [gitlab documentation](https://docs.gitlab.com/ee/user/compliance/license_compliance/).\n\n\u003e Using this resource requires an active [gitlab ultimate](https://about.gitlab.com/pricing/)subscription.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {\n    description: \"Lorem Ipsum\",\n    visibilityLevel: \"public\",\n});\nconst mit = new gitlab.ManagedLicense(\"mit\", {\n    project: foo.id,\n    approvalStatus: \"approved\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\",\n    description=\"Lorem Ipsum\",\n    visibility_level=\"public\")\nmit = gitlab.ManagedLicense(\"mit\",\n    project=foo.id,\n    approval_status=\"approved\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n            Description = \"Lorem Ipsum\",\n            VisibilityLevel = \"public\",\n        });\n        var mit = new GitLab.ManagedLicense(\"mit\", new GitLab.ManagedLicenseArgs\n        {\n            Project = foo.Id,\n            ApprovalStatus = \"approved\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"Lorem Ipsum\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewManagedLicense(ctx, \"mit\", \u0026gitlab.ManagedLicenseArgs{\n\t\t\tProject:        foo.ID(),\n\t\t\tApprovalStatus: pulumi.String(\"approved\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import this resource with an id made up of `{project-id}:{license-id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/managedLicense:ManagedLicense foo 1:2\n```\n\n ",
            "properties": {
                "approvalStatus": {
                    "type": "string",
                    "description": "Whether the license is approved or not. Only 'approved' or 'blacklisted' allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID of the project under which the managed license will be created.\n"
                }
            },
            "required": [
                "approvalStatus",
                "name",
                "project"
            ],
            "inputProperties": {
                "approvalStatus": {
                    "type": "string",
                    "description": "Whether the license is approved or not. Only 'approved' or 'blacklisted' allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID of the project under which the managed license will be created.\n"
                }
            },
            "requiredInputs": [
                "approvalStatus",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedLicense resources.\n",
                "properties": {
                    "approvalStatus": {
                        "type": "string",
                        "description": "Whether the license is approved or not. Only 'approved' or 'blacklisted' allowed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The ID of the project under which the managed license will be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineSchedule:PipelineSchedule": {
            "description": "This resource allows you to create and manage pipeline schedules.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/project/pipelines/schedules.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.PipelineSchedule(\"example\", {\n    cron: \"0 1 * * *\",\n    description: \"Used to schedule builds\",\n    project: \"12345\",\n    ref: \"master\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.PipelineSchedule(\"example\",\n    cron=\"0 1 * * *\",\n    description=\"Used to schedule builds\",\n    project=\"12345\",\n    ref=\"master\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.PipelineSchedule(\"example\", new GitLab.PipelineScheduleArgs\n        {\n            Cron = \"0 1 * * *\",\n            Description = \"Used to schedule builds\",\n            Project = \"12345\",\n            Ref = \"master\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineSchedule(ctx, \"example\", \u0026gitlab.PipelineScheduleArgs{\n\t\t\tCron:        pulumi.String(\"0 1 * * *\"),\n\t\t\tDescription: pulumi.String(\"Used to schedule builds\"),\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t\tRef:         pulumi.String(\"master\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab pipeline schedules can be imported using an id made up of `{project_id}:{pipeline_schedule_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/pipelineSchedule:PipelineSchedule test 1:3\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                },
                "cron": {
                    "type": "string",
                    "description": "The cron (e.g. `0 1 * * *`).\n"
                },
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the schedule to.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch/tag name to be triggered.\n"
                }
            },
            "required": [
                "cron",
                "description",
                "project",
                "ref"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                },
                "cron": {
                    "type": "string",
                    "description": "The cron (e.g. `0 1 * * *`).\n"
                },
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the schedule to.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The branch/tag name to be triggered.\n"
                }
            },
            "requiredInputs": [
                "cron",
                "description",
                "project",
                "ref"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineSchedule resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.\n"
                    },
                    "cron": {
                        "type": "string",
                        "description": "The cron (e.g. `0 1 * * *`).\n"
                    },
                    "cronTimezone": {
                        "type": "string",
                        "description": "The timezone.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the pipeline schedule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the schedule to.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The branch/tag name to be triggered.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineScheduleVariable:PipelineScheduleVariable": {
            "description": "This resource allows you to create and manage variables for pipeline schedules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst examplePipelineSchedule = new gitlab.PipelineSchedule(\"examplePipelineSchedule\", {\n    project: \"12345\",\n    description: \"Used to schedule builds\",\n    ref: \"master\",\n    cron: \"0 1 * * *\",\n});\nconst examplePipelineScheduleVariable = new gitlab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\", {\n    project: gitlab_pipeline_schedule.project,\n    pipelineScheduleId: gitlab_pipeline_schedule.id,\n    key: \"EXAMPLE_KEY\",\n    value: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_pipeline_schedule = gitlab.PipelineSchedule(\"examplePipelineSchedule\",\n    project=\"12345\",\n    description=\"Used to schedule builds\",\n    ref=\"master\",\n    cron=\"0 1 * * *\")\nexample_pipeline_schedule_variable = gitlab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\",\n    project=gitlab_pipeline_schedule[\"project\"],\n    pipeline_schedule_id=gitlab_pipeline_schedule[\"id\"],\n    key=\"EXAMPLE_KEY\",\n    value=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var examplePipelineSchedule = new GitLab.PipelineSchedule(\"examplePipelineSchedule\", new GitLab.PipelineScheduleArgs\n        {\n            Project = \"12345\",\n            Description = \"Used to schedule builds\",\n            Ref = \"master\",\n            Cron = \"0 1 * * *\",\n        });\n        var examplePipelineScheduleVariable = new GitLab.PipelineScheduleVariable(\"examplePipelineScheduleVariable\", new GitLab.PipelineScheduleVariableArgs\n        {\n            Project = gitlab_pipeline_schedule.Project,\n            PipelineScheduleId = gitlab_pipeline_schedule.Id,\n            Key = \"EXAMPLE_KEY\",\n            Value = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineSchedule(ctx, \"examplePipelineSchedule\", \u0026gitlab.PipelineScheduleArgs{\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t\tDescription: pulumi.String(\"Used to schedule builds\"),\n\t\t\tRef:         pulumi.String(\"master\"),\n\t\t\tCron:        pulumi.String(\"0 1 * * *\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewPipelineScheduleVariable(ctx, \"examplePipelineScheduleVariable\", \u0026gitlab.PipelineScheduleVariableArgs{\n\t\t\tProject:            pulumi.Any(gitlab_pipeline_schedule.Project),\n\t\t\tPipelineScheduleId: pulumi.Any(gitlab_pipeline_schedule.Id),\n\t\t\tKey:                pulumi.String(\"EXAMPLE_KEY\"),\n\t\t\tValue:              pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Pipeline schedule variables can be imported using an id made up of `project_id:pipeline_schedule_id:key`, e.g.\n\n```sh\n $ pulumi import gitlab:index/pipelineScheduleVariable:PipelineScheduleVariable example 123456789:13:mykey\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the variable.\n"
                },
                "pipelineScheduleId": {
                    "type": "integer",
                    "description": "The id of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "required": [
                "key",
                "pipelineScheduleId",
                "project",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of the variable.\n"
                },
                "pipelineScheduleId": {
                    "type": "integer",
                    "description": "The id of the pipeline schedule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "requiredInputs": [
                "key",
                "pipelineScheduleId",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineScheduleVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of the variable.\n"
                    },
                    "pipelineScheduleId": {
                        "type": "integer",
                        "description": "The id of the pipeline schedule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the schedule to.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the variable.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/pipelineTrigger:PipelineTrigger": {
            "description": "This resource allows you to create and manage pipeline triggers\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.PipelineTrigger(\"example\", {\n    description: \"Used to trigger builds\",\n    project: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.PipelineTrigger(\"example\",\n    description=\"Used to trigger builds\",\n    project=\"12345\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.PipelineTrigger(\"example\", new GitLab.PipelineTriggerArgs\n        {\n            Description = \"Used to trigger builds\",\n            Project = \"12345\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewPipelineTrigger(ctx, \"example\", \u0026gitlab.PipelineTriggerArgs{\n\t\t\tDescription: pulumi.String(\"Used to trigger builds\"),\n\t\t\tProject:     pulumi.String(\"12345\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab pipeline triggers can be imported using an id made up of `{project_id}:{pipeline_trigger_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/pipelineTrigger:PipelineTrigger test 1:3\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline trigger.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The pipeline trigger token.\n"
                }
            },
            "required": [
                "description",
                "project",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the pipeline trigger.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the trigger to.\n"
                }
            },
            "requiredInputs": [
                "description",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineTrigger resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the pipeline trigger.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the trigger to.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The pipeline trigger token.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/project:Project": {
            "description": "This resource allows you to create and manage projects within your GitLab group or within your user.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.Project(\"example\", {\n    description: \"My awesome codebase\",\n    visibilityLevel: \"public\",\n});\n// Project with custom push rules\nconst example_two = new gitlab.Project(\"example-two\", {\n    pushRules: {\n        authorEmailRegex: \"@example\\\\.com$\",\n        commitCommitterCheck: true,\n        memberCheck: true,\n        preventSecrets: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.Project(\"example\",\n    description=\"My awesome codebase\",\n    visibility_level=\"public\")\n# Project with custom push rules\nexample_two = gitlab.Project(\"example-two\", push_rules=gitlab.ProjectPushRulesArgs(\n    author_email_regex=\"@example\\\\.com$\",\n    commit_committer_check=True,\n    member_check=True,\n    prevent_secrets=True,\n))\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.Project(\"example\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome codebase\",\n            VisibilityLevel = \"public\",\n        });\n        // Project with custom push rules\n        var example_two = new GitLab.Project(\"example-two\", new GitLab.ProjectArgs\n        {\n            PushRules = new GitLab.Inputs.ProjectPushRulesArgs\n            {\n                AuthorEmailRegex = \"@example\\\\.com$\",\n                CommitCommitterCheck = true,\n                MemberCheck = true,\n                PreventSecrets = true,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProject(ctx, \"example\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome codebase\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProject(ctx, \"example-two\", \u0026gitlab.ProjectArgs{\n\t\t\tPushRules: \u0026ProjectPushRulesArgs{\n\t\t\t\tAuthorEmailRegex:     pulumi.String(fmt.Sprintf(\"%v%v\", \"@example\\\\.com\", \"$\")),\n\t\t\t\tCommitCommitterCheck: pulumi.Bool(true),\n\t\t\t\tMemberCheck:          pulumi.Bool(true),\n\t\t\t\tPreventSecrets:       pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/project:Project # You can import a project state using `\u003cresource\u003e \u003cid\u003e`. The\n```\n\n # `id` can be whatever the [get single project api][get_single_project] takes for # its `:id` value, so for example\n\n```sh\n $ pulumi import gitlab:index/project:Project example richardc/example\n```\n\n ",
            "properties": {
                "allowMergeOnSkippedPipeline": {
                    "type": "boolean",
                    "description": "Set to true if you want to treat skipped pipelines as if they finished with success.\n"
                },
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "description": "Number of merge request approvals required for merging. Default is 0.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                },
                "buildCoverageRegex": {
                    "type": "string",
                    "description": "Test coverage parsing for the project.\n"
                },
                "ciConfigPath": {
                    "type": "string",
                    "description": "Custom Path to CI config file.\n"
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "description": "Enable container registry for the project.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the project.\n"
                },
                "groupWithProjectTemplatesId": {
                    "type": "integer",
                    "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).\n"
                },
                "httpUrlToRepo": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the\n"
                },
                "importUrl": {
                    "type": "string",
                    "description": "Git URL to a repository to be imported.\n"
                },
                "initializeWithReadme": {
                    "type": "boolean",
                    "description": "Create main branch with first commit containing a README.md file.\n"
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "description": "Enable issue tracking for the project.\n"
                },
                "issuesTemplate": {
                    "type": "string",
                    "description": "Sets the template for new issues in the project.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Enable LFS for the project.\n"
                },
                "mergeMethod": {
                    "type": "string",
                    "description": "Set to `ff` to create fast-forward merges\n"
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "description": "Enable merge requests for the project.\n"
                },
                "mergeRequestsTemplate": {
                    "type": "string",
                    "description": "Sets the template for new merge requests in the project.\n"
                },
                "mirror": {
                    "type": "boolean",
                    "description": "Enable project pull mirror.\n"
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "description": "Enable overwrite diverged branches for a mirrored project.\n"
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "description": "Enable trigger builds on pushes for a mirrored project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "namespaceId": {
                    "type": "integer",
                    "description": "The namespace (group or user) of the project. Defaults to your user.\n"
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "description": "Enable only mirror protected branches for a mirrored project.\n"
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "description": "Enable packages repository for the project.\n"
                },
                "pagesAccessLevel": {
                    "type": "string",
                    "description": "Enable pages access control\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the repository.\n"
                },
                "pathWithNamespace": {
                    "type": "string",
                    "description": "The path of the repository with namespace.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable pipelines for the project.\n"
                },
                "pushRules": {
                    "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                    "description": "Push rules for the project.\n"
                },
                "removeSourceBranchAfterMerge": {
                    "type": "boolean",
                    "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Allow users to request member access.\n"
                },
                "runnersToken": {
                    "type": "string",
                    "description": "Registration token to use during runner setup.\n"
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "description": "Enable shared runners for this project.\n"
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "description": "Enable snippets for the project.\n"
                },
                "squashOption": {
                    "type": "string",
                    "description": "Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`.\n"
                },
                "sshUrlToRepo": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags (topics) of the project.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.\n"
                },
                "templateProjectId": {
                    "type": "integer",
                    "description": "When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                },
                "useCustomTemplate": {
                    "type": "boolean",
                    "description": "Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "Set to `public` to create a public project.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "URL that can be used to find the project in a browser.\n"
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "description": "Enable wiki for the project.\n"
                }
            },
            "required": [
                "defaultBranch",
                "httpUrlToRepo",
                "name",
                "namespaceId",
                "pathWithNamespace",
                "pushRules",
                "runnersToken",
                "sharedRunnersEnabled",
                "sshUrlToRepo",
                "webUrl"
            ],
            "inputProperties": {
                "allowMergeOnSkippedPipeline": {
                    "type": "boolean",
                    "description": "Set to true if you want to treat skipped pipelines as if they finished with success.\n"
                },
                "approvalsBeforeMerge": {
                    "type": "integer",
                    "description": "Number of merge request approvals required for merging. Default is 0.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                },
                "buildCoverageRegex": {
                    "type": "string",
                    "description": "Test coverage parsing for the project.\n"
                },
                "ciConfigPath": {
                    "type": "string",
                    "description": "Custom Path to CI config file.\n"
                },
                "containerRegistryEnabled": {
                    "type": "boolean",
                    "description": "Enable container registry for the project.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch for the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the project.\n"
                },
                "groupWithProjectTemplatesId": {
                    "type": "integer",
                    "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).\n"
                },
                "importUrl": {
                    "type": "string",
                    "description": "Git URL to a repository to be imported.\n"
                },
                "initializeWithReadme": {
                    "type": "boolean",
                    "description": "Create main branch with first commit containing a README.md file.\n"
                },
                "issuesEnabled": {
                    "type": "boolean",
                    "description": "Enable issue tracking for the project.\n"
                },
                "issuesTemplate": {
                    "type": "string",
                    "description": "Sets the template for new issues in the project.\n"
                },
                "lfsEnabled": {
                    "type": "boolean",
                    "description": "Enable LFS for the project.\n"
                },
                "mergeMethod": {
                    "type": "string",
                    "description": "Set to `ff` to create fast-forward merges\n"
                },
                "mergeRequestsEnabled": {
                    "type": "boolean",
                    "description": "Enable merge requests for the project.\n"
                },
                "mergeRequestsTemplate": {
                    "type": "string",
                    "description": "Sets the template for new merge requests in the project.\n"
                },
                "mirror": {
                    "type": "boolean",
                    "description": "Enable project pull mirror.\n"
                },
                "mirrorOverwritesDivergedBranches": {
                    "type": "boolean",
                    "description": "Enable overwrite diverged branches for a mirrored project.\n"
                },
                "mirrorTriggerBuilds": {
                    "type": "boolean",
                    "description": "Enable trigger builds on pushes for a mirrored project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "namespaceId": {
                    "type": "integer",
                    "description": "The namespace (group or user) of the project. Defaults to your user.\n"
                },
                "onlyAllowMergeIfAllDiscussionsAreResolved": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                },
                "onlyAllowMergeIfPipelineSucceeds": {
                    "type": "boolean",
                    "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                },
                "onlyMirrorProtectedBranches": {
                    "type": "boolean",
                    "description": "Enable only mirror protected branches for a mirrored project.\n"
                },
                "packagesEnabled": {
                    "type": "boolean",
                    "description": "Enable packages repository for the project.\n"
                },
                "pagesAccessLevel": {
                    "type": "string",
                    "description": "Enable pages access control\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the repository.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Enable pipelines for the project.\n"
                },
                "pushRules": {
                    "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                    "description": "Push rules for the project.\n"
                },
                "removeSourceBranchAfterMerge": {
                    "type": "boolean",
                    "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                },
                "requestAccessEnabled": {
                    "type": "boolean",
                    "description": "Allow users to request member access.\n"
                },
                "sharedRunnersEnabled": {
                    "type": "boolean",
                    "description": "Enable shared runners for this project.\n"
                },
                "snippetsEnabled": {
                    "type": "boolean",
                    "description": "Enable snippets for the project.\n"
                },
                "squashOption": {
                    "type": "string",
                    "description": "Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags (topics) of the project.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.\n"
                },
                "templateProjectId": {
                    "type": "integer",
                    "description": "When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                },
                "useCustomTemplate": {
                    "type": "boolean",
                    "description": "Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).\n"
                },
                "visibilityLevel": {
                    "type": "string",
                    "description": "Set to `public` to create a public project.\n"
                },
                "wikiEnabled": {
                    "type": "boolean",
                    "description": "Enable wiki for the project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "allowMergeOnSkippedPipeline": {
                        "type": "boolean",
                        "description": "Set to true if you want to treat skipped pipelines as if they finished with success.\n"
                    },
                    "approvalsBeforeMerge": {
                        "type": "integer",
                        "description": "Number of merge request approvals required for merging. Default is 0.\n"
                    },
                    "archiveOnDestroy": {
                        "type": "boolean",
                        "description": "Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.\n"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.\n"
                    },
                    "buildCoverageRegex": {
                        "type": "string",
                        "description": "Test coverage parsing for the project.\n"
                    },
                    "ciConfigPath": {
                        "type": "string",
                        "description": "Custom Path to CI config file.\n"
                    },
                    "containerRegistryEnabled": {
                        "type": "boolean",
                        "description": "Enable container registry for the project.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the project.\n"
                    },
                    "groupWithProjectTemplatesId": {
                        "type": "integer",
                        "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use*custom*template to be true (enterprise edition).\n"
                    },
                    "httpUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\n"
                    },
                    "importUrl": {
                        "type": "string",
                        "description": "Git URL to a repository to be imported.\n"
                    },
                    "initializeWithReadme": {
                        "type": "boolean",
                        "description": "Create main branch with first commit containing a README.md file.\n"
                    },
                    "issuesEnabled": {
                        "type": "boolean",
                        "description": "Enable issue tracking for the project.\n"
                    },
                    "issuesTemplate": {
                        "type": "string",
                        "description": "Sets the template for new issues in the project.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Enable LFS for the project.\n"
                    },
                    "mergeMethod": {
                        "type": "string",
                        "description": "Set to `ff` to create fast-forward merges\n"
                    },
                    "mergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Enable merge requests for the project.\n"
                    },
                    "mergeRequestsTemplate": {
                        "type": "string",
                        "description": "Sets the template for new merge requests in the project.\n"
                    },
                    "mirror": {
                        "type": "boolean",
                        "description": "Enable project pull mirror.\n"
                    },
                    "mirrorOverwritesDivergedBranches": {
                        "type": "boolean",
                        "description": "Enable overwrite diverged branches for a mirrored project.\n"
                    },
                    "mirrorTriggerBuilds": {
                        "type": "boolean",
                        "description": "Enable trigger builds on pushes for a mirrored project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "namespaceId": {
                        "type": "integer",
                        "description": "The namespace (group or user) of the project. Defaults to your user.\n"
                    },
                    "onlyAllowMergeIfAllDiscussionsAreResolved": {
                        "type": "boolean",
                        "description": "Set to true if you want allow merges only if all discussions are resolved.\n"
                    },
                    "onlyAllowMergeIfPipelineSucceeds": {
                        "type": "boolean",
                        "description": "Set to true if you want allow merges only if a pipeline succeeds.\n"
                    },
                    "onlyMirrorProtectedBranches": {
                        "type": "boolean",
                        "description": "Enable only mirror protected branches for a mirrored project.\n"
                    },
                    "packagesEnabled": {
                        "type": "boolean",
                        "description": "Enable packages repository for the project.\n"
                    },
                    "pagesAccessLevel": {
                        "type": "string",
                        "description": "Enable pages access control\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the repository.\n"
                    },
                    "pathWithNamespace": {
                        "type": "string",
                        "description": "The path of the repository with namespace.\n"
                    },
                    "pipelinesEnabled": {
                        "type": "boolean",
                        "description": "Enable pipelines for the project.\n"
                    },
                    "pushRules": {
                        "$ref": "#/types/gitlab:index/ProjectPushRules:ProjectPushRules",
                        "description": "Push rules for the project.\n"
                    },
                    "removeSourceBranchAfterMerge": {
                        "type": "boolean",
                        "description": "Enable `Delete source branch` option by default for all new merge requests.\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Allow users to request member access.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "Registration token to use during runner setup.\n"
                    },
                    "sharedRunnersEnabled": {
                        "type": "boolean",
                        "description": "Enable shared runners for this project.\n"
                    },
                    "snippetsEnabled": {
                        "type": "boolean",
                        "description": "Enable snippets for the project.\n"
                    },
                    "squashOption": {
                        "type": "string",
                        "description": "Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`.\n"
                    },
                    "sshUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags (topics) of the project.\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "When used without use*custom*template, name of a built-in project template. When used with use*custom*template, name of a custom project template. This option is mutually exclusive with `template_project_id`.\n"
                    },
                    "templateProjectId": {
                        "type": "integer",
                        "description": "When used with use*custom*template, project ID of a custom project template. This is preferable to using template*name since template*name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`.\n"
                    },
                    "useCustomTemplate": {
                        "type": "boolean",
                        "description": "Use either custom instance or group (with group*with*project*templates*id) project template (enterprise edition).\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "Set to `public` to create a public project.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "URL that can be used to find the project in a browser.\n"
                    },
                    "wikiEnabled": {
                        "type": "boolean",
                        "description": "Enable wiki for the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectAccessToken:ProjectAccessToken": {
            "description": "This resource allows you to create and manage Project Access Token for your GitLab projects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst exampleProjectAccessToken = new gitlab.ProjectAccessToken(\"exampleProjectAccessToken\", {\n    project: \"25\",\n    expiresAt: \"2020-03-14\",\n    scopes: [\"api\"],\n});\nconst exampleProjectVariable = new gitlab.ProjectVariable(\"exampleProjectVariable\", {\n    project: gitlab_project.example.id,\n    key: \"pat\",\n    value: exampleProjectAccessToken.token,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample_project_access_token = gitlab.ProjectAccessToken(\"exampleProjectAccessToken\",\n    project=\"25\",\n    expires_at=\"2020-03-14\",\n    scopes=[\"api\"])\nexample_project_variable = gitlab.ProjectVariable(\"exampleProjectVariable\",\n    project=gitlab_project[\"example\"][\"id\"],\n    key=\"pat\",\n    value=example_project_access_token.token)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleProjectAccessToken = new GitLab.ProjectAccessToken(\"exampleProjectAccessToken\", new GitLab.ProjectAccessTokenArgs\n        {\n            Project = \"25\",\n            ExpiresAt = \"2020-03-14\",\n            Scopes = \n            {\n                \"api\",\n            },\n        });\n        var exampleProjectVariable = new GitLab.ProjectVariable(\"exampleProjectVariable\", new GitLab.ProjectVariableArgs\n        {\n            Project = gitlab_project.Example.Id,\n            Key = \"pat\",\n            Value = exampleProjectAccessToken.Token,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProjectAccessToken, err := gitlab.NewProjectAccessToken(ctx, \"exampleProjectAccessToken\", \u0026gitlab.ProjectAccessTokenArgs{\n\t\t\tProject:   pulumi.String(\"25\"),\n\t\t\tExpiresAt: pulumi.String(\"2020-03-14\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"api\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectVariable(ctx, \"exampleProjectVariable\", \u0026gitlab.ProjectVariableArgs{\n\t\t\tProject: pulumi.Any(gitlab_project.Example.Id),\n\t\t\tKey:     pulumi.String(\"pat\"),\n\t\t\tValue:   exampleProjectAccessToken.Token,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "True if the token is active.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Time the token has been created, RFC3339 format.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, YYYY-MM-DD format. Will not expire per default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the project access token.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the project access token to.\n"
                },
                "revoked": {
                    "type": "boolean",
                    "description": "True if the token is revoked.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `api`, `read_api`, `read_repository`, `write_repository`.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret token. This is only populated when creating a new project access token.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The user_id associated to the token.\n"
                }
            },
            "required": [
                "active",
                "createdAt",
                "name",
                "project",
                "revoked",
                "scopes",
                "token",
                "userId"
            ],
            "inputProperties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Time the token will expire it, YYYY-MM-DD format. Will not expire per default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to describe the project access token.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the project access token to.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Valid values: `api`, `read_api`, `read_repository`, `write_repository`.\n"
                }
            },
            "requiredInputs": [
                "project",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectAccessToken resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "True if the token is active.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Time the token has been created, RFC3339 format.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Time the token will expire it, YYYY-MM-DD format. Will not expire per default.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name to describe the project access token.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the project access token to.\n"
                    },
                    "revoked": {
                        "type": "boolean",
                        "description": "True if the token is revoked.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Valid values: `api`, `read_api`, `read_repository`, `write_repository`.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret token. This is only populated when creating a new project access token.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The user_id associated to the token.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectApprovalRule:ProjectApprovalRule": {
            "description": "This resource allows you to create and manage multiple approval rules for your GitLab projects. For further information on approval rules, consult the [gitlab documentation](https://docs.gitlab.com/ee/api/merge_request_approvals.html#project-level-mr-approvals).\n\n\u003e This feature requires GitLab Premium.\n\n\n## Import\n\n# GitLab project approval rules can be imported using a key composed of `\u003cproject-id\u003e:\u003crule-id\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectApprovalRule:ProjectApprovalRule example \"12345:6\"\n```\n\n ",
            "properties": {
                "approvalsRequired": {
                    "type": "integer",
                    "description": "The number of approvals required for this rule.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs whose members can approve of the merge request.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the approval rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the approval rules.\n"
                },
                "protectedBranchIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of protected branch IDs (not branch names) for which the rule applies.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of specific User IDs to add to the list of approvers.\n"
                }
            },
            "required": [
                "approvalsRequired",
                "name",
                "project"
            ],
            "inputProperties": {
                "approvalsRequired": {
                    "type": "integer",
                    "description": "The number of approvals required for this rule.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs whose members can approve of the merge request.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the approval rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the approval rules.\n"
                },
                "protectedBranchIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of protected branch IDs (not branch names) for which the rule applies.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of specific User IDs to add to the list of approvers.\n"
                }
            },
            "requiredInputs": [
                "approvalsRequired",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectApprovalRule resources.\n",
                "properties": {
                    "approvalsRequired": {
                        "type": "integer",
                        "description": "The number of approvals required for this rule.\n"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of group IDs whose members can approve of the merge request.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the approval rule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the approval rules.\n"
                    },
                    "protectedBranchIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of protected branch IDs (not branch names) for which the rule applies.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of specific User IDs to add to the list of approvers.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectBadge:ProjectBadge": {
            "description": "This resource allows you to create and manage badges for your GitLab projects.\nFor further information consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/project/badges.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {});\nconst example = new gitlab.ProjectBadge(\"example\", {\n    project: foo.id,\n    linkUrl: \"https://example.com/badge-123\",\n    imageUrl: \"https://example.com/badge-123.svg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\")\nexample = gitlab.ProjectBadge(\"example\",\n    project=foo.id,\n    link_url=\"https://example.com/badge-123\",\n    image_url=\"https://example.com/badge-123.svg\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n        });\n        var example = new GitLab.ProjectBadge(\"example\", new GitLab.ProjectBadgeArgs\n        {\n            Project = foo.Id,\n            LinkUrl = \"https://example.com/badge-123\",\n            ImageUrl = \"https://example.com/badge-123.svg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectBadge(ctx, \"example\", \u0026gitlab.ProjectBadgeArgs{\n\t\t\tProject:  foo.ID(),\n\t\t\tLinkUrl:  pulumi.String(\"https://example.com/badge-123\"),\n\t\t\tImageUrl: pulumi.String(\"https://example.com/badge-123.svg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project badges can be imported using an id made up of `{project_id}:{badge_id}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectBadge:ProjectBadge foo 1:3\n```\n\n ",
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on project overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the badge to.\n"
                },
                "renderedImageUrl": {
                    "type": "string",
                    "description": "The image_url argument rendered (in case of use of placeholders).\n"
                },
                "renderedLinkUrl": {
                    "type": "string",
                    "description": "The link_url argument rendered (in case of use of placeholders).\n"
                }
            },
            "required": [
                "imageUrl",
                "linkUrl",
                "project",
                "renderedImageUrl",
                "renderedLinkUrl"
            ],
            "inputProperties": {
                "imageUrl": {
                    "type": "string",
                    "description": "The image url which will be presented on project overview.\n"
                },
                "linkUrl": {
                    "type": "string",
                    "description": "The url linked with the badge.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the badge to.\n"
                }
            },
            "requiredInputs": [
                "imageUrl",
                "linkUrl",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectBadge resources.\n",
                "properties": {
                    "imageUrl": {
                        "type": "string",
                        "description": "The image url which will be presented on project overview.\n"
                    },
                    "linkUrl": {
                        "type": "string",
                        "description": "The url linked with the badge.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the badge to.\n"
                    },
                    "renderedImageUrl": {
                        "type": "string",
                        "description": "The image_url argument rendered (in case of use of placeholders).\n"
                    },
                    "renderedLinkUrl": {
                        "type": "string",
                        "description": "The link_url argument rendered (in case of use of placeholders).\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectCluster:ProjectCluster": {
            "description": "This resource allows you to create and manage project clusters for your GitLab projects.\nFor further information on clusters, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/project/clusters/index.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.Project(\"foo\", {});\nconst bar = new gitlab.ProjectCluster(\"bar\", {\n    project: foo.id,\n    domain: \"example.com\",\n    enabled: true,\n    kubernetesApiUrl: \"https://124.124.124\",\n    kubernetesToken: \"some-token\",\n    kubernetesCaCert: \"some-cert\",\n    kubernetesNamespace: \"namespace\",\n    kubernetesAuthorizationType: \"rbac\",\n    environmentScope: \"*\",\n    managementProjectId: \"123456\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.Project(\"foo\")\nbar = gitlab.ProjectCluster(\"bar\",\n    project=foo.id,\n    domain=\"example.com\",\n    enabled=True,\n    kubernetes_api_url=\"https://124.124.124\",\n    kubernetes_token=\"some-token\",\n    kubernetes_ca_cert=\"some-cert\",\n    kubernetes_namespace=\"namespace\",\n    kubernetes_authorization_type=\"rbac\",\n    environment_scope=\"*\",\n    management_project_id=\"123456\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.Project(\"foo\", new GitLab.ProjectArgs\n        {\n        });\n        var bar = new GitLab.ProjectCluster(\"bar\", new GitLab.ProjectClusterArgs\n        {\n            Project = foo.Id,\n            Domain = \"example.com\",\n            Enabled = true,\n            KubernetesApiUrl = \"https://124.124.124\",\n            KubernetesToken = \"some-token\",\n            KubernetesCaCert = \"some-cert\",\n            KubernetesNamespace = \"namespace\",\n            KubernetesAuthorizationType = \"rbac\",\n            EnvironmentScope = \"*\",\n            ManagementProjectId = \"123456\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := gitlab.NewProject(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectCluster(ctx, \"bar\", \u0026gitlab.ProjectClusterArgs{\n\t\t\tProject:                     foo.ID(),\n\t\t\tDomain:                      pulumi.String(\"example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tKubernetesApiUrl:            pulumi.String(\"https://124.124.124\"),\n\t\t\tKubernetesToken:             pulumi.String(\"some-token\"),\n\t\t\tKubernetesCaCert:            pulumi.String(\"some-cert\"),\n\t\t\tKubernetesNamespace:         pulumi.String(\"namespace\"),\n\t\t\tKubernetesAuthorizationType: pulumi.String(\"rbac\"),\n\t\t\tEnvironmentScope:            pulumi.String(\"*\"),\n\t\t\tManagementProjectId:         pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project clusters can be imported using an id made up of `projectid:clusterid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectCluster:ProjectCluster bar 123:321\n```\n\n ",
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the project.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "platformType": {
                    "type": "string",
                    "description": "Platform type.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the cluster to.\n"
                },
                "providerType": {
                    "type": "string",
                    "description": "Provider type.\n"
                }
            },
            "required": [
                "clusterType",
                "createdAt",
                "kubernetesApiUrl",
                "kubernetesToken",
                "name",
                "platformType",
                "project",
                "providerType"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The base domain of the cluster.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "environmentScope": {
                    "type": "string",
                    "description": "The associated environment to the cluster. Defaults to `*`.\n"
                },
                "kubernetesApiUrl": {
                    "type": "string",
                    "description": "The URL to access the Kubernetes API.\n"
                },
                "kubernetesAuthorizationType": {
                    "type": "string",
                    "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                },
                "kubernetesCaCert": {
                    "type": "string",
                    "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                },
                "kubernetesNamespace": {
                    "type": "string",
                    "description": "The unique namespace related to the project.\n"
                },
                "kubernetesToken": {
                    "type": "string",
                    "description": "The token to authenticate against Kubernetes.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                },
                "managementProjectId": {
                    "type": "string",
                    "description": "The ID of the management project for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project to add the cluster to.\n"
                }
            },
            "requiredInputs": [
                "kubernetesApiUrl",
                "kubernetesToken",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectCluster resources.\n",
                "properties": {
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The base domain of the cluster.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "environmentScope": {
                        "type": "string",
                        "description": "The associated environment to the cluster. Defaults to `*`.\n"
                    },
                    "kubernetesApiUrl": {
                        "type": "string",
                        "description": "The URL to access the Kubernetes API.\n"
                    },
                    "kubernetesAuthorizationType": {
                        "type": "string",
                        "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.\n"
                    },
                    "kubernetesCaCert": {
                        "type": "string",
                        "description": "TLS certificate (needed if API is using a self-signed TLS certificate).\n"
                    },
                    "kubernetesNamespace": {
                        "type": "string",
                        "description": "The unique namespace related to the project.\n"
                    },
                    "kubernetesToken": {
                        "type": "string",
                        "description": "The token to authenticate against Kubernetes.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.\n"
                    },
                    "managementProjectId": {
                        "type": "string",
                        "description": "The ID of the management project for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of cluster.\n"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "Platform type.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project to add the cluster to.\n"
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Provider type.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectCustomAttribute:ProjectCustomAttribute": {
            "description": "This resource allows you to set custom attributes for a project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst attr = new gitlab.ProjectCustomAttribute(\"attr\", {\n    key: \"location\",\n    project: 42,\n    value: \"Greenland\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nattr = gitlab.ProjectCustomAttribute(\"attr\",\n    key=\"location\",\n    project=42,\n    value=\"Greenland\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var attr = new GitLab.ProjectCustomAttribute(\"attr\", new GitLab.ProjectCustomAttributeArgs\n        {\n            Key = \"location\",\n            Project = 42,\n            Value = \"Greenland\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectCustomAttribute(ctx, \"attr\", \u0026gitlab.ProjectCustomAttributeArgs{\n\t\t\tKey:     pulumi.String(\"location\"),\n\t\t\tProject: pulumi.Int(42),\n\t\t\tValue:   pulumi.String(\"Greenland\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a project custom attribute using an id made up of `{project-id}:{key}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectCustomAttribute:ProjectCustomAttribute attr 42:location\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "project": {
                    "type": "integer",
                    "description": "The id of the project.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "required": [
                "key",
                "project",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "project": {
                    "type": "integer",
                    "description": "The id of the project.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectCustomAttribute resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key for the Custom Attribute.\n"
                    },
                    "project": {
                        "type": "integer",
                        "description": "The id of the project.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for the Custom Attribute.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectFreezePeriod:ProjectFreezePeriod": {
            "description": "This resource allows you to create and manage freeze periods. For further information on freeze periods, consult the [gitlab documentation](https://docs.gitlab.com/ee/api/freeze_periods.html#create-a-freeze-period).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst schedule = new gitlab.ProjectFreezePeriod(\"schedule\", {\n    projectId: gitlab_project.foo.id,\n    freezeStart: \"0 23 * * 5\",\n    freezeEnd: \"0 7 * * 1\",\n    cronTimezone: \"UTC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nschedule = gitlab.ProjectFreezePeriod(\"schedule\",\n    project_id=gitlab_project[\"foo\"][\"id\"],\n    freeze_start=\"0 23 * * 5\",\n    freeze_end=\"0 7 * * 1\",\n    cron_timezone=\"UTC\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var schedule = new GitLab.ProjectFreezePeriod(\"schedule\", new GitLab.ProjectFreezePeriodArgs\n        {\n            ProjectId = gitlab_project.Foo.Id,\n            FreezeStart = \"0 23 * * 5\",\n            FreezeEnd = \"0 7 * * 1\",\n            CronTimezone = \"UTC\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectFreezePeriod(ctx, \"schedule\", \u0026gitlab.ProjectFreezePeriodArgs{\n\t\t\tProjectId:    pulumi.Any(gitlab_project.Foo.Id),\n\t\t\tFreezeStart:  pulumi.String(\"0 23 * * 5\"),\n\t\t\tFreezeEnd:    pulumi.String(\"0 7 * * 1\"),\n\t\t\tCronTimezone: pulumi.String(\"UTC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project freeze periods can be imported using an id made up of `project_id:freeze_period_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectFreezePeriod:ProjectFreezePeriod schedule \"12345:1337\"\n```\n\n ",
            "properties": {
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "freezeEnd": {
                    "type": "string",
                    "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                },
                "freezeStart": {
                    "type": "string",
                    "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                }
            },
            "required": [
                "freezeEnd",
                "freezeStart",
                "projectId"
            ],
            "inputProperties": {
                "cronTimezone": {
                    "type": "string",
                    "description": "The timezone.\n"
                },
                "freezeEnd": {
                    "type": "string",
                    "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                },
                "freezeStart": {
                    "type": "string",
                    "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project to add the schedule to.\n"
                }
            },
            "requiredInputs": [
                "freezeEnd",
                "freezeStart",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFreezePeriod resources.\n",
                "properties": {
                    "cronTimezone": {
                        "type": "string",
                        "description": "The timezone.\n"
                    },
                    "freezeEnd": {
                        "type": "string",
                        "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).\n"
                    },
                    "freezeStart": {
                        "type": "string",
                        "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project to add the schedule to.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectHook:ProjectHook": {
            "description": "This resource allows you to create and manage hooks for your GitLab projects.\nFor further information on hooks, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/user/project/integrations/webhooks.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.ProjectHook(\"example\", {\n    mergeRequestsEvents: true,\n    project: \"example/hooked\",\n    url: \"https://example.com/hook/example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.ProjectHook(\"example\",\n    merge_requests_events=True,\n    project=\"example/hooked\",\n    url=\"https://example.com/hook/example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.ProjectHook(\"example\", new GitLab.ProjectHookArgs\n        {\n            MergeRequestsEvents = true,\n            Project = \"example/hooked\",\n            Url = \"https://example.com/hook/example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectHook(ctx, \"example\", \u0026gitlab.ProjectHookArgs{\n\t\t\tMergeRequestsEvents: pulumi.Bool(true),\n\t\t\tProject:             pulumi.String(\"example/hooked\"),\n\t\t\tUrl:                 pulumi.String(\"https://example.com/hook/example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential notes events.\n"
                },
                "deploymentEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for deployment events.\n"
                },
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Enable ssl verification when invoking the hook.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for merge requests.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for notes events.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for push events.\n"
                },
                "pushEventsBranchFilter": {
                    "type": "string",
                    "description": "Invoke the hook for push events on matching branches only.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for tag push events.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token to present when invoking the hook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the hook to invoke.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for wiki page events.\n"
                }
            },
            "required": [
                "project",
                "url"
            ],
            "inputProperties": {
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for confidential notes events.\n"
                },
                "deploymentEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for deployment events.\n"
                },
                "enableSslVerification": {
                    "type": "boolean",
                    "description": "Enable ssl verification when invoking the hook.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for merge requests.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for notes events.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project to add the hook to.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for push events.\n"
                },
                "pushEventsBranchFilter": {
                    "type": "string",
                    "description": "Invoke the hook for push events on matching branches only.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for tag push events.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token to present when invoking the hook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the hook to invoke.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Invoke the hook for wiki page events.\n"
                }
            },
            "requiredInputs": [
                "project",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectHook resources.\n",
                "properties": {
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for confidential issues events.\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for confidential notes events.\n"
                    },
                    "deploymentEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for deployment events.\n"
                    },
                    "enableSslVerification": {
                        "type": "boolean",
                        "description": "Enable ssl verification when invoking the hook.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for issues events.\n"
                    },
                    "jobEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for job events.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for merge requests.\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for notes events.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project to add the hook to.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for push events.\n"
                    },
                    "pushEventsBranchFilter": {
                        "type": "string",
                        "description": "Invoke the hook for push events on matching branches only.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for tag push events.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A token to present when invoking the hook.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the hook to invoke.\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Invoke the hook for wiki page events.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals": {
            "description": "This resource allows you to configure project-level MR approvals. for your GitLab projects.\nFor further information on merge request approvals, consult the [GitLab API documentation](https://docs.gitlab.com/ee/api/merge_request_approvals.html#project-level-mr-approvals).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst fooProject = new gitlab.Project(\"fooProject\", {description: \"My example project\"});\nconst fooProjectLevelMrApprovals = new gitlab.ProjectLevelMrApprovals(\"fooProjectLevelMrApprovals\", {\n    projectId: fooProject.id,\n    resetApprovalsOnPush: true,\n    disableOverridingApproversPerMergeRequest: false,\n    mergeRequestsAuthorApproval: false,\n    mergeRequestsDisableCommittersApproval: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo_project = gitlab.Project(\"fooProject\", description=\"My example project\")\nfoo_project_level_mr_approvals = gitlab.ProjectLevelMrApprovals(\"fooProjectLevelMrApprovals\",\n    project_id=foo_project.id,\n    reset_approvals_on_push=True,\n    disable_overriding_approvers_per_merge_request=False,\n    merge_requests_author_approval=False,\n    merge_requests_disable_committers_approval=True)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooProject = new GitLab.Project(\"fooProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My example project\",\n        });\n        var fooProjectLevelMrApprovals = new GitLab.ProjectLevelMrApprovals(\"fooProjectLevelMrApprovals\", new GitLab.ProjectLevelMrApprovalsArgs\n        {\n            ProjectId = fooProject.Id,\n            ResetApprovalsOnPush = true,\n            DisableOverridingApproversPerMergeRequest = false,\n            MergeRequestsAuthorApproval = false,\n            MergeRequestsDisableCommittersApproval = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooProject, err := gitlab.NewProject(ctx, \"fooProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"My example project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectLevelMrApprovals(ctx, \"fooProjectLevelMrApprovals\", \u0026gitlab.ProjectLevelMrApprovalsArgs{\n\t\t\tProjectId:            fooProject.ID(),\n\t\t\tResetApprovalsOnPush: pulumi.Bool(true),\n\t\t\tDisableOverridingApproversPerMergeRequest: pulumi.Bool(false),\n\t\t\tMergeRequestsAuthorApproval:               pulumi.Bool(false),\n\t\t\tMergeRequestsDisableCommittersApproval:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals # You can import an approval configuration state using `\u003cresource\u003e \u003cproject_id\u003e`.\n```\n\n # # For example\n\n```sh\n $ pulumi import gitlab:index/projectLevelMrApprovals:ProjectLevelMrApprovals foo 1234\n```\n\n ",
            "properties": {
                "disableOverridingApproversPerMergeRequest": {
                    "type": "boolean",
                    "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\n"
                },
                "mergeRequestsAuthorApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\n"
                },
                "mergeRequestsDisableCommittersApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project to change MR approval configuration.\n"
                },
                "resetApprovalsOnPush": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "disableOverridingApproversPerMergeRequest": {
                    "type": "boolean",
                    "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\n"
                },
                "mergeRequestsAuthorApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\n"
                },
                "mergeRequestsDisableCommittersApproval": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project to change MR approval configuration.\n"
                },
                "resetApprovalsOnPush": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectLevelMrApprovals resources.\n",
                "properties": {
                    "disableOverridingApproversPerMergeRequest": {
                        "type": "boolean",
                        "description": "By default, users are able to edit the approval rules in merge requests. If set to true,\n"
                    },
                    "mergeRequestsAuthorApproval": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors\n"
                    },
                    "mergeRequestsDisableCommittersApproval": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers. Default is `false`.\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The ID of the project to change MR approval configuration.\n"
                    },
                    "resetApprovalsOnPush": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectMembership:ProjectMembership": {
            "description": "This resource allows you to add a current user to an existing project with a set access level.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.ProjectMembership(\"test\", {\n    accessLevel: \"guest\",\n    projectId: \"12345\",\n    userId: 1337,\n});\nconst example = new gitlab.ProjectMembership(\"example\", {\n    accessLevel: \"guest\",\n    projectId: \"67890\",\n    userId: 1234,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.ProjectMembership(\"test\",\n    access_level=\"guest\",\n    project_id=\"12345\",\n    user_id=1337)\nexample = gitlab.ProjectMembership(\"example\",\n    access_level=\"guest\",\n    project_id=\"67890\",\n    user_id=1234)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.ProjectMembership(\"test\", new GitLab.ProjectMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ProjectId = \"12345\",\n            UserId = 1337,\n        });\n        var example = new GitLab.ProjectMembership(\"example\", new GitLab.ProjectMembershipArgs\n        {\n            AccessLevel = \"guest\",\n            ProjectId = \"67890\",\n            UserId = 1234,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectMembership(ctx, \"test\", \u0026gitlab.ProjectMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tProjectId:   pulumi.String(\"12345\"),\n\t\t\tUserId:      pulumi.Int(1337),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewProjectMembership(ctx, \"example\", \u0026gitlab.ProjectMembershipArgs{\n\t\t\tAccessLevel: pulumi.String(\"guest\"),\n\t\t\tProjectId:   pulumi.String(\"67890\"),\n\t\t\tUserId:      pulumi.Int(1234),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project membership can be imported using an id made up of `project_id:user_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectMembership:ProjectMembership test \"12345:1337\"\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "required": [
                "accessLevel",
                "projectId",
                "userId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "projectId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMembership resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectMirror:ProjectMirror": {
            "description": "This resource allows you to add a mirror target for the repository, all changes will be synced to the remote target.\n\n\u003e This is for *pushing* changes to a remote repository. *Pull Mirroring* can be configured using a combination of the\n`import_url`, `mirror`, and `mirror_trigger_builds` properties on the `gitlab.Project` resource.\n\nFor further information on mirroring, consult the\n[gitlab documentation](https://docs.gitlab.com/ee/user/project/repository/repository_mirroring.html#repository-mirroring).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst foo = new gitlab.ProjectMirror(\"foo\", {\n    project: \"1\",\n    url: \"https://username:password@github.com/org/repository.git\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.ProjectMirror(\"foo\",\n    project=\"1\",\n    url=\"https://username:password@github.com/org/repository.git\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new GitLab.ProjectMirror(\"foo\", new GitLab.ProjectMirrorArgs\n        {\n            Project = \"1\",\n            Url = \"https://username:password@github.com/org/repository.git\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectMirror(ctx, \"foo\", \u0026gitlab.ProjectMirrorArgs{\n\t\t\tProject: pulumi.String(\"1\"),\n\t\t\tUrl:     pulumi.String(\"https://username:password@github.com/org/repository.git\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project mirror can be imported using an id made up of `project_id:mirror_id`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectMirror:ProjectMirror foo \"12345:1337\"\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the mirror is enabled.\n"
                },
                "keepDivergentRefs": {
                    "type": "boolean",
                    "description": "Determines if divergent refs are skipped.\n"
                },
                "mirrorId": {
                    "type": "integer",
                    "description": "Mirror ID.\n"
                },
                "onlyProtectedBranches": {
                    "type": "boolean",
                    "description": "Determines if only protected branches are mirrored.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the remote repository to be mirrored.\n"
                }
            },
            "required": [
                "mirrorId",
                "project",
                "url"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the mirror is enabled.\n"
                },
                "keepDivergentRefs": {
                    "type": "boolean",
                    "description": "Determines if divergent refs are skipped.\n"
                },
                "onlyProtectedBranches": {
                    "type": "boolean",
                    "description": "Determines if only protected branches are mirrored.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the remote repository to be mirrored.\n"
                }
            },
            "requiredInputs": [
                "project",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMirror resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if the mirror is enabled.\n"
                    },
                    "keepDivergentRefs": {
                        "type": "boolean",
                        "description": "Determines if divergent refs are skipped.\n"
                    },
                    "mirrorId": {
                        "type": "integer",
                        "description": "Mirror ID.\n"
                    },
                    "onlyProtectedBranches": {
                        "type": "boolean",
                        "description": "Determines if only protected branches are mirrored.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the remote repository to be mirrored.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectShareGroup:ProjectShareGroup": {
            "description": "This resource allows you to share a project with a group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst test = new gitlab.ProjectShareGroup(\"test\", {\n    groupAccess: \"guest\",\n    groupId: 1337,\n    projectId: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntest = gitlab.ProjectShareGroup(\"test\",\n    group_access=\"guest\",\n    group_id=1337,\n    project_id=\"12345\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new GitLab.ProjectShareGroup(\"test\", new GitLab.ProjectShareGroupArgs\n        {\n            GroupAccess = \"guest\",\n            GroupId = 1337,\n            ProjectId = \"12345\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectShareGroup(ctx, \"test\", \u0026gitlab.ProjectShareGroupArgs{\n\t\t\tGroupAccess: pulumi.String(\"guest\"),\n\t\t\tGroupId:     pulumi.Int(1337),\n\t\t\tProjectId:   pulumi.String(\"12345\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project group shares can be imported using an id made up of `projectid:groupid`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectShareGroup:ProjectShareGroup test 12345:1337\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                }
            },
            "required": [
                "groupId",
                "projectId"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n",
                    "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                },
                "groupAccess": {
                    "type": "string",
                    "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project.\n"
                }
            },
            "requiredInputs": [
                "groupId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectShareGroup resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n",
                        "deprecationMessage": "Use `group_access` instead of the `access_level` attribute."
                    },
                    "groupAccess": {
                        "type": "string",
                        "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `master`\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The id of the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/projectVariable:ProjectVariable": {
            "description": "This resource allows you to create and manage CI/CD variables for your GitLab projects.\nFor further information on variables, consult the [gitlab\ndocumentation](https://docs.gitlab.com/ce/ci/variables/README.html#variables).\n\n\u003e **Important:** If your GitLab version is older than 13.4, you may see nondeterministic behavior\nwhen updating or deleting `gitlab.ProjectVariable` resources with non-unique keys, for example if\nthere is another variable with the same key and different environment scope. See\n[this GitLab issue](https://gitlab.com/gitlab-org/gitlab/-/issues/9912).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.ProjectVariable(\"example\", {\n    key: \"project_variable_key\",\n    project: \"12345\",\n    protected: false,\n    value: \"project_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.ProjectVariable(\"example\",\n    key=\"project_variable_key\",\n    project=\"12345\",\n    protected=False,\n    value=\"project_variable_value\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.ProjectVariable(\"example\", new GitLab.ProjectVariableArgs\n        {\n            Key = \"project_variable_key\",\n            Project = \"12345\",\n            Protected = false,\n            Value = \"project_variable_value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewProjectVariable(ctx, \"example\", \u0026gitlab.ProjectVariableArgs{\n\t\t\tKey:       pulumi.String(\"project_variable_key\"),\n\t\t\tProject:   pulumi.String(\"12345\"),\n\t\t\tProtected: pulumi.Bool(false),\n\t\t\tValue:     pulumi.String(\"project_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# GitLab project variables can be imported using an id made up of `project:key:environment_scope`, e.g.\n\n```sh\n $ pulumi import gitlab:index/projectVariable:ProjectVariable example '12345:project_variable_key:*'\n```\n\n ",
            "properties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment_scope of the variable. Defaults to `*`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "required": [
                "key",
                "project",
                "value"
            ],
            "inputProperties": {
                "environmentScope": {
                    "type": "string",
                    "description": "The environment_scope of the variable. Defaults to `*`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "masked": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The name or id of the project.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                },
                "variableType": {
                    "type": "string",
                    "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                }
            },
            "requiredInputs": [
                "key",
                "project",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectVariable resources.\n",
                "properties": {
                    "environmentScope": {
                        "type": "string",
                        "description": "The environment_scope of the variable. Defaults to `*`.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "masked": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be masked if it would have been written to the logs. Defaults to `false`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The name or id of the project.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n"
                    },
                    "variableType": {
                        "type": "string",
                        "description": "The type of a variable. Available types are: env_var (default) and file.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/repositoryFile:RepositoryFile": {
            "description": "\n\n## Import\n\n# A Repository File can be imported using an id made up of `\u003cproject-id\u003e:\u003cbranch-name\u003e:\u003cfile-path\u003e`, e.g.\n\n```sh\n $ pulumi import gitlab:index/repositoryFile:RepositoryFile this 1:main:foo/bar.txt\n```\n\n ",
            "properties": {
                "authorEmail": {
                    "type": "string",
                    "description": "Email of the commit author.\n"
                },
                "authorName": {
                    "type": "string",
                    "description": "Name of the commit author.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch to which to commit to.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message.\n"
                },
                "content": {
                    "type": "string",
                    "description": "base64 encoded file content. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "Content encoding.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "startBranch": {
                    "type": "string",
                    "description": "Name of the branch to start the new commit from.\n"
                }
            },
            "required": [
                "branch",
                "commitMessage",
                "content",
                "encoding",
                "filePath",
                "project"
            ],
            "inputProperties": {
                "authorEmail": {
                    "type": "string",
                    "description": "Email of the commit author.\n"
                },
                "authorName": {
                    "type": "string",
                    "description": "Name of the commit author.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch to which to commit to.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message.\n"
                },
                "content": {
                    "type": "string",
                    "description": "base64 encoded file content. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "startBranch": {
                    "type": "string",
                    "description": "Name of the branch to start the new commit from.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "commitMessage",
                "content",
                "filePath",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryFile resources.\n",
                "properties": {
                    "authorEmail": {
                        "type": "string",
                        "description": "Email of the commit author.\n"
                    },
                    "authorName": {
                        "type": "string",
                        "description": "Name of the commit author.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Name of the branch to which to commit to.\n"
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "Commit message.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "base64 encoded file content. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "Content encoding.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    },
                    "startBranch": {
                        "type": "string",
                        "description": "Name of the branch to start the new commit from.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceGithub:ServiceGithub": {
            "description": "**NOTE**: requires either EE (self-hosted) or Silver and above (GitLab.com).\n\nThis resource manages a [GitHub integration](https://docs.gitlab.com/ee/user/project/integrations/github.html) that updates pipeline statuses on a GitHub repo's pull requests.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst github = new gitlab.ServiceGithub(\"github\", {\n    project: awesomeProject.id,\n    token: \"REDACTED\",\n    repositoryUrl: \"https://github.com/gitlabhq/terraform-provider-gitlab\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\ngithub = gitlab.ServiceGithub(\"github\",\n    project=awesome_project.id,\n    token=\"REDACTED\",\n    repository_url=\"https://github.com/gitlabhq/terraform-provider-gitlab\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var github = new GitLab.ServiceGithub(\"github\", new GitLab.ServiceGithubArgs\n        {\n            Project = awesomeProject.Id,\n            Token = \"REDACTED\",\n            RepositoryUrl = \"https://github.com/gitlabhq/terraform-provider-gitlab\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceGithub(ctx, \"github\", \u0026gitlab.ServiceGithubArgs{\n\t\t\tProject:       awesomeProject.ID(),\n\t\t\tToken:         pulumi.String(\"REDACTED\"),\n\t\t\tRepositoryUrl: pulumi.String(\"https://github.com/gitlabhq/terraform-provider-gitlab\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/serviceGithub:ServiceGithub # You can import a service_github state using `\u003cresource\u003e \u003cproject_id\u003e`\n```\n\n\n\n```sh\n $ pulumi import gitlab:index/serviceGithub:ServiceGithub github 1\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the integration is active.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.\n"
                },
                "staticContext": {
                    "type": "boolean",
                    "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time.\n"
                }
            },
            "required": [
                "active",
                "createdAt",
                "project",
                "repositoryUrl",
                "title",
                "token",
                "updatedAt"
            ],
            "inputProperties": {
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.\n"
                },
                "staticContext": {
                    "type": "boolean",
                    "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                }
            },
            "requiredInputs": [
                "project",
                "repositoryUrl",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceGithub resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the integration is active.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "repositoryUrl": {
                        "type": "string",
                        "description": "The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.\n"
                    },
                    "staticContext": {
                        "type": "boolean",
                        "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as *required* in GitHub. See [Static / dynamic status check names] to learn more.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A GitHub personal access token with at least `repo:status` scope.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceJira:ServiceJira": {
            "description": "This resource allows you to manage Jira integration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst jira = new gitlab.ServiceJira(\"jira\", {\n    project: awesomeProject.id,\n    url: \"https://jira.example.com\",\n    username: \"user\",\n    password: \"mypass\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\njira = gitlab.ServiceJira(\"jira\",\n    project=awesome_project.id,\n    url=\"https://jira.example.com\",\n    username=\"user\",\n    password=\"mypass\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var jira = new GitLab.ServiceJira(\"jira\", new GitLab.ServiceJiraArgs\n        {\n            Project = awesomeProject.Id,\n            Url = \"https://jira.example.com\",\n            Username = \"user\",\n            Password = \"mypass\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceJira(ctx, \"jira\", \u0026gitlab.ServiceJiraArgs{\n\t\t\tProject:  awesomeProject.ID(),\n\t\t\tUrl:      pulumi.String(\"https://jira.example.com\"),\n\t\t\tUsername: pulumi.String(\"user\"),\n\t\t\tPassword: pulumi.String(\"mypass\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a service_jira state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/serviceJira:ServiceJira jira 1\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the integration is active.\n"
                },
                "commentOnEventEnabled": {
                    "type": "boolean",
                    "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                },
                "commitEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for commit events\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "jiraIssueTransitionId": {
                    "type": "string",
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user created to be used with GitLab/JIRA.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag_push events.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user created to be used with GitLab/JIRA.\n"
                }
            },
            "required": [
                "active",
                "commentOnEventEnabled",
                "commitEvents",
                "createdAt",
                "issuesEvents",
                "jobEvents",
                "mergeRequestsEvents",
                "noteEvents",
                "password",
                "pipelineEvents",
                "project",
                "pushEvents",
                "tagPushEvents",
                "title",
                "updatedAt",
                "url",
                "username"
            ],
            "inputProperties": {
                "commentOnEventEnabled": {
                    "type": "boolean",
                    "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                },
                "commitEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for commit events\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "jiraIssueTransitionId": {
                    "type": "string",
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for job events.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user created to be used with GitLab/JIRA.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag_push events.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user created to be used with GitLab/JIRA.\n"
                }
            },
            "requiredInputs": [
                "password",
                "project",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceJira resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the integration is active.\n"
                    },
                    "commentOnEventEnabled": {
                        "type": "boolean",
                        "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)\n"
                    },
                    "commitEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for commit events\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for issues events.\n"
                    },
                    "jiraIssueTransitionId": {
                        "type": "string",
                        "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration \u003e Issues \u003e Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.\n"
                    },
                    "jobEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for job events.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge request events\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for note events.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user created to be used with GitLab/JIRA.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for push events.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for tag_push events.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user created to be used with GitLab/JIRA.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceMicrosoftTeams:ServiceMicrosoftTeams": {
            "description": "This resource allows you to manage Microsoft Teams integration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst teams = new gitlab.ServiceMicrosoftTeams(\"teams\", {\n    project: awesomeProject.id,\n    webhook: \"https://testurl.com/?token=XYZ\",\n    pushEvents: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\nteams = gitlab.ServiceMicrosoftTeams(\"teams\",\n    project=awesome_project.id,\n    webhook=\"https://testurl.com/?token=XYZ\",\n    push_events=True)\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var teams = new GitLab.ServiceMicrosoftTeams(\"teams\", new GitLab.ServiceMicrosoftTeamsArgs\n        {\n            Project = awesomeProject.Id,\n            Webhook = \"https://testurl.com/?token=XYZ\",\n            PushEvents = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceMicrosoftTeams(ctx, \"teams\", \u0026gitlab.ServiceMicrosoftTeamsArgs{\n\t\t\tProject:    awesomeProject.ID(),\n\t\t\tWebhook:    pulumi.String(\"https://testurl.com/?token=XYZ\"),\n\t\t\tPushEvents: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a service_microsoft_teams state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/serviceMicrosoftTeams:ServiceMicrosoftTeams teams 1\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the integration is active.\n"
                },
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issue events\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Create time.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issue events\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events\n"
                }
            },
            "required": [
                "active",
                "createdAt",
                "project",
                "updatedAt",
                "webhook"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issue events\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issue events\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge request events\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events\n"
                }
            },
            "requiredInputs": [
                "project",
                "webhook"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceMicrosoftTeams resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the integration is active.\n"
                    },
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default*and*protected”. The default value is “default”\n"
                    },
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential issue events\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential note events\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Create time.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for issue events\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge request events\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for note events\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Send notifications for broken pipelines\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for pipeline events\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for push events\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for tag push events\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time.\n"
                    },
                    "webhook": {
                        "type": "string",
                        "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for wiki page events\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/servicePipelinesEmail:ServicePipelinesEmail": {
            "description": "This resource manages a [Pipelines email integration](https://docs.gitlab.com/ee/user/project/integrations/overview.html#integrations-listing) that emails the pipeline status to a list of recipients.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst email = new gitlab.ServicePipelinesEmail(\"email\", {\n    project: awesomeProject.id,\n    recipients: [\"gitlab@user.create\"],\n    notifyOnlyBrokenPipelines: true,\n    branchesToBeNotified: \"all\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\nemail = gitlab.ServicePipelinesEmail(\"email\",\n    project=awesome_project.id,\n    recipients=[\"gitlab@user.create\"],\n    notify_only_broken_pipelines=True,\n    branches_to_be_notified=\"all\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var email = new GitLab.ServicePipelinesEmail(\"email\", new GitLab.ServicePipelinesEmailArgs\n        {\n            Project = awesomeProject.Id,\n            Recipients = \n            {\n                \"gitlab@user.create\",\n            },\n            NotifyOnlyBrokenPipelines = true,\n            BranchesToBeNotified = \"all\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServicePipelinesEmail(ctx, \"email\", \u0026gitlab.ServicePipelinesEmailArgs{\n\t\t\tProject: awesomeProject.ID(),\n\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"gitlab@user.create\"),\n\t\t\t},\n\t\t\tNotifyOnlyBrokenPipelines: pulumi.Bool(true),\n\t\t\tBranchesToBeNotified:      pulumi.String(\"all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a gitlab_service_pipelines_email state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/servicePipelinesEmail:ServicePipelinesEmail email 1\n```\n\n ",
            "properties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. Default is `default`\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Notify only broken pipelines. Default is true.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") email addresses where notifications are sent.\n"
                }
            },
            "required": [
                "project",
                "recipients"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. Default is `default`\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Notify only broken pipelines. Default is true.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") email addresses where notifications are sent.\n"
                }
            },
            "requiredInputs": [
                "project",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePipelinesEmail resources.\n",
                "properties": {
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. Default is `default`\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Notify only broken pipelines. Default is true.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ") email addresses where notifications are sent.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/serviceSlack:ServiceSlack": {
            "description": "This resource allows you to manage Slack notifications integration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst awesomeProject = new gitlab.Project(\"awesomeProject\", {\n    description: \"My awesome project.\",\n    visibilityLevel: \"public\",\n});\nconst slack = new gitlab.ServiceSlack(\"slack\", {\n    project: awesomeProject.id,\n    webhook: \"https://webhook.com\",\n    username: \"myuser\",\n    pushEvents: true,\n    pushChannel: \"push_chan\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nawesome_project = gitlab.Project(\"awesomeProject\",\n    description=\"My awesome project.\",\n    visibility_level=\"public\")\nslack = gitlab.ServiceSlack(\"slack\",\n    project=awesome_project.id,\n    webhook=\"https://webhook.com\",\n    username=\"myuser\",\n    push_events=True,\n    push_channel=\"push_chan\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var awesomeProject = new GitLab.Project(\"awesomeProject\", new GitLab.ProjectArgs\n        {\n            Description = \"My awesome project.\",\n            VisibilityLevel = \"public\",\n        });\n        var slack = new GitLab.ServiceSlack(\"slack\", new GitLab.ServiceSlackArgs\n        {\n            Project = awesomeProject.Id,\n            Webhook = \"https://webhook.com\",\n            Username = \"myuser\",\n            PushEvents = true,\n            PushChannel = \"push_chan\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tawesomeProject, err := gitlab.NewProject(ctx, \"awesomeProject\", \u0026gitlab.ProjectArgs{\n\t\t\tDescription:     pulumi.String(\"My awesome project.\"),\n\t\t\tVisibilityLevel: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.NewServiceSlack(ctx, \"slack\", \u0026gitlab.ServiceSlackArgs{\n\t\t\tProject:     awesomeProject.ID(),\n\t\t\tWebhook:     pulumi.String(\"https://webhook.com\"),\n\t\t\tUsername:    pulumi.String(\"myuser\"),\n\t\t\tPushEvents:  pulumi.Bool(true),\n\t\t\tPushChannel: pulumi.String(\"push_chan\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a gitlab_service_slack.slack state using the project ID, e.g.\n\n```sh\n $ pulumi import gitlab:index/serviceSlack:ServiceSlack email 1\n```\n\n ",
            "properties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default*and*protected\".\n"
                },
                "confidentialIssueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive confidential issue events notifications.\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events.\n"
                },
                "issueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive issue events notifications.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "jobEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for job events. **ATTENTION**: This attribute is currently not being submitted to the GitLab API, due to https://github.com/xanzy/go-gitlab/issues/1354.\n"
                },
                "mergeRequestChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive merge request events notifications.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge requests events.\n"
                },
                "noteChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive note events notifications.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines.\n"
                },
                "notifyOnlyDefaultBranch": {
                    "type": "boolean",
                    "description": "This parameter has been replaced with `branches_to_be_notified`.\n",
                    "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                },
                "pipelineChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive pipeline events notifications.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive push events notifications.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive tag push events notifications.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                },
                "wikiPageChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive wiki page events notifications.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events.\n"
                }
            },
            "required": [
                "branchesToBeNotified",
                "confidentialIssuesEvents",
                "confidentialNoteEvents",
                "issuesEvents",
                "jobEvents",
                "mergeRequestsEvents",
                "noteEvents",
                "notifyOnlyBrokenPipelines",
                "notifyOnlyDefaultBranch",
                "pipelineEvents",
                "project",
                "pushEvents",
                "tagPushEvents",
                "webhook",
                "wikiPageEvents"
            ],
            "inputProperties": {
                "branchesToBeNotified": {
                    "type": "string",
                    "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default*and*protected\".\n"
                },
                "confidentialIssueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive confidential issue events notifications.\n"
                },
                "confidentialIssuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential issues events.\n"
                },
                "confidentialNoteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for confidential note events.\n"
                },
                "issueChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive issue events notifications.\n"
                },
                "issuesEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for issues events.\n"
                },
                "mergeRequestChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive merge request events notifications.\n"
                },
                "mergeRequestsEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for merge requests events.\n"
                },
                "noteChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive note events notifications.\n"
                },
                "noteEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for note events.\n"
                },
                "notifyOnlyBrokenPipelines": {
                    "type": "boolean",
                    "description": "Send notifications for broken pipelines.\n"
                },
                "notifyOnlyDefaultBranch": {
                    "type": "boolean",
                    "description": "This parameter has been replaced with `branches_to_be_notified`.\n",
                    "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                },
                "pipelineChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive pipeline events notifications.\n"
                },
                "pipelineEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for pipeline events.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project you want to activate integration on.\n"
                },
                "pushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive push events notifications.\n"
                },
                "pushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for push events.\n"
                },
                "tagPushChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive tag push events notifications.\n"
                },
                "tagPushEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for tag push events.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use.\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                },
                "wikiPageChannel": {
                    "type": "string",
                    "description": "The name of the channel to receive wiki page events notifications.\n"
                },
                "wikiPageEvents": {
                    "type": "boolean",
                    "description": "Enable notifications for wiki page events.\n"
                }
            },
            "requiredInputs": [
                "project",
                "webhook"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceSlack resources.\n",
                "properties": {
                    "branchesToBeNotified": {
                        "type": "string",
                        "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default*and*protected\".\n"
                    },
                    "confidentialIssueChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive confidential issue events notifications.\n"
                    },
                    "confidentialIssuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential issues events.\n"
                    },
                    "confidentialNoteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for confidential note events.\n"
                    },
                    "issueChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive issue events notifications.\n"
                    },
                    "issuesEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for issues events.\n"
                    },
                    "jobEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for job events. **ATTENTION**: This attribute is currently not being submitted to the GitLab API, due to https://github.com/xanzy/go-gitlab/issues/1354.\n"
                    },
                    "mergeRequestChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive merge request events notifications.\n"
                    },
                    "mergeRequestsEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for merge requests events.\n"
                    },
                    "noteChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive note events notifications.\n"
                    },
                    "noteEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for note events.\n"
                    },
                    "notifyOnlyBrokenPipelines": {
                        "type": "boolean",
                        "description": "Send notifications for broken pipelines.\n"
                    },
                    "notifyOnlyDefaultBranch": {
                        "type": "boolean",
                        "description": "This parameter has been replaced with `branches_to_be_notified`.\n",
                        "deprecationMessage": "use 'branches_to_be_notified' argument instead"
                    },
                    "pipelineChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive pipeline events notifications.\n"
                    },
                    "pipelineEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for pipeline events.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "ID of the project you want to activate integration on.\n"
                    },
                    "pushChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive push events notifications.\n"
                    },
                    "pushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for push events.\n"
                    },
                    "tagPushChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive tag push events notifications.\n"
                    },
                    "tagPushEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for tag push events.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use.\n"
                    },
                    "webhook": {
                        "type": "string",
                        "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)\n"
                    },
                    "wikiPageChannel": {
                        "type": "string",
                        "description": "The name of the channel to receive wiki page events notifications.\n"
                    },
                    "wikiPageEvents": {
                        "type": "boolean",
                        "description": "Enable notifications for wiki page events.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/tagProtection:TagProtection": {
            "description": "This resource allows you to protect a specific tag or wildcard by an access level so that the user with less access level cannot Create the tags.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst tagProtect = new gitlab.TagProtection(\"TagProtect\", {\n    createAccessLevel: \"developer\",\n    project: \"12345\",\n    tag: \"TagProtected\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\ntag_protect = gitlab.TagProtection(\"tagProtect\",\n    create_access_level=\"developer\",\n    project=\"12345\",\n    tag=\"TagProtected\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tagProtect = new GitLab.TagProtection(\"tagProtect\", new GitLab.TagProtectionArgs\n        {\n            CreateAccessLevel = \"developer\",\n            Project = \"12345\",\n            Tag = \"TagProtected\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewTagProtection(ctx, \"tagProtect\", \u0026gitlab.TagProtectionArgs{\n\t\t\tCreateAccessLevel: pulumi.String(\"developer\"),\n\t\t\tProject:           pulumi.String(\"12345\"),\n\t\t\tTag:               pulumi.String(\"TagProtected\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# Tag protections can be imported using an id made up of `project_id:tag_name`, e.g.\n\n```sh\n $ pulumi import gitlab:index/tagProtection:TagProtection example 123456789:v1.0.0\n```\n\n ",
            "properties": {
                "createAccessLevel": {
                    "type": "string",
                    "description": "Access levels which are allowed to create. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Name of the tag or wildcard.\n"
                }
            },
            "required": [
                "createAccessLevel",
                "project",
                "tag"
            ],
            "inputProperties": {
                "createAccessLevel": {
                    "type": "string",
                    "description": "Access levels which are allowed to create. Valid values are: `no one`, `developer`, `maintainer`.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The id of the project.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Name of the tag or wildcard.\n"
                }
            },
            "requiredInputs": [
                "createAccessLevel",
                "project",
                "tag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagProtection resources.\n",
                "properties": {
                    "createAccessLevel": {
                        "type": "string",
                        "description": "Access levels which are allowed to create. Valid values are: `no one`, `developer`, `maintainer`.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The id of the project.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Name of the tag or wildcard.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/user:User": {
            "description": "This resource allows you to create and manage GitLab users.\nNote your provider will need to be configured with admin-level access for this resource to work.\n\n\u003e You must specify either `password` or `reset_password`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = new gitlab.User(\"example\", {\n    canCreateGroup: false,\n    email: \"gitlab@user.create\",\n    isAdmin: true,\n    isExternal: true,\n    password: \"superPassword\",\n    projectsLimit: 4,\n    resetPassword: false,\n    username: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.User(\"example\",\n    can_create_group=False,\n    email=\"gitlab@user.create\",\n    is_admin=True,\n    is_external=True,\n    password=\"superPassword\",\n    projects_limit=4,\n    reset_password=False,\n    username=\"example\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new GitLab.User(\"example\", new GitLab.UserArgs\n        {\n            CanCreateGroup = false,\n            Email = \"gitlab@user.create\",\n            IsAdmin = true,\n            IsExternal = true,\n            Password = \"superPassword\",\n            ProjectsLimit = 4,\n            ResetPassword = false,\n            Username = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewUser(ctx, \"example\", \u0026gitlab.UserArgs{\n\t\t\tCanCreateGroup: pulumi.Bool(false),\n\t\t\tEmail:          pulumi.String(\"gitlab@user.create\"),\n\t\t\tIsAdmin:        pulumi.Bool(true),\n\t\t\tIsExternal:     pulumi.Bool(true),\n\t\t\tPassword:       pulumi.String(\"superPassword\"),\n\t\t\tProjectsLimit:  pulumi.Int(4),\n\t\t\tResetPassword:  pulumi.Bool(false),\n\t\t\tUsername:       pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import gitlab:index/user:User # You can import a user to terraform state using `\u003cresource\u003e \u003cid\u003e`.\n```\n\n # The `id` must be an integer for the id of the user you want to import, # for example\n\n```sh\n $ pulumi import gitlab:index/user:User example 42\n```\n\n ",
            "properties": {
                "canCreateGroup": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to enable administrative privileges\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note associated to the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n"
                },
                "projectsLimit": {
                    "type": "integer",
                    "description": "Integer, defaults to 0.  Number of projects user can create.\n"
                },
                "resetPassword": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Send user password reset link.\n"
                },
                "skipConfirmation": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                }
            },
            "required": [
                "email",
                "name",
                "username"
            ],
            "inputProperties": {
                "canCreateGroup": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The e-mail address of the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false.  Whether to enable administrative privileges\n"
                },
                "isExternal": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note associated to the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n"
                },
                "projectsLimit": {
                    "type": "integer",
                    "description": "Integer, defaults to 0.  Number of projects user can create.\n"
                },
                "resetPassword": {
                    "type": "boolean",
                    "description": "Boolean, defaults to false. Send user password reset link.\n"
                },
                "skipConfirmation": {
                    "type": "boolean",
                    "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                }
            },
            "requiredInputs": [
                "email",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "canCreateGroup": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Whether to allow the user to create groups.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The e-mail address of the user.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false.  Whether to enable administrative privileges\n"
                    },
                    "isExternal": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "note": {
                        "type": "string",
                        "description": "The note associated to the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user.\n"
                    },
                    "projectsLimit": {
                        "type": "integer",
                        "description": "Integer, defaults to 0.  Number of projects user can create.\n"
                    },
                    "resetPassword": {
                        "type": "boolean",
                        "description": "Boolean, defaults to false. Send user password reset link.\n"
                    },
                    "skipConfirmation": {
                        "type": "boolean",
                        "description": "Boolean, defaults to true. Whether to skip confirmation.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "gitlab:index/userCustomAttribute:UserCustomAttribute": {
            "description": "This resource allows you to set custom attributes for a user.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst attr = new gitlab.UserCustomAttribute(\"attr\", {\n    key: \"location\",\n    user: 42,\n    value: \"Greenland\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nattr = gitlab.UserCustomAttribute(\"attr\",\n    key=\"location\",\n    user=42,\n    value=\"Greenland\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var attr = new GitLab.UserCustomAttribute(\"attr\", new GitLab.UserCustomAttributeArgs\n        {\n            Key = \"location\",\n            User = 42,\n            Value = \"Greenland\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.NewUserCustomAttribute(ctx, \"attr\", \u0026gitlab.UserCustomAttributeArgs{\n\t\t\tKey:   pulumi.String(\"location\"),\n\t\t\tUser:  pulumi.Int(42),\n\t\t\tValue: pulumi.String(\"Greenland\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# You can import a user custom attribute using an id made up of `{user-id}:{key}`, e.g.\n\n```sh\n $ pulumi import gitlab:index/userCustomAttribute:UserCustomAttribute attr 42:location\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "user": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "required": [
                "key",
                "user",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key for the Custom Attribute.\n"
                },
                "user": {
                    "type": "integer",
                    "description": "The id of the user.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for the Custom Attribute.\n"
                }
            },
            "requiredInputs": [
                "key",
                "user",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserCustomAttribute resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key for the Custom Attribute.\n"
                    },
                    "user": {
                        "type": "integer",
                        "description": "The id of the user.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for the Custom Attribute.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "gitlab:index/getGroup:getGroup": {
            "description": "Provide details about a specific group in the gitlab provider.\n\n\u003e **Note**: exactly one of group_id or full_path must be provided.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// By group's full path\nconst foo = pulumi.output(gitlab.getGroup({\n    fullPath: \"foo/bar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nfoo = gitlab.get_group(full_path=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs\n        {\n            FullPath = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tFullPath: pulumi.StringRef(\"foo/bar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "defaultBranchProtection": {
                        "type": "integer",
                        "description": "Whether developers and maintainers can push to the applicable default branch.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the group.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the group.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Boolean, is LFS enabled for projects in this group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this group.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "Integer, ID of the parent group.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the group.\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Boolean, is request for access enabled to the group.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "The group level registration token to use during runner setup.\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "Visibility level of the group. Possible values are `private`, `internal`, `public`.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web URL of the group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultBranchProtection",
                    "description",
                    "fullName",
                    "fullPath",
                    "groupId",
                    "lfsEnabled",
                    "name",
                    "parentId",
                    "path",
                    "requestAccessEnabled",
                    "runnersToken",
                    "visibilityLevel",
                    "webUrl",
                    "id"
                ]
            }
        },
        "gitlab:index/getGroupMembership:getGroupMembership": {
            "description": "Provide details about a list of group members in the gitlab provider. The results include id, username, name and more about the requested members.\n\n\u003e **Note**: exactly one of group_id or full_path must be provided.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\n// By group's full path\nconst example = pulumi.output(gitlab.getGroupMembership({\n    fullPath: \"foo/bar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_group_membership(full_path=\"foo/bar\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetGroupMembership.InvokeAsync(new GitLab.GetGroupMembershipArgs\n        {\n            FullPath = \"foo/bar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupGroupMembership(ctx, \u0026GetGroupMembershipArgs{\n\t\t\tFullPath: pulumi.StringRef(\"foo/bar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroupMembership.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroupMembership.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.\n"
                    },
                    "fullPath": {
                        "type": "string",
                        "description": "The full path of the group.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getGroupMembershipMember:getGroupMembershipMember"
                        },
                        "description": "The list of group members.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessLevel",
                    "fullPath",
                    "groupId",
                    "members",
                    "id"
                ]
            }
        },
        "gitlab:index/getProject:getProject": {
            "description": "Provide details about a specific project in the gitlab provider. The results include the name of the project, path, description, default branch, etc.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProject({\n    id: \"foo/bar/baz\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project(id=\"foo/bar/baz\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProject.InvokeAsync(new GitLab.GetProjectArgs\n        {\n            Id = \"foo/bar/baz\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tId: pulumi.StringRef(\"foo/bar/baz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The integer or path with namespace that uniquely identifies the project within the gitlab install.\n"
                    },
                    "pathWithNamespace": {
                        "type": "string",
                        "description": "The path of the repository with namespace.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the project is in read-only mode (archived).\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch for the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the project.\n"
                    },
                    "httpUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The integer or path with namespace that uniquely identifies the project within the gitlab install.\n"
                    },
                    "issuesEnabled": {
                        "type": "boolean",
                        "description": "Enable issue tracking for the project.\n"
                    },
                    "lfsEnabled": {
                        "type": "boolean",
                        "description": "Enable LFS for the project.\n"
                    },
                    "mergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Enable merge requests for the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "namespaceId": {
                        "type": "integer",
                        "description": "The namespace (group or user) of the project. Defaults to your user.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the repository.\n"
                    },
                    "pathWithNamespace": {
                        "type": "string",
                        "description": "The path of the repository with namespace.\n"
                    },
                    "pipelinesEnabled": {
                        "type": "boolean",
                        "description": "Enable pipelines for the project.\n"
                    },
                    "pushRules": {
                        "$ref": "#/types/gitlab:index/getProjectPushRules:getProjectPushRules",
                        "description": "Push rules for the project.\n"
                    },
                    "removeSourceBranchAfterMerge": {
                        "type": "boolean",
                        "description": "Enable `Delete source branch` option by default for all new merge requests\n"
                    },
                    "requestAccessEnabled": {
                        "type": "boolean",
                        "description": "Allow users to request member access.\n"
                    },
                    "runnersToken": {
                        "type": "string",
                        "description": "Registration token to use during runner setup.\n"
                    },
                    "snippetsEnabled": {
                        "type": "boolean",
                        "description": "Enable snippets for the project.\n"
                    },
                    "sshUrlToRepo": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the\n"
                    },
                    "visibilityLevel": {
                        "type": "string",
                        "description": "Repositories are created as private by default.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "URL that can be used to find the project in a browser.\n"
                    },
                    "wikiEnabled": {
                        "type": "boolean",
                        "description": "Enable wiki for the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "archived",
                    "defaultBranch",
                    "description",
                    "httpUrlToRepo",
                    "id",
                    "issuesEnabled",
                    "lfsEnabled",
                    "mergeRequestsEnabled",
                    "name",
                    "namespaceId",
                    "path",
                    "pathWithNamespace",
                    "pipelinesEnabled",
                    "pushRules",
                    "removeSourceBranchAfterMerge",
                    "requestAccessEnabled",
                    "runnersToken",
                    "snippetsEnabled",
                    "sshUrlToRepo",
                    "visibilityLevel",
                    "webUrl",
                    "wikiEnabled"
                ]
            }
        },
        "gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch": {
            "description": "Provides details about a specific protected branch in a given project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProjectProtectedBranch({\n    name: \"main\",\n    projectId: \"foo/bar/baz\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project_protected_branch(name=\"main\",\n    project_id=\"foo/bar/baz\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProjectProtectedBranch.InvokeAsync(new GitLab.GetProjectProtectedBranchArgs\n        {\n            Name = \"main\",\n            ProjectId = \"foo/bar/baz\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetProjectProtectedBranch(ctx, \u0026GetProjectProtectedBranchArgs{\n\t\t\tName:      \"main\",\n\t\t\tProjectId: \"foo/bar/baz\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectProtectedBranch.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the protected branch.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The integer or path with namespace that uniquely identifies the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectProtectedBranch.\n",
                "properties": {
                    "allowForcePush": {
                        "type": "boolean",
                        "description": "Whether force push is allowed.\n"
                    },
                    "codeOwnerApprovalRequired": {
                        "type": "boolean",
                        "description": "Reject code pushes that change files listed in the CODEOWNERS file.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "mergeAccessLevels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectProtectedBranchMergeAccessLevel:getProjectProtectedBranchMergeAccessLevel"
                        },
                        "description": "Describes which access levels, users, or groups are allowed to perform the action.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the protected branch.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The integer or path with namespace that uniquely identifies the project.\n"
                    },
                    "pushAccessLevels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectProtectedBranchPushAccessLevel:getProjectProtectedBranchPushAccessLevel"
                        },
                        "description": "Describes which access levels, users, or groups are allowed to perform the action.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowForcePush",
                    "codeOwnerApprovalRequired",
                    "id",
                    "mergeAccessLevels",
                    "name",
                    "projectId",
                    "pushAccessLevels"
                ]
            }
        },
        "gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches": {
            "description": "Provides details about all protected branches in a given project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getProjectProtectedBranches({\n    projectId: \"foo/bar/baz\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_project_protected_branches(project_id=\"foo/bar/baz\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetProjectProtectedBranches.InvokeAsync(new GitLab.GetProjectProtectedBranchesArgs\n        {\n            ProjectId = \"foo/bar/baz\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetProjectProtectedBranches(ctx, \u0026GetProjectProtectedBranchesArgs{\n\t\t\tProjectId: \"foo/bar/baz\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectProtectedBranches.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The integer or path with namespace that uniquely identifies the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectProtectedBranches.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The integer or path with namespace that uniquely identifies the project.\n"
                    },
                    "protectedBranches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectProtectedBranchesProtectedBranch:getProjectProtectedBranchesProtectedBranch"
                        },
                        "description": "A list of protected branches, as defined below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "protectedBranches",
                    "id"
                ]
            }
        },
        "gitlab:index/getProjects:getProjects": {
            "description": "Provide details about a list of projects in the Gitlab provider. Listing all projects and group projects with [project filtering](https://docs.gitlab.com/ee/api/projects.html#list-user-projects) or [group project filtering](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects) is supported.\n\n\u003e **NOTE**: This data source supports all available filters exposed by the `xanzy/go-gitlab` package, which might not expose all available filters exposed by the Gitlab APIs.\n\n\u003e **NOTE**: The owner sub-attributes are only populated if the Gitlab token used has an administrator scope.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst mygroup = gitlab.getGroup({\n    fullPath: \"mygroup\",\n});\nconst groupProjects = mygroup.then(mygroup =\u003e gitlab.getProjects({\n    groupId: mygroup.id,\n    orderBy: \"name\",\n    includeSubgroups: true,\n    withShared: false,\n}));\nconst projects = gitlab.getProjects({\n    search: \"postgresql\",\n    visibility: \"private\",\n});\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nmygroup = gitlab.get_group(full_path=\"mygroup\")\ngroup_projects = gitlab.get_projects(group_id=mygroup.id,\n    order_by=\"name\",\n    include_subgroups=True,\n    with_shared=False)\nprojects = gitlab.get_projects(search=\"postgresql\",\n    visibility=\"private\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mygroup = Output.Create(GitLab.GetGroup.InvokeAsync(new GitLab.GetGroupArgs\n        {\n            FullPath = \"mygroup\",\n        }));\n        var groupProjects = mygroup.Apply(mygroup =\u003e Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs\n        {\n            GroupId = mygroup.Id,\n            OrderBy = \"name\",\n            IncludeSubgroups = true,\n            WithShared = false,\n        })));\n        var projects = Output.Create(GitLab.GetProjects.InvokeAsync(new GitLab.GetProjectsArgs\n        {\n            Search = \"postgresql\",\n            Visibility = \"private\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmygroup, err := gitlab.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tFullPath: pulumi.StringRef(\"mygroup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.GetProjects(ctx, \u0026GetProjectsArgs{\n\t\t\tGroupId:          pulumi.IntRef(mygroup.Id),\n\t\t\tOrderBy:          pulumi.StringRef(\"name\"),\n\t\t\tIncludeSubgroups: pulumi.BoolRef(true),\n\t\t\tWithShared:       pulumi.BoolRef(false),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.GetProjects(ctx, \u0026GetProjectsArgs{\n\t\t\tSearch:     pulumi.StringRef(\"postgresql\"),\n\t\t\tVisibility: pulumi.StringRef(\"private\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "Limit by archived status.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.\n"
                    },
                    "includeSubgroups": {
                        "type": "boolean",
                        "description": "Include projects in subgroups of this group. Default is `false`. Needs `group_id`.\n"
                    },
                    "maxQueryablePages": {
                        "type": "integer",
                        "description": "The maximum number of project results pages that may be queried. Prevents overloading your Gitlab instance in case of a misconfiguration.\n"
                    },
                    "membership": {
                        "type": "boolean",
                        "description": "Limit by projects that the current user is a member of.\n"
                    },
                    "minAccessLevel": {
                        "type": "integer",
                        "description": "Limit to projects where current user has at least this access level, refer to the [official documentation](https://docs.gitlab.com/ee/api/members.html) for values. Cannot be used with `group_id`.\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Return projects ordered by `id`, `name`, `path`, `created_at`, `updated_at`, or `last_activity_at` fields. Default is `created_at`.\n"
                    },
                    "owned": {
                        "type": "boolean",
                        "description": "Limit by projects owned by the current user.\n"
                    },
                    "page": {
                        "type": "integer",
                        "description": "The first page to begin the query on.\n"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "The number of results to return per page.\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Return list of authorized projects matching the search criteria.\n"
                    },
                    "simple": {
                        "type": "boolean",
                        "description": "Return only the ID, URL, name, and path of each project.\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Return projects sorted in `asc` or `desc` order. Default is `desc`.\n"
                    },
                    "starred": {
                        "type": "boolean",
                        "description": "Limit by projects starred by the current user.\n"
                    },
                    "statistics": {
                        "type": "boolean",
                        "description": "Include project statistics. Cannot be used with `group_id`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Limit by visibility `public`, `internal`, or `private`.\n"
                    },
                    "withCustomAttributes": {
                        "type": "boolean",
                        "description": "Include custom attributes in response *(admins only)*.\n"
                    },
                    "withIssuesEnabled": {
                        "type": "boolean",
                        "description": "Limit by projects with issues feature enabled. Default is `false`.\n"
                    },
                    "withMergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Limit by projects with merge requests feature enabled. Default is `false`.\n"
                    },
                    "withProgrammingLanguage": {
                        "type": "string",
                        "description": "Limit by projects which use the given programming language. Cannot be used with `group_id`.\n"
                    },
                    "withShared": {
                        "type": "boolean",
                        "description": "Include projects shared to this group. Default is `true`. Needs `group_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "Limit by archived status.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeSubgroups": {
                        "type": "boolean",
                        "description": "Include projects in subgroups of this group. Default is `false`. Needs `group_id`.\n"
                    },
                    "maxQueryablePages": {
                        "type": "integer",
                        "description": "The maximum number of project results pages that may be queried. Prevents overloading your Gitlab instance in case of a misconfiguration.\n"
                    },
                    "membership": {
                        "type": "boolean",
                        "description": "Limit by projects that the current user is a member of.\n"
                    },
                    "minAccessLevel": {
                        "type": "integer",
                        "description": "Limit to projects where current user has at least this access level, refer to the [official documentation](https://docs.gitlab.com/ee/api/members.html) for values. Cannot be used with `group_id`.\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Return projects ordered by `id`, `name`, `path`, `created_at`, `updated_at`, or `last_activity_at` fields. Default is `created_at`.\n"
                    },
                    "owned": {
                        "type": "boolean",
                        "description": "Limit by projects owned by the current user.\n"
                    },
                    "page": {
                        "type": "integer",
                        "description": "The first page to begin the query on.\n"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "The number of results to return per page.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list containing the projects matching the supplied arguments\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Return list of authorized projects matching the search criteria.\n"
                    },
                    "simple": {
                        "type": "boolean",
                        "description": "Return only the ID, URL, name, and path of each project.\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Return projects sorted in `asc` or `desc` order. Default is `desc`.\n"
                    },
                    "starred": {
                        "type": "boolean",
                        "description": "Limit by projects starred by the current user.\n"
                    },
                    "statistics": {
                        "type": "boolean",
                        "description": "Include project statistics. Cannot be used with `group_id`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Limit by visibility `public`, `internal`, or `private`.\n"
                    },
                    "withCustomAttributes": {
                        "type": "boolean",
                        "description": "Include custom attributes in response *(admins only)*.\n"
                    },
                    "withIssuesEnabled": {
                        "type": "boolean",
                        "description": "Limit by projects with issues feature enabled. Default is `false`.\n"
                    },
                    "withMergeRequestsEnabled": {
                        "type": "boolean",
                        "description": "Limit by projects with merge requests feature enabled. Default is `false`.\n"
                    },
                    "withProgrammingLanguage": {
                        "type": "string",
                        "description": "Limit by projects which use the given programming language. Cannot be used with `group_id`.\n"
                    },
                    "withShared": {
                        "type": "boolean",
                        "description": "Include projects shared to this group. Default is `true`. Needs `group_id`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "gitlab:index/getUser:getUser": {
            "description": "Provide details about a specific user in the gitlab provider. Especially the ability to lookup the id for linking to other resources.\n\n\u003e Some attributes might not be returned depending on if you're an admin or not. Please refer to [Gitlab documentation](https://docs.gitlab.com/ce/api/users.html#single-user) for more details.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The public email address of the user. **Note**: before GitLab 14.8 the lookup was based on the users primary email address.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The ID of the user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "The avatar URL of the user.\n"
                    },
                    "bio": {
                        "type": "string",
                        "description": "The bio of the user.\n"
                    },
                    "canCreateGroup": {
                        "type": "boolean",
                        "description": "Whether the user can create groups.\n"
                    },
                    "canCreateProject": {
                        "type": "boolean",
                        "description": "Whether the user can create projects.\n"
                    },
                    "colorSchemeId": {
                        "type": "integer",
                        "description": "User's color scheme ID.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date the user was created at.\n"
                    },
                    "currentSignInAt": {
                        "type": "string",
                        "description": "Current user's sign-in date.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The public email address of the user. **Note**: before GitLab 14.8 the lookup was based on the users primary email address.\n"
                    },
                    "externUid": {
                        "type": "string",
                        "description": "The external UID of the user.\n"
                    },
                    "external": {
                        "type": "boolean",
                        "description": "Whether the user is external.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Whether the user is an admin.\n"
                    },
                    "lastSignInAt": {
                        "type": "string",
                        "description": "Last user's sign-in date.\n"
                    },
                    "linkedin": {
                        "type": "string",
                        "description": "LinkedIn profile of the user.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the user.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "note": {
                        "type": "string",
                        "description": "Admin notes for this user.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The organization of the user.\n"
                    },
                    "projectsLimit": {
                        "type": "integer",
                        "description": "Number of projects the user can create.\n"
                    },
                    "skype": {
                        "type": "string",
                        "description": "Skype username of the user.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Whether the user is active or blocked.\n"
                    },
                    "themeId": {
                        "type": "integer",
                        "description": "User's theme ID.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter username of the user.\n"
                    },
                    "twoFactorEnabled": {
                        "type": "boolean",
                        "description": "Whether user's two-factor auth is enabled.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The ID of the user.\n"
                    },
                    "userProvider": {
                        "type": "string",
                        "description": "The UID provider of the user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    },
                    "websiteUrl": {
                        "type": "string",
                        "description": "User's website URL.\n"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "bio",
                    "canCreateGroup",
                    "canCreateProject",
                    "colorSchemeId",
                    "createdAt",
                    "currentSignInAt",
                    "email",
                    "externUid",
                    "external",
                    "isAdmin",
                    "lastSignInAt",
                    "linkedin",
                    "location",
                    "name",
                    "note",
                    "organization",
                    "projectsLimit",
                    "skype",
                    "state",
                    "themeId",
                    "twitter",
                    "twoFactorEnabled",
                    "userId",
                    "userProvider",
                    "username",
                    "websiteUrl",
                    "id"
                ]
            }
        },
        "gitlab:index/getUsers:getUsers": {
            "description": "Provide details about a list of users in the gitlab provider. The results include id, username, email, name and more about the requested users. Users can also be sorted and filtered using several options.\n\n**NOTE**: Some available options require administrator privileges. Please visit [Gitlab API documentation][users_for_admins] for more information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gitlab from \"@pulumi/gitlab\";\n\nconst example = pulumi.output(gitlab.getUsers({\n    createdBefore: \"2019-01-01\",\n    orderBy: \"name\",\n    sort: \"desc\",\n}));\nconst example_two = pulumi.output(gitlab.getUsers({\n    search: \"username\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_gitlab as gitlab\n\nexample = gitlab.get_users(created_before=\"2019-01-01\",\n    order_by=\"name\",\n    sort=\"desc\")\nexample_two = gitlab.get_users(search=\"username\")\n```\n```csharp\nusing Pulumi;\nusing GitLab = Pulumi.GitLab;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(GitLab.GetUsers.InvokeAsync(new GitLab.GetUsersArgs\n        {\n            CreatedBefore = \"2019-01-01\",\n            OrderBy = \"name\",\n            Sort = \"desc\",\n        }));\n        var example_two = Output.Create(GitLab.GetUsers.InvokeAsync(new GitLab.GetUsersArgs\n        {\n            Search = \"username\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := gitlab.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tCreatedBefore: pulumi.StringRef(\"2019-01-01\"),\n\t\t\tOrderBy:       pulumi.StringRef(\"name\"),\n\t\t\tSort:          pulumi.StringRef(\"desc\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = gitlab.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tSearch: pulumi.StringRef(\"username\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Filter users that are active.\n"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Filter users that are blocked.\n"
                    },
                    "createdAfter": {
                        "type": "string",
                        "description": "Search for users created after a specific date. (Requires administrator privileges)\n"
                    },
                    "createdBefore": {
                        "type": "string",
                        "description": "Search for users created before a specific date. (Requires administrator privileges)\n"
                    },
                    "externProvider": {
                        "type": "string",
                        "description": "Lookup users by external provider. (Requires administrator privileges)\n"
                    },
                    "externUid": {
                        "type": "string",
                        "description": "Lookup users by external UID. (Requires administrator privileges)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Order the users' list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Search users by username, name or email.\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Sort users' list in asc or desc order. (Requires administrator privileges)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Filter users that are active.\n"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Filter users that are blocked.\n"
                    },
                    "createdAfter": {
                        "type": "string",
                        "description": "Search for users created after a specific date. (Requires administrator privileges)\n"
                    },
                    "createdBefore": {
                        "type": "string",
                        "description": "Search for users created before a specific date. (Requires administrator privileges)\n"
                    },
                    "externProvider": {
                        "type": "string",
                        "description": "Lookup users by external provider. (Requires administrator privileges)\n"
                    },
                    "externUid": {
                        "type": "string",
                        "description": "Lookup users by external UID. (Requires administrator privileges)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Order the users' list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Search users by username, name or email.\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Sort users' list in asc or desc order. (Requires administrator privileges)\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/gitlab:index/getUsersUser:getUsersUser"
                        },
                        "description": "The list of users.\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "gitlab": "GitLab"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-gitlab/sdk/v4/go/gitlab"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0",
                "builtin-modules": "3.0.0",
                "read-package-tree": "^5.2.1",
                "resolve": "^1.7.1"
            },
            "devDependencies": {
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing GitLab resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-gitlab` repo](https://github.com/pulumi/pulumi-gitlab/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`gitlabhq/terraform-provider-gitlab` repo](https://github.com/gitlabhq/terraform-provider-gitlab/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/gitlabhq/terraform-provider-gitlab)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-gitlab` repo](https://github.com/pulumi/pulumi-gitlab/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`gitlabhq/terraform-provider-gitlab` repo](https://github.com/gitlabhq/terraform-provider-gitlab/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}